!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";(function(e,r){n.d(t,"a",function(){return a});var i=function(){this._tweens={},this._tweensAddedDuringUpdate={}};i.prototype={getAll:function(){return Object.keys(this._tweens).map(function(e){return this._tweens[e]}.bind(this))},removeAll:function(){this._tweens={}},add:function(e){this._tweens[e.getId()]=e,this._tweensAddedDuringUpdate[e.getId()]=e},remove:function(e){delete this._tweens[e.getId()],delete this._tweensAddedDuringUpdate[e.getId()]},update:function(e,t){var n=Object.keys(this._tweens);if(0===n.length)return!1;for(e=void 0!==e?e:a.now();0<n.length;){this._tweensAddedDuringUpdate={};for(var r=0;r<n.length;r++){var i=this._tweens[n[r]];i&&!1===i.update(e)&&(i._isPlaying=!1,t||delete this._tweens[n[r]])}n=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var a=new i;a.Group=i,a._nextId=0,a.nextId=function(){return a._nextId++},"undefined"==typeof self&&void 0!==e&&e.hrtime?a.now=function(){var t=e.hrtime();return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof self&&void 0!==self.performance&&void 0!==self.performance.now?a.now=self.performance.now.bind(self.performance):void 0!==Date.now?a.now=Date.now:a.now=function(){return(new Date).getTime()},a.Tween=function(e,t){this._object=e,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=null,this._easingFunction=a.Easing.Linear.None,this._interpolationFunction=a.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=t||a,this._id=a.nextId()},a.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(e,t){return this._valuesEnd=Object.create(e),void 0!==t&&(this._duration=t),this},duration:function(e){return this._duration=e,this},start:function(e){for(var t in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==e?"string"==typeof e?a.now()+parseFloat(e):e:a.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[t]instanceof Array){if(0===this._valuesEnd[t].length)continue;this._valuesEnd[t]=[this._object[t]].concat(this._valuesEnd[t])}void 0!==this._object[t]&&(this._valuesStart[t]=this._object[t],this._valuesStart[t]instanceof Array==0&&(this._valuesStart[t]*=1),this._valuesStartRepeat[t]=this._valuesStart[t]||0)}return this},stop:function(){return this._isPlaying&&(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens()),this},end:function(){return this.update(1/0),this},stopChainedTweens:function(){for(var e=0,t=this._chainedTweens.length;e<t;e++)this._chainedTweens[e].stop()},group:function(e){return this._group=e,this},delay:function(e){return this._delayTime=e,this},repeat:function(e){return this._repeat=e,this},repeatDelay:function(e){return this._repeatDelayTime=e,this},yoyo:function(e){return this._yoyo=e,this},easing:function(e){return this._easingFunction=e,this},interpolation:function(e){return this._interpolationFunction=e,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(e){return this._onStartCallback=e,this},onUpdate:function(e){return this._onUpdateCallback=e,this},onComplete:function(e){return this._onCompleteCallback=e,this},onStop:function(e){return this._onStopCallback=e,this},update:function(e){var t,n,r;if(e<this._startTime)return!0;for(t in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),n=(e-this._startTime)/this._duration,n=0===this._duration||1<n?1:n,r=this._easingFunction(n),this._valuesEnd)if(void 0!==this._valuesStart[t]){var i=this._valuesStart[t]||0,a=this._valuesEnd[t];a instanceof Array?this._object[t]=this._interpolationFunction(a,r):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?i+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[t]=i+(a-i)*r))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object),1!==n)return!0;if(0<this._repeat){for(t in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[t]&&(this._valuesStartRepeat[t]=this._valuesStartRepeat[t]+parseFloat(this._valuesEnd[t])),this._yoyo){var o=this._valuesStartRepeat[t];this._valuesStartRepeat[t]=this._valuesEnd[t],this._valuesEnd[t]=o}this._valuesStart[t]=this._valuesStartRepeat[t]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=e+this._repeatDelayTime:this._startTime=e+this._delayTime,!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var s=0,c=this._chainedTweens.length;s<c;s++)this._chainedTweens[s].start(this._startTime+this._duration);return!1}},a.Easing={Linear:{None:function(e){return e}},Quadratic:{In:function(e){return e*e},Out:function(e){return e*(2-e)},InOut:function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)}},Cubic:{In:function(e){return e*e*e},Out:function(e){return--e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)}},Quartic:{In:function(e){return e*e*e*e},Out:function(e){return 1- --e*e*e*e},InOut:function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)}},Quintic:{In:function(e){return e*e*e*e*e},Out:function(e){return--e*e*e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)}},Sinusoidal:{In:function(e){return 1-Math.cos(e*Math.PI/2)},Out:function(e){return Math.sin(e*Math.PI/2)},InOut:function(e){return.5*(1-Math.cos(Math.PI*e))}},Exponential:{In:function(e){return 0===e?0:Math.pow(1024,e-1)},Out:function(e){return 1===e?1:1-Math.pow(2,-10*e)},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(2-Math.pow(2,-10*(e-1)))}},Circular:{In:function(e){return 1-Math.sqrt(1-e*e)},Out:function(e){return Math.sqrt(1- --e*e)},InOut:function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)}},Elastic:{In:function(e){return 0===e?0:1===e?1:-Math.pow(2,10*(e-1))*Math.sin(5*(e-1.1)*Math.PI)},Out:function(e){return 0===e?0:1===e?1:Math.pow(2,-10*e)*Math.sin(5*(e-.1)*Math.PI)+1},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?-.5*Math.pow(2,10*(e-1))*Math.sin(5*(e-1.1)*Math.PI):.5*Math.pow(2,-10*(e-1))*Math.sin(5*(e-1.1)*Math.PI)+1}},Back:{In:function(e){return e*e*(2.70158*e-1.70158)},Out:function(e){return--e*e*(2.70158*e+1.70158)+1},InOut:function(e){var t=2.5949095;return(e*=2)<1?e*e*((1+t)*e-t)*.5:.5*((e-=2)*e*((1+t)*e+t)+2)}},Bounce:{In:function(e){return 1-a.Easing.Bounce.Out(1-e)},Out:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},InOut:function(e){return e<.5?.5*a.Easing.Bounce.In(2*e):.5*a.Easing.Bounce.Out(2*e-1)+.5}}},a.Interpolation={Linear:function(e,t){var n=e.length-1,r=n*t,i=Math.floor(r),o=a.Interpolation.Utils.Linear;return t<0?o(e[0],e[1],r):1<t?o(e[n],e[n-1],n-r):o(e[i],e[n<i+1?n:i+1],r-i)},Bezier:function(e,t){for(var n=0,r=e.length-1,i=Math.pow,o=a.Interpolation.Utils.Bernstein,s=0;s<=r;s++)n+=i(1-t,r-s)*i(t,s)*e[s]*o(r,s);return n},CatmullRom:function(e,t){var n=e.length-1,r=n*t,i=Math.floor(r),o=a.Interpolation.Utils.CatmullRom;return e[0]===e[n]?(t<0&&(i=Math.floor(r=n*(1+t))),o(e[(i-1+n)%n],e[i],e[(i+1)%n],e[(i+2)%n],r-i)):t<0?e[0]-(o(e[0],e[0],e[1],e[1],-r)-e[0]):1<t?e[n]-(o(e[n],e[n],e[n-1],e[n-1],r-n)-e[n]):o(e[i?i-1:0],e[i],e[n<i+1?n:i+1],e[n<i+2?n:i+2],r-i)},Utils:{Linear:function(e,t,n){return(t-e)*n+e},Bernstein:function(e,t){var n=a.Interpolation.Utils.Factorial;return n(e)/n(t)/n(e-t)},Factorial:function(){var e=[1];return function(t){var n=1;if(e[t])return e[t];for(var r=t;1<r;r--)n*=r;return e[t]=n}}(),CatmullRom:function(e,t,n,r,i){var a=.5*(n-e),o=.5*(r-t),s=i*i;return(2*t-2*n+a+o)*(i*s)+(-3*t+3*n-2*a-o)*s+a*i+t}}},function(e){"function"==typeof define&&n(3)?define([],function(){return a}):void 0!==r&&"object"==typeof exports?r.exports=a:void 0!==e&&(e.TWEEN=a)}(void 0)}).call(this,n(1),n(2)(e))},function(e,t){var n,r,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var c,l=[],h=!1,u=-1;function p(){h&&c&&(h=!1,c.length?l=c.concat(l):u=-1,l.length&&d())}function d(){if(!h){var e=s(p);h=!0;for(var t=l.length;t;){for(c=l,l=[];++u<t;)c&&c[u].run();u=-1,t=l.length}c=null,h=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new f(e,t)),1!==l.length||h||s(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";function r(){}n.r(t),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(e){if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var r=arguments[n];if(void 0!==r&&null!==r)for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i])}return t}),Object.assign(r.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[e]&&-1!==n[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var n=this._listeners[e];if(void 0!==n){var r=n.indexOf(t);-1!==r&&n.splice(r,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners[e.type];if(void 0!==t){e.target=this;for(var n=t.slice(0),r=0,i=n.length;r<i;r++)n[r].call(this,e)}}}});var i,a,o="107",s={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},c={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},l=0,h=1,u=2,p=1,d=2,f=0,m=1,v=2,g=0,y=1,x=2,b=0,w=1,_=2,M=3,T=4,S=5,E=100,A=101,L=102,P=103,R=104,C=200,O=201,I=202,D=203,N=204,z=205,U=206,B=207,F=208,G=209,k=210,H=0,j=1,V=2,W=3,X=4,q=5,Y=6,Z=7,J=0,K=1,Q=2,$=0,ee=1,te=2,ne=3,re=4,ie=5,ae=301,oe=302,se=303,ce=304,le=305,he=306,ue=307,pe=1e3,de=1001,fe=1002,me=1003,ve=1004,ge=1005,ye=1006,xe=1007,be=1008,we=1009,_e=1010,Me=1011,Te=1012,Se=1013,Ee=1014,Ae=1015,Le=1016,Pe=1017,Re=1018,Ce=1019,Oe=1020,Ie=1021,De=1022,Ne=1023,ze=1024,Ue=1025,Be=1026,Fe=1027,Ge=1028,ke=33776,He=33777,je=33778,Ve=33779,We=35840,Xe=35841,qe=35842,Ye=35843,Ze=36196,Je=37808,Ke=37809,Qe=37810,$e=37811,et=37812,tt=37813,nt=37814,rt=37815,it=37816,at=37817,ot=37818,st=37819,ct=37820,lt=37821,ht=2200,ut=2201,pt=2400,dt=0,ft=1,mt=2,vt=3e3,gt=3001,yt=3007,xt=3002,bt=3004,wt=3005,_t=3006,Mt=3200,Tt=3201,St=0,Et=1,At=7680,Lt=519,Pt={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var e=[],t=0;t<256;t++)e[t]=(t<16?"0":"")+t.toString(16);return function(){var t=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(e[255&t]+e[t>>8&255]+e[t>>16&255]+e[t>>24&255]+"-"+e[255&n]+e[n>>8&255]+"-"+e[n>>16&15|64]+e[n>>24&255]+"-"+e[63&r|128]+e[r>>8&255]+"-"+e[r>>16&255]+e[r>>24&255]+e[255&i]+e[i>>8&255]+e[i>>16&255]+e[i>>24&255]).toUpperCase()}}(),clamp:function(e,t,n){return Math.max(t,Math.min(n,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,n,r,i){return r+(e-t)*(i-r)/(n-t)},lerp:function(e,t,n){return(1-n)*e+n*t},smoothstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t))*e*(3-2*e)},smootherstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t))*e*e*(e*(6*e-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*Pt.DEG2RAD},radToDeg:function(e){return e*Pt.RAD2DEG},isPowerOfTwo:function(e){return 0==(e&e-1)&&0!==e},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}};function Rt(e,t){this.x=e||0,this.y=t||0}function Ct(e,t,n,r){this._x=e||0,this._y=t||0,this._z=n||0,this._w=void 0!==r?r:1}function Ot(e,t,n){this.x=e||0,this.y=t||0,this.z=n||0}function It(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(Rt.prototype,{width:{get:function(){return this.x},set:function(e){this.x=e}},height:{get:function(){return this.y},set:function(e){this.y=e}}}),Object.assign(Rt.prototype,{isVector2:!0,set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},applyMatrix3:function(e){var t=this.x,n=this.y,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6],this.y=r[1]*t+r[4]*n+r[7],this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},cross:function(e){return this.x*e.y-this.y*e.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var e=Math.atan2(this.y,this.x);return e<0&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,n=this.y-e.y;return t*t+n*n},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this},rotateAround:function(e,t){var n=Math.cos(t),r=Math.sin(t),i=this.x-e.x,a=this.y-e.y;return this.x=i*n-a*r+e.x,this.y=i*r+a*n+e.y,this}}),Object.assign(Ct,{slerp:function(e,t,n,r){return n.copy(e).slerp(t,r)},slerpFlat:function(e,t,n,r,i,a,o){var s=n[r+0],c=n[r+1],l=n[r+2],h=n[r+3],u=i[a+0],p=i[a+1],d=i[a+2],f=i[a+3];if(h!==f||s!==u||c!==p||l!==d){var m=1-o,v=s*u+c*p+l*d+h*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,v*g);m=Math.sin(m*b)/x,o=Math.sin(o*b)/x}var w=o*g;if(s=s*m+u*w,c=c*m+p*w,l=l*m+d*w,h=h*m+f*w,m===1-o){var _=1/Math.sqrt(s*s+c*c+l*l+h*h);s*=_,c*=_,l*=_,h*=_}}e[t]=s,e[t+1]=c,e[t+2]=l,e[t+3]=h}}),Object.defineProperties(Ct.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},w:{get:function(){return this._w},set:function(e){this._w=e,this._onChangeCallback()}}}),Object.assign(Ct.prototype,{isQuaternion:!0,set:function(e,t,n,r){return this._x=e,this._y=t,this._z=n,this._w=r,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this},setFromEuler:function(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=e._x,r=e._y,i=e._z,a=e.order,o=Math.cos,s=Math.sin,c=o(n/2),l=o(r/2),h=o(i/2),u=s(n/2),p=s(r/2),d=s(i/2);return"XYZ"===a?(this._x=u*l*h+c*p*d,this._y=c*p*h-u*l*d,this._z=c*l*d+u*p*h,this._w=c*l*h-u*p*d):"YXZ"===a?(this._x=u*l*h+c*p*d,this._y=c*p*h-u*l*d,this._z=c*l*d-u*p*h,this._w=c*l*h+u*p*d):"ZXY"===a?(this._x=u*l*h-c*p*d,this._y=c*p*h+u*l*d,this._z=c*l*d+u*p*h,this._w=c*l*h-u*p*d):"ZYX"===a?(this._x=u*l*h-c*p*d,this._y=c*p*h+u*l*d,this._z=c*l*d-u*p*h,this._w=c*l*h+u*p*d):"YZX"===a?(this._x=u*l*h+c*p*d,this._y=c*p*h+u*l*d,this._z=c*l*d-u*p*h,this._w=c*l*h-u*p*d):"XZY"===a&&(this._x=u*l*h-c*p*d,this._y=c*p*h-u*l*d,this._z=c*l*d+u*p*h,this._w=c*l*h+u*p*d),!1!==t&&this._onChangeCallback(),this},setFromAxisAngle:function(e,t){var n=t/2,r=Math.sin(n);return this._x=e.x*r,this._y=e.y*r,this._z=e.z*r,this._w=Math.cos(n),this._onChangeCallback(),this},setFromRotationMatrix:function(e){var t,n=e.elements,r=n[0],i=n[4],a=n[8],o=n[1],s=n[5],c=n[9],l=n[2],h=n[6],u=n[10],p=r+s+u;return p>0?(t=.5/Math.sqrt(p+1),this._w=.25/t,this._x=(h-c)*t,this._y=(a-l)*t,this._z=(o-i)*t):r>s&&r>u?(t=2*Math.sqrt(1+r-s-u),this._w=(h-c)/t,this._x=.25*t,this._y=(i+o)/t,this._z=(a+l)/t):s>u?(t=2*Math.sqrt(1+s-r-u),this._w=(a-l)/t,this._x=(i+o)/t,this._y=.25*t,this._z=(c+h)/t):(t=2*Math.sqrt(1+u-r-s),this._w=(o-i)/t,this._x=(a+l)/t,this._y=(c+h)/t,this._z=.25*t),this._onChangeCallback(),this},setFromUnitVectors:function(e,t){var n=e.dot(t)+1;return n<1e-6?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()},angleTo:function(e){return 2*Math.acos(Math.abs(Pt.clamp(this.dot(e),-1,1)))},rotateTowards:function(e,t){var n=this.angleTo(e);if(0===n)return this;var r=Math.min(1,t/n);return this.slerp(e,r),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var n=e._x,r=e._y,i=e._z,a=e._w,o=t._x,s=t._y,c=t._z,l=t._w;return this._x=n*l+a*o+r*c-i*s,this._y=r*l+a*s+i*o-n*c,this._z=i*l+a*c+n*s-r*o,this._w=a*l-n*o-r*s-i*c,this._onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var n=this._x,r=this._y,i=this._z,a=this._w,o=a*e._w+n*e._x+r*e._y+i*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=n,this._y=r,this._z=i,this;var s=1-o*o;if(s<=Number.EPSILON){var c=1-t;return this._w=c*a+t*this._w,this._x=c*n+t*this._x,this._y=c*r+t*this._y,this._z=c*i+t*this._z,this.normalize(),this._onChangeCallback(),this}var l=Math.sqrt(s),h=Math.atan2(l,o),u=Math.sin((1-t)*h)/l,p=Math.sin(t*h)/l;return this._w=a*u+this._w*p,this._x=n*u+this._x*p,this._y=r*u+this._y*p,this._z=i*u+this._z*p,this._onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}}),Object.assign(Ot.prototype,{isVector3:!0,set:function(e,t,n){return this.x=e,this.y=t,this.z=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(){var e=new Ct;return function(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(e.setFromEuler(t))}}(),applyAxisAngle:function(){var e=new Ct;return function(t,n){return this.applyQuaternion(e.setFromAxisAngle(t,n))}}(),applyMatrix3:function(e){var t=this.x,n=this.y,r=this.z,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6]*r,this.y=i[1]*t+i[4]*n+i[7]*r,this.z=i[2]*t+i[5]*n+i[8]*r,this},applyMatrix4:function(e){var t=this.x,n=this.y,r=this.z,i=e.elements,a=1/(i[3]*t+i[7]*n+i[11]*r+i[15]);return this.x=(i[0]*t+i[4]*n+i[8]*r+i[12])*a,this.y=(i[1]*t+i[5]*n+i[9]*r+i[13])*a,this.z=(i[2]*t+i[6]*n+i[10]*r+i[14])*a,this},applyQuaternion:function(e){var t=this.x,n=this.y,r=this.z,i=e.x,a=e.y,o=e.z,s=e.w,c=s*t+a*r-o*n,l=s*n+o*t-i*r,h=s*r+i*n-a*t,u=-i*t-a*n-o*r;return this.x=c*s+u*-i+l*-o-h*-a,this.y=l*s+u*-a+h*-i-c*-o,this.z=h*s+u*-o+c*-a-l*-i,this},project:function(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)},unproject:function(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)},transformDirection:function(e){var t=this.x,n=this.y,r=this.z,i=e.elements;return this.x=i[0]*t+i[4]*n+i[8]*r,this.y=i[1]*t+i[5]*n+i[9]*r,this.z=i[2]*t+i[6]*n+i[10]*r,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},cross:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)},crossVectors:function(e,t){var n=e.x,r=e.y,i=e.z,a=t.x,o=t.y,s=t.z;return this.x=r*s-i*o,this.y=i*a-n*s,this.z=n*o-r*a,this},projectOnVector:function(e){var t=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(t)},projectOnPlane:function(){var e=new Ot;return function(t){return e.copy(this).projectOnVector(t),this.sub(e)}}(),reflect:function(){var e=new Ot;return function(t){return this.sub(e.copy(t).multiplyScalar(2*this.dot(t)))}}(),angleTo:function(e){var t=this.dot(e)/Math.sqrt(this.lengthSq()*e.lengthSq());return Math.acos(Pt.clamp(t,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,n=this.y-e.y,r=this.z-e.z;return t*t+n*n+r*r},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)},setFromSphericalCoords:function(e,t,n){var r=Math.sin(t)*e;return this.x=r*Math.sin(n),this.y=Math.cos(t)*e,this.z=r*Math.cos(n),this},setFromCylindrical:function(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)},setFromCylindricalCoords:function(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this},setFromMatrixPosition:function(e){var t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),r=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=r,this},setFromMatrixColumn:function(e,t){return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}}),Object.assign(It.prototype,{isMatrix3:!0,set:function(e,t,n,r,i,a,o,s,c){var l=this.elements;return l[0]=e,l[1]=r,l[2]=o,l[3]=t,l[4]=i,l[5]=s,l[6]=n,l[7]=a,l[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToBufferAttribute:function(e){void 0===i&&(i=new Ot);for(var t=0,n=e.count;t<n;t++)i.x=e.getX(t),i.y=e.getY(t),i.z=e.getZ(t),i.applyMatrix3(this),e.setXYZ(t,i.x,i.y,i.z);return e},multiply:function(e){return this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var n=e.elements,r=t.elements,i=this.elements,a=n[0],o=n[3],s=n[6],c=n[1],l=n[4],h=n[7],u=n[2],p=n[5],d=n[8],f=r[0],m=r[3],v=r[6],g=r[1],y=r[4],x=r[7],b=r[2],w=r[5],_=r[8];return i[0]=a*f+o*g+s*b,i[3]=a*m+o*y+s*w,i[6]=a*v+o*x+s*_,i[1]=c*f+l*g+h*b,i[4]=c*m+l*y+h*w,i[7]=c*v+l*x+h*_,i[2]=u*f+p*g+d*b,i[5]=u*m+p*y+d*w,i[8]=u*v+p*x+d*_,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],n=e[1],r=e[2],i=e[3],a=e[4],o=e[5],s=e[6],c=e[7],l=e[8];return t*a*l-t*o*c-n*i*l+n*o*s+r*i*c-r*a*s},getInverse:function(e,t){e&&e.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var n=e.elements,r=this.elements,i=n[0],a=n[1],o=n[2],s=n[3],c=n[4],l=n[5],h=n[6],u=n[7],p=n[8],d=p*c-l*u,f=l*h-p*s,m=u*s-c*h,v=i*d+a*f+o*m;if(0===v){if(!0===t)throw new Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");return this.identity()}var g=1/v;return r[0]=d*g,r[1]=(o*u-p*a)*g,r[2]=(l*a-o*c)*g,r[3]=f*g,r[4]=(p*i-o*h)*g,r[5]=(o*s-l*i)*g,r[6]=m*g,r[7]=(a*h-u*i)*g,r[8]=(c*i-a*s)*g,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},setUvTransform:function(e,t,n,r,i,a,o){var s=Math.cos(i),c=Math.sin(i);this.set(n*s,n*c,-n*(s*a+c*o)+a+e,-r*c,r*s,-r*(-c*a+s*o)+o+t,0,0,1)},scale:function(e,t){var n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this},rotate:function(e){var t=Math.cos(e),n=Math.sin(e),r=this.elements,i=r[0],a=r[3],o=r[6],s=r[1],c=r[4],l=r[7];return r[0]=t*i+n*s,r[3]=t*a+n*c,r[6]=t*o+n*l,r[1]=-n*i+t*s,r[4]=-n*a+t*c,r[7]=-n*o+t*l,this},translate:function(e,t){var n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this},equals:function(e){for(var t=this.elements,n=e.elements,r=0;r<9;r++)if(t[r]!==n[r])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var n=0;n<9;n++)this.elements[n]=e[n+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}});var Dt,Nt,zt={getDataURL:function(e){var t;if("undefined"==typeof HTMLCanvasElement)return e.src;if(e instanceof HTMLCanvasElement)t=e;else{void 0===a&&(a=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),a.width=e.width,a.height=e.height;var n=a.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=a}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}},Ut=0;function Bt(e,t,n,r,i,a,o,s,c,l){Object.defineProperty(this,"id",{value:Ut++}),this.uuid=Pt.generateUUID(),this.name="",this.image=void 0!==e?e:Bt.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:Bt.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:de,this.wrapT=void 0!==r?r:de,this.magFilter=void 0!==i?i:ye,this.minFilter=void 0!==a?a:be,this.anisotropy=void 0!==c?c:1,this.format=void 0!==o?o:Ne,this.type=void 0!==s?s:we,this.offset=new Rt(0,0),this.repeat=new Rt(1,1),this.center=new Rt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new It,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==l?l:vt,this.version=0,this.onUpdate=null}function Ft(e,t,n,r){this.x=e||0,this.y=t||0,this.z=n||0,this.w=void 0!==r?r:1}function Gt(e,t,n){this.width=e,this.height=t,this.scissor=new Ft(0,0,e,t),this.scissorTest=!1,this.viewport=new Ft(0,0,e,t),n=n||{},this.texture=new Bt(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={},this.texture.image.width=e,this.texture.image.height=t,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:ye,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function kt(e,t,n){Gt.call(this,e,t,n),this.samples=4}function Ht(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function jt(e,t,n,r){this._x=e||0,this._y=t||0,this._z=n||0,this._order=r||jt.DefaultOrder}function Vt(){this.mask=1}Bt.DEFAULT_IMAGE=void 0,Bt.DEFAULT_MAPPING=300,Bt.prototype=Object.assign(Object.create(r.prototype),{constructor:Bt,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){var t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];var n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var r=this.image;if(void 0===r.uuid&&(r.uuid=Pt.generateUUID()),!t&&void 0===e.images[r.uuid]){var i;if(Array.isArray(r)){i=[];for(var a=0,o=r.length;a<o;a++)i.push(zt.getDataURL(r[a]))}else i=zt.getDataURL(r);e.images[r.uuid]={uuid:r.uuid,url:i}}n.image=r.uuid}return t||(e.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case pe:e.x=e.x-Math.floor(e.x);break;case de:e.x=e.x<0?0:1;break;case fe:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case pe:e.y=e.y-Math.floor(e.y);break;case de:e.y=e.y<0?0:1;break;case fe:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}}),Object.defineProperty(Bt.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.defineProperties(Ft.prototype,{width:{get:function(){return this.z},set:function(e){this.z=e}},height:{get:function(){return this.w},set:function(e){this.w=e}}}),Object.assign(Ft.prototype,{isVector4:!0,set:function(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},applyMatrix4:function(e){var t=this.x,n=this.y,r=this.z,i=this.w,a=e.elements;return this.x=a[0]*t+a[4]*n+a[8]*r+a[12]*i,this.y=a[1]*t+a[5]*n+a[9]*r+a[13]*i,this.z=a[2]*t+a[6]*n+a[10]*r+a[14]*i,this.w=a[3]*t+a[7]*n+a[11]*r+a[15]*i,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,n,r,i,a=e.elements,o=a[0],s=a[4],c=a[8],l=a[1],h=a[5],u=a[9],p=a[2],d=a[6],f=a[10];if(Math.abs(s-l)<.01&&Math.abs(c-p)<.01&&Math.abs(u-d)<.01){if(Math.abs(s+l)<.1&&Math.abs(c+p)<.1&&Math.abs(u+d)<.1&&Math.abs(o+h+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;var m=(o+1)/2,v=(h+1)/2,g=(f+1)/2,y=(s+l)/4,x=(c+p)/4,b=(u+d)/4;return m>v&&m>g?m<.01?(n=0,r=.707106781,i=.707106781):(r=y/(n=Math.sqrt(m)),i=x/n):v>g?v<.01?(n=.707106781,r=0,i=.707106781):(n=y/(r=Math.sqrt(v)),i=b/r):g<.01?(n=.707106781,r=.707106781,i=0):(n=x/(i=Math.sqrt(g)),r=b/i),this.set(n,r,i,t),this}var w=Math.sqrt((d-u)*(d-u)+(c-p)*(c-p)+(l-s)*(l-s));return Math.abs(w)<.001&&(w=1),this.x=(d-u)/w,this.y=(c-p)/w,this.z=(l-s)/w,this.w=Math.acos((o+h+f-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}}),Gt.prototype=Object.assign(Object.create(r.prototype),{constructor:Gt,isWebGLRenderTarget:!0,setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.texture.image.width=e,this.texture.image.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),kt.prototype=Object.assign(Object.create(Gt.prototype),{constructor:kt,isWebGLMultisampleRenderTarget:!0,copy:function(e){return Gt.prototype.copy.call(this,e),this.samples=e.samples,this}}),Object.assign(Ht.prototype,{isMatrix4:!0,set:function(e,t,n,r,i,a,o,s,c,l,h,u,p,d,f,m){var v=this.elements;return v[0]=e,v[4]=t,v[8]=n,v[12]=r,v[1]=i,v[5]=a,v[9]=o,v[13]=s,v[2]=c,v[6]=l,v[10]=h,v[14]=u,v[3]=p,v[7]=d,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new Ht).fromArray(this.elements)},copy:function(e){var t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this},copyPosition:function(e){var t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this},extractBasis:function(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this},extractRotation:function(){var e=new Ot;return function(t){var n=this.elements,r=t.elements,i=1/e.setFromMatrixColumn(t,0).length(),a=1/e.setFromMatrixColumn(t,1).length(),o=1/e.setFromMatrixColumn(t,2).length();return n[0]=r[0]*i,n[1]=r[1]*i,n[2]=r[2]*i,n[3]=0,n[4]=r[4]*a,n[5]=r[5]*a,n[6]=r[6]*a,n[7]=0,n[8]=r[8]*o,n[9]=r[9]*o,n[10]=r[10]*o,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,this}}(),makeRotationFromEuler:function(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,n=e.x,r=e.y,i=e.z,a=Math.cos(n),o=Math.sin(n),s=Math.cos(r),c=Math.sin(r),l=Math.cos(i),h=Math.sin(i);if("XYZ"===e.order){var u=a*l,p=a*h,d=o*l,f=o*h;t[0]=s*l,t[4]=-s*h,t[8]=c,t[1]=p+d*c,t[5]=u-f*c,t[9]=-o*s,t[2]=f-u*c,t[6]=d+p*c,t[10]=a*s}else if("YXZ"===e.order){var m=s*l,v=s*h,g=c*l,y=c*h;t[0]=m+y*o,t[4]=g*o-v,t[8]=a*c,t[1]=a*h,t[5]=a*l,t[9]=-o,t[2]=v*o-g,t[6]=y+m*o,t[10]=a*s}else if("ZXY"===e.order){m=s*l,v=s*h,g=c*l,y=c*h;t[0]=m-y*o,t[4]=-a*h,t[8]=g+v*o,t[1]=v+g*o,t[5]=a*l,t[9]=y-m*o,t[2]=-a*c,t[6]=o,t[10]=a*s}else if("ZYX"===e.order){u=a*l,p=a*h,d=o*l,f=o*h;t[0]=s*l,t[4]=d*c-p,t[8]=u*c+f,t[1]=s*h,t[5]=f*c+u,t[9]=p*c-d,t[2]=-c,t[6]=o*s,t[10]=a*s}else if("YZX"===e.order){var x=a*s,b=a*c,w=o*s,_=o*c;t[0]=s*l,t[4]=_-x*h,t[8]=w*h+b,t[1]=h,t[5]=a*l,t[9]=-o*l,t[2]=-c*l,t[6]=b*h+w,t[10]=x-_*h}else if("XZY"===e.order){x=a*s,b=a*c,w=o*s,_=o*c;t[0]=s*l,t[4]=-h,t[8]=c*l,t[1]=x*h+_,t[5]=a*l,t[9]=b*h-w,t[2]=w*h-b,t[6]=o*l,t[10]=_*h+x}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(){var e=new Ot(0,0,0),t=new Ot(1,1,1);return function(n){return this.compose(e,n,t)}}(),lookAt:function(){var e=new Ot,t=new Ot,n=new Ot;return function(r,i,a){var o=this.elements;return n.subVectors(r,i),0===n.lengthSq()&&(n.z=1),n.normalize(),e.crossVectors(a,n),0===e.lengthSq()&&(1===Math.abs(a.z)?n.x+=1e-4:n.z+=1e-4,n.normalize(),e.crossVectors(a,n)),e.normalize(),t.crossVectors(n,e),o[0]=e.x,o[4]=t.x,o[8]=n.x,o[1]=e.y,o[5]=t.y,o[9]=n.y,o[2]=e.z,o[6]=t.z,o[10]=n.z,this}}(),multiply:function(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var n=e.elements,r=t.elements,i=this.elements,a=n[0],o=n[4],s=n[8],c=n[12],l=n[1],h=n[5],u=n[9],p=n[13],d=n[2],f=n[6],m=n[10],v=n[14],g=n[3],y=n[7],x=n[11],b=n[15],w=r[0],_=r[4],M=r[8],T=r[12],S=r[1],E=r[5],A=r[9],L=r[13],P=r[2],R=r[6],C=r[10],O=r[14],I=r[3],D=r[7],N=r[11],z=r[15];return i[0]=a*w+o*S+s*P+c*I,i[4]=a*_+o*E+s*R+c*D,i[8]=a*M+o*A+s*C+c*N,i[12]=a*T+o*L+s*O+c*z,i[1]=l*w+h*S+u*P+p*I,i[5]=l*_+h*E+u*R+p*D,i[9]=l*M+h*A+u*C+p*N,i[13]=l*T+h*L+u*O+p*z,i[2]=d*w+f*S+m*P+v*I,i[6]=d*_+f*E+m*R+v*D,i[10]=d*M+f*A+m*C+v*N,i[14]=d*T+f*L+m*O+v*z,i[3]=g*w+y*S+x*P+b*I,i[7]=g*_+y*E+x*R+b*D,i[11]=g*M+y*A+x*C+b*N,i[15]=g*T+y*L+x*O+b*z,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToBufferAttribute:function(){var e=new Ot;return function(t){for(var n=0,r=t.count;n<r;n++)e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.applyMatrix4(this),t.setXYZ(n,e.x,e.y,e.z);return t}}(),determinant:function(){var e=this.elements,t=e[0],n=e[4],r=e[8],i=e[12],a=e[1],o=e[5],s=e[9],c=e[13],l=e[2],h=e[6],u=e[10],p=e[14];return e[3]*(+i*s*h-r*c*h-i*o*u+n*c*u+r*o*p-n*s*p)+e[7]*(+t*s*p-t*c*u+i*a*u-r*a*p+r*c*l-i*s*l)+e[11]*(+t*c*h-t*o*p-i*a*h+n*a*p+i*o*l-n*c*l)+e[15]*(-r*o*l-t*s*h+t*o*u+r*a*h-n*a*u+n*s*l)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},setPosition:function(e,t,n){var r=this.elements;return e.isVector3?(r[12]=e.x,r[13]=e.y,r[14]=e.z):(r[12]=e,r[13]=t,r[14]=n),this},getInverse:function(e,t){var n=this.elements,r=e.elements,i=r[0],a=r[1],o=r[2],s=r[3],c=r[4],l=r[5],h=r[6],u=r[7],p=r[8],d=r[9],f=r[10],m=r[11],v=r[12],g=r[13],y=r[14],x=r[15],b=d*y*u-g*f*u+g*h*m-l*y*m-d*h*x+l*f*x,w=v*f*u-p*y*u-v*h*m+c*y*m+p*h*x-c*f*x,_=p*g*u-v*d*u+v*l*m-c*g*m-p*l*x+c*d*x,M=v*d*h-p*g*h-v*l*f+c*g*f+p*l*y-c*d*y,T=i*b+a*w+o*_+s*M;if(0===T){var S="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(S);return console.warn(S),this.identity()}var E=1/T;return n[0]=b*E,n[1]=(g*f*s-d*y*s-g*o*m+a*y*m+d*o*x-a*f*x)*E,n[2]=(l*y*s-g*h*s+g*o*u-a*y*u-l*o*x+a*h*x)*E,n[3]=(d*h*s-l*f*s-d*o*u+a*f*u+l*o*m-a*h*m)*E,n[4]=w*E,n[5]=(p*y*s-v*f*s+v*o*m-i*y*m-p*o*x+i*f*x)*E,n[6]=(v*h*s-c*y*s-v*o*u+i*y*u+c*o*x-i*h*x)*E,n[7]=(c*f*s-p*h*s+p*o*u-i*f*u-c*o*m+i*h*m)*E,n[8]=_*E,n[9]=(v*d*s-p*g*s-v*a*m+i*g*m+p*a*x-i*d*x)*E,n[10]=(c*g*s-v*l*s+v*a*u-i*g*u-c*a*x+i*l*x)*E,n[11]=(p*l*s-c*d*s-p*a*u+i*d*u+c*a*m-i*l*m)*E,n[12]=M*E,n[13]=(p*g*o-v*d*o+v*a*f-i*g*f-p*a*y+i*d*y)*E,n[14]=(v*l*o-c*g*o-v*a*h+i*g*h+c*a*y-i*l*y)*E,n[15]=(c*d*o-p*l*o+p*a*h-i*d*h-c*a*f+i*l*f)*E,this},scale:function(e){var t=this.elements,n=e.x,r=e.y,i=e.z;return t[0]*=n,t[4]*=r,t[8]*=i,t[1]*=n,t[5]*=r,t[9]*=i,t[2]*=n,t[6]*=r,t[10]*=i,t[3]*=n,t[7]*=r,t[11]*=i,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,r))},makeTranslation:function(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var n=Math.cos(t),r=Math.sin(t),i=1-n,a=e.x,o=e.y,s=e.z,c=i*a,l=i*o;return this.set(c*a+n,c*o-r*s,c*s+r*o,0,c*o+r*s,l*o+n,l*s-r*a,0,c*s-r*o,l*s+r*a,i*s*s+n,0,0,0,0,1),this},makeScale:function(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(e,t,n){return this.set(1,t,n,0,e,1,n,0,e,t,1,0,0,0,0,1),this},compose:function(e,t,n){var r=this.elements,i=t._x,a=t._y,o=t._z,s=t._w,c=i+i,l=a+a,h=o+o,u=i*c,p=i*l,d=i*h,f=a*l,m=a*h,v=o*h,g=s*c,y=s*l,x=s*h,b=n.x,w=n.y,_=n.z;return r[0]=(1-(f+v))*b,r[1]=(p+x)*b,r[2]=(d-y)*b,r[3]=0,r[4]=(p-x)*w,r[5]=(1-(u+v))*w,r[6]=(m+g)*w,r[7]=0,r[8]=(d+y)*_,r[9]=(m-g)*_,r[10]=(1-(u+f))*_,r[11]=0,r[12]=e.x,r[13]=e.y,r[14]=e.z,r[15]=1,this},decompose:function(){var e=new Ot,t=new Ht;return function(n,r,i){var a=this.elements,o=e.set(a[0],a[1],a[2]).length(),s=e.set(a[4],a[5],a[6]).length(),c=e.set(a[8],a[9],a[10]).length();this.determinant()<0&&(o=-o),n.x=a[12],n.y=a[13],n.z=a[14],t.copy(this);var l=1/o,h=1/s,u=1/c;return t.elements[0]*=l,t.elements[1]*=l,t.elements[2]*=l,t.elements[4]*=h,t.elements[5]*=h,t.elements[6]*=h,t.elements[8]*=u,t.elements[9]*=u,t.elements[10]*=u,r.setFromRotationMatrix(t),i.x=o,i.y=s,i.z=c,this}}(),makePerspective:function(e,t,n,r,i,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var o=this.elements,s=2*i/(t-e),c=2*i/(n-r),l=(t+e)/(t-e),h=(n+r)/(n-r),u=-(a+i)/(a-i),p=-2*a*i/(a-i);return o[0]=s,o[4]=0,o[8]=l,o[12]=0,o[1]=0,o[5]=c,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=u,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(e,t,n,r,i,a){var o=this.elements,s=1/(t-e),c=1/(n-r),l=1/(a-i),h=(t+e)*s,u=(n+r)*c,p=(a+i)*l;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=-2*l,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(e){for(var t=this.elements,n=e.elements,r=0;r<16;r++)if(t[r]!==n[r])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var n=0;n<16;n++)this.elements[n]=e[n+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}),jt.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],jt.DefaultOrder="XYZ",Object.defineProperties(jt.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},order:{get:function(){return this._order},set:function(e){this._order=e,this._onChangeCallback()}}}),Object.assign(jt.prototype,{isEuler:!0,set:function(e,t,n,r){return this._x=e,this._y=t,this._z=n,this._order=r||this._order,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this},setFromRotationMatrix:function(e,t,n){var r=Pt.clamp,i=e.elements,a=i[0],o=i[4],s=i[8],c=i[1],l=i[5],h=i[9],u=i[2],p=i[6],d=i[10];return"XYZ"===(t=t||this._order)?(this._y=Math.asin(r(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-h,d),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(p,l),this._z=0)):"YXZ"===t?(this._x=Math.asin(-r(h,-1,1)),Math.abs(h)<.99999?(this._y=Math.atan2(s,d),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-u,a),this._z=0)):"ZXY"===t?(this._x=Math.asin(r(p,-1,1)),Math.abs(p)<.99999?(this._y=Math.atan2(-u,d),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(c,a))):"ZYX"===t?(this._y=Math.asin(-r(u,-1,1)),Math.abs(u)<.99999?(this._x=Math.atan2(p,d),this._z=Math.atan2(c,a)):(this._x=0,this._z=Math.atan2(-o,l))):"YZX"===t?(this._z=Math.asin(r(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-h,l),this._y=Math.atan2(-u,a)):(this._x=0,this._y=Math.atan2(s,d))):"XZY"===t?(this._z=Math.asin(-r(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(p,l),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-h,d),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,!1!==n&&this._onChangeCallback(),this},setFromQuaternion:function(e,t,n){return void 0===Dt&&(Dt=new Ht),Dt.makeRotationFromQuaternion(e),this.setFromRotationMatrix(Dt,t,n)},setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(e){return void 0===Nt&&(Nt=new Ct),Nt.setFromEuler(this),this.setFromQuaternion(Nt,e)},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new Ot(this._x,this._y,this._z)},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}}),Object.assign(Vt.prototype,{set:function(e){this.mask=1<<e|0},enable:function(e){this.mask|=1<<e|0},toggle:function(e){this.mask^=1<<e|0},disable:function(e){this.mask&=~(1<<e|0)},test:function(e){return 0!=(this.mask&e.mask)}});var Wt,Xt=0;function qt(){Object.defineProperty(this,"id",{value:Xt++}),this.uuid=Pt.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=qt.DefaultUp.clone();var e=new Ot,t=new jt,n=new Ct,r=new Ot(1,1,1);t._onChange(function(){n.setFromEuler(t,!1)}),n._onChange(function(){t.setFromQuaternion(n,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new Ht},normalMatrix:{value:new It}}),this.matrix=new Ht,this.matrixWorld=new Ht,this.matrixAutoUpdate=qt.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Vt,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function Yt(){qt.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function Zt(e,t){this.min=void 0!==e?e:new Ot(1/0,1/0,1/0),this.max=void 0!==t?t:new Ot(-1/0,-1/0,-1/0)}function Jt(e,t){this.center=void 0!==e?e:new Ot,this.radius=void 0!==t?t:0}function Kt(e,t){this.origin=void 0!==e?e:new Ot,this.direction=void 0!==t?t:new Ot}function Qt(e,t,n){this.a=void 0!==e?e:new Ot,this.b=void 0!==t?t:new Ot,this.c=void 0!==n?n:new Ot}qt.DefaultUp=new Ot(0,1,0),qt.DefaultMatrixAutoUpdate=!0,qt.prototype=Object.assign(Object.create(r.prototype),{constructor:qt,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(){var e=new Ct;return function(t,n){return e.setFromAxisAngle(t,n),this.quaternion.multiply(e),this}}(),rotateOnWorldAxis:function(){var e=new Ct;return function(t,n){return e.setFromAxisAngle(t,n),this.quaternion.premultiply(e),this}}(),rotateX:function(){var e=new Ot(1,0,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateY:function(){var e=new Ot(0,1,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateZ:function(){var e=new Ot(0,0,1);return function(t){return this.rotateOnAxis(e,t)}}(),translateOnAxis:function(){var e=new Ot;return function(t,n){return e.copy(t).applyQuaternion(this.quaternion),this.position.add(e.multiplyScalar(n)),this}}(),translateX:function(){var e=new Ot(1,0,0);return function(t){return this.translateOnAxis(e,t)}}(),translateY:function(){var e=new Ot(0,1,0);return function(t){return this.translateOnAxis(e,t)}}(),translateZ:function(){var e=new Ot(0,0,1);return function(t){return this.translateOnAxis(e,t)}}(),localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var e=new Ht;return function(t){return t.applyMatrix4(e.getInverse(this.matrixWorld))}}(),lookAt:function(){var e=new Ct,t=new Ht,n=new Ot,r=new Ot;return function(i,a,o){i.isVector3?n.copy(i):n.set(i,a,o);var s=this.parent;this.updateWorldMatrix(!0,!1),r.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?t.lookAt(r,n,this.up):t.lookAt(n,r,this.up),this.quaternion.setFromRotationMatrix(t),s&&(t.extractRotation(s.matrixWorld),e.setFromRotationMatrix(t),this.quaternion.premultiply(e.inverse()))}}(),add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent({type:"added"})):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var n=this.children.indexOf(e);return-1!==n&&(e.parent=null,this.children.splice(n,1),e.dispatchEvent({type:"removed"})),this},attach:function(){var e=new Ht;return function(t){return this.updateWorldMatrix(!0,!1),e.getInverse(this.matrixWorld),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),e.multiply(t.parent.matrixWorld)),t.applyMatrix(e),t.updateWorldMatrix(!1,!1),this.add(t),this}}(),getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var n=0,r=this.children.length;n<r;n++){var i=this.children[n].getObjectByProperty(e,t);if(void 0!==i)return i}},getWorldPosition:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),e=new Ot),this.updateMatrixWorld(!0),e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var e=new Ot,t=new Ot;return function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),n=new Ct),this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,n,t),n}}(),getWorldScale:function(){var e=new Ot,t=new Ct;return function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),n=new Ot),this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,t,n),n}}(),getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new Ot),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(e){e(this);for(var t=this.children,n=0,r=t.length;n<r;n++)t[n].traverse(e)},traverseVisible:function(e){if(!1!==this.visible){e(this);for(var t=this.children,n=0,r=t.length;n<r;n++)t[n].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=this.children,n=0,r=t.length;n<r;n++)t[n].updateMatrixWorld(e)},updateWorldMatrix:function(e,t){var n=this.parent;if(!0===e&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t)for(var r=this.children,i=0,a=r.length;i<a;i++)r[i].updateWorldMatrix(!1,!0)},toJSON:function(e){var t=void 0===e||"string"==typeof e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var r={};function i(t,n){return void 0===t[n.uuid]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(r.uuid=this.uuid,r.type=this.type,""!==this.name&&(r.name=this.name),!0===this.castShadow&&(r.castShadow=!0),!0===this.receiveShadow&&(r.receiveShadow=!0),!1===this.visible&&(r.visible=!1),!1===this.frustumCulled&&(r.frustumCulled=!1),0!==this.renderOrder&&(r.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(r.matrixAutoUpdate=!1),this.isMesh&&this.drawMode!==dt&&(r.drawMode=this.drawMode),this.isMesh||this.isLine||this.isPoints){r.geometry=i(e.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var o=a.shapes;if(Array.isArray(o))for(var s=0,c=o.length;s<c;s++){var l=o[s];i(e.shapes,l)}else i(e.shapes,o)}}if(void 0!==this.material)if(Array.isArray(this.material)){var h=[];for(s=0,c=this.material.length;s<c;s++)h.push(i(e.materials,this.material[s]));r.material=h}else r.material=i(e.materials,this.material);if(this.children.length>0){r.children=[];for(s=0;s<this.children.length;s++)r.children.push(this.children[s].toJSON(e).object)}if(t){var u=m(e.geometries),p=m(e.materials),d=m(e.textures),f=m(e.images);o=m(e.shapes);u.length>0&&(n.geometries=u),p.length>0&&(n.materials=p),d.length>0&&(n.textures=d),f.length>0&&(n.images=f),o.length>0&&(n.shapes=o)}return n.object=r,n;function m(e){var t=[];for(var n in e){var r=e[n];delete r.metadata,t.push(r)}return t}},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(var n=0;n<e.children.length;n++){var r=e.children[n];this.add(r.clone())}return this}}),Yt.prototype=Object.assign(Object.create(qt.prototype),{constructor:Yt,isScene:!0,copy:function(e,t){return qt.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},toJSON:function(e){var t=qt.prototype.toJSON.call(this,e);return null!==this.background&&(t.object.background=this.background.toJSON(e)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.assign(Zt.prototype,{isBox3:!0,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=1/0,n=1/0,r=1/0,i=-1/0,a=-1/0,o=-1/0,s=0,c=e.length;s<c;s+=3){var l=e[s],h=e[s+1],u=e[s+2];l<t&&(t=l),h<n&&(n=h),u<r&&(r=u),l>i&&(i=l),h>a&&(a=h),u>o&&(o=u)}return this.min.set(t,n,r),this.max.set(i,a,o),this},setFromBufferAttribute:function(e){for(var t=1/0,n=1/0,r=1/0,i=-1/0,a=-1/0,o=-1/0,s=0,c=e.count;s<c;s++){var l=e.getX(s),h=e.getY(s),u=e.getZ(s);l<t&&(t=l),h<n&&(n=h),u<r&&(r=u),l>i&&(i=l),h>a&&(a=h),u>o&&(o=u)}return this.min.set(t,n,r),this.max.set(i,a,o),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new Ot;return function(t,n){var r=e.copy(n).multiplyScalar(.5);return this.min.copy(t).sub(r),this.max.copy(t).add(r),this}}(),setFromObject:function(e){return this.makeEmpty(),this.expandByObject(e)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box3: .getCenter() target is now required"),e=new Ot),this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box3: .getSize() target is now required"),e=new Ot),this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},expandByObject:function(){var e,t,n,r=new Ot;function i(i){var a=i.geometry;if(void 0!==a)if(a.isGeometry){var o=a.vertices;for(t=0,n=o.length;t<n;t++)r.copy(o[t]),r.applyMatrix4(i.matrixWorld),e.expandByPoint(r)}else if(a.isBufferGeometry){var s=a.attributes.position;if(void 0!==s)for(t=0,n=s.count;t<n;t++)r.fromBufferAttribute(s,t).applyMatrix4(i.matrixWorld),e.expandByPoint(r)}}return function(t){return e=this,t.updateMatrixWorld(!0),t.traverse(i),this}}(),containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new Ot),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(){var e=new Ot;return function(t){return this.clampPoint(t.center,e),e.distanceToSquared(t.center)<=t.radius*t.radius}}(),intersectsPlane:function(e){var t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant},intersectsTriangle:function(){var e=new Ot,t=new Ot,n=new Ot,r=new Ot,i=new Ot,a=new Ot,o=new Ot,s=new Ot,c=new Ot,l=new Ot;function h(r){var i,a;for(i=0,a=r.length-3;i<=a;i+=3){o.fromArray(r,i);var s=c.x*Math.abs(o.x)+c.y*Math.abs(o.y)+c.z*Math.abs(o.z),l=e.dot(o),h=t.dot(o),u=n.dot(o);if(Math.max(-Math.max(l,h,u),Math.min(l,h,u))>s)return!1}return!0}return function(o){if(this.isEmpty())return!1;this.getCenter(s),c.subVectors(this.max,s),e.subVectors(o.a,s),t.subVectors(o.b,s),n.subVectors(o.c,s),r.subVectors(t,e),i.subVectors(n,t),a.subVectors(e,n);var u=[0,-r.z,r.y,0,-i.z,i.y,0,-a.z,a.y,r.z,0,-r.x,i.z,0,-i.x,a.z,0,-a.x,-r.y,r.x,0,-i.y,i.x,0,-a.y,a.x,0];return!!h(u)&&(!!h(u=[1,0,0,0,1,0,0,0,1])&&(l.crossVectors(r,i),h(u=[l.x,l.y,l.z])))}}(),clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new Ot),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new Ot;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),getBoundingSphere:function(){var e=new Ot;return function(t){return void 0===t&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(t.center),t.radius=.5*this.getSize(e).length(),t}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(){var e=[new Ot,new Ot,new Ot,new Ot,new Ot,new Ot,new Ot,new Ot];return function(t){return this.isEmpty()?this:(e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(e),this)}}(),translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}),Object.assign(Jt.prototype,{set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(e,t){void 0===Wt&&(Wt=new Zt);var n=this.center;void 0!==t?n.copy(t):Wt.setFromPoints(e).getCenter(n);for(var r=0,i=0,a=e.length;i<a;i++)r=Math.max(r,n.distanceToSquared(e[i]));return this.radius=Math.sqrt(r),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius},clampPoint:function(e,t){var n=this.center.distanceToSquared(e);return void 0===t&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new Ot),t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t},getBoundingBox:function(e){return void 0===e&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),e=new Zt),e.set(this.center,this.center),e.expandByScalar(this.radius),e},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}}),Object.assign(Kt.prototype,{set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){return void 0===t&&(console.warn("THREE.Ray: .at() target is now required"),t=new Ot),t.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(){var e=new Ot;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new Ot),t.subVectors(e,this.origin);var n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(){var e=new Ot;return function(t){var n=e.subVectors(t,this.origin).dot(this.direction);return n<0?this.origin.distanceToSquared(t):(e.copy(this.direction).multiplyScalar(n).add(this.origin),e.distanceToSquared(t))}}(),distanceSqToSegment:function(){var e=new Ot,t=new Ot,n=new Ot;return function(r,i,a,o){e.copy(r).add(i).multiplyScalar(.5),t.copy(i).sub(r).normalize(),n.copy(this.origin).sub(e);var s,c,l,h,u=.5*r.distanceTo(i),p=-this.direction.dot(t),d=n.dot(this.direction),f=-n.dot(t),m=n.lengthSq(),v=Math.abs(1-p*p);if(v>0)if(c=p*d-f,h=u*v,(s=p*f-d)>=0)if(c>=-h)if(c<=h){var g=1/v;l=(s*=g)*(s+p*(c*=g)+2*d)+c*(p*s+c+2*f)+m}else c=u,l=-(s=Math.max(0,-(p*c+d)))*s+c*(c+2*f)+m;else c=-u,l=-(s=Math.max(0,-(p*c+d)))*s+c*(c+2*f)+m;else c<=-h?l=-(s=Math.max(0,-(-p*u+d)))*s+(c=s>0?-u:Math.min(Math.max(-u,-f),u))*(c+2*f)+m:c<=h?(s=0,l=(c=Math.min(Math.max(-u,-f),u))*(c+2*f)+m):l=-(s=Math.max(0,-(p*u+d)))*s+(c=s>0?u:Math.min(Math.max(-u,-f),u))*(c+2*f)+m;else c=p>0?-u:u,l=-(s=Math.max(0,-(p*c+d)))*s+c*(c+2*f)+m;return a&&a.copy(this.direction).multiplyScalar(s).add(this.origin),o&&o.copy(t).multiplyScalar(c).add(e),l}}(),intersectSphere:function(){var e=new Ot;return function(t,n){e.subVectors(t.center,this.origin);var r=e.dot(this.direction),i=e.dot(e)-r*r,a=t.radius*t.radius;if(i>a)return null;var o=Math.sqrt(a-i),s=r-o,c=r+o;return s<0&&c<0?null:s<0?this.at(c,n):this.at(s,n)}}(),intersectsSphere:function(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null},intersectPlane:function(e,t){var n=this.distanceToPlane(e);return null===n?null:this.at(n,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0},intersectBox:function(e,t){var n,r,i,a,o,s,c=1/this.direction.x,l=1/this.direction.y,h=1/this.direction.z,u=this.origin;return c>=0?(n=(e.min.x-u.x)*c,r=(e.max.x-u.x)*c):(n=(e.max.x-u.x)*c,r=(e.min.x-u.x)*c),l>=0?(i=(e.min.y-u.y)*l,a=(e.max.y-u.y)*l):(i=(e.max.y-u.y)*l,a=(e.min.y-u.y)*l),n>a||i>r?null:((i>n||n!=n)&&(n=i),(a<r||r!=r)&&(r=a),h>=0?(o=(e.min.z-u.z)*h,s=(e.max.z-u.z)*h):(o=(e.max.z-u.z)*h,s=(e.min.z-u.z)*h),n>s||o>r?null:((o>n||n!=n)&&(n=o),(s<r||r!=r)&&(r=s),r<0?null:this.at(n>=0?n:r,t)))},intersectsBox:function(){var e=new Ot;return function(t){return null!==this.intersectBox(t,e)}}(),intersectTriangle:function(){var e=new Ot,t=new Ot,n=new Ot,r=new Ot;return function(i,a,o,s,c){t.subVectors(a,i),n.subVectors(o,i),r.crossVectors(t,n);var l,h=this.direction.dot(r);if(h>0){if(s)return null;l=1}else{if(!(h<0))return null;l=-1,h=-h}e.subVectors(this.origin,i);var u=l*this.direction.dot(n.crossVectors(e,n));if(u<0)return null;var p=l*this.direction.dot(t.cross(e));if(p<0)return null;if(u+p>h)return null;var d=-l*e.dot(r);return d<0?null:this.at(d/h,c)}}(),applyMatrix4:function(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}}),Object.assign(Qt,{getNormal:function(){var e=new Ot;return function(t,n,r,i){void 0===i&&(console.warn("THREE.Triangle: .getNormal() target is now required"),i=new Ot),i.subVectors(r,n),e.subVectors(t,n),i.cross(e);var a=i.lengthSq();return a>0?i.multiplyScalar(1/Math.sqrt(a)):i.set(0,0,0)}}(),getBarycoord:function(){var e=new Ot,t=new Ot,n=new Ot;return function(r,i,a,o,s){e.subVectors(o,i),t.subVectors(a,i),n.subVectors(r,i);var c=e.dot(e),l=e.dot(t),h=e.dot(n),u=t.dot(t),p=t.dot(n),d=c*u-l*l;if(void 0===s&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),s=new Ot),0===d)return s.set(-2,-1,-1);var f=1/d,m=(u*h-l*p)*f,v=(c*p-l*h)*f;return s.set(1-m-v,v,m)}}(),containsPoint:function(){var e=new Ot;return function(t,n,r,i){return Qt.getBarycoord(t,n,r,i,e),e.x>=0&&e.y>=0&&e.x+e.y<=1}}(),getUV:function(){var e=new Ot;return function(t,n,r,i,a,o,s,c){return this.getBarycoord(t,n,r,i,e),c.set(0,0),c.addScaledVector(a,e.x),c.addScaledVector(o,e.y),c.addScaledVector(s,e.z),c}}(),isFrontFacing:function(){var e=new Ot,t=new Ot;return function(n,r,i,a){return e.subVectors(i,r),t.subVectors(n,r),e.cross(t).dot(a)<0}}()}),Object.assign(Qt.prototype,{set:function(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this},setFromPointsAndIndices:function(e,t,n,r){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[r]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},getArea:function(){var e=new Ot,t=new Ot;return function(){return e.subVectors(this.c,this.b),t.subVectors(this.a,this.b),.5*e.cross(t).length()}}(),getMidpoint:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),e=new Ot),e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(e){return Qt.getNormal(this.a,this.b,this.c,e)},getPlane:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getPlane() target is now required"),e=new Ot),e.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(e,t){return Qt.getBarycoord(e,this.a,this.b,this.c,t)},getUV:function(e,t,n,r,i){return Qt.getUV(e,this.a,this.b,this.c,t,n,r,i)},containsPoint:function(e){return Qt.containsPoint(e,this.a,this.b,this.c)},isFrontFacing:function(e){return Qt.isFrontFacing(this.a,this.b,this.c,e)},intersectsBox:function(e){return e.intersectsTriangle(this)},closestPointToPoint:function(){var e=new Ot,t=new Ot,n=new Ot,r=new Ot,i=new Ot,a=new Ot;return function(o,s){void 0===s&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),s=new Ot);var c,l,h=this.a,u=this.b,p=this.c;e.subVectors(u,h),t.subVectors(p,h),r.subVectors(o,h);var d=e.dot(r),f=t.dot(r);if(d<=0&&f<=0)return s.copy(h);i.subVectors(o,u);var m=e.dot(i),v=t.dot(i);if(m>=0&&v<=m)return s.copy(u);var g=d*v-m*f;if(g<=0&&d>=0&&m<=0)return c=d/(d-m),s.copy(h).addScaledVector(e,c);a.subVectors(o,p);var y=e.dot(a),x=t.dot(a);if(x>=0&&y<=x)return s.copy(p);var b=y*f-d*x;if(b<=0&&f>=0&&x<=0)return l=f/(f-x),s.copy(h).addScaledVector(t,l);var w=m*x-y*v;if(w<=0&&v-m>=0&&y-x>=0)return n.subVectors(p,u),l=(v-m)/(v-m+(y-x)),s.copy(u).addScaledVector(n,l);var _=1/(w+b+g);return c=b*_,l=g*_,s.copy(h).addScaledVector(e,c).addScaledVector(t,l)}}(),equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}});var $t={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function en(e,t,n){return void 0===t&&void 0===n?this.set(e):this.setRGB(e,t,n)}function tn(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+6*(t-e)*(2/3-n):e}function nn(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function rn(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}function an(e,t,n,r,i,a){this.a=e,this.b=t,this.c=n,this.normal=r&&r.isVector3?r:new Ot,this.vertexNormals=Array.isArray(r)?r:[],this.color=i&&i.isColor?i:new en,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==a?a:0}Object.assign(en.prototype,{isColor:!0,r:1,g:1,b:1,set:function(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){return this.r=e,this.g=e,this.b=e,this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,n){return this.r=e,this.g=t,this.b=n,this},setHSL:function(e,t,n){if(e=Pt.euclideanModulo(e,1),t=Pt.clamp(t,0,1),n=Pt.clamp(n,0,1),0===t)this.r=this.g=this.b=n;else{var r=n<=.5?n*(1+t):n+t-n*t,i=2*n-r;this.r=tn(i,r,e+1/3),this.g=tn(i,r,e),this.b=tn(i,r,e-1/3)}return this},setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var r,i=n[1],a=n[2];switch(i){case"rgb":case"rgba":if(r=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,t(r[5]),this;if(r=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,t(r[5]),this;break;case"hsl":case"hsla":if(r=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(r[1])/360,s=parseInt(r[2],10)/100,c=parseInt(r[3],10)/100;return t(r[5]),this.setHSL(o,s,c)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(e)){var l,h=(l=n[1]).length;if(3===h)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===h)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}e&&e.length>0&&(void 0!==(l=$t[e])?this.setHex(l):console.warn("THREE.Color: Unknown color "+e));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var n=t>0?1/t:1;return this.r=Math.pow(e.r,n),this.g=Math.pow(e.g,n),this.b=Math.pow(e.b,n),this},convertGammaToLinear:function(e){return this.copyGammaToLinear(this,e),this},convertLinearToGamma:function(e){return this.copyLinearToGamma(this,e),this},copySRGBToLinear:function(e){return this.r=nn(e.r),this.g=nn(e.g),this.b=nn(e.b),this},copyLinearToSRGB:function(e){return this.r=rn(e.r),this.g=rn(e.g),this.b=rn(e.b),this},convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){void 0===e&&(console.warn("THREE.Color: .getHSL() target is now required"),e={h:0,s:0,l:0});var t,n,r=this.r,i=this.g,a=this.b,o=Math.max(r,i,a),s=Math.min(r,i,a),c=(s+o)/2;if(s===o)t=0,n=0;else{var l=o-s;switch(n=c<=.5?l/(o+s):l/(2-o-s),o){case r:t=(i-a)/l+(i<a?6:0);break;case i:t=(a-r)/l+2;break;case a:t=(r-i)/l+4}t/=6}return e.h=t,e.s=n,e.l=c,e},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(){var e={};return function(t,n,r){return this.getHSL(e),e.h+=t,e.s+=n,e.l+=r,this.setHSL(e.h,e.s,e.l),this}}(),add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},lerpHSL:function(){var e={h:0,s:0,l:0},t={h:0,s:0,l:0};return function(n,r){this.getHSL(e),n.getHSL(t);var i=Pt.lerp(e.h,t.h,r),a=Pt.lerp(e.s,t.s,r),o=Pt.lerp(e.l,t.l,r);return this.setHSL(i,a,o),this}}(),equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e},toJSON:function(){return this.getHex()}}),Object.assign(an.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,n=e.vertexNormals.length;t<n;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(t=0,n=e.vertexColors.length;t<n;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}});var on=0;function sn(){Object.defineProperty(this,"id",{value:on++}),this.uuid=Pt.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=w,this.side=f,this.flatShading=!1,this.vertexTangents=!1,this.vertexColors=g,this.opacity=1,this.transparent=!1,this.blendSrc=N,this.blendDst=z,this.blendEquation=E,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=W,this.depthTest=!0,this.depthWrite=!0,this.stencilFunc=Lt,this.stencilRef=0,this.stencilMask=255,this.stencilFail=At,this.stencilZFail=At,this.stencilZPass=At,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.userData={},this.needsUpdate=!0}function cn(e){sn.call(this),this.type="MeshBasicMaterial",this.color=new en(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=J,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(e)}function ln(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===n,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function hn(e,t,n){ln.call(this,new Int8Array(e),t,n)}function un(e,t,n){ln.call(this,new Uint8Array(e),t,n)}function pn(e,t,n){ln.call(this,new Uint8ClampedArray(e),t,n)}function dn(e,t,n){ln.call(this,new Int16Array(e),t,n)}function fn(e,t,n){ln.call(this,new Uint16Array(e),t,n)}function mn(e,t,n){ln.call(this,new Int32Array(e),t,n)}function vn(e,t,n){ln.call(this,new Uint32Array(e),t,n)}function gn(e,t,n){ln.call(this,new Float32Array(e),t,n)}function yn(e,t,n){ln.call(this,new Float64Array(e),t,n)}function xn(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function bn(e){if(0===e.length)return-1/0;for(var t=e[0],n=1,r=e.length;n<r;++n)e[n]>t&&(t=e[n]);return t}sn.prototype=Object.assign(Object.create(r.prototype),{constructor:sn,isMaterial:!0,onBeforeCompile:function(){},setValues:function(e){if(void 0!==e)for(var t in e){var n=e[t];if(void 0!==n)if("shading"!==t){var r=this[t];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[t]=n:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===n;else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(e){var t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function r(e){var t=[];for(var n in e){var r=e[n];delete r.metadata,t.push(r)}return t}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearCoat&&(n.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(n.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,n.reflectivity=this.reflectivity,n.refractionRatio=this.refractionRatio,void 0!==this.combine&&(n.combine=this.combine),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==w&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),this.side!==f&&(n.side=this.side),this.vertexColors!==g&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.stencilWrite=this.stencilWrite,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilMask=this.stencilMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.morphNormals&&(n.morphNormals=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),t){var i=r(e.textures),a=r(e.images);i.length>0&&(n.textures=i),a.length>0&&(n.images=a)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.lights=e.lights,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWrite=e.stencilWrite,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilMask=e.stencilMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.userData=JSON.parse(JSON.stringify(e.userData)),this.clipShadows=e.clipShadows,this.clipIntersection=e.clipIntersection;var t=e.clippingPlanes,n=null;if(null!==t){var r=t.length;n=new Array(r);for(var i=0;i!==r;++i)n[i]=t[i].clone()}return this.clippingPlanes=n,this.shadowSide=e.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),cn.prototype=Object.create(sn.prototype),cn.prototype.constructor=cn,cn.prototype.isMeshBasicMaterial=!0,cn.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},Object.defineProperty(ln.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(ln.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(e){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==e?e.length/this.itemSize:0,this.array=e,this},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.dynamic=e.dynamic,this},copyAt:function(e,t,n){e*=this.itemSize,n*=t.itemSize;for(var r=0,i=this.itemSize;r<i;r++)this.array[e+r]=t.array[n+r];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var a=e[r];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",r),a=new en),t[n++]=a.r,t[n++]=a.g,t[n++]=a.b}return this},copyVector2sArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var a=e[r];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",r),a=new Rt),t[n++]=a.x,t[n++]=a.y}return this},copyVector3sArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var a=e[r];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",r),a=new Ot),t[n++]=a.x,t[n++]=a.y,t[n++]=a.z}return this},copyVector4sArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var a=e[r];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",r),a=new Ft),t[n++]=a.x,t[n++]=a.y,t[n++]=a.z,t[n++]=a.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this},setXYZ:function(e,t,n,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=r,this},setXYZW:function(e,t,n,r,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=r,this.array[e+3]=i,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),hn.prototype=Object.create(ln.prototype),hn.prototype.constructor=hn,un.prototype=Object.create(ln.prototype),un.prototype.constructor=un,pn.prototype=Object.create(ln.prototype),pn.prototype.constructor=pn,dn.prototype=Object.create(ln.prototype),dn.prototype.constructor=dn,fn.prototype=Object.create(ln.prototype),fn.prototype.constructor=fn,mn.prototype=Object.create(ln.prototype),mn.prototype.constructor=mn,vn.prototype=Object.create(ln.prototype),vn.prototype.constructor=vn,gn.prototype=Object.create(ln.prototype),gn.prototype.constructor=gn,yn.prototype=Object.create(ln.prototype),yn.prototype.constructor=yn,Object.assign(xn.prototype,{computeGroups:function(e){for(var t,n=[],r=void 0,i=e.faces,a=0;a<i.length;a++){var o=i[a];o.materialIndex!==r&&(r=o.materialIndex,void 0!==t&&(t.count=3*a-t.start,n.push(t)),t={start:3*a,materialIndex:r})}void 0!==t&&(t.count=3*a-t.start,n.push(t)),this.groups=n},fromGeometry:function(e){var t,n=e.faces,r=e.vertices,i=e.faceVertexUvs,a=i[0]&&i[0].length>0,o=i[1]&&i[1].length>0,s=e.morphTargets,c=s.length;if(c>0){t=[];for(var l=0;l<c;l++)t[l]={name:s[l].name,data:[]};this.morphTargets.position=t}var h,u=e.morphNormals,p=u.length;if(p>0){h=[];for(l=0;l<p;l++)h[l]={name:u[l].name,data:[]};this.morphTargets.normal=h}var d=e.skinIndices,f=e.skinWeights,m=d.length===r.length,v=f.length===r.length;r.length>0&&0===n.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(l=0;l<n.length;l++){var g=n[l];this.vertices.push(r[g.a],r[g.b],r[g.c]);var y=g.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var x=g.normal;this.normals.push(x,x,x)}var b,w=g.vertexColors;if(3===w.length)this.colors.push(w[0],w[1],w[2]);else{var _=g.color;this.colors.push(_,_,_)}if(!0===a)void 0!==(b=i[0][l])?this.uvs.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",l),this.uvs.push(new Rt,new Rt,new Rt));if(!0===o)void 0!==(b=i[1][l])?this.uvs2.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",l),this.uvs2.push(new Rt,new Rt,new Rt));for(var M=0;M<c;M++){var T=s[M].vertices;t[M].data.push(T[g.a],T[g.b],T[g.c])}for(M=0;M<p;M++){var S=u[M].vertexNormals[l];h[M].data.push(S.a,S.b,S.c)}m&&this.skinIndices.push(d[g.a],d[g.b],d[g.c]),v&&this.skinWeights.push(f[g.a],f[g.b],f[g.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this}});var wn=1;function _n(){Object.defineProperty(this,"id",{value:wn+=2}),this.uuid=Pt.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}function Mn(e,t){qt.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new _n,this.material=void 0!==t?t:new cn({color:16777215*Math.random()}),this.drawMode=dt,this.updateMorphTargets()}_n.prototype=Object.assign(Object.create(r.prototype),{constructor:_n,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){Array.isArray(e)?this.index=new(bn(e)>65535?vn:fn)(e,1):this.index=e},addAttribute:function(e,t){return t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):(this.attributes[e]=t,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(e,new ln(arguments[1],arguments[2])))},getAttribute:function(e){return this.attributes[e]},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,n){this.groups.push({start:e,count:t,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToBufferAttribute(t),t.needsUpdate=!0);var n=this.attributes.normal;void 0!==n&&((new It).getNormalMatrix(e).applyToBufferAttribute(n),n.needsUpdate=!0);var r=this.attributes.tangent;void 0!==r&&((new It).getNormalMatrix(e).applyToBufferAttribute(r),r.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var e=new Ht;return function(t){return e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e=new Ht;return function(t){return e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e=new Ht;return function(t){return e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e=new Ht;return function(t,n,r){return e.makeTranslation(t,n,r),this.applyMatrix(e),this}}(),scale:function(){var e=new Ht;return function(t,n,r){return e.makeScale(t,n,r),this.applyMatrix(e),this}}(),lookAt:function(){var e=new qt;return function(t){e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),center:function(){var e=new Ot;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(e).negate(),this.translate(e.x,e.y,e.z),this}}(),setFromObject:function(e){var t=e.geometry;if(e.isPoints||e.isLine){var n=new gn(3*t.vertices.length,3),r=new gn(3*t.colors.length,3);if(this.addAttribute("position",n.copyVector3sArray(t.vertices)),this.addAttribute("color",r.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var i=new gn(t.lineDistances.length,1);this.addAttribute("lineDistance",i.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(e){for(var t=[],n=0,r=e.length;n<r;n++){var i=e[n];t.push(i.x,i.y,i.z||0)}return this.addAttribute("position",new gn(t,3)),this},updateFromObject:function(e){var t,n=e.geometry;if(e.isMesh){var r=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(r=void 0,n.elementsNeedUpdate=!1),void 0===r)return this.fromGeometry(n);r.verticesNeedUpdate=n.verticesNeedUpdate,r.normalsNeedUpdate=n.normalsNeedUpdate,r.colorsNeedUpdate=n.colorsNeedUpdate,r.uvsNeedUpdate=n.uvsNeedUpdate,r.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=r}return!0===n.verticesNeedUpdate&&(void 0!==(t=this.attributes.position)&&(t.copyVector3sArray(n.vertices),t.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(t=this.attributes.normal)&&(t.copyVector3sArray(n.normals),t.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(t=this.attributes.color)&&(t.copyColorsArray(n.colors),t.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(t=this.attributes.uv)&&(t.copyVector2sArray(n.uvs),t.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(t=this.attributes.lineDistance)&&(t.copyArray(n.lineDistances),t.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(e.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new xn).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.addAttribute("position",new ln(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var n=new Float32Array(3*e.normals.length);this.addAttribute("normal",new ln(n,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var r=new Float32Array(3*e.colors.length);this.addAttribute("color",new ln(r,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var i=new Float32Array(2*e.uvs.length);this.addAttribute("uv",new ln(i,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);this.addAttribute("uv2",new ln(a,2).copyVector2sArray(e.uvs2))}for(var o in this.groups=e.groups,e.morphTargets){for(var s=[],c=e.morphTargets[o],l=0,h=c.length;l<h;l++){var u=c[l],p=new gn(3*u.data.length,3);p.name=u.name,s.push(p.copyVector3sArray(u.data))}this.morphAttributes[o]=s}if(e.skinIndices.length>0){var d=new gn(4*e.skinIndices.length,4);this.addAttribute("skinIndex",d.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var f=new gn(4*e.skinWeights.length,4);this.addAttribute("skinWeight",f.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){var e=new Zt;return function(){null===this.boundingBox&&(this.boundingBox=new Zt);var t=this.attributes.position,n=this.morphAttributes.position;if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),n)for(var r=0,i=n.length;r<i;r++){var a=n[r];e.setFromBufferAttribute(a),this.boundingBox.expandByPoint(e.min),this.boundingBox.expandByPoint(e.max)}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}}(),computeBoundingSphere:function(){var e=new Zt,t=new Zt,n=new Ot;return function(){null===this.boundingSphere&&(this.boundingSphere=new Jt);var r=this.attributes.position,i=this.morphAttributes.position;if(r){var a=this.boundingSphere.center;if(e.setFromBufferAttribute(r),i)for(var o=0,s=i.length;o<s;o++){var c=i[o];t.setFromBufferAttribute(c),e.expandByPoint(t.min),e.expandByPoint(t.max)}e.getCenter(a);var l=0;for(o=0,s=r.count;o<s;o++)n.fromBufferAttribute(r,o),l=Math.max(l,a.distanceToSquared(n));if(i)for(o=0,s=i.length;o<s;o++)for(var h=0,u=(c=i[o]).count;h<u;h++)n.fromBufferAttribute(c,h),l=Math.max(l,a.distanceToSquared(n));this.boundingSphere.radius=Math.sqrt(l),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes;if(t.position){var n=t.position.array;if(void 0===t.normal)this.addAttribute("normal",new ln(new Float32Array(n.length),3));else for(var r=t.normal.array,i=0,a=r.length;i<a;i++)r[i]=0;var o,s,c,l=t.normal.array,h=new Ot,u=new Ot,p=new Ot,d=new Ot,f=new Ot;if(e){var m=e.array;for(i=0,a=e.count;i<a;i+=3)o=3*m[i+0],s=3*m[i+1],c=3*m[i+2],h.fromArray(n,o),u.fromArray(n,s),p.fromArray(n,c),d.subVectors(p,u),f.subVectors(h,u),d.cross(f),l[o]+=d.x,l[o+1]+=d.y,l[o+2]+=d.z,l[s]+=d.x,l[s+1]+=d.y,l[s+2]+=d.z,l[c]+=d.x,l[c+1]+=d.y,l[c+2]+=d.z}else for(i=0,a=n.length;i<a;i+=9)h.fromArray(n,i),u.fromArray(n,i+3),p.fromArray(n,i+6),d.subVectors(p,u),f.subVectors(h,u),d.cross(f),l[i]=d.x,l[i+1]=d.y,l[i+2]=d.z,l[i+3]=d.x,l[i+4]=d.y,l[i+5]=d.z,l[i+6]=d.x,l[i+7]=d.y,l[i+8]=d.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(e&&e.isBufferGeometry){void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var r in n)if(void 0!==e.attributes[r])for(var i=n[r].array,a=e.attributes[r],o=a.array,s=a.itemSize*t,c=Math.min(o.length,i.length-s),l=0,h=s;l<c;l++,h++)i[h]=o[l];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e)},normalizeNormals:function(){var e=new Ot;return function(){for(var t=this.attributes.normal,n=0,r=t.count;n<r;n++)e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.normalize(),t.setXYZ(n,e.x,e.y,e.z)}}(),toNonIndexed:function(){function e(e,t){for(var n=e.array,r=e.itemSize,i=new n.constructor(t.length*r),a=0,o=0,s=0,c=t.length;s<c;s++){a=t[s]*r;for(var l=0;l<r;l++)i[o++]=n[a++]}return new ln(i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new _n,n=this.index.array,r=this.attributes;for(var i in r){var a=e(r[i],n);t.addAttribute(i,a)}var o=this.morphAttributes;for(i in o){for(var s=[],c=o[i],l=0,h=c.length;l<h;l++){a=e(c[l],n);s.push(a)}t.morphAttributes[i]=s}for(var u=this.groups,p=(l=0,u.length);l<p;l++){var d=u[l];t.addGroup(d.start,d.count,d.materialIndex)}return t},toJSON:function(){var e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){var t=this.parameters;for(var n in t)void 0!==t[n]&&(e[n]=t[n]);return e}e.data={attributes:{}};var r=this.index;null!==r&&(e.data.index={type:r.array.constructor.name,array:Array.prototype.slice.call(r.array)});var i=this.attributes;for(var n in i){var a=(p=i[n]).toJSON();""!==p.name&&(a.name=p.name),e.data.attributes[n]=a}var o={},s=!1;for(var n in this.morphAttributes){for(var c=this.morphAttributes[n],l=[],h=0,u=c.length;h<u;h++){var p;a=(p=c[h]).toJSON();""!==p.name&&(a.name=p.name),l.push(a)}l.length>0&&(o[n]=l,s=!0)}s&&(e.data.morphAttributes=o);var d=this.groups;d.length>0&&(e.data.groups=JSON.parse(JSON.stringify(d)));var f=this.boundingSphere;return null!==f&&(e.data.boundingSphere={center:f.center.toArray(),radius:f.radius}),e},clone:function(){return(new _n).copy(this)},copy:function(e){var t,n,r;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var i=e.index;null!==i&&this.setIndex(i.clone());var a=e.attributes;for(t in a){var o=a[t];this.addAttribute(t,o.clone())}var s=e.morphAttributes;for(t in s){var c=[],l=s[t];for(n=0,r=l.length;n<r;n++)c.push(l[n].clone());this.morphAttributes[t]=c}var h=e.groups;for(n=0,r=h.length;n<r;n++){var u=h[n];this.addGroup(u.start,u.count,u.materialIndex)}var p=e.boundingBox;null!==p&&(this.boundingBox=p.clone());var d=e.boundingSphere;return null!==d&&(this.boundingSphere=d.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Mn.prototype=Object.assign(Object.create(qt.prototype),{constructor:Mn,isMesh:!0,setDrawMode:function(e){this.drawMode=e},copy:function(e){return qt.prototype.copy.call(this,e),this.drawMode=e.drawMode,void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this},updateMorphTargets:function(){var e,t,n,r=this.geometry;if(r.isBufferGeometry){var i=r.morphAttributes,a=Object.keys(i);if(a.length>0){var o=i[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)n=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}else{var s=r.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(){var e=new Ht,t=new Kt,n=new Jt,r=new Ot,i=new Ot,a=new Ot,o=new Ot,s=new Ot,c=new Ot,l=new Ot,h=new Ot,u=new Ot,p=new Rt,d=new Rt,f=new Rt,g=new Ot,y=new Ot;function x(e,t,n,r,i,a,o,s){if(null===(t.side===m?r.intersectTriangle(o,a,i,!0,s):r.intersectTriangle(i,a,o,t.side!==v,s)))return null;y.copy(s),y.applyMatrix4(e.matrixWorld);var c=n.ray.origin.distanceTo(y);return c<n.near||c>n.far?null:{distance:c,point:y.clone(),object:e}}function b(e,t,n,m,v,y,b,w,_,M,T){r.fromBufferAttribute(v,_),i.fromBufferAttribute(v,M),a.fromBufferAttribute(v,T);var S=e.morphTargetInfluences;if(t.morphTargets&&y&&S){l.set(0,0,0),h.set(0,0,0),u.set(0,0,0);for(var E=0,A=y.length;E<A;E++){var L=S[E],P=y[E];0!==L&&(o.fromBufferAttribute(P,_),s.fromBufferAttribute(P,M),c.fromBufferAttribute(P,T),l.addScaledVector(o.sub(r),L),h.addScaledVector(s.sub(i),L),u.addScaledVector(c.sub(a),L))}r.add(l),i.add(h),a.add(u)}var R=x(e,t,n,m,r,i,a,g);if(R){b&&(p.fromBufferAttribute(b,_),d.fromBufferAttribute(b,M),f.fromBufferAttribute(b,T),R.uv=Qt.getUV(g,r,i,a,p,d,f,new Rt)),w&&(p.fromBufferAttribute(w,_),d.fromBufferAttribute(w,M),f.fromBufferAttribute(w,T),R.uv2=Qt.getUV(g,r,i,a,p,d,f,new Rt));var C=new an(_,M,T);Qt.getNormal(r,i,a,C.normal),R.face=C}return R}return function(r,i){var a,o=this.geometry,s=this.material,c=this.matrixWorld;if(void 0!==s&&(null===o.boundingSphere&&o.computeBoundingSphere(),n.copy(o.boundingSphere),n.applyMatrix4(c),!1!==r.ray.intersectsSphere(n)&&(e.getInverse(c),t.copy(r.ray).applyMatrix4(e),null===o.boundingBox||!1!==t.intersectsBox(o.boundingBox))))if(o.isBufferGeometry){var l,h,u,m,v,y,w,_,M,T=o.index,S=o.attributes.position,E=o.morphAttributes.position,A=o.attributes.uv,L=o.attributes.uv2,P=o.groups,R=o.drawRange;if(null!==T)if(Array.isArray(s))for(m=0,y=P.length;m<y;m++)for(M=s[(_=P[m]).materialIndex],v=Math.max(_.start,R.start),w=Math.min(_.start+_.count,R.start+R.count);v<w;v+=3)l=T.getX(v),h=T.getX(v+1),u=T.getX(v+2),(a=b(this,M,r,t,S,E,A,L,l,h,u))&&(a.faceIndex=Math.floor(v/3),a.face.materialIndex=_.materialIndex,i.push(a));else for(m=Math.max(0,R.start),y=Math.min(T.count,R.start+R.count);m<y;m+=3)l=T.getX(m),h=T.getX(m+1),u=T.getX(m+2),(a=b(this,s,r,t,S,E,A,L,l,h,u))&&(a.faceIndex=Math.floor(m/3),i.push(a));else if(void 0!==S)if(Array.isArray(s))for(m=0,y=P.length;m<y;m++)for(M=s[(_=P[m]).materialIndex],v=Math.max(_.start,R.start),w=Math.min(_.start+_.count,R.start+R.count);v<w;v+=3)(a=b(this,M,r,t,S,E,A,L,l=v,h=v+1,u=v+2))&&(a.faceIndex=Math.floor(v/3),a.face.materialIndex=_.materialIndex,i.push(a));else for(m=Math.max(0,R.start),y=Math.min(S.count,R.start+R.count);m<y;m+=3)(a=b(this,s,r,t,S,E,A,L,l=m,h=m+1,u=m+2))&&(a.faceIndex=Math.floor(m/3),i.push(a))}else if(o.isGeometry){var C,O,I,D,N=Array.isArray(s),z=o.vertices,U=o.faces,B=o.faceVertexUvs[0];B.length>0&&(D=B);for(var F=0,G=U.length;F<G;F++){var k=U[F],H=N?s[k.materialIndex]:s;if(void 0!==H&&(C=z[k.a],O=z[k.b],I=z[k.c],a=x(this,H,r,t,C,O,I,g))){if(D&&D[F]){var j=D[F];p.copy(j[0]),d.copy(j[1]),f.copy(j[2]),a.uv=Qt.getUV(g,C,O,I,p,d,f,new Rt)}a.face=k,a.faceIndex=F,i.push(a)}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var Tn=0;function Sn(){Object.defineProperty(this,"id",{value:Tn+=2}),this.uuid=Pt.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function En(e,t,n,r,i,a){Sn.call(this),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:i,depthSegments:a},this.fromBufferGeometry(new An(e,t,n,r,i,a)),this.mergeVertices()}function An(e,t,n,r,i,a){_n.call(this),this.type="BoxBufferGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:i,depthSegments:a};var o=this;e=e||1,t=t||1,n=n||1,r=Math.floor(r)||1,i=Math.floor(i)||1;var s=[],c=[],l=[],h=[],u=0,p=0;function d(e,t,n,r,i,a,d,f,m,v,g){var y,x,b=a/m,w=d/v,_=a/2,M=d/2,T=f/2,S=m+1,E=v+1,A=0,L=0,P=new Ot;for(x=0;x<E;x++){var R=x*w-M;for(y=0;y<S;y++){var C=y*b-_;P[e]=C*r,P[t]=R*i,P[n]=T,c.push(P.x,P.y,P.z),P[e]=0,P[t]=0,P[n]=f>0?1:-1,l.push(P.x,P.y,P.z),h.push(y/m),h.push(1-x/v),A+=1}}for(x=0;x<v;x++)for(y=0;y<m;y++){var O=u+y+S*x,I=u+y+S*(x+1),D=u+(y+1)+S*(x+1),N=u+(y+1)+S*x;s.push(O,I,N),s.push(I,D,N),L+=6}o.addGroup(p,L,g),p+=L,u+=A}d("z","y","x",-1,-1,n,t,e,a=Math.floor(a)||1,i,0),d("z","y","x",1,-1,n,t,-e,a,i,1),d("x","z","y",1,1,e,n,t,r,a,2),d("x","z","y",1,-1,e,n,-t,r,a,3),d("x","y","z",1,-1,e,t,n,r,i,4),d("x","y","z",-1,-1,e,t,-n,r,i,5),this.setIndex(s),this.addAttribute("position",new gn(c,3)),this.addAttribute("normal",new gn(l,3)),this.addAttribute("uv",new gn(h,2))}function Ln(e){var t={};for(var n in e)for(var r in t[n]={},e[n]){var i=e[n][r];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)?t[n][r]=i.clone():Array.isArray(i)?t[n][r]=i.slice():t[n][r]=i}return t}function Pn(e){for(var t={},n=0;n<e.length;n++){var r=Ln(e[n]);for(var i in r)t[i]=r[i]}return t}Sn.prototype=Object.assign(Object.create(r.prototype),{constructor:Sn,isGeometry:!0,applyMatrix:function(e){for(var t=(new It).getNormalMatrix(e),n=0,r=this.vertices.length;n<r;n++){this.vertices[n].applyMatrix4(e)}for(n=0,r=this.faces.length;n<r;n++){var i=this.faces[n];i.normal.applyMatrix3(t).normalize();for(var a=0,o=i.vertexNormals.length;a<o;a++)i.vertexNormals[a].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var e=new Ht;return function(t){return e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e=new Ht;return function(t){return e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e=new Ht;return function(t){return e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e=new Ht;return function(t,n,r){return e.makeTranslation(t,n,r),this.applyMatrix(e),this}}(),scale:function(){var e=new Ht;return function(t,n,r){return e.makeScale(t,n,r),this.applyMatrix(e),this}}(),lookAt:function(){var e=new qt;return function(t){e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),fromBufferGeometry:function(e){var t=this,n=null!==e.index?e.index.array:void 0,r=e.attributes,i=r.position.array,a=void 0!==r.normal?r.normal.array:void 0,o=void 0!==r.color?r.color.array:void 0,s=void 0!==r.uv?r.uv.array:void 0,c=void 0!==r.uv2?r.uv2.array:void 0;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var l=0;l<i.length;l+=3)t.vertices.push((new Ot).fromArray(i,l)),void 0!==o&&t.colors.push((new en).fromArray(o,l));function h(e,n,r,i){var l=void 0===o?[]:[t.colors[e].clone(),t.colors[n].clone(),t.colors[r].clone()],h=new an(e,n,r,void 0===a?[]:[(new Ot).fromArray(a,3*e),(new Ot).fromArray(a,3*n),(new Ot).fromArray(a,3*r)],l,i);t.faces.push(h),void 0!==s&&t.faceVertexUvs[0].push([(new Rt).fromArray(s,2*e),(new Rt).fromArray(s,2*n),(new Rt).fromArray(s,2*r)]),void 0!==c&&t.faceVertexUvs[1].push([(new Rt).fromArray(c,2*e),(new Rt).fromArray(c,2*n),(new Rt).fromArray(c,2*r)])}var u=e.groups;if(u.length>0)for(l=0;l<u.length;l++)for(var p=u[l],d=p.start,f=d,m=d+p.count;f<m;f+=3)void 0!==n?h(n[f],n[f+1],n[f+2],p.materialIndex):h(f,f+1,f+2,p.materialIndex);else if(void 0!==n)for(l=0;l<n.length;l+=3)h(n[l],n[l+1],n[l+2]);else for(l=0;l<i.length/3;l+=3)h(l,l+1,l+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){var e=new Ot;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(e).negate(),this.translate(e.x,e.y,e.z),this}}(),normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,n=0===t?1:1/t,r=new Ht;return r.set(n,0,0,-n*e.x,0,n,0,-n*e.y,0,0,n,-n*e.z,0,0,0,1),this.applyMatrix(r),this},computeFaceNormals:function(){for(var e=new Ot,t=new Ot,n=0,r=this.faces.length;n<r;n++){var i=this.faces[n],a=this.vertices[i.a],o=this.vertices[i.b],s=this.vertices[i.c];e.subVectors(s,o),t.subVectors(a,o),e.cross(t),e.normalize(),i.normal.copy(e)}},computeVertexNormals:function(e){var t,n,r,i,a,o;for(void 0===e&&(e=!0),o=new Array(this.vertices.length),t=0,n=this.vertices.length;t<n;t++)o[t]=new Ot;if(e){var s,c,l,h=new Ot,u=new Ot;for(r=0,i=this.faces.length;r<i;r++)a=this.faces[r],s=this.vertices[a.a],c=this.vertices[a.b],l=this.vertices[a.c],h.subVectors(l,c),u.subVectors(s,c),h.cross(u),o[a.a].add(h),o[a.b].add(h),o[a.c].add(h)}else for(this.computeFaceNormals(),r=0,i=this.faces.length;r<i;r++)o[(a=this.faces[r]).a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(t=0,n=this.vertices.length;t<n;t++)o[t].normalize();for(r=0,i=this.faces.length;r<i;r++){var p=(a=this.faces[r]).vertexNormals;3===p.length?(p[0].copy(o[a.a]),p[1].copy(o[a.b]),p[2].copy(o[a.c])):(p[0]=o[a.a].clone(),p[1]=o[a.b].clone(),p[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var e,t,n;for(this.computeFaceNormals(),e=0,t=this.faces.length;e<t;e++){var r=(n=this.faces[e]).vertexNormals;3===r.length?(r[0].copy(n.normal),r[1].copy(n.normal),r[2].copy(n.normal)):(r[0]=n.normal.clone(),r[1]=n.normal.clone(),r[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,n,r,i;for(n=0,r=this.faces.length;n<r;n++)for((i=this.faces[n]).__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),e=0,t=i.vertexNormals.length;e<t;e++)i.__originalVertexNormals[e]?i.__originalVertexNormals[e].copy(i.vertexNormals[e]):i.__originalVertexNormals[e]=i.vertexNormals[e].clone();var a=new Sn;for(a.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var o=this.morphNormals[e].faceNormals,s=this.morphNormals[e].vertexNormals;for(n=0,r=this.faces.length;n<r;n++)c=new Ot,l={a:new Ot,b:new Ot,c:new Ot},o.push(c),s.push(l)}var c,l,h=this.morphNormals[e];for(a.vertices=this.morphTargets[e].vertices,a.computeFaceNormals(),a.computeVertexNormals(),n=0,r=this.faces.length;n<r;n++)i=this.faces[n],c=h.faceNormals[n],l=h.vertexNormals[n],c.copy(i.normal),l.a.copy(i.vertexNormals[0]),l.b.copy(i.vertexNormals[1]),l.c.copy(i.vertexNormals[2])}for(n=0,r=this.faces.length;n<r;n++)(i=this.faces[n]).normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Zt),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new Jt),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,n){if(e&&e.isGeometry){var r,i=this.vertices.length,a=this.vertices,o=e.vertices,s=this.faces,c=e.faces,l=this.colors,h=e.colors;void 0===n&&(n=0),void 0!==t&&(r=(new It).getNormalMatrix(t));for(var u=0,p=o.length;u<p;u++){var d=o[u].clone();void 0!==t&&d.applyMatrix4(t),a.push(d)}for(u=0,p=h.length;u<p;u++)l.push(h[u].clone());for(u=0,p=c.length;u<p;u++){var f,m,v,g=c[u],y=g.vertexNormals,x=g.vertexColors;(f=new an(g.a+i,g.b+i,g.c+i)).normal.copy(g.normal),void 0!==r&&f.normal.applyMatrix3(r).normalize();for(var b=0,w=y.length;b<w;b++)m=y[b].clone(),void 0!==r&&m.applyMatrix3(r).normalize(),f.vertexNormals.push(m);f.color.copy(g.color);for(b=0,w=x.length;b<w;b++)v=x[b],f.vertexColors.push(v.clone());f.materialIndex=g.materialIndex+n,s.push(f)}for(u=0,p=e.faceVertexUvs.length;u<p;u++){var _=e.faceVertexUvs[u];void 0===this.faceVertexUvs[u]&&(this.faceVertexUvs[u]=[]);for(b=0,w=_.length;b<w;b++){for(var M=_[b],T=[],S=0,E=M.length;S<E;S++)T.push(M[S].clone());this.faceVertexUvs[u].push(T)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e)},mergeMesh:function(e){e&&e.isMesh?(e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e)},mergeVertices:function(){var e,t,n,r,i,a,o,s,c={},l=[],h=[],u=Math.pow(10,4);for(n=0,r=this.vertices.length;n<r;n++)e=this.vertices[n],void 0===c[t=Math.round(e.x*u)+"_"+Math.round(e.y*u)+"_"+Math.round(e.z*u)]?(c[t]=n,l.push(this.vertices[n]),h[n]=l.length-1):h[n]=h[c[t]];var p=[];for(n=0,r=this.faces.length;n<r;n++){(i=this.faces[n]).a=h[i.a],i.b=h[i.b],i.c=h[i.c],a=[i.a,i.b,i.c];for(var d=0;d<3;d++)if(a[d]===a[(d+1)%3]){p.push(n);break}}for(n=p.length-1;n>=0;n--){var f=p[n];for(this.faces.splice(f,1),o=0,s=this.faceVertexUvs.length;o<s;o++)this.faceVertexUvs[o].splice(f,1)}var m=this.vertices.length-l.length;return this.vertices=l,m},setFromPoints:function(e){this.vertices=[];for(var t=0,n=e.length;t<n;t++){var r=e[t];this.vertices.push(new Ot(r.x,r.y,r.z||0))}return this},sortFacesByMaterialIndex:function(){for(var e=this.faces,t=e.length,n=0;n<t;n++)e[n]._id=n;e.sort(function(e,t){return e.materialIndex-t.materialIndex});var r,i,a=this.faceVertexUvs[0],o=this.faceVertexUvs[1];a&&a.length===t&&(r=[]),o&&o.length===t&&(i=[]);for(n=0;n<t;n++){var s=e[n]._id;r&&r.push(a[s]),i&&i.push(o[s])}r&&(this.faceVertexUvs[0]=r),i&&(this.faceVertexUvs[1]=i)},toJSON:function(){var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var n in t)void 0!==t[n]&&(e[n]=t[n]);return e}for(var r=[],i=0;i<this.vertices.length;i++){var a=this.vertices[i];r.push(a.x,a.y,a.z)}var o=[],s=[],c={},l=[],h={},u=[],p={};for(i=0;i<this.faces.length;i++){var d=this.faces[i],f=void 0!==this.faceVertexUvs[0][i],m=d.normal.length()>0,v=d.vertexNormals.length>0,g=1!==d.color.r||1!==d.color.g||1!==d.color.b,y=d.vertexColors.length>0,x=0;if(x=M(x=M(x=M(x=M(x=M(x=M(x=M(x=M(x,0,0),1,!0),2,!1),3,f),4,m),5,v),6,g),7,y),o.push(x),o.push(d.a,d.b,d.c),o.push(d.materialIndex),f){var b=this.faceVertexUvs[0][i];o.push(E(b[0]),E(b[1]),E(b[2]))}if(m&&o.push(T(d.normal)),v){var w=d.vertexNormals;o.push(T(w[0]),T(w[1]),T(w[2]))}if(g&&o.push(S(d.color)),y){var _=d.vertexColors;o.push(S(_[0]),S(_[1]),S(_[2]))}}function M(e,t,n){return n?e|1<<t:e&~(1<<t)}function T(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==c[t]?c[t]:(c[t]=s.length/3,s.push(e.x,e.y,e.z),c[t])}function S(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==h[t]?h[t]:(h[t]=l.length,l.push(e.getHex()),h[t])}function E(e){var t=e.x.toString()+e.y.toString();return void 0!==p[t]?p[t]:(p[t]=u.length/2,u.push(e.x,e.y),p[t])}return e.data={},e.data.vertices=r,e.data.normals=s,l.length>0&&(e.data.colors=l),u.length>0&&(e.data.uvs=[u]),e.data.faces=o,e},clone:function(){return(new Sn).copy(this)},copy:function(e){var t,n,r,i,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var s=e.vertices;for(t=0,n=s.length;t<n;t++)this.vertices.push(s[t].clone());var c=e.colors;for(t=0,n=c.length;t<n;t++)this.colors.push(c[t].clone());var l=e.faces;for(t=0,n=l.length;t<n;t++)this.faces.push(l[t].clone());for(t=0,n=e.faceVertexUvs.length;t<n;t++){var h=e.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),r=0,i=h.length;r<i;r++){var u=h[r],p=[];for(a=0,o=u.length;a<o;a++){var d=u[a];p.push(d.clone())}this.faceVertexUvs[t].push(p)}}var f=e.morphTargets;for(t=0,n=f.length;t<n;t++){var m={};if(m.name=f[t].name,void 0!==f[t].vertices)for(m.vertices=[],r=0,i=f[t].vertices.length;r<i;r++)m.vertices.push(f[t].vertices[r].clone());if(void 0!==f[t].normals)for(m.normals=[],r=0,i=f[t].normals.length;r<i;r++)m.normals.push(f[t].normals[r].clone());this.morphTargets.push(m)}var v=e.morphNormals;for(t=0,n=v.length;t<n;t++){var g={};if(void 0!==v[t].vertexNormals)for(g.vertexNormals=[],r=0,i=v[t].vertexNormals.length;r<i;r++){var y=v[t].vertexNormals[r],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[t].faceNormals)for(g.faceNormals=[],r=0,i=v[t].faceNormals.length;r<i;r++)g.faceNormals.push(v[t].faceNormals[r].clone());this.morphNormals.push(g)}var b=e.skinWeights;for(t=0,n=b.length;t<n;t++)this.skinWeights.push(b[t].clone());var w=e.skinIndices;for(t=0,n=w.length;t<n;t++)this.skinIndices.push(w[t].clone());var _=e.lineDistances;for(t=0,n=_.length;t<n;t++)this.lineDistances.push(_[t]);var M=e.boundingBox;null!==M&&(this.boundingBox=M.clone());var T=e.boundingSphere;return null!==T&&(this.boundingSphere=T.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),En.prototype=Object.create(Sn.prototype),En.prototype.constructor=En,An.prototype=Object.create(_n.prototype),An.prototype.constructor=An;var Rn={clone:Ln,merge:Pn},Cn="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",On="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";function In(e){sn.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=Cn,this.fragmentShader=On,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}function Dn(){qt.call(this),this.type="Camera",this.matrixWorldInverse=new Ht,this.projectionMatrix=new Ht,this.projectionMatrixInverse=new Ht}function Nn(e,t,n,r){Dn.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==r?r:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}In.prototype=Object.create(sn.prototype),In.prototype.constructor=In,In.prototype.isShaderMaterial=!0,In.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Ln(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},In.prototype.toJSON=function(e){var t=sn.prototype.toJSON.call(this,e);for(var n in t.uniforms={},this.uniforms){var r=this.uniforms[n].value;r&&r.isTexture?t.uniforms[n]={type:"t",value:r.toJSON(e).uuid}:r&&r.isColor?t.uniforms[n]={type:"c",value:r.getHex()}:r&&r.isVector2?t.uniforms[n]={type:"v2",value:r.toArray()}:r&&r.isVector3?t.uniforms[n]={type:"v3",value:r.toArray()}:r&&r.isVector4?t.uniforms[n]={type:"v4",value:r.toArray()}:r&&r.isMatrix3?t.uniforms[n]={type:"m3",value:r.toArray()}:r&&r.isMatrix4?t.uniforms[n]={type:"m4",value:r.toArray()}:t.uniforms[n]={value:r}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;var i={};for(var a in this.extensions)!0===this.extensions[a]&&(i[a]=!0);return Object.keys(i).length>0&&(t.extensions=i),t},Dn.prototype=Object.assign(Object.create(qt.prototype),{constructor:Dn,isCamera:!0,copy:function(e,t){return qt.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new Ot),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(e){qt.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),Nn.prototype=Object.assign(Object.create(Dn.prototype),{constructor:Nn,isPerspectiveCamera:!0,copy:function(e,t){return Dn.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*Pt.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*Pt.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*Pt.RAD2DEG*Math.atan(Math.tan(.5*Pt.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,n,r,i,a){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*Pt.DEG2RAD*this.fov)/this.zoom,n=2*t,r=this.aspect*n,i=-.5*r,a=this.view;if(null!==this.view&&this.view.enabled){var o=a.fullWidth,s=a.fullHeight;i+=a.offsetX*r/o,t-=a.offsetY*n/s,r*=a.width/o,n*=a.height/s}var c=this.filmOffset;0!==c&&(i+=e*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+r,t,t-n,e,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=qt.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}});var zn=90,Un=1;function Bn(e,t,n,r){qt.call(this),this.type="CubeCamera";var i=new Nn(zn,Un,e,t);i.up.set(0,-1,0),i.lookAt(new Ot(1,0,0)),this.add(i);var a=new Nn(zn,Un,e,t);a.up.set(0,-1,0),a.lookAt(new Ot(-1,0,0)),this.add(a);var o=new Nn(zn,Un,e,t);o.up.set(0,0,1),o.lookAt(new Ot(0,1,0)),this.add(o);var s=new Nn(zn,Un,e,t);s.up.set(0,0,-1),s.lookAt(new Ot(0,-1,0)),this.add(s);var c=new Nn(zn,Un,e,t);c.up.set(0,-1,0),c.lookAt(new Ot(0,0,1)),this.add(c);var l=new Nn(zn,Un,e,t);l.up.set(0,-1,0),l.lookAt(new Ot(0,0,-1)),this.add(l),r=r||{format:De,magFilter:ye,minFilter:ye},this.renderTarget=new Fn(n,n,r),this.renderTarget.texture.name="CubeCamera",this.update=function(e,t){null===this.parent&&this.updateMatrixWorld();var n=e.getRenderTarget(),r=this.renderTarget,h=r.texture.generateMipmaps;r.texture.generateMipmaps=!1,e.setRenderTarget(r,0),e.render(t,i),e.setRenderTarget(r,1),e.render(t,a),e.setRenderTarget(r,2),e.render(t,o),e.setRenderTarget(r,3),e.render(t,s),e.setRenderTarget(r,4),e.render(t,c),r.texture.generateMipmaps=h,e.setRenderTarget(r,5),e.render(t,l),e.setRenderTarget(n)},this.clear=function(e,t,n,r){for(var i=e.getRenderTarget(),a=this.renderTarget,o=0;o<6;o++)e.setRenderTarget(a,o),e.clear(t,n,r);e.setRenderTarget(i)}}function Fn(e,t,n){Gt.call(this,e,t,n)}function Gn(e,t,n,r,i,a,o,s,c,l,h,u){Bt.call(this,null,a,o,s,c,l,r,i,h,u),this.image={data:e,width:t,height:n},this.magFilter=void 0!==c?c:me,this.minFilter=void 0!==l?l:me,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function kn(e,t){this.normal=void 0!==e?e:new Ot(1,0,0),this.constant=void 0!==t?t:0}function Hn(e,t,n,r,i,a){this.planes=[void 0!==e?e:new kn,void 0!==t?t:new kn,void 0!==n?n:new kn,void 0!==r?r:new kn,void 0!==i?i:new kn,void 0!==a?a:new kn]}Bn.prototype=Object.create(qt.prototype),Bn.prototype.constructor=Bn,Fn.prototype=Object.create(Gt.prototype),Fn.prototype.constructor=Fn,Fn.prototype.isWebGLRenderTargetCube=!0,Fn.prototype.fromEquirectangularTexture=function(e,t){this.texture.type=t.type,this.texture.format=t.format,this.texture.encoding=t.encoding;var n=new Yt,r={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","\tvWorldDirection = transformDirection( position, modelMatrix );","\t#include <begin_vertex>","\t#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","\tvec3 direction = normalize( vWorldDirection );","\tvec2 sampleUV;","\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","\tgl_FragColor = texture2D( tEquirect, sampleUV );","}"].join("\n")},i=new In({type:"CubemapFromEquirect",uniforms:Ln(r.uniforms),vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,side:m,blending:b});i.uniforms.tEquirect.value=t;var a=new Mn(new An(5,5,5),i);n.add(a);var o=new Bn(1,10,1);return o.renderTarget=this,o.renderTarget.texture.name="CubeCameraTexture",o.update(e,n),a.geometry.dispose(),a.material.dispose(),this},Gn.prototype=Object.create(Bt.prototype),Gn.prototype.constructor=Gn,Gn.prototype.isDataTexture=!0,Object.assign(kn.prototype,{isPlane:!0,set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,n,r){return this.normal.set(e,t,n),this.constant=r,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(){var e=new Ot,t=new Ot;return function(n,r,i){var a=e.subVectors(i,r).cross(t.subVectors(n,r)).normalize();return this.setFromNormalAndCoplanarPoint(a,n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return void 0===t&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new Ot),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)},intersectLine:function(){var e=new Ot;return function(t,n){void 0===n&&(console.warn("THREE.Plane: .intersectLine() target is now required"),n=new Ot);var r=t.delta(e),i=this.normal.dot(r);if(0===i)return 0===this.distanceToPoint(t.start)?n.copy(t.start):void 0;var a=-(t.start.dot(this.normal)+this.constant)/i;return a<0||a>1?void 0:n.copy(r).multiplyScalar(a).add(t.start)}}(),intersectsLine:function(e){var t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){return void 0===e&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),e=new Ot),e.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var e=new Ot,t=new It;return function(n,r){var i=r||t.getNormalMatrix(n),a=this.coplanarPoint(e).applyMatrix4(n),o=this.normal.applyMatrix3(i).normalize();return this.constant=-a.dot(o),this}}(),translate:function(e){return this.constant-=e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}}),Object.assign(Hn.prototype,{set:function(e,t,n,r,i,a){var o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(n),o[3].copy(r),o[4].copy(i),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,n=0;n<6;n++)t[n].copy(e.planes[n]);return this},setFromMatrix:function(e){var t=this.planes,n=e.elements,r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],c=n[5],l=n[6],h=n[7],u=n[8],p=n[9],d=n[10],f=n[11],m=n[12],v=n[13],g=n[14],y=n[15];return t[0].setComponents(o-r,h-s,f-u,y-m).normalize(),t[1].setComponents(o+r,h+s,f+u,y+m).normalize(),t[2].setComponents(o+i,h+c,f+p,y+v).normalize(),t[3].setComponents(o-i,h-c,f-p,y-v).normalize(),t[4].setComponents(o-a,h-l,f-d,y-g).normalize(),t[5].setComponents(o+a,h+l,f+d,y+g).normalize(),this},intersectsObject:function(){var e=new Jt;return function(t){var n=t.geometry;return null===n.boundingSphere&&n.computeBoundingSphere(),e.copy(n.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSprite:function(){var e=new Jt;return function(t){return e.center.set(0,0,0),e.radius=.7071067811865476,e.applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSphere:function(e){for(var t=this.planes,n=e.center,r=-e.radius,i=0;i<6;i++){if(t[i].distanceToPoint(n)<r)return!1}return!0},intersectsBox:function(){var e=new Ot;return function(t){for(var n=this.planes,r=0;r<6;r++){var i=n[r];if(e.x=i.normal.x>0?t.max.x:t.min.x,e.y=i.normal.y>0?t.max.y:t.min.y,e.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(e)<0)return!1}return!0}}(),containsPoint:function(e){for(var t=this.planes,n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}});var jn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",lights_pars_begin:"uniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif",normal_fragment_maps:"#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\t#ifdef USE_TANGENT\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\t\t#else\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t\t#endif\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#if defined( DITHERING )\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},Vn={common:{diffuse:{value:new en(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new It},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Rt(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new en(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new en(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new It}},sprite:{diffuse:{value:new en(15658734)},opacity:{value:1},center:{value:new Rt(.5,.5)},rotation:{value:0},map:{value:null},uvTransform:{value:new It}}},Wn={basic:{uniforms:Pn([Vn.common,Vn.specularmap,Vn.envmap,Vn.aomap,Vn.lightmap,Vn.fog]),vertexShader:jn.meshbasic_vert,fragmentShader:jn.meshbasic_frag},lambert:{uniforms:Pn([Vn.common,Vn.specularmap,Vn.envmap,Vn.aomap,Vn.lightmap,Vn.emissivemap,Vn.fog,Vn.lights,{emissive:{value:new en(0)}}]),vertexShader:jn.meshlambert_vert,fragmentShader:jn.meshlambert_frag},phong:{uniforms:Pn([Vn.common,Vn.specularmap,Vn.envmap,Vn.aomap,Vn.lightmap,Vn.emissivemap,Vn.bumpmap,Vn.normalmap,Vn.displacementmap,Vn.gradientmap,Vn.fog,Vn.lights,{emissive:{value:new en(0)},specular:{value:new en(1118481)},shininess:{value:30}}]),vertexShader:jn.meshphong_vert,fragmentShader:jn.meshphong_frag},standard:{uniforms:Pn([Vn.common,Vn.envmap,Vn.aomap,Vn.lightmap,Vn.emissivemap,Vn.bumpmap,Vn.normalmap,Vn.displacementmap,Vn.roughnessmap,Vn.metalnessmap,Vn.fog,Vn.lights,{emissive:{value:new en(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:jn.meshphysical_vert,fragmentShader:jn.meshphysical_frag},matcap:{uniforms:Pn([Vn.common,Vn.bumpmap,Vn.normalmap,Vn.displacementmap,Vn.fog,{matcap:{value:null}}]),vertexShader:jn.meshmatcap_vert,fragmentShader:jn.meshmatcap_frag},points:{uniforms:Pn([Vn.points,Vn.fog]),vertexShader:jn.points_vert,fragmentShader:jn.points_frag},dashed:{uniforms:Pn([Vn.common,Vn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:jn.linedashed_vert,fragmentShader:jn.linedashed_frag},depth:{uniforms:Pn([Vn.common,Vn.displacementmap]),vertexShader:jn.depth_vert,fragmentShader:jn.depth_frag},normal:{uniforms:Pn([Vn.common,Vn.bumpmap,Vn.normalmap,Vn.displacementmap,{opacity:{value:1}}]),vertexShader:jn.normal_vert,fragmentShader:jn.normal_frag},sprite:{uniforms:Pn([Vn.sprite,Vn.fog]),vertexShader:jn.sprite_vert,fragmentShader:jn.sprite_frag},background:{uniforms:{uvTransform:{value:new It},t2D:{value:null}},vertexShader:jn.background_vert,fragmentShader:jn.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:jn.cube_vert,fragmentShader:jn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:jn.equirect_vert,fragmentShader:jn.equirect_frag},distanceRGBA:{uniforms:Pn([Vn.common,Vn.displacementmap,{referencePosition:{value:new Ot},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:jn.distanceRGBA_vert,fragmentShader:jn.distanceRGBA_frag},shadow:{uniforms:Pn([Vn.lights,Vn.fog,{color:{value:new en(0)},opacity:{value:1}}]),vertexShader:jn.shadow_vert,fragmentShader:jn.shadow_frag}};function Xn(){var e=null,t=!1,n=null;function r(i,a){!1!==t&&(n(i,a),e.requestAnimationFrame(r))}return{start:function(){!0!==t&&null!==n&&(e.requestAnimationFrame(r),t=!0)},stop:function(){t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function qn(e){var t=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),t.get(e)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);var r=t.get(n);r&&(e.deleteBuffer(r.buffer),t.delete(n))},update:function(n,r){n.isInterleavedBufferAttribute&&(n=n.data);var i=t.get(n);void 0===i?t.set(n,function(t,n){var r=t.array,i=t.dynamic?35048:35044,a=e.createBuffer();e.bindBuffer(n,a),e.bufferData(n,r,i),t.onUploadCallback();var o=5126;return r instanceof Float32Array?o=5126:r instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):r instanceof Uint16Array?o=5123:r instanceof Int16Array?o=5122:r instanceof Uint32Array?o=5125:r instanceof Int32Array?o=5124:r instanceof Int8Array?o=5120:r instanceof Uint8Array&&(o=5121),{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version}}(n,r)):i.version<n.version&&(function(t,n,r){var i=n.array,a=n.updateRange;e.bindBuffer(r,t),!1===n.dynamic?e.bufferData(r,i,35044):-1===a.count?e.bufferSubData(r,0,i):0===a.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(e.bufferSubData(r,a.offset*i.BYTES_PER_ELEMENT,i.subarray(a.offset,a.offset+a.count)),a.count=-1)}(i.buffer,n,r),i.version=n.version)}}}function Yn(e,t,n,r){Sn.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:r},this.fromBufferGeometry(new Zn(e,t,n,r)),this.mergeVertices()}function Zn(e,t,n,r){_n.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};var i,a,o=(e=e||1)/2,s=(t=t||1)/2,c=Math.floor(n)||1,l=Math.floor(r)||1,h=c+1,u=l+1,p=e/c,d=t/l,f=[],m=[],v=[],g=[];for(a=0;a<u;a++){var y=a*d-s;for(i=0;i<h;i++){var x=i*p-o;m.push(x,-y,0),v.push(0,0,1),g.push(i/c),g.push(1-a/l)}}for(a=0;a<l;a++)for(i=0;i<c;i++){var b=i+h*a,w=i+h*(a+1),_=i+1+h*(a+1),M=i+1+h*a;f.push(b,w,M),f.push(w,_,M)}this.setIndex(f),this.addAttribute("position",new gn(m,3)),this.addAttribute("normal",new gn(v,3)),this.addAttribute("uv",new gn(g,2))}function Jn(e,t){return Math.abs(t[1])-Math.abs(e[1])}function Kn(e,t,n,r,i,a,o,s,c,l){e=void 0!==e?e:[],t=void 0!==t?t:ae,o=void 0!==o?o:De,Bt.call(this,e,t,n,r,i,a,o,s,c,l),this.flipY=!1}function Qn(e,t,n,r){Bt.call(this,null),this.image={data:e,width:t,height:n,depth:r},this.magFilter=me,this.minFilter=me,this.wrapR=de,this.generateMipmaps=!1,this.flipY=!1}function $n(e,t,n,r){Bt.call(this,null),this.image={data:e,width:t,height:n,depth:r},this.magFilter=me,this.minFilter=me,this.wrapR=de,this.generateMipmaps=!1,this.flipY=!1}Wn.physical={uniforms:Pn([Wn.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:jn.meshphysical_vert,fragmentShader:jn.meshphysical_frag},Yn.prototype=Object.create(Sn.prototype),Yn.prototype.constructor=Yn,Zn.prototype=Object.create(_n.prototype),Zn.prototype.constructor=Zn,Kn.prototype=Object.create(Bt.prototype),Kn.prototype.constructor=Kn,Kn.prototype.isCubeTexture=!0,Object.defineProperty(Kn.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}}),Qn.prototype=Object.create(Bt.prototype),Qn.prototype.constructor=Qn,Qn.prototype.isDataTexture2DArray=!0,$n.prototype=Object.create(Bt.prototype),$n.prototype.constructor=$n,$n.prototype.isDataTexture3D=!0;var er=new Bt,tr=new Qn,nr=new $n,rr=new Kn,ir=[],ar=[],or=new Float32Array(16),sr=new Float32Array(9),cr=new Float32Array(4);function lr(e,t,n){var r=e[0];if(r<=0||r>0)return e;var i=t*n,a=ir[i];if(void 0===a&&(a=new Float32Array(i),ir[i]=a),0!==t){r.toArray(a,0);for(var o=1,s=0;o!==t;++o)s+=n,e[o].toArray(a,s)}return a}function hr(e,t){if(e.length!==t.length)return!1;for(var n=0,r=e.length;n<r;n++)if(e[n]!==t[n])return!1;return!0}function ur(e,t){for(var n=0,r=t.length;n<r;n++)e[n]=t[n]}function pr(e,t){var n=ar[t];void 0===n&&(n=new Int32Array(t),ar[t]=n);for(var r=0;r!==t;++r)n[r]=e.allocateTextureUnit();return n}function dr(e,t){var n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function fr(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(hr(n,t))return;e.uniform2fv(this.addr,t),ur(n,t)}}function mr(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(hr(n,t))return;e.uniform3fv(this.addr,t),ur(n,t)}}function vr(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(hr(n,t))return;e.uniform4fv(this.addr,t),ur(n,t)}}function gr(e,t){var n=this.cache,r=t.elements;if(void 0===r){if(hr(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),ur(n,t)}else{if(hr(n,r))return;cr.set(r),e.uniformMatrix2fv(this.addr,!1,cr),ur(n,r)}}function yr(e,t){var n=this.cache,r=t.elements;if(void 0===r){if(hr(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),ur(n,t)}else{if(hr(n,r))return;sr.set(r),e.uniformMatrix3fv(this.addr,!1,sr),ur(n,r)}}function xr(e,t){var n=this.cache,r=t.elements;if(void 0===r){if(hr(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),ur(n,t)}else{if(hr(n,r))return;or.set(r),e.uniformMatrix4fv(this.addr,!1,or),ur(n,r)}}function br(e,t,n){var r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(e.uniform1i(this.addr,i),r[0]=i),n.safeSetTexture2D(t||er,i)}function wr(e,t,n){var r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(e.uniform1i(this.addr,i),r[0]=i),n.setTexture2DArray(t||tr,i)}function _r(e,t,n){var r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(e.uniform1i(this.addr,i),r[0]=i),n.setTexture3D(t||nr,i)}function Mr(e,t,n){var r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(e.uniform1i(this.addr,i),r[0]=i),n.safeSetTextureCube(t||rr,i)}function Tr(e,t){var n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function Sr(e,t){var n=this.cache;hr(n,t)||(e.uniform2iv(this.addr,t),ur(n,t))}function Er(e,t){var n=this.cache;hr(n,t)||(e.uniform3iv(this.addr,t),ur(n,t))}function Ar(e,t){var n=this.cache;hr(n,t)||(e.uniform4iv(this.addr,t),ur(n,t))}function Lr(e,t){e.uniform1fv(this.addr,t)}function Pr(e,t){e.uniform1iv(this.addr,t)}function Rr(e,t){e.uniform2iv(this.addr,t)}function Cr(e,t){e.uniform3iv(this.addr,t)}function Or(e,t){e.uniform4iv(this.addr,t)}function Ir(e,t){var n=lr(t,this.size,2);e.uniform2fv(this.addr,n)}function Dr(e,t){var n=lr(t,this.size,3);e.uniform3fv(this.addr,n)}function Nr(e,t){var n=lr(t,this.size,4);e.uniform4fv(this.addr,n)}function zr(e,t){var n=lr(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function Ur(e,t){var n=lr(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function Br(e,t){var n=lr(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function Fr(e,t,n){var r=t.length,i=pr(n,r);e.uniform1iv(this.addr,i);for(var a=0;a!==r;++a)n.safeSetTexture2D(t[a]||er,i[a])}function Gr(e,t,n){var r=t.length,i=pr(n,r);e.uniform1iv(this.addr,i);for(var a=0;a!==r;++a)n.safeSetTextureCube(t[a]||rr,i[a])}function kr(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=function(e){switch(e){case 5126:return dr;case 35664:return fr;case 35665:return mr;case 35666:return vr;case 35674:return gr;case 35675:return yr;case 35676:return xr;case 35678:case 36198:return br;case 35679:return _r;case 35680:return Mr;case 36289:return wr;case 5124:case 35670:return Tr;case 35667:case 35671:return Sr;case 35668:case 35672:return Er;case 35669:case 35673:return Ar}}(t.type)}function Hr(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=function(e){switch(e){case 5126:return Lr;case 35664:return Ir;case 35665:return Dr;case 35666:return Nr;case 35674:return zr;case 35675:return Ur;case 35676:return Br;case 35678:return Fr;case 35680:return Gr;case 5124:case 35670:return Pr;case 35667:case 35671:return Rr;case 35668:case 35672:return Cr;case 35669:case 35673:return Or}}(t.type)}function jr(e){this.id=e,this.seq=[],this.map={}}Hr.prototype.updateCache=function(e){var t=this.cache;e instanceof Float32Array&&t.length!==e.length&&(this.cache=new Float32Array(e.length)),ur(t,e)},jr.prototype.setValue=function(e,t,n){for(var r=this.seq,i=0,a=r.length;i!==a;++i){var o=r[i];o.setValue(e,t[o.id],n)}};var Vr=/([\w\d_]+)(\])?(\[|\.)?/g;function Wr(e,t){e.seq.push(t),e.map[t.id]=t}function Xr(e,t,n){var r=e.name,i=r.length;for(Vr.lastIndex=0;;){var a=Vr.exec(r),o=Vr.lastIndex,s=a[1],c="]"===a[2],l=a[3];if(c&&(s|=0),void 0===l||"["===l&&o+2===i){Wr(n,void 0===l?new kr(s,e,t):new Hr(s,e,t));break}var h=n.map[s];void 0===h&&Wr(n,h=new jr(s)),n=h}}function qr(e,t){this.seq=[],this.map={};for(var n=e.getProgramParameter(t,35718),r=0;r<n;++r){var i=e.getActiveUniform(t,r);Xr(i,e.getUniformLocation(t,i.name),this)}}function Yr(e,t,n){var r=e.createShader(t);return e.shaderSource(r,n),e.compileShader(r),r}qr.prototype.setValue=function(e,t,n,r){var i=this.map[t];void 0!==i&&i.setValue(e,n,r)},qr.prototype.setOptional=function(e,t,n){var r=t[n];void 0!==r&&this.setValue(e,n,r)},qr.upload=function(e,t,n,r){for(var i=0,a=t.length;i!==a;++i){var o=t[i],s=n[o.id];!1!==s.needsUpdate&&o.setValue(e,s.value,r)}},qr.seqWithValue=function(e,t){for(var n=[],r=0,i=e.length;r!==i;++r){var a=e[r];a.id in t&&n.push(a)}return n};var Zr=0;function Jr(e){switch(e){case vt:return["Linear","( value )"];case gt:return["sRGB","( value )"];case xt:return["RGBE","( value )"];case bt:return["RGBM","( value, 7.0 )"];case wt:return["RGBM","( value, 16.0 )"];case _t:return["RGBD","( value, 256.0 )"];case yt:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+e)}}function Kr(e,t,n){var r=e.getShaderParameter(t,35713),i=e.getShaderInfoLog(t).trim();return r&&""===i?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+i+function(e){for(var t=e.split("\n"),n=0;n<t.length;n++)t[n]=n+1+": "+t[n];return t.join("\n")}(e.getShaderSource(t))}function Qr(e,t){var n=Jr(t);return"vec4 "+e+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function $r(e){return""!==e}function ei(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights)}function ti(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}function ni(e){return e.replace(/^[ \t]*#include +<([\w\d./]+)>/gm,function(e,t){var n=jn[t];if(void 0===n)throw new Error("Can not resolve #include <"+t+">");return ni(n)})}function ri(e){return e.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,function(e,t,n,r){for(var i="",a=parseInt(t);a<parseInt(n);a++)i+=r.replace(/\[ i \]/g,"[ "+a+" ]");return i})}function ii(e,t,n,r,i,a,o){var s=e.getContext(),c=r.defines,l=i.vertexShader,h=i.fragmentShader,u="SHADOWMAP_TYPE_BASIC";a.shadowMapType===p?u="SHADOWMAP_TYPE_PCF":a.shadowMapType===d&&(u="SHADOWMAP_TYPE_PCF_SOFT");var f="ENVMAP_TYPE_CUBE",m="ENVMAP_MODE_REFLECTION",v="ENVMAP_BLENDING_MULTIPLY";if(a.envMap){switch(r.envMap.mapping){case ae:case oe:f="ENVMAP_TYPE_CUBE";break;case he:case ue:f="ENVMAP_TYPE_CUBE_UV";break;case se:case ce:f="ENVMAP_TYPE_EQUIREC";break;case le:f="ENVMAP_TYPE_SPHERE"}switch(r.envMap.mapping){case oe:case ce:m="ENVMAP_MODE_REFRACTION"}switch(r.combine){case J:v="ENVMAP_BLENDING_MULTIPLY";break;case K:v="ENVMAP_BLENDING_MIX";break;case Q:v="ENVMAP_BLENDING_ADD"}}var g,y,x=e.gammaFactor>0?e.gammaFactor:1,b=o.isWebGL2?"":function(e,t,n){return[(e=e||{}).derivatives||t.envMapCubeUV||t.bumpMap||t.normalMap&&!t.objectSpaceNormalMap||t.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(e.fragDepth||t.logarithmicDepthBuffer)&&n.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",e.drawBuffers&&n.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(e.shaderTextureLOD||t.envMap)&&n.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter($r).join("\n")}(r.extensions,a,t),w=function(e){var t=[];for(var n in e){var r=e[n];!1!==r&&t.push("#define "+n+" "+r)}return t.join("\n")}(c),_=s.createProgram();if(r.isRawShaderMaterial?((g=[w].filter($r).join("\n")).length>0&&(g+="\n"),(y=[b,w].filter($r).join("\n")).length>0&&(y+="\n")):(g=["precision "+a.precision+" float;","precision "+a.precision+" int;","#define SHADER_NAME "+i.name,w,a.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+x,"#define MAX_BONES "+a.maxBones,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+m:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.displacementMap&&a.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.flatShading?"#define FLAT_SHADED":"",a.skinning?"#define USE_SKINNING":"",a.useVertexTexture?"#define BONE_TEXTURE":"",a.morphTargets?"#define USE_MORPHTARGETS":"",a.morphNormals&&!1===a.flatShading?"#define USE_MORPHNORMALS":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+u:"",a.sizeAttenuation?"#define USE_SIZEATTENUATION":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(o.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter($r).join("\n"),y=[b,"precision "+a.precision+" float;","precision "+a.precision+" int;","#define SHADER_NAME "+i.name,w,a.alphaTest?"#define ALPHATEST "+a.alphaTest+(a.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+x,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.matcap?"#define USE_MATCAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+f:"",a.envMap?"#define "+m:"",a.envMap?"#define "+v:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.gradientMap?"#define USE_GRADIENTMAP":"",a.flatShading?"#define FLAT_SHADED":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+u:"",a.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",a.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(o.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",a.envMap&&(o.isWebGL2||t.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",a.toneMapping!==$?"#define TONE_MAPPING":"",a.toneMapping!==$?jn.tonemapping_pars_fragment:"",a.toneMapping!==$?function(e,t){var n;switch(t){case ee:n="Linear";break;case te:n="Reinhard";break;case ne:n="Uncharted2";break;case re:n="OptimizedCineon";break;case ie:n="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}("toneMapping",a.toneMapping):"",a.dithering?"#define DITHERING":"",a.outputEncoding||a.mapEncoding||a.matcapEncoding||a.envMapEncoding||a.emissiveMapEncoding?jn.encodings_pars_fragment:"",a.mapEncoding?Qr("mapTexelToLinear",a.mapEncoding):"",a.matcapEncoding?Qr("matcapTexelToLinear",a.matcapEncoding):"",a.envMapEncoding?Qr("envMapTexelToLinear",a.envMapEncoding):"",a.emissiveMapEncoding?Qr("emissiveMapTexelToLinear",a.emissiveMapEncoding):"",a.outputEncoding?function(e,t){var n=Jr(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}("linearToOutputTexel",a.outputEncoding):"",a.depthPacking?"#define DEPTH_PACKING "+r.depthPacking:"","\n"].filter($r).join("\n")),l=ti(l=ei(l=ni(l),a),a),h=ti(h=ei(h=ni(h),a),a),l=ri(l),h=ri(h),o.isWebGL2&&!r.isRawShaderMaterial){var M=!1,T=/^\s*#version\s+300\s+es\s*\n/;r.isShaderMaterial&&null!==l.match(T)&&null!==h.match(T)&&(M=!0,l=l.replace(T,""),h=h.replace(T,"")),g=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g,y=["#version 300 es\n","#define varying in",M?"":"out highp vec4 pc_fragColor;",M?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+y}var S,E,A=y+h,L=Yr(s,35633,g+l),P=Yr(s,35632,A);if(s.attachShader(_,L),s.attachShader(_,P),void 0!==r.index0AttributeName?s.bindAttribLocation(_,0,r.index0AttributeName):!0===a.morphTargets&&s.bindAttribLocation(_,0,"position"),s.linkProgram(_),e.debug.checkShaderErrors){var R=s.getProgramInfoLog(_).trim(),C=s.getShaderInfoLog(L).trim(),O=s.getShaderInfoLog(P).trim(),I=!0,D=!0;if(!1===s.getProgramParameter(_,35714)){I=!1;var N=Kr(s,L,"vertex"),z=Kr(s,P,"fragment");console.error("THREE.WebGLProgram: shader error: ",s.getError(),"35715",s.getProgramParameter(_,35715),"gl.getProgramInfoLog",R,N,z)}else""!==R?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",R):""!==C&&""!==O||(D=!1);D&&(this.diagnostics={runnable:I,material:r,programLog:R,vertexShader:{log:C,prefix:g},fragmentShader:{log:O,prefix:y}})}return s.deleteShader(L),s.deleteShader(P),this.getUniforms=function(){return void 0===S&&(S=new qr(s,_)),S},this.getAttributes=function(){return void 0===E&&(E=function(e,t){for(var n={},r=e.getProgramParameter(t,35721),i=0;i<r;i++){var a=e.getActiveAttrib(t,i).name;n[a]=e.getAttribLocation(t,a)}return n}(s,_)),E},this.destroy=function(){s.deleteProgram(_),this.program=void 0},this.name=i.name,this.id=Zr++,this.code=n,this.usedTimes=1,this.program=_,this.vertexShader=L,this.fragmentShader=P,this}function ai(e,t,n){var r=[],i={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},a=["precision","supportsVertexTextures","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function o(e,t){var n;return e?e.isTexture?n=e.encoding:e.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),n=e.texture.encoding):n=vt,n===vt&&t&&(n=yt),n}this.getParameters=function(t,r,a,s,c,l,h){var u=i[t.type],p=h.isSkinnedMesh?function(e){var t=e.skeleton.bones;if(n.floatVertexTextures)return 1024;var r=n.maxVertexUniforms,i=Math.floor((r-20)/4),a=Math.min(i,t.length);return a<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+a+"."),0):a}(h):0,d=n.precision;null!==t.precision&&(d=n.getMaxPrecision(t.precision))!==t.precision&&console.warn("THREE.WebGLProgram.getParameters:",t.precision,"not supported, using",d,"instead.");var f=e.getRenderTarget();return{shaderID:u,precision:d,supportsVertexTextures:n.vertexTextures,outputEncoding:o(f?f.texture:null,e.gammaOutput),map:!!t.map,mapEncoding:o(t.map,e.gammaInput),matcap:!!t.matcap,matcapEncoding:o(t.matcap,e.gammaInput),envMap:!!t.envMap,envMapMode:t.envMap&&t.envMap.mapping,envMapEncoding:o(t.envMap,e.gammaInput),envMapCubeUV:!!t.envMap&&(t.envMap.mapping===he||t.envMap.mapping===ue),lightMap:!!t.lightMap,aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:o(t.emissiveMap,e.gammaInput),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,objectSpaceNormalMap:t.normalMapType===Et,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,combine:t.combine,vertexTangents:t.normalMap&&t.vertexTangents,vertexColors:t.vertexColors,fog:!!s,useFog:t.fog,fogExp:s&&s.isFogExp2,flatShading:t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:n.logarithmicDepthBuffer,skinning:t.skinning&&p>0,maxBones:p,useVertexTexture:n.floatVertexTextures,morphTargets:t.morphTargets,morphNormals:t.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:r.directional.length,numPointLights:r.point.length,numSpotLights:r.spot.length,numRectAreaLights:r.rectArea.length,numHemiLights:r.hemi.length,numClippingPlanes:c,numClipIntersection:l,dithering:t.dithering,shadowMapEnabled:e.shadowMap.enabled&&h.receiveShadow&&a.length>0,shadowMapType:e.shadowMap.type,toneMapping:e.toneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:t.side===v,flipSided:t.side===m,depthPacking:void 0!==t.depthPacking&&t.depthPacking}},this.getProgramCode=function(t,n){var r=[];if(n.shaderID?r.push(n.shaderID):(r.push(t.fragmentShader),r.push(t.vertexShader)),void 0!==t.defines)for(var i in t.defines)r.push(i),r.push(t.defines[i]);for(var o=0;o<a.length;o++)r.push(n[a[o]]);return r.push(t.onBeforeCompile.toString()),r.push(e.gammaOutput),r.push(e.gammaFactor),r.join()},this.acquireProgram=function(i,a,o,s){for(var c,l=0,h=r.length;l<h;l++){var u=r[l];if(u.code===s){++(c=u).usedTimes;break}}return void 0===c&&(c=new ii(e,t,s,i,a,o,n),r.push(c)),c},this.releaseProgram=function(e){if(0==--e.usedTimes){var t=r.indexOf(e);r[t]=r[r.length-1],r.pop(),e.destroy()}},this.programs=r}function oi(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function si(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function ci(){var e=[],t=0,n=[],r=[],i={id:-1};function a(n,r,a,o,s,c){var l=e[t];return void 0===l?(l={id:n.id,object:n,geometry:r,material:a,program:a.program||i,groupOrder:o,renderOrder:n.renderOrder,z:s,group:c},e[t]=l):(l.id=n.id,l.object=n,l.geometry=r,l.material=a,l.program=a.program||i,l.groupOrder=o,l.renderOrder=n.renderOrder,l.z=s,l.group=c),t++,l}return{opaque:n,transparent:r,init:function(){t=0,n.length=0,r.length=0},push:function(e,t,i,o,s,c){var l=a(e,t,i,o,s,c);(!0===i.transparent?r:n).push(l)},unshift:function(e,t,i,o,s,c){var l=a(e,t,i,o,s,c);(!0===i.transparent?r:n).unshift(l)},sort:function(){n.length>1&&n.sort(oi),r.length>1&&r.sort(si)}}}var li=0;function hi(){for(var e=new function(){var e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];var n;switch(t.type){case"DirectionalLight":n={direction:new Ot,color:new en,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Rt};break;case"SpotLight":n={position:new Ot,direction:new Ot,color:new en,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Rt};break;case"PointLight":n={position:new Ot,color:new en,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Rt,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":n={direction:new Ot,skyColor:new en,groundColor:new en};break;case"RectAreaLight":n={color:new en,position:new Ot,halfWidth:new Ot,halfHeight:new Ot}}return e[t.id]=n,n}}},t={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,shadowsLength:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},n=0;n<9;n++)t.probe.push(new Ot);var r=new Ot,i=new Ht,a=new Ht;return{setup:function(n,o,s){for(var c=0,l=0,h=0,u=0;u<9;u++)t.probe[u].set(0,0,0);for(var p=0,d=0,f=0,m=0,v=0,g=s.matrixWorldInverse,y=(u=0,n.length);u<y;u++){var x=n[u],b=x.color,w=x.intensity,_=x.distance,M=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)c+=b.r*w,l+=b.g*w,h+=b.b*w;else if(x.isLightProbe)for(var T=0;T<9;T++)t.probe[T].addScaledVector(x.sh.coefficients[T],w);else if(x.isDirectionalLight){if((E=e.get(x)).color.copy(x.color).multiplyScalar(x.intensity),E.direction.setFromMatrixPosition(x.matrixWorld),r.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(r),E.direction.transformDirection(g),E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize}t.directionalShadowMap[p]=M,t.directionalShadowMatrix[p]=x.shadow.matrix,t.directional[p]=E,p++}else if(x.isSpotLight)(E=e.get(x)).position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(g),E.color.copy(b).multiplyScalar(w),E.distance=_,E.direction.setFromMatrixPosition(x.matrixWorld),r.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(r),E.direction.transformDirection(g),E.coneCos=Math.cos(x.angle),E.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),E.decay=x.decay,E.shadow=x.castShadow,x.castShadow&&(S=x.shadow,E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize),t.spotShadowMap[f]=M,t.spotShadowMatrix[f]=x.shadow.matrix,t.spot[f]=E,f++;else if(x.isRectAreaLight)(E=e.get(x)).color.copy(b).multiplyScalar(w),E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(g),a.identity(),i.copy(x.matrixWorld),i.premultiply(g),a.extractRotation(i),E.halfWidth.set(.5*x.width,0,0),E.halfHeight.set(0,.5*x.height,0),E.halfWidth.applyMatrix4(a),E.halfHeight.applyMatrix4(a),t.rectArea[m]=E,m++;else if(x.isPointLight)(E=e.get(x)).position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(g),E.color.copy(x.color).multiplyScalar(x.intensity),E.distance=x.distance,E.decay=x.decay,E.shadow=x.castShadow,x.castShadow&&(S=x.shadow,E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize,E.shadowCameraNear=S.camera.near,E.shadowCameraFar=S.camera.far),t.pointShadowMap[d]=M,t.pointShadowMatrix[d]=x.shadow.matrix,t.point[d]=E,d++;else if(x.isHemisphereLight){var E;(E=e.get(x)).direction.setFromMatrixPosition(x.matrixWorld),E.direction.transformDirection(g),E.direction.normalize(),E.skyColor.copy(x.color).multiplyScalar(w),E.groundColor.copy(x.groundColor).multiplyScalar(w),t.hemi[v]=E,v++}}t.ambient[0]=c,t.ambient[1]=l,t.ambient[2]=h;var A=t.hash;A.directionalLength===p&&A.pointLength===d&&A.spotLength===f&&A.rectAreaLength===m&&A.hemiLength===v&&A.shadowsLength===o.length||(t.directional.length=p,t.spot.length=f,t.rectArea.length=m,t.point.length=d,t.hemi.length=v,A.directionalLength=p,A.pointLength=d,A.spotLength=f,A.rectAreaLength=m,A.hemiLength=v,A.shadowsLength=o.length,t.version=li++)},state:t}}function ui(){var e=new hi,t=[],n=[];return{init:function(){t.length=0,n.length=0},state:{lightsArray:t,shadowsArray:n,lights:e},setupLights:function(r){e.setup(t,n,r)},pushLight:function(e){t.push(e)},pushShadow:function(e){n.push(e)}}}function pi(e){sn.call(this),this.type="MeshDepthMaterial",this.depthPacking=Mt,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(e)}function di(e){sn.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new Ot,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(e)}function fi(e,t,n){for(var r=new Hn,i=new Ht,a=new Rt,o=new Rt(n,n),s=new Ot,c=new Ot,l=1,h=2,u=1+(l|h),d=new Array(u),g=new Array(u),y={},x={0:m,1:f,2:v},w=[new Ot(1,0,0),new Ot(-1,0,0),new Ot(0,0,1),new Ot(0,0,-1),new Ot(0,1,0),new Ot(0,-1,0)],_=[new Ot(0,1,0),new Ot(0,1,0),new Ot(0,1,0),new Ot(0,1,0),new Ot(0,0,1),new Ot(0,0,-1)],M=[new Ft,new Ft,new Ft,new Ft,new Ft,new Ft],T=0;T!==u;++T){var S=0!=(T&l),E=0!=(T&h),A=new pi({depthPacking:Tt,morphTargets:S,skinning:E});d[T]=A;var L=new di({morphTargets:S,skinning:E});g[T]=L}var P=this;function R(t,n,r,i,a,o){var s=t.geometry,c=null,u=d,p=t.customDepthMaterial;if(r&&(u=g,p=t.customDistanceMaterial),p)c=p;else{var f=!1;n.morphTargets&&(s&&s.isBufferGeometry?f=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:s&&s.isGeometry&&(f=s.morphTargets&&s.morphTargets.length>0)),t.isSkinnedMesh&&!1===n.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t);var m=t.isSkinnedMesh&&n.skinning,v=0;f&&(v|=l),m&&(v|=h),c=u[v]}if(e.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var b=c.uuid,w=n.uuid,_=y[b];void 0===_&&(_={},y[b]=_);var M=_[w];void 0===M&&(M=c.clone(),_[w]=M),c=M}return c.visible=n.visible,c.wireframe=n.wireframe,c.side=null!=n.shadowSide?n.shadowSide:x[n.side],c.clipShadows=n.clipShadows,c.clippingPlanes=n.clippingPlanes,c.clipIntersection=n.clipIntersection,c.wireframeLinewidth=n.wireframeLinewidth,c.linewidth=n.linewidth,r&&c.isMeshDistanceMaterial&&(c.referencePosition.copy(i),c.nearDistance=a,c.farDistance=o),c}function C(n,i,a,o){if(!1!==n.visible){if(n.layers.test(i.layers)&&(n.isMesh||n.isLine||n.isPoints)&&n.castShadow&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);var s=t.update(n),l=n.material;if(Array.isArray(l))for(var h=s.groups,u=0,p=h.length;u<p;u++){var d=h[u],f=l[d.materialIndex];if(f&&f.visible){var m=R(n,f,o,c,a.near,a.far);e.renderBufferDirect(a,null,s,m,n,d)}}else if(l.visible){m=R(n,l,o,c,a.near,a.far);e.renderBufferDirect(a,null,s,m,n,null)}}for(var v=n.children,g=0,y=v.length;g<y;g++)C(v[g],i,a,o)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=p,this.render=function(t,n,l){if(!1!==P.enabled&&(!1!==P.autoUpdate||!1!==P.needsUpdate)&&0!==t.length){var h,u=e.getRenderTarget(),p=e.getActiveCubeFace(),d=e.getActiveMipmapLevel(),f=e.state;f.setBlending(b),f.buffers.color.setClear(1,1,1,1),f.buffers.depth.setTest(!0),f.setScissorTest(!1);for(var m=0,v=t.length;m<v;m++){var g=t[m],y=g.shadow,x=g&&g.isPointLight;if(void 0!==y){var T=y.camera;if(a.copy(y.mapSize),a.min(o),x){var S=a.x,E=a.y;M[0].set(2*S,E,S,E),M[1].set(0,E,S,E),M[2].set(3*S,E,S,E),M[3].set(S,E,S,E),M[4].set(3*S,0,S,E),M[5].set(S,0,S,E),a.x*=4,a.y*=2}if(null===y.map){var A={minFilter:me,magFilter:me,format:Ne};y.map=new Gt(a.x,a.y,A),y.map.texture.name=g.name+".shadowMap",T.updateProjectionMatrix()}y.isSpotLightShadow&&y.update(g);var L=y.map,R=y.matrix;c.setFromMatrixPosition(g.matrixWorld),T.position.copy(c),x?(h=6,R.makeTranslation(-c.x,-c.y,-c.z)):(h=1,s.setFromMatrixPosition(g.target.matrixWorld),T.lookAt(s),T.updateMatrixWorld(),R.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),R.multiply(T.projectionMatrix),R.multiply(T.matrixWorldInverse)),e.setRenderTarget(L),e.clear();for(var O=0;O<h;O++){if(x){s.copy(T.position),s.add(w[O]),T.up.copy(_[O]),T.lookAt(s),T.updateMatrixWorld();var I=M[O];f.viewport(I)}i.multiplyMatrices(T.projectionMatrix,T.matrixWorldInverse),r.setFromMatrix(i),C(n,l,T,x)}}else console.warn("THREE.WebGLShadowMap:",g,"has no shadow.")}P.needsUpdate=!1,e.setRenderTarget(u,p,d)}}}function mi(e,t,n,r,i,a,o){var s,c={},l="undefined"!=typeof OffscreenCanvas;function h(e,t){return l?new OffscreenCanvas(e,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function u(e,t,n,r){var i=1;if((e.width>r||e.height>r)&&(i=r/Math.max(e.width,e.height)),i<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){var a=t?Pt.floorPowerOfTwo:Math.floor,o=a(i*e.width),c=a(i*e.height);void 0===s&&(s=h(o,c));var l=n?h(o,c):s;return l.width=o,l.height=c,l.getContext("2d").drawImage(e,0,0,o,c),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+o+"x"+c+")."),l}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function p(e){return Pt.isPowerOfTwo(e.width)&&Pt.isPowerOfTwo(e.height)}function d(e,t){return e.generateMipmaps&&t&&e.minFilter!==me&&e.minFilter!==ye}function f(t,n,i,a){e.generateMipmap(t),r.get(n).__maxMipLevel=Math.log(Math.max(i,a))*Math.LOG2E}function m(e,n){if(!i.isWebGL2)return e;var r=e;return 6403===e&&(5126===n&&(r=33326),5131===n&&(r=33325),5121===n&&(r=33321)),6407===e&&(5126===n&&(r=34837),5131===n&&(r=34843),5121===n&&(r=32849)),6408===e&&(5126===n&&(r=34836),5131===n&&(r=34842),5121===n&&(r=32856)),33325===r||33326===r||34842===r||34836===r?t.get("EXT_color_buffer_float"):34843!==r&&34837!==r||console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead."),r}function v(e){return e===me||e===ve||e===ge?9728:9729}function g(t){var n=t.target;n.removeEventListener("dispose",g),function(t){var n=r.get(t);if(void 0===n.__webglInit)return;e.deleteTexture(n.__webglTexture),r.remove(t)}(n),n.isVideoTexture&&delete c[n.id],o.memory.textures--}function y(t){var n=t.target;n.removeEventListener("dispose",y),function(t){var n=r.get(t),i=r.get(t.texture);if(!t)return;void 0!==i.__webglTexture&&e.deleteTexture(i.__webglTexture);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLRenderTargetCube)for(var a=0;a<6;a++)e.deleteFramebuffer(n.__webglFramebuffer[a]),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[a]);else e.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer);r.remove(t.texture),r.remove(t)}(n),o.memory.textures--}var x=0;function b(e,t){var i=r.get(e);if(e.isVideoTexture&&function(e){var t=e.id,n=o.render.frame;c[t]!==n&&(c[t]=n,e.update())}(e),e.version>0&&i.__version!==e.version){var a=e.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==a.complete)return void S(i,e,t);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+t),n.bindTexture(3553,i.__webglTexture)}function w(t,o){var s=r.get(t);if(6===t.image.length)if(t.version>0&&s.__version!==t.version){T(s,t),n.activeTexture(33984+o),n.bindTexture(34067,s.__webglTexture),e.pixelStorei(37440,t.flipY);for(var c=t&&t.isCompressedTexture,l=t.image[0]&&t.image[0].isDataTexture,h=[],v=0;v<6;v++)h[v]=c||l?l?t.image[v].image:t.image[v]:u(t.image[v],!1,!0,i.maxCubemapSize);var g=h[0],y=p(g)||i.isWebGL2,x=a.convert(t.format),b=a.convert(t.type),w=m(x,b);M(34067,t,y);for(v=0;v<6;v++)if(c)for(var _,S=h[v].mipmaps,E=0,A=S.length;E<A;E++)_=S[E],t.format!==Ne&&t.format!==De?n.getCompressedTextureFormats().indexOf(x)>-1?n.compressedTexImage2D(34069+v,E,w,_.width,_.height,0,_.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(34069+v,E,w,_.width,_.height,0,x,b,_.data);else l?n.texImage2D(34069+v,0,w,h[v].width,h[v].height,0,x,b,h[v].data):n.texImage2D(34069+v,0,w,x,b,h[v]);s.__maxMipLevel=c?S.length-1:0,d(t,y)&&f(34067,t,g.width,g.height),s.__version=t.version,t.onUpdate&&t.onUpdate(t)}else n.activeTexture(33984+o),n.bindTexture(34067,s.__webglTexture)}function _(e,t){n.activeTexture(33984+t),n.bindTexture(34067,r.get(e).__webglTexture)}function M(n,o,s){var c;if(s?(e.texParameteri(n,10242,a.convert(o.wrapS)),e.texParameteri(n,10243,a.convert(o.wrapT)),32879!==n&&35866!==n||e.texParameteri(n,32882,a.convert(o.wrapR)),e.texParameteri(n,10240,a.convert(o.magFilter)),e.texParameteri(n,10241,a.convert(o.minFilter))):(e.texParameteri(n,10242,33071),e.texParameteri(n,10243,33071),32879!==n&&35866!==n||e.texParameteri(n,32882,33071),o.wrapS===de&&o.wrapT===de||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,10240,v(o.magFilter)),e.texParameteri(n,10241,v(o.minFilter)),o.minFilter!==me&&o.minFilter!==ye&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),c=t.get("EXT_texture_filter_anisotropic")){if(o.type===Ae&&null===t.get("OES_texture_float_linear"))return;if(o.type===Le&&null===(i.isWebGL2||t.get("OES_texture_half_float_linear")))return;(o.anisotropy>1||r.get(o).__currentAnisotropy)&&(e.texParameterf(n,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(o.anisotropy,i.getMaxAnisotropy())),r.get(o).__currentAnisotropy=o.anisotropy)}}function T(t,n){void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",g),t.__webglTexture=e.createTexture(),o.memory.textures++)}function S(t,r,o){var s=3553;r.isDataTexture2DArray&&(s=35866),r.isDataTexture3D&&(s=32879),T(t,r),n.activeTexture(33984+o),n.bindTexture(s,t.__webglTexture),e.pixelStorei(37440,r.flipY),e.pixelStorei(37441,r.premultiplyAlpha),e.pixelStorei(3317,r.unpackAlignment);var c=function(e){return!i.isWebGL2&&(e.wrapS!==de||e.wrapT!==de||e.minFilter!==me&&e.minFilter!==ye)}(r)&&!1===p(r.image),l=u(r.image,c,!1,i.maxTextureSize),h=p(l)||i.isWebGL2,v=a.convert(r.format),g=a.convert(r.type),y=m(v,g);M(s,r,h);var x,b=r.mipmaps;if(r.isDepthTexture){if(y=6402,r.type===Ae){if(!i.isWebGL2)throw new Error("Float Depth Texture only supported in WebGL2.0");y=36012}else i.isWebGL2&&(y=33189);r.format===Be&&6402===y&&r.type!==Te&&r.type!==Ee&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=Te,g=a.convert(r.type)),r.format===Fe&&(y=34041,r.type!==Oe&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=Oe,g=a.convert(r.type))),n.texImage2D(3553,0,y,l.width,l.height,0,v,g,null)}else if(r.isDataTexture)if(b.length>0&&h){for(var w=0,_=b.length;w<_;w++)x=b[w],n.texImage2D(3553,w,y,x.width,x.height,0,v,g,x.data);r.generateMipmaps=!1,t.__maxMipLevel=b.length-1}else n.texImage2D(3553,0,y,l.width,l.height,0,v,g,l.data),t.__maxMipLevel=0;else if(r.isCompressedTexture){for(w=0,_=b.length;w<_;w++)x=b[w],r.format!==Ne&&r.format!==De?n.getCompressedTextureFormats().indexOf(v)>-1?n.compressedTexImage2D(3553,w,y,x.width,x.height,0,x.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(3553,w,y,x.width,x.height,0,v,g,x.data);t.__maxMipLevel=b.length-1}else if(r.isDataTexture2DArray)n.texImage3D(35866,0,y,l.width,l.height,l.depth,0,v,g,l.data),t.__maxMipLevel=0;else if(r.isDataTexture3D)n.texImage3D(32879,0,y,l.width,l.height,l.depth,0,v,g,l.data),t.__maxMipLevel=0;else if(b.length>0&&h){for(w=0,_=b.length;w<_;w++)x=b[w],n.texImage2D(3553,w,y,v,g,x);r.generateMipmaps=!1,t.__maxMipLevel=b.length-1}else n.texImage2D(3553,0,y,v,g,l),t.__maxMipLevel=0;d(r,h)&&f(3553,r,l.width,l.height),t.__version=r.version,r.onUpdate&&r.onUpdate(r)}function E(t,i,o,s){var c=a.convert(i.texture.format),l=a.convert(i.texture.type),h=m(c,l);n.texImage2D(s,0,h,i.width,i.height,0,c,l,null),e.bindFramebuffer(36160,t),e.framebufferTexture2D(36160,o,s,r.get(i.texture).__webglTexture,0),e.bindFramebuffer(36160,null)}function A(t,n,r){if(e.bindRenderbuffer(36161,t),n.depthBuffer&&!n.stencilBuffer){if(r){var i=P(n);e.renderbufferStorageMultisample(36161,i,33189,n.width,n.height)}else e.renderbufferStorage(36161,33189,n.width,n.height);e.framebufferRenderbuffer(36160,36096,36161,t)}else if(n.depthBuffer&&n.stencilBuffer){if(r){i=P(n);e.renderbufferStorageMultisample(36161,i,35056,n.width,n.height)}else e.renderbufferStorage(36161,34041,n.width,n.height);e.framebufferRenderbuffer(36160,33306,36161,t)}else{var o=m(a.convert(n.texture.format),a.convert(n.texture.type));if(r){i=P(n);e.renderbufferStorageMultisample(36161,i,o,n.width,n.height)}else e.renderbufferStorage(36161,o,n.width,n.height)}e.bindRenderbuffer(36161,null)}function L(t){var n=r.get(t),i=!0===t.isWebGLRenderTargetCube;if(t.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,n){if(n&&n.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,t),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");r.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),b(n.depthTexture,0);var i=r.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===Be)e.framebufferTexture2D(36160,36096,3553,i,0);else{if(n.depthTexture.format!==Fe)throw new Error("Unknown depthTexture format");e.framebufferTexture2D(36160,33306,3553,i,0)}}(n.__webglFramebuffer,t)}else if(i){n.__webglDepthbuffer=[];for(var a=0;a<6;a++)e.bindFramebuffer(36160,n.__webglFramebuffer[a]),n.__webglDepthbuffer[a]=e.createRenderbuffer(),A(n.__webglDepthbuffer[a],t)}else e.bindFramebuffer(36160,n.__webglFramebuffer),n.__webglDepthbuffer=e.createRenderbuffer(),A(n.__webglDepthbuffer,t);e.bindFramebuffer(36160,null)}function P(e){return i.isWebGL2&&e.isWebGLMultisampleRenderTarget?Math.min(i.maxSamples,e.samples):0}var R=!1,C=!1;this.allocateTextureUnit=function(){var e=x;return e>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+i.maxTextures),x+=1,e},this.resetTextureUnits=function(){x=0},this.setTexture2D=b,this.setTexture2DArray=function(e,t){var i=r.get(e);e.version>0&&i.__version!==e.version?S(i,e,t):(n.activeTexture(33984+t),n.bindTexture(35866,i.__webglTexture))},this.setTexture3D=function(e,t){var i=r.get(e);e.version>0&&i.__version!==e.version?S(i,e,t):(n.activeTexture(33984+t),n.bindTexture(32879,i.__webglTexture))},this.setTextureCube=w,this.setTextureCubeDynamic=_,this.setupRenderTarget=function(t){var s=r.get(t),c=r.get(t.texture);t.addEventListener("dispose",y),c.__webglTexture=e.createTexture(),o.memory.textures++;var l=!0===t.isWebGLRenderTargetCube,h=!0===t.isWebGLMultisampleRenderTarget,u=p(t)||i.isWebGL2;if(l){s.__webglFramebuffer=[];for(var v=0;v<6;v++)s.__webglFramebuffer[v]=e.createFramebuffer()}else if(s.__webglFramebuffer=e.createFramebuffer(),h)if(i.isWebGL2){s.__webglMultisampledFramebuffer=e.createFramebuffer(),s.__webglColorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,s.__webglColorRenderbuffer);var g=m(a.convert(t.texture.format),a.convert(t.texture.type)),x=P(t);e.renderbufferStorageMultisample(36161,x,g,t.width,t.height),e.bindFramebuffer(36160,s.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(36160,36064,36161,s.__webglColorRenderbuffer),e.bindRenderbuffer(36161,null),t.depthBuffer&&(s.__webglDepthRenderbuffer=e.createRenderbuffer(),A(s.__webglDepthRenderbuffer,t,!0)),e.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(l){for(n.bindTexture(34067,c.__webglTexture),M(34067,t.texture,u),v=0;v<6;v++)E(s.__webglFramebuffer[v],t,36064,34069+v);d(t.texture,u)&&f(34067,t.texture,t.width,t.height),n.bindTexture(34067,null)}else n.bindTexture(3553,c.__webglTexture),M(3553,t.texture,u),E(s.__webglFramebuffer,t,36064,3553),d(t.texture,u)&&f(3553,t.texture,t.width,t.height),n.bindTexture(3553,null);t.depthBuffer&&L(t)},this.updateRenderTargetMipmap=function(e){var t=e.texture;if(d(t,p(e)||i.isWebGL2)){var a=e.isWebGLRenderTargetCube?34067:3553,o=r.get(t).__webglTexture;n.bindTexture(a,o),f(a,t,e.width,e.height),n.bindTexture(a,null)}},this.updateMultisampleRenderTarget=function(t){if(t.isWebGLMultisampleRenderTarget)if(i.isWebGL2){var n=r.get(t);e.bindFramebuffer(36008,n.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,n.__webglFramebuffer);var a=t.width,o=t.height,s=16384;t.depthBuffer&&(s|=256),t.stencilBuffer&&(s|=1024),e.blitFramebuffer(0,0,a,o,0,0,a,o,s,9728)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(e,t){e&&e.isWebGLRenderTarget&&(!1===R&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),R=!0),e=e.texture),b(e,t)},this.safeSetTextureCube=function(e,t){e&&e.isWebGLRenderTargetCube&&(!1===C&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),C=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?w(e,t):_(e,t)}}function vi(){qt.call(this),this.type="Group"}function gi(e){Nn.call(this),this.cameras=e||[]}pi.prototype=Object.create(sn.prototype),pi.prototype.constructor=pi,pi.prototype.isMeshDepthMaterial=!0,pi.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},di.prototype=Object.create(sn.prototype),di.prototype.constructor=di,di.prototype.isMeshDistanceMaterial=!0,di.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this},vi.prototype=Object.assign(Object.create(qt.prototype),{constructor:vi,isGroup:!0}),gi.prototype=Object.assign(Object.create(Nn.prototype),{constructor:gi,isArrayCamera:!0});var yi,xi=new Ot,bi=new Ot;function wi(e,t,n){xi.setFromMatrixPosition(t.matrixWorld),bi.setFromMatrixPosition(n.matrixWorld);var r=xi.distanceTo(bi),i=t.projectionMatrix.elements,a=n.projectionMatrix.elements,o=i[14]/(i[10]-1),s=i[14]/(i[10]+1),c=(i[9]+1)/i[5],l=(i[9]-1)/i[5],h=(i[8]-1)/i[0],u=(a[8]+1)/a[0],p=o*h,d=o*u,f=r/(-h+u),m=f*-h;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(f),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.getInverse(e.matrixWorld);var v=o+f,g=s+f,y=p-m,x=d+(r-m),b=c*s/g*v,w=l*s/g*v;e.projectionMatrix.makePerspective(y,x,b,w,v,g)}function _i(e){var t,n,r=this,i=null,a=null,o=null,s=[],c=new Ht,l=new Ht,h=1,u="local-floor";"undefined"!=typeof window&&"VRFrameData"in window&&(a=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",w,!1));var p=new Ht,d=new Ct,f=new Ot,m=new Nn;m.viewport=new Ft,m.layers.enable(1);var v=new Nn;v.viewport=new Ft,v.layers.enable(2);var g=new gi([m,v]);function y(){return null!==i&&!0===i.isPresenting}g.layers.enable(1),g.layers.enable(2);var x,b=new Rt;function w(){if(y()){var a=i.getEyeParameters("left");t=2*a.renderWidth*h,n=a.renderHeight*h,x=e.getPixelRatio(),e.getSize(b),e.setDrawingBufferSize(t,n,1),m.viewport.set(0,0,t/2,n),v.viewport.set(t/2,0,t/2,n),S.start(),r.dispatchEvent({type:"sessionstart"})}else r.enabled&&e.setDrawingBufferSize(b.width,b.height,x),S.stop(),r.dispatchEvent({type:"sessionend"})}var _=[];function M(e){for(var t=navigator.getGamepads&&navigator.getGamepads(),n=0,r=0,i=t.length;n<i;n++){var a=t[n];if(a&&("Daydream Controller"===a.id||"Gear VR Controller"===a.id||"Oculus Go Controller"===a.id||"OpenVR Gamepad"===a.id||a.id.startsWith("Oculus Touch")||a.id.startsWith("HTC Vive Focus")||a.id.startsWith("Spatial Controller"))){if(r===e)return a;r++}}}function T(e,r){null!==r&&4===r.length&&e.set(r[0]*t,r[1]*n,r[2]*t,r[3]*n)}this.enabled=!1,this.getController=function(e){var t=s[e];return void 0===t&&((t=new vi).matrixAutoUpdate=!1,t.visible=!1,s[e]=t),t},this.getDevice=function(){return i},this.setDevice=function(e){void 0!==e&&(i=e),S.setContext(e)},this.setFramebufferScaleFactor=function(e){h=e},this.setReferenceSpaceType=function(e){u=e},this.setPoseTarget=function(e){void 0!==e&&(o=e)},this.getCamera=function(e){var t="local-floor"===u?1.6:0;if(!1===y())return e.position.set(0,t,0),e.rotation.set(0,0,0),e;if(i.depthNear=e.near,i.depthFar=e.far,i.getFrameData(a),"local-floor"===u){var n=i.stageParameters;n?c.fromArray(n.sittingToStandingTransform):c.makeTranslation(0,t,0)}var r=a.pose,h=null!==o?o:e;h.matrix.copy(c),h.matrix.decompose(h.position,h.quaternion,h.scale),null!==r.orientation&&(d.fromArray(r.orientation),h.quaternion.multiply(d)),null!==r.position&&(d.setFromRotationMatrix(c),f.fromArray(r.position),f.applyQuaternion(d),h.position.add(f)),h.updateMatrixWorld(),m.near=e.near,v.near=e.near,m.far=e.far,v.far=e.far,m.matrixWorldInverse.fromArray(a.leftViewMatrix),v.matrixWorldInverse.fromArray(a.rightViewMatrix),l.getInverse(c),"local-floor"===u&&(m.matrixWorldInverse.multiply(l),v.matrixWorldInverse.multiply(l));var x=h.parent;null!==x&&(p.getInverse(x.matrixWorld),m.matrixWorldInverse.multiply(p),v.matrixWorldInverse.multiply(p)),m.matrixWorld.getInverse(m.matrixWorldInverse),v.matrixWorld.getInverse(v.matrixWorldInverse),m.projectionMatrix.fromArray(a.leftProjectionMatrix),v.projectionMatrix.fromArray(a.rightProjectionMatrix),wi(g,m,v);var b=i.getLayers();if(b.length){var w=b[0];T(m.viewport,w.leftBounds),T(v.viewport,w.rightBounds)}return function(){for(var e=0;e<s.length;e++){var t=s[e],n=M(e);if(void 0!==n&&void 0!==n.pose){if(null===n.pose)return;var r=n.pose;!1===r.hasPosition&&t.position.set(.2,-.6,-.05),null!==r.position&&t.position.fromArray(r.position),null!==r.orientation&&t.quaternion.fromArray(r.orientation),t.matrix.compose(t.position,t.quaternion,t.scale),t.matrix.premultiply(c),t.matrix.decompose(t.position,t.quaternion,t.scale),t.matrixWorldNeedsUpdate=!0,t.visible=!0;var i="Daydream Controller"===n.id?0:1;void 0===_[e]&&(_[e]=!1),_[e]!==n.buttons[i].pressed&&(_[e]=n.buttons[i].pressed,!0===_[e]?t.dispatchEvent({type:"selectstart"}):(t.dispatchEvent({type:"selectend"}),t.dispatchEvent({type:"select"})))}else t.visible=!1}}(),g},this.getStandingMatrix=function(){return c},this.isPresenting=y;var S=new Xn;this.setAnimationLoop=function(e){S.setAnimationLoop(e),y()&&S.start()},this.submitFrame=function(){y()&&i.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",w)},this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}function Mi(e,t){var n=this,r=null,i=null,a="local-floor",o=null,s=[],c=[];function l(){return null!==r&&null!==i}var h=new Nn;h.layers.enable(1),h.viewport=new Ft;var u=new Nn;u.layers.enable(2),u.viewport=new Ft;var p=new gi([h,u]);function d(e){for(var t=0;t<s.length;t++)c[t]===e.inputSource&&s[t].dispatchEvent({type:e.type})}function f(){e.setFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),y.stop(),n.dispatchEvent({type:"sessionend"})}function m(e){i=e,y.setContext(r),y.start(),n.dispatchEvent({type:"sessionstart"})}function v(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.getInverse(e.matrixWorld)}p.layers.enable(1),p.layers.enable(2),this.enabled=!1,this.getController=function(e){var t=s[e];return void 0===t&&((t=new vi).matrixAutoUpdate=!1,t.visible=!1,s[e]=t),t},this.setFramebufferScaleFactor=function(e){},this.setReferenceSpaceType=function(e){a=e},this.getSession=function(){return r},this.setSession=function(e){null!==(r=e)&&(r.addEventListener("select",d),r.addEventListener("selectstart",d),r.addEventListener("selectend",d),r.addEventListener("end",f),r.updateRenderState({baseLayer:new XRWebGLLayer(r,t)}),r.requestReferenceSpace(a).then(m),c=r.inputSources,r.addEventListener("inputsourceschange",function(){c=r.inputSources,console.log(c);for(var e=0;e<s.length;e++){s[e].userData.inputSource=c[e]}}))},this.getCamera=function(e){if(l()){var t=e.parent,n=p.cameras;v(p,t);for(var r=0;r<n.length;r++)v(n[r],t);e.matrixWorld.copy(p.matrixWorld);for(var i=e.children,a=(r=0,i.length);r<a;r++)i[r].updateMatrixWorld(!0);return wi(p,h,u),p}return e},this.isPresenting=l;var g=null;var y=new Xn;y.setAnimationLoop(function(t,n){if(null!==(o=n.getViewerPose(i))){var a=o.views,l=r.renderState.baseLayer;e.setFramebuffer(l.framebuffer);for(var h=0;h<a.length;h++){var u=a[h],d=l.getViewport(u),f=u.transform.inverse.matrix,m=p.cameras[h];m.matrix.fromArray(f).getInverse(m.matrix),m.projectionMatrix.fromArray(u.projectionMatrix),m.viewport.set(d.x,d.y,d.width,d.height),0===h&&p.matrix.copy(m.matrix)}}for(h=0;h<s.length;h++){var v=s[h],y=c[h];if(y){var x=n.getPose(y.targetRaySpace,i);if(null!==x){v.matrix.fromArray(x.transform.matrix),v.matrix.decompose(v.position,v.rotation,v.scale),v.visible=!0;continue}}v.visible=!1}g&&g(t)}),this.setAnimationLoop=function(e){g=e},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new Ht},this.getDevice=function(){console.warn("THREE.WebXRManager: getDevice() has been deprecated.")},this.setDevice=function(){console.warn("THREE.WebXRManager: setDevice() has been deprecated.")},this.setFrameOfReferenceType=function(){console.warn("THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.")},this.submitFrame=function(){}}function Ti(e){console.log("THREE.WebGLRenderer",o);var t=void 0!==(e=e||{}).canvas?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==e.context?e.context:null,r=void 0!==e.alpha&&e.alpha,i=void 0===e.depth||e.depth,a=void 0===e.stencil||e.stencil,s=void 0!==e.antialias&&e.antialias,c=void 0===e.premultipliedAlpha||e.premultipliedAlpha,p=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,d=void 0!==e.powerPreference?e.powerPreference:"default",g=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat,y=null,x=null;this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=ee,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var J,K,Q,$,te,ne,re,ie,ae,oe,se,ce,le,he,ue,ht,ut,pt,vt=this,gt=!1,yt=null,xt=0,bt=0,wt=null,_t=null,Mt=-1,Tt={geometry:null,program:null,wireframe:!1},St=null,Et=null,At=new Ft,Lt=new Ft,Ct=null,Dt=t.width,Nt=t.height,zt=1,Ut=new Ft(0,0,Dt,Nt),Bt=new Ft(0,0,Dt,Nt),Gt=!1,kt=new Hn,jt=new function(){var e=this,t=null,n=0,r=!1,i=!1,a=new kn,o=new It,s={value:null,needsUpdate:!1};function c(){s.value!==t&&(s.value=t,s.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function l(t,n,r,i){var c=null!==t?t.length:0,l=null;if(0!==c){if(l=s.value,!0!==i||null===l){var h=r+4*c,u=n.matrixWorldInverse;o.getNormalMatrix(u),(null===l||l.length<h)&&(l=new Float32Array(h));for(var p=0,d=r;p!==c;++p,d+=4)a.copy(t[p]).applyMatrix4(u,o),a.normal.toArray(l,d),l[d+3]=a.constant}s.value=l,s.needsUpdate=!0}return e.numPlanes=c,l}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(e,i,a){var o=0!==e.length||i||0!==n||r;return r=i,t=l(e,a,0),n=e.length,o},this.beginShadows=function(){i=!0,l(null)},this.endShadows=function(){i=!1,c()},this.setState=function(e,a,o,h,u,p){if(!r||null===e||0===e.length||i&&!o)i?l(null):c();else{var d=i?0:n,f=4*d,m=u.clippingState||null;s.value=m,m=l(e,h,f,p);for(var v=0;v!==f;++v)m[v]=t[v];u.clippingState=m,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=d}}},Vt=!1,Wt=!1,Xt=new Ht,qt=new Ot;function Yt(){return null===wt?zt:1}try{var Zt={alpha:r,depth:i,stencil:a,antialias:s,premultipliedAlpha:c,preserveDrawingBuffer:p,powerPreference:d,failIfMajorPerformanceCaveat:g,xrCompatible:!0};if(t.addEventListener("webglcontextlost",$t,!1),t.addEventListener("webglcontextrestored",tn,!1),null===(J=n||t.getContext("webgl",Zt)||t.getContext("experimental-webgl",Zt)))throw null!==t.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===J.getShaderPrecisionFormat&&(J.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function Jt(){K=new function(e){var t={};return{get:function(n){if(void 0!==t[n])return t[n];var r;switch(n){case"WEBGL_depth_texture":r=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=e.getExtension(n)}return null===r&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),t[n]=r,r}}}(J),(Q=new function(e,t,n){var r;function i(t){if("highp"===t){if(e.getShaderPrecisionFormat(35633,36338).precision>0&&e.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(35633,36337).precision>0&&e.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var a="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext,o=void 0!==n.precision?n.precision:"highp",s=i(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);var c=!0===n.logarithmicDepthBuffer,l=e.getParameter(34930),h=e.getParameter(35660),u=e.getParameter(3379),p=e.getParameter(34076),d=e.getParameter(34921),f=e.getParameter(36347),m=e.getParameter(36348),v=e.getParameter(36349),g=h>0,y=a||!!t.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==r)return r;var n=t.get("EXT_texture_filter_anisotropic");return r=null!==n?e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:i,precision:o,logarithmicDepthBuffer:c,maxTextures:l,maxVertexTextures:h,maxTextureSize:u,maxCubemapSize:p,maxAttributes:d,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y,maxSamples:a?e.getParameter(36183):0}}(J,K,e)).isWebGL2||(K.get("WEBGL_depth_texture"),K.get("OES_texture_float"),K.get("OES_texture_half_float"),K.get("OES_texture_half_float_linear"),K.get("OES_standard_derivatives"),K.get("OES_element_index_uint"),K.get("ANGLE_instanced_arrays")),K.get("OES_texture_float_linear"),pt=new function(e,t,n){return{convert:function(e){var r;if(e===pe)return 10497;if(e===de)return 33071;if(e===fe)return 33648;if(e===me)return 9728;if(e===ve)return 9984;if(e===ge)return 9986;if(e===ye)return 9729;if(e===xe)return 9985;if(e===be)return 9987;if(e===we)return 5121;if(e===Pe)return 32819;if(e===Re)return 32820;if(e===Ce)return 33635;if(e===_e)return 5120;if(e===Me)return 5122;if(e===Te)return 5123;if(e===Se)return 5124;if(e===Ee)return 5125;if(e===Ae)return 5126;if(e===Le){if(n.isWebGL2)return 5131;if(null!==(r=t.get("OES_texture_half_float")))return r.HALF_FLOAT_OES}if(e===Ie)return 6406;if(e===De)return 6407;if(e===Ne)return 6408;if(e===ze)return 6409;if(e===Ue)return 6410;if(e===Be)return 6402;if(e===Fe)return 34041;if(e===Ge)return 6403;if(e===E)return 32774;if(e===A)return 32778;if(e===L)return 32779;if(e===C)return 0;if(e===O)return 1;if(e===I)return 768;if(e===D)return 769;if(e===N)return 770;if(e===z)return 771;if(e===U)return 772;if(e===B)return 773;if(e===F)return 774;if(e===G)return 775;if(e===k)return 776;if((e===ke||e===He||e===je||e===Ve)&&null!==(r=t.get("WEBGL_compressed_texture_s3tc"))){if(e===ke)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===He)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===je)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Ve)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((e===We||e===Xe||e===qe||e===Ye)&&null!==(r=t.get("WEBGL_compressed_texture_pvrtc"))){if(e===We)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===Xe)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===qe)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===Ye)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===Ze&&null!==(r=t.get("WEBGL_compressed_texture_etc1")))return r.COMPRESSED_RGB_ETC1_WEBGL;if((e===Je||e===Ke||e===Qe||e===$e||e===et||e===tt||e===nt||e===rt||e===it||e===at||e===ot||e===st||e===ct||e===lt)&&null!==(r=t.get("WEBGL_compressed_texture_astc")))return e;if(e===P||e===R){if(n.isWebGL2){if(e===P)return 32775;if(e===R)return 32776}if(null!==(r=t.get("EXT_blend_minmax"))){if(e===P)return r.MIN_EXT;if(e===R)return r.MAX_EXT}}if(e===Oe){if(n.isWebGL2)return 34042;if(null!==(r=t.get("WEBGL_depth_texture")))return r.UNSIGNED_INT_24_8_WEBGL}return 0}}}(J,K,Q),($=new function(e,t,n,r){var i=new function(){var t=!1,n=new Ft,r=null,i=new Ft(0,0,0,0);return{setMask:function(n){r===n||t||(e.colorMask(n,n,n,n),r=n)},setLocked:function(e){t=e},setClear:function(t,r,a,o,s){!0===s&&(t*=o,r*=o,a*=o),n.set(t,r,a,o),!1===i.equals(n)&&(e.clearColor(t,r,a,o),i.copy(n))},reset:function(){t=!1,r=null,i.set(-1,0,0,0)}}},a=new function(){var t=!1,n=null,r=null,i=null;return{setTest:function(e){e?ae(2929):oe(2929)},setMask:function(r){n===r||t||(e.depthMask(r),n=r)},setFunc:function(t){if(r!==t){if(t)switch(t){case H:e.depthFunc(512);break;case j:e.depthFunc(519);break;case V:e.depthFunc(513);break;case W:e.depthFunc(515);break;case X:e.depthFunc(514);break;case q:e.depthFunc(518);break;case Y:e.depthFunc(516);break;case Z:e.depthFunc(517);break;default:e.depthFunc(515)}else e.depthFunc(515);r=t}},setLocked:function(e){t=e},setClear:function(t){i!==t&&(e.clearDepth(t),i=t)},reset:function(){t=!1,n=null,r=null,i=null}}},o=new function(){var t=!1,n=null,r=null,i=null,a=null,o=null,s=null,c=null,l=null;return{setTest:function(e){e?ae(2960):oe(2960)},setMask:function(r){n===r||t||(e.stencilMask(r),n=r)},setFunc:function(t,n,o){r===t&&i===n&&a===o||(e.stencilFunc(t,n,o),r=t,i=n,a=o)},setOp:function(t,n,r){o===t&&s===n&&c===r||(e.stencilOp(t,n,r),o=t,s=n,c=r)},setLocked:function(e){t=e},setClear:function(t){l!==t&&(e.clearStencil(t),l=t)},reset:function(){t=!1,n=null,r=null,i=null,a=null,o=null,s=null,c=null,l=null}}},s=e.getParameter(34921),c=new Uint8Array(s),p=new Uint8Array(s),d=new Uint8Array(s),f={},g=null,y=null,x=null,A=null,L=null,P=null,R=null,C=null,O=null,I=null,D=!1,N=null,z=null,U=null,B=null,F=null,G=e.getParameter(35661),k=!1,J=0,K=e.getParameter(7938);-1!==K.indexOf("WebGL")?(J=parseFloat(/^WebGL\ ([0-9])/.exec(K)[1]),k=J>=1):-1!==K.indexOf("OpenGL ES")&&(J=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(K)[1]),k=J>=2);var Q=null,$={},ee=new Ft,te=new Ft;function ne(t,n,r){var i=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,10241,9728),e.texParameteri(t,10240,9728);for(var o=0;o<r;o++)e.texImage2D(n+o,0,6408,1,1,0,6408,5121,i);return a}var re={};function ie(n,i){c[n]=1,0===p[n]&&(e.enableVertexAttribArray(n),p[n]=1),d[n]!==i&&((r.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[r.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,i),d[n]=i)}function ae(t){!0!==f[t]&&(e.enable(t),f[t]=!0)}function oe(t){!1!==f[t]&&(e.disable(t),f[t]=!1)}function se(t,r,i,a,o,s,c,l){if(t!==b){if(x||(ae(3042),x=!0),t===S)o=o||r,s=s||i,c=c||a,r===L&&o===C||(e.blendEquationSeparate(n.convert(r),n.convert(o)),L=r,C=o),i===P&&a===R&&s===O&&c===I||(e.blendFuncSeparate(n.convert(i),n.convert(a),n.convert(s),n.convert(c)),P=i,R=a,O=s,I=c),A=t,D=null;else if(t!==A||l!==D){if(L===E&&C===E||(e.blendEquation(32774),L=E,C=E),l)switch(t){case w:e.blendFuncSeparate(1,771,1,771);break;case _:e.blendFunc(1,1);break;case M:e.blendFuncSeparate(0,0,769,771);break;case T:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case w:e.blendFuncSeparate(770,771,1,771);break;case _:e.blendFunc(770,1);break;case M:e.blendFunc(0,769);break;case T:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}P=null,R=null,O=null,I=null,A=t,D=l}}else x&&(oe(3042),x=!1)}function ce(t){N!==t&&(t?e.frontFace(2304):e.frontFace(2305),N=t)}function le(t){t!==l?(ae(2884),t!==z&&(t===h?e.cullFace(1029):t===u?e.cullFace(1028):e.cullFace(1032))):oe(2884),z=t}function he(t,n,r){t?(ae(32823),B===n&&F===r||(e.polygonOffset(n,r),B=n,F=r)):oe(32823)}function ue(t){void 0===t&&(t=33984+G-1),Q!==t&&(e.activeTexture(t),Q=t)}return re[3553]=ne(3553,3553,1),re[34067]=ne(34067,34069,6),i.setClear(0,0,0,1),a.setClear(1),o.setClear(0),ae(2929),a.setFunc(W),ce(!1),le(h),ae(2884),se(b),{buffers:{color:i,depth:a,stencil:o},initAttributes:function(){for(var e=0,t=c.length;e<t;e++)c[e]=0},enableAttribute:function(e){ie(e,0)},enableAttributeAndDivisor:ie,disableUnusedAttributes:function(){for(var t=0,n=p.length;t!==n;++t)p[t]!==c[t]&&(e.disableVertexAttribArray(t),p[t]=0)},enable:ae,disable:oe,getCompressedTextureFormats:function(){if(null===g&&(g=[],t.get("WEBGL_compressed_texture_pvrtc")||t.get("WEBGL_compressed_texture_s3tc")||t.get("WEBGL_compressed_texture_etc1")||t.get("WEBGL_compressed_texture_astc")))for(var n=e.getParameter(34467),r=0;r<n.length;r++)g.push(n[r]);return g},useProgram:function(t){return y!==t&&(e.useProgram(t),y=t,!0)},setBlending:se,setMaterial:function(e,t){e.side===v?oe(2884):ae(2884);var n=e.side===m;t&&(n=!n),ce(n),e.blending===w&&!1===e.transparent?se(b):se(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),a.setFunc(e.depthFunc),a.setTest(e.depthTest),a.setMask(e.depthWrite),i.setMask(e.colorWrite);var r=e.stencilWrite;o.setTest(r),r&&(o.setFunc(e.stencilFunc,e.stencilRef,e.stencilMask),o.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),he(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)},setFlipSided:ce,setCullFace:le,setLineWidth:function(t){t!==U&&(k&&e.lineWidth(t),U=t)},setPolygonOffset:he,setScissorTest:function(e){e?ae(3089):oe(3089)},activeTexture:ue,bindTexture:function(t,n){null===Q&&ue();var r=$[Q];void 0===r&&(r={type:void 0,texture:void 0},$[Q]=r),r.type===t&&r.texture===n||(e.bindTexture(t,n||re[t]),r.type=t,r.texture=n)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===ee.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),ee.copy(t))},viewport:function(t){!1===te.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),te.copy(t))},reset:function(){for(var t=0;t<p.length;t++)1===p[t]&&(e.disableVertexAttribArray(t),p[t]=0);f={},g=null,Q=null,$={},y=null,A=null,N=null,z=null,i.reset(),a.reset(),o.reset()}}}(J,K,pt,Q)).scissor(Lt.copy(Bt).multiplyScalar(zt).floor()),$.viewport(At.copy(Ut).multiplyScalar(zt).floor()),te=new function(e){var t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(e,n,r){switch(r=r||1,t.calls++,n){case 4:t.triangles+=r*(e/3);break;case 5:case 6:t.triangles+=r*(e-2);break;case 1:t.lines+=r*(e/2);break;case 3:t.lines+=r*(e-1);break;case 2:t.lines+=r*e;break;case 0:t.points+=r*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}(J),ne=new function(){var e=new WeakMap;return{get:function(t){var n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(t,n,r){e.get(t)[n]=r},dispose:function(){e=new WeakMap}}},re=new mi(J,K,$,ne,Q,pt,te),ie=new qn(J),ae=new function(e,t,n){var r={},i={};function a(e){var o=e.target,s=r[o.id];for(var c in null!==s.index&&t.remove(s.index),s.attributes)t.remove(s.attributes[c]);o.removeEventListener("dispose",a),delete r[o.id];var l=i[s.id];l&&(t.remove(l),delete i[s.id]),n.memory.geometries--}function o(e){var n=[],r=e.index,a=e.attributes.position,o=0;if(null!==r){var s=r.array;o=r.version;for(var c=0,l=s.length;c<l;c+=3){var h=s[c+0],u=s[c+1],p=s[c+2];n.push(h,u,u,p,p,h)}}else for(s=a.array,o=a.version,c=0,l=s.length/3-1;c<l;c+=3)h=c+0,u=c+1,p=c+2,n.push(h,u,u,p,p,h);var d=new(bn(n)>65535?vn:fn)(n,1);d.version=o,t.update(d,34963);var f=i[e.id];f&&t.remove(f),i[e.id]=d}return{get:function(e,t){var i=r[t.id];return i||(t.addEventListener("dispose",a),t.isBufferGeometry?i=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new _n).setFromObject(e)),i=t._bufferGeometry),r[t.id]=i,n.memory.geometries++,i)},update:function(e){var n=e.index,r=e.attributes;for(var i in null!==n&&t.update(n,34963),r)t.update(r[i],34962);var a=e.morphAttributes;for(var i in a)for(var o=a[i],s=0,c=o.length;s<c;s++)t.update(o[s],34962)},getWireframeAttribute:function(e){var t=i[e.id];if(t){var n=e.index;null!==n&&t.version<n.version&&o(e)}else o(e);return i[e.id]}}}(J,ie,te),oe=new function(e,t){var n={};return{update:function(r){var i=t.render.frame,a=r.geometry,o=e.get(r,a);return n[o.id]!==i&&(a.isGeometry&&o.updateFromObject(r),e.update(o),n[o.id]=i),o},dispose:function(){n={}}}}(ae,te),ue=new function(e){var t={},n=new Float32Array(8);return{update:function(r,i,a,o){var s=r.morphTargetInfluences,c=s.length,l=t[i.id];if(void 0===l){l=[];for(var h=0;h<c;h++)l[h]=[h,0];t[i.id]=l}var u=a.morphTargets&&i.morphAttributes.position,p=a.morphNormals&&i.morphAttributes.normal;for(h=0;h<c;h++)0!==(d=l[h])[1]&&(u&&i.removeAttribute("morphTarget"+h),p&&i.removeAttribute("morphNormal"+h));for(h=0;h<c;h++)(d=l[h])[0]=h,d[1]=s[h];for(l.sort(Jn),h=0;h<8;h++){var d;if(d=l[h]){var f=d[0],m=d[1];if(m){u&&i.addAttribute("morphTarget"+h,u[f]),p&&i.addAttribute("morphNormal"+h,p[f]),n[h]=m;continue}}n[h]=0}o.getUniforms().setValue(e,"morphTargetInfluences",n)}}}(J),se=new ai(vt,K,Q),ce=new function(){var e={};function t(n){var r=n.target;r.removeEventListener("dispose",t),delete e[r.id]}return{get:function(n,r){var i,a=e[n.id];return void 0===a?(i=new ci,e[n.id]={},e[n.id][r.id]=i,n.addEventListener("dispose",t)):void 0===(i=a[r.id])&&(i=new ci,a[r.id]=i),i},dispose:function(){e={}}}},le=new function(){var e={};function t(n){var r=n.target;r.removeEventListener("dispose",t),delete e[r.id]}return{get:function(n,r){var i;return void 0===e[n.id]?(i=new ui,e[n.id]={},e[n.id][r.id]=i,n.addEventListener("dispose",t)):void 0===e[n.id][r.id]?(i=new ui,e[n.id][r.id]=i):i=e[n.id][r.id],i},dispose:function(){e={}}}},he=new function(e,t,n,r){var i,a,o=new en(0),s=0,c=null,l=0;function h(e,n){t.buffers.color.setClear(e.r,e.g,e.b,n,r)}return{getClearColor:function(){return o},setClearColor:function(e,t){o.set(e),h(o,s=void 0!==t?t:1)},getClearAlpha:function(){return s},setClearAlpha:function(e){h(o,s=e)},render:function(t,r,u,p){var d=r.background,v=e.vr,g=v.getSession&&v.getSession();if(g&&"additive"===g.environmentBlendMode&&(d=null),null===d?(h(o,s),c=null,l=0):d&&d.isColor&&(h(d,1),p=!0,c=null,l=0),(e.autoClear||p)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),d&&(d.isCubeTexture||d.isWebGLRenderTargetCube)){void 0===a&&((a=new Mn(new An(1,1,1),new In({type:"BackgroundCubeMaterial",uniforms:Ln(Wn.cube.uniforms),vertexShader:Wn.cube.vertexShader,fragmentShader:Wn.cube.fragmentShader,side:m,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),a.geometry.removeAttribute("uv"),a.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.tCube.value}}),n.update(a));var y=d.isWebGLRenderTargetCube?d.texture:d;a.material.uniforms.tCube.value=y,a.material.uniforms.tFlip.value=d.isWebGLRenderTargetCube?1:-1,c===d&&l===y.version||(a.material.needsUpdate=!0,c=d,l=y.version),t.unshift(a,a.geometry,a.material,0,0,null)}else d&&d.isTexture&&(void 0===i&&((i=new Mn(new Zn(2,2),new In({type:"BackgroundMaterial",uniforms:Ln(Wn.background.uniforms),vertexShader:Wn.background.vertexShader,fragmentShader:Wn.background.fragmentShader,side:f,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),Object.defineProperty(i.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(i)),i.material.uniforms.t2D.value=d,!0===d.matrixAutoUpdate&&d.updateMatrix(),i.material.uniforms.uvTransform.value.copy(d.matrix),c===d&&l===d.version||(i.material.needsUpdate=!0,c=d,l=d.version),t.unshift(i,i.geometry,i.material,0,0,null))}}}(vt,$,oe,c),ht=new function(e,t,n,r){var i;this.setMode=function(e){i=e},this.render=function(t,r){e.drawArrays(i,t,r),n.update(r,i)},this.renderInstances=function(a,o,s){var c;if(r.isWebGL2)c=e;else if(null===(c=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");c[r.isWebGL2?"drawArraysInstanced":"drawArraysInstancedANGLE"](i,o,s,a.maxInstancedCount),n.update(s,i,a.maxInstancedCount)}}(J,K,te,Q),ut=new function(e,t,n,r){var i,a,o;this.setMode=function(e){i=e},this.setIndex=function(e){a=e.type,o=e.bytesPerElement},this.render=function(t,r){e.drawElements(i,r,a,t*o),n.update(r,i)},this.renderInstances=function(s,c,l){var h;if(r.isWebGL2)h=e;else if(null===(h=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[r.isWebGL2?"drawElementsInstanced":"drawElementsInstancedANGLE"](i,l,a,c*o,s.maxInstancedCount),n.update(l,i,s.maxInstancedCount)}}(J,K,te,Q),te.programs=se.programs,vt.capabilities=Q,vt.extensions=K,vt.properties=ne,vt.renderLists=ce,vt.state=$,vt.info=te}Jt();var Kt="undefined"!=typeof navigator&&"xr"in navigator&&"supportsSession"in navigator.xr?new Mi(vt,J):new _i(vt);this.vr=Kt;var Qt=new fi(vt,oe,Q.maxTextureSize);function $t(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),gt=!0}function tn(){console.log("THREE.WebGLRenderer: Context Restored."),gt=!1,Jt()}function nn(e){var t=e.target;t.removeEventListener("dispose",nn),function(e){rn(e),ne.remove(e)}(t)}function rn(e){var t=ne.get(e).program;e.program=void 0,void 0!==t&&se.releaseProgram(t)}this.shadowMap=Qt,this.getContext=function(){return J},this.getContextAttributes=function(){return J.getContextAttributes()},this.forceContextLoss=function(){var e=K.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){var e=K.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return zt},this.setPixelRatio=function(e){void 0!==e&&(zt=e,this.setSize(Dt,Nt,!1))},this.getSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),e=new Rt),e.set(Dt,Nt)},this.setSize=function(e,n,r){Kt.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(Dt=e,Nt=n,t.width=Math.floor(e*zt),t.height=Math.floor(n*zt),!1!==r&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),e=new Rt),e.set(Dt*zt,Nt*zt).floor()},this.setDrawingBufferSize=function(e,n,r){Dt=e,Nt=n,zt=r,t.width=Math.floor(e*r),t.height=Math.floor(n*r),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),e=new Ft),e.copy(At)},this.getViewport=function(e){return e.copy(Ut)},this.setViewport=function(e,t,n,r){e.isVector4?Ut.set(e.x,e.y,e.z,e.w):Ut.set(e,t,n,r),$.viewport(At.copy(Ut).multiplyScalar(zt).floor())},this.getScissor=function(e){return e.copy(Bt)},this.setScissor=function(e,t,n,r){e.isVector4?Bt.set(e.x,e.y,e.z,e.w):Bt.set(e,t,n,r),$.scissor(Lt.copy(Bt).multiplyScalar(zt).floor())},this.getScissorTest=function(){return Gt},this.setScissorTest=function(e){$.setScissorTest(Gt=e)},this.getClearColor=function(){return he.getClearColor()},this.setClearColor=function(){he.setClearColor.apply(he,arguments)},this.getClearAlpha=function(){return he.getClearAlpha()},this.setClearAlpha=function(){he.setClearAlpha.apply(he,arguments)},this.clear=function(e,t,n){var r=0;(void 0===e||e)&&(r|=16384),(void 0===t||t)&&(r|=256),(void 0===n||n)&&(r|=1024),J.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",$t,!1),t.removeEventListener("webglcontextrestored",tn,!1),ce.dispose(),le.dispose(),ne.dispose(),oe.dispose(),Kt.dispose(),on.stop()},this.renderBufferImmediate=function(e,t){$.initAttributes();var n=ne.get(e);e.hasPositions&&!n.position&&(n.position=J.createBuffer()),e.hasNormals&&!n.normal&&(n.normal=J.createBuffer()),e.hasUvs&&!n.uv&&(n.uv=J.createBuffer()),e.hasColors&&!n.color&&(n.color=J.createBuffer());var r=t.getAttributes();e.hasPositions&&(J.bindBuffer(34962,n.position),J.bufferData(34962,e.positionArray,35048),$.enableAttribute(r.position),J.vertexAttribPointer(r.position,3,5126,!1,0,0)),e.hasNormals&&(J.bindBuffer(34962,n.normal),J.bufferData(34962,e.normalArray,35048),$.enableAttribute(r.normal),J.vertexAttribPointer(r.normal,3,5126,!1,0,0)),e.hasUvs&&(J.bindBuffer(34962,n.uv),J.bufferData(34962,e.uvArray,35048),$.enableAttribute(r.uv),J.vertexAttribPointer(r.uv,2,5126,!1,0,0)),e.hasColors&&(J.bindBuffer(34962,n.color),J.bufferData(34962,e.colorArray,35048),$.enableAttribute(r.color),J.vertexAttribPointer(r.color,3,5126,!1,0,0)),$.disableUnusedAttributes(),J.drawArrays(4,0,e.count),e.count=0},this.renderBufferDirect=function(e,t,n,r,i,a){var o=i.isMesh&&i.matrixWorld.determinant()<0;$.setMaterial(r,o);var s=hn(e,t,r,i),c=!1;Tt.geometry===n.id&&Tt.program===s.id&&Tt.wireframe===(!0===r.wireframe)||(Tt.geometry=n.id,Tt.program=s.id,Tt.wireframe=!0===r.wireframe,c=!0),i.morphTargetInfluences&&(ue.update(i,n,r,s),c=!0);var l,h=n.index,u=n.attributes.position,p=1;!0===r.wireframe&&(h=ae.getWireframeAttribute(n),p=2);var d=ht;null!==h&&(l=ie.get(h),(d=ut).setIndex(l)),c&&(!function(e,t,n){if(n&&n.isInstancedBufferGeometry&&!Q.isWebGL2&&null===K.get("ANGLE_instanced_arrays"))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");$.initAttributes();var r=n.attributes,i=t.getAttributes(),a=e.defaultAttributeValues;for(var o in i){var s=i[o];if(s>=0){var c=r[o];if(void 0!==c){var l=c.normalized,h=c.itemSize,u=ie.get(c);if(void 0===u)continue;var p=u.buffer,d=u.type,f=u.bytesPerElement;if(c.isInterleavedBufferAttribute){var m=c.data,v=m.stride,g=c.offset;m&&m.isInstancedInterleavedBuffer?($.enableAttributeAndDivisor(s,m.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=m.meshPerAttribute*m.count)):$.enableAttribute(s),J.bindBuffer(34962,p),J.vertexAttribPointer(s,h,d,l,v*f,g*f)}else c.isInstancedBufferAttribute?($.enableAttributeAndDivisor(s,c.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=c.meshPerAttribute*c.count)):$.enableAttribute(s),J.bindBuffer(34962,p),J.vertexAttribPointer(s,h,d,l,0,0)}else if(void 0!==a){var y=a[o];if(void 0!==y)switch(y.length){case 2:J.vertexAttrib2fv(s,y);break;case 3:J.vertexAttrib3fv(s,y);break;case 4:J.vertexAttrib4fv(s,y);break;default:J.vertexAttrib1fv(s,y)}}}}$.disableUnusedAttributes()}(r,s,n),null!==h&&J.bindBuffer(34963,l.buffer));var f=1/0;null!==h?f=h.count:void 0!==u&&(f=u.count);var m=n.drawRange.start*p,v=n.drawRange.count*p,g=null!==a?a.start*p:0,y=null!==a?a.count*p:1/0,x=Math.max(m,g),b=Math.min(f,m+v,g+y)-1,w=Math.max(0,b-x+1);if(0!==w){if(i.isMesh)if(!0===r.wireframe)$.setLineWidth(r.wireframeLinewidth*Yt()),d.setMode(1);else switch(i.drawMode){case dt:d.setMode(4);break;case ft:d.setMode(5);break;case mt:d.setMode(6)}else if(i.isLine){var _=r.linewidth;void 0===_&&(_=1),$.setLineWidth(_*Yt()),i.isLineSegments?d.setMode(1):i.isLineLoop?d.setMode(2):d.setMode(3)}else i.isPoints?d.setMode(0):i.isSprite&&d.setMode(4);n&&n.isInstancedBufferGeometry?n.maxInstancedCount>0&&d.renderInstances(n,x,w):d.render(x,w)}},this.compile=function(e,t){(x=le.get(e,t)).init(),e.traverse(function(e){e.isLight&&(x.pushLight(e),e.castShadow&&x.pushShadow(e))}),x.setupLights(t),e.traverse(function(t){if(t.material)if(Array.isArray(t.material))for(var n=0;n<t.material.length;n++)ln(t.material[n],e.fog,t);else ln(t.material,e.fog,t)})};var an=null;var on=new Xn;function sn(e,t,n,r){for(var i=0,a=e.length;i<a;i++){var o=e[i],s=o.object,c=o.geometry,l=void 0===r?o.material:r,h=o.group;if(n.isArrayCamera){Et=n;for(var u=n.cameras,p=0,d=u.length;p<d;p++){var f=u[p];s.layers.test(f.layers)&&($.viewport(At.copy(f.viewport)),x.setupLights(f),cn(s,t,f,c,l,h))}}else Et=null,cn(s,t,n,c,l,h)}}function cn(e,t,n,r,i,a){if(e.onBeforeRender(vt,t,n,r,i,a),x=le.get(t,Et||n),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){$.setMaterial(i);var o=hn(n,t.fog,i,e);Tt.geometry=null,Tt.program=null,Tt.wireframe=!1,function(e,t){e.render(function(e){vt.renderBufferImmediate(e,t)})}(e,o)}else vt.renderBufferDirect(n,t.fog,r,i,e,a);e.onAfterRender(vt,t,n,r,i,a),x=le.get(t,Et||n)}function ln(e,t,n){var r=ne.get(e),i=x.state.lights,a=x.state.shadowsArray,o=i.state.version,s=se.getParameters(e,i.state,a,t,jt.numPlanes,jt.numIntersection,n),c=se.getProgramCode(e,s),l=r.program,h=!0;if(void 0===l)e.addEventListener("dispose",nn);else if(l.code!==c)rn(e);else if(r.lightsStateVersion!==o)r.lightsStateVersion=o,h=!1;else{if(void 0!==s.shaderID)return;h=!1}if(h){if(s.shaderID){var u=Wn[s.shaderID];r.shader={name:e.type,uniforms:Ln(u.uniforms),vertexShader:u.vertexShader,fragmentShader:u.fragmentShader}}else r.shader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.onBeforeCompile(r.shader,vt),c=se.getProgramCode(e,s),l=se.acquireProgram(e,r.shader,s,c),r.program=l,e.program=l}var p=l.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var d=0;d<vt.maxMorphTargets;d++)p["morphTarget"+d]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(d=0;d<vt.maxMorphNormals;d++)p["morphNormal"+d]>=0&&e.numSupportedMorphNormals++}var f=r.shader.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(r.numClippingPlanes=jt.numPlanes,r.numIntersection=jt.numIntersection,f.clippingPlanes=jt.uniform),r.fog=t,r.lightsStateVersion=o,e.lights&&(f.ambientLightColor.value=i.state.ambient,f.lightProbe.value=i.state.probe,f.directionalLights.value=i.state.directional,f.spotLights.value=i.state.spot,f.rectAreaLights.value=i.state.rectArea,f.pointLights.value=i.state.point,f.hemisphereLights.value=i.state.hemi,f.directionalShadowMap.value=i.state.directionalShadowMap,f.directionalShadowMatrix.value=i.state.directionalShadowMatrix,f.spotShadowMap.value=i.state.spotShadowMap,f.spotShadowMatrix.value=i.state.spotShadowMatrix,f.pointShadowMap.value=i.state.pointShadowMap,f.pointShadowMatrix.value=i.state.pointShadowMatrix);var m=r.program.getUniforms(),v=qr.seqWithValue(m.seq,f);r.uniformsList=v}function hn(e,t,n,r){re.resetTextureUnits();var i=ne.get(n),a=x.state.lights;if(Vt&&(Wt||e!==St)){var o=e===St&&n.id===Mt;jt.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,e,i,o)}!1===n.needsUpdate&&(void 0===i.program?n.needsUpdate=!0:n.fog&&i.fog!==t?n.needsUpdate=!0:n.lights&&i.lightsStateVersion!==a.state.version?n.needsUpdate=!0:void 0===i.numClippingPlanes||i.numClippingPlanes===jt.numPlanes&&i.numIntersection===jt.numIntersection||(n.needsUpdate=!0)),n.needsUpdate&&(ln(n,t,r),n.needsUpdate=!1);var s=!1,c=!1,l=!1,h=i.program,u=h.getUniforms(),p=i.shader.uniforms;if($.useProgram(h.program)&&(s=!0,c=!0,l=!0),n.id!==Mt&&(Mt=n.id,c=!0),s||St!==e){if(u.setValue(J,"projectionMatrix",e.projectionMatrix),Q.logarithmicDepthBuffer&&u.setValue(J,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),St!==e&&(St=e,c=!0,l=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshStandardMaterial||n.envMap){var d=u.map.cameraPosition;void 0!==d&&d.setValue(J,qt.setFromMatrixPosition(e.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&u.setValue(J,"viewMatrix",e.matrixWorldInverse)}if(n.skinning){u.setOptional(J,r,"bindMatrix"),u.setOptional(J,r,"bindMatrixInverse");var f=r.skeleton;if(f){var v=f.bones;if(Q.floatVertexTextures){if(void 0===f.boneTexture){var g=Math.sqrt(4*v.length);g=Pt.ceilPowerOfTwo(g),g=Math.max(g,4);var y=new Float32Array(g*g*4);y.set(f.boneMatrices);var b=new Gn(y,g,g,Ne,Ae);b.needsUpdate=!0,f.boneMatrices=y,f.boneTexture=b,f.boneTextureSize=g}u.setValue(J,"boneTexture",f.boneTexture,re),u.setValue(J,"boneTextureSize",f.boneTextureSize)}else u.setOptional(J,f,"boneMatrices")}}return c&&(u.setValue(J,"toneMappingExposure",vt.toneMappingExposure),u.setValue(J,"toneMappingWhitePoint",vt.toneMappingWhitePoint),n.lights&&function(e,t){e.ambientLightColor.needsUpdate=t,e.lightProbe.needsUpdate=t,e.directionalLights.needsUpdate=t,e.pointLights.needsUpdate=t,e.spotLights.needsUpdate=t,e.rectAreaLights.needsUpdate=t,e.hemisphereLights.needsUpdate=t}(p,l),t&&n.fog&&function(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}(p,t),n.isMeshBasicMaterial?un(p,n):n.isMeshLambertMaterial?(un(p,n),function(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}(p,n)):n.isMeshPhongMaterial?(un(p,n),n.isMeshToonMaterial?function(e,t){pn(e,t),t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(p,n):pn(p,n)):n.isMeshStandardMaterial?(un(p,n),n.isMeshPhysicalMaterial?function(e,t){dn(e,t),e.reflectivity.value=t.reflectivity,e.clearCoat.value=t.clearCoat,e.clearCoatRoughness.value=t.clearCoatRoughness}(p,n):dn(p,n)):n.isMeshMatcapMaterial?(un(p,n),function(e,t){t.matcap&&(e.matcap.value=t.matcap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===m&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===m&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(p,n)):n.isMeshDepthMaterial?(un(p,n),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(p,n)):n.isMeshDistanceMaterial?(un(p,n),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias);e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(p,n)):n.isMeshNormalMaterial?(un(p,n),function(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===m&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===m&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(p,n)):n.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}(p,n),n.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(p,n)):n.isPointsMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*zt,e.scale.value=.5*Nt,e.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),e.uvTransform.value.copy(t.map.matrix))}(p,n):n.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,e.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),e.uvTransform.value.copy(t.map.matrix))}(p,n):n.isShadowMaterial&&(p.color.value.copy(n.color),p.opacity.value=n.opacity),void 0!==p.ltc_1&&(p.ltc_1.value=Vn.LTC_1),void 0!==p.ltc_2&&(p.ltc_2.value=Vn.LTC_2),qr.upload(J,i.uniformsList,p,re)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(qr.upload(J,i.uniformsList,p,re),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&u.setValue(J,"center",r.center),u.setValue(J,"modelViewMatrix",r.modelViewMatrix),u.setValue(J,"normalMatrix",r.normalMatrix),u.setValue(J,"modelMatrix",r.matrixWorld),h}function un(e,t){var n;e.opacity.value=t.opacity,t.color&&e.diffuse.value.copy(t.color),t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.specularMap&&(e.specularMap.value=t.specularMap),t.envMap&&(e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap.isCubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio,e.maxMipLevel.value=ne.get(t.envMap).__maxMipLevel),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity),t.map?n=t.map:t.specularMap?n=t.specularMap:t.displacementMap?n=t.displacementMap:t.normalMap?n=t.normalMap:t.bumpMap?n=t.bumpMap:t.roughnessMap?n=t.roughnessMap:t.metalnessMap?n=t.metalnessMap:t.alphaMap?n=t.alphaMap:t.emissiveMap&&(n=t.emissiveMap),void 0!==n&&(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}function pn(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===m&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===m&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function dn(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===m&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===m&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}on.setAnimationLoop(function(e){Kt.isPresenting()||an&&an(e)}),"undefined"!=typeof window&&on.setContext(window),this.setAnimationLoop=function(e){an=e,Kt.setAnimationLoop(e),on.start()},this.render=function(e,t){var n,r;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),n=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),r=arguments[3]),t&&t.isCamera){if(!gt){Tt.geometry=null,Tt.program=null,Tt.wireframe=!1,Mt=-1,St=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),Kt.enabled&&(t=Kt.getCamera(t)),(x=le.get(e,t)).init(),e.onBeforeRender(vt,e,t,n||wt),Xt.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),kt.setFromMatrix(Xt),Wt=this.localClippingEnabled,Vt=jt.init(this.clippingPlanes,Wt,t),(y=ce.get(e,t)).init(),function e(t,n,r,i){if(!1===t.visible)return;var a=t.layers.test(n.layers);if(a)if(t.isGroup)r=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(n);else if(t.isLight)x.pushLight(t),t.castShadow&&x.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||kt.intersectsSprite(t)){i&&qt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(Xt);var o=oe.update(t),s=t.material;s.visible&&y.push(t,o,s,r,qt.z,null)}}else if(t.isImmediateRenderObject)i&&qt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(Xt),y.push(t,null,t.material,r,qt.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.update(),!t.frustumCulled||kt.intersectsObject(t))){i&&qt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(Xt);var o=oe.update(t),s=t.material;if(Array.isArray(s))for(var c=o.groups,l=0,h=c.length;l<h;l++){var u=c[l],p=s[u.materialIndex];p&&p.visible&&y.push(t,o,p,r,qt.z,u)}else s.visible&&y.push(t,o,s,r,qt.z,null)}var d=t.children;for(var l=0,h=d.length;l<h;l++)e(d[l],n,r,i)}(e,t,0,vt.sortObjects),!0===vt.sortObjects&&y.sort(),Vt&&jt.beginShadows();var i=x.state.shadowsArray;Qt.render(i,e,t),x.setupLights(t),Vt&&jt.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==n&&this.setRenderTarget(n),he.render(y,e,t,r);var a=y.opaque,o=y.transparent;if(e.overrideMaterial){var s=e.overrideMaterial;a.length&&sn(a,e,t,s),o.length&&sn(o,e,t,s)}else a.length&&sn(a,e,t),o.length&&sn(o,e,t);e.onAfterRender(vt,e,t),null!==wt&&(re.updateRenderTargetMipmap(wt),re.updateMultisampleRenderTarget(wt)),$.buffers.depth.setTest(!0),$.buffers.depth.setMask(!0),$.buffers.color.setMask(!0),$.setPolygonOffset(!1),Kt.enabled&&Kt.submitFrame(),y=null,x=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(e){yt!==e&&J.bindFramebuffer(36160,e),yt=e},this.getActiveCubeFace=function(){return xt},this.getActiveMipmapLevel=function(){return bt},this.getRenderTarget=function(){return wt},this.setRenderTarget=function(e,t,n){wt=e,xt=t,bt=n,e&&void 0===ne.get(e).__webglFramebuffer&&re.setupRenderTarget(e);var r=yt,i=!1;if(e){var a=ne.get(e).__webglFramebuffer;e.isWebGLRenderTargetCube?(r=a[t||0],i=!0):r=e.isWebGLMultisampleRenderTarget?ne.get(e).__webglMultisampledFramebuffer:a,At.copy(e.viewport),Lt.copy(e.scissor),Ct=e.scissorTest}else At.copy(Ut).multiplyScalar(zt).floor(),Lt.copy(Bt).multiplyScalar(zt).floor(),Ct=Gt;if(_t!==r&&(J.bindFramebuffer(36160,r),_t=r),$.viewport(At),$.scissor(Lt),$.setScissorTest(Ct),i){var o=ne.get(e.texture);J.framebufferTexture2D(36160,36064,34069+(t||0),o.__webglTexture,n||0)}},this.readRenderTargetPixels=function(e,t,n,r,i,a,o){if(e&&e.isWebGLRenderTarget){var s=ne.get(e).__webglFramebuffer;if(e.isWebGLRenderTargetCube&&void 0!==o&&(s=s[o]),s){var c=!1;s!==_t&&(J.bindFramebuffer(36160,s),c=!0);try{var l=e.texture,h=l.format,u=l.type;if(h!==Ne&&pt.convert(h)!==J.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(u===we||pt.convert(u)===J.getParameter(35738)||u===Ae&&(Q.isWebGL2||K.get("OES_texture_float")||K.get("WEBGL_color_buffer_float"))||u===Le&&(Q.isWebGL2?K.get("EXT_color_buffer_float"):K.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===J.checkFramebufferStatus(36160)?t>=0&&t<=e.width-r&&n>=0&&n<=e.height-i&&J.readPixels(t,n,r,i,pt.convert(h),pt.convert(u),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{c&&J.bindFramebuffer(36160,_t)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(e,t,n){var r=t.image.width,i=t.image.height,a=pt.convert(t.format);re.setTexture2D(t,0),J.copyTexImage2D(3553,n||0,a,e.x,e.y,r,i,0)},this.copyTextureToTexture=function(e,t,n,r){var i=t.image.width,a=t.image.height,o=pt.convert(n.format),s=pt.convert(n.type);re.setTexture2D(n,0),t.isDataTexture?J.texSubImage2D(3553,r||0,e.x,e.y,i,a,o,s,t.image.data):J.texSubImage2D(3553,r||0,e.x,e.y,o,s,t.image)},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function Si(e,t){this.name="",this.color=new en(e),this.density=void 0!==t?t:25e-5}function Ei(e,t,n){this.name="",this.color=new en(e),this.near=void 0!==t?t:1,this.far=void 0!==n?n:1e3}function Ai(e,t){this.array=e,this.stride=t,this.count=void 0!==e?e.length/t:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Li(e,t,n,r){this.data=e,this.itemSize=t,this.offset=n,this.normalized=!0===r}function Pi(e){sn.call(this),this.type="SpriteMaterial",this.color=new en(16777215),this.map=null,this.rotation=0,this.sizeAttenuation=!0,this.lights=!1,this.transparent=!0,this.setValues(e)}function Ri(e){if(qt.call(this),this.type="Sprite",void 0===yi){yi=new _n;var t=new Ai(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);yi.setIndex([0,1,2,0,2,3]),yi.addAttribute("position",new Li(t,3,0,!1)),yi.addAttribute("uv",new Li(t,2,3,!1))}this.geometry=yi,this.material=void 0!==e?e:new Pi,this.center=new Rt(.5,.5)}function Ci(){qt.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}function Oi(e,t){e&&e.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),Mn.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Ht,this.bindMatrixInverse=new Ht}function Ii(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,r=this.bones.length;n<r;n++)this.boneInverses.push(new Ht)}}function Di(){qt.call(this),this.type="Bone"}function Ni(e){sn.call(this),this.type="LineBasicMaterial",this.color=new en(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(e)}function zi(e,t,n){1===n&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),qt.call(this),this.type="Line",this.geometry=void 0!==e?e:new _n,this.material=void 0!==t?t:new Ni({color:16777215*Math.random()})}function Ui(e,t){zi.call(this,e,t),this.type="LineSegments"}function Bi(e,t){zi.call(this,e,t),this.type="LineLoop"}function Fi(e){sn.call(this),this.type="PointsMaterial",this.color=new en(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.lights=!1,this.setValues(e)}function Gi(e,t){qt.call(this),this.type="Points",this.geometry=void 0!==e?e:new _n,this.material=void 0!==t?t:new Fi({color:16777215*Math.random()}),this.updateMorphTargets()}function ki(e,t,n,r,i,a,o,s,c){Bt.call(this,e,t,n,r,i,a,o,s,c),this.format=void 0!==o?o:De,this.minFilter=void 0!==a?a:ye,this.magFilter=void 0!==i?i:ye,this.generateMipmaps=!1}function Hi(e,t,n,r,i,a,o,s,c,l,h,u){Bt.call(this,null,a,o,s,c,l,r,i,h,u),this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}function ji(e,t,n,r,i,a,o,s,c){Bt.call(this,e,t,n,r,i,a,o,s,c),this.needsUpdate=!0}function Vi(e,t,n,r,i,a,o,s,c,l){if((l=void 0!==l?l:Be)!==Be&&l!==Fe)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&l===Be&&(n=Te),void 0===n&&l===Fe&&(n=Oe),Bt.call(this,null,r,i,a,o,s,l,n,c),this.image={width:e,height:t},this.magFilter=void 0!==o?o:me,this.minFilter=void 0!==s?s:me,this.flipY=!1,this.generateMipmaps=!1}function Wi(e){_n.call(this),this.type="WireframeGeometry";var t,n,r,i,a,o,s,c,l,h,u=[],p=[0,0],d={},f=["a","b","c"];if(e&&e.isGeometry){var m=e.faces;for(t=0,r=m.length;t<r;t++){var v=m[t];for(n=0;n<3;n++)s=v[f[n]],c=v[f[(n+1)%3]],p[0]=Math.min(s,c),p[1]=Math.max(s,c),void 0===d[l=p[0]+","+p[1]]&&(d[l]={index1:p[0],index2:p[1]})}for(l in d)o=d[l],h=e.vertices[o.index1],u.push(h.x,h.y,h.z),h=e.vertices[o.index2],u.push(h.x,h.y,h.z)}else if(e&&e.isBufferGeometry){var g,y,x,b,w,_,M;if(h=new Ot,null!==e.index){for(g=e.attributes.position,y=e.index,0===(x=e.groups).length&&(x=[{start:0,count:y.count,materialIndex:0}]),i=0,a=x.length;i<a;++i)for(t=w=(b=x[i]).start,r=w+b.count;t<r;t+=3)for(n=0;n<3;n++)s=y.getX(t+n),c=y.getX(t+(n+1)%3),p[0]=Math.min(s,c),p[1]=Math.max(s,c),void 0===d[l=p[0]+","+p[1]]&&(d[l]={index1:p[0],index2:p[1]});for(l in d)o=d[l],h.fromBufferAttribute(g,o.index1),u.push(h.x,h.y,h.z),h.fromBufferAttribute(g,o.index2),u.push(h.x,h.y,h.z)}else for(t=0,r=(g=e.attributes.position).count/3;t<r;t++)for(n=0;n<3;n++)_=3*t+n,h.fromBufferAttribute(g,_),u.push(h.x,h.y,h.z),M=3*t+(n+1)%3,h.fromBufferAttribute(g,M),u.push(h.x,h.y,h.z)}this.addAttribute("position",new gn(u,3))}function Xi(e,t,n){Sn.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:n},this.fromBufferGeometry(new qi(e,t,n)),this.mergeVertices()}function qi(e,t,n){_n.call(this),this.type="ParametricBufferGeometry",this.parameters={func:e,slices:t,stacks:n};var r,i,a=[],o=[],s=[],c=[],l=new Ot,h=new Ot,u=new Ot,p=new Ot,d=new Ot;e.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var f=t+1;for(r=0;r<=n;r++){var m=r/n;for(i=0;i<=t;i++){var v=i/t;e(v,m,h),o.push(h.x,h.y,h.z),v-1e-5>=0?(e(v-1e-5,m,u),p.subVectors(h,u)):(e(v+1e-5,m,u),p.subVectors(u,h)),m-1e-5>=0?(e(v,m-1e-5,u),d.subVectors(h,u)):(e(v,m+1e-5,u),d.subVectors(u,h)),l.crossVectors(p,d).normalize(),s.push(l.x,l.y,l.z),c.push(v,m)}}for(r=0;r<n;r++)for(i=0;i<t;i++){var g=r*f+i,y=r*f+i+1,x=(r+1)*f+i+1,b=(r+1)*f+i;a.push(g,y,b),a.push(y,x,b)}this.setIndex(a),this.addAttribute("position",new gn(o,3)),this.addAttribute("normal",new gn(s,3)),this.addAttribute("uv",new gn(c,2))}function Yi(e,t,n,r){Sn.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:r},this.fromBufferGeometry(new Zi(e,t,n,r)),this.mergeVertices()}function Zi(e,t,n,r){_n.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:r},n=n||1;var i=[],a=[];function o(e,t,n,r){var i,a,o=Math.pow(2,r),c=[];for(i=0;i<=o;i++){c[i]=[];var l=e.clone().lerp(n,i/o),h=t.clone().lerp(n,i/o),u=o-i;for(a=0;a<=u;a++)c[i][a]=0===a&&i===o?l:l.clone().lerp(h,a/u)}for(i=0;i<o;i++)for(a=0;a<2*(o-i)-1;a++){var p=Math.floor(a/2);a%2==0?(s(c[i][p+1]),s(c[i+1][p]),s(c[i][p])):(s(c[i][p+1]),s(c[i+1][p+1]),s(c[i+1][p]))}}function s(e){i.push(e.x,e.y,e.z)}function c(t,n){var r=3*t;n.x=e[r+0],n.y=e[r+1],n.z=e[r+2]}function l(e,t,n,r){r<0&&1===e.x&&(a[t]=e.x-1),0===n.x&&0===n.z&&(a[t]=r/2/Math.PI+.5)}function h(e){return Math.atan2(e.z,-e.x)}function u(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}!function(e){for(var n=new Ot,r=new Ot,i=new Ot,a=0;a<t.length;a+=3)c(t[a+0],n),c(t[a+1],r),c(t[a+2],i),o(n,r,i,e)}(r=r||0),function(e){for(var t=new Ot,n=0;n<i.length;n+=3)t.x=i[n+0],t.y=i[n+1],t.z=i[n+2],t.normalize().multiplyScalar(e),i[n+0]=t.x,i[n+1]=t.y,i[n+2]=t.z}(n),function(){for(var e=new Ot,t=0;t<i.length;t+=3){e.x=i[t+0],e.y=i[t+1],e.z=i[t+2];var n=h(e)/2/Math.PI+.5,r=u(e)/Math.PI+.5;a.push(n,1-r)}(function(){for(var e=new Ot,t=new Ot,n=new Ot,r=new Ot,o=new Rt,s=new Rt,c=new Rt,u=0,p=0;u<i.length;u+=9,p+=6){e.set(i[u+0],i[u+1],i[u+2]),t.set(i[u+3],i[u+4],i[u+5]),n.set(i[u+6],i[u+7],i[u+8]),o.set(a[p+0],a[p+1]),s.set(a[p+2],a[p+3]),c.set(a[p+4],a[p+5]),r.copy(e).add(t).add(n).divideScalar(3);var d=h(r);l(o,p+0,e,d),l(s,p+2,t,d),l(c,p+4,n,d)}})(),function(){for(var e=0;e<a.length;e+=6){var t=a[e+0],n=a[e+2],r=a[e+4],i=Math.max(t,n,r),o=Math.min(t,n,r);i>.9&&o<.1&&(t<.2&&(a[e+0]+=1),n<.2&&(a[e+2]+=1),r<.2&&(a[e+4]+=1))}}()}(),this.addAttribute("position",new gn(i,3)),this.addAttribute("normal",new gn(i.slice(),3)),this.addAttribute("uv",new gn(a,2)),0===r?this.computeVertexNormals():this.normalizeNormals()}function Ji(e,t){Sn.call(this),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Ki(e,t)),this.mergeVertices()}function Ki(e,t){Zi.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],e,t),this.type="TetrahedronBufferGeometry",this.parameters={radius:e,detail:t}}function Qi(e,t){Sn.call(this),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new $i(e,t)),this.mergeVertices()}function $i(e,t){Zi.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronBufferGeometry",this.parameters={radius:e,detail:t}}function ea(e,t){Sn.call(this),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ta(e,t)),this.mergeVertices()}function ta(e,t){var n=(1+Math.sqrt(5))/2,r=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];Zi.call(this,r,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],e,t),this.type="IcosahedronBufferGeometry",this.parameters={radius:e,detail:t}}function na(e,t){Sn.call(this),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ra(e,t)),this.mergeVertices()}function ra(e,t){var n=(1+Math.sqrt(5))/2,r=1/n,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r];Zi.call(this,i,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],e,t),this.type="DodecahedronBufferGeometry",this.parameters={radius:e,detail:t}}function ia(e,t,n,r,i,a){Sn.call(this),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:r,closed:i},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var o=new aa(e,t,n,r,i);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function aa(e,t,n,r,i){_n.call(this),this.type="TubeBufferGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:r,closed:i},t=t||64,n=n||1,r=r||8,i=i||!1;var a=e.computeFrenetFrames(t,i);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var o,s,c=new Ot,l=new Ot,h=new Rt,u=new Ot,p=[],d=[],f=[],m=[];function v(i){u=e.getPointAt(i/t,u);var o=a.normals[i],h=a.binormals[i];for(s=0;s<=r;s++){var f=s/r*Math.PI*2,m=Math.sin(f),v=-Math.cos(f);l.x=v*o.x+m*h.x,l.y=v*o.y+m*h.y,l.z=v*o.z+m*h.z,l.normalize(),d.push(l.x,l.y,l.z),c.x=u.x+n*l.x,c.y=u.y+n*l.y,c.z=u.z+n*l.z,p.push(c.x,c.y,c.z)}}!function(){for(o=0;o<t;o++)v(o);v(!1===i?t:0),function(){for(o=0;o<=t;o++)for(s=0;s<=r;s++)h.x=o/t,h.y=s/r,f.push(h.x,h.y)}(),function(){for(s=1;s<=t;s++)for(o=1;o<=r;o++){var e=(r+1)*(s-1)+(o-1),n=(r+1)*s+(o-1),i=(r+1)*s+o,a=(r+1)*(s-1)+o;m.push(e,n,a),m.push(n,i,a)}}()}(),this.setIndex(m),this.addAttribute("position",new gn(p,3)),this.addAttribute("normal",new gn(d,3)),this.addAttribute("uv",new gn(f,2))}function oa(e,t,n,r,i,a,o){Sn.call(this),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:r,p:i,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new sa(e,t,n,r,i,a)),this.mergeVertices()}function sa(e,t,n,r,i,a){_n.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:r,p:i,q:a},e=e||1,t=t||.4,n=Math.floor(n)||64,r=Math.floor(r)||8,i=i||2,a=a||3;var o,s,c=[],l=[],h=[],u=[],p=new Ot,d=new Ot,f=new Ot,m=new Ot,v=new Ot,g=new Ot,y=new Ot;for(o=0;o<=n;++o){var x=o/n*i*Math.PI*2;for(A(x,i,a,e,f),A(x+.01,i,a,e,m),g.subVectors(m,f),y.addVectors(m,f),v.crossVectors(g,y),y.crossVectors(v,g),v.normalize(),y.normalize(),s=0;s<=r;++s){var b=s/r*Math.PI*2,w=-t*Math.cos(b),_=t*Math.sin(b);p.x=f.x+(w*y.x+_*v.x),p.y=f.y+(w*y.y+_*v.y),p.z=f.z+(w*y.z+_*v.z),l.push(p.x,p.y,p.z),d.subVectors(p,f).normalize(),h.push(d.x,d.y,d.z),u.push(o/n),u.push(s/r)}}for(s=1;s<=n;s++)for(o=1;o<=r;o++){var M=(r+1)*(s-1)+(o-1),T=(r+1)*s+(o-1),S=(r+1)*s+o,E=(r+1)*(s-1)+o;c.push(M,T,E),c.push(T,S,E)}function A(e,t,n,r,i){var a=Math.cos(e),o=Math.sin(e),s=n/t*e,c=Math.cos(s);i.x=r*(2+c)*.5*a,i.y=r*(2+c)*o*.5,i.z=r*Math.sin(s)*.5}this.setIndex(c),this.addAttribute("position",new gn(l,3)),this.addAttribute("normal",new gn(h,3)),this.addAttribute("uv",new gn(u,2))}function ca(e,t,n,r,i){Sn.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:r,arc:i},this.fromBufferGeometry(new la(e,t,n,r,i)),this.mergeVertices()}function la(e,t,n,r,i){_n.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:r,arc:i},e=e||1,t=t||.4,n=Math.floor(n)||8,r=Math.floor(r)||6,i=i||2*Math.PI;var a,o,s=[],c=[],l=[],h=[],u=new Ot,p=new Ot,d=new Ot;for(a=0;a<=n;a++)for(o=0;o<=r;o++){var f=o/r*i,m=a/n*Math.PI*2;p.x=(e+t*Math.cos(m))*Math.cos(f),p.y=(e+t*Math.cos(m))*Math.sin(f),p.z=t*Math.sin(m),c.push(p.x,p.y,p.z),u.x=e*Math.cos(f),u.y=e*Math.sin(f),d.subVectors(p,u).normalize(),l.push(d.x,d.y,d.z),h.push(o/r),h.push(a/n)}for(a=1;a<=n;a++)for(o=1;o<=r;o++){var v=(r+1)*a+o-1,g=(r+1)*(a-1)+o-1,y=(r+1)*(a-1)+o,x=(r+1)*a+o;s.push(v,g,x),s.push(g,y,x)}this.setIndex(s),this.addAttribute("position",new gn(c,3)),this.addAttribute("normal",new gn(l,3)),this.addAttribute("uv",new gn(h,2))}Object.assign(_i.prototype,r.prototype),Object.assign(Mi.prototype,r.prototype),Object.assign(Si.prototype,{isFogExp2:!0,clone:function(){return new Si(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}),Object.assign(Ei.prototype,{isFog:!0,clone:function(){return new Ei(this.color,this.near,this.far)},toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}),Object.defineProperty(Ai.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(Ai.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setArray:function(e){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==e?e.length/this.stride:0,this.array=e,this},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,t,n){e*=this.stride,n*=t.stride;for(var r=0,i=this.stride;r<i;r++)this.array[e+r]=t.array[n+r];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(e){return this.onUploadCallback=e,this}}),Object.defineProperties(Li.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(Li.prototype,{isInterleavedBufferAttribute:!0,setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this},setXYZ:function(e,t,n,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=r,this},setXYZW:function(e,t,n,r,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=r,this.data.array[e+3]=i,this}}),Pi.prototype=Object.create(sn.prototype),Pi.prototype.constructor=Pi,Pi.prototype.isSpriteMaterial=!0,Pi.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this},Ri.prototype=Object.assign(Object.create(qt.prototype),{constructor:Ri,isSprite:!0,raycast:function(){var e=new Ot,t=new Ot,n=new Ot,r=new Rt,i=new Rt,a=new Ht,o=new Ot,s=new Ot,c=new Ot,l=new Rt,h=new Rt,u=new Rt;function p(e,t,n,o,s,c){r.subVectors(e,n).addScalar(.5).multiply(o),void 0!==s?(i.x=c*r.x-s*r.y,i.y=s*r.x+c*r.y):i.copy(r),e.copy(t),e.x+=i.x,e.y+=i.y,e.applyMatrix4(a)}return function(r,i){t.setFromMatrixScale(this.matrixWorld),a.copy(r._camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(r._camera.matrixWorldInverse,this.matrixWorld),n.setFromMatrixPosition(this.modelViewMatrix),r._camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&t.multiplyScalar(-n.z);var d,f,m=this.material.rotation;0!==m&&(f=Math.cos(m),d=Math.sin(m));var v=this.center;p(o.set(-.5,-.5,0),n,v,t,d,f),p(s.set(.5,-.5,0),n,v,t,d,f),p(c.set(.5,.5,0),n,v,t,d,f),l.set(0,0),h.set(1,0),u.set(1,1);var g=r.ray.intersectTriangle(o,s,c,!1,e);if(null!==g||(p(s.set(-.5,.5,0),n,v,t,d,f),h.set(0,1),null!==(g=r.ray.intersectTriangle(o,c,s,!1,e)))){var y=r.ray.origin.distanceTo(e);y<r.near||y>r.far||i.push({distance:y,point:e.clone(),uv:Qt.getUV(e,o,s,c,l,h,u,new Rt),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)},copy:function(e){return qt.prototype.copy.call(this,e),void 0!==e.center&&this.center.copy(e.center),this}}),Ci.prototype=Object.assign(Object.create(qt.prototype),{constructor:Ci,isLOD:!0,copy:function(e){qt.prototype.copy.call(this,e,!1);for(var t=e.levels,n=0,r=t.length;n<r;n++){var i=t[n];this.addLevel(i.object.clone(),i.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var n=this.levels,r=0;r<n.length&&!(t<n[r].distance);r++);return n.splice(r,0,{distance:t,object:e}),this.add(e),this},getObjectForDistance:function(e){for(var t=this.levels,n=1,r=t.length;n<r&&!(e<t[n].distance);n++);return t[n-1].object},raycast:function(){var e=new Ot;return function(t,n){e.setFromMatrixPosition(this.matrixWorld);var r=t.ray.origin.distanceTo(e);this.getObjectForDistance(r).raycast(t,n)}}(),update:function(){var e=new Ot,t=new Ot;return function(n){var r=this.levels;if(r.length>1){e.setFromMatrixPosition(n.matrixWorld),t.setFromMatrixPosition(this.matrixWorld);var i=e.distanceTo(t);r[0].object.visible=!0;for(var a=1,o=r.length;a<o&&i>=r[a].distance;a++)r[a-1].object.visible=!1,r[a].object.visible=!0;for(;a<o;a++)r[a].object.visible=!1}}}(),toJSON:function(e){var t=qt.prototype.toJSON.call(this,e);t.object.levels=[];for(var n=this.levels,r=0,i=n.length;r<i;r++){var a=n[r];t.object.levels.push({object:a.object.uuid,distance:a.distance})}return t}}),Oi.prototype=Object.assign(Object.create(Mn.prototype),{constructor:Oi,isSkinnedMesh:!0,bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var e=new Ft,t=this.geometry.attributes.skinWeight,n=0,r=t.count;n<r;n++){e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.w=t.getW(n);var i=1/e.manhattanLength();i!==1/0?e.multiplyScalar(i):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}},updateMatrixWorld:function(e){Mn.prototype.updateMatrixWorld.call(this,e),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Object.assign(Ii.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var n=new Ht;this.bones[e]&&n.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(n)}},pose:function(){var e,t,n;for(t=0,n=this.bones.length;t<n;t++)(e=this.bones[t])&&e.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,n=this.bones.length;t<n;t++)(e=this.bones[t])&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){var e=new Ht,t=new Ht;return function(){for(var n=this.bones,r=this.boneInverses,i=this.boneMatrices,a=this.boneTexture,o=0,s=n.length;o<s;o++){var c=n[o]?n[o].matrixWorld:t;e.multiplyMatrices(c,r[o]),e.toArray(i,16*o)}void 0!==a&&(a.needsUpdate=!0)}}(),clone:function(){return new Ii(this.bones,this.boneInverses)},getBoneByName:function(e){for(var t=0,n=this.bones.length;t<n;t++){var r=this.bones[t];if(r.name===e)return r}}}),Di.prototype=Object.assign(Object.create(qt.prototype),{constructor:Di,isBone:!0}),Ni.prototype=Object.create(sn.prototype),Ni.prototype.constructor=Ni,Ni.prototype.isLineBasicMaterial=!0,Ni.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this},zi.prototype=Object.assign(Object.create(qt.prototype),{constructor:zi,isLine:!0,computeLineDistances:function(){var e=new Ot,t=new Ot;return function(){var n=this.geometry;if(n.isBufferGeometry)if(null===n.index){for(var r=n.attributes.position,i=[0],a=1,o=r.count;a<o;a++)e.fromBufferAttribute(r,a-1),t.fromBufferAttribute(r,a),i[a]=i[a-1],i[a]+=e.distanceTo(t);n.addAttribute("lineDistance",new gn(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){var s=n.vertices;(i=n.lineDistances)[0]=0;for(a=1,o=s.length;a<o;a++)i[a]=i[a-1],i[a]+=s[a-1].distanceTo(s[a])}return this}}(),raycast:function(){var e=new Ht,t=new Kt,n=new Jt;return function(r,i){var a=r.linePrecision,o=this.geometry,s=this.matrixWorld;if(null===o.boundingSphere&&o.computeBoundingSphere(),n.copy(o.boundingSphere),n.applyMatrix4(s),n.radius+=a,!1!==r.ray.intersectsSphere(n)){e.getInverse(s),t.copy(r.ray).applyMatrix4(e);var c=a/((this.scale.x+this.scale.y+this.scale.z)/3),l=c*c,h=new Ot,u=new Ot,p=new Ot,d=new Ot,f=this&&this.isLineSegments?2:1;if(o.isBufferGeometry){var m=o.index,v=o.attributes.position.array;if(null!==m)for(var g=m.array,y=0,x=g.length-1;y<x;y+=f){var b=g[y],w=g[y+1];if(h.fromArray(v,3*b),u.fromArray(v,3*w),!(t.distanceSqToSegment(h,u,d,p)>l))d.applyMatrix4(this.matrixWorld),(T=r.ray.origin.distanceTo(d))<r.near||T>r.far||i.push({distance:T,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}else for(y=0,x=v.length/3-1;y<x;y+=f){if(h.fromArray(v,3*y),u.fromArray(v,3*y+3),!(t.distanceSqToSegment(h,u,d,p)>l))d.applyMatrix4(this.matrixWorld),(T=r.ray.origin.distanceTo(d))<r.near||T>r.far||i.push({distance:T,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}else if(o.isGeometry){var _=o.vertices,M=_.length;for(y=0;y<M-1;y+=f){var T;if(!(t.distanceSqToSegment(_[y],_[y+1],d,p)>l))d.applyMatrix4(this.matrixWorld),(T=r.ray.origin.distanceTo(d))<r.near||T>r.far||i.push({distance:T,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ui.prototype=Object.assign(Object.create(zi.prototype),{constructor:Ui,isLineSegments:!0,computeLineDistances:function(){var e=new Ot,t=new Ot;return function(){var n=this.geometry;if(n.isBufferGeometry)if(null===n.index){for(var r=n.attributes.position,i=[],a=0,o=r.count;a<o;a+=2)e.fromBufferAttribute(r,a),t.fromBufferAttribute(r,a+1),i[a]=0===a?0:i[a-1],i[a+1]=i[a]+e.distanceTo(t);n.addAttribute("lineDistance",new gn(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){var s=n.vertices;for(i=n.lineDistances,a=0,o=s.length;a<o;a+=2)e.copy(s[a]),t.copy(s[a+1]),i[a]=0===a?0:i[a-1],i[a+1]=i[a]+e.distanceTo(t)}return this}}()}),Bi.prototype=Object.assign(Object.create(zi.prototype),{constructor:Bi,isLineLoop:!0}),Fi.prototype=Object.create(sn.prototype),Fi.prototype.constructor=Fi,Fi.prototype.isPointsMaterial=!0,Fi.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.morphTargets=e.morphTargets,this},Gi.prototype=Object.assign(Object.create(qt.prototype),{constructor:Gi,isPoints:!0,raycast:function(){var e=new Ht,t=new Kt,n=new Jt;return function(r,i){var a=this,o=this.geometry,s=this.matrixWorld,c=r.params.Points.threshold;if(null===o.boundingSphere&&o.computeBoundingSphere(),n.copy(o.boundingSphere),n.applyMatrix4(s),n.radius+=c,!1!==r.ray.intersectsSphere(n)){e.getInverse(s),t.copy(r.ray).applyMatrix4(e);var l=c/((this.scale.x+this.scale.y+this.scale.z)/3),h=l*l,u=new Ot,p=new Ot;if(o.isBufferGeometry){var d=o.index,f=o.attributes.position.array;if(null!==d)for(var m=d.array,v=0,g=m.length;v<g;v++){var y=m[v];u.fromArray(f,3*y),w(u,y)}else{v=0;for(var x=f.length/3;v<x;v++)u.fromArray(f,3*v),w(u,v)}}else{var b=o.vertices;for(v=0,x=b.length;v<x;v++)w(b[v],v)}}function w(e,n){var o=t.distanceSqToPoint(e);if(o<h){t.closestPointToPoint(e,p),p.applyMatrix4(s);var c=r.ray.origin.distanceTo(p);if(c<r.near||c>r.far)return;i.push({distance:c,distanceToRay:Math.sqrt(o),point:p.clone(),index:n,face:null,object:a})}}}}(),updateMorphTargets:function(){var e,t,n,r=this.geometry;if(r.isBufferGeometry){var i=r.morphAttributes,a=Object.keys(i);if(a.length>0){var o=i[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)n=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}else{var s=r.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),ki.prototype=Object.assign(Object.create(Bt.prototype),{constructor:ki,isVideoTexture:!0,update:function(){var e=this.image;e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Hi.prototype=Object.create(Bt.prototype),Hi.prototype.constructor=Hi,Hi.prototype.isCompressedTexture=!0,ji.prototype=Object.create(Bt.prototype),ji.prototype.constructor=ji,ji.prototype.isCanvasTexture=!0,Vi.prototype=Object.create(Bt.prototype),Vi.prototype.constructor=Vi,Vi.prototype.isDepthTexture=!0,Wi.prototype=Object.create(_n.prototype),Wi.prototype.constructor=Wi,Xi.prototype=Object.create(Sn.prototype),Xi.prototype.constructor=Xi,qi.prototype=Object.create(_n.prototype),qi.prototype.constructor=qi,Yi.prototype=Object.create(Sn.prototype),Yi.prototype.constructor=Yi,Zi.prototype=Object.create(_n.prototype),Zi.prototype.constructor=Zi,Ji.prototype=Object.create(Sn.prototype),Ji.prototype.constructor=Ji,Ki.prototype=Object.create(Zi.prototype),Ki.prototype.constructor=Ki,Qi.prototype=Object.create(Sn.prototype),Qi.prototype.constructor=Qi,$i.prototype=Object.create(Zi.prototype),$i.prototype.constructor=$i,ea.prototype=Object.create(Sn.prototype),ea.prototype.constructor=ea,ta.prototype=Object.create(Zi.prototype),ta.prototype.constructor=ta,na.prototype=Object.create(Sn.prototype),na.prototype.constructor=na,ra.prototype=Object.create(Zi.prototype),ra.prototype.constructor=ra,ia.prototype=Object.create(Sn.prototype),ia.prototype.constructor=ia,aa.prototype=Object.create(_n.prototype),aa.prototype.constructor=aa,aa.prototype.toJSON=function(){var e=_n.prototype.toJSON.call(this);return e.path=this.parameters.path.toJSON(),e},oa.prototype=Object.create(Sn.prototype),oa.prototype.constructor=oa,sa.prototype=Object.create(_n.prototype),sa.prototype.constructor=sa,ca.prototype=Object.create(Sn.prototype),ca.prototype.constructor=ca,la.prototype=Object.create(_n.prototype),la.prototype.constructor=la;var ha=function(e,t,n){n=n||2;var r,i,a,o,s,c,l,h=t&&t.length,u=h?t[0]*n:e.length,p=ua(e,0,u,n,!0),d=[];if(!p||p.next===p.prev)return d;if(h&&(p=function(e,t,n,r){var i,a,o,s,c,l=[];for(i=0,a=t.length;i<a;i++)o=t[i]*r,s=i<a-1?t[i+1]*r:e.length,(c=ua(e,o,s,r,!1))===c.next&&(c.steiner=!0),l.push(wa(c));for(l.sort(ya),i=0;i<l.length;i++)xa(l[i],n),n=pa(n,n.next);return n}(e,t,p,n)),e.length>80*n){r=a=e[0],i=o=e[1];for(var f=n;f<u;f+=n)s=e[f],c=e[f+1],s<r&&(r=s),c<i&&(i=c),s>a&&(a=s),c>o&&(o=c);l=0!==(l=Math.max(a-r,o-i))?1/l:0}return da(p,d,n,r,i,l),d};function ua(e,t,n,r,i){var a,o;if(i===function(e,t,n,r){for(var i=0,a=t,o=n-r;a<n;a+=r)i+=(e[o]-e[a])*(e[a+1]+e[o+1]),o=a;return i}(e,t,n,r)>0)for(a=t;a<n;a+=r)o=Pa(a,e[a],e[a+1],o);else for(a=n-r;a>=t;a-=r)o=Pa(a,e[a],e[a+1],o);return o&&Sa(o,o.next)&&(Ra(o),o=o.next),o}function pa(e,t){if(!e)return e;t||(t=e);var n,r=e;do{if(n=!1,r.steiner||!Sa(r,r.next)&&0!==Ta(r.prev,r,r.next))r=r.next;else{if(Ra(r),(r=t=r.prev)===r.next)break;n=!0}}while(n||r!==t);return t}function da(e,t,n,r,i,a,o){if(e){!o&&a&&function(e,t,n,r){var i=e;do{null===i.z&&(i.z=ba(i.x,i.y,t,n,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==e);i.prevZ.nextZ=null,i.prevZ=null,function(e){var t,n,r,i,a,o,s,c,l=1;do{for(n=e,e=null,a=null,o=0;n;){for(o++,r=n,s=0,t=0;t<l&&(s++,r=r.nextZ);t++);for(c=l;s>0||c>0&&r;)0!==s&&(0===c||!r||n.z<=r.z)?(i=n,n=n.nextZ,s--):(i=r,r=r.nextZ,c--),a?a.nextZ=i:e=i,i.prevZ=a,a=i;n=r}a.nextZ=null,l*=2}while(o>1)}(i)}(e,r,i,a);for(var s,c,l=e;e.prev!==e.next;)if(s=e.prev,c=e.next,a?ma(e,r,i,a):fa(e))t.push(s.i/n),t.push(e.i/n),t.push(c.i/n),Ra(e),e=c.next,l=c.next;else if((e=c)===l){o?1===o?da(e=va(e,t,n),t,n,r,i,a,2):2===o&&ga(e,t,n,r,i,a):da(pa(e),t,n,r,i,a,1);break}}}function fa(e){var t=e.prev,n=e,r=e.next;if(Ta(t,n,r)>=0)return!1;for(var i=e.next.next;i!==e.prev;){if(_a(t.x,t.y,n.x,n.y,r.x,r.y,i.x,i.y)&&Ta(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function ma(e,t,n,r){var i=e.prev,a=e,o=e.next;if(Ta(i,a,o)>=0)return!1;for(var s=i.x<a.x?i.x<o.x?i.x:o.x:a.x<o.x?a.x:o.x,c=i.y<a.y?i.y<o.y?i.y:o.y:a.y<o.y?a.y:o.y,l=i.x>a.x?i.x>o.x?i.x:o.x:a.x>o.x?a.x:o.x,h=i.y>a.y?i.y>o.y?i.y:o.y:a.y>o.y?a.y:o.y,u=ba(s,c,t,n,r),p=ba(l,h,t,n,r),d=e.prevZ,f=e.nextZ;d&&d.z>=u&&f&&f.z<=p;){if(d!==e.prev&&d!==e.next&&_a(i.x,i.y,a.x,a.y,o.x,o.y,d.x,d.y)&&Ta(d.prev,d,d.next)>=0)return!1;if(d=d.prevZ,f!==e.prev&&f!==e.next&&_a(i.x,i.y,a.x,a.y,o.x,o.y,f.x,f.y)&&Ta(f.prev,f,f.next)>=0)return!1;f=f.nextZ}for(;d&&d.z>=u;){if(d!==e.prev&&d!==e.next&&_a(i.x,i.y,a.x,a.y,o.x,o.y,d.x,d.y)&&Ta(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;f&&f.z<=p;){if(f!==e.prev&&f!==e.next&&_a(i.x,i.y,a.x,a.y,o.x,o.y,f.x,f.y)&&Ta(f.prev,f,f.next)>=0)return!1;f=f.nextZ}return!0}function va(e,t,n){var r=e;do{var i=r.prev,a=r.next.next;!Sa(i,a)&&Ea(i,r,r.next,a)&&Aa(i,a)&&Aa(a,i)&&(t.push(i.i/n),t.push(r.i/n),t.push(a.i/n),Ra(r),Ra(r.next),r=e=a),r=r.next}while(r!==e);return r}function ga(e,t,n,r,i,a){var o=e;do{for(var s=o.next.next;s!==o.prev;){if(o.i!==s.i&&Ma(o,s)){var c=La(o,s);return o=pa(o,o.next),c=pa(c,c.next),da(o,t,n,r,i,a),void da(c,t,n,r,i,a)}s=s.next}o=o.next}while(o!==e)}function ya(e,t){return e.x-t.x}function xa(e,t){if(t=function(e,t){var n,r=t,i=e.x,a=e.y,o=-1/0;do{if(a<=r.y&&a>=r.next.y&&r.next.y!==r.y){var s=r.x+(a-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(s<=i&&s>o){if(o=s,s===i){if(a===r.y)return r;if(a===r.next.y)return r.next}n=r.x<r.next.x?r:r.next}}r=r.next}while(r!==t);if(!n)return null;if(i===o)return n.prev;var c,l=n,h=n.x,u=n.y,p=1/0;r=n.next;for(;r!==l;)i>=r.x&&r.x>=h&&i!==r.x&&_a(a<u?i:o,a,h,u,a<u?o:i,a,r.x,r.y)&&((c=Math.abs(a-r.y)/(i-r.x))<p||c===p&&r.x>n.x)&&Aa(r,e)&&(n=r,p=c),r=r.next;return n}(e,t)){var n=La(t,e);pa(n,n.next)}}function ba(e,t,n,r,i){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*i)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-r)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function wa(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function _a(e,t,n,r,i,a,o,s){return(i-o)*(t-s)-(e-o)*(a-s)>=0&&(e-o)*(r-s)-(n-o)*(t-s)>=0&&(n-o)*(a-s)-(i-o)*(r-s)>=0}function Ma(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&Ea(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&Aa(e,t)&&Aa(t,e)&&function(e,t){var n=e,r=!1,i=(e.x+t.x)/2,a=(e.y+t.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&i<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==e);return r}(e,t)}function Ta(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function Sa(e,t){return e.x===t.x&&e.y===t.y}function Ea(e,t,n,r){return!!(Sa(e,n)&&Sa(t,r)||Sa(e,r)&&Sa(n,t))||Ta(e,t,n)>0!=Ta(e,t,r)>0&&Ta(n,r,e)>0!=Ta(n,r,t)>0}function Aa(e,t){return Ta(e.prev,e,e.next)<0?Ta(e,t,e.next)>=0&&Ta(e,e.prev,t)>=0:Ta(e,t,e.prev)<0||Ta(e,e.next,t)<0}function La(e,t){var n=new Ca(e.i,e.x,e.y),r=new Ca(t.i,t.x,t.y),i=e.next,a=t.prev;return e.next=t,t.prev=e,n.next=i,i.prev=n,r.next=n,n.prev=r,a.next=r,r.prev=a,r}function Pa(e,t,n,r){var i=new Ca(e,t,n);return r?(i.next=r.next,i.prev=r,r.next.prev=i,r.next=i):(i.prev=i,i.next=i),i}function Ra(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function Ca(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var Oa={area:function(e){for(var t=e.length,n=0,r=t-1,i=0;i<t;r=i++)n+=e[r].x*e[i].y-e[i].x*e[r].y;return.5*n},isClockWise:function(e){return Oa.area(e)<0},triangulateShape:function(e,t){var n=[],r=[],i=[];Ia(e),Da(n,e);var a=e.length;t.forEach(Ia);for(var o=0;o<t.length;o++)r.push(a),a+=t[o].length,Da(n,t[o]);var s=ha(n,r);for(o=0;o<s.length;o+=3)i.push(s.slice(o,o+3));return i}};function Ia(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function Da(e,t){for(var n=0;n<t.length;n++)e.push(t[n].x),e.push(t[n].y)}function Na(e,t){Sn.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new za(e,t)),this.mergeVertices()}function za(e,t){_n.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:e,options:t};for(var n=this,r=[],i=[],a=0,o=(e=Array.isArray(e)?e:[e]).length;a<o;a++){s(e[a])}function s(e){var a=[],o=void 0!==t.curveSegments?t.curveSegments:12,s=void 0!==t.steps?t.steps:1,c=void 0!==t.depth?t.depth:100,l=void 0===t.bevelEnabled||t.bevelEnabled,h=void 0!==t.bevelThickness?t.bevelThickness:6,u=void 0!==t.bevelSize?t.bevelSize:h-2,p=void 0!==t.bevelOffset?t.bevelOffset:0,d=void 0!==t.bevelSegments?t.bevelSegments:3,f=t.extrudePath,m=void 0!==t.UVGenerator?t.UVGenerator:Ua;void 0!==t.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),c=t.amount);var v,g,y,x,b,w,_,M,T=!1;f&&(v=f.getSpacedPoints(s),T=!0,l=!1,g=f.computeFrenetFrames(s,!1),y=new Ot,x=new Ot,b=new Ot),l||(d=0,h=0,u=0,p=0);var S=e.extractPoints(o),E=S.shape,A=S.holes;if(!Oa.isClockWise(E))for(E=E.reverse(),_=0,M=A.length;_<M;_++)w=A[_],Oa.isClockWise(w)&&(A[_]=w.reverse());var L=Oa.triangulateShape(E,A),P=E;for(_=0,M=A.length;_<M;_++)w=A[_],E=E.concat(w);function R(e,t,n){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(n).add(e)}var C,O,I,D,N,z,U=E.length,B=L.length;function F(e,t,n){var r,i,a,o=e.x-t.x,s=e.y-t.y,c=n.x-e.x,l=n.y-e.y,h=o*o+s*s,u=o*l-s*c;if(Math.abs(u)>Number.EPSILON){var p=Math.sqrt(h),d=Math.sqrt(c*c+l*l),f=t.x-s/p,m=t.y+o/p,v=((n.x-l/d-f)*l-(n.y+c/d-m)*c)/(o*l-s*c),g=(r=f+o*v-e.x)*r+(i=m+s*v-e.y)*i;if(g<=2)return new Rt(r,i);a=Math.sqrt(g/2)}else{var y=!1;o>Number.EPSILON?c>Number.EPSILON&&(y=!0):o<-Number.EPSILON?c<-Number.EPSILON&&(y=!0):Math.sign(s)===Math.sign(l)&&(y=!0),y?(r=-s,i=o,a=Math.sqrt(h)):(r=o,i=s,a=Math.sqrt(h/2))}return new Rt(r/a,i/a)}for(var G=[],k=0,H=P.length,j=H-1,V=k+1;k<H;k++,j++,V++)j===H&&(j=0),V===H&&(V=0),G[k]=F(P[k],P[j],P[V]);var W,X,q=[],Y=G.concat();for(_=0,M=A.length;_<M;_++){for(w=A[_],W=[],k=0,j=(H=w.length)-1,V=k+1;k<H;k++,j++,V++)j===H&&(j=0),V===H&&(V=0),W[k]=F(w[k],w[j],w[V]);q.push(W),Y=Y.concat(W)}for(C=0;C<d;C++){for(I=C/d,D=h*Math.cos(I*Math.PI/2),O=u*Math.sin(I*Math.PI/2)+p,k=0,H=P.length;k<H;k++)J((N=R(P[k],G[k],O)).x,N.y,-D);for(_=0,M=A.length;_<M;_++)for(w=A[_],W=q[_],k=0,H=w.length;k<H;k++)J((N=R(w[k],W[k],O)).x,N.y,-D)}for(O=u+p,k=0;k<U;k++)N=l?R(E[k],Y[k],O):E[k],T?(x.copy(g.normals[0]).multiplyScalar(N.x),y.copy(g.binormals[0]).multiplyScalar(N.y),b.copy(v[0]).add(x).add(y),J(b.x,b.y,b.z)):J(N.x,N.y,0);for(X=1;X<=s;X++)for(k=0;k<U;k++)N=l?R(E[k],Y[k],O):E[k],T?(x.copy(g.normals[X]).multiplyScalar(N.x),y.copy(g.binormals[X]).multiplyScalar(N.y),b.copy(v[X]).add(x).add(y),J(b.x,b.y,b.z)):J(N.x,N.y,c/s*X);for(C=d-1;C>=0;C--){for(I=C/d,D=h*Math.cos(I*Math.PI/2),O=u*Math.sin(I*Math.PI/2)+p,k=0,H=P.length;k<H;k++)J((N=R(P[k],G[k],O)).x,N.y,c+D);for(_=0,M=A.length;_<M;_++)for(w=A[_],W=q[_],k=0,H=w.length;k<H;k++)N=R(w[k],W[k],O),T?J(N.x,N.y+v[s-1].y,v[s-1].x+D):J(N.x,N.y,c+D)}function Z(e,t){var n,r;for(k=e.length;--k>=0;){n=k,(r=k-1)<0&&(r=e.length-1);var i=0,a=s+2*d;for(i=0;i<a;i++){var o=U*i,c=U*(i+1);Q(t+n+o,t+r+o,t+r+c,t+n+c)}}}function J(e,t,n){a.push(e),a.push(t),a.push(n)}function K(e,t,i){$(e),$(t),$(i);var a=r.length/3,o=m.generateTopUV(n,r,a-3,a-2,a-1);ee(o[0]),ee(o[1]),ee(o[2])}function Q(e,t,i,a){$(e),$(t),$(a),$(t),$(i),$(a);var o=r.length/3,s=m.generateSideWallUV(n,r,o-6,o-3,o-2,o-1);ee(s[0]),ee(s[1]),ee(s[3]),ee(s[1]),ee(s[2]),ee(s[3])}function $(e){r.push(a[3*e+0]),r.push(a[3*e+1]),r.push(a[3*e+2])}function ee(e){i.push(e.x),i.push(e.y)}!function(){var e=r.length/3;if(l){var t=0,i=U*t;for(k=0;k<B;k++)K((z=L[k])[2]+i,z[1]+i,z[0]+i);for(i=U*(t=s+2*d),k=0;k<B;k++)K((z=L[k])[0]+i,z[1]+i,z[2]+i)}else{for(k=0;k<B;k++)K((z=L[k])[2],z[1],z[0]);for(k=0;k<B;k++)K((z=L[k])[0]+U*s,z[1]+U*s,z[2]+U*s)}n.addGroup(e,r.length/3-e,0)}(),function(){var e=r.length/3,t=0;for(Z(P,t),t+=P.length,_=0,M=A.length;_<M;_++)Z(w=A[_],t),t+=w.length;n.addGroup(e,r.length/3-e,1)}()}this.addAttribute("position",new gn(r,3)),this.addAttribute("uv",new gn(i,2)),this.computeVertexNormals()}Na.prototype=Object.create(Sn.prototype),Na.prototype.constructor=Na,Na.prototype.toJSON=function(){var e=Sn.prototype.toJSON.call(this);return Ba(this.parameters.shapes,this.parameters.options,e)},za.prototype=Object.create(_n.prototype),za.prototype.constructor=za,za.prototype.toJSON=function(){var e=_n.prototype.toJSON.call(this);return Ba(this.parameters.shapes,this.parameters.options,e)};var Ua={generateTopUV:function(e,t,n,r,i){var a=t[3*n],o=t[3*n+1],s=t[3*r],c=t[3*r+1],l=t[3*i],h=t[3*i+1];return[new Rt(a,o),new Rt(s,c),new Rt(l,h)]},generateSideWallUV:function(e,t,n,r,i,a){var o=t[3*n],s=t[3*n+1],c=t[3*n+2],l=t[3*r],h=t[3*r+1],u=t[3*r+2],p=t[3*i],d=t[3*i+1],f=t[3*i+2],m=t[3*a],v=t[3*a+1],g=t[3*a+2];return Math.abs(s-h)<.01?[new Rt(o,1-c),new Rt(l,1-u),new Rt(p,1-f),new Rt(m,1-g)]:[new Rt(s,1-c),new Rt(h,1-u),new Rt(d,1-f),new Rt(v,1-g)]}};function Ba(e,t,n){if(n.shapes=[],Array.isArray(e))for(var r=0,i=e.length;r<i;r++){var a=e[r];n.shapes.push(a.uuid)}else n.shapes.push(e.uuid);return void 0!==t.extrudePath&&(n.options.extrudePath=t.extrudePath.toJSON()),n}function Fa(e,t){Sn.call(this),this.type="TextGeometry",this.parameters={text:e,parameters:t},this.fromBufferGeometry(new Ga(e,t)),this.mergeVertices()}function Ga(e,t){var n=(t=t||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Sn;var r=n.generateShapes(e,t.size);t.depth=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),za.call(this,r,t),this.type="TextBufferGeometry"}function ka(e,t,n,r,i,a,o){Sn.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:r,phiLength:i,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new Ha(e,t,n,r,i,a,o)),this.mergeVertices()}function Ha(e,t,n,r,i,a,o){_n.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:r,phiLength:i,thetaStart:a,thetaLength:o},e=e||1,t=Math.max(3,Math.floor(t)||8),n=Math.max(2,Math.floor(n)||6),r=void 0!==r?r:0,i=void 0!==i?i:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;var s,c,l=Math.min(a+o,Math.PI),h=0,u=[],p=new Ot,d=new Ot,f=[],m=[],v=[],g=[];for(c=0;c<=n;c++){var y=[],x=c/n,b=0;for(0==c&&0==a?b=.5/t:c==n&&l==Math.PI&&(b=-.5/t),s=0;s<=t;s++){var w=s/t;p.x=-e*Math.cos(r+w*i)*Math.sin(a+x*o),p.y=e*Math.cos(a+x*o),p.z=e*Math.sin(r+w*i)*Math.sin(a+x*o),m.push(p.x,p.y,p.z),d.copy(p).normalize(),v.push(d.x,d.y,d.z),g.push(w+b,1-x),y.push(h++)}u.push(y)}for(c=0;c<n;c++)for(s=0;s<t;s++){var _=u[c][s+1],M=u[c][s],T=u[c+1][s],S=u[c+1][s+1];(0!==c||a>0)&&f.push(_,M,S),(c!==n-1||l<Math.PI)&&f.push(M,T,S)}this.setIndex(f),this.addAttribute("position",new gn(m,3)),this.addAttribute("normal",new gn(v,3)),this.addAttribute("uv",new gn(g,2))}function ja(e,t,n,r,i,a){Sn.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:a},this.fromBufferGeometry(new Va(e,t,n,r,i,a)),this.mergeVertices()}function Va(e,t,n,r,i,a){_n.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:a},e=e||.5,t=t||1,i=void 0!==i?i:0,a=void 0!==a?a:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var o,s,c,l=[],h=[],u=[],p=[],d=e,f=(t-e)/(r=void 0!==r?Math.max(1,r):1),m=new Ot,v=new Rt;for(s=0;s<=r;s++){for(c=0;c<=n;c++)o=i+c/n*a,m.x=d*Math.cos(o),m.y=d*Math.sin(o),h.push(m.x,m.y,m.z),u.push(0,0,1),v.x=(m.x/t+1)/2,v.y=(m.y/t+1)/2,p.push(v.x,v.y);d+=f}for(s=0;s<r;s++){var g=s*(n+1);for(c=0;c<n;c++){var y=o=c+g,x=o+n+1,b=o+n+2,w=o+1;l.push(y,x,w),l.push(x,b,w)}}this.setIndex(l),this.addAttribute("position",new gn(h,3)),this.addAttribute("normal",new gn(u,3)),this.addAttribute("uv",new gn(p,2))}function Wa(e,t,n,r){Sn.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:r},this.fromBufferGeometry(new Xa(e,t,n,r)),this.mergeVertices()}function Xa(e,t,n,r){_n.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:r},t=Math.floor(t)||12,n=n||0,r=r||2*Math.PI,r=Pt.clamp(r,0,2*Math.PI);var i,a,o,s=[],c=[],l=[],h=1/t,u=new Ot,p=new Rt;for(a=0;a<=t;a++){var d=n+a*h*r,f=Math.sin(d),m=Math.cos(d);for(o=0;o<=e.length-1;o++)u.x=e[o].x*f,u.y=e[o].y,u.z=e[o].x*m,c.push(u.x,u.y,u.z),p.x=a/t,p.y=o/(e.length-1),l.push(p.x,p.y)}for(a=0;a<t;a++)for(o=0;o<e.length-1;o++){var v=i=o+a*e.length,g=i+e.length,y=i+e.length+1,x=i+1;s.push(v,g,x),s.push(g,y,x)}if(this.setIndex(s),this.addAttribute("position",new gn(c,3)),this.addAttribute("uv",new gn(l,2)),this.computeVertexNormals(),r===2*Math.PI){var b=this.attributes.normal.array,w=new Ot,_=new Ot,M=new Ot;for(i=t*e.length*3,a=0,o=0;a<e.length;a++,o+=3)w.x=b[o+0],w.y=b[o+1],w.z=b[o+2],_.x=b[i+o+0],_.y=b[i+o+1],_.z=b[i+o+2],M.addVectors(w,_).normalize(),b[o+0]=b[i+o+0]=M.x,b[o+1]=b[i+o+1]=M.y,b[o+2]=b[i+o+2]=M.z}}function qa(e,t){Sn.call(this),this.type="ShapeGeometry","object"==typeof t&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new Ya(e,t)),this.mergeVertices()}function Ya(e,t){_n.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:e,curveSegments:t},t=t||12;var n=[],r=[],i=[],a=[],o=0,s=0;if(!1===Array.isArray(e))l(e);else for(var c=0;c<e.length;c++)l(e[c]),this.addGroup(o,s,c),o+=s,s=0;function l(e){var o,c,l,h=r.length/3,u=e.extractPoints(t),p=u.shape,d=u.holes;for(!1===Oa.isClockWise(p)&&(p=p.reverse()),o=0,c=d.length;o<c;o++)l=d[o],!0===Oa.isClockWise(l)&&(d[o]=l.reverse());var f=Oa.triangulateShape(p,d);for(o=0,c=d.length;o<c;o++)l=d[o],p=p.concat(l);for(o=0,c=p.length;o<c;o++){var m=p[o];r.push(m.x,m.y,0),i.push(0,0,1),a.push(m.x,m.y)}for(o=0,c=f.length;o<c;o++){var v=f[o],g=v[0]+h,y=v[1]+h,x=v[2]+h;n.push(g,y,x),s+=3}}this.setIndex(n),this.addAttribute("position",new gn(r,3)),this.addAttribute("normal",new gn(i,3)),this.addAttribute("uv",new gn(a,2))}function Za(e,t){if(t.shapes=[],Array.isArray(e))for(var n=0,r=e.length;n<r;n++){var i=e[n];t.shapes.push(i.uuid)}else t.shapes.push(e.uuid);return t}function Ja(e,t){_n.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var n,r,i,a,o=[],s=Math.cos(Pt.DEG2RAD*t),c=[0,0],l={},h=["a","b","c"];e.isBufferGeometry?(a=new Sn).fromBufferGeometry(e):a=e.clone(),a.mergeVertices(),a.computeFaceNormals();for(var u=a.vertices,p=a.faces,d=0,f=p.length;d<f;d++)for(var m=p[d],v=0;v<3;v++)n=m[h[v]],r=m[h[(v+1)%3]],c[0]=Math.min(n,r),c[1]=Math.max(n,r),void 0===l[i=c[0]+","+c[1]]?l[i]={index1:c[0],index2:c[1],face1:d,face2:void 0}:l[i].face2=d;for(i in l){var g=l[i];if(void 0===g.face2||p[g.face1].normal.dot(p[g.face2].normal)<=s){var y=u[g.index1];o.push(y.x,y.y,y.z),y=u[g.index2],o.push(y.x,y.y,y.z)}}this.addAttribute("position",new gn(o,3))}function Ka(e,t,n,r,i,a,o,s){Sn.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:r,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new Qa(e,t,n,r,i,a,o,s)),this.mergeVertices()}function Qa(e,t,n,r,i,a,o,s){_n.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:r,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s};var c=this;e=void 0!==e?e:1,t=void 0!==t?t:1,n=n||1,r=Math.floor(r)||8,i=Math.floor(i)||1,a=void 0!==a&&a,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var l=[],h=[],u=[],p=[],d=0,f=[],m=n/2,v=0;function g(n){var i,a,f,g=new Rt,y=new Ot,x=0,b=!0===n?e:t,w=!0===n?1:-1;for(a=d,i=1;i<=r;i++)h.push(0,m*w,0),u.push(0,w,0),p.push(.5,.5),d++;for(f=d,i=0;i<=r;i++){var _=i/r*s+o,M=Math.cos(_),T=Math.sin(_);y.x=b*T,y.y=m*w,y.z=b*M,h.push(y.x,y.y,y.z),u.push(0,w,0),g.x=.5*M+.5,g.y=.5*T*w+.5,p.push(g.x,g.y),d++}for(i=0;i<r;i++){var S=a+i,E=f+i;!0===n?l.push(E,E+1,S):l.push(E+1,E,S),x+=3}c.addGroup(v,x,!0===n?1:2),v+=x}!function(){var a,g,y=new Ot,x=new Ot,b=0,w=(t-e)/n;for(g=0;g<=i;g++){var _=[],M=g/i,T=M*(t-e)+e;for(a=0;a<=r;a++){var S=a/r,E=S*s+o,A=Math.sin(E),L=Math.cos(E);x.x=T*A,x.y=-M*n+m,x.z=T*L,h.push(x.x,x.y,x.z),y.set(A,w,L).normalize(),u.push(y.x,y.y,y.z),p.push(S,1-M),_.push(d++)}f.push(_)}for(a=0;a<r;a++)for(g=0;g<i;g++){var P=f[g][a],R=f[g+1][a],C=f[g+1][a+1],O=f[g][a+1];l.push(P,R,O),l.push(R,C,O),b+=6}c.addGroup(v,b,0),v+=b}(),!1===a&&(e>0&&g(!0),t>0&&g(!1)),this.setIndex(l),this.addAttribute("position",new gn(h,3)),this.addAttribute("normal",new gn(u,3)),this.addAttribute("uv",new gn(p,2))}function $a(e,t,n,r,i,a,o){Ka.call(this,0,e,t,n,r,i,a,o),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:a,thetaLength:o}}function eo(e,t,n,r,i,a,o){Qa.call(this,0,e,t,n,r,i,a,o),this.type="ConeBufferGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:a,thetaLength:o}}function to(e,t,n,r){Sn.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:r},this.fromBufferGeometry(new no(e,t,n,r)),this.mergeVertices()}function no(e,t,n,r){_n.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:r},e=e||1,t=void 0!==t?Math.max(3,t):8,n=void 0!==n?n:0,r=void 0!==r?r:2*Math.PI;var i,a,o=[],s=[],c=[],l=[],h=new Ot,u=new Rt;for(s.push(0,0,0),c.push(0,0,1),l.push(.5,.5),a=0,i=3;a<=t;a++,i+=3){var p=n+a/t*r;h.x=e*Math.cos(p),h.y=e*Math.sin(p),s.push(h.x,h.y,h.z),c.push(0,0,1),u.x=(s[i]/e+1)/2,u.y=(s[i+1]/e+1)/2,l.push(u.x,u.y)}for(i=1;i<=t;i++)o.push(i,i+1,0);this.setIndex(o),this.addAttribute("position",new gn(s,3)),this.addAttribute("normal",new gn(c,3)),this.addAttribute("uv",new gn(l,2))}Fa.prototype=Object.create(Sn.prototype),Fa.prototype.constructor=Fa,Ga.prototype=Object.create(za.prototype),Ga.prototype.constructor=Ga,ka.prototype=Object.create(Sn.prototype),ka.prototype.constructor=ka,Ha.prototype=Object.create(_n.prototype),Ha.prototype.constructor=Ha,ja.prototype=Object.create(Sn.prototype),ja.prototype.constructor=ja,Va.prototype=Object.create(_n.prototype),Va.prototype.constructor=Va,Wa.prototype=Object.create(Sn.prototype),Wa.prototype.constructor=Wa,Xa.prototype=Object.create(_n.prototype),Xa.prototype.constructor=Xa,qa.prototype=Object.create(Sn.prototype),qa.prototype.constructor=qa,qa.prototype.toJSON=function(){var e=Sn.prototype.toJSON.call(this);return Za(this.parameters.shapes,e)},Ya.prototype=Object.create(_n.prototype),Ya.prototype.constructor=Ya,Ya.prototype.toJSON=function(){var e=_n.prototype.toJSON.call(this);return Za(this.parameters.shapes,e)},Ja.prototype=Object.create(_n.prototype),Ja.prototype.constructor=Ja,Ka.prototype=Object.create(Sn.prototype),Ka.prototype.constructor=Ka,Qa.prototype=Object.create(_n.prototype),Qa.prototype.constructor=Qa,$a.prototype=Object.create(Ka.prototype),$a.prototype.constructor=$a,eo.prototype=Object.create(Qa.prototype),eo.prototype.constructor=eo,to.prototype=Object.create(Sn.prototype),to.prototype.constructor=to,no.prototype=Object.create(_n.prototype),no.prototype.constructor=no;var ro=Object.freeze({WireframeGeometry:Wi,ParametricGeometry:Xi,ParametricBufferGeometry:qi,TetrahedronGeometry:Ji,TetrahedronBufferGeometry:Ki,OctahedronGeometry:Qi,OctahedronBufferGeometry:$i,IcosahedronGeometry:ea,IcosahedronBufferGeometry:ta,DodecahedronGeometry:na,DodecahedronBufferGeometry:ra,PolyhedronGeometry:Yi,PolyhedronBufferGeometry:Zi,TubeGeometry:ia,TubeBufferGeometry:aa,TorusKnotGeometry:oa,TorusKnotBufferGeometry:sa,TorusGeometry:ca,TorusBufferGeometry:la,TextGeometry:Fa,TextBufferGeometry:Ga,SphereGeometry:ka,SphereBufferGeometry:Ha,RingGeometry:ja,RingBufferGeometry:Va,PlaneGeometry:Yn,PlaneBufferGeometry:Zn,LatheGeometry:Wa,LatheBufferGeometry:Xa,ShapeGeometry:qa,ShapeBufferGeometry:Ya,ExtrudeGeometry:Na,ExtrudeBufferGeometry:za,EdgesGeometry:Ja,ConeGeometry:$a,ConeBufferGeometry:eo,CylinderGeometry:Ka,CylinderBufferGeometry:Qa,CircleGeometry:to,CircleBufferGeometry:no,BoxGeometry:En,BoxBufferGeometry:An});function io(e){sn.call(this),this.type="ShadowMaterial",this.color=new en(0),this.transparent=!0,this.setValues(e)}function ao(e){In.call(this,e),this.type="RawShaderMaterial"}function oo(e){sn.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new en(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new en(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=St,this.normalScale=new Rt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function so(e){oo.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(e)}function co(e){sn.call(this),this.type="MeshPhongMaterial",this.color=new en(16777215),this.specular=new en(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new en(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=St,this.normalScale=new Rt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=J,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function lo(e){co.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(e)}function ho(e){sn.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=St,this.normalScale=new Rt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function uo(e){sn.call(this),this.type="MeshLambertMaterial",this.color=new en(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new en(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=J,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function po(e){sn.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new en(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=St,this.normalScale=new Rt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.lights=!1,this.setValues(e)}function fo(e){Ni.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}io.prototype=Object.create(sn.prototype),io.prototype.constructor=io,io.prototype.isShadowMaterial=!0,io.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.color.copy(e.color),this},ao.prototype=Object.create(In.prototype),ao.prototype.constructor=ao,ao.prototype.isRawShaderMaterial=!0,oo.prototype=Object.create(sn.prototype),oo.prototype.constructor=oo,oo.prototype.isMeshStandardMaterial=!0,oo.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},so.prototype=Object.create(oo.prototype),so.prototype.constructor=so,so.prototype.isMeshPhysicalMaterial=!0,so.prototype.copy=function(e){return oo.prototype.copy.call(this,e),this.defines={PHYSICAL:""},this.reflectivity=e.reflectivity,this.clearCoat=e.clearCoat,this.clearCoatRoughness=e.clearCoatRoughness,this},co.prototype=Object.create(sn.prototype),co.prototype.constructor=co,co.prototype.isMeshPhongMaterial=!0,co.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},lo.prototype=Object.create(co.prototype),lo.prototype.constructor=lo,lo.prototype.isMeshToonMaterial=!0,lo.prototype.copy=function(e){return co.prototype.copy.call(this,e),this.gradientMap=e.gradientMap,this},ho.prototype=Object.create(sn.prototype),ho.prototype.constructor=ho,ho.prototype.isMeshNormalMaterial=!0,ho.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},uo.prototype=Object.create(sn.prototype),uo.prototype.constructor=uo,uo.prototype.isMeshLambertMaterial=!0,uo.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},po.prototype=Object.create(sn.prototype),po.prototype.constructor=po,po.prototype.isMeshMatcapMaterial=!0,po.prototype.copy=function(e){return sn.prototype.copy.call(this,e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},fo.prototype=Object.create(Ni.prototype),fo.prototype.constructor=fo,fo.prototype.isLineDashedMaterial=!0,fo.prototype.copy=function(e){return Ni.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var mo=Object.freeze({ShadowMaterial:io,SpriteMaterial:Pi,RawShaderMaterial:ao,ShaderMaterial:In,PointsMaterial:Fi,MeshPhysicalMaterial:so,MeshStandardMaterial:oo,MeshPhongMaterial:co,MeshToonMaterial:lo,MeshNormalMaterial:ho,MeshLambertMaterial:uo,MeshDepthMaterial:pi,MeshDistanceMaterial:di,MeshBasicMaterial:cn,MeshMatcapMaterial:po,LineDashedMaterial:fo,LineBasicMaterial:Ni,Material:sn}),vo={arraySlice:function(e,t,n){return vo.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==n?n:e.length)):e.slice(t,n)},convertArray:function(e,t,n){return!e||!n&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){for(var t=e.length,n=new Array(t),r=0;r!==t;++r)n[r]=r;return n.sort(function(t,n){return e[t]-e[n]}),n},sortedArray:function(e,t,n){for(var r=e.length,i=new e.constructor(r),a=0,o=0;o!==r;++a)for(var s=n[a]*t,c=0;c!==t;++c)i[o++]=e[s+c];return i},flattenJSON:function(e,t,n,r){for(var i=1,a=e[0];void 0!==a&&void 0===a[r];)a=e[i++];if(void 0!==a){var o=a[r];if(void 0!==o)if(Array.isArray(o))do{void 0!==(o=a[r])&&(t.push(a.time),n.push.apply(n,o)),a=e[i++]}while(void 0!==a);else if(void 0!==o.toArray)do{void 0!==(o=a[r])&&(t.push(a.time),o.toArray(n,n.length)),a=e[i++]}while(void 0!==a);else do{void 0!==(o=a[r])&&(t.push(a.time),n.push(o)),a=e[i++]}while(void 0!==a)}}};function go(e,t,n,r){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new t.constructor(n),this.sampleValues=t,this.valueSize=n}function yo(e,t,n,r){go.call(this,e,t,n,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function xo(e,t,n,r){go.call(this,e,t,n,r)}function bo(e,t,n,r){go.call(this,e,t,n,r)}function wo(e,t,n,r){if(void 0===e)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=vo.convertArray(t,this.TimeBufferType),this.values=vo.convertArray(n,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation)}function _o(e,t,n){wo.call(this,e,t,n)}function Mo(e,t,n,r){wo.call(this,e,t,n,r)}function To(e,t,n,r){wo.call(this,e,t,n,r)}function So(e,t,n,r){go.call(this,e,t,n,r)}function Eo(e,t,n,r){wo.call(this,e,t,n,r)}function Ao(e,t,n,r){wo.call(this,e,t,n,r)}function Lo(e,t,n,r){wo.call(this,e,t,n,r)}function Po(e,t,n){this.name=e,this.tracks=n,this.duration=void 0!==t?t:-1,this.uuid=Pt.generateUUID(),this.duration<0&&this.resetDuration()}function Ro(e){if(void 0===e.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var t=function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return To;case"vector":case"vector2":case"vector3":case"vector4":return Lo;case"color":return Mo;case"quaternion":return Eo;case"bool":case"boolean":return _o;case"string":return Ao}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}(e.type);if(void 0===e.times){var n=[],r=[];vo.flattenJSON(e.keys,n,r,"value"),e.times=n,e.values=r}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)}Object.assign(go.prototype,{evaluate:function(e){var t=this.parameterPositions,n=this._cachedIndex,r=t[n],i=t[n-1];e:{t:{var a;n:{r:if(!(e<r)){for(var o=n+2;;){if(void 0===r){if(e<i)break r;return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,e,i)}if(n===o)break;if(i=r,e<(r=t[++n]))break t}a=t.length;break n}if(e>=i)break e;var s=t[1];e<s&&(n=2,i=s);for(o=n-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,r);if(n===o)break;if(r=i,e>=(i=t[--n-1]))break t}a=n,n=0}for(;n<a;){var c=n+a>>>1;e<t[c]?a=c:n=c+1}if(r=t[n],void 0===(i=t[n-1]))return this._cachedIndex=0,this.beforeStart_(0,e,r);if(void 0===r)return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,i,e)}this._cachedIndex=n,this.intervalChanged_(n,i,r)}return this.interpolate_(n,i,e,r)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,n=this.sampleValues,r=this.valueSize,i=e*r,a=0;a!==r;++a)t[a]=n[i+a];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(go.prototype,{beforeStart_:go.prototype.copySampleValue_,afterEnd_:go.prototype.copySampleValue_}),yo.prototype=Object.assign(Object.create(go.prototype),{constructor:yo,DefaultSettings_:{endingStart:pt,endingEnd:pt},intervalChanged_:function(e,t,n){var r=this.parameterPositions,i=e-2,a=e+1,o=r[i],s=r[a];if(void 0===o)switch(this.getSettings_().endingStart){case 2401:i=e,o=2*t-n;break;case 2402:o=t+r[i=r.length-2]-r[i+1];break;default:i=e,o=n}if(void 0===s)switch(this.getSettings_().endingEnd){case 2401:a=e,s=2*n-t;break;case 2402:a=1,s=n+r[1]-r[0];break;default:a=e-1,s=t}var c=.5*(n-t),l=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(s-n),this._offsetPrev=i*l,this._offsetNext=a*l},interpolate_:function(e,t,n,r){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,p=this._weightNext,d=(n-t)/(r-t),f=d*d,m=f*d,v=-u*m+2*u*f-u*d,g=(1+u)*m+(-1.5-2*u)*f+(-.5+u)*d+1,y=(-1-p)*m+(1.5+p)*f+.5*d,x=p*m-p*f,b=0;b!==o;++b)i[b]=v*a[l+b]+g*a[c+b]+y*a[s+b]+x*a[h+b];return i}}),xo.prototype=Object.assign(Object.create(go.prototype),{constructor:xo,interpolate_:function(e,t,n,r){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=(n-t)/(r-t),h=1-l,u=0;u!==o;++u)i[u]=a[c+u]*h+a[s+u]*l;return i}}),bo.prototype=Object.assign(Object.create(go.prototype),{constructor:bo,interpolate_:function(e){return this.copySampleValue_(e-1)}}),Object.assign(wo,{toJSON:function(e){var t,n=e.constructor;if(void 0!==n.toJSON)t=n.toJSON(e);else{t={name:e.name,times:vo.convertArray(e.times,Array),values:vo.convertArray(e.values,Array)};var r=e.getInterpolation();r!==e.DefaultInterpolation&&(t.interpolation=r)}return t.type=e.ValueTypeName,t}}),Object.assign(wo.prototype,{constructor:wo,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(e){return new bo(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new xo(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new yo(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case 2300:t=this.InterpolantFactoryMethodDiscrete;break;case 2301:t=this.InterpolantFactoryMethodLinear;break;case 2302:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,n=0,r=t.length;n!==r;++n)t[n]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,n=0,r=t.length;n!==r;++n)t[n]*=e;return this},trim:function(e,t){for(var n=this.times,r=n.length,i=0,a=r-1;i!==r&&n[i]<e;)++i;for(;-1!==a&&n[a]>t;)--a;if(++a,0!==i||a!==r){i>=a&&(i=(a=Math.max(a,1))-1);var o=this.getValueSize();this.times=vo.arraySlice(n,i,a),this.values=vo.arraySlice(this.values,i*o,a*o)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);var n=this.times,r=this.values,i=n.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);for(var a=null,o=0;o!==i;o++){var s=n[o];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,s),e=!1;break}if(null!==a&&a>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,s,a),e=!1;break}a=s}if(void 0!==r&&vo.isTypedArray(r)){o=0;for(var c=r.length;o!==c;++o){var l=r[o];if(isNaN(l)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,l),e=!1;break}}}return e},optimize:function(){for(var e=this.times,t=this.values,n=this.getValueSize(),r=2302===this.getInterpolation(),i=1,a=e.length-1,o=1;o<a;++o){var s=!1,c=e[o];if(c!==e[o+1]&&(1!==o||c!==c[0]))if(r)s=!0;else for(var l=o*n,h=l-n,u=l+n,p=0;p!==n;++p){var d=t[l+p];if(d!==t[h+p]||d!==t[u+p]){s=!0;break}}if(s){if(o!==i){e[i]=e[o];var f=o*n,m=i*n;for(p=0;p!==n;++p)t[m+p]=t[f+p]}++i}}if(a>0){e[i]=e[a];for(f=a*n,m=i*n,p=0;p!==n;++p)t[m+p]=t[f+p];++i}return i!==e.length&&(this.times=vo.arraySlice(e,0,i),this.values=vo.arraySlice(t,0,i*n)),this},clone:function(){var e=vo.arraySlice(this.times,0),t=vo.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,e,t);return n.createInterpolant=this.createInterpolant,n}}),_o.prototype=Object.assign(Object.create(wo.prototype),{constructor:_o,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Mo.prototype=Object.assign(Object.create(wo.prototype),{constructor:Mo,ValueTypeName:"color"}),To.prototype=Object.assign(Object.create(wo.prototype),{constructor:To,ValueTypeName:"number"}),So.prototype=Object.assign(Object.create(go.prototype),{constructor:So,interpolate_:function(e,t,n,r){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=(n-t)/(r-t),l=s+o;s!==l;s+=4)Ct.slerpFlat(i,0,a,s-o,a,s,c);return i}}),Eo.prototype=Object.assign(Object.create(wo.prototype),{constructor:Eo,ValueTypeName:"quaternion",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(e){return new So(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),Ao.prototype=Object.assign(Object.create(wo.prototype),{constructor:Ao,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Lo.prototype=Object.assign(Object.create(wo.prototype),{constructor:Lo,ValueTypeName:"vector"}),Object.assign(Po,{parse:function(e){for(var t=[],n=e.tracks,r=1/(e.fps||1),i=0,a=n.length;i!==a;++i)t.push(Ro(n[i]).scale(r));return new Po(e.name,e.duration,t)},toJSON:function(e){for(var t=[],n=e.tracks,r={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid},i=0,a=n.length;i!==a;++i)t.push(wo.toJSON(n[i]));return r},CreateFromMorphTargetSequence:function(e,t,n,r){for(var i=t.length,a=[],o=0;o<i;o++){var s=[],c=[];s.push((o+i-1)%i,o,(o+1)%i),c.push(0,1,0);var l=vo.getKeyframeOrder(s);s=vo.sortedArray(s,1,l),c=vo.sortedArray(c,1,l),r||0!==s[0]||(s.push(i),c.push(c[0])),a.push(new To(".morphTargetInfluences["+t[o].name+"]",s,c).scale(1/n))}return new Po(e,-1,a)},findByName:function(e,t){var n=e;if(!Array.isArray(e)){var r=e;n=r.geometry&&r.geometry.animations||r.animations}for(var i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null},CreateClipsFromMorphTargetSequences:function(e,t,n){for(var r={},i=/^([\w-]*?)([\d]+)$/,a=0,o=e.length;a<o;a++){var s=e[a],c=s.name.match(i);if(c&&c.length>1){var l=r[u=c[1]];l||(r[u]=l=[]),l.push(s)}}var h=[];for(var u in r)h.push(Po.CreateFromMorphTargetSequence(u,r[u],t,n));return h},parseAnimation:function(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(e,t,n,r,i){if(0!==n.length){var a=[],o=[];vo.flattenJSON(n,a,o,r),0!==a.length&&i.push(new e(t,a,o))}},r=[],i=e.name||"default",a=e.length||-1,o=e.fps||30,s=e.hierarchy||[],c=0;c<s.length;c++){var l=s[c].keys;if(l&&0!==l.length)if(l[0].morphTargets){for(var h={},u=0;u<l.length;u++)if(l[u].morphTargets)for(var p=0;p<l[u].morphTargets.length;p++)h[l[u].morphTargets[p]]=-1;for(var d in h){var f=[],m=[];for(p=0;p!==l[u].morphTargets.length;++p){var v=l[u];f.push(v.time),m.push(v.morphTarget===d?1:0)}r.push(new To(".morphTargetInfluence["+d+"]",f,m))}a=h.length*(o||1)}else{var g=".bones["+t[c].name+"]";n(Lo,g+".position",l,"pos",r),n(Eo,g+".quaternion",l,"rot",r),n(Lo,g+".scale",l,"scl",r)}}return 0===r.length?null:new Po(i,a,r)}}),Object.assign(Po.prototype,{resetDuration:function(){for(var e=0,t=0,n=this.tracks.length;t!==n;++t){var r=this.tracks[t];e=Math.max(e,r.times[r.times.length-1])}return this.duration=e,this},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},validate:function(){for(var e=!0,t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this},clone:function(){for(var e=[],t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new Po(this.name,this.duration,e)}});var Co={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function Oo(e,t,n){var r=this,i=!1,a=0,o=0,s=void 0;this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){o++,!1===i&&void 0!==r.onStart&&r.onStart(e,a,o),i=!0},this.itemEnd=function(e){a++,void 0!==r.onProgress&&r.onProgress(e,a,o),a===o&&(i=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(e){void 0!==r.onError&&r.onError(e)},this.resolveURL=function(e){return s?s(e):e},this.setURLModifier=function(e){return s=e,this}}var Io=new Oo,Do={};function No(e){this.manager=void 0!==e?e:Io}function zo(e){this.manager=void 0!==e?e:Io,this._parser=null}function Uo(e){this.manager=void 0!==e?e:Io}function Bo(e){this.manager=void 0!==e?e:Io}function Fo(e){this.manager=void 0!==e?e:Io}function Go(){this.type="Curve",this.arcLengthDivisions=200}function ko(e,t,n,r,i,a,o,s){Go.call(this),this.type="EllipseCurve",this.aX=e||0,this.aY=t||0,this.xRadius=n||1,this.yRadius=r||1,this.aStartAngle=i||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=o||!1,this.aRotation=s||0}function Ho(e,t,n,r,i,a){ko.call(this,e,t,n,n,r,i,a),this.type="ArcCurve"}function jo(){var e=0,t=0,n=0,r=0;function i(i,a,o,s){e=i,t=o,n=-3*i+3*a-2*o-s,r=2*i-2*a+o+s}return{initCatmullRom:function(e,t,n,r,a){i(t,n,a*(n-e),a*(r-t))},initNonuniformCatmullRom:function(e,t,n,r,a,o,s){var c=(t-e)/a-(n-e)/(a+o)+(n-t)/o,l=(n-t)/o-(r-t)/(o+s)+(r-n)/s;i(t,n,c*=o,l*=o)},calc:function(i){var a=i*i;return e+t*i+n*a+r*(a*i)}}}Object.assign(No.prototype,{load:function(e,t,n,r){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Co.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout(function(){t&&t(a),i.manager.itemEnd(e)},0),a;if(void 0===Do[e]){var o=e.match(/^data:(.*?)(;base64)?,(.*)$/);if(o){var s=o[1],c=!!o[2],l=o[3];l=decodeURIComponent(l),c&&(l=atob(l));try{var h,u=(this.responseType||"").toLowerCase();switch(u){case"arraybuffer":case"blob":for(var p=new Uint8Array(l.length),d=0;d<l.length;d++)p[d]=l.charCodeAt(d);h="blob"===u?new Blob([p.buffer],{type:s}):p.buffer;break;case"document":var f=new DOMParser;h=f.parseFromString(l,s);break;case"json":h=JSON.parse(l);break;default:h=l}setTimeout(function(){t&&t(h),i.manager.itemEnd(e)},0)}catch(t){setTimeout(function(){r&&r(t),i.manager.itemError(e),i.manager.itemEnd(e)},0)}}else{Do[e]=[],Do[e].push({onLoad:t,onProgress:n,onError:r});var m=new XMLHttpRequest;for(var v in m.open("GET",e,!0),m.addEventListener("load",function(t){var n=this.response;Co.add(e,n);var r=Do[e];if(delete Do[e],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");for(var a=0,o=r.length;a<o;a++){(s=r[a]).onLoad&&s.onLoad(n)}i.manager.itemEnd(e)}else{for(a=0,o=r.length;a<o;a++){var s;(s=r[a]).onError&&s.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)}},!1),m.addEventListener("progress",function(t){for(var n=Do[e],r=0,i=n.length;r<i;r++){var a=n[r];a.onProgress&&a.onProgress(t)}},!1),m.addEventListener("error",function(t){var n=Do[e];delete Do[e];for(var r=0,a=n.length;r<a;r++){var o=n[r];o.onError&&o.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)},!1),m.addEventListener("abort",function(t){var n=Do[e];delete Do[e];for(var r=0,a=n.length;r<a;r++){var o=n[r];o.onError&&o.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)},!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(v,this.requestHeader[v]);m.send(null)}return i.manager.itemStart(e),m}Do[e].push({onLoad:t,onProgress:n,onError:r})},setPath:function(e){return this.path=e,this},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}}),Object.assign(function(e){this.manager=void 0!==e?e:Io}.prototype,{load:function(e,t,n,r){var i=this,a=new No(i.manager);a.setPath(i.path),a.load(e,function(e){t(i.parse(JSON.parse(e)))},n,r)},parse:function(e){for(var t=[],n=0;n<e.length;n++){var r=Po.parse(e[n]);t.push(r)}return t},setPath:function(e){return this.path=e,this}}),Object.assign(function(e){this.manager=void 0!==e?e:Io,this._parser=null}.prototype,{load:function(e,t,n,r){var i=this,a=[],o=new Hi;o.image=a;var s=new No(this.manager);function c(c){s.load(e[c],function(e){var n=i._parser(e,!0);a[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(l+=1)&&(1===n.mipmapCount&&(o.minFilter=ye),o.format=n.format,o.needsUpdate=!0,t&&t(o))},n,r)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(e))for(var l=0,h=0,u=e.length;h<u;++h)c(h);else s.load(e,function(e){var n=i._parser(e,!0);if(n.isCubemap)for(var r=n.mipmaps.length/n.mipmapCount,s=0;s<r;s++){a[s]={mipmaps:[]};for(var c=0;c<n.mipmapCount;c++)a[s].mipmaps.push(n.mipmaps[s*n.mipmapCount+c]),a[s].format=n.format,a[s].width=n.width,a[s].height=n.height}else o.image.width=n.width,o.image.height=n.height,o.mipmaps=n.mipmaps;1===n.mipmapCount&&(o.minFilter=ye),o.format=n.format,o.needsUpdate=!0,t&&t(o)},n,r);return o},setPath:function(e){return this.path=e,this}}),Object.assign(zo.prototype,{load:function(e,t,n,r){var i=this,a=new Gn,o=new No(this.manager);return o.setResponseType("arraybuffer"),o.setPath(this.path),o.load(e,function(e){var n=i._parser(e);n&&(void 0!==n.image?a.image=n.image:void 0!==n.data&&(a.image.width=n.width,a.image.height=n.height,a.image.data=n.data),a.wrapS=void 0!==n.wrapS?n.wrapS:de,a.wrapT=void 0!==n.wrapT?n.wrapT:de,a.magFilter=void 0!==n.magFilter?n.magFilter:ye,a.minFilter=void 0!==n.minFilter?n.minFilter:be,a.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(a.format=n.format),void 0!==n.type&&(a.type=n.type),void 0!==n.mipmaps&&(a.mipmaps=n.mipmaps),1===n.mipmapCount&&(a.minFilter=ye),a.needsUpdate=!0,t&&t(a,n))},n,r),a},setPath:function(e){return this.path=e,this}}),Object.assign(Uo.prototype,{crossOrigin:"anonymous",load:function(e,t,n,r){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Co.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout(function(){t&&t(a),i.manager.itemEnd(e)},0),a;var o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),Co.add(e,this),t&&t(this),i.manager.itemEnd(e)}function c(t){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),r&&r(t),i.manager.itemError(e),i.manager.itemEnd(e)}return o.addEventListener("load",s,!1),o.addEventListener("error",c,!1),"data:"!==e.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),i.manager.itemStart(e),o.src=e,o},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(Bo.prototype,{crossOrigin:"anonymous",load:function(e,t,n,r){var i=new Kn,a=new Uo(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var o=0;function s(n){a.load(e[n],function(e){i.images[n]=e,6===++o&&(i.needsUpdate=!0,t&&t(i))},void 0,r)}for(var c=0;c<e.length;++c)s(c);return i},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(Fo.prototype,{crossOrigin:"anonymous",load:function(e,t,n,r){var i=new Bt,a=new Uo(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(n){i.image=n;var r=e.search(/\.jpe?g($|\?)/i)>0||0===e.search(/^data\:image\/jpeg/);i.format=r?De:Ne,i.needsUpdate=!0,void 0!==t&&t(i)},n,r),i},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(Go.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(e,t){var n=this.getUtoTmapping(e);return this.getPoint(n,t)},getPoints:function(e){void 0===e&&(e=5);for(var t=[],n=0;n<=e;n++)t.push(this.getPoint(n/e));return t},getSpacedPoints:function(e){void 0===e&&(e=5);for(var t=[],n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(void 0===e&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,n,r=[],i=this.getPoint(0),a=0;for(r.push(0),n=1;n<=e;n++)a+=(t=this.getPoint(n/e)).distanceTo(i),r.push(a),i=t;return this.cacheArcLengths=r,r},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var n,r=this.getLengths(),i=0,a=r.length;n=t||e*r[a-1];for(var o,s=0,c=a-1;s<=c;)if((o=r[i=Math.floor(s+(c-s)/2)]-n)<0)s=i+1;else{if(!(o>0)){c=i;break}c=i-1}if(r[i=c]===n)return i/(a-1);var l=r[i];return(i+(n-l)/(r[i+1]-l))/(a-1)},getTangent:function(e){var t=e-1e-4,n=e+1e-4;t<0&&(t=0),n>1&&(n=1);var r=this.getPoint(t);return this.getPoint(n).clone().sub(r).normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)},computeFrenetFrames:function(e,t){var n,r,i,a=new Ot,o=[],s=[],c=[],l=new Ot,h=new Ht;for(n=0;n<=e;n++)r=n/e,o[n]=this.getTangentAt(r),o[n].normalize();s[0]=new Ot,c[0]=new Ot;var u=Number.MAX_VALUE,p=Math.abs(o[0].x),d=Math.abs(o[0].y),f=Math.abs(o[0].z);for(p<=u&&(u=p,a.set(1,0,0)),d<=u&&(u=d,a.set(0,1,0)),f<=u&&a.set(0,0,1),l.crossVectors(o[0],a).normalize(),s[0].crossVectors(o[0],l),c[0].crossVectors(o[0],s[0]),n=1;n<=e;n++)s[n]=s[n-1].clone(),c[n]=c[n-1].clone(),l.crossVectors(o[n-1],o[n]),l.length()>Number.EPSILON&&(l.normalize(),i=Math.acos(Pt.clamp(o[n-1].dot(o[n]),-1,1)),s[n].applyMatrix4(h.makeRotationAxis(l,i))),c[n].crossVectors(o[n],s[n]);if(!0===t)for(i=Math.acos(Pt.clamp(s[0].dot(s[e]),-1,1)),i/=e,o[0].dot(l.crossVectors(s[0],s[e]))>0&&(i=-i),n=1;n<=e;n++)s[n].applyMatrix4(h.makeRotationAxis(o[n],i*n)),c[n].crossVectors(o[n],s[n]);return{tangents:o,normals:s,binormals:c}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this},toJSON:function(){var e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e},fromJSON:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}),ko.prototype=Object.create(Go.prototype),ko.prototype.constructor=ko,ko.prototype.isEllipseCurve=!0,ko.prototype.getPoint=function(e,t){for(var n=t||new Rt,r=2*Math.PI,i=this.aEndAngle-this.aStartAngle,a=Math.abs(i)<Number.EPSILON;i<0;)i+=r;for(;i>r;)i-=r;i<Number.EPSILON&&(i=a?0:r),!0!==this.aClockwise||a||(i===r?i=-r:i-=r);var o=this.aStartAngle+e*i,s=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var l=Math.cos(this.aRotation),h=Math.sin(this.aRotation),u=s-this.aX,p=c-this.aY;s=u*l-p*h+this.aX,c=u*h+p*l+this.aY}return n.set(s,c)},ko.prototype.copy=function(e){return Go.prototype.copy.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},ko.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e},ko.prototype.fromJSON=function(e){return Go.prototype.fromJSON.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},Ho.prototype=Object.create(ko.prototype),Ho.prototype.constructor=Ho,Ho.prototype.isArcCurve=!0;var Vo=new Ot,Wo=new jo,Xo=new jo,qo=new jo;function Yo(e,t,n,r){Go.call(this),this.type="CatmullRomCurve3",this.points=e||[],this.closed=t||!1,this.curveType=n||"centripetal",this.tension=r||.5}function Zo(e,t,n,r,i){var a=.5*(r-t),o=.5*(i-n),s=e*e;return(2*n-2*r+a+o)*(e*s)+(-3*n+3*r-2*a-o)*s+a*e+n}function Jo(e,t,n,r){return function(e,t){var n=1-e;return n*n*t}(e,t)+function(e,t){return 2*(1-e)*e*t}(e,n)+function(e,t){return e*e*t}(e,r)}function Ko(e,t,n,r,i){return function(e,t){var n=1-e;return n*n*n*t}(e,t)+function(e,t){var n=1-e;return 3*n*n*e*t}(e,n)+function(e,t){return 3*(1-e)*e*e*t}(e,r)+function(e,t){return e*e*e*t}(e,i)}function Qo(e,t,n,r){Go.call(this),this.type="CubicBezierCurve",this.v0=e||new Rt,this.v1=t||new Rt,this.v2=n||new Rt,this.v3=r||new Rt}function $o(e,t,n,r){Go.call(this),this.type="CubicBezierCurve3",this.v0=e||new Ot,this.v1=t||new Ot,this.v2=n||new Ot,this.v3=r||new Ot}function es(e,t){Go.call(this),this.type="LineCurve",this.v1=e||new Rt,this.v2=t||new Rt}function ts(e,t){Go.call(this),this.type="LineCurve3",this.v1=e||new Ot,this.v2=t||new Ot}function ns(e,t,n){Go.call(this),this.type="QuadraticBezierCurve",this.v0=e||new Rt,this.v1=t||new Rt,this.v2=n||new Rt}function rs(e,t,n){Go.call(this),this.type="QuadraticBezierCurve3",this.v0=e||new Ot,this.v1=t||new Ot,this.v2=n||new Ot}function is(e){Go.call(this),this.type="SplineCurve",this.points=e||[]}Yo.prototype=Object.create(Go.prototype),Yo.prototype.constructor=Yo,Yo.prototype.isCatmullRomCurve3=!0,Yo.prototype.getPoint=function(e,t){var n,r,i,a,o=t||new Ot,s=this.points,c=s.length,l=(c-(this.closed?0:1))*e,h=Math.floor(l),u=l-h;if(this.closed?h+=h>0?0:(Math.floor(Math.abs(h)/c)+1)*c:0===u&&h===c-1&&(h=c-2,u=1),this.closed||h>0?n=s[(h-1)%c]:(Vo.subVectors(s[0],s[1]).add(s[0]),n=Vo),r=s[h%c],i=s[(h+1)%c],this.closed||h+2<c?a=s[(h+2)%c]:(Vo.subVectors(s[c-1],s[c-2]).add(s[c-1]),a=Vo),"centripetal"===this.curveType||"chordal"===this.curveType){var p="chordal"===this.curveType?.5:.25,d=Math.pow(n.distanceToSquared(r),p),f=Math.pow(r.distanceToSquared(i),p),m=Math.pow(i.distanceToSquared(a),p);f<1e-4&&(f=1),d<1e-4&&(d=f),m<1e-4&&(m=f),Wo.initNonuniformCatmullRom(n.x,r.x,i.x,a.x,d,f,m),Xo.initNonuniformCatmullRom(n.y,r.y,i.y,a.y,d,f,m),qo.initNonuniformCatmullRom(n.z,r.z,i.z,a.z,d,f,m)}else"catmullrom"===this.curveType&&(Wo.initCatmullRom(n.x,r.x,i.x,a.x,this.tension),Xo.initCatmullRom(n.y,r.y,i.y,a.y,this.tension),qo.initCatmullRom(n.z,r.z,i.z,a.z,this.tension));return o.set(Wo.calc(u),Xo.calc(u),qo.calc(u)),o},Yo.prototype.copy=function(e){Go.prototype.copy.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var r=e.points[t];this.points.push(r.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},Yo.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);e.points=[];for(var t=0,n=this.points.length;t<n;t++){var r=this.points[t];e.points.push(r.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e},Yo.prototype.fromJSON=function(e){Go.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var r=e.points[t];this.points.push((new Ot).fromArray(r))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},Qo.prototype=Object.create(Go.prototype),Qo.prototype.constructor=Qo,Qo.prototype.isCubicBezierCurve=!0,Qo.prototype.getPoint=function(e,t){var n=t||new Rt,r=this.v0,i=this.v1,a=this.v2,o=this.v3;return n.set(Ko(e,r.x,i.x,a.x,o.x),Ko(e,r.y,i.y,a.y,o.y)),n},Qo.prototype.copy=function(e){return Go.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},Qo.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},Qo.prototype.fromJSON=function(e){return Go.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},$o.prototype=Object.create(Go.prototype),$o.prototype.constructor=$o,$o.prototype.isCubicBezierCurve3=!0,$o.prototype.getPoint=function(e,t){var n=t||new Ot,r=this.v0,i=this.v1,a=this.v2,o=this.v3;return n.set(Ko(e,r.x,i.x,a.x,o.x),Ko(e,r.y,i.y,a.y,o.y),Ko(e,r.z,i.z,a.z,o.z)),n},$o.prototype.copy=function(e){return Go.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},$o.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},$o.prototype.fromJSON=function(e){return Go.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},es.prototype=Object.create(Go.prototype),es.prototype.constructor=es,es.prototype.isLineCurve=!0,es.prototype.getPoint=function(e,t){var n=t||new Rt;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n},es.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},es.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},es.prototype.copy=function(e){return Go.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},es.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},es.prototype.fromJSON=function(e){return Go.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},ts.prototype=Object.create(Go.prototype),ts.prototype.constructor=ts,ts.prototype.isLineCurve3=!0,ts.prototype.getPoint=function(e,t){var n=t||new Ot;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n},ts.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},ts.prototype.copy=function(e){return Go.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},ts.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},ts.prototype.fromJSON=function(e){return Go.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},ns.prototype=Object.create(Go.prototype),ns.prototype.constructor=ns,ns.prototype.isQuadraticBezierCurve=!0,ns.prototype.getPoint=function(e,t){var n=t||new Rt,r=this.v0,i=this.v1,a=this.v2;return n.set(Jo(e,r.x,i.x,a.x),Jo(e,r.y,i.y,a.y)),n},ns.prototype.copy=function(e){return Go.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},ns.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},ns.prototype.fromJSON=function(e){return Go.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},rs.prototype=Object.create(Go.prototype),rs.prototype.constructor=rs,rs.prototype.isQuadraticBezierCurve3=!0,rs.prototype.getPoint=function(e,t){var n=t||new Ot,r=this.v0,i=this.v1,a=this.v2;return n.set(Jo(e,r.x,i.x,a.x),Jo(e,r.y,i.y,a.y),Jo(e,r.z,i.z,a.z)),n},rs.prototype.copy=function(e){return Go.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},rs.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},rs.prototype.fromJSON=function(e){return Go.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},is.prototype=Object.create(Go.prototype),is.prototype.constructor=is,is.prototype.isSplineCurve=!0,is.prototype.getPoint=function(e,t){var n=t||new Rt,r=this.points,i=(r.length-1)*e,a=Math.floor(i),o=i-a,s=r[0===a?a:a-1],c=r[a],l=r[a>r.length-2?r.length-1:a+1],h=r[a>r.length-3?r.length-1:a+2];return n.set(Zo(o,s.x,c.x,l.x,h.x),Zo(o,s.y,c.y,l.y,h.y)),n},is.prototype.copy=function(e){Go.prototype.copy.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var r=e.points[t];this.points.push(r.clone())}return this},is.prototype.toJSON=function(){var e=Go.prototype.toJSON.call(this);e.points=[];for(var t=0,n=this.points.length;t<n;t++){var r=this.points[t];e.points.push(r.toArray())}return e},is.prototype.fromJSON=function(e){Go.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var r=e.points[t];this.points.push((new Rt).fromArray(r))}return this};var as=Object.freeze({ArcCurve:Ho,CatmullRomCurve3:Yo,CubicBezierCurve:Qo,CubicBezierCurve3:$o,EllipseCurve:ko,LineCurve:es,LineCurve3:ts,QuadraticBezierCurve:ns,QuadraticBezierCurve3:rs,SplineCurve:is});function os(){Go.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function ss(e){os.call(this),this.type="Path",this.currentPoint=new Rt,e&&this.setFromPoints(e)}function cs(e){ss.call(this,e),this.uuid=Pt.generateUUID(),this.type="Shape",this.holes=[]}function ls(e,t){qt.call(this),this.type="Light",this.color=new en(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function hs(e,t,n){ls.call(this,e,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(qt.DefaultUp),this.updateMatrix(),this.groundColor=new en(t)}function us(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new Rt(512,512),this.map=null,this.matrix=new Ht}function ps(){us.call(this,new Nn(50,1,.5,500))}function ds(e,t,n,r,i,a){ls.call(this,e,t),this.type="SpotLight",this.position.copy(qt.DefaultUp),this.updateMatrix(),this.target=new qt,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==r?r:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==a?a:1,this.shadow=new ps}function fs(e,t,n,r){ls.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==r?r:1,this.shadow=new us(new Nn(90,1,.5,500))}function ms(e,t,n,r,i,a){Dn.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==e?e:-1,this.right=void 0!==t?t:1,this.top=void 0!==n?n:1,this.bottom=void 0!==r?r:-1,this.near=void 0!==i?i:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function vs(){us.call(this,new ms(-5,5,5,-5,.5,500))}function gs(e,t){ls.call(this,e,t),this.type="DirectionalLight",this.position.copy(qt.DefaultUp),this.updateMatrix(),this.target=new qt,this.shadow=new vs}function ys(e,t){ls.call(this,e,t),this.type="AmbientLight",this.castShadow=void 0}function xs(e,t,n,r){ls.call(this,e,t),this.type="RectAreaLight",this.width=void 0!==n?n:10,this.height=void 0!==r?r:10}function bs(e){this.manager=void 0!==e?e:Io,this.textures={}}os.prototype=Object.assign(Object.create(Go.prototype),{constructor:os,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new es(t,e))},getPoint:function(e){for(var t=e*this.getLength(),n=this.getCurveLengths(),r=0;r<n.length;){if(n[r]>=t){var i=n[r]-t,a=this.curves[r],o=a.getLength(),s=0===o?0:1-i/o;return a.getPointAt(s)}r++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,n=0,r=this.curves.length;n<r;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){void 0===e&&(e=40);for(var t=[],n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,n=[],r=0,i=this.curves;r<i.length;r++)for(var a=i[r],o=a&&a.isEllipseCurve?2*e:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?e*a.points.length:e,s=a.getPoints(o),c=0;c<s.length;c++){var l=s[c];t&&t.equals(l)||(n.push(l),t=l)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(e){Go.prototype.copy.call(this,e),this.curves=[];for(var t=0,n=e.curves.length;t<n;t++){var r=e.curves[t];this.curves.push(r.clone())}return this.autoClose=e.autoClose,this},toJSON:function(){var e=Go.prototype.toJSON.call(this);e.autoClose=this.autoClose,e.curves=[];for(var t=0,n=this.curves.length;t<n;t++){var r=this.curves[t];e.curves.push(r.toJSON())}return e},fromJSON:function(e){Go.prototype.fromJSON.call(this,e),this.autoClose=e.autoClose,this.curves=[];for(var t=0,n=e.curves.length;t<n;t++){var r=e.curves[t];this.curves.push((new as[r.type]).fromJSON(r))}return this}}),ss.prototype=Object.assign(Object.create(os.prototype),{constructor:ss,setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y)},moveTo:function(e,t){this.currentPoint.set(e,t)},lineTo:function(e,t){var n=new es(this.currentPoint.clone(),new Rt(e,t));this.curves.push(n),this.currentPoint.set(e,t)},quadraticCurveTo:function(e,t,n,r){var i=new ns(this.currentPoint.clone(),new Rt(e,t),new Rt(n,r));this.curves.push(i),this.currentPoint.set(n,r)},bezierCurveTo:function(e,t,n,r,i,a){var o=new Qo(this.currentPoint.clone(),new Rt(e,t),new Rt(n,r),new Rt(i,a));this.curves.push(o),this.currentPoint.set(i,a)},splineThru:function(e){var t=new is([this.currentPoint.clone()].concat(e));this.curves.push(t),this.currentPoint.copy(e[e.length-1])},arc:function(e,t,n,r,i,a){var o=this.currentPoint.x,s=this.currentPoint.y;this.absarc(e+o,t+s,n,r,i,a)},absarc:function(e,t,n,r,i,a){this.absellipse(e,t,n,n,r,i,a)},ellipse:function(e,t,n,r,i,a,o,s){var c=this.currentPoint.x,l=this.currentPoint.y;this.absellipse(e+c,t+l,n,r,i,a,o,s)},absellipse:function(e,t,n,r,i,a,o,s){var c=new ko(e,t,n,r,i,a,o,s);if(this.curves.length>0){var l=c.getPoint(0);l.equals(this.currentPoint)||this.lineTo(l.x,l.y)}this.curves.push(c);var h=c.getPoint(1);this.currentPoint.copy(h)},copy:function(e){return os.prototype.copy.call(this,e),this.currentPoint.copy(e.currentPoint),this},toJSON:function(){var e=os.prototype.toJSON.call(this);return e.currentPoint=this.currentPoint.toArray(),e},fromJSON:function(e){return os.prototype.fromJSON.call(this,e),this.currentPoint.fromArray(e.currentPoint),this}}),cs.prototype=Object.assign(Object.create(ss.prototype),{constructor:cs,getPointsHoles:function(e){for(var t=[],n=0,r=this.holes.length;n<r;n++)t[n]=this.holes[n].getPoints(e);return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){ss.prototype.copy.call(this,e),this.holes=[];for(var t=0,n=e.holes.length;t<n;t++){var r=e.holes[t];this.holes.push(r.clone())}return this},toJSON:function(){var e=ss.prototype.toJSON.call(this);e.uuid=this.uuid,e.holes=[];for(var t=0,n=this.holes.length;t<n;t++){var r=this.holes[t];e.holes.push(r.toJSON())}return e},fromJSON:function(e){ss.prototype.fromJSON.call(this,e),this.uuid=e.uuid,this.holes=[];for(var t=0,n=e.holes.length;t<n;t++){var r=e.holes[t];this.holes.push((new ss).fromJSON(r))}return this}}),ls.prototype=Object.assign(Object.create(qt.prototype),{constructor:ls,isLight:!0,copy:function(e){return qt.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=qt.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),hs.prototype=Object.assign(Object.create(ls.prototype),{constructor:hs,isHemisphereLight:!0,copy:function(e){return ls.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),Object.assign(us.prototype,{copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e={};return 0!==this.bias&&(e.bias=this.bias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}),ps.prototype=Object.assign(Object.create(us.prototype),{constructor:ps,isSpotLightShadow:!0,update:function(e){var t=this.camera,n=2*Pt.RAD2DEG*e.angle,r=this.mapSize.width/this.mapSize.height,i=e.distance||t.far;n===t.fov&&r===t.aspect&&i===t.far||(t.fov=n,t.aspect=r,t.far=i,t.updateProjectionMatrix())}}),ds.prototype=Object.assign(Object.create(ls.prototype),{constructor:ds,isSpotLight:!0,copy:function(e){return ls.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),fs.prototype=Object.assign(Object.create(ls.prototype),{constructor:fs,isPointLight:!0,copy:function(e){return ls.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),ms.prototype=Object.assign(Object.create(Dn.prototype),{constructor:ms,isOrthographicCamera:!0,copy:function(e,t){return Dn.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,n,r,i,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2,i=n-e,a=n+e,o=r+t,s=r-t;if(null!==this.view&&this.view.enabled){var c=this.zoom/(this.view.width/this.view.fullWidth),l=this.zoom/(this.view.height/this.view.fullHeight),h=(this.right-this.left)/this.view.width,u=(this.top-this.bottom)/this.view.height;a=(i+=h*(this.view.offsetX/c))+h*(this.view.width/c),s=(o-=u*(this.view.offsetY/l))-u*(this.view.height/l)}this.projectionMatrix.makeOrthographic(i,a,o,s,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=qt.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),vs.prototype=Object.assign(Object.create(us.prototype),{constructor:vs}),gs.prototype=Object.assign(Object.create(ls.prototype),{constructor:gs,isDirectionalLight:!0,copy:function(e){return ls.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),ys.prototype=Object.assign(Object.create(ls.prototype),{constructor:ys,isAmbientLight:!0}),xs.prototype=Object.assign(Object.create(ls.prototype),{constructor:xs,isRectAreaLight:!0,copy:function(e){return ls.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){var t=ls.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}}),Object.assign(bs.prototype,{load:function(e,t,n,r){var i=this,a=new No(i.manager);a.setPath(i.path),a.load(e,function(e){t(i.parse(JSON.parse(e)))},n,r)},parse:function(e){var t=this.textures;function n(e){return void 0===t[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),t[e]}var r=new mo[e.type];if(void 0!==e.uuid&&(r.uuid=e.uuid),void 0!==e.name&&(r.name=e.name),void 0!==e.color&&r.color.setHex(e.color),void 0!==e.roughness&&(r.roughness=e.roughness),void 0!==e.metalness&&(r.metalness=e.metalness),void 0!==e.emissive&&r.emissive.setHex(e.emissive),void 0!==e.specular&&r.specular.setHex(e.specular),void 0!==e.shininess&&(r.shininess=e.shininess),void 0!==e.clearCoat&&(r.clearCoat=e.clearCoat),void 0!==e.clearCoatRoughness&&(r.clearCoatRoughness=e.clearCoatRoughness),void 0!==e.vertexColors&&(r.vertexColors=e.vertexColors),void 0!==e.fog&&(r.fog=e.fog),void 0!==e.flatShading&&(r.flatShading=e.flatShading),void 0!==e.blending&&(r.blending=e.blending),void 0!==e.combine&&(r.combine=e.combine),void 0!==e.side&&(r.side=e.side),void 0!==e.opacity&&(r.opacity=e.opacity),void 0!==e.transparent&&(r.transparent=e.transparent),void 0!==e.alphaTest&&(r.alphaTest=e.alphaTest),void 0!==e.depthTest&&(r.depthTest=e.depthTest),void 0!==e.depthWrite&&(r.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(r.colorWrite=e.colorWrite),void 0!==e.wireframe&&(r.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(r.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(r.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(r.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(r.rotation=e.rotation),1!==e.linewidth&&(r.linewidth=e.linewidth),void 0!==e.dashSize&&(r.dashSize=e.dashSize),void 0!==e.gapSize&&(r.gapSize=e.gapSize),void 0!==e.scale&&(r.scale=e.scale),void 0!==e.polygonOffset&&(r.polygonOffset=e.polygonOffset),void 0!==e.polygonOffsetFactor&&(r.polygonOffsetFactor=e.polygonOffsetFactor),void 0!==e.polygonOffsetUnits&&(r.polygonOffsetUnits=e.polygonOffsetUnits),void 0!==e.skinning&&(r.skinning=e.skinning),void 0!==e.morphTargets&&(r.morphTargets=e.morphTargets),void 0!==e.morphNormals&&(r.morphNormals=e.morphNormals),void 0!==e.dithering&&(r.dithering=e.dithering),void 0!==e.visible&&(r.visible=e.visible),void 0!==e.userData&&(r.userData=e.userData),void 0!==e.uniforms)for(var i in e.uniforms){var a=e.uniforms[i];switch(r.uniforms[i]={},a.type){case"t":r.uniforms[i].value=n(a.value);break;case"c":r.uniforms[i].value=(new en).setHex(a.value);break;case"v2":r.uniforms[i].value=(new Rt).fromArray(a.value);break;case"v3":r.uniforms[i].value=(new Ot).fromArray(a.value);break;case"v4":r.uniforms[i].value=(new Ft).fromArray(a.value);break;case"m3":r.uniforms[i].value=(new It).fromArray(a.value);case"m4":r.uniforms[i].value=(new Ht).fromArray(a.value);break;default:r.uniforms[i].value=a.value}}if(void 0!==e.defines&&(r.defines=e.defines),void 0!==e.vertexShader&&(r.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(r.fragmentShader=e.fragmentShader),void 0!==e.extensions)for(var o in e.extensions)r.extensions[o]=e.extensions[o];if(void 0!==e.shading&&(r.flatShading=1===e.shading),void 0!==e.size&&(r.size=e.size),void 0!==e.sizeAttenuation&&(r.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(r.map=n(e.map)),void 0!==e.matcap&&(r.matcap=n(e.matcap)),void 0!==e.alphaMap&&(r.alphaMap=n(e.alphaMap),r.transparent=!0),void 0!==e.bumpMap&&(r.bumpMap=n(e.bumpMap)),void 0!==e.bumpScale&&(r.bumpScale=e.bumpScale),void 0!==e.normalMap&&(r.normalMap=n(e.normalMap)),void 0!==e.normalMapType&&(r.normalMapType=e.normalMapType),void 0!==e.normalScale){var s=e.normalScale;!1===Array.isArray(s)&&(s=[s,s]),r.normalScale=(new Rt).fromArray(s)}return void 0!==e.displacementMap&&(r.displacementMap=n(e.displacementMap)),void 0!==e.displacementScale&&(r.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(r.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(r.roughnessMap=n(e.roughnessMap)),void 0!==e.metalnessMap&&(r.metalnessMap=n(e.metalnessMap)),void 0!==e.emissiveMap&&(r.emissiveMap=n(e.emissiveMap)),void 0!==e.emissiveIntensity&&(r.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(r.specularMap=n(e.specularMap)),void 0!==e.envMap&&(r.envMap=n(e.envMap)),void 0!==e.envMapIntensity&&(r.envMapIntensity=e.envMapIntensity),void 0!==e.reflectivity&&(r.reflectivity=e.reflectivity),void 0!==e.refractionRatio&&(r.refractionRatio=e.refractionRatio),void 0!==e.lightMap&&(r.lightMap=n(e.lightMap)),void 0!==e.lightMapIntensity&&(r.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(r.aoMap=n(e.aoMap)),void 0!==e.aoMapIntensity&&(r.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(r.gradientMap=n(e.gradientMap)),r},setPath:function(e){return this.path=e,this},setTextures:function(e){return this.textures=e,this}});var ws={decodeText:function(e){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(e);for(var t="",n=0,r=e.length;n<r;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch(e){return t}},extractUrlBase:function(e){var t=e.lastIndexOf("/");return-1===t?"./":e.substr(0,t+1)}};function _s(){_n.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function Ms(e,t,n,r){"number"==typeof n&&(r=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),ln.call(this,e,t,n),this.meshPerAttribute=r||1}function Ts(e){this.manager=void 0!==e?e:Io}_s.prototype=Object.assign(Object.create(_n.prototype),{constructor:_s,isInstancedBufferGeometry:!0,copy:function(e){return _n.prototype.copy.call(this,e),this.maxInstancedCount=e.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e=_n.prototype.toJSON.call(this);return e.maxInstancedCount=this.maxInstancedCount,e.isInstancedBufferGeometry=!0,e}}),Ms.prototype=Object.assign(Object.create(ln.prototype),{constructor:Ms,isInstancedBufferAttribute:!0,copy:function(e){return ln.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},toJSON:function(){var e=ln.prototype.toJSON.call(this);return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}),Object.assign(Ts.prototype,{load:function(e,t,n,r){var i=this,a=new No(i.manager);a.setPath(i.path),a.load(e,function(e){t(i.parse(JSON.parse(e)))},n,r)},parse:function(e){var t=e.isInstancedBufferGeometry?new _s:new _n,n=e.data.index;if(void 0!==n){var r=new Ss[n.type](n.array);t.setIndex(new ln(r,1))}var i=e.data.attributes;for(var a in i){var o=i[a],s=(r=new Ss[o.type](o.array),new(o.isInstancedBufferAttribute?Ms:ln)(r,o.itemSize,o.normalized));void 0!==o.name&&(s.name=o.name),t.addAttribute(a,s)}var c=e.data.morphAttributes;if(c)for(var a in c){for(var l=c[a],h=[],u=0,p=l.length;u<p;u++){o=l[u],s=new ln(r=new Ss[o.type](o.array),o.itemSize,o.normalized);void 0!==o.name&&(s.name=o.name),h.push(s)}t.morphAttributes[a]=h}var d=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==d){u=0;for(var f=d.length;u!==f;++u){var m=d[u];t.addGroup(m.start,m.count,m.materialIndex)}}var v=e.data.boundingSphere;if(void 0!==v){var g=new Ot;void 0!==v.center&&g.fromArray(v.center),t.boundingSphere=new Jt(g,v.radius)}return e.name&&(t.name=e.name),e.userData&&(t.userData=e.userData),t},setPath:function(e){return this.path=e,this}});var Ss={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Es(e){this.manager=void 0!==e?e:Io,this.resourcePath=""}Object.assign(Es.prototype,{crossOrigin:"anonymous",load:function(e,t,n,r){var i=this,a=void 0===this.path?ws.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;var o=new No(i.manager);o.setPath(this.path),o.load(e,function(n){var a=null;try{a=JSON.parse(n)}catch(t){return void 0!==r&&r(t),void console.error("THREE:ObjectLoader: Can't parse "+e+".",t.message)}var o=a.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?i.parse(a,t):console.error("THREE.ObjectLoader: Can't load "+e)},n,r)},setPath:function(e){return this.path=e,this},setResourcePath:function(e){return this.resourcePath=e,this},setCrossOrigin:function(e){return this.crossOrigin=e,this},parse:function(e,t){var n=this.parseShape(e.shapes),r=this.parseGeometries(e.geometries,n),i=this.parseImages(e.images,function(){void 0!==t&&t(s)}),a=this.parseTextures(e.textures,i),o=this.parseMaterials(e.materials,a),s=this.parseObject(e.object,r,o);return e.animations&&(s.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(s),s},parseShape:function(e){var t={};if(void 0!==e)for(var n=0,r=e.length;n<r;n++){var i=(new cs).fromJSON(e[n]);t[i.uuid]=i}return t},parseGeometries:function(e,t){var n={};if(void 0!==e)for(var r=new Ts,i=0,a=e.length;i<a;i++){var o,s=e[i];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new ro[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new ro[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new ro[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new ro[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new ro[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new ro[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":o=new ro[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new ro[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new ro[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new ro[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"TubeGeometry":case"TubeBufferGeometry":o=new ro[s.type]((new as[s.path.type]).fromJSON(s.path),s.tubularSegments,s.radius,s.radialSegments,s.closed);break;case"LatheGeometry":case"LatheBufferGeometry":o=new ro[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":o=new ro[s.type](s.vertices,s.indices,s.radius,s.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var c=[],l=0,h=s.shapes.length;l<h;l++){var u=t[s.shapes[l]];c.push(u)}o=new ro[s.type](c,s.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(c=[],l=0,h=s.shapes.length;l<h;l++){u=t[s.shapes[l]];c.push(u)}var p=s.options.extrudePath;void 0!==p&&(s.options.extrudePath=(new as[p.type]).fromJSON(p)),o=new ro[s.type](c,s.options);break;case"BufferGeometry":case"InstancedBufferGeometry":o=r.parse(s);break;case"Geometry":if("THREE"in window&&"LegacyJSONLoader"in THREE)o=(new THREE.LegacyJSONLoader).parse(s,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),!0===o.isBufferGeometry&&void 0!==s.userData&&(o.userData=s.userData),n[s.uuid]=o}return n},parseMaterials:function(e,t){var n={},r={};if(void 0!==e){var i=new bs;i.setTextures(t);for(var a=0,o=e.length;a<o;a++){var s=e[a];if("MultiMaterial"===s.type){for(var c=[],l=0;l<s.materials.length;l++){var h=s.materials[l];void 0===n[h.uuid]&&(n[h.uuid]=i.parse(h)),c.push(n[h.uuid])}r[s.uuid]=c}else void 0===n[s.uuid]&&(n[s.uuid]=i.parse(s)),r[s.uuid]=n[s.uuid]}}return r},parseAnimations:function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n],i=Po.parse(r);void 0!==r.uuid&&(i.uuid=r.uuid),t.push(i)}return t},parseImages:function(e,t){var n=this,r={};function i(e){return n.manager.itemStart(e),a.load(e,function(){n.manager.itemEnd(e)},void 0,function(){n.manager.itemError(e),n.manager.itemEnd(e)})}if(void 0!==e&&e.length>0){var a=new Uo(new Oo(t));a.setCrossOrigin(this.crossOrigin);for(var o=0,s=e.length;o<s;o++){var c=e[o],l=c.url;if(Array.isArray(l)){r[c.uuid]=[];for(var h=0,u=l.length;h<u;h++){var p=l[h],d=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(p)?p:n.resourcePath+p;r[c.uuid].push(i(d))}}else{d=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)?c.url:n.resourcePath+c.url;r[c.uuid]=i(d)}}}return r},parseTextures:function(e,t){function n(e,t){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),t[e])}var r={};if(void 0!==e)for(var i=0,a=e.length;i<a;i++){var o,s=e[i];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===t[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image),(o=Array.isArray(t[s.image])?new Kn(t[s.image]):new Bt(t[s.image])).needsUpdate=!0,o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),void 0!==s.mapping&&(o.mapping=n(s.mapping,Ls)),void 0!==s.offset&&o.offset.fromArray(s.offset),void 0!==s.repeat&&o.repeat.fromArray(s.repeat),void 0!==s.center&&o.center.fromArray(s.center),void 0!==s.rotation&&(o.rotation=s.rotation),void 0!==s.wrap&&(o.wrapS=n(s.wrap[0],Ps),o.wrapT=n(s.wrap[1],Ps)),void 0!==s.format&&(o.format=s.format),void 0!==s.type&&(o.type=s.type),void 0!==s.encoding&&(o.encoding=s.encoding),void 0!==s.minFilter&&(o.minFilter=n(s.minFilter,Rs)),void 0!==s.magFilter&&(o.magFilter=n(s.magFilter,Rs)),void 0!==s.anisotropy&&(o.anisotropy=s.anisotropy),void 0!==s.flipY&&(o.flipY=s.flipY),void 0!==s.premultiplyAlpha&&(o.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(o.unpackAlignment=s.unpackAlignment),r[s.uuid]=o}return r},parseObject:function(e,t,n){var r;function i(e){return void 0===t[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}function a(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],r=0,i=e.length;r<i;r++){var a=e[r];void 0===n[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),t.push(n[a])}return t}return void 0===n[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),n[e]}}switch(e.type){case"Scene":r=new Yt,void 0!==e.background&&Number.isInteger(e.background)&&(r.background=new en(e.background)),void 0!==e.fog&&("Fog"===e.fog.type?r.fog=new Ei(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(r.fog=new Si(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":r=new Nn(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(r.focus=e.focus),void 0!==e.zoom&&(r.zoom=e.zoom),void 0!==e.filmGauge&&(r.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(r.filmOffset=e.filmOffset),void 0!==e.view&&(r.view=Object.assign({},e.view));break;case"OrthographicCamera":r=new ms(e.left,e.right,e.top,e.bottom,e.near,e.far),void 0!==e.zoom&&(r.zoom=e.zoom),void 0!==e.view&&(r.view=Object.assign({},e.view));break;case"AmbientLight":r=new ys(e.color,e.intensity);break;case"DirectionalLight":r=new gs(e.color,e.intensity);break;case"PointLight":r=new fs(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":r=new xs(e.color,e.intensity,e.width,e.height);break;case"SpotLight":r=new ds(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":r=new hs(e.color,e.groundColor,e.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var o=i(e.geometry),s=a(e.material);r=o.bones&&o.bones.length>0?new Oi(o,s):new Mn(o,s),void 0!==e.drawMode&&r.setDrawMode(e.drawMode);break;case"LOD":r=new Ci;break;case"Line":r=new zi(i(e.geometry),a(e.material),e.mode);break;case"LineLoop":r=new Bi(i(e.geometry),a(e.material));break;case"LineSegments":r=new Ui(i(e.geometry),a(e.material));break;case"PointCloud":case"Points":r=new Gi(i(e.geometry),a(e.material));break;case"Sprite":r=new Ri(a(e.material));break;case"Group":r=new vi;break;default:r=new qt}if(r.uuid=e.uuid,void 0!==e.name&&(r.name=e.name),void 0!==e.matrix?(r.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(r.matrixAutoUpdate=e.matrixAutoUpdate),r.matrixAutoUpdate&&r.matrix.decompose(r.position,r.quaternion,r.scale)):(void 0!==e.position&&r.position.fromArray(e.position),void 0!==e.rotation&&r.rotation.fromArray(e.rotation),void 0!==e.quaternion&&r.quaternion.fromArray(e.quaternion),void 0!==e.scale&&r.scale.fromArray(e.scale)),void 0!==e.castShadow&&(r.castShadow=e.castShadow),void 0!==e.receiveShadow&&(r.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(r.shadow.bias=e.shadow.bias),void 0!==e.shadow.radius&&(r.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&r.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(r.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(r.visible=e.visible),void 0!==e.frustumCulled&&(r.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(r.renderOrder=e.renderOrder),void 0!==e.userData&&(r.userData=e.userData),void 0!==e.layers&&(r.layers.mask=e.layers),void 0!==e.children)for(var c=e.children,l=0;l<c.length;l++)r.add(this.parseObject(c[l],t,n));if("LOD"===e.type)for(var h=e.levels,u=0;u<h.length;u++){var p=h[u],d=r.getObjectByProperty("uuid",p.object);void 0!==d&&r.addLevel(d,p.distance)}return r}});var As,Ls={UVMapping:300,CubeReflectionMapping:ae,CubeRefractionMapping:oe,EquirectangularReflectionMapping:se,EquirectangularRefractionMapping:ce,SphericalReflectionMapping:le,CubeUVReflectionMapping:he,CubeUVRefractionMapping:ue},Ps={RepeatWrapping:pe,ClampToEdgeWrapping:de,MirroredRepeatWrapping:fe},Rs={NearestFilter:me,NearestMipmapNearestFilter:ve,NearestMipmapLinearFilter:ge,LinearFilter:ye,LinearMipmapNearestFilter:xe,LinearMipmapLinearFilter:be};function Cs(e){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.manager=void 0!==e?e:Io,this.options=void 0}function Os(){this.type="ShapePath",this.color=new en,this.subPaths=[],this.currentPath=null}function Is(e){this.type="Font",this.data=e}function Ds(e,t,n,r,i){var a=i.glyphs[e]||i.glyphs["?"];if(a){var o,s,c,l,h,u,p,d,f=new Os;if(a.o)for(var m=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),v=0,g=m.length;v<g;){switch(m[v++]){case"m":o=m[v++]*t+n,s=m[v++]*t+r,f.moveTo(o,s);break;case"l":o=m[v++]*t+n,s=m[v++]*t+r,f.lineTo(o,s);break;case"q":c=m[v++]*t+n,l=m[v++]*t+r,h=m[v++]*t+n,u=m[v++]*t+r,f.quadraticCurveTo(h,u,c,l);break;case"b":c=m[v++]*t+n,l=m[v++]*t+r,h=m[v++]*t+n,u=m[v++]*t+r,p=m[v++]*t+n,d=m[v++]*t+r,f.bezierCurveTo(h,u,p,d,c,l)}}return{offsetX:a.ha*t,path:f}}console.error('THREE.Font: character "'+e+'" does not exists in font family '+i.familyName+".")}function Ns(){}Cs.prototype={constructor:Cs,setOptions:function(e){return this.options=e,this},load:function(e,t,n,r){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Co.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout(function(){t&&t(a),i.manager.itemEnd(e)},0),a;fetch(e).then(function(e){return e.blob()}).then(function(e){return void 0===i.options?createImageBitmap(e):createImageBitmap(e,i.options)}).then(function(n){Co.add(e,n),t&&t(n),i.manager.itemEnd(e)}).catch(function(t){r&&r(t),i.manager.itemError(e),i.manager.itemEnd(e)}),i.manager.itemStart(e)},setCrossOrigin:function(){return this},setPath:function(e){return this.path=e,this}},Object.assign(Os.prototype,{moveTo:function(e,t){this.currentPath=new ss,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t)},lineTo:function(e,t){this.currentPath.lineTo(e,t)},quadraticCurveTo:function(e,t,n,r){this.currentPath.quadraticCurveTo(e,t,n,r)},bezierCurveTo:function(e,t,n,r,i,a){this.currentPath.bezierCurveTo(e,t,n,r,i,a)},splineThru:function(e){this.currentPath.splineThru(e)},toShapes:function(e,t){function n(e){for(var t=[],n=0,r=e.length;n<r;n++){var i=e[n],a=new cs;a.curves=i.curves,t.push(a)}return t}function r(e,t){for(var n=t.length,r=!1,i=n-1,a=0;a<n;i=a++){var o=t[i],s=t[a],c=s.x-o.x,l=s.y-o.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(o=t[a],c=-c,s=t[i],l=-l),e.y<o.y||e.y>s.y)continue;if(e.y===o.y){if(e.x===o.x)return!0}else{var h=l*(e.x-o.x)-c*(e.y-o.y);if(0===h)return!0;if(h<0)continue;r=!r}}else{if(e.y!==o.y)continue;if(s.x<=e.x&&e.x<=o.x||o.x<=e.x&&e.x<=s.x)return!0}}return r}var i=Oa.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===t)return n(a);var o,s,c,l=[];if(1===a.length)return s=a[0],(c=new cs).curves=s.curves,l.push(c),l;var h=!i(a[0].getPoints());h=e?!h:h;var u,p,d=[],f=[],m=[],v=0;f[v]=void 0,m[v]=[];for(var g=0,y=a.length;g<y;g++)o=i(u=(s=a[g]).getPoints()),(o=e?!o:o)?(!h&&f[v]&&v++,f[v]={s:new cs,p:u},f[v].s.curves=s.curves,h&&v++,m[v]=[]):m[v].push({h:s,p:u[0]});if(!f[0])return n(a);if(f.length>1){for(var x=!1,b=[],w=0,_=f.length;w<_;w++)d[w]=[];for(w=0,_=f.length;w<_;w++)for(var M=m[w],T=0;T<M.length;T++){for(var S=M[T],E=!0,A=0;A<f.length;A++)r(S.p,f[A].p)&&(w!==A&&b.push({froms:w,tos:A,hole:T}),E?(E=!1,d[A].push(S)):x=!0);E&&d[w].push(S)}b.length>0&&(x||(m=d))}g=0;for(var L=f.length;g<L;g++){c=f[g].s,l.push(c);for(var P=0,R=(p=m[g]).length;P<R;P++)c.holes.push(p[P].h)}return l}}),Object.assign(Is.prototype,{isFont:!0,generateShapes:function(e,t){void 0===t&&(t=100);for(var n=[],r=function(e,t,n){for(var r=Array.from?Array.from(e):String(e).split(""),i=t/n.resolution,a=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*i,o=[],s=0,c=0,l=0;l<r.length;l++){var h=r[l];if("\n"===h)s=0,c-=a;else{var u=Ds(h,i,s,c,n);s+=u.offsetX,o.push(u.path)}}return o}(e,t,this.data),i=0,a=r.length;i<a;i++)Array.prototype.push.apply(n,r[i].toShapes());return n}}),Object.assign(function(e){this.manager=void 0!==e?e:Io}.prototype,{load:function(e,t,n,r){var i=this,a=new No(this.manager);a.setPath(this.path),a.load(e,function(e){var n;try{n=JSON.parse(e)}catch(t){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(e.substring(65,e.length-2))}var r=i.parse(n);t&&t(r)},n,r)},parse:function(e){return new Is(e)},setPath:function(e){return this.path=e,this}}),Ns.Handlers={handlers:[],add:function(e,t){this.handlers.push(e,t)},get:function(e){for(var t=this.handlers,n=0,r=t.length;n<r;n+=2){var i=t[n],a=t[n+1];if(i.test(e))return a}return null}},Object.assign(Ns.prototype,{crossOrigin:"anonymous",onLoadStart:function(){},onLoadProgress:function(){},onLoadComplete:function(){},initMaterials:function(e,t,n){for(var r=[],i=0;i<e.length;++i)r[i]=this.createMaterial(e[i],t,n);return r},createMaterial:function(){var e={NoBlending:b,NormalBlending:w,AdditiveBlending:_,SubtractiveBlending:M,MultiplyBlending:T,CustomBlending:S},t=new en,n=new Fo,r=new bs;return function(i,a,o){var s={};function c(e,t,r,i,c){var l,h=a+e,u=Ns.Handlers.get(h);null!==u?l=u.load(h):(n.setCrossOrigin(o),l=n.load(h)),void 0!==t&&(l.repeat.fromArray(t),1!==t[0]&&(l.wrapS=pe),1!==t[1]&&(l.wrapT=pe)),void 0!==r&&l.offset.fromArray(r),void 0!==i&&("repeat"===i[0]&&(l.wrapS=pe),"mirror"===i[0]&&(l.wrapS=fe),"repeat"===i[1]&&(l.wrapT=pe),"mirror"===i[1]&&(l.wrapT=fe)),void 0!==c&&(l.anisotropy=c);var p=Pt.generateUUID();return s[p]=l,p}var l={uuid:Pt.generateUUID(),type:"MeshLambertMaterial"};for(var h in i){var u=i[h];switch(h){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":l.name=u;break;case"blending":l.blending=e[u];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",h,"is no longer supported.");break;case"colorDiffuse":l.color=t.fromArray(u).getHex();break;case"colorSpecular":l.specular=t.fromArray(u).getHex();break;case"colorEmissive":l.emissive=t.fromArray(u).getHex();break;case"specularCoef":l.shininess=u;break;case"shading":"basic"===u.toLowerCase()&&(l.type="MeshBasicMaterial"),"phong"===u.toLowerCase()&&(l.type="MeshPhongMaterial"),"standard"===u.toLowerCase()&&(l.type="MeshStandardMaterial");break;case"mapDiffuse":l.map=c(u,i.mapDiffuseRepeat,i.mapDiffuseOffset,i.mapDiffuseWrap,i.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":l.emissiveMap=c(u,i.mapEmissiveRepeat,i.mapEmissiveOffset,i.mapEmissiveWrap,i.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":l.lightMap=c(u,i.mapLightRepeat,i.mapLightOffset,i.mapLightWrap,i.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":l.aoMap=c(u,i.mapAORepeat,i.mapAOOffset,i.mapAOWrap,i.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":l.bumpMap=c(u,i.mapBumpRepeat,i.mapBumpOffset,i.mapBumpWrap,i.mapBumpAnisotropy);break;case"mapBumpScale":l.bumpScale=u;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":l.normalMap=c(u,i.mapNormalRepeat,i.mapNormalOffset,i.mapNormalWrap,i.mapNormalAnisotropy);break;case"mapNormalFactor":l.normalScale=u;break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":l.specularMap=c(u,i.mapSpecularRepeat,i.mapSpecularOffset,i.mapSpecularWrap,i.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":l.metalnessMap=c(u,i.mapMetalnessRepeat,i.mapMetalnessOffset,i.mapMetalnessWrap,i.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":l.roughnessMap=c(u,i.mapRoughnessRepeat,i.mapRoughnessOffset,i.mapRoughnessWrap,i.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":l.alphaMap=c(u,i.mapAlphaRepeat,i.mapAlphaOffset,i.mapAlphaWrap,i.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":l.side=m;break;case"doubleSided":l.side=v;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),l.opacity=u;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":l[h]=u;break;case"vertexColors":!0===u&&(l.vertexColors=x),"face"===u&&(l.vertexColors=y);break;default:console.error("THREE.Loader.createMaterial: Unsupported",h,u)}}return"MeshBasicMaterial"===l.type&&delete l.emissive,"MeshPhongMaterial"!==l.type&&delete l.specular,l.opacity<1&&(l.transparent=!0),r.setTextures(s),r.parse(l)}}()});var zs={getContext:function(){return void 0===As&&(As=new(window.AudioContext||window.webkitAudioContext)),As},setContext:function(e){As=e}};function Us(e){this.manager=void 0!==e?e:Io}function Bs(){this.coefficients=[];for(var e=0;e<9;e++)this.coefficients.push(new Ot)}function Fs(e,t){ls.call(this,void 0,t),this.sh=void 0!==e?e:new Bs}function Gs(e,t,n){Fs.call(this,void 0,n);var r=(new en).set(e),i=(new en).set(t),a=new Ot(r.r,r.g,r.b),o=new Ot(i.r,i.g,i.b),s=Math.sqrt(Math.PI),c=s*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(o).multiplyScalar(s),this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(c)}function ks(e,t){Fs.call(this,void 0,t);var n=(new en).set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}function Hs(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function js(){qt.call(this),this.type="AudioListener",this.context=zs.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0}function Vs(e){qt.call(this),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}function Ws(e){Vs.call(this,e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}function Xs(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}function qs(e,t,n){this.binding=e,this.valueSize=n;var r,i=Float64Array;switch(t){case"quaternion":r=this._slerp;break;case"string":case"bool":i=Array,r=this._select;break;default:r=this._lerp}this.buffer=new i(4*n),this._mixBufferRegion=r,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Object.assign(Us.prototype,{load:function(e,t,n,r){var i=new No(this.manager);i.setResponseType("arraybuffer"),i.setPath(this.path),i.load(e,function(e){var n=e.slice(0);zs.getContext().decodeAudioData(n,function(e){t(e)})},n,r)},setPath:function(e){return this.path=e,this}}),Object.assign(Bs.prototype,{isSphericalHarmonics3:!0,set:function(e){for(var t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this},zero:function(){for(var e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this},getAt:function(e,t){var n=e.x,r=e.y,i=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.282095),t.addScale(a[1],.488603*r),t.addScale(a[2],.488603*i),t.addScale(a[3],.488603*n),t.addScale(a[4],n*r*1.092548),t.addScale(a[5],r*i*1.092548),t.addScale(a[6],.315392*(3*i*i-1)),t.addScale(a[7],n*i*1.092548),t.addScale(a[8],.546274*(n*n-r*r)),t},getIrradianceAt:function(e,t){var n=e.x,r=e.y,i=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.886227),t.addScale(a[1],1.023328*r),t.addScale(a[2],1.023328*i),t.addScale(a[3],1.023328*n),t.addScale(a[4],.858086*n*r),t.addScale(a[5],.858086*r*i),t.addScale(a[6],.743125*i*i-.247708),t.addScale(a[7],.858086*n*i),t.addScale(a[8],.429043*(n*n-r*r)),t},add:function(e){for(var t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this},scale:function(e){for(var t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this},lerp:function(e,t){for(var n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this},equals:function(e){for(var t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0},copy:function(e){return this.set(e.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(e){for(var t=this.coefficients,n=0;n<9;n++)t[n].fromArray(e,3*n);return this},toArray:function(){for(var e=[],t=this.coefficients,n=0;n<9;n++)t[n].toArray(e,3*n);return e}}),Object.assign(Bs,{getBasisAt:function(e,t){var n=e.x,r=e.y,i=e.z;t[0]=.282095,t[1]=.488603*r,t[2]=.488603*i,t[3]=.488603*n,t[4]=1.092548*n*r,t[5]=1.092548*r*i,t[6]=.315392*(3*i*i-1),t[7]=1.092548*n*i,t[8]=.546274*(n*n-r*r)}}),Fs.prototype=Object.assign(Object.create(ls.prototype),{constructor:Fs,isLightProbe:!0,copy:function(e){return ls.prototype.copy.call(this,e),this.sh.copy(e.sh),this.intensity=e.intensity,this},toJSON:function(e){return ls.prototype.toJSON.call(this,e)}}),Gs.prototype=Object.assign(Object.create(Fs.prototype),{constructor:Gs,isHemisphereLightProbe:!0,copy:function(e){return Fs.prototype.copy.call(this,e),this},toJSON:function(e){return Fs.prototype.toJSON.call(this,e)}}),ks.prototype=Object.assign(Object.create(Fs.prototype),{constructor:ks,isAmbientLightProbe:!0,copy:function(e){return Fs.prototype.copy.call(this,e),this},toJSON:function(e){return Fs.prototype.toJSON.call(this,e)}}),Object.assign(function(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Nn,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Nn,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}.prototype,{update:function(){var e,t,n,r,i,a,o,s,c=new Ht,l=new Ht;return function(h){if(e!==this||t!==h.focus||n!==h.fov||r!==h.aspect*this.aspect||i!==h.near||a!==h.far||o!==h.zoom||s!==this.eyeSep){e=this,t=h.focus,n=h.fov,r=h.aspect*this.aspect,i=h.near,a=h.far,o=h.zoom;var u,p,d=h.projectionMatrix.clone(),f=(s=this.eyeSep/2)*i/t,m=i*Math.tan(Pt.DEG2RAD*n*.5)/o;l.elements[12]=-s,c.elements[12]=s,u=-m*r+f,p=m*r+f,d.elements[0]=2*i/(p-u),d.elements[8]=(p+u)/(p-u),this.cameraL.projectionMatrix.copy(d),u=-m*r-f,p=m*r-f,d.elements[0]=2*i/(p-u),d.elements[8]=(p+u)/(p-u),this.cameraR.projectionMatrix.copy(d)}this.cameraL.matrixWorld.copy(h.matrixWorld).multiply(l),this.cameraR.matrixWorld.copy(h.matrixWorld).multiply(c)}}()}),Object.assign(Hs.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=("undefined"==typeof performance?Date:performance).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}),js.prototype=Object.assign(Object.create(qt.prototype),{constructor:js,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(e){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this},updateMatrixWorld:function(){var e=new Ot,t=new Ct,n=new Ot,r=new Ot,i=new Hs;return function(a){qt.prototype.updateMatrixWorld.call(this,a);var o=this.context.listener,s=this.up;if(this.timeDelta=i.getDelta(),this.matrixWorld.decompose(e,t,n),r.set(0,0,-1).applyQuaternion(t),o.positionX){var c=this.context.currentTime+this.timeDelta;o.positionX.linearRampToValueAtTime(e.x,c),o.positionY.linearRampToValueAtTime(e.y,c),o.positionZ.linearRampToValueAtTime(e.z,c),o.forwardX.linearRampToValueAtTime(r.x,c),o.forwardY.linearRampToValueAtTime(r.y,c),o.forwardZ.linearRampToValueAtTime(r.z,c),o.upX.linearRampToValueAtTime(s.x,c),o.upY.linearRampToValueAtTime(s.y,c),o.upZ.linearRampToValueAtTime(s.z,c)}else o.setPosition(e.x,e.y,e.z),o.setOrientation(r.x,r.y,r.z,s.x,s.y,s.z)}}()}),Vs.prototype=Object.assign(Object.create(qt.prototype),{constructor:Vs,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setMediaElementSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this},setBuffer:function(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.onended=this.onEnded.bind(this),this.startTime=this.context.currentTime,e.start(this.startTime,this.offset),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.source.onended=null,this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.source.onended=null,this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),!0===this.isPlaying?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},setDetune:function(e){if(this.detune=e,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){if(!1!==this.hasPlaybackControl)return this.playbackRate=e,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(e){if(!1!==this.hasPlaybackControl)return this.loop=e,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}),Ws.prototype=Object.assign(Object.create(Vs.prototype),{constructor:Ws,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){return this.panner.refDistance=e,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){return this.panner.rolloffFactor=e,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){return this.panner.distanceModel=e,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){return this.panner.maxDistance=e,this},setDirectionalCone:function(e,t,n){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=n,this},updateMatrixWorld:function(){var e=new Ot,t=new Ct,n=new Ot,r=new Ot;return function(i){if(qt.prototype.updateMatrixWorld.call(this,i),!0!==this.hasPlaybackControl||!1!==this.isPlaying){this.matrixWorld.decompose(e,t,n),r.set(0,0,1).applyQuaternion(t);var a=this.panner;if(a.positionX){var o=this.context.currentTime+this.listener.timeDelta;a.positionX.linearRampToValueAtTime(e.x,o),a.positionY.linearRampToValueAtTime(e.y,o),a.positionZ.linearRampToValueAtTime(e.z,o),a.orientationX.linearRampToValueAtTime(r.x,o),a.orientationY.linearRampToValueAtTime(r.y,o),a.orientationZ.linearRampToValueAtTime(r.z,o)}else a.setPosition(e.x,e.y,e.z),a.setOrientation(r.x,r.y,r.z)}}}()}),Object.assign(Xs.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),n=0;n<t.length;n++)e+=t[n];return e/t.length}}),Object.assign(qs.prototype,{accumulate:function(e,t){var n=this.buffer,r=this.valueSize,i=e*r+r,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==r;++o)n[i+o]=n[o];a=t}else{var s=t/(a+=t);this._mixBufferRegion(n,i,0,s,r)}this.cumulativeWeight=a},apply:function(e){var t=this.valueSize,n=this.buffer,r=e*t+t,i=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,i<1){var o=3*t;this._mixBufferRegion(n,r,o,1-i,t)}for(var s=t,c=t+t;s!==c;++s)if(n[s]!==n[s+t]){a.setValue(n,r);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,n=this.valueSize,r=3*n;e.getValue(t,r);for(var i=n,a=r;i!==a;++i)t[i]=t[r+i%n];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,n,r,i){if(r>=.5)for(var a=0;a!==i;++a)e[t+a]=e[n+a]},_slerp:function(e,t,n,r){Ct.slerpFlat(e,t,e,t,e,n,r)},_lerp:function(e,t,n,r,i){for(var a=1-r,o=0;o!==i;++o){var s=t+o;e[s]=e[s]*a+e[n+o]*r}}});var Ys,Zs,Js,Ks;function Qs(e,t,n){var r=n||$s.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,r)}function $s(e,t,n){this.path=t,this.parsedPath=n||$s.parseTrackName(t),this.node=$s.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}function ec(e,t,n){this._mixer=e,this._clip=t,this._localRoot=n||null;for(var r=t.tracks,i=r.length,a=new Array(i),o={endingStart:pt,endingEnd:pt},s=0;s!==i;++s){var c=r[s].createInterpolant(null);a[s]=c,c.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=ut,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function tc(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function nc(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}function rc(e,t,n){Ai.call(this,e,t),this.meshPerAttribute=n||1}function ic(e,t,n,r){this.ray=new Kt(e,t),this.near=n||0,this.far=r||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function ac(e,t){return e.distance-t.distance}function oc(e,t,n,r){if(!1!==e.visible&&(e.raycast(t,n),!0===r))for(var i=e.children,a=0,o=i.length;a<o;a++)oc(i[a],t,n,!0)}function sc(e,t,n){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==n?n:0,this}function cc(e,t){this.min=void 0!==e?e:new Rt(1/0,1/0),this.max=void 0!==t?t:new Rt(-1/0,-1/0)}function lc(e,t){this.start=void 0!==e?e:new Ot,this.end=void 0!==t?t:new Ot}function hc(e){qt.call(this),this.material=e,this.render=function(){}}function uc(e,t,n,r){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==n?n:16711680,a=void 0!==r?r:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=3*s.faces.length:s&&s.isBufferGeometry&&(o=s.attributes.normal.count);var c=new _n,l=new gn(2*o*3,3);c.addAttribute("position",l),Ui.call(this,c,new Ni({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}function pc(e,t){qt.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var n=new _n,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,a=1;i<32;i++,a++){var o=i/32*Math.PI*2,s=a/32*Math.PI*2;r.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}n.addAttribute("position",new gn(r,3));var c=new Ni({fog:!1});this.cone=new Ui(n,c),this.add(this.cone),this.update()}function dc(e){for(var t=function e(t){var n=[];t&&t.isBone&&n.push(t);for(var r=0;r<t.children.length;r++)n.push.apply(n,e(t.children[r]));return n}(e),n=new _n,r=[],i=[],a=new en(0,0,1),o=new en(0,1,0),s=0;s<t.length;s++){var c=t[s];c.parent&&c.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),i.push(a.r,a.g,a.b),i.push(o.r,o.g,o.b))}n.addAttribute("position",new gn(r,3)),n.addAttribute("color",new gn(i,3));var l=new Ni({vertexColors:x,depthTest:!1,depthWrite:!1,transparent:!0});Ui.call(this,n,l),this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}function fc(e,t,n){this.light=e,this.light.updateMatrixWorld(),this.color=n;var r=new Ha(t,4,2),i=new cn({wireframe:!0,fog:!1});Mn.call(this,r,i),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function mc(e,t){this.type="RectAreaLightHelper",this.light=e,this.color=t;var n=new _n;n.addAttribute("position",new gn([1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),n.computeBoundingSphere();var r=new Ni({fog:!1});zi.call(this,n,r);var i=new _n;i.addAttribute("position",new gn([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),i.computeBoundingSphere(),this.add(new Mn(i,new cn({side:m,fog:!1}))),this.update()}function vc(e,t,n){qt.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var r=new $i(t);r.rotateY(.5*Math.PI),this.material=new cn({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=x);var i=r.getAttribute("position"),a=new Float32Array(3*i.count);r.addAttribute("color",new ln(a,3)),this.add(new Mn(r,this.material)),this.update()}function gc(e,t){this.lightProbe=e,this.size=t;var n={GAMMA_OUTPUT:""},r=new In({defines:n,uniforms:{sh:{value:this.lightProbe.sh.coefficients},intensity:{value:this.lightProbe.intensity}},vertexShader:["varying vec3 vNormal;","void main() {","\tvNormal = normalize( normalMatrix * normal );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#define RECIPROCAL_PI 0.318309886","vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {","\t// matrix is assumed to be orthogonal","\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );","}","vec3 linearToOutput( in vec3 a ) {","\t#ifdef GAMMA_OUTPUT","\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );","\t#else","\t\treturn a;","\t#endif","}","// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf","vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {","\t// normal is assumed to have unit length","\tfloat x = normal.x, y = normal.y, z = normal.z;","\t// band 0","\tvec3 result = shCoefficients[ 0 ] * 0.886227;","\t// band 1","\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;","\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;","\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;","\t// band 2","\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;","\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;","\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );","\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;","\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );","\treturn result;","}","uniform vec3 sh[ 9 ]; // sh coefficients","uniform float intensity; // light probe intensity","varying vec3 vNormal;","void main() {","\tvec3 normal = normalize( vNormal );","\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );","\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );","\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;","\toutgoingLight = linearToOutput( outgoingLight );","\tgl_FragColor = vec4( outgoingLight, 1.0 );","}"].join("\n")}),i=new Ha(1,32,16);Mn.call(this,i,r),this.onBeforeRender()}function yc(e,t,n,r){e=e||10,t=t||10,n=new en(void 0!==n?n:4473924),r=new en(void 0!==r?r:8947848);for(var i=t/2,a=e/t,o=e/2,s=[],c=[],l=0,h=0,u=-o;l<=t;l++,u+=a){s.push(-o,0,u,o,0,u),s.push(u,0,-o,u,0,o);var p=l===i?n:r;p.toArray(c,h),h+=3,p.toArray(c,h),h+=3,p.toArray(c,h),h+=3,p.toArray(c,h),h+=3}var d=new _n;d.addAttribute("position",new gn(s,3)),d.addAttribute("color",new gn(c,3));var f=new Ni({vertexColors:x});Ui.call(this,d,f)}function xc(e,t,n,r,i,a){e=e||10,t=t||16,n=n||8,r=r||64,i=new en(void 0!==i?i:4473924),a=new en(void 0!==a?a:8947848);var o,s,c,l,h,u,p,d=[],f=[];for(l=0;l<=t;l++)c=l/t*(2*Math.PI),o=Math.sin(c)*e,s=Math.cos(c)*e,d.push(0,0,0),d.push(o,0,s),p=1&l?i:a,f.push(p.r,p.g,p.b),f.push(p.r,p.g,p.b);for(l=0;l<=n;l++)for(p=1&l?i:a,u=e-e/n*l,h=0;h<r;h++)c=h/r*(2*Math.PI),o=Math.sin(c)*u,s=Math.cos(c)*u,d.push(o,0,s),f.push(p.r,p.g,p.b),c=(h+1)/r*(2*Math.PI),o=Math.sin(c)*u,s=Math.cos(c)*u,d.push(o,0,s),f.push(p.r,p.g,p.b);var m=new _n;m.addAttribute("position",new gn(d,3)),m.addAttribute("color",new gn(f,3));var v=new Ni({vertexColors:x});Ui.call(this,m,v)}function bc(e,t,n,r){this.audio=e,this.range=t||1,this.divisionsInnerAngle=n||16,this.divisionsOuterAngle=r||2;var i=new _n,a=this.divisionsInnerAngle+2*this.divisionsOuterAngle,o=new Float32Array(3*(3*a+3));i.addAttribute("position",new ln(o,3));var s=new Ni({color:65280}),c=new Ni({color:16776960});zi.call(this,i,[c,s]),this.update()}function wc(e,t,n,r){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==n?n:16776960,a=void 0!==r?r:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new _n,l=new gn(2*o*3,3);c.addAttribute("position",l),Ui.call(this,c,new Ni({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}function _c(e,t,n){qt.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===t&&(t=1);var r=new _n;r.addAttribute("position",new gn([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var i=new Ni({fog:!1});this.lightPlane=new zi(r,i),this.add(this.lightPlane),(r=new _n).addAttribute("position",new gn([0,0,0,0,0,1],3)),this.targetLine=new zi(r,i),this.add(this.targetLine),this.update()}function Mc(e){var t=new _n,n=new Ni({color:16777215,vertexColors:y}),r=[],i=[],a={},o=new en(16755200),s=new en(16711680),c=new en(43775),l=new en(16777215),h=new en(3355443);function u(e,t,n){p(e,n),p(t,n)}function p(e,t){r.push(0,0,0),i.push(t.r,t.g,t.b),void 0===a[e]&&(a[e]=[]),a[e].push(r.length/3-1)}u("n1","n2",o),u("n2","n4",o),u("n4","n3",o),u("n3","n1",o),u("f1","f2",o),u("f2","f4",o),u("f4","f3",o),u("f3","f1",o),u("n1","f1",o),u("n2","f2",o),u("n3","f3",o),u("n4","f4",o),u("p","n1",s),u("p","n2",s),u("p","n3",s),u("p","n4",s),u("u1","u2",c),u("u2","u3",c),u("u3","u1",c),u("c","t",l),u("p","c",h),u("cn1","cn2",h),u("cn3","cn4",h),u("cf1","cf2",h),u("cf3","cf4",h),t.addAttribute("position",new gn(r,3)),t.addAttribute("color",new gn(i,3)),Ui.call(this,t,n),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function Tc(e,t){this.object=e,void 0===t&&(t=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(24),i=new _n;i.setIndex(new ln(n,1)),i.addAttribute("position",new ln(r,3)),Ui.call(this,i,new Ni({color:t})),this.matrixAutoUpdate=!1,this.update()}function Sc(e,t){this.type="Box3Helper",this.box=e,t=t||16776960;var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new _n;r.setIndex(new ln(n,1)),r.addAttribute("position",new gn([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Ui.call(this,r,new Ni({color:t})),this.geometry.computeBoundingSphere()}function Ec(e,t,n){this.type="PlaneHelper",this.plane=e,this.size=void 0===t?1:t;var r=void 0!==n?n:16776960,i=new _n;i.addAttribute("position",new gn([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),i.computeBoundingSphere(),zi.call(this,i,new Ni({color:r}));var a=new _n;a.addAttribute("position",new gn([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new Mn(a,new cn({color:r,opacity:.2,transparent:!0,depthWrite:!1})))}function Ac(e,t,n,r,i,a){qt.call(this),void 0===e&&(e=new Ot(0,0,1)),void 0===t&&(t=new Ot(0,0,0)),void 0===n&&(n=1),void 0===r&&(r=16776960),void 0===i&&(i=.2*n),void 0===a&&(a=.2*i),void 0===Js&&((Js=new _n).addAttribute("position",new gn([0,0,0,0,1,0],3)),(Ks=new Qa(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(t),this.line=new zi(Js,new Ni({color:r})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Mn(Ks,new cn({color:r})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(n,i,a)}function Lc(e){var t=[0,0,0,e=e||1,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=new _n;n.addAttribute("position",new gn(t,3)),n.addAttribute("color",new gn([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var r=new Ni({vertexColors:x});Ui.call(this,n,r)}Object.assign(Qs.prototype,{getValue:function(e,t){this.bind();var n=this._targetGroup.nCachedObjects_,r=this._bindings[n];void 0!==r&&r.getValue(e,t)},setValue:function(e,t){for(var n=this._bindings,r=this._targetGroup.nCachedObjects_,i=n.length;r!==i;++r)n[r].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}),Object.assign($s,{Composite:Qs,create:function(e,t,n){return e&&e.isAnimationObjectGroup?new $s.Composite(e,t,n):new $s(e,t,n)},sanitizeNodeName:function(){var e=new RegExp("[\\[\\]\\.:\\/]","g");return function(t){return t.replace(/\s/g,"_").replace(e,"")}}(),parseTrackName:function(){var e="[^\\[\\]\\.:\\/]",t="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",n=/((?:WC+[\/:])*)/.source.replace("WC",e),r=/(WCOD+)?/.source.replace("WCOD",t),i=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",e),a=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",e),o=new RegExp("^"+n+r+i+a+"$"),s=["material","materials","bones"];return function(e){var t=o.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);var n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},r=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==r&&-1!==r){var i=n.nodeName.substring(r+1);-1!==s.indexOf(i)&&(n.nodeName=n.nodeName.substring(0,r),n.objectName=i)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}}(),findNode:function(e,t){if(!t||""===t||"root"===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var n=e.skeleton.getBoneByName(t);if(void 0!==n)return n}if(e.children){var r=function(e){for(var n=0;n<e.length;n++){var i=e[n];if(i.name===t||i.uuid===t)return i;var a=r(i.children);if(a)return a}return null},i=r(e.children);if(i)return i}return null}}),Object.assign($s.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)e[t++]=n[r]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.targetObject[this.propertyName]=e[t]},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=e[t++]},function(e,t){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,n=t.objectName,r=t.propertyName,i=t.propertyIndex;if(e||(e=$s.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,e){if(n){var a=t.objectIndex;switch(n){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(var o=0;o<e.length;o++)if(e[o].name===a){a=o;break}break;default:if(void 0===e[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[n]}if(void 0!==a){if(void 0===e[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[a]}}var s=e[r];if(void 0!==s){var c=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);var l=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===r){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(e.geometry.morphAttributes.position[o].name===i){i=o;break}}else{if(!e.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(o=0;o<this.node.geometry.morphTargets.length;o++)if(e.geometry.morphTargets[o].name===i){i=o;break}}}l=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(l=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(l=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=r;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][c]}else{var h=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+h+"."+r+" but it wasn't found.",e)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign($s.prototype,{_getValue_unbound:$s.prototype.getValue,_setValue_unbound:$s.prototype.setValue}),Object.assign(function(){this.uuid=Pt.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var e={};this._indicesByUUID=e;for(var t=0,n=arguments.length;t!==n;++t)e[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var r=this;this.stats={objects:{get total(){return r._objects.length},get inUse(){return this.total-r.nCachedObjects_}},get bindingsPerObject(){return r._bindings.length}}}.prototype,{isAnimationObjectGroup:!0,add:function(){for(var e=this._objects,t=e.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._paths,a=this._parsedPaths,o=this._bindings,s=o.length,c=void 0,l=0,h=arguments.length;l!==h;++l){var u=arguments[l],p=u.uuid,d=r[p];if(void 0===d){d=t++,r[p]=d,e.push(u);for(var f=0,m=s;f!==m;++f)o[f].push(new $s(u,i[f],a[f]))}else if(d<n){c=e[d];var v=--n,g=e[v];r[g.uuid]=d,e[d]=g,r[p]=v,e[v]=u;for(f=0,m=s;f!==m;++f){var y=o[f],x=y[v],b=y[d];y[d]=x,void 0===b&&(b=new $s(u,i[f],a[f])),y[v]=b}}else e[d]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var e=this._objects,t=this.nCachedObjects_,n=this._indicesByUUID,r=this._bindings,i=r.length,a=0,o=arguments.length;a!==o;++a){var s=arguments[a],c=s.uuid,l=n[c];if(void 0!==l&&l>=t){var h=t++,u=e[h];n[u.uuid]=l,e[l]=u,n[c]=h,e[h]=s;for(var p=0,d=i;p!==d;++p){var f=r[p],m=f[h],v=f[l];f[l]=m,f[h]=v}}}this.nCachedObjects_=t},uncache:function(){for(var e=this._objects,t=e.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._bindings,a=i.length,o=0,s=arguments.length;o!==s;++o){var c=arguments[o].uuid,l=r[c];if(void 0!==l)if(delete r[c],l<n){var h=--n,u=e[h],p=e[g=--t];r[u.uuid]=l,e[l]=u,r[p.uuid]=h,e[h]=p,e.pop();for(var d=0,f=a;d!==f;++d){var m=(y=i[d])[h],v=y[g];y[l]=m,y[h]=v,y.pop()}}else{var g;r[(p=e[g=--t]).uuid]=l,e[l]=p,e.pop();for(d=0,f=a;d!==f;++d){var y;(y=i[d])[l]=y[g],y.pop()}}}this.nCachedObjects_=n},subscribe_:function(e,t){var n=this._bindingsIndicesByPath,r=n[e],i=this._bindings;if(void 0!==r)return i[r];var a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,l=this.nCachedObjects_,h=new Array(c);r=i.length,n[e]=r,a.push(e),o.push(t),i.push(h);for(var u=l,p=s.length;u!==p;++u){var d=s[u];h[u]=new $s(d,e,t)}return h},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,n=t[e];if(void 0!==n){var r=this._paths,i=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o];t[e[o]]=n,a[n]=s,a.pop(),i[n]=i[o],i.pop(),r[n]=r[o],r.pop()}}}),Object.assign(ec.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){var r=this._clip.duration,i=e._clip.duration,a=i/r,o=r/i;e.warp(1,a,t),this.warp(o,1,t)}return this},crossFadeTo:function(e,t,n){return e.crossFadeFrom(this,t,n)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,n){var r=this._mixer,i=r.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=r._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,c=a.sampleValues;return s[0]=i,s[1]=i+n,c[0]=e/o,c[1]=t/o,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,n,r){if(this.enabled){var i=this._startTime;if(null!==i){var a=(e-i)*n;if(a<0||0===n)return;this._startTime=null,t=n*a}t*=this._updateTimeScale(e);var o=this._updateTime(t),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,l=this._propertyBindings,h=0,u=c.length;h!==u;++h)c[h].evaluate(o),l[h].accumulate(r,s)}else this._updateWeight(e)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var n=this._weightInterpolant;if(null!==n){var r=n.evaluate(e)[0];t*=r,e>n.parameterPositions[1]&&(this.stopFading(),0===r&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)t*=n.evaluate(e)[0],e>n.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e,n=this._clip.duration,r=this.loop,i=this._loopCount,a=2202===r;if(0===e)return-1===i?t:a&&1==(1&i)?n-t:t;if(r===ht){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=n)t=n;else{if(!(t<0)){this.time=t;break e}t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(-1===i&&(e>=0?(i=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),t>=n||t<0){var o=Math.floor(t/n);t-=n*o,i+=Math.abs(o);var s=this.repetitions-i;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?n:0,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(1===s){var c=e<0;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=i,this.time=t,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=t;if(a&&1==(1&i))return n-t}return t},_setEndings:function(e,t,n){var r=this._interpolantSettings;n?(r.endingStart=2401,r.endingEnd=2401):(r.endingStart=e?this.zeroSlopeAtStart?2401:pt:2402,r.endingEnd=t?this.zeroSlopeAtEnd?2401:pt:2402)},_scheduleFading:function(e,t,n){var r=this._mixer,i=r.time,a=this._weightInterpolant;null===a&&(a=r._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=i,s[0]=t,o[1]=i+e,s[1]=n,this}}),tc.prototype=Object.assign(Object.create(r.prototype),{constructor:tc,_bindAction:function(e,t){var n=e._localRoot||this._root,r=e._clip.tracks,i=r.length,a=e._propertyBindings,o=e._interpolants,s=n.uuid,c=this._bindingsByRootAndName,l=c[s];void 0===l&&(l={},c[s]=l);for(var h=0;h!==i;++h){var u=r[h],p=u.name,d=l[p];if(void 0!==d)a[h]=d;else{if(void 0!==(d=a[h])){null===d._cacheIndex&&(++d.referenceCount,this._addInactiveBinding(d,s,p));continue}var f=t&&t._propertyBindings[h].binding.parsedPath;++(d=new qs($s.create(n,p,f),u.ValueTypeName,u.getValueSize())).referenceCount,this._addInactiveBinding(d,s,p),a[h]=d}o[h].resultBuffer=d.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,n=e._clip.uuid,r=this._actionsByClip[n];this._bindAction(e,r&&r.knownActions[0]),this._addInactiveAction(e,n,t)}for(var i=e._propertyBindings,a=0,o=i.length;a!==o;++a){var s=i[a];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,n=0,r=t.length;n!==r;++n){var i=t[n];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,n){var r=this._actions,i=this._actionsByClip,a=i[t];if(void 0===a)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,i[t]=a;else{var o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=r.length,r.push(e),a.actionByRoot[n]=e},_removeInactiveAction:function(e){var t=this._actions,n=t[t.length-1],r=e._cacheIndex;n._cacheIndex=r,t[r]=n,t.pop(),e._cacheIndex=null;var i=e._clip.uuid,a=this._actionsByClip,o=a[i],s=o.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,s[l]=c,s.pop(),e._byClipCacheIndex=null,delete o.actionByRoot[(e._localRoot||this._root).uuid],0===s.length&&delete a[i],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,n=0,r=t.length;n!==r;++n){var i=t[n];0==--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(e){var t=this._actions,n=e._cacheIndex,r=this._nActiveActions++,i=t[r];e._cacheIndex=r,t[r]=e,i._cacheIndex=n,t[n]=i},_takeBackAction:function(e){var t=this._actions,n=e._cacheIndex,r=--this._nActiveActions,i=t[r];e._cacheIndex=r,t[r]=e,i._cacheIndex=n,t[n]=i},_addInactiveBinding:function(e,t,n){var r=this._bindingsByRootAndName,i=r[t],a=this._bindings;void 0===i&&(i={},r[t]=i),i[n]=e,e._cacheIndex=a.length,a.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,n=e.binding,r=n.rootNode.uuid,i=n.path,a=this._bindingsByRootAndName,o=a[r],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c,t[c]=s,t.pop(),delete o[i],0===Object.keys(o).length&&delete a[r]},_lendBinding:function(e){var t=this._bindings,n=e._cacheIndex,r=this._nActiveBindings++,i=t[r];e._cacheIndex=r,t[r]=e,i._cacheIndex=n,t[n]=i},_takeBackBinding:function(e){var t=this._bindings,n=e._cacheIndex,r=--this._nActiveBindings,i=t[r];e._cacheIndex=r,t[r]=e,i._cacheIndex=n,t[n]=i},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,n=e[t];return void 0===n&&((n=new xo(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=t,e[t]=n),n},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,n=e.__cacheIndex,r=--this._nActiveControlInterpolants,i=t[r];e.__cacheIndex=r,t[r]=e,i.__cacheIndex=n,t[n]=i},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t){var n=t||this._root,r=n.uuid,i="string"==typeof e?Po.findByName(n,e):e,a=null!==i?i.uuid:e,o=this._actionsByClip[a],s=null;if(void 0!==o){var c=o.actionByRoot[r];if(void 0!==c)return c;s=o.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var l=new ec(this,i,t);return this._bindAction(l,s),this._addInactiveAction(l,a,r),l},existingAction:function(e,t){var n=t||this._root,r=n.uuid,i="string"==typeof e?Po.findByName(n,e):e,a=i?i.uuid:e,o=this._actionsByClip[a];return void 0!==o&&o.actionByRoot[r]||null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,n=this._bindings,r=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==t;++i)e[i].reset();for(i=0;i!==r;++i)n[i].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,n=this._nActiveActions,r=this.time+=e,i=Math.sign(e),a=this._accuIndex^=1,o=0;o!==n;++o){t[o]._update(r,e,i,a)}var s=this._bindings,c=this._nActiveBindings;for(o=0;o!==c;++o)s[o].apply(a);return this},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,n=e.uuid,r=this._actionsByClip,i=r[n];if(void 0!==i){for(var a=i.knownActions,o=0,s=a.length;o!==s;++o){var c=a[o];this._deactivateAction(c);var l=c._cacheIndex,h=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,h._cacheIndex=l,t[l]=h,t.pop(),this._removeInactiveBindingsForAction(c)}delete r[n]}},uncacheRoot:function(e){var t=e.uuid,n=this._actionsByClip;for(var r in n){var i=n[r].actionByRoot[t];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}var a=this._bindingsByRootAndName[t];if(void 0!==a)for(var o in a){var s=a[o];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(e,t){var n=this.existingAction(e,t);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),nc.prototype.clone=function(){return new nc(void 0===this.value.clone?this.value:this.value.clone())},rc.prototype=Object.assign(Object.create(Ai.prototype),{constructor:rc,isInstancedInterleavedBuffer:!0,copy:function(e){return Ai.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Object.assign(ic.prototype,{linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this._camera=t):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this._camera=t):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,t,n){var r=n||[];return oc(e,this,r,t),r.sort(ac),r},intersectObjects:function(e,t,n){var r=n||[];if(!1===Array.isArray(e))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),r;for(var i=0,a=e.length;i<a;i++)oc(e[i],this,r,t);return r.sort(ac),r}}),Object.assign(sc.prototype,{set:function(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(Pt.clamp(t/this.radius,-1,1))),this}}),Object.assign(function(e,t,n){return this.radius=void 0!==e?e:1,this.theta=void 0!==t?t:0,this.y=void 0!==n?n:0,this}.prototype,{set:function(e,t,n){return this.radius=e,this.theta=t,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,n){return this.radius=Math.sqrt(e*e+n*n),this.theta=Math.atan2(e,n),this.y=t,this}}),Object.assign(cc.prototype,{set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new Rt;return function(t,n){var r=e.copy(n).multiplyScalar(.5);return this.min.copy(t).sub(r),this.max.copy(t).add(r),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box2: .getCenter() target is now required"),e=new Rt),this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box2: .getSize() target is now required"),e=new Rt),this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .getParameter() target is now required"),t=new Rt),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .clampPoint() target is now required"),t=new Rt),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new Rt;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}),Object.assign(lc.prototype,{set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},getCenter:function(e){return void 0===e&&(console.warn("THREE.Line3: .getCenter() target is now required"),e=new Ot),e.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){return void 0===e&&(console.warn("THREE.Line3: .delta() target is now required"),e=new Ot),e.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){return void 0===t&&(console.warn("THREE.Line3: .at() target is now required"),t=new Ot),this.delta(t).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(e,t){void 0===Ys&&(Ys=new Ot,Zs=new Ot),Ys.subVectors(e,this.start),Zs.subVectors(this.end,this.start);var n=Zs.dot(Zs),r=Zs.dot(Ys)/n;return t&&(r=Pt.clamp(r,0,1)),r},closestPointToPoint:function(e,t,n){var r=this.closestPointToPointParameter(e,t);return void 0===n&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new Ot),this.delta(n).multiplyScalar(r).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}),hc.prototype=Object.create(qt.prototype),hc.prototype.constructor=hc,hc.prototype.isImmediateRenderObject=!0,uc.prototype=Object.create(Ui.prototype),uc.prototype.constructor=uc,uc.prototype.update=function(){var e=new Ot,t=new Ot,n=new It;return function(){var r=["a","b","c"];this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);var i=this.object.matrixWorld,a=this.geometry.attributes.position,o=this.object.geometry;if(o&&o.isGeometry)for(var s=o.vertices,c=o.faces,l=0,h=0,u=c.length;h<u;h++)for(var p=c[h],d=0,f=p.vertexNormals.length;d<f;d++){var m=s[p[r[d]]],v=p.vertexNormals[d];e.copy(m).applyMatrix4(i),t.copy(v).applyMatrix3(n).normalize().multiplyScalar(this.size).add(e),a.setXYZ(l,e.x,e.y,e.z),l+=1,a.setXYZ(l,t.x,t.y,t.z),l+=1}else if(o&&o.isBufferGeometry){var g=o.attributes.position,y=o.attributes.normal;for(l=0,d=0,f=g.count;d<f;d++)e.set(g.getX(d),g.getY(d),g.getZ(d)).applyMatrix4(i),t.set(y.getX(d),y.getY(d),y.getZ(d)),t.applyMatrix3(n).normalize().multiplyScalar(this.size).add(e),a.setXYZ(l,e.x,e.y,e.z),l+=1,a.setXYZ(l,t.x,t.y,t.z),l+=1}a.needsUpdate=!0}}(),pc.prototype=Object.create(qt.prototype),pc.prototype.constructor=pc,pc.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},pc.prototype.update=function(){var e=new Ot;return function(){this.light.updateMatrixWorld();var t=this.light.distance?this.light.distance:1e3,n=t*Math.tan(this.light.angle);this.cone.scale.set(n,n,t),e.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(e),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),dc.prototype=Object.create(Ui.prototype),dc.prototype.constructor=dc,dc.prototype.updateMatrixWorld=function(){var e=new Ot,t=new Ht,n=new Ht;return function(r){var i=this.bones,a=this.geometry,o=a.getAttribute("position");n.getInverse(this.root.matrixWorld);for(var s=0,c=0;s<i.length;s++){var l=i[s];l.parent&&l.parent.isBone&&(t.multiplyMatrices(n,l.matrixWorld),e.setFromMatrixPosition(t),o.setXYZ(c,e.x,e.y,e.z),t.multiplyMatrices(n,l.parent.matrixWorld),e.setFromMatrixPosition(t),o.setXYZ(c+1,e.x,e.y,e.z),c+=2)}a.getAttribute("position").needsUpdate=!0,qt.prototype.updateMatrixWorld.call(this,r)}}(),fc.prototype=Object.create(Mn.prototype),fc.prototype.constructor=fc,fc.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},fc.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},mc.prototype=Object.create(zi.prototype),mc.prototype.constructor=mc,mc.prototype.update=function(){if(this.scale.set(.5*this.light.width,.5*this.light.height,1),void 0!==this.color)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var e=this.material.color,t=Math.max(e.r,e.g,e.b);t>1&&e.multiplyScalar(1/t),this.children[0].material.color.copy(this.material.color)}},mc.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()},vc.prototype=Object.create(qt.prototype),vc.prototype.constructor=vc,vc.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},vc.prototype.update=function(){var e=new Ot,t=new en,n=new en;return function(){var r=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var i=r.geometry.getAttribute("color");t.copy(this.light.color),n.copy(this.light.groundColor);for(var a=0,o=i.count;a<o;a++){var s=a<o/2?t:n;i.setXYZ(a,s.r,s.g,s.b)}i.needsUpdate=!0}r.lookAt(e.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),gc.prototype=Object.create(Mn.prototype),gc.prototype.constructor=gc,gc.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},gc.prototype.onBeforeRender=function(){this.position.copy(this.lightProbe.position),this.scale.set(1,1,1).multiplyScalar(this.size),this.material.uniforms.intensity.value=this.lightProbe.intensity},yc.prototype=Object.assign(Object.create(Ui.prototype),{constructor:yc,copy:function(e){return Ui.prototype.copy.call(this,e),this.geometry.copy(e.geometry),this.material.copy(e.material),this},clone:function(){return(new this.constructor).copy(this)}}),xc.prototype=Object.create(Ui.prototype),xc.prototype.constructor=xc,bc.prototype=Object.create(zi.prototype),bc.prototype.constructor=bc,bc.prototype.update=function(){var e,t,n=this.audio,r=this.range,i=this.divisionsInnerAngle,a=this.divisionsOuterAngle,o=Pt.degToRad(n.panner.coneInnerAngle),s=Pt.degToRad(n.panner.coneOuterAngle),c=o/2,l=s/2,h=0,u=0,p=this.geometry,d=p.attributes.position;function f(n,i,a,o){var s=(i-n)/a;for(d.setXYZ(h,0,0,0),u++,e=n;e<i;e+=s)t=h+u,d.setXYZ(t,Math.sin(e)*r,0,Math.cos(e)*r),d.setXYZ(t+1,Math.sin(Math.min(e+s,i))*r,0,Math.cos(Math.min(e+s,i))*r),d.setXYZ(t+2,0,0,0),u+=3;p.addGroup(h,u,o),h+=u,u=0}p.clearGroups(),f(-l,-c,a,0),f(-c,c,i,1),f(c,l,a,0),d.needsUpdate=!0,o===s&&(this.material[0].visible=!1)},bc.prototype.dispose=function(){this.geometry.dispose(),this.material[0].dispose(),this.material[1].dispose()},wc.prototype=Object.create(Ui.prototype),wc.prototype.constructor=wc,wc.prototype.update=function(){var e=new Ot,t=new Ot,n=new It;return function(){this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);for(var r=this.object.matrixWorld,i=this.geometry.attributes.position,a=this.object.geometry,o=a.vertices,s=a.faces,c=0,l=0,h=s.length;l<h;l++){var u=s[l],p=u.normal;e.copy(o[u.a]).add(o[u.b]).add(o[u.c]).divideScalar(3).applyMatrix4(r),t.copy(p).applyMatrix3(n).normalize().multiplyScalar(this.size).add(e),i.setXYZ(c,e.x,e.y,e.z),c+=1,i.setXYZ(c,t.x,t.y,t.z),c+=1}i.needsUpdate=!0}}(),_c.prototype=Object.create(qt.prototype),_c.prototype.constructor=_c,_c.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},_c.prototype.update=function(){var e=new Ot,t=new Ot,n=new Ot;return function(){e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),n.subVectors(t,e),this.lightPlane.lookAt(t),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(t),this.targetLine.scale.z=n.length()}}(),Mc.prototype=Object.create(Ui.prototype),Mc.prototype.constructor=Mc,Mc.prototype.update=function(){var e,t,n=new Ot,r=new Dn;function i(i,a,o,s){n.set(a,o,s).unproject(r);var c=t[i];if(void 0!==c)for(var l=e.getAttribute("position"),h=0,u=c.length;h<u;h++)l.setXYZ(c[h],n.x,n.y,n.z)}return function(){e=this.geometry,t=this.pointMap;r.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),i("c",0,0,-1),i("t",0,0,1),i("n1",-1,-1,-1),i("n2",1,-1,-1),i("n3",-1,1,-1),i("n4",1,1,-1),i("f1",-1,-1,1),i("f2",1,-1,1),i("f3",-1,1,1),i("f4",1,1,1),i("u1",.7,1.1,-1),i("u2",-.7,1.1,-1),i("u3",0,2,-1),i("cf1",-1,0,1),i("cf2",1,0,1),i("cf3",0,-1,1),i("cf4",0,1,1),i("cn1",-1,0,-1),i("cn2",1,0,-1),i("cn3",0,-1,-1),i("cn4",0,1,-1),e.getAttribute("position").needsUpdate=!0}}(),Tc.prototype=Object.create(Ui.prototype),Tc.prototype.constructor=Tc,Tc.prototype.update=function(){var e=new Zt;return function(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&e.setFromObject(this.object),!e.isEmpty()){var n=e.min,r=e.max,i=this.geometry.attributes.position,a=i.array;a[0]=r.x,a[1]=r.y,a[2]=r.z,a[3]=n.x,a[4]=r.y,a[5]=r.z,a[6]=n.x,a[7]=n.y,a[8]=r.z,a[9]=r.x,a[10]=n.y,a[11]=r.z,a[12]=r.x,a[13]=r.y,a[14]=n.z,a[15]=n.x,a[16]=r.y,a[17]=n.z,a[18]=n.x,a[19]=n.y,a[20]=n.z,a[21]=r.x,a[22]=n.y,a[23]=n.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),Tc.prototype.setFromObject=function(e){return this.object=e,this.update(),this},Tc.prototype.copy=function(e){return Ui.prototype.copy.call(this,e),this.object=e.object,this},Tc.prototype.clone=function(){return(new this.constructor).copy(this)},Sc.prototype=Object.create(Ui.prototype),Sc.prototype.constructor=Sc,Sc.prototype.updateMatrixWorld=function(e){var t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),qt.prototype.updateMatrixWorld.call(this,e))},Ec.prototype=Object.create(zi.prototype),Ec.prototype.constructor=Ec,Ec.prototype.updateMatrixWorld=function(e){var t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.children[0].material.side=t<0?m:f,this.lookAt(this.plane.normal),qt.prototype.updateMatrixWorld.call(this,e)},Ac.prototype=Object.create(qt.prototype),Ac.prototype.constructor=Ac,Ac.prototype.setDirection=function(){var e,t=new Ot;return function(n){n.y>.99999?this.quaternion.set(0,0,0,1):n.y<-.99999?this.quaternion.set(1,0,0,0):(t.set(n.z,0,-n.x).normalize(),e=Math.acos(n.y),this.quaternion.setFromAxisAngle(t,e))}}(),Ac.prototype.setLength=function(e,t,n){void 0===t&&(t=.2*e),void 0===n&&(n=.2*t),this.line.scale.set(1,Math.max(0,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()},Ac.prototype.setColor=function(e){this.line.material.color.set(e),this.cone.material.color.set(e)},Ac.prototype.copy=function(e){return qt.prototype.copy.call(this,e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this},Ac.prototype.clone=function(){return(new this.constructor).copy(this)},Lc.prototype=Object.create(Ui.prototype),Lc.prototype.constructor=Lc;function Pc(e){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),Yo.call(this,e),this.type="catmullrom"}Go.create=function(e,t){return console.log("THREE.Curve.create() has been deprecated"),e.prototype=Object.create(Go.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},Object.assign(os.prototype,{createPointsGeometry:function(e){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var t=new Sn,n=0,r=e.length;n<r;n++){var i=e[n];t.vertices.push(new Ot(i.x,i.y,i.z||0))}return t}}),Object.assign(ss.prototype,{fromPoints:function(e){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(e)}}),Object.create(Yo.prototype),Object.create(Yo.prototype),Pc.prototype=Object.create(Yo.prototype),Object.assign(Pc.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),yc.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},dc.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Ns.prototype,{extractUrlBase:function(e){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),ws.extractUrlBase(e)}}),Object.assign(Es.prototype,{setTexturePath:function(e){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(e)}}),Object.assign(cc.prototype,{center:function(e){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},size:function(e){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(e)}}),Object.assign(Zt.prototype,{center:function(e){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},size:function(e){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(e)}}),lc.prototype.center=function(e){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(e)},Object.assign(Pt,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(e){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Pt.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Pt.ceilPowerOfTwo(e)}}),Object.assign(It.prototype,{flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(Ht.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},getPosition:function(){var e;return function(){return void 0===e&&(e=new Ot),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),e.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(e,t,n,r,i,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(e,t,r,n,i,a)}}),kn.prototype.isIntersectionLine=function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)},Ct.prototype.multiplyVector3=function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)},Object.assign(Kt.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(Qt.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(e,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(e,t)},midpoint:function(e){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(e)},normal:function(e){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(e)},plane:function(e){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(e)}}),Object.assign(Qt,{barycoordFromPoint:function(e,t,n,r,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Qt.getBarycoord(e,t,n,r,i)},normal:function(e,t,n,r){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Qt.getNormal(e,t,n,r)}}),Object.assign(cs.prototype,{extractAllPoints:function(e){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(e)},extrude:function(e){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Na(this,e)},makeGeometry:function(e){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new qa(this,e)}}),Object.assign(Rt.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Ot.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(e)},fromAttribute:function(e,t,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Ft.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Sn.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign(qt.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties(qt.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(Ci.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Ii.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Oi.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(Go.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=e}}),Nn.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(ls.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(ln.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")}}),Object.assign(_n.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addDrawCall:function(e,t,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(_n.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.assign(za.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(nc.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(sn.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new en}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===e}}}),Object.defineProperties(co.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(In.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),Object.assign(Ti.prototype,{clearTarget:function(e,t,n,r){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(e),this.clear(t,n,r)},animate:function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(e)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}}),Object.defineProperties(Ti.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}}}),Object.defineProperties(fi.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Fn.prototype,{activeCubeFace:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().")}},activeMipMapLevel:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().")}}}),Object.defineProperties(Gt.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Object.defineProperties(_i.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}}),Vs.prototype.load=function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var t=this;return(new Us).load(e,function(e){t.setBuffer(e)}),this},Xs.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},Bn.prototype.updateCubeMap=function(e,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(e,t)};zt.crossOrigin=void 0,zt.loadTexture=function(e,t,n,r){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new Fo;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,n,void 0,r);return t&&(a.mapping=t),a},zt.loadTextureCube=function(e,t,n,r){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new Bo;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,n,void 0,r);return t&&(a.mapping=t),a},zt.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},zt.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var Rc=function(e,t){this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new Ot,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={LEFT:s.ROTATE,MIDDLE:s.DOLLY,RIGHT:s.PAN},this.touches={ONE:c.ROTATE,TWO:c.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return u.phi},this.getAzimuthalAngle=function(){return u.theta},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(r),n.update(),l=o.NONE},this.update=function(){var t=new Ot,i=(new Ct).setFromUnitVectors(e.up,new Ot(0,1,0)),a=i.clone().inverse(),s=new Ot,c=new Ct;return function(){var e=n.object.position;return t.copy(e).sub(n.target),t.applyQuaternion(i),u.setFromVector3(t),n.autoRotate&&l===o.NONE&&E(2*Math.PI/60/60*n.autoRotateSpeed),n.enableDamping?(u.theta+=p.theta*n.dampingFactor,u.phi+=p.phi*n.dampingFactor):(u.theta+=p.theta,u.phi+=p.phi),u.theta=Math.max(n.minAzimuthAngle,Math.min(n.maxAzimuthAngle,u.theta)),u.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,u.phi)),u.makeSafe(),u.radius*=d,u.radius=Math.max(n.minDistance,Math.min(n.maxDistance,u.radius)),!0===n.enableDamping?n.target.addScaledVector(f,n.dampingFactor):n.target.add(f),t.setFromSpherical(u),t.applyQuaternion(a),e.copy(n.target).add(t),n.object.lookAt(n.target),!0===n.enableDamping?(p.theta*=1-n.dampingFactor,p.phi*=1-n.dampingFactor,f.multiplyScalar(1-n.dampingFactor)):(p.set(0,0,0),f.set(0,0,0)),d=1,!!(m||s.distanceToSquared(n.object.position)>h||8*(1-c.dot(n.object.quaternion))>h)&&(n.dispatchEvent(r),s.copy(n.object.position),c.copy(n.object.quaternion),m=!1,!0)}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",Z,!1),n.domElement.removeEventListener("mousedown",k,!1),n.domElement.removeEventListener("wheel",V,!1),n.domElement.removeEventListener("touchstart",X,!1),n.domElement.removeEventListener("touchend",Y,!1),n.domElement.removeEventListener("touchmove",q,!1),document.removeEventListener("mousemove",H,!1),document.removeEventListener("mouseup",j,!1),window.removeEventListener("keydown",W,!1)};var n=this,r={type:"change"},i={type:"start"},a={type:"end"},o={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},l=o.NONE,h=1e-6,u=new sc,p=new sc,d=1,f=new Ot,m=!1,v=new Rt,g=new Rt,y=new Rt,x=new Rt,b=new Rt,w=new Rt,_=new Rt,M=new Rt,T=new Rt;function S(){return Math.pow(.95,n.zoomSpeed)}function E(e){p.theta-=e}function A(e){p.phi-=e}var L=function(){var e=new Ot;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),f.add(e)}}(),P=function(){var e=new Ot;return function(t,r){!0===n.screenSpacePanning?e.setFromMatrixColumn(r,1):(e.setFromMatrixColumn(r,0),e.crossVectors(n.object.up,e)),e.multiplyScalar(t),f.add(e)}}(),R=function(){var e=new Ot;return function(t,r){var i=n.domElement===document?n.domElement.body:n.domElement;if(n.object.isPerspectiveCamera){var a=n.object.position;e.copy(a).sub(n.target);var o=e.length();o*=Math.tan(n.object.fov/2*Math.PI/180),L(2*t*o/i.clientHeight,n.object.matrix),P(2*r*o/i.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(L(t*(n.object.right-n.object.left)/n.object.zoom/i.clientWidth,n.object.matrix),P(r*(n.object.top-n.object.bottom)/n.object.zoom/i.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function C(e){n.object.isPerspectiveCamera?d/=e:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom*e)),n.object.updateProjectionMatrix(),m=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function O(e){n.object.isPerspectiveCamera?d*=e:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/e)),n.object.updateProjectionMatrix(),m=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function I(e){v.set(e.clientX,e.clientY)}function D(e){x.set(e.clientX,e.clientY)}function N(e){if(1==e.touches.length)v.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);v.set(t,n)}}function z(e){if(1==e.touches.length)x.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),n=.5*(e.touches[0].pageY+e.touches[1].pageY);x.set(t,n)}}function U(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+n*n);_.set(0,r)}function B(e){if(1==e.touches.length)g.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),r=.5*(e.touches[0].pageY+e.touches[1].pageY);g.set(t,r)}y.subVectors(g,v).multiplyScalar(n.rotateSpeed);var i=n.domElement===document?n.domElement.body:n.domElement;E(2*Math.PI*y.x/i.clientHeight),A(2*Math.PI*y.y/i.clientHeight),v.copy(g)}function F(e){if(1==e.touches.length)b.set(e.touches[0].pageX,e.touches[0].pageY);else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX),r=.5*(e.touches[0].pageY+e.touches[1].pageY);b.set(t,r)}w.subVectors(b,x).multiplyScalar(n.panSpeed),R(w.x,w.y),x.copy(b)}function G(e){var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+r*r);M.set(0,i),T.set(0,Math.pow(M.y/_.y,n.zoomSpeed)),C(T.y),_.copy(M)}function k(e){if(!1!==n.enabled){switch(e.preventDefault(),n.domElement.focus?n.domElement.focus():window.focus(),e.button){case 0:switch(n.mouseButtons.LEFT){case s.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enablePan)return;D(e),l=o.PAN}else{if(!1===n.enableRotate)return;I(e),l=o.ROTATE}break;case s.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enableRotate)return;I(e),l=o.ROTATE}else{if(!1===n.enablePan)return;D(e),l=o.PAN}break;default:l=o.NONE}break;case 1:switch(n.mouseButtons.MIDDLE){case s.DOLLY:if(!1===n.enableZoom)return;!function(e){_.set(e.clientX,e.clientY)}(e),l=o.DOLLY;break;default:l=o.NONE}break;case 2:switch(n.mouseButtons.RIGHT){case s.ROTATE:if(!1===n.enableRotate)return;I(e),l=o.ROTATE;break;case s.PAN:if(!1===n.enablePan)return;D(e),l=o.PAN;break;default:l=o.NONE}}l!==o.NONE&&(document.addEventListener("mousemove",H,!1),document.addEventListener("mouseup",j,!1),n.dispatchEvent(i))}}function H(e){if(!1!==n.enabled)switch(e.preventDefault(),l){case o.ROTATE:if(!1===n.enableRotate)return;!function(e){g.set(e.clientX,e.clientY),y.subVectors(g,v).multiplyScalar(n.rotateSpeed);var t=n.domElement===document?n.domElement.body:n.domElement;E(2*Math.PI*y.x/t.clientHeight),A(2*Math.PI*y.y/t.clientHeight),v.copy(g),n.update()}(e);break;case o.DOLLY:if(!1===n.enableZoom)return;!function(e){M.set(e.clientX,e.clientY),T.subVectors(M,_),T.y>0?C(S()):T.y<0&&O(S()),_.copy(M),n.update()}(e);break;case o.PAN:if(!1===n.enablePan)return;!function(e){b.set(e.clientX,e.clientY),w.subVectors(b,x).multiplyScalar(n.panSpeed),R(w.x,w.y),x.copy(b),n.update()}(e)}}function j(e){!1!==n.enabled&&(document.removeEventListener("mousemove",H,!1),document.removeEventListener("mouseup",j,!1),n.dispatchEvent(a),l=o.NONE)}function V(e){!1===n.enabled||!1===n.enableZoom||l!==o.NONE&&l!==o.ROTATE||(e.preventDefault(),e.stopPropagation(),n.dispatchEvent(i),function(e){e.deltaY<0?O(S()):e.deltaY>0&&C(S()),n.update()}(e),n.dispatchEvent(a))}function W(e){!1!==n.enabled&&!1!==n.enableKeys&&!1!==n.enablePan&&function(e){var t=!1;switch(e.keyCode){case n.keys.UP:R(0,n.keyPanSpeed),t=!0;break;case n.keys.BOTTOM:R(0,-n.keyPanSpeed),t=!0;break;case n.keys.LEFT:R(n.keyPanSpeed,0),t=!0;break;case n.keys.RIGHT:R(-n.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),n.update())}(e)}function X(e){if(!1!==n.enabled){switch(e.preventDefault(),e.touches.length){case 1:switch(n.touches.ONE){case c.ROTATE:if(!1===n.enableRotate)return;N(e),l=o.TOUCH_ROTATE;break;case c.PAN:if(!1===n.enablePan)return;z(e),l=o.TOUCH_PAN;break;default:l=o.NONE}break;case 2:switch(n.touches.TWO){case c.DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(e){n.enableZoom&&U(e),n.enablePan&&z(e)}(e),l=o.TOUCH_DOLLY_PAN;break;case c.DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(e){n.enableZoom&&U(e),n.enableRotate&&N(e)}(e),l=o.TOUCH_DOLLY_ROTATE;break;default:l=o.NONE}break;default:l=o.NONE}l!==o.NONE&&n.dispatchEvent(i)}}function q(e){if(!1!==n.enabled)switch(e.preventDefault(),e.stopPropagation(),l){case o.TOUCH_ROTATE:if(!1===n.enableRotate)return;B(e),n.update();break;case o.TOUCH_PAN:if(!1===n.enablePan)return;F(e),n.update();break;case o.TOUCH_DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(e){n.enableZoom&&G(e),n.enablePan&&F(e)}(e),n.update();break;case o.TOUCH_DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(e){n.enableZoom&&G(e),n.enableRotate&&B(e)}(e),n.update();break;default:l=o.NONE}}function Y(e){!1!==n.enabled&&(n.dispatchEvent(a),l=o.NONE)}function Z(e){!1!==n.enabled&&e.preventDefault()}n.domElement.addEventListener("contextmenu",Z,!1),n.domElement.addEventListener("mousedown",k,!1),n.domElement.addEventListener("wheel",V,!1),n.domElement.addEventListener("touchstart",X,!1),n.domElement.addEventListener("touchend",Y,!1),n.domElement.addEventListener("touchmove",q,!1),window.addEventListener("keydown",W,!1),this.update()};Rc.prototype=Object.create(r.prototype),Rc.prototype.constructor=Rc,Object.defineProperties(Rc.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}});var Cc=function(e,t){Rc.call(this,e,t),this.mouseButtons.LEFT=s.PAN,this.mouseButtons.RIGHT=s.ROTATE,this.touches.ONE=c.PAN,this.touches.TWO=c.DOLLY_ROTATE};(Cc.prototype=Object.create(r.prototype)).constructor=Cc;
/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var Oc={},Ic=void 0,Dc=Oc;function Nc(e,t){var n,r=e.split("."),i=Dc;!(r[0]in i)&&i.execScript&&i.execScript("var "+r[0]);for(;r.length&&(n=r.shift());)r.length||t===Ic?i=i[n]?i[n]:i[n]={}:i[n]=t}var zc="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array&&"undefined"!=typeof DataView;function Uc(e){var t,n,r,i,a,o,s,c,l,h,u=e.length,p=0,d=Number.POSITIVE_INFINITY;for(c=0;c<u;++c)e[c]>p&&(p=e[c]),e[c]<d&&(d=e[c]);for(t=1<<p,n=new(zc?Uint32Array:Array)(t),r=1,i=0,a=2;r<=p;){for(c=0;c<u;++c)if(e[c]===r){for(o=0,s=i,l=0;l<r;++l)o=o<<1|1&s,s>>=1;for(h=r<<16|c,l=o;l<t;l+=a)n[l]=h;++i}++r,i<<=1,a<<=1}return[n,p,d]}function Bc(e,t){switch(this.g=[],this.h=32768,this.d=this.f=this.a=this.l=0,this.input=zc?new Uint8Array(e):e,this.m=!1,this.i=Gc,this.r=!1,!t&&(t={})||(t.index&&(this.a=t.index),t.bufferSize&&(this.h=t.bufferSize),t.bufferType&&(this.i=t.bufferType),t.resize&&(this.r=t.resize)),this.i){case Fc:this.b=32768,this.c=new(zc?Uint8Array:Array)(32768+this.h+258);break;case Gc:this.b=0,this.c=new(zc?Uint8Array:Array)(this.h),this.e=this.z,this.n=this.v,this.j=this.w;break;default:throw Error("invalid inflate mode")}}var Fc=0,Gc=1,kc={t:Fc,s:Gc};Bc.prototype.k=function(){for(;!this.m;){var e=ol(this,3);switch(1&e&&(this.m=!0),e>>>=1){case 0:var t=this.input,n=this.a,r=this.c,i=this.b,a=t.length,o=Ic,s=r.length,c=Ic;if(this.d=this.f=0,n+1>=a)throw Error("invalid uncompressed block header: LEN");if(o=t[n++]|t[n++]<<8,n+1>=a)throw Error("invalid uncompressed block header: NLEN");if(o===~(t[n++]|t[n++]<<8))throw Error("invalid uncompressed block header: length verify");if(n+o>t.length)throw Error("input buffer is broken");switch(this.i){case Fc:for(;i+o>r.length;){if(o-=c=s-i,zc)r.set(t.subarray(n,n+c),i),i+=c,n+=c;else for(;c--;)r[i++]=t[n++];this.b=i,r=this.e(),i=this.b}break;case Gc:for(;i+o>r.length;)r=this.e({p:2});break;default:throw Error("invalid inflate mode")}if(zc)r.set(t.subarray(n,n+o),i),i+=o,n+=o;else for(;o--;)r[i++]=t[n++];this.a=n,this.b=i,this.c=r;break;case 1:this.j(rl,al);break;case 2:var l,h,u,p,d=ol(this,5)+257,f=ol(this,5)+1,m=ol(this,4)+4,v=new(zc?Uint8Array:Array)(Wc.length),g=Ic,y=Ic,x=Ic,b=Ic,w=Ic;for(w=0;w<m;++w)v[Wc[w]]=ol(this,3);if(!zc)for(w=m,m=v.length;w<m;++w)v[Wc[w]]=0;for(l=Uc(v),g=new(zc?Uint8Array:Array)(d+f),w=0,p=d+f;w<p;)switch(y=sl(this,l),y){case 16:for(b=3+ol(this,2);b--;)g[w++]=x;break;case 17:for(b=3+ol(this,3);b--;)g[w++]=0;x=0;break;case 18:for(b=11+ol(this,7);b--;)g[w++]=0;x=0;break;default:x=g[w++]=y}h=Uc(zc?g.subarray(0,d):g.slice(0,d)),u=Uc(zc?g.subarray(d):g.slice(d)),this.j(h,u);break;default:throw Error("unknown BTYPE: "+e)}}return this.n()};var Hc,jc,Vc=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Wc=zc?new Uint16Array(Vc):Vc,Xc=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],qc=zc?new Uint16Array(Xc):Xc,Yc=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],Zc=zc?new Uint8Array(Yc):Yc,Jc=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],Kc=zc?new Uint16Array(Jc):Jc,Qc=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],$c=zc?new Uint8Array(Qc):Qc,el=new(zc?Uint8Array:Array)(288);for(Hc=0,jc=el.length;Hc<jc;++Hc)el[Hc]=143>=Hc?8:255>=Hc?9:279>=Hc?7:8;var tl,nl,rl=Uc(el),il=new(zc?Uint8Array:Array)(30);for(tl=0,nl=il.length;tl<nl;++tl)il[tl]=5;var al=Uc(il);function ol(e,t){for(var n,r=e.f,i=e.d,a=e.input,o=e.a,s=a.length;i<t;){if(o>=s)throw Error("input buffer is broken");r|=a[o++]<<i,i+=8}return n=r&(1<<t)-1,e.f=r>>>t,e.d=i-t,e.a=o,n}function sl(e,t){for(var n,r,i=e.f,a=e.d,o=e.input,s=e.a,c=o.length,l=t[0],h=t[1];a<h&&!(s>=c);)i|=o[s++]<<a,a+=8;if((r=(n=l[i&(1<<h)-1])>>>16)>a)throw Error("invalid code length: "+r);return e.f=i>>r,e.d=a-r,e.a=s,65535&n}function cl(e,t){var n,r;switch(this.input=e,this.a=0,!t&&(t={})||(t.index&&(this.a=t.index),t.verify&&(this.A=t.verify)),n=e[this.a++],r=e[this.a++],15&n){case ll:this.method=ll;break;default:throw Error("unsupported compression method")}if(0!=((n<<8)+r)%31)throw Error("invalid fcheck flag:"+((n<<8)+r)%31);if(32&r)throw Error("fdict flag is not supported");this.q=new Bc(e,{index:this.a,bufferSize:t.bufferSize,bufferType:t.bufferType,resize:t.resize})}Bc.prototype.j=function(e,t){var n=this.c,r=this.b;this.o=e;for(var i,a,o,s,c=n.length-258;256!==(i=sl(this,e));)if(256>i)r>=c&&(this.b=r,n=this.e(),r=this.b),n[r++]=i;else for(s=qc[a=i-257],0<Zc[a]&&(s+=ol(this,Zc[a])),i=sl(this,t),o=Kc[i],0<$c[i]&&(o+=ol(this,$c[i])),r>=c&&(this.b=r,n=this.e(),r=this.b);s--;)n[r]=n[r++-o];for(;8<=this.d;)this.d-=8,this.a--;this.b=r},Bc.prototype.w=function(e,t){var n=this.c,r=this.b;this.o=e;for(var i,a,o,s,c=n.length;256!==(i=sl(this,e));)if(256>i)r>=c&&(c=(n=this.e()).length),n[r++]=i;else for(s=qc[a=i-257],0<Zc[a]&&(s+=ol(this,Zc[a])),i=sl(this,t),o=Kc[i],0<$c[i]&&(o+=ol(this,$c[i])),r+s>c&&(c=(n=this.e()).length);s--;)n[r]=n[r++-o];for(;8<=this.d;)this.d-=8,this.a--;this.b=r},Bc.prototype.e=function(){var e,t,n=new(zc?Uint8Array:Array)(this.b-32768),r=this.b-32768,i=this.c;if(zc)n.set(i.subarray(32768,n.length));else for(e=0,t=n.length;e<t;++e)n[e]=i[e+32768];if(this.g.push(n),this.l+=n.length,zc)i.set(i.subarray(r,r+32768));else for(e=0;32768>e;++e)i[e]=i[r+e];return this.b=32768,i},Bc.prototype.z=function(e){var t,n,r,i=this.input.length/this.a+1|0,a=this.input,o=this.c;return e&&("number"==typeof e.p&&(i=e.p),"number"==typeof e.u&&(i+=e.u)),2>i?n=(r=(a.length-this.a)/this.o[2]/2*258|0)<o.length?o.length+r:o.length<<1:n=o.length*i,zc?(t=new Uint8Array(n)).set(o):t=o,this.c=t},Bc.prototype.n=function(){var e,t,n,r,i,a=0,o=this.c,s=this.g,c=new(zc?Uint8Array:Array)(this.l+(this.b-32768));if(0===s.length)return zc?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);for(t=0,n=s.length;t<n;++t)for(r=0,i=(e=s[t]).length;r<i;++r)c[a++]=e[r];for(t=32768,n=this.b;t<n;++t)c[a++]=o[t];return this.g=[],this.buffer=c},Bc.prototype.v=function(){var e,t=this.b;return zc?this.r?(e=new Uint8Array(t)).set(this.c.subarray(0,t)):e=this.c.subarray(0,t):(this.c.length>t&&(this.c.length=t),e=this.c),this.buffer=e},cl.prototype.k=function(){var e,t,n=this.input;if(e=this.q.k(),this.a=this.q.a,this.A){t=(n[this.a++]<<24|n[this.a++]<<16|n[this.a++]<<8|n[this.a++])>>>0;var r=e;if("string"==typeof r){var i,a,o=r.split("");for(i=0,a=o.length;i<a;i++)o[i]=(255&o[i].charCodeAt(0))>>>0;r=o}for(var s,c=1,l=0,h=r.length,u=0;0<h;){h-=s=1024<h?1024:h;do{l+=c+=r[u++]}while(--s);c%=65521,l%=65521}if(t!==(l<<16|c)>>>0)throw Error("invalid adler-32 checksum")}return e};var ll=8;Nc("Zlib.Inflate",cl),Nc("Zlib.Inflate.prototype.decompress",cl.prototype.k);var hl,ul,pl,dl,fl={ADAPTIVE:kc.s,BLOCK:kc.t};if(Object.keys)hl=Object.keys(fl);else for(ul in hl=[],pl=0,fl)hl[pl++]=ul;for(pl=0,dl=hl.length;pl<dl;++pl)Nc("Zlib.Inflate.BufferType."+(ul=hl[pl]),fl[ul]);var ml=Oc.Zlib,vl={findSpan:function(e,t,n){var r=n.length-e-1;if(t>=n[r])return r-1;if(t<=n[e])return e;for(var i=e,a=r,o=Math.floor((i+a)/2);t<n[o]||t>=n[o+1];)t<n[o]?a=o:i=o,o=Math.floor((i+a)/2);return o},calcBasisFunctions:function(e,t,n,r){var i=[],a=[],o=[];i[0]=1;for(var s=1;s<=n;++s){a[s]=t-r[e+1-s],o[s]=r[e+s]-t;for(var c=0,l=0;l<s;++l){var h=o[l+1],u=a[s-l],p=i[l]/(h+u);i[l]=c+h*p,c=u*p}i[s]=c}return i},calcBSplinePoint:function(e,t,n,r){for(var i=this.findSpan(e,r,t),a=this.calcBasisFunctions(i,r,e,t),o=new Ft(0,0,0,0),s=0;s<=e;++s){var c=n[i-e+s],l=a[s],h=c.w*l;o.x+=c.x*h,o.y+=c.y*h,o.z+=c.z*h,o.w+=c.w*l}return o},calcBasisFunctionDerivatives:function(e,t,n,r,i){for(var a=[],o=0;o<=n;++o)a[o]=0;var s=[];for(o=0;o<=r;++o)s[o]=a.slice(0);var c=[];for(o=0;o<=n;++o)c[o]=a.slice(0);c[0][0]=1;for(var l=a.slice(0),h=a.slice(0),u=1;u<=n;++u){l[u]=t-i[e+1-u],h[u]=i[e+u]-t;for(var p=0,d=0;d<u;++d){var f=h[d+1],m=l[u-d];c[u][d]=f+m;var v=c[d][u-1]/c[u][d];c[d][u]=p+f*v,p=m*v}c[u][u]=p}for(u=0;u<=n;++u)s[0][u]=c[u][n];for(d=0;d<=n;++d){var g=0,y=1,x=[];for(o=0;o<=n;++o)x[o]=a.slice(0);x[0][0]=1;for(var b=1;b<=r;++b){var w=0,_=d-b,M=n-b;d>=b&&(x[y][0]=x[g][0]/c[M+1][_],w=x[y][0]*c[_][M]);var T=d-1<=M?b-1:n-d;for(u=_>=-1?1:-_;u<=T;++u)x[y][u]=(x[g][u]-x[g][u-1])/c[M+1][_+u],w+=x[y][u]*c[_+u][M];d<=M&&(x[y][b]=-x[g][b-1]/c[M+1][d],w+=x[y][b]*c[d][M]),s[b][d]=w;u=g;g=y,y=u}}for(d=n,b=1;b<=r;++b){for(u=0;u<=n;++u)s[b][u]*=d;d*=n-b}return s},calcBSplineDerivatives:function(e,t,n,r,i){for(var a=i<e?i:e,o=[],s=this.findSpan(e,r,t),c=this.calcBasisFunctionDerivatives(s,r,e,a,t),l=[],h=0;h<n.length;++h){var u=(d=n[h].clone()).w;d.x*=u,d.y*=u,d.z*=u,l[h]=d}for(var p=0;p<=a;++p){for(var d=l[s-e].clone().multiplyScalar(c[p][0]),f=1;f<=e;++f)d.add(l[s-e+f].clone().multiplyScalar(c[p][f]));o[p]=d}for(p=a+1;p<=i+1;++p)o[p]=new Ft(0,0,0);return o},calcKoverI:function(e,t){for(var n=1,r=2;r<=e;++r)n*=r;var i=1;for(r=2;r<=t;++r)i*=r;for(r=2;r<=e-t;++r)i*=r;return n/i},calcRationalCurveDerivatives:function(e){for(var t=e.length,n=[],r=[],i=0;i<t;++i){var a=e[i];n[i]=new Ot(a.x,a.y,a.z),r[i]=a.w}for(var o=[],s=0;s<t;++s){var c=n[s].clone();for(i=1;i<=s;++i)c.sub(o[s-i].clone().multiplyScalar(this.calcKoverI(s,i)*r[i]));o[s]=c.divideScalar(r[0])}return o},calcNURBSDerivatives:function(e,t,n,r,i){var a=this.calcBSplineDerivatives(e,t,n,r,i);return this.calcRationalCurveDerivatives(a)},calcSurfacePoint:function(e,t,n,r,i,a,o,s){for(var c=this.findSpan(e,a,n),l=this.findSpan(t,o,r),h=this.calcBasisFunctions(c,a,e,n),u=this.calcBasisFunctions(l,o,t,r),p=[],d=0;d<=t;++d){p[d]=new Ft(0,0,0,0);for(var f=0;f<=e;++f){var m=i[c-e+f][l-t+d].clone(),v=m.w;m.x*=v,m.y*=v,m.z*=v,p[d].add(m.multiplyScalar(h[f]))}}var g=new Ft(0,0,0,0);for(d=0;d<=t;++d)g.add(p[d].multiplyScalar(u[d]));g.divideScalar(g.w),s.set(g.x,g.y,g.z)}},gl=function(e,t,n,r,i){Go.call(this),this.degree=e,this.knots=t,this.controlPoints=[],this.startKnot=r||0,this.endKnot=i||this.knots.length-1;for(var a=0;a<n.length;++a){var o=n[a];this.controlPoints[a]=new Ft(o.x,o.y,o.z,o.w)}};(gl.prototype=Object.create(Go.prototype)).constructor=gl,gl.prototype.getPoint=function(e){var t=this.knots[this.startKnot]+e*(this.knots[this.endKnot]-this.knots[this.startKnot]),n=vl.calcBSplinePoint(this.degree,this.knots,this.controlPoints,t);return 1!=n.w&&n.divideScalar(n.w),new Ot(n.x,n.y,n.z)},gl.prototype.getTangent=function(e){var t=this.knots[0]+e*(this.knots[this.knots.length-1]-this.knots[0]),n=vl.calcNURBSDerivatives(this.degree,this.knots,this.controlPoints,t,1)[1].clone();return n.normalize(),n};!function(){var e,t,n;function r(e){this.manager=void 0!==e?e:Io}function i(e){this.textureLoader=e}function a(){}function o(){}function s(){}function c(){}function l(e,t){this.dv=new DataView(e),this.offset=0,this.littleEndian=void 0===t||t}function h(){}function u(e){var t=e.match(/FBXVersion: (\d+)/);if(t)return parseInt(t[1]);throw new Error("THREE.FBXLoader: Cannot find the version number for the file given.")}function p(e){return e/46186158e3}r.prototype={constructor:r,crossOrigin:"anonymous",load:function(e,t,n,r){var i=this,a=void 0===i.path?ws.extractUrlBase(e):i.path,o=new No(this.manager);o.setPath(i.path),o.setResponseType("arraybuffer"),o.load(e,function(n){try{t(i.parse(n,a))}catch(t){setTimeout(function(){r&&r(t),i.manager.itemError(e)},0)}},n,r)},setPath:function(e){return this.path=e,this},setResourcePath:function(e){return this.resourcePath=e,this},setCrossOrigin:function(e){return this.crossOrigin=e,this},parse:function(t,n){if(function(e){var t="Kaydara FBX Binary  \0";return e.byteLength>=t.length&&t===w(e,0,t.length)}(t))e=(new c).parse(t);else{var r=w(t);if(!function(e){var t=["K","a","y","d","a","r","a","\\","F","B","X","\\","B","i","n","a","r","y","\\","\\"],n=0;function r(t){var r=e[t-1];return e=e.slice(n+t),n++,r}for(var i=0;i<t.length;++i){var a=r(1);if(a===t[i])return!1}return!0}(r))throw new Error("THREE.FBXLoader: Unknown format.");if(u(r)<7e3)throw new Error("THREE.FBXLoader: FBX version not supported, FileVersion: "+u(r));e=(new s).parse(r)}return new i(new Fo(this.manager).setPath(this.resourcePath||n).setCrossOrigin(this.crossOrigin)).parse(e)}},i.prototype={constructor:i,parse:function(){t=this.parseConnections();var e=this.parseImages(),r=this.parseTextures(e),i=this.parseMaterials(r),o=this.parseDeformers(),s=(new a).parse(o);return this.parseScene(o,s,i),n},parseConnections:function(){var t=new Map;"Connections"in e&&e.Connections.connections.forEach(function(e){var n=e[0],r=e[1],i=e[2];t.has(n)||t.set(n,{parents:[],children:[]});var a={ID:r,relationship:i};t.get(n).parents.push(a),t.has(r)||t.set(r,{parents:[],children:[]});var o={ID:n,relationship:i};t.get(r).children.push(o)});return t},parseImages:function(){var t={},n={};if("Video"in e.Objects){var r=e.Objects.Video;for(var i in r){var a=r[i];if(t[l=parseInt(i)]=a.RelativeFilename||a.Filename,"Content"in a){var o=a.Content instanceof ArrayBuffer&&a.Content.byteLength>0,s="string"==typeof a.Content&&""!==a.Content;if(o||s){var c=this.parseImage(r[i]);n[a.RelativeFilename||a.Filename]=c}}}}for(var l in t){var h=t[l];void 0!==n[h]?t[l]=n[h]:t[l]=t[l].split("\\").pop()}return t},parseImage:function(e){var t,n=e.Content,r=e.RelativeFilename||e.Filename,i=r.slice(r.lastIndexOf(".")+1).toLowerCase();switch(i){case"bmp":t="image/bmp";break;case"jpg":case"jpeg":t="image/jpeg";break;case"png":t="image/png";break;case"tif":t="image/tiff";break;case"tga":null===Ns.Handlers.get(".tga")&&console.warn("FBXLoader: TGA loader not found, skipping ",r),t="image/tga";break;default:return void console.warn('FBXLoader: Image type "'+i+'" is not supported.')}if("string"==typeof n)return"data:"+t+";base64,"+n;var a=new Uint8Array(n);return window.URL.createObjectURL(new Blob([a],{type:t}))},parseTextures:function(t){var n=new Map;if("Texture"in e.Objects){var r=e.Objects.Texture;for(var i in r){var a=this.parseTexture(r[i],t);n.set(parseInt(i),a)}}return n},parseTexture:function(e,t){var n=this.loadTexture(e,t);n.ID=e.id,n.name=e.attrName;var r=e.WrapModeU,i=e.WrapModeV,a=void 0!==r?r.value:0,o=void 0!==i?i.value:0;if(n.wrapS=0===a?pe:de,n.wrapT=0===o?pe:de,"Scaling"in e){var s=e.Scaling.value;n.repeat.x=s[0],n.repeat.y=s[1]}return n},loadTexture:function(e,n){var r,i,a=this.textureLoader.path,o=t.get(e.id).children;void 0!==o&&o.length>0&&void 0!==n[o[0].ID]&&(0!==(r=n[o[0].ID]).indexOf("blob:")&&0!==r.indexOf("data:")||this.textureLoader.setPath(void 0));var s=e.FileName.slice(-3).toLowerCase();if("tga"===s){var c=Ns.Handlers.get(".tga");null===c?(console.warn("FBXLoader: TGA loader not found, creating placeholder texture for",e.RelativeFilename),i=new Bt):i=c.load(r)}else"psd"===s?(console.warn("FBXLoader: PSD textures are not supported, creating placeholder texture for",e.RelativeFilename),i=new Bt):i=this.textureLoader.load(r);return this.textureLoader.setPath(a),i},parseMaterials:function(t){var n=new Map;if("Material"in e.Objects){var r=e.Objects.Material;for(var i in r){var a=this.parseMaterial(r[i],t);null!==a&&n.set(parseInt(i),a)}}return n},parseMaterial:function(e,n){var r=e.id,i=e.attrName,a=e.ShadingModel;if("object"==typeof a&&(a=a.value),!t.has(r))return null;var o,s=this.parseParameters(e,n,r);switch(a.toLowerCase()){case"phong":o=new co;break;case"lambert":o=new uo;break;default:console.warn('THREE.FBXLoader: unknown material type "%s". Defaulting to MeshPhongMaterial.',a),o=new co}return o.setValues(s),o.name=i,o},parseParameters:function(e,n,r){var i={};e.BumpFactor&&(i.bumpScale=e.BumpFactor.value),e.Diffuse?i.color=(new en).fromArray(e.Diffuse.value):e.DiffuseColor&&"Color"===e.DiffuseColor.type&&(i.color=(new en).fromArray(e.DiffuseColor.value)),e.DisplacementFactor&&(i.displacementScale=e.DisplacementFactor.value),e.Emissive?i.emissive=(new en).fromArray(e.Emissive.value):e.EmissiveColor&&"Color"===e.EmissiveColor.type&&(i.emissive=(new en).fromArray(e.EmissiveColor.value)),e.EmissiveFactor&&(i.emissiveIntensity=parseFloat(e.EmissiveFactor.value)),e.Opacity&&(i.opacity=parseFloat(e.Opacity.value)),i.opacity<1&&(i.transparent=!0),e.ReflectionFactor&&(i.reflectivity=e.ReflectionFactor.value),e.Shininess&&(i.shininess=e.Shininess.value),e.Specular?i.specular=(new en).fromArray(e.Specular.value):e.SpecularColor&&"Color"===e.SpecularColor.type&&(i.specular=(new en).fromArray(e.SpecularColor.value));var a=this;return t.get(r).children.forEach(function(e){var t=e.relationship;switch(t){case"Bump":i.bumpMap=a.getTexture(n,e.ID);break;case"Maya|TEX_ao_map":i.aoMap=a.getTexture(n,e.ID);break;case"DiffuseColor":case"Maya|TEX_color_map":i.map=a.getTexture(n,e.ID),i.map.encoding=gt;break;case"DisplacementColor":i.displacementMap=a.getTexture(n,e.ID);break;case"EmissiveColor":i.emissiveMap=a.getTexture(n,e.ID),i.emissiveMap.encoding=gt;break;case"NormalMap":case"Maya|TEX_normal_map":i.normalMap=a.getTexture(n,e.ID);break;case"ReflectionColor":i.envMap=a.getTexture(n,e.ID),i.envMap.mapping=se,i.envMap.encoding=gt;break;case"SpecularColor":i.specularMap=a.getTexture(n,e.ID),i.specularMap.encoding=gt;break;case"TransparentColor":i.alphaMap=a.getTexture(n,e.ID),i.transparent=!0;break;case"AmbientColor":case"ShininessExponent":case"SpecularFactor":case"VectorDisplacementColor":default:console.warn("THREE.FBXLoader: %s map is not supported in three.js, skipping texture.",t)}}),i},getTexture:function(n,r){return"LayeredTexture"in e.Objects&&r in e.Objects.LayeredTexture&&(console.warn("THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer."),r=t.get(r).children[0].ID),n.get(r)},parseDeformers:function(){var n={},r={};if("Deformer"in e.Objects){var i=e.Objects.Deformer;for(var a in i){var o=i[a],s=t.get(parseInt(a));if("Skin"===o.attrType){var c=this.parseSkeleton(s,i);c.ID=a,s.parents.length>1&&console.warn("THREE.FBXLoader: skeleton attached to more than one geometry is not supported."),c.geometryID=s.parents[0].ID,n[a]=c}else if("BlendShape"===o.attrType){var l={id:a};l.rawTargets=this.parseMorphTargets(s,i),l.id=a,s.parents.length>1&&console.warn("THREE.FBXLoader: morph target attached to more than one geometry is not supported."),r[a]=l}}}return{skeletons:n,morphTargets:r}},parseSkeleton:function(e,t){var n=[];return e.children.forEach(function(e){var r=t[e.ID];if("Cluster"===r.attrType){var i={ID:e.ID,indices:[],weights:[],transformLink:(new Ht).fromArray(r.TransformLink.a)};"Indexes"in r&&(i.indices=r.Indexes.a,i.weights=r.Weights.a),n.push(i)}}),{rawBones:n,bones:[]}},parseMorphTargets:function(e,n){for(var r=[],i=0;i<e.children.length;i++){var a=e.children[i],o=n[a.ID],s={name:o.attrName,initialWeight:o.DeformPercent,id:o.id,fullWeights:o.FullWeights.a};if("BlendShapeChannel"!==o.attrType)return;s.geoID=t.get(parseInt(a.ID)).children.filter(function(e){return void 0===e.relationship})[0].ID,r.push(s)}return r},parseScene:function(r,i,a){n=new vi;var s=this.parseModels(r.skeletons,i,a),c=e.Objects.Model,l=this;s.forEach(function(e){var r=c[e.ID];l.setLookAtProperties(e,r),t.get(e.ID).parents.forEach(function(t){var n=s.get(t.ID);void 0!==n&&n.add(e)}),null===e.parent&&n.add(e)}),this.bindSkeleton(r.skeletons,i,s),this.createAmbientLight(),this.setupMorphMaterials(),n.traverse(function(e){if(e.userData.transformData){e.parent&&(e.userData.transformData.parentMatrixWorld=e.parent.matrix);var t=g(e.userData.transformData);e.applyMatrix(t)}});var h=(new o).parse();1===n.children.length&&n.children[0].isGroup&&(n.children[0].animations=h,n=n.children[0]),n.animations=h},parseModels:function(n,r,i){var a=new Map,o=e.Objects.Model;for(var s in o){var c=parseInt(s),l=o[s],h=t.get(c),u=this.buildSkeleton(h,n,c,l.attrName);if(!u){switch(l.attrType){case"Camera":u=this.createCamera(h);break;case"Light":u=this.createLight(h);break;case"Mesh":u=this.createMesh(h,r,i);break;case"NurbsCurve":u=this.createCurve(h,r);break;case"LimbNode":case"Root":u=new Di;break;case"Null":default:u=new vi}u.name=$s.sanitizeNodeName(l.attrName),u.ID=c}this.getTransformData(u,l),a.set(c,u)}return a},buildSkeleton:function(e,t,n,r){var i=null;return e.parents.forEach(function(e){for(var a in t){var o=t[a];o.rawBones.forEach(function(t,a){if(t.ID===e.ID){var s=i;(i=new Di).matrixWorld.copy(t.transformLink),i.name=$s.sanitizeNodeName(r),i.ID=n,o.bones[a]=i,null!==s&&i.add(s)}})}}),i},createCamera:function(t){var n,r;if(t.children.forEach(function(t){var n=e.Objects.NodeAttribute[t.ID];void 0!==n&&(r=n)}),void 0===r)n=new qt;else{var i=0;void 0!==r.CameraProjectionType&&1===r.CameraProjectionType.value&&(i=1);var a=1;void 0!==r.NearPlane&&(a=r.NearPlane.value/1e3);var o=1e3;void 0!==r.FarPlane&&(o=r.FarPlane.value/1e3);var s=window.innerWidth,c=window.innerHeight;void 0!==r.AspectWidth&&void 0!==r.AspectHeight&&(s=r.AspectWidth.value,c=r.AspectHeight.value);var l=s/c,h=45;void 0!==r.FieldOfView&&(h=r.FieldOfView.value);var u=r.FocalLength?r.FocalLength.value:null;switch(i){case 0:n=new Nn(h,l,a,o),null!==u&&n.setFocalLength(u);break;case 1:n=new ms(-s/2,s/2,c/2,-c/2,a,o);break;default:console.warn("THREE.FBXLoader: Unknown camera type "+i+"."),n=new qt}}return n},createLight:function(t){var n,r;if(t.children.forEach(function(t){var n=e.Objects.NodeAttribute[t.ID];void 0!==n&&(r=n)}),void 0===r)n=new qt;else{var i;i=void 0===r.LightType?0:r.LightType.value;var a=16777215;void 0!==r.Color&&(a=(new en).fromArray(r.Color.value));var o=void 0===r.Intensity?1:r.Intensity.value/100;void 0!==r.CastLightOnObject&&0===r.CastLightOnObject.value&&(o=0);var s=0;void 0!==r.FarAttenuationEnd&&(s=void 0!==r.EnableFarAttenuation&&0===r.EnableFarAttenuation.value?0:r.FarAttenuationEnd.value);switch(i){case 0:n=new fs(a,o,s,1);break;case 1:n=new gs(a,o);break;case 2:var c=Math.PI/3;void 0!==r.InnerAngle&&(c=Pt.degToRad(r.InnerAngle.value));var l=0;void 0!==r.OuterAngle&&(l=Pt.degToRad(r.OuterAngle.value),l=Math.max(l,1)),n=new ds(a,o,s,c,l,1);break;default:console.warn("THREE.FBXLoader: Unknown light type "+r.LightType.value+", defaulting to a PointLight."),n=new fs(a,o)}void 0!==r.CastShadows&&1===r.CastShadows.value&&(n.castShadow=!0)}return n},createMesh:function(e,t,n){var r,i=null,a=null,o=[];return e.children.forEach(function(e){t.has(e.ID)&&(i=t.get(e.ID)),n.has(e.ID)&&o.push(n.get(e.ID))}),o.length>1?a=o:o.length>0?a=o[0]:(a=new co({color:13421772}),o.push(a)),"color"in i.attributes&&o.forEach(function(e){e.vertexColors=x}),i.FBX_Deformer?(o.forEach(function(e){e.skinning=!0}),(r=new Oi(i,a)).normalizeSkinWeights()):r=new Mn(i,a),r},createCurve:function(e,t){return new zi(e.children.reduce(function(e,n){return t.has(n.ID)&&(e=t.get(n.ID)),e},null),new Ni({color:3342591,linewidth:1}))},getTransformData:function(e,t){var n={};"InheritType"in t&&(n.inheritType=parseInt(t.InheritType.value)),n.eulerOrder="RotationOrder"in t?y(t.RotationOrder.value):"ZYX","Lcl_Translation"in t&&(n.translation=t.Lcl_Translation.value),"PreRotation"in t&&(n.preRotation=t.PreRotation.value),"Lcl_Rotation"in t&&(n.rotation=t.Lcl_Rotation.value),"PostRotation"in t&&(n.postRotation=t.PostRotation.value),"Lcl_Scaling"in t&&(n.scale=t.Lcl_Scaling.value),"ScalingOffset"in t&&(n.scalingOffset=t.ScalingOffset.value),"ScalingPivot"in t&&(n.scalingPivot=t.ScalingPivot.value),"RotationOffset"in t&&(n.rotationOffset=t.RotationOffset.value),"RotationPivot"in t&&(n.rotationPivot=t.RotationPivot.value),e.userData.transformData=n},setLookAtProperties:function(r,i){"LookAtProperty"in i&&t.get(r.ID).children.forEach(function(t){if("LookAtProperty"===t.relationship){var i=e.Objects.Model[t.ID];if("Lcl_Translation"in i){var a=i.Lcl_Translation.value;void 0!==r.target?(r.target.position.fromArray(a),n.add(r.target)):r.lookAt((new Ot).fromArray(a))}}})},bindSkeleton:function(e,n,r){var i=this.parsePoseNodes();for(var a in e){var o=e[a];t.get(parseInt(o.ID)).parents.forEach(function(e){if(n.has(e.ID)){var a=e.ID;t.get(a).parents.forEach(function(e){r.has(e.ID)&&r.get(e.ID).bind(new Ii(o.bones),i[e.ID])})}})}},parsePoseNodes:function(){var t={};if("Pose"in e.Objects){var n=e.Objects.Pose;for(var r in n)if("BindPose"===n[r].attrType){var i=n[r].PoseNode;Array.isArray(i)?i.forEach(function(e){t[e.Node]=(new Ht).fromArray(e.Matrix.a)}):t[i.Node]=(new Ht).fromArray(i.Matrix.a)}}return t},createAmbientLight:function(){if("GlobalSettings"in e&&"AmbientColor"in e.GlobalSettings){var t=e.GlobalSettings.AmbientColor.value,r=t[0],i=t[1],a=t[2];if(0!==r||0!==i||0!==a){var o=new en(r,i,a);n.add(new ys(o,1))}}},setupMorphMaterials:function(){var e=this;n.traverse(function(t){t.isMesh&&t.geometry.morphAttributes.position&&t.geometry.morphAttributes.position.length&&(Array.isArray(t.material)?t.material.forEach(function(n,r){e.setupMorphMaterial(t,n,r)}):e.setupMorphMaterial(t,t.material))})},setupMorphMaterial:function(e,t,r){var i=e.uuid,a=t.uuid,o=!1;if(n.traverse(function(e){e.isMesh&&(Array.isArray(e.material)?e.material.forEach(function(t){t.uuid===a&&e.uuid!==i&&(o=!0)}):e.material.uuid===a&&e.uuid!==i&&(o=!0))}),!0===o){var s=t.clone();s.morphTargets=!0,void 0===r?e.material=s:e.material[r]=s}else t.morphTargets=!0}},a.prototype={constructor:a,parse:function(n){var r=new Map;if("Geometry"in e.Objects){var i=e.Objects.Geometry;for(var a in i){var o=t.get(parseInt(a)),s=this.parseGeometry(o,i[a],n);r.set(parseInt(a),s)}}return r},parseGeometry:function(e,t,n){switch(t.attrType){case"Mesh":return this.parseMeshGeometry(e,t,n);case"NurbsCurve":return this.parseNurbsGeometry(t)}},parseMeshGeometry:function(t,n,r){var i=r.skeletons,a=r.morphTargets,o=t.parents.map(function(t){return e.Objects.Model[t.ID]});if(0!==o.length){var s=t.children.reduce(function(e,t){return void 0!==i[t.ID]&&(e=i[t.ID]),e},null),c=t.children.reduce(function(e,t){return void 0!==a[t.ID]&&(e=a[t.ID]),e},null),l=o[0],h={};"RotationOrder"in l&&(h.eulerOrder=y(l.RotationOrder.value)),"InheritType"in l&&(h.inheritType=parseInt(l.InheritType.value)),"GeometricTranslation"in l&&(h.translation=l.GeometricTranslation.value),"GeometricRotation"in l&&(h.rotation=l.GeometricRotation.value),"GeometricScaling"in l&&(h.scale=l.GeometricScaling.value);var u=g(h);return this.genGeometry(n,s,c,u)}},genGeometry:function(e,t,n,r){var i=new _n;e.attrName&&(i.name=e.attrName);var a=this.parseGeoNode(e,t),o=this.genBuffers(a),s=new gn(o.vertex,3);if(r.applyToBufferAttribute(s),i.addAttribute("position",s),o.colors.length>0&&i.addAttribute("color",new gn(o.colors,3)),t&&(i.addAttribute("skinIndex",new fn(o.weightsIndices,4)),i.addAttribute("skinWeight",new gn(o.vertexWeights,4)),i.FBX_Deformer=t),o.normal.length>0){var c=new gn(o.normal,3);(new It).getNormalMatrix(r).applyToBufferAttribute(c),i.addAttribute("normal",c)}if(o.uvs.forEach(function(e,t){var n="uv"+(t+1).toString();0===t&&(n="uv"),i.addAttribute(n,new gn(o.uvs[t],2))}),a.material&&"AllSame"!==a.material.mappingType){var l=o.materialIndex[0],h=0;if(o.materialIndex.forEach(function(e,t){e!==l&&(i.addGroup(h,t-h,l),l=e,h=t)}),i.groups.length>0){var u=i.groups[i.groups.length-1],p=u.start+u.count;p!==o.materialIndex.length&&i.addGroup(p,o.materialIndex.length-p,l)}0===i.groups.length&&i.addGroup(0,o.materialIndex.length,o.materialIndex[0])}return this.addMorphTargets(i,e,n,r),i},parseGeoNode:function(e,t){var n={};if(n.vertexPositions=void 0!==e.Vertices?e.Vertices.a:[],n.vertexIndices=void 0!==e.PolygonVertexIndex?e.PolygonVertexIndex.a:[],e.LayerElementColor&&(n.color=this.parseVertexColors(e.LayerElementColor[0])),e.LayerElementMaterial&&(n.material=this.parseMaterialIndices(e.LayerElementMaterial[0])),e.LayerElementNormal&&(n.normal=this.parseNormals(e.LayerElementNormal[0])),e.LayerElementUV){n.uv=[];for(var r=0;e.LayerElementUV[r];)n.uv.push(this.parseUVs(e.LayerElementUV[r])),r++}return n.weightTable={},null!==t&&(n.skeleton=t,t.rawBones.forEach(function(e,t){e.indices.forEach(function(r,i){void 0===n.weightTable[r]&&(n.weightTable[r]=[]),n.weightTable[r].push({id:t,weight:e.weights[i]})})})),n},genBuffers:function(e){var t={vertex:[],normal:[],colors:[],uvs:[],materialIndex:[],vertexWeights:[],weightsIndices:[]},n=0,r=0,i=!1,a=[],o=[],s=[],c=[],l=[],h=[],u=this;return e.vertexIndices.forEach(function(p,d){var m=!1;p<0&&(p^=-1,m=!0);var v=[],g=[];if(a.push(3*p,3*p+1,3*p+2),e.color){var y=f(d,n,p,e.color);s.push(y[0],y[1],y[2])}if(e.skeleton){if(void 0!==e.weightTable[p]&&e.weightTable[p].forEach(function(e){g.push(e.weight),v.push(e.id)}),g.length>4){i||(console.warn("THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights."),i=!0);var x=[0,0,0,0],b=[0,0,0,0];g.forEach(function(e,t){var n=e,r=v[t];b.forEach(function(e,t,i){if(n>e){i[t]=n,n=e;var a=x[t];x[t]=r,r=a}})}),v=x,g=b}for(;g.length<4;)g.push(0),v.push(0);for(var w=0;w<4;++w)l.push(g[w]),h.push(v[w])}if(e.normal){y=f(d,n,p,e.normal);o.push(y[0],y[1],y[2])}if(e.material&&"AllSame"!==e.material.mappingType)var _=f(d,n,p,e.material)[0];e.uv&&e.uv.forEach(function(e,t){var r=f(d,n,p,e);void 0===c[t]&&(c[t]=[]),c[t].push(r[0]),c[t].push(r[1])}),r++,m&&(u.genFace(t,e,a,_,o,s,c,l,h,r),n++,r=0,a=[],o=[],s=[],c=[],l=[],h=[])}),t},genFace:function(e,t,n,r,i,a,o,s,c,l){for(var h=2;h<l;h++)e.vertex.push(t.vertexPositions[n[0]]),e.vertex.push(t.vertexPositions[n[1]]),e.vertex.push(t.vertexPositions[n[2]]),e.vertex.push(t.vertexPositions[n[3*(h-1)]]),e.vertex.push(t.vertexPositions[n[3*(h-1)+1]]),e.vertex.push(t.vertexPositions[n[3*(h-1)+2]]),e.vertex.push(t.vertexPositions[n[3*h]]),e.vertex.push(t.vertexPositions[n[3*h+1]]),e.vertex.push(t.vertexPositions[n[3*h+2]]),t.skeleton&&(e.vertexWeights.push(s[0]),e.vertexWeights.push(s[1]),e.vertexWeights.push(s[2]),e.vertexWeights.push(s[3]),e.vertexWeights.push(s[4*(h-1)]),e.vertexWeights.push(s[4*(h-1)+1]),e.vertexWeights.push(s[4*(h-1)+2]),e.vertexWeights.push(s[4*(h-1)+3]),e.vertexWeights.push(s[4*h]),e.vertexWeights.push(s[4*h+1]),e.vertexWeights.push(s[4*h+2]),e.vertexWeights.push(s[4*h+3]),e.weightsIndices.push(c[0]),e.weightsIndices.push(c[1]),e.weightsIndices.push(c[2]),e.weightsIndices.push(c[3]),e.weightsIndices.push(c[4*(h-1)]),e.weightsIndices.push(c[4*(h-1)+1]),e.weightsIndices.push(c[4*(h-1)+2]),e.weightsIndices.push(c[4*(h-1)+3]),e.weightsIndices.push(c[4*h]),e.weightsIndices.push(c[4*h+1]),e.weightsIndices.push(c[4*h+2]),e.weightsIndices.push(c[4*h+3])),t.color&&(e.colors.push(a[0]),e.colors.push(a[1]),e.colors.push(a[2]),e.colors.push(a[3*(h-1)]),e.colors.push(a[3*(h-1)+1]),e.colors.push(a[3*(h-1)+2]),e.colors.push(a[3*h]),e.colors.push(a[3*h+1]),e.colors.push(a[3*h+2])),t.material&&"AllSame"!==t.material.mappingType&&(e.materialIndex.push(r),e.materialIndex.push(r),e.materialIndex.push(r)),t.normal&&(e.normal.push(i[0]),e.normal.push(i[1]),e.normal.push(i[2]),e.normal.push(i[3*(h-1)]),e.normal.push(i[3*(h-1)+1]),e.normal.push(i[3*(h-1)+2]),e.normal.push(i[3*h]),e.normal.push(i[3*h+1]),e.normal.push(i[3*h+2])),t.uv&&t.uv.forEach(function(t,n){void 0===e.uvs[n]&&(e.uvs[n]=[]),e.uvs[n].push(o[n][0]),e.uvs[n].push(o[n][1]),e.uvs[n].push(o[n][2*(h-1)]),e.uvs[n].push(o[n][2*(h-1)+1]),e.uvs[n].push(o[n][2*h]),e.uvs[n].push(o[n][2*h+1])})},addMorphTargets:function(t,n,r,i){if(null!==r){t.morphAttributes.position=[];var a=this;r.rawTargets.forEach(function(r){var o=e.Objects.Geometry[r.geoID];void 0!==o&&a.genMorphGeometry(t,n,o,i,r.name)})}},genMorphGeometry:function(e,t,n,r,i){var a=new _n;n.attrName&&(a.name=n.attrName);for(var o=void 0!==t.PolygonVertexIndex?t.PolygonVertexIndex.a:[],s=void 0!==t.Vertices?t.Vertices.a.slice():[],c=void 0!==n.Vertices?n.Vertices.a:[],l=void 0!==n.Indexes?n.Indexes.a:[],h=0;h<l.length;h++){var u=3*l[h];s[u]+=c[3*h],s[u+1]+=c[3*h+1],s[u+2]+=c[3*h+2]}var p={vertexIndices:o,vertexPositions:s},d=new gn(this.genBuffers(p).vertex,3);d.name=i||n.attrName,r.applyToBufferAttribute(d),e.morphAttributes.position.push(d)},parseNormals:function(e){var t=e.MappingInformationType,n=e.ReferenceInformationType,r=e.Normals.a,i=[];return"IndexToDirect"===n&&("NormalIndex"in e?i=e.NormalIndex.a:"NormalsIndex"in e&&(i=e.NormalsIndex.a)),{dataSize:3,buffer:r,indices:i,mappingType:t,referenceType:n}},parseUVs:function(e){var t=e.MappingInformationType,n=e.ReferenceInformationType,r=e.UV.a,i=[];return"IndexToDirect"===n&&(i=e.UVIndex.a),{dataSize:2,buffer:r,indices:i,mappingType:t,referenceType:n}},parseVertexColors:function(e){var t=e.MappingInformationType,n=e.ReferenceInformationType,r=e.Colors.a,i=[];return"IndexToDirect"===n&&(i=e.ColorIndex.a),{dataSize:4,buffer:r,indices:i,mappingType:t,referenceType:n}},parseMaterialIndices:function(e){var t=e.MappingInformationType,n=e.ReferenceInformationType;if("NoMappingInformation"===t)return{dataSize:1,buffer:[0],indices:[0],mappingType:"AllSame",referenceType:n};for(var r=e.Materials.a,i=[],a=0;a<r.length;++a)i.push(a);return{dataSize:1,buffer:r,indices:i,mappingType:t,referenceType:n}},parseNurbsGeometry:function(e){if(void 0===gl)return console.error("THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry."),new _n;var t=parseInt(e.Order);if(isNaN(t))return console.error("THREE.FBXLoader: Invalid Order %s given for geometry ID: %s",e.Order,e.id),new _n;for(var n,r,i=t-1,a=e.KnotVector.a,o=[],s=e.Points.a,c=0,l=s.length;c<l;c+=4)o.push((new Ft).fromArray(s,c));if("Closed"===e.Form)o.push(o[0]);else if("Periodic"===e.Form){n=i,r=a.length-1-n;for(c=0;c<i;++c)o.push(o[c])}var h=new gl(i,a,o,n,r).getPoints(7*o.length),u=new Float32Array(3*h.length);h.forEach(function(e,t){e.toArray(u,3*t)});var p=new _n;return p.addAttribute("position",new ln(u,3)),p}},o.prototype={constructor:o,parse:function(){var e=[],t=this.parseClips();if(void 0!==t)for(var n in t){var r=t[n],i=this.addClip(r);e.push(i)}return e},parseClips:function(){if(void 0!==e.Objects.AnimationCurve){var t=this.parseAnimationCurveNodes();this.parseAnimationCurves(t);var n=this.parseAnimationLayers(t);return this.parseAnimStacks(n)}},parseAnimationCurveNodes:function(){var t=e.Objects.AnimationCurveNode,n=new Map;for(var r in t){var i=t[r];if(null!==i.attrName.match(/S|R|T|DeformPercent/)){var a={id:i.id,attr:i.attrName,curves:{}};n.set(a.id,a)}}return n},parseAnimationCurves:function(n){var r=e.Objects.AnimationCurve;for(var i in r){var a={id:r[i].id,times:r[i].KeyTime.a.map(p),values:r[i].KeyValueFloat.a},o=t.get(a.id);if(void 0!==o){var s=o.parents[0].ID,c=o.parents[0].relationship;c.match(/X/)?n.get(s).curves.x=a:c.match(/Y/)?n.get(s).curves.y=a:c.match(/Z/)?n.get(s).curves.z=a:c.match(/d|DeformPercent/)&&n.has(s)&&(n.get(s).curves.morph=a)}}},parseAnimationLayers:function(r){var i=e.Objects.AnimationLayer,a=new Map;for(var o in i){var s=[],c=t.get(parseInt(o));if(void 0!==c)c.children.forEach(function(i,a){if(r.has(i.ID)){var o=r.get(i.ID);if(void 0!==o.curves.x||void 0!==o.curves.y||void 0!==o.curves.z){if(void 0===s[a])if(void 0!==(d=t.get(i.ID).parents.filter(function(e){return void 0!==e.relationship})[0].ID)){var c=e.Objects.Model[d.toString()],l={modelName:$s.sanitizeNodeName(c.attrName),ID:c.id,initialPosition:[0,0,0],initialRotation:[0,0,0],initialScale:[1,1,1]};n.traverse(function(e){e.ID===c.id&&(l.transform=e.matrix,e.userData.transformData&&(l.eulerOrder=e.userData.transformData.eulerOrder))}),l.transform||(l.transform=new Ht),"PreRotation"in c&&(l.preRotation=c.PreRotation.value),"PostRotation"in c&&(l.postRotation=c.PostRotation.value),s[a]=l}s[a]&&(s[a][o.attr]=o)}else if(void 0!==o.curves.morph){if(void 0===s[a]){var h=t.get(i.ID).parents.filter(function(e){return void 0!==e.relationship})[0].ID,u=t.get(h).parents[0].ID,p=t.get(u).parents[0].ID,d=t.get(p).parents[0].ID;c=e.Objects.Model[d],l={modelName:$s.sanitizeNodeName(c.attrName),morphName:e.Objects.Deformer[h].attrName};s[a]=l}s[a][o.attr]=o}}}),a.set(parseInt(o),s)}return a},parseAnimStacks:function(n){var r=e.Objects.AnimationStack,i={};for(var a in r){var o=t.get(parseInt(a)).children;o.length>1&&console.warn("THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.");var s=n.get(o[0].ID);i[a]={name:r[a].attrName,layer:s}}return i},addClip:function(e){var t=[],n=this;return e.layer.forEach(function(e){t=t.concat(n.generateTracks(e))}),new Po(e.name,-1,t)},generateTracks:function(e){var t=[],n=new Ot,r=new Ct,i=new Ot;if(e.transform&&e.transform.decompose(n,r,i),n=n.toArray(),r=(new jt).setFromQuaternion(r,e.eulerOrder).toArray(),i=i.toArray(),void 0!==e.T&&Object.keys(e.T.curves).length>0){var a=this.generateVectorTrack(e.modelName,e.T.curves,n,"position");void 0!==a&&t.push(a)}if(void 0!==e.R&&Object.keys(e.R.curves).length>0){var o=this.generateRotationTrack(e.modelName,e.R.curves,r,e.preRotation,e.postRotation,e.eulerOrder);void 0!==o&&t.push(o)}if(void 0!==e.S&&Object.keys(e.S.curves).length>0){var s=this.generateVectorTrack(e.modelName,e.S.curves,i,"scale");void 0!==s&&t.push(s)}if(void 0!==e.DeformPercent){var c=this.generateMorphTrack(e);void 0!==c&&t.push(c)}return t},generateVectorTrack:function(e,t,n,r){var i=this.getTimesForAllAxes(t);return new Lo(e+"."+r,i,this.getKeyframeTrackValues(i,t,n))},generateRotationTrack:function(e,t,n,r,i,a){void 0!==t.x&&(this.interpolateRotations(t.x),t.x.values=t.x.values.map(Pt.degToRad)),void 0!==t.y&&(this.interpolateRotations(t.y),t.y.values=t.y.values.map(Pt.degToRad)),void 0!==t.z&&(this.interpolateRotations(t.z),t.z.values=t.z.values.map(Pt.degToRad));var o=this.getTimesForAllAxes(t),s=this.getKeyframeTrackValues(o,t,n);void 0!==r&&((r=r.map(Pt.degToRad)).push(a),r=(new jt).fromArray(r),r=(new Ct).setFromEuler(r)),void 0!==i&&((i=i.map(Pt.degToRad)).push(a),i=(new jt).fromArray(i),i=(new Ct).setFromEuler(i).inverse());for(var c=new Ct,l=new jt,h=[],u=0;u<s.length;u+=3)l.set(s[u],s[u+1],s[u+2],a),c.setFromEuler(l),void 0!==r&&c.premultiply(r),void 0!==i&&c.multiply(i),c.toArray(h,u/3*4);return new Eo(e+".quaternion",o,h)},generateMorphTrack:function(e){var t=e.DeformPercent.curves.morph,r=t.values.map(function(e){return e/100}),i=n.getObjectByName(e.modelName).morphTargetDictionary[e.morphName];return new To(e.modelName+".morphTargetInfluences["+i+"]",t.times,r)},getTimesForAllAxes:function(e){var t=[];return void 0!==e.x&&(t=t.concat(e.x.times)),void 0!==e.y&&(t=t.concat(e.y.times)),void 0!==e.z&&(t=t.concat(e.z.times)),t=t.sort(function(e,t){return e-t}).filter(function(e,t,n){return n.indexOf(e)==t})},getKeyframeTrackValues:function(e,t,n){var r=n,i=[],a=-1,o=-1,s=-1;return e.forEach(function(e){if(t.x&&(a=t.x.times.indexOf(e)),t.y&&(o=t.y.times.indexOf(e)),t.z&&(s=t.z.times.indexOf(e)),-1!==a){var n=t.x.values[a];i.push(n),r[0]=n}else i.push(r[0]);if(-1!==o){var c=t.y.values[o];i.push(c),r[1]=c}else i.push(r[1]);if(-1!==s){var l=t.z.values[s];i.push(l),r[2]=l}else i.push(r[2])}),i},interpolateRotations:function(e){for(var t=1;t<e.values.length;t++){var n=e.values[t-1],r=e.values[t]-n,i=Math.abs(r);if(i>=180){for(var a=i/180,o=r/a,s=n+o,c=e.times[t-1],l=(e.times[t]-c)/a,h=c+l,u=[],p=[];h<e.times[t];)u.push(h),h+=l,p.push(s),s+=o;e.times=_(e.times,t,u),e.values=_(e.values,t,p)}}}},s.prototype={constructor:s,getPrevNode:function(){return this.nodeStack[this.currentIndent-2]},getCurrentNode:function(){return this.nodeStack[this.currentIndent-1]},getCurrentProp:function(){return this.currentProp},pushStack:function(e){this.nodeStack.push(e),this.currentIndent+=1},popStack:function(){this.nodeStack.pop(),this.currentIndent-=1},setCurrentProp:function(e,t){this.currentProp=e,this.currentPropName=t},parse:function(e){this.currentIndent=0,this.allNodes=new h,this.nodeStack=[],this.currentProp=[],this.currentPropName="";var t=this,n=e.split(/[\r\n]+/);return n.forEach(function(e,r){var i=e.match(/^[\s\t]*;/),a=e.match(/^[\s\t]*$/);if(!i&&!a){var o=e.match("^\\t{"+t.currentIndent+"}(\\w+):(.*){",""),s=e.match("^\\t{"+t.currentIndent+"}(\\w+):[\\s\\t\\r\\n](.*)"),c=e.match("^\\t{"+(t.currentIndent-1)+"}}");o?t.parseNodeBegin(e,o):s?t.parseNodeProperty(e,s,n[++r]):c?t.popStack():e.match(/^[^\s\t}]/)&&t.parseNodePropertyContinued(e)}}),this.allNodes},parseNodeBegin:function(e,t){var n=t[1].trim().replace(/^"/,"").replace(/"$/,""),r=t[2].split(",").map(function(e){return e.trim().replace(/^"/,"").replace(/"$/,"")}),i={name:n},a=this.parseNodeAttr(r),o=this.getCurrentNode();0===this.currentIndent?this.allNodes.add(n,i):n in o?("PoseNode"===n?o.PoseNode.push(i):void 0!==o[n].id&&(o[n]={},o[n][o[n].id]=o[n]),""!==a.id&&(o[n][a.id]=i)):"number"==typeof a.id?(o[n]={},o[n][a.id]=i):"Properties70"!==n&&(o[n]="PoseNode"===n?[i]:i),"number"==typeof a.id&&(i.id=a.id),""!==a.name&&(i.attrName=a.name),""!==a.type&&(i.attrType=a.type),this.pushStack(i)},parseNodeAttr:function(e){var t=e[0];""!==e[0]&&(t=parseInt(e[0]),isNaN(t)&&(t=e[0]));var n="",r="";return e.length>1&&(n=e[1].replace(/^(\w+)::/,""),r=e[2]),{id:t,name:n,type:r}},parseNodeProperty:function(e,t,n){var r=t[1].replace(/^"/,"").replace(/"$/,"").trim(),i=t[2].replace(/^"/,"").replace(/"$/,"").trim();"Content"===r&&","===i&&(i=n.replace(/"/g,"").replace(/,$/,"").trim());var a=this.getCurrentNode();if("Properties70"!==a.name){if("C"===r){var o=i.split(",").slice(1),s=parseInt(o[0]),c=parseInt(o[1]),l=i.split(",").slice(3);r="connections",function(e,t){for(var n=0,r=e.length,i=t.length;n<i;n++,r++)e[r]=t[n]}(i=[s,c],l=l.map(function(e){return e.trim().replace(/^"/,"")})),void 0===a[r]&&(a[r]=[])}"Node"===r&&(a.id=i),r in a&&Array.isArray(a[r])?a[r].push(i):"a"!==r?a[r]=i:a.a=i,this.setCurrentProp(a,r),"a"===r&&","!==i.slice(-1)&&(a.a=b(i))}else this.parseNodeSpecialProperty(e,r,i)},parseNodePropertyContinued:function(e){var t=this.getCurrentNode();t.a+=e,","!==e.slice(-1)&&(t.a=b(t.a))},parseNodeSpecialProperty:function(e,t,n){var r=n.split('",').map(function(e){return e.trim().replace(/^\"/,"").replace(/\s/,"_")}),i=r[0],a=r[1],o=r[2],s=r[3],c=r[4];switch(a){case"int":case"enum":case"bool":case"ULongLong":case"double":case"Number":case"FieldOfView":c=parseFloat(c);break;case"Color":case"ColorRGB":case"Vector3D":case"Lcl_Translation":case"Lcl_Rotation":case"Lcl_Scaling":c=b(c)}this.getPrevNode()[i]={type:a,type2:o,flag:s,value:c},this.setCurrentProp(this.getPrevNode(),i)}},c.prototype={constructor:c,parse:function(e){var t=new l(e);t.skip(23);var n=t.getUint32();console.log("THREE.FBXLoader: FBX binary version: "+n);for(var r=new h;!this.endOfContent(t);){var i=this.parseNode(t,n);null!==i&&r.add(i.name,i)}return r},endOfContent:function(e){return e.size()%16==0?(e.getOffset()+160+16&-16)>=e.size():e.getOffset()+160+16>=e.size()},parseNode:function(e,t){var n={},r=t>=7500?e.getUint64():e.getUint32(),i=t>=7500?e.getUint64():e.getUint32(),a=(t>=7500?e.getUint64():e.getUint32(),e.getUint8()),o=e.getString(a);if(0===r)return null;for(var s=[],c=0;c<i;c++)s.push(this.parseProperty(e));var l=s.length>0?s[0]:"",h=s.length>1?s[1]:"",u=s.length>2?s[2]:"";for(n.singleProperty=1===i&&e.getOffset()===r;r>e.getOffset();){var p=this.parseNode(e,t);null!==p&&this.parseSubNode(o,n,p)}return n.propertyList=s,"number"==typeof l&&(n.id=l),""!==h&&(n.attrName=h),""!==u&&(n.attrType=u),""!==o&&(n.name=o),n},parseSubNode:function(e,t,n){if(!0===n.singleProperty){var r=n.propertyList[0];Array.isArray(r)?(t[n.name]=n,n.a=r):t[n.name]=r}else if("Connections"===e&&"C"===n.name){var i=[];n.propertyList.forEach(function(e,t){0!==t&&i.push(e)}),void 0===t.connections&&(t.connections=[]),t.connections.push(i)}else if("Properties70"===n.name){Object.keys(n).forEach(function(e){t[e]=n[e]})}else if("Properties70"===e&&"P"===n.name){var a,o=n.propertyList[0],s=n.propertyList[1],c=n.propertyList[2],l=n.propertyList[3];0===o.indexOf("Lcl ")&&(o=o.replace("Lcl ","Lcl_")),0===s.indexOf("Lcl ")&&(s=s.replace("Lcl ","Lcl_")),a="Color"===s||"ColorRGB"===s||"Vector"===s||"Vector3D"===s||0===s.indexOf("Lcl_")?[n.propertyList[4],n.propertyList[5],n.propertyList[6]]:n.propertyList[4],t[o]={type:s,type2:c,flag:l,value:a}}else void 0===t[n.name]?"number"==typeof n.id?(t[n.name]={},t[n.name][n.id]=n):t[n.name]=n:"PoseNode"===n.name?(Array.isArray(t[n.name])||(t[n.name]=[t[n.name]]),t[n.name].push(n)):void 0===t[n.name][n.id]&&(t[n.name][n.id]=n)},parseProperty:function(e){var t=e.getString(1);switch(t){case"C":return e.getBoolean();case"D":return e.getFloat64();case"F":return e.getFloat32();case"I":return e.getInt32();case"L":return e.getInt64();case"R":var n=e.getUint32();return e.getArrayBuffer(n);case"S":n=e.getUint32();return e.getString(n);case"Y":return e.getInt16();case"b":case"c":case"d":case"f":case"i":case"l":var r=e.getUint32(),i=e.getUint32(),a=e.getUint32();if(0===i)switch(t){case"b":case"c":return e.getBooleanArray(r);case"d":return e.getFloat64Array(r);case"f":return e.getFloat32Array(r);case"i":return e.getInt32Array(r);case"l":return e.getInt64Array(r)}void 0===ml&&console.error("THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js");var o=new l(new ml.Inflate(new Uint8Array(e.getArrayBuffer(a))).decompress().buffer);switch(t){case"b":case"c":return o.getBooleanArray(r);case"d":return o.getFloat64Array(r);case"f":return o.getFloat32Array(r);case"i":return o.getInt32Array(r);case"l":return o.getInt64Array(r)}default:throw new Error("THREE.FBXLoader: Unknown property type "+t)}}},l.prototype={constructor:l,getOffset:function(){return this.offset},size:function(){return this.dv.buffer.byteLength},skip:function(e){this.offset+=e},getBoolean:function(){return 1==(1&this.getUint8())},getBooleanArray:function(e){for(var t=[],n=0;n<e;n++)t.push(this.getBoolean());return t},getUint8:function(){var e=this.dv.getUint8(this.offset);return this.offset+=1,e},getInt16:function(){var e=this.dv.getInt16(this.offset,this.littleEndian);return this.offset+=2,e},getInt32:function(){var e=this.dv.getInt32(this.offset,this.littleEndian);return this.offset+=4,e},getInt32Array:function(e){for(var t=[],n=0;n<e;n++)t.push(this.getInt32());return t},getUint32:function(){var e=this.dv.getUint32(this.offset,this.littleEndian);return this.offset+=4,e},getInt64:function(){var e,t;return this.littleEndian?(e=this.getUint32(),t=this.getUint32()):(t=this.getUint32(),e=this.getUint32()),2147483648&t?(t=4294967295&~t,4294967295===(e=4294967295&~e)&&(t=t+1&4294967295),-(4294967296*t+(e=e+1&4294967295))):4294967296*t+e},getInt64Array:function(e){for(var t=[],n=0;n<e;n++)t.push(this.getInt64());return t},getUint64:function(){var e,t;return this.littleEndian?(e=this.getUint32(),t=this.getUint32()):(t=this.getUint32(),e=this.getUint32()),4294967296*t+e},getFloat32:function(){var e=this.dv.getFloat32(this.offset,this.littleEndian);return this.offset+=4,e},getFloat32Array:function(e){for(var t=[],n=0;n<e;n++)t.push(this.getFloat32());return t},getFloat64:function(){var e=this.dv.getFloat64(this.offset,this.littleEndian);return this.offset+=8,e},getFloat64Array:function(e){for(var t=[],n=0;n<e;n++)t.push(this.getFloat64());return t},getArrayBuffer:function(e){var t=this.dv.buffer.slice(this.offset,this.offset+e);return this.offset+=e,t},getString:function(e){for(var t=[],n=0;n<e;n++)t[n]=this.getUint8();var r=t.indexOf(0);return r>=0&&(t=t.slice(0,r)),ws.decodeText(new Uint8Array(t))}},h.prototype={constructor:h,add:function(e,t){this[e]=t}};var d=[];function f(e,t,n,r){var i;switch(r.mappingType){case"ByPolygonVertex":i=e;break;case"ByPolygon":i=t;break;case"ByVertice":i=n;break;case"AllSame":i=r.indices[0];break;default:console.warn("THREE.FBXLoader: unknown attribute mapping type "+r.mappingType)}"IndexToDirect"===r.referenceType&&(i=r.indices[i]);var a=i*r.dataSize,o=a+r.dataSize;return function(e,t,n,r){for(var i=n,a=0;i<r;i++,a++)e[a]=t[i];return e}(d,r.buffer,a,o)}var m=new jt,v=new Ot;function g(e){var t,n=new Ht,r=new Ht,i=new Ht,a=new Ht,o=new Ht,s=new Ht,c=new Ht,l=new Ht,h=new Ht,u=new Ht,p=new Ht,d=e.inheritType?e.inheritType:0;(e.translation&&n.setPosition(v.fromArray(e.translation)),e.preRotation)&&((t=e.preRotation.map(Pt.degToRad)).push(e.eulerOrder),r.makeRotationFromEuler(m.fromArray(t)));e.rotation&&((t=e.rotation.map(Pt.degToRad)).push(e.eulerOrder),i.makeRotationFromEuler(m.fromArray(t)));e.postRotation&&((t=e.postRotation.map(Pt.degToRad)).push(e.eulerOrder),a.makeRotationFromEuler(m.fromArray(t)));e.scale&&o.scale(v.fromArray(e.scale)),e.scalingOffset&&c.setPosition(v.fromArray(e.scalingOffset)),e.scalingPivot&&s.setPosition(v.fromArray(e.scalingPivot)),e.rotationOffset&&l.setPosition(v.fromArray(e.rotationOffset)),e.rotationPivot&&h.setPosition(v.fromArray(e.rotationPivot)),e.parentMatrixWorld&&(u=e.parentMatrixWorld);var f=r.multiply(i).multiply(a),g=new Ht;u.extractRotation(g);var y,x,b,w,_=new Ht;if(_.copyPosition(u),b=_.getInverse(_).multiply(u),x=g.getInverse(g).multiply(b),y=o,0===d)w=g.multiply(f).multiply(x).multiply(y);else if(1===d)w=g.multiply(x).multiply(f).multiply(y);else{var M=(new Ht).copy(o),T=x.multiply(M.getInverse(M));w=g.multiply(f).multiply(T).multiply(y)}var S=n.multiply(l).multiply(h).multiply(r).multiply(i).multiply(a).multiply(h.getInverse(h)).multiply(c).multiply(s).multiply(o).multiply(s.getInverse(s)),E=(new Ht).copyPosition(S),A=u.multiply(E);return p.copyPosition(A),S=p.multiply(w)}function y(e){var t=["ZYX","YZX","XZY","ZXY","YXZ","XYZ"];return 6===(e=e||0)?(console.warn("THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect."),t[0]):t[e]}function b(e){return e.split(",").map(function(e){return parseFloat(e)})}function w(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=e.byteLength),ws.decodeText(new Uint8Array(e,t,n))}function _(e,t,n){return e.slice(0,t).concat(n).concat(e.slice(t))}}();var yl=function(){function e(e){this.manager=void 0!==e?e:Io,this.dracoLoader=null,this.ddsLoader=null}e.prototype={constructor:e,crossOrigin:"anonymous",load:function(e,t,n,r){var i,a=this;i=void 0!==this.resourcePath?this.resourcePath:void 0!==this.path?this.path:ws.extractUrlBase(e),a.manager.itemStart(e);var o=function(t){r?r(t):console.error(t),a.manager.itemError(e),a.manager.itemEnd(e)},s=new No(a.manager);s.setPath(this.path),s.setResponseType("arraybuffer"),"use-credentials"===a.crossOrigin&&s.setWithCredentials(!0),s.load(e,function(n){try{a.parse(n,i,function(n){t(n),a.manager.itemEnd(e)},o)}catch(e){o(e)}},n,o)},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this},setResourcePath:function(e){return this.resourcePath=e,this},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,u,p,d){var f,m={};if("string"==typeof e)f=e;else if(ws.decodeText(new Uint8Array(e,0,4))===a){try{m[t.KHR_BINARY_GLTF]=new function(e){this.name=t.KHR_BINARY_GLTF,this.content=null,this.body=null;var n=new DataView(e,0,o);if(this.header={magic:ws.decodeText(new Uint8Array(e.slice(0,4))),version:n.getUint32(4,!0),length:n.getUint32(8,!0)},this.header.magic!==a)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.");var r=new DataView(e,o),i=0;for(;i<r.byteLength;){var c=r.getUint32(i,!0);i+=4;var l=r.getUint32(i,!0);if(i+=4,l===s.JSON){var h=new Uint8Array(e,o+i,c);this.content=ws.decodeText(h)}else if(l===s.BIN){var u=o+i;this.body=e.slice(u,u+c)}i+=c}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}(e)}catch(e){return void(d&&d(e))}f=m[t.KHR_BINARY_GLTF].content}else f=ws.decodeText(new Uint8Array(e));var v=JSON.parse(f);if(void 0===v.asset||v.asset.version[0]<2)d&&d(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead."));else{if(v.extensionsUsed)for(var g=0;g<v.extensionsUsed.length;++g){var y=v.extensionsUsed[g],x=v.extensionsRequired||[];switch(y){case t.KHR_LIGHTS_PUNCTUAL:m[y]=new r(v);break;case t.KHR_MATERIALS_UNLIT:m[y]=new i;break;case t.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:m[y]=new h;break;case t.KHR_DRACO_MESH_COMPRESSION:m[y]=new c(v,this.dracoLoader);break;case t.MSFT_TEXTURE_DDS:m[t.MSFT_TEXTURE_DDS]=new n(this.ddsLoader);break;case t.KHR_TEXTURE_TRANSFORM:m[t.KHR_TEXTURE_TRANSFORM]=new l;break;default:x.indexOf(y)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+y+'".')}}new k(v,m,{path:u||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(p,d)}}};var t={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function n(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=t.MSFT_TEXTURE_DDS,this.ddsLoader=e}function r(e){this.name=t.KHR_LIGHTS_PUNCTUAL;var n=e.extensions&&e.extensions[t.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=n.lights||[]}function i(){this.name=t.KHR_MATERIALS_UNLIT}r.prototype.loadLight=function(e){var t,n=this.lightDefs[e],r=new en(16777215);void 0!==n.color&&r.fromArray(n.color);var i=void 0!==n.range?n.range:0;switch(n.type){case"directional":(t=new gs(r)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new fs(r)).distance=i;break;case"spot":(t=new ds(r)).distance=i,n.spot=n.spot||{},n.spot.innerConeAngle=void 0!==n.spot.innerConeAngle?n.spot.innerConeAngle:0,n.spot.outerConeAngle=void 0!==n.spot.outerConeAngle?n.spot.outerConeAngle:Math.PI/4,t.angle=n.spot.outerConeAngle,t.penumbra=1-n.spot.innerConeAngle/n.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+n.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==n.intensity&&(t.intensity=n.intensity),t.name=n.name||"light_"+e,Promise.resolve(t)},i.prototype.getMaterialType=function(){return cn},i.prototype.extendParams=function(e,t,n){var r=[];e.color=new en(1,1,1),e.opacity=1;var i=t.pbrMetallicRoughness;if(i){if(Array.isArray(i.baseColorFactor)){var a=i.baseColorFactor;e.color.fromArray(a),e.opacity=a[3]}void 0!==i.baseColorTexture&&r.push(n.assignTexture(e,"map",i.baseColorTexture))}return Promise.all(r)};var a="glTF",o=12,s={JSON:1313821514,BIN:5130562};function c(e,n){if(!n)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=t.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=n}function l(){this.name=t.KHR_TEXTURE_TRANSFORM}function h(){return{name:t.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return In},extendParams:function(e,t,n){var r=t.extensions[this.name],i=Wn.standard,a=Rn.clone(i.uniforms),o=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),s=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),c=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),l=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),h=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),u=i.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;").replace("uniform float metalness;","uniform float glossiness;").replace("#include <roughnessmap_pars_fragment>",o).replace("#include <metalnessmap_pars_fragment>",s).replace("#include <roughnessmap_fragment>",c).replace("#include <metalnessmap_fragment>",l).replace("#include <lights_physical_fragment>",h);delete a.roughness,delete a.metalness,delete a.roughnessMap,delete a.metalnessMap,a.specular={value:(new en).setHex(1118481)},a.glossiness={value:.5},a.specularMap={value:null},a.glossinessMap={value:null},e.vertexShader=i.vertexShader,e.fragmentShader=u,e.uniforms=a,e.defines={STANDARD:""},e.color=new en(1,1,1),e.opacity=1;var p=[];if(Array.isArray(r.diffuseFactor)){var d=r.diffuseFactor;e.color.fromArray(d),e.opacity=d[3]}if(void 0!==r.diffuseTexture&&p.push(n.assignTexture(e,"map",r.diffuseTexture)),e.emissive=new en(0,0,0),e.glossiness=void 0!==r.glossinessFactor?r.glossinessFactor:1,e.specular=new en(1,1,1),Array.isArray(r.specularFactor)&&e.specular.fromArray(r.specularFactor),void 0!==r.specularGlossinessTexture){var f=r.specularGlossinessTexture;p.push(n.assignTexture(e,"glossinessMap",f)),p.push(n.assignTexture(e,"specularMap",f))}return Promise.all(p)},createMaterial:function(e){var t=new In({defines:e.defines,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,uniforms:e.uniforms,fog:!0,lights:!0,opacity:e.opacity,transparent:e.transparent});return t.isGLTFSpecularGlossinessMaterial=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t.extensions.derivatives=!0,t},cloneMaterial:function(e){var t=e.clone();t.isGLTFSpecularGlossinessMaterial=!0;for(var n=this.specularGlossinessParams,r=0,i=n.length;r<i;r++){var a=e[n[r]];t[n[r]]=a&&a.isColor?a.clone():a}return t},refreshUniforms:function(e,t,n,r,i){if(!0===i.isGLTFSpecularGlossinessMaterial){var a,o=i.uniforms,s=i.defines;o.opacity.value=i.opacity,o.diffuse.value.copy(i.color),o.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),o.map.value=i.map,o.specularMap.value=i.specularMap,o.alphaMap.value=i.alphaMap,o.lightMap.value=i.lightMap,o.lightMapIntensity.value=i.lightMapIntensity,o.aoMap.value=i.aoMap,o.aoMapIntensity.value=i.aoMapIntensity,i.map?a=i.map:i.specularMap?a=i.specularMap:i.displacementMap?a=i.displacementMap:i.normalMap?a=i.normalMap:i.bumpMap?a=i.bumpMap:i.glossinessMap?a=i.glossinessMap:i.alphaMap?a=i.alphaMap:i.emissiveMap&&(a=i.emissiveMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),o.uvTransform.value.copy(a.matrix)),i.envMap&&(o.envMap.value=i.envMap,o.envMapIntensity.value=i.envMapIntensity,o.flipEnvMap.value=i.envMap.isCubeTexture?-1:1,o.reflectivity.value=i.reflectivity,o.refractionRatio.value=i.refractionRatio,o.maxMipLevel.value=e.properties.get(i.envMap).__maxMipLevel),o.specular.value.copy(i.specular),o.glossiness.value=i.glossiness,o.glossinessMap.value=i.glossinessMap,o.emissiveMap.value=i.emissiveMap,o.bumpMap.value=i.bumpMap,o.normalMap.value=i.normalMap,o.displacementMap.value=i.displacementMap,o.displacementScale.value=i.displacementScale,o.displacementBias.value=i.displacementBias,null!==o.glossinessMap.value&&void 0===s.USE_GLOSSINESSMAP&&(s.USE_GLOSSINESSMAP="",s.USE_ROUGHNESSMAP=""),null===o.glossinessMap.value&&void 0!==s.USE_GLOSSINESSMAP&&(delete s.USE_GLOSSINESSMAP,delete s.USE_ROUGHNESSMAP)}}}}function u(e,t,n,r){go.call(this,e,t,n,r)}c.prototype.decodePrimitive=function(e,t){var n=this.json,r=this.dracoLoader,i=e.extensions[this.name].bufferView,a=e.extensions[this.name].attributes,o={},s={},c={};for(var l in a){var h=A[l]||l.toLowerCase();o[h]=a[l]}for(l in e.attributes){h=A[l]||l.toLowerCase();if(void 0!==a[l]){var u=n.accessors[e.attributes[l]],p=M[u.componentType];c[h]=p,s[h]=!0===u.normalized}}return t.getDependency("bufferView",i).then(function(e){return new Promise(function(t){r.decodeDracoFile(e,function(e){for(var n in e.attributes){var r=e.attributes[n],i=s[n];void 0!==i&&(r.normalized=i)}t(e)},o,c)})})},l.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},u.prototype=Object.create(go.prototype),u.prototype.constructor=u,u.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,n=this.sampleValues,r=this.valueSize,i=e*r*3+r,a=0;a!==r;a++)t[a]=n[i+a];return t},u.prototype.beforeStart_=u.prototype.copySampleValue_,u.prototype.afterEnd_=u.prototype.copySampleValue_,u.prototype.interpolate_=function(e,t,n,r){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=2*o,c=3*o,l=r-t,h=(n-t)/l,u=h*h,p=u*h,d=e*c,f=d-c,m=-2*p+3*u,v=p-u,g=1-m,y=v-u+h,x=0;x!==o;x++){var b=a[f+x+o],w=a[f+x+s]*l,_=a[d+x+o],M=a[d+x]*l;i[x]=g*b+y*w+m*_+v*M}return i};var p,d=0,m=1,g=2,y=3,b=4,w=5,_=6,M={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},T={9728:me,9729:ye,9984:ve,9985:xe,9986:ge,9987:be},S={33071:de,33648:fe,10497:pe},E={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},A={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},L={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},P={CUBICSPLINE:void 0,LINEAR:2301,STEP:2300},R="OPAQUE",C="MASK",O="BLEND",I={"image/png":Ne,"image/jpeg":De};function D(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)?e:/^data:.*,.*$/i.test(e)?e:/^blob:.*$/i.test(e)?e:t+e)}function N(e,t,n){for(var r in n.extensions)void 0===e[r]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[r]=n.extensions[r])}function z(e,t){void 0!==t.extras&&("object"==typeof t.extras?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function U(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var n=0,r=t.weights.length;n<r;n++)e.morphTargetInfluences[n]=t.weights[n];if(t.extras&&Array.isArray(t.extras.targetNames)){var i=t.extras.targetNames;if(e.morphTargetInfluences.length===i.length){e.morphTargetDictionary={};for(n=0,r=i.length;n<r;n++)e.morphTargetDictionary[i[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function B(e){var n=e.extensions&&e.extensions[t.KHR_DRACO_MESH_COMPRESSION];return n?"draco:"+n.bufferView+":"+n.indices+":"+F(n.attributes):e.indices+":"+F(e.attributes)+":"+e.mode}function F(e){for(var t="",n=Object.keys(e).sort(),r=0,i=n.length;r<i;r++)t+=n[r]+":"+e[n[r]]+";";return t}function G(e){if(e.isInterleavedBufferAttribute){for(var t=e.count,n=e.itemSize,r=e.array.slice(0,t*n),i=0,a=0;i<t;++i)r[a++]=e.getX(i),n>=2&&(r[a++]=e.getY(i)),n>=3&&(r[a++]=e.getZ(i)),n>=4&&(r[a++]=e.getW(i));return new ln(r,n,e.normalized)}return e.clone()}function k(e,t,n){this.json=e||{},this.extensions=t||{},this.options=n||{},this.cache=new function(){var e={};return{get:function(t){return e[t]},add:function(t,n){e[t]=n},remove:function(t){delete e[t]},removeAll:function(){e={}}}},this.primitiveCache={},this.textureLoader=new Fo(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new No(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function H(e,t,n){var r=t.attributes,i=[];function a(t,r){return n.getDependency("accessor",t).then(function(t){e.addAttribute(r,t)})}for(var o in r){var s=A[o]||o.toLowerCase();s in e.attributes||i.push(a(r[o],s))}if(void 0!==t.indices&&!e.index){var c=n.getDependency("accessor",t.indices).then(function(t){e.setIndex(t)});i.push(c)}return z(e,t),Promise.all(i).then(function(){return void 0!==t.targets?function(e,t,n){for(var r=!1,i=!1,a=0,o=t.length;a<o&&(void 0!==(l=t[a]).POSITION&&(r=!0),void 0!==l.NORMAL&&(i=!0),!r||!i);a++);if(!r&&!i)return Promise.resolve(e);var s=[],c=[];for(a=0,o=t.length;a<o;a++){var l=t[a];if(r){var h=void 0!==l.POSITION?n.getDependency("accessor",l.POSITION):e.attributes.position;s.push(h)}i&&(h=void 0!==l.NORMAL?n.getDependency("accessor",l.NORMAL):e.attributes.normal,c.push(h))}return Promise.all([Promise.all(s),Promise.all(c)]).then(function(n){for(var a=n[0],o=n[1],s=0,c=a.length;s<c;s++)e.attributes.position!==a[s]&&(a[s]=G(a[s]));for(s=0,c=o.length;s<c;s++)e.attributes.normal!==o[s]&&(o[s]=G(o[s]));for(s=0,c=t.length;s<c;s++){var l=t[s],h="morphTarget"+s;if(r&&void 0!==l.POSITION){var u=a[s];u.name=h;for(var p=e.attributes.position,d=0,f=u.count;d<f;d++)u.setXYZ(d,u.getX(d)+p.getX(d),u.getY(d)+p.getY(d),u.getZ(d)+p.getZ(d))}if(i&&void 0!==l.NORMAL){var m=o[s];m.name=h;var v=e.attributes.normal;for(d=0,f=m.count;d<f;d++)m.setXYZ(d,m.getX(d)+v.getX(d),m.getY(d)+v.getY(d),m.getZ(d)+v.getZ(d))}}return r&&(e.morphAttributes.position=a),i&&(e.morphAttributes.normal=o),e})}(e,t.targets,n):e})}return k.prototype.parse=function(e,t){var n=this,r=this.json,i=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then(function(t){var a={scene:t[0][r.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:r.asset,parser:n,userData:{}};N(i,a,r),z(a,r),e(a)}).catch(t)},k.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[],r={},i={},a=0,o=t.length;a<o;a++)for(var s=t[a].joints,c=0,l=s.length;c<l;c++)e[s[c]].isBone=!0;for(var h=0,u=e.length;h<u;h++){var p=e[h];void 0!==p.mesh&&(void 0===r[p.mesh]&&(r[p.mesh]=i[p.mesh]=0),r[p.mesh]++,void 0!==p.skin&&(n[p.mesh].isSkinnedMesh=!0))}this.json.meshReferences=r,this.json.meshUses=i},k.prototype.getDependency=function(e,n){var r=e+":"+n,i=this.cache.get(r);if(!i){switch(e){case"scene":i=this.loadScene(n);break;case"node":i=this.loadNode(n);break;case"mesh":i=this.loadMesh(n);break;case"accessor":i=this.loadAccessor(n);break;case"bufferView":i=this.loadBufferView(n);break;case"buffer":i=this.loadBuffer(n);break;case"material":i=this.loadMaterial(n);break;case"texture":i=this.loadTexture(n);break;case"skin":i=this.loadSkin(n);break;case"animation":i=this.loadAnimation(n);break;case"camera":i=this.loadCamera(n);break;case"light":i=this.extensions[t.KHR_LIGHTS_PUNCTUAL].loadLight(n);break;default:throw new Error("Unknown type: "+e)}this.cache.add(r,i)}return i},k.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var n=this,r=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(r.map(function(t,r){return n.getDependency(e,r)})),this.cache.add(e,t)}return t},k.prototype.loadBuffer=function(e){var n=this.json.buffers[e],r=this.fileLoader;if(n.type&&"arraybuffer"!==n.type)throw new Error("THREE.GLTFLoader: "+n.type+" buffer type is not supported.");if(void 0===n.uri&&0===e)return Promise.resolve(this.extensions[t.KHR_BINARY_GLTF].body);var i=this.options;return new Promise(function(e,t){r.load(D(n.uri,i.path),e,void 0,function(){t(new Error('THREE.GLTFLoader: Failed to load buffer "'+n.uri+'".'))})})},k.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then(function(e){var n=t.byteLength||0,r=t.byteOffset||0;return e.slice(r,r+n)})},k.prototype.loadAccessor=function(e){var t=this,n=this.json,r=this.json.accessors[e];if(void 0===r.bufferView&&void 0===r.sparse)return Promise.resolve(null);var i=[];return void 0!==r.bufferView?i.push(this.getDependency("bufferView",r.bufferView)):i.push(null),void 0!==r.sparse&&(i.push(this.getDependency("bufferView",r.sparse.indices.bufferView)),i.push(this.getDependency("bufferView",r.sparse.values.bufferView))),Promise.all(i).then(function(e){var i,a=e[0],o=E[r.type],s=M[r.componentType],c=s.BYTES_PER_ELEMENT,l=c*o,h=r.byteOffset||0,u=void 0!==r.bufferView?n.bufferViews[r.bufferView].byteStride:void 0,p=!0===r.normalized;if(u&&u!==l){var d=Math.floor(h/u),f="InterleavedBuffer:"+r.bufferView+":"+r.componentType+":"+d+":"+r.count,m=t.cache.get(f);m||(m=new Ai(new s(a,d*u,r.count*u/c),u/c),t.cache.add(f,m)),i=new Li(m,o,h%u/c,p)}else i=new ln(null===a?new s(r.count*o):new s(a,h,r.count*o),o,p);if(void 0!==r.sparse){var v=E.SCALAR,g=M[r.sparse.indices.componentType],y=r.sparse.indices.byteOffset||0,x=r.sparse.values.byteOffset||0,b=new g(e[1],y,r.sparse.count*v),w=new s(e[2],x,r.sparse.count*o);null!==a&&i.setArray(i.array.slice());for(var _=0,T=b.length;_<T;_++){var S=b[_];if(i.setX(S,w[_*o]),o>=2&&i.setY(S,w[_*o+1]),o>=3&&i.setZ(S,w[_*o+2]),o>=4&&i.setW(S,w[_*o+3]),o>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i})},k.prototype.loadTexture=function(e){var n,r=this,i=this.json,a=this.options,o=this.textureLoader,s=window.URL||window.webkitURL,c=i.textures[e],l=c.extensions||{},h=(n=l[t.MSFT_TEXTURE_DDS]?i.images[l[t.MSFT_TEXTURE_DDS].source]:i.images[c.source]).uri,u=!1;return void 0!==n.bufferView&&(h=r.getDependency("bufferView",n.bufferView).then(function(e){u=!0;var t=new Blob([e],{type:n.mimeType});return h=s.createObjectURL(t)})),Promise.resolve(h).then(function(e){var n=Ns.Handlers.get(e);return n||(n=l[t.MSFT_TEXTURE_DDS]?r.extensions[t.MSFT_TEXTURE_DDS].ddsLoader:o),new Promise(function(t,r){n.load(D(e,a.path),t,void 0,r)})}).then(function(e){!0===u&&s.revokeObjectURL(h),e.flipY=!1,void 0!==c.name&&(e.name=c.name),n.mimeType in I&&(e.format=I[n.mimeType]);var t=(i.samplers||{})[c.sampler]||{};return e.magFilter=T[t.magFilter]||ye,e.minFilter=T[t.minFilter]||be,e.wrapS=S[t.wrapS]||pe,e.wrapT=S[t.wrapT]||pe,e})},k.prototype.assignTexture=function(e,n,r){var i=this;return this.getDependency("texture",r.index).then(function(a){if(!a.isCompressedTexture)switch(n){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":a.format=De}if(i.extensions[t.KHR_TEXTURE_TRANSFORM]){var o=void 0!==r.extensions?r.extensions[t.KHR_TEXTURE_TRANSFORM]:void 0;o&&(a=i.extensions[t.KHR_TEXTURE_TRANSFORM].extendTexture(a,o))}e[n]=a})},k.prototype.assignFinalMaterial=function(e){var n=e.geometry,r=e.material,i=this.extensions,a=void 0!==n.attributes.tangent,o=void 0!==n.attributes.color,s=void 0===n.attributes.normal,c=!0===e.isSkinnedMesh,l=Object.keys(n.morphAttributes).length>0,h=l&&void 0!==n.morphAttributes.normal;if(e.isPoints){var u="PointsMaterial:"+r.uuid,p=this.cache.get(u);p||(p=new Fi,sn.prototype.copy.call(p,r),p.color.copy(r.color),p.map=r.map,p.lights=!1,this.cache.add(u,p)),r=p}else if(e.isLine){u="LineBasicMaterial:"+r.uuid;var d=this.cache.get(u);d||(d=new Ni,sn.prototype.copy.call(d,r),d.color.copy(r.color),d.lights=!1,this.cache.add(u,d)),r=d}if(a||o||s||c||l){u="ClonedMaterial:"+r.uuid+":";r.isGLTFSpecularGlossinessMaterial&&(u+="specular-glossiness:"),c&&(u+="skinning:"),a&&(u+="vertex-tangents:"),o&&(u+="vertex-colors:"),s&&(u+="flat-shading:"),l&&(u+="morph-targets:"),h&&(u+="morph-normals:");var f=this.cache.get(u);f||(f=r.isGLTFSpecularGlossinessMaterial?i[t.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].cloneMaterial(r):r.clone(),c&&(f.skinning=!0),a&&(f.vertexTangents=!0),o&&(f.vertexColors=x),s&&(f.flatShading=!0),l&&(f.morphTargets=!0),h&&(f.morphNormals=!0),this.cache.add(u,f)),r=f}r.aoMap&&void 0===n.attributes.uv2&&void 0!==n.attributes.uv&&(console.log("THREE.GLTFLoader: Duplicating UVs to support aoMap."),n.addAttribute("uv2",new ln(n.attributes.uv.array,2))),r.isGLTFSpecularGlossinessMaterial&&(e.onBeforeRender=i[t.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].refreshUniforms),e.material=r},k.prototype.loadMaterial=function(e){var n,r=this.json,i=this.extensions,a=r.materials[e],o={},s=a.extensions||{},c=[];if(s[t.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var l=i[t.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];n=l.getMaterialType(),c.push(l.extendParams(o,a,this))}else if(s[t.KHR_MATERIALS_UNLIT]){var h=i[t.KHR_MATERIALS_UNLIT];n=h.getMaterialType(),c.push(h.extendParams(o,a,this))}else{n=oo;var u=a.pbrMetallicRoughness||{};if(o.color=new en(1,1,1),o.opacity=1,Array.isArray(u.baseColorFactor)){var p=u.baseColorFactor;o.color.fromArray(p),o.opacity=p[3]}void 0!==u.baseColorTexture&&c.push(this.assignTexture(o,"map",u.baseColorTexture)),o.metalness=void 0!==u.metallicFactor?u.metallicFactor:1,o.roughness=void 0!==u.roughnessFactor?u.roughnessFactor:1,void 0!==u.metallicRoughnessTexture&&(c.push(this.assignTexture(o,"metalnessMap",u.metallicRoughnessTexture)),c.push(this.assignTexture(o,"roughnessMap",u.metallicRoughnessTexture)))}!0===a.doubleSided&&(o.side=v);var d=a.alphaMode||R;return d===O?o.transparent=!0:(o.transparent=!1,d===C&&(o.alphaTest=void 0!==a.alphaCutoff?a.alphaCutoff:.5)),void 0!==a.normalTexture&&n!==cn&&(c.push(this.assignTexture(o,"normalMap",a.normalTexture)),o.normalScale=new Rt(1,1),void 0!==a.normalTexture.scale&&o.normalScale.set(a.normalTexture.scale,a.normalTexture.scale)),void 0!==a.occlusionTexture&&n!==cn&&(c.push(this.assignTexture(o,"aoMap",a.occlusionTexture)),void 0!==a.occlusionTexture.strength&&(o.aoMapIntensity=a.occlusionTexture.strength)),void 0!==a.emissiveFactor&&n!==cn&&(o.emissive=(new en).fromArray(a.emissiveFactor)),void 0!==a.emissiveTexture&&n!==cn&&c.push(this.assignTexture(o,"emissiveMap",a.emissiveTexture)),Promise.all(c).then(function(){var e;return e=n===In?i[t.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(o):new n(o),void 0!==a.name&&(e.name=a.name),e.map&&(e.map.encoding=gt),e.emissiveMap&&(e.emissiveMap.encoding=gt),e.specularMap&&(e.specularMap.encoding=gt),z(e,a),a.extensions&&N(i,e,a),e})},k.prototype.loadGeometries=function(e){var n=this,r=this.extensions,i=this.primitiveCache;function a(e){return r[t.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,n).then(function(t){return H(t,e,n)})}for(var o=[],s=0,c=e.length;s<c;s++){var l,h=e[s],u=B(h),p=i[u];if(p)o.push(p.promise);else l=h.extensions&&h.extensions[t.KHR_DRACO_MESH_COMPRESSION]?a(h):H(new _n,h,n),i[u]={primitive:h,promise:l},o.push(l)}return Promise.all(o)},k.prototype.loadMesh=function(e){for(var t=this,n=this.json.meshes[e],r=n.primitives,i=[],a=0,o=r.length;a<o;a++){var s=void 0===r[a].material?p=p||new oo({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:f}):this.getDependency("material",r[a].material);i.push(s)}return Promise.all(i).then(function(i){return t.loadGeometries(r).then(function(a){for(var o=[],s=0,c=a.length;s<c;s++){var l,h=a[s],u=r[s],p=i[s];if(u.mode===b||u.mode===w||u.mode===_||void 0===u.mode)!0!==(l=!0===n.isSkinnedMesh?new Oi(h,p):new Mn(h,p)).isSkinnedMesh||l.geometry.attributes.skinWeight.normalized||l.normalizeSkinWeights(),u.mode===w?l.drawMode=ft:u.mode===_&&(l.drawMode=mt);else if(u.mode===m)l=new Ui(h,p);else if(u.mode===y)l=new zi(h,p);else if(u.mode===g)l=new Bi(h,p);else{if(u.mode!==d)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+u.mode);l=new Gi(h,p)}Object.keys(l.geometry.morphAttributes).length>0&&U(l,n),l.name=n.name||"mesh_"+e,a.length>1&&(l.name+="_"+s),z(l,n),t.assignFinalMaterial(l),o.push(l)}if(1===o.length)return o[0];var f=new vi;for(s=0,c=o.length;s<c;s++)f.add(o[s]);return f})})},k.prototype.loadCamera=function(e){var t,n=this.json.cameras[e],r=n[n.type];if(r)return"perspective"===n.type?t=new Nn(Pt.radToDeg(r.yfov),r.aspectRatio||1,r.znear||1,r.zfar||2e6):"orthographic"===n.type&&(t=new ms(r.xmag/-2,r.xmag/2,r.ymag/2,r.ymag/-2,r.znear,r.zfar)),void 0!==n.name&&(t.name=n.name),z(t,n),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},k.prototype.loadSkin=function(e){var t=this.json.skins[e],n={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(n):this.getDependency("accessor",t.inverseBindMatrices).then(function(e){return n.inverseBindMatrices=e,n})},k.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],n=[],r=[],i=[],a=[],o=[],s=0,c=t.channels.length;s<c;s++){var l=t.channels[s],h=t.samplers[l.sampler],p=l.target,d=void 0!==p.node?p.node:p.id,f=void 0!==t.parameters?t.parameters[h.input]:h.input,m=void 0!==t.parameters?t.parameters[h.output]:h.output;n.push(this.getDependency("node",d)),r.push(this.getDependency("accessor",f)),i.push(this.getDependency("accessor",m)),a.push(h),o.push(p)}return Promise.all([Promise.all(n),Promise.all(r),Promise.all(i),Promise.all(a),Promise.all(o)]).then(function(n){for(var r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],c=[],l=0,h=r.length;l<h;l++){var p=r[l],d=i[l],f=a[l],m=o[l],v=s[l];if(void 0!==p){var g;switch(p.updateMatrix(),p.matrixAutoUpdate=!0,L[v.path]){case L.weights:g=To;break;case L.rotation:g=Eo;break;case L.position:case L.scale:default:g=Lo}var y=p.name?p.name:p.uuid,x=void 0!==m.interpolation?P[m.interpolation]:2301,b=[];L[v.path]===L.weights?p.traverse(function(e){!0===e.isMesh&&e.morphTargetInfluences&&b.push(e.name?e.name:e.uuid)}):b.push(y);var w=f.array;if(f.normalized){var _;if(w.constructor===Int8Array)_=1/127;else if(w.constructor===Uint8Array)_=1/255;else if(w.constructor==Int16Array)_=1/32767;else{if(w.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");_=1/65535}for(var M=new Float32Array(w.length),T=0,S=w.length;T<S;T++)M[T]=w[T]*_;w=M}for(T=0,S=b.length;T<S;T++){var E=new g(b[T]+"."+L[v.path],d.array,w,x);"CUBICSPLINE"===m.interpolation&&(E.createInterpolant=function(e){return new u(this.times,this.values,this.getValueSize()/3,e)},E.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),c.push(E)}}}return new Po(void 0!==t.name?t.name:"animation_"+e,void 0,c)})},k.prototype.loadNode=function(e){var n=this.json,r=this.extensions,i=this,a=n.meshReferences,o=n.meshUses,s=n.nodes[e];return function(){var e=[];return void 0!==s.mesh&&e.push(i.getDependency("mesh",s.mesh).then(function(e){var t;if(a[s.mesh]>1){var n=o[s.mesh]++;(t=e.clone()).name+="_instance_"+n,t.onBeforeRender=e.onBeforeRender;for(var r=0,i=t.children.length;r<i;r++)t.children[r].name+="_instance_"+n,t.children[r].onBeforeRender=e.children[r].onBeforeRender}else t=e;return void 0!==s.weights&&t.traverse(function(e){if(e.isMesh)for(var t=0,n=s.weights.length;t<n;t++)e.morphTargetInfluences[t]=s.weights[t]}),t})),void 0!==s.camera&&e.push(i.getDependency("camera",s.camera)),s.extensions&&s.extensions[t.KHR_LIGHTS_PUNCTUAL]&&void 0!==s.extensions[t.KHR_LIGHTS_PUNCTUAL].light&&e.push(i.getDependency("light",s.extensions[t.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(e)}().then(function(e){var t;if((t=!0===s.isBone?new Di:e.length>1?new vi:1===e.length?e[0]:new qt)!==e[0])for(var n=0,i=e.length;n<i;n++)t.add(e[n]);if(void 0!==s.name&&(t.userData.name=s.name,t.name=$s.sanitizeNodeName(s.name)),z(t,s),s.extensions&&N(r,t,s),void 0!==s.matrix){var a=new Ht;a.fromArray(s.matrix),t.applyMatrix(a)}else void 0!==s.translation&&t.position.fromArray(s.translation),void 0!==s.rotation&&t.quaternion.fromArray(s.rotation),void 0!==s.scale&&t.scale.fromArray(s.scale);return t})},k.prototype.loadScene=function(){function e(t,n,r,i){var a=r.nodes[t];return i.getDependency("node",t).then(function(e){return void 0===a.skin?e:i.getDependency("skin",a.skin).then(function(e){for(var n=[],r=0,a=(t=e).joints.length;r<a;r++)n.push(i.getDependency("node",t.joints[r]));return Promise.all(n)}).then(function(n){return e.traverse(function(e){if(e.isMesh){for(var r=[],i=[],a=0,o=n.length;a<o;a++){var s=n[a];if(s){r.push(s);var c=new Ht;void 0!==t.inverseBindMatrices&&c.fromArray(t.inverseBindMatrices.array,16*a),i.push(c)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[a])}e.bind(new Ii(r,i),e.matrixWorld)}}),e});var t}).then(function(t){n.add(t);var o=[];if(a.children)for(var s=a.children,c=0,l=s.length;c<l;c++){var h=s[c];o.push(e(h,t,r,i))}return Promise.all(o)})}return function(t){var n=this.json,r=this.extensions,i=this.json.scenes[t],a=new Yt;void 0!==i.name&&(a.name=i.name),z(a,i),i.extensions&&N(r,a,i);for(var o=i.nodes||[],s=[],c=0,l=o.length;c<l;c++)s.push(e(o[c],a,n,this));return Promise.all(s).then(function(){return a})}}(),e}(),xl=n(0),bl=function(e,t){Mn.call(this,e);var n=this,r=void 0!==(t=t||{}).textureWidth?t.textureWidth:512,i=void 0!==t.textureHeight?t.textureHeight:512,a=void 0!==t.clipBias?t.clipBias:0,o=void 0!==t.alpha?t.alpha:1,s=void 0!==t.time?t.time:0,c=void 0!==t.waterNormals?t.waterNormals:null,l=void 0!==t.sunDirection?t.sunDirection:new Ot(.70707,.70707,0),h=new en(void 0!==t.sunColor?t.sunColor:16777215),u=new en(void 0!==t.waterColor?t.waterColor:8355711),p=void 0!==t.eye?t.eye:new Ot(0,0,0),d=void 0!==t.distortionScale?t.distortionScale:20,m=void 0!==t.side?t.side:f,v=void 0!==t.fog&&t.fog,g=new kn,y=new Ot,x=new Ot,b=new Ot,w=new Ht,_=new Ot(0,0,-1),M=new Ft,T=new Ot,S=new Ot,E=new Ft,A=new Ht,L=new Nn,P=new Gt(r,i,{minFilter:ye,magFilter:ye,format:De,stencilBuffer:!1});Pt.isPowerOfTwo(r)&&Pt.isPowerOfTwo(i)||(P.texture.generateMipmaps=!1);var R={uniforms:Rn.merge([Vn.fog,Vn.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new Ht},sunColor:{value:new en(8355711)},sunDirection:{value:new Ot(.70707,.70707,0)},eye:{value:new Ot},waterColor:{value:new en(5592405)}}]),vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec4 worldPosition;",jn.fog_pars_vertex,jn.shadowmap_pars_vertex,"void main() {","\tmirrorCoord = modelMatrix * vec4( position, 1.0 );","\tworldPosition = mirrorCoord.xyzw;","\tmirrorCoord = textureMatrix * mirrorCoord;","\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * mvPosition;",jn.fog_vertex,jn.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float size;","uniform float distortionScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","vec4 getNoise( vec2 uv ) {","\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);","\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );","\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );","\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );","\tvec4 noise = texture2D( normalSampler, uv0 ) +","\t\ttexture2D( normalSampler, uv1 ) +","\t\ttexture2D( normalSampler, uv2 ) +","\t\ttexture2D( normalSampler, uv3 );","\treturn noise * 0.5 - 1.0;","}","void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {","\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );","\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );","\tspecularColor += pow( direction, shiny ) * sunColor * spec;","\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;","}",jn.common,jn.packing,jn.bsdfs,jn.fog_pars_fragment,jn.lights_pars_begin,jn.shadowmap_pars_fragment,jn.shadowmask_pars_fragment,"void main() {","\tvec4 noise = getNoise( worldPosition.xz * size );","\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );","\tvec3 diffuseLight = vec3(0.0);","\tvec3 specularLight = vec3(0.0);","\tvec3 worldToEye = eye-worldPosition.xyz;","\tvec3 eyeDirection = normalize( worldToEye );","\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );","\tfloat distance = length(worldToEye);","\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;","\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );","\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );","\tfloat rf0 = 0.3;","\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;","\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);","\tvec3 outgoingLight = albedo;","\tgl_FragColor = vec4( outgoingLight, alpha );",jn.tonemapping_fragment,jn.fog_fragment,"}"].join("\n")},C=new In({fragmentShader:R.fragmentShader,vertexShader:R.vertexShader,uniforms:Rn.clone(R.uniforms),transparent:!0,lights:!0,side:m,fog:v});C.uniforms.mirrorSampler.value=P.texture,C.uniforms.textureMatrix.value=A,C.uniforms.alpha.value=o,C.uniforms.time.value=s,C.uniforms.normalSampler.value=c,C.uniforms.sunColor.value=h,C.uniforms.waterColor.value=u,C.uniforms.sunDirection.value=l,C.uniforms.distortionScale.value=d,C.uniforms.eye.value=p,n.material=C,n.onBeforeRender=function(e,t,r){if(x.setFromMatrixPosition(n.matrixWorld),b.setFromMatrixPosition(r.matrixWorld),w.extractRotation(n.matrixWorld),y.set(0,0,1),y.applyMatrix4(w),T.subVectors(x,b),!(T.dot(y)>0)){T.reflect(y).negate(),T.add(x),w.extractRotation(r.matrixWorld),_.set(0,0,-1),_.applyMatrix4(w),_.add(b),S.subVectors(x,_),S.reflect(y).negate(),S.add(x),L.position.copy(T),L.up.set(0,1,0),L.up.applyMatrix4(w),L.up.reflect(y),L.lookAt(S),L.far=r.far,L.updateMatrixWorld(),L.projectionMatrix.copy(r.projectionMatrix),A.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),A.multiply(L.projectionMatrix),A.multiply(L.matrixWorldInverse),g.setFromNormalAndCoplanarPoint(y,x),g.applyMatrix4(L.matrixWorldInverse),M.set(g.normal.x,g.normal.y,g.normal.z,g.constant);var i=L.projectionMatrix;E.x=(Math.sign(M.x)+i.elements[8])/i.elements[0],E.y=(Math.sign(M.y)+i.elements[9])/i.elements[5],E.z=-1,E.w=(1+i.elements[10])/i.elements[14],M.multiplyScalar(2/M.dot(E)),i.elements[2]=M.x,i.elements[6]=M.y,i.elements[10]=M.z+1-a,i.elements[14]=M.w,p.setFromMatrixPosition(r.matrixWorld);var o=e.getRenderTarget(),s=e.vr.enabled,c=e.shadowMap.autoUpdate;n.visible=!1,e.vr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(P),e.clear(),e.render(t,L),n.visible=!0,e.vr.enabled=s,e.shadowMap.autoUpdate=c,e.setRenderTarget(o)}}};bl.prototype=Object.create(Mn.prototype),bl.prototype.constructor=bl;let wl,_l,Ml,Tl,Sl,El,Al,Ll=[],Pl=[],Rl=[],Cl=[],Ol=100;let Il=[],Dl=[];for(let e=0;e<30;e++){let e=parseInt(140*Math.random()),t={id:e,colors:parseInt(4*Math.random())};Dl.includes(e)||Il.push(t),Dl.push(e)}function Nl(e,t,n){let r=e.clone();r.name=t.id,r.userData=t,r.visible=!0,setTimeout(()=>{"1"==t.layer?r.position.set(n.x,n.y,n.z):"2"==t.layer&&r.position.set(n.x,n.y+2.5,n.z)},Ol),Cl.push(r),Ml.add(r)}function zl(e,t){let n=Ml.getObjectByName(`qiaodiao_zhuaqu_${e}`),r=Gl(t);r.z+=1.55,function(e,t,n){new xl.a.Tween(e).to({z:t.z},n).easing(xl.a.Easing.Sinusoidal.InOut).start().onUpdate(()=>{})}(n.position,r,3e3)}function Ul(e,t,n,r,i){let a=new tc(e.scene);Ll.push(a);for(let n=0;n<e.animations.length;n++)e.animations[n].name.includes(t)&&Pl.push(a.clipAction(e.animations[n]));if(null!=Pl&&Pl.length>0&&Pl.map(e=>{e.play(),e.loop=ht,e.clampWhenFinished=!0}),Fl(r))setTimeout(()=>{Ml.getObjectByName(n).visible=!1},2700);else{let e=Gl(r);setTimeout(()=>{let t=Ml.getObjectByName(n);t.position.x=e.x,Fl(i)?t.position.y=e.y:"2"==i?t.position.y=e.y+2.5:"0.5"==i&&(t.position.y=e.y+1.4),t.position.z=e.z,t.visible=!0},1500)}}function Bl(){_l.aspect=window.innerWidth/window.innerHeight,_l.updateProjectionMatrix(),wl.setSize(window.innerWidth,window.innerHeight)}function Fl(e){return void 0===e||null==e||""==e}function Gl(e){return Ml.getObjectByName(e).getWorldPosition(new Ot)}function kl(e){let t;return"1"==e?t="C_360":"2"==e?t="C_500":"3"==e&&(t="C_600"),t}function Hl(e,t,n){new xl.a.Tween(e).to({x:t.x},n).easing(xl.a.Easing.Sinusoidal.InOut).start().onUpdate(()=>{})}(wl=new Ti({antialias:!0,canvas:document.querySelector("#cc")})).setPixelRatio(window.devicePixelRatio),wl.setSize(window.innerWidth,window.innerHeight),wl.shadowMap.enabled=!1,wl.gammaInput=!0,wl.gammaOutput=!0,window.addEventListener("resize",Bl,!1),(_l=new Nn(45,window.innerWidth/window.innerHeight,1,2e5)).position.set(-0,85,-100),(Tl=new Rc(_l,document.querySelector("#cc"))).target.set(0,0,0),Tl.minDistance=10,Tl.maxDistance=300,Tl.minPolarAngle=0,Tl.maxPolarAngle=.45*Math.PI,Tl.minAzimuthAngle=-1/0,Tl.maxAzimuthAngle=1/0,(Ml=new Yt).background=new en(14474460),(Sl=new hs(16777215,4473924,1.5)).position.set(0,200,0),Ml.add(Sl),Al=new Hs,function(){var e=new Bo;e.setPath("./skybox/");var t=e.load(["px.jpg","nx.jpg","py.jpg","ny.jpg","pz.jpg","nz.jpg"]);Ml.background=t}(),function(){let e=new Mn(new Zn(2e3,2e3),new co({color:16711422}));e.rotation.x=-Math.PI/2,e.receiveShadow=!0,e.position.y=-1,(El=new bl(e.geometry,{textureWidth:1024,textureHeight:1024,color:33023,waterNormals:(new Fo).load("./img/water/waternormals.jpg",function(e){e.wrapS=e.wrapT=pe}),alpha:1,sunDirection:new Ot(0,1,0),sunColor:16777215,waterColor:7695,distortionScale:3.7,fog:void 0!==Ml.fog})).rotation.x-=Math.PI/2,El.position.y-=3,Rl.push(El),Ml.add(El)}(),function(){const e=["matoubeiwei","matouchangjing","bianma"];(new yl).load("https://showjsonme.oss-cn-beijing.aliyuncs.com/workModel/mt0919donghuatestend.glb",t=>{Rl.push(...t.scene.children),t.scene.children.map(t=>{e.includes(t.name)||(t.visible=!1)}),Ml.add(t.scene),setTimeout(()=>{(function(e){if(Fl(e.boat))return!1;for(let t of e.boat){let e,n=t.type,r=t.bayDock,i=r.split(","),a=i[0]<10?`0${i[0]}`:i[0],o=i[1]<10?`0${i[1]}`:i[1],s=kl(n),c=Gl(`Ws_01_${a}`);"1"==n?e=Ml.getObjectByName("C360").clone():"2"==n?e=Ml.getObjectByName("C500").clone():"3"==n&&(e=Ml.getObjectByName("C600").clone()),e.name=t.id,e.userData=t;for(let n of e.children){let e=n.name;n.name=`${e}_${t.id}`}e.visible=!0;let l=Gl(`${s}_01_${o}`),h=e.position,u=h.x-l.x;e.position.x=c.x+u,Ml.add(e)}})(data),function(e){if(Fl(e.car))return!1;for(let t of e.car){let e,n=t.position,r=n.split(","),i=r[0]<10?`0${r[0]}`:r[0],a=r[1]<10?`0${r[1]}`:r[1];(e=Ml.getObjectByName("car").clone()).name=t.id,e.userData=t,e.visible=!0;let o=Gl(`Ws_${i}_${a}`),s=Gl("car_bw_01_01"),c=Gl("car"),l=c.x-s.x;e.position.x=o.x+l,e.position.z=o.z,Ml.add(e)}}(data),function(e){if(Fl(e.bridge))return!1;let t=1;for(let n of e.bridge){let e=Ml.getObjectByName(`qiaodiao_${t}`),r=Ml.getObjectByName(`qiaodiao_zhuaqu_${t}`),i=(n.positionA,n.positionS),a=i.split(","),o=a[0]<10?`0${a[0]}`:a[0],s=a[1]<10?`0${a[1]}`:a[1];if(e.userData=n,e.visible=!0,e.children[0].material.transparent=!0,e.children[0].material.opacity=.5,r.userData=n,r.visible=!0,"C"!=n.positionA){let t=Gl(`Ws_${o}_${s}`);e.position.x=t.x,r.position.x=t.x,r.position.z=t.z+1.55}else console.log(11);
//!!
t++}}(data),function(e){if(Fl(e.box))return!1;let t=Ml.getObjectByName("JZX_shuipinxiang"),n=Ml.getObjectByName("JZX_jianrongxiang"),r=Ml.getObjectByName("JZX_shilajixiang"),i=Ml.getObjectByName("JZX_canchuxiang");for(let a of e.box){let e=a.loader,o=a.loaderId,s=(a.layer,a.position),c=a.type,l=s.split(","),h=l[0]<10?`0${l[0]}`:l[0],u=l[1]<10?`0${l[1]}`:l[1];if("1"==e){if(!Fl(s)){let e=Gl(`Ws_${h}_${u}`);"1"==c?Nl(t,a,e):"2"==c?Nl(n,a,e):"3"==c?Nl(r,a,e):"4"==c&&Nl(i,a,e)}}else if("2"==e&&!Fl(s)){let e,s=Ml.getObjectByName(o),l=kl(s.userData.type);setTimeout(()=>{e=Gl(`${l}_${h}_${u}_${o}`),"1"==c?Nl(t,a,e):"2"==c?Nl(n,a,e):"3"==c?Nl(r,a,e):"4"==c&&Nl(i,a,e)},Ol)}}}(data),setTimeout(()=>{!function(e){(function(e,t){let n=Ml.getObjectByName(`qiaodiao_${e}`),r=Ml.getObjectByName(`qiaodiao_zhuaqu_${e}`),i=Gl(t);Hl(n.position,i,3e3),Hl(r.position,i,3e3)})(3,"Ws_04_08"),setTimeout(()=>{zl(3,"C_600_01_05_eqm_waf_003_24_b")},3e3),setTimeout(()=>{Ul(e,"3_boat_zhua_2","eqm_waf_006_1008_c")},6e3),setTimeout(()=>{zl(3,"Ws_04_08")},1e4),setTimeout(()=>{Ul(e,"3_waf_fang_1","eqm_waf_006_1008_c","Ws_04_08")},13e3),setTimeout(()=>{zl(3,"C_600_01_05_eqm_waf_003_24_b")},17e3),setTimeout(()=>{Ul(e,"3_boat_zhua_1","eqm_waf_006_1009_c")},2e4),setTimeout(()=>{zl(3,"Ws_04_08")},24e3),setTimeout(()=>{Ul(e,"3_waf_fang_2","eqm_waf_006_1009_c","Ws_04_08",2)},27e3),setTimeout(()=>{zl(3,"Ws_01_08")},31e3),setTimeout(()=>{Ul(e,"3_waf_zhua_2","eqm_waf_006_1004_c")},34e3),setTimeout(()=>{zl(3,"C_600_01_05_eqm_waf_003_24_b")},38e3),setTimeout(()=>{Ul(e,"3_boat_fang_1","eqm_waf_006_1004_c","C_600_01_05_eqm_waf_003_24_b")},41e3),setTimeout(()=>{zl(3,"C_600_03_05_eqm_waf_003_24_b")},45e3),setTimeout(()=>{Ul(e,"3_boat_zhua_2","eqm_waf_006_1027_c")},48e3),setTimeout(()=>{zl(3,"Ws_07_08")},52e3),setTimeout(()=>{Ul(e,"3_car_fang_1","eqm_waf_006_1027_c","Ws_07_08",.5)},55e3),setTimeout(()=>{Ml.getObjectByName("10").visible=!1,Ml.getObjectByName("eqm_waf_006_1027_c").visible=!1},61e3),setTimeout(()=>{zl(3,"Ws_01_08")},59e3),setTimeout(()=>{Ul(e,"3_waf_zhua_1","eqm_waf_006_101_c")},62e3),setTimeout(()=>{zl(3,"C_600_01_05_eqm_waf_003_24_b")},66e3),setTimeout(()=>{Ul(e,"3_boat_fang_2","eqm_waf_006_101_c","C_600_01_05_eqm_waf_003_24_b",2)},69e3);let t=72e3;for(let n=0;n<1e3;n++)setTimeout(()=>{zl(3,"C_600_03_05_eqm_waf_003_24_b")},t),t+=3e3,setTimeout(()=>{Ul(e,"3_boat_zhua_1","eqm_waf_006_1026_c")},t),t+=4e3,setTimeout(()=>{zl(3,"Ws_02_08")},t),t+=3e3,setTimeout(()=>{Ul(e,"3_waf_fang_1","eqm_waf_006_1026_c","Ws_02_08")},t),t+=4e3,setTimeout(()=>{Ul(e,"3_waf_zhua_1","eqm_waf_006_1026_c")},t),t+=4e3,setTimeout(()=>{zl(3,"C_600_03_05_eqm_waf_003_24_b")},t),t+=3e3,setTimeout(()=>{Ul(e,"3_boat_fang_1","eqm_waf_006_1026_c","C_600_03_05_eqm_waf_003_24_b")},t),t+=4e3}(t)},Ol)},Ol)})}(),document.addEventListener("click",function(){var e=event.clientX,t=event.clientY,n=e/window.innerWidth*2-1,r=-t/window.innerHeight*2+1,i=new Ot(n,r,.5).unproject(_l).sub(_l.position).normalize(),a=new ic(_l.position,i).intersectObjects(Rl,!0);a.length>0&&a[0]}),function e(){requestAnimationFrame(e);wl.render(Ml,_l);El.material.uniforms.time.value+=1/60;var t=Al.getDelta();Ll.length&&Ll.map(e=>{e.update(t)});xl.a.update()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9idWlsZC90d2Vlbi5tb2R1bGUubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L2J1aWxkL3RocmVlLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L2J1aWxkL09yYml0Q29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9idWlsZC9pbmZsYXRlLm1vZHVsZS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9idWlsZC9OVVJCU1V0aWxzLmpzIiwid2VicGFjazovLy8uL2Rpc3QvYnVpbGQvTlVSQlNDdXJ2ZS5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L2J1aWxkL0ZCWExvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L2J1aWxkL0dMVEZMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9idWlsZC9XYXRlci5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9tYWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIlRXRUVOIiwiX0dyb3VwIiwidGhpcyIsIl90d2VlbnMiLCJfdHdlZW5zQWRkZWREdXJpbmdVcGRhdGUiLCJnZXRBbGwiLCJrZXlzIiwibWFwIiwicmVtb3ZlQWxsIiwiYWRkIiwiZ2V0SWQiLCJyZW1vdmUiLCJ1cGRhdGUiLCJlIiwibGVuZ3RoIiwibm93IiwiX2lzUGxheWluZyIsIkdyb3VwIiwiX25leHRJZCIsIm5leHRJZCIsInNlbGYiLCJwcm9jZXNzIiwiaHJ0aW1lIiwicGVyZm9ybWFuY2UiLCJEYXRlIiwiZ2V0VGltZSIsIlR3ZWVuIiwiX29iamVjdCIsIl92YWx1ZXNTdGFydCIsIl92YWx1ZXNFbmQiLCJfdmFsdWVzU3RhcnRSZXBlYXQiLCJfZHVyYXRpb24iLCJfcmVwZWF0IiwiX3JlcGVhdERlbGF5VGltZSIsIl95b3lvIiwiX3JldmVyc2VkIiwiX2RlbGF5VGltZSIsIl9zdGFydFRpbWUiLCJfZWFzaW5nRnVuY3Rpb24iLCJFYXNpbmciLCJMaW5lYXIiLCJOb25lIiwiX2ludGVycG9sYXRpb25GdW5jdGlvbiIsIkludGVycG9sYXRpb24iLCJfY2hhaW5lZFR3ZWVucyIsIl9vblN0YXJ0Q2FsbGJhY2siLCJfb25TdGFydENhbGxiYWNrRmlyZWQiLCJfb25VcGRhdGVDYWxsYmFjayIsIl9vbkNvbXBsZXRlQ2FsbGJhY2siLCJfb25TdG9wQ2FsbGJhY2siLCJfZ3JvdXAiLCJfaWQiLCJpc1BsYXlpbmciLCJ0byIsImR1cmF0aW9uIiwic3RhcnQiLCJwYXJzZUZsb2F0IiwiQXJyYXkiLCJjb25jYXQiLCJzdG9wIiwic3RvcENoYWluZWRUd2VlbnMiLCJlbmQiLCJncm91cCIsImRlbGF5IiwicmVwZWF0IiwicmVwZWF0RGVsYXkiLCJ5b3lvIiwiZWFzaW5nIiwiaW50ZXJwb2xhdGlvbiIsImNoYWluIiwiYXJndW1lbnRzIiwib25TdGFydCIsIm9uVXBkYXRlIiwib25Db21wbGV0ZSIsIm9uU3RvcCIsImEiLCJjaGFyQXQiLCJpc0Zpbml0ZSIsInUiLCJRdWFkcmF0aWMiLCJJbiIsIk91dCIsIkluT3V0IiwiQ3ViaWMiLCJRdWFydGljIiwiUXVpbnRpYyIsIlNpbnVzb2lkYWwiLCJNYXRoIiwiY29zIiwiUEkiLCJzaW4iLCJFeHBvbmVudGlhbCIsInBvdyIsIkNpcmN1bGFyIiwic3FydCIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiZmxvb3IiLCJVdGlscyIsIkJlemllciIsIkJlcm5zdGVpbiIsIkNhdG11bGxSb20iLCJGYWN0b3JpYWwiLCJkZWZpbmUiLCJ1bmRlZmluZWQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJwdXNoIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsImNoaWxkcmVuIiwiX193ZWJwYWNrX2FtZF9vcHRpb25zX18iLCJFdmVudERpc3BhdGNoZXIiLCJOdW1iZXIiLCJFUFNJTE9OIiwiaXNJbnRlZ2VyIiwic2lnbiIsIngiLCJGdW5jdGlvbiIsInRvU3RyaW5nIiwibWF0Y2giLCJhc3NpZ24iLCJ0YXJnZXQiLCJUeXBlRXJyb3IiLCJvdXRwdXQiLCJpbmRleCIsInNvdXJjZSIsIm5leHRLZXkiLCJhZGRFdmVudExpc3RlbmVyIiwidHlwZSIsImxpc3RlbmVyIiwiX2xpc3RlbmVycyIsImluZGV4T2YiLCJoYXNFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyQXJyYXkiLCJzcGxpY2UiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnQiLCJzbGljZSIsIl92ZWN0b3IiLCJfY2FudmFzIiwiUkVWSVNJT04iLCJNT1VTRSIsIkxFRlQiLCJNSURETEUiLCJSSUdIVCIsIlJPVEFURSIsIkRPTExZIiwiUEFOIiwiVE9VQ0giLCJET0xMWV9QQU4iLCJET0xMWV9ST1RBVEUiLCJDdWxsRmFjZU5vbmUiLCJDdWxsRmFjZUJhY2siLCJDdWxsRmFjZUZyb250IiwiUENGU2hhZG93TWFwIiwiUENGU29mdFNoYWRvd01hcCIsIkZyb250U2lkZSIsIkJhY2tTaWRlIiwiRG91YmxlU2lkZSIsIk5vQ29sb3JzIiwiRmFjZUNvbG9ycyIsIlZlcnRleENvbG9ycyIsIk5vQmxlbmRpbmciLCJOb3JtYWxCbGVuZGluZyIsIkFkZGl0aXZlQmxlbmRpbmciLCJTdWJ0cmFjdGl2ZUJsZW5kaW5nIiwiTXVsdGlwbHlCbGVuZGluZyIsIkN1c3RvbUJsZW5kaW5nIiwiQWRkRXF1YXRpb24iLCJTdWJ0cmFjdEVxdWF0aW9uIiwiUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24iLCJNaW5FcXVhdGlvbiIsIk1heEVxdWF0aW9uIiwiWmVyb0ZhY3RvciIsIk9uZUZhY3RvciIsIlNyY0NvbG9yRmFjdG9yIiwiT25lTWludXNTcmNDb2xvckZhY3RvciIsIlNyY0FscGhhRmFjdG9yIiwiT25lTWludXNTcmNBbHBoYUZhY3RvciIsIkRzdEFscGhhRmFjdG9yIiwiT25lTWludXNEc3RBbHBoYUZhY3RvciIsIkRzdENvbG9yRmFjdG9yIiwiT25lTWludXNEc3RDb2xvckZhY3RvciIsIlNyY0FscGhhU2F0dXJhdGVGYWN0b3IiLCJOZXZlckRlcHRoIiwiQWx3YXlzRGVwdGgiLCJMZXNzRGVwdGgiLCJMZXNzRXF1YWxEZXB0aCIsIkVxdWFsRGVwdGgiLCJHcmVhdGVyRXF1YWxEZXB0aCIsIkdyZWF0ZXJEZXB0aCIsIk5vdEVxdWFsRGVwdGgiLCJNdWx0aXBseU9wZXJhdGlvbiIsIk1peE9wZXJhdGlvbiIsIkFkZE9wZXJhdGlvbiIsIk5vVG9uZU1hcHBpbmciLCJMaW5lYXJUb25lTWFwcGluZyIsIlJlaW5oYXJkVG9uZU1hcHBpbmciLCJVbmNoYXJ0ZWQyVG9uZU1hcHBpbmciLCJDaW5lb25Ub25lTWFwcGluZyIsIkFDRVNGaWxtaWNUb25lTWFwcGluZyIsIkN1YmVSZWZsZWN0aW9uTWFwcGluZyIsIkN1YmVSZWZyYWN0aW9uTWFwcGluZyIsIkVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nIiwiRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmciLCJTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZyIsIkN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nIiwiQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmciLCJSZXBlYXRXcmFwcGluZyIsIkNsYW1wVG9FZGdlV3JhcHBpbmciLCJNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIiwiTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciIsIkxpbmVhckZpbHRlciIsIkxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIiLCJMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIiLCJVbnNpZ25lZEJ5dGVUeXBlIiwiQnl0ZVR5cGUiLCJTaG9ydFR5cGUiLCJVbnNpZ25lZFNob3J0VHlwZSIsIkludFR5cGUiLCJVbnNpZ25lZEludFR5cGUiLCJGbG9hdFR5cGUiLCJIYWxmRmxvYXRUeXBlIiwiVW5zaWduZWRTaG9ydDQ0NDRUeXBlIiwiVW5zaWduZWRTaG9ydDU1NTFUeXBlIiwiVW5zaWduZWRTaG9ydDU2NVR5cGUiLCJVbnNpZ25lZEludDI0OFR5cGUiLCJBbHBoYUZvcm1hdCIsIlJHQkZvcm1hdCIsIlJHQkFGb3JtYXQiLCJMdW1pbmFuY2VGb3JtYXQiLCJMdW1pbmFuY2VBbHBoYUZvcm1hdCIsIkRlcHRoRm9ybWF0IiwiRGVwdGhTdGVuY2lsRm9ybWF0IiwiUmVkRm9ybWF0IiwiUkdCX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUM19Gb3JtYXQiLCJSR0JBX1MzVENfRFhUNV9Gb3JtYXQiLCJSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCIsIlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCX0VUQzFfRm9ybWF0IiwiUkdCQV9BU1RDXzR4NF9Gb3JtYXQiLCJSR0JBX0FTVENfNXg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDVfRm9ybWF0IiwiUkdCQV9BU1RDXzZ4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDVfRm9ybWF0IiwiUkdCQV9BU1RDXzh4Nl9Gb3JtYXQiLCJSR0JBX0FTVENfOHg4X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg1X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg4X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQiLCJSR0JBX0FTVENfMTJ4MTBfRm9ybWF0IiwiUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCIsIkxvb3BPbmNlIiwiTG9vcFJlcGVhdCIsIlplcm9DdXJ2YXR1cmVFbmRpbmciLCJUcmlhbmdsZXNEcmF3TW9kZSIsIlRyaWFuZ2xlU3RyaXBEcmF3TW9kZSIsIlRyaWFuZ2xlRmFuRHJhd01vZGUiLCJMaW5lYXJFbmNvZGluZyIsInNSR0JFbmNvZGluZyIsIkdhbW1hRW5jb2RpbmciLCJSR0JFRW5jb2RpbmciLCJSR0JNN0VuY29kaW5nIiwiUkdCTTE2RW5jb2RpbmciLCJSR0JERW5jb2RpbmciLCJCYXNpY0RlcHRoUGFja2luZyIsIlJHQkFEZXB0aFBhY2tpbmciLCJUYW5nZW50U3BhY2VOb3JtYWxNYXAiLCJPYmplY3RTcGFjZU5vcm1hbE1hcCIsIktlZXBTdGVuY2lsT3AiLCJBbHdheXNTdGVuY2lsRnVuYyIsIl9NYXRoIiwiREVHMlJBRCIsIlJBRDJERUciLCJnZW5lcmF0ZVVVSUQiLCJsdXQiLCJkMCIsInJhbmRvbSIsImQxIiwiZDIiLCJkMyIsInRvVXBwZXJDYXNlIiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJldWNsaWRlYW5Nb2R1bG8iLCJtYXBMaW5lYXIiLCJhMSIsImEyIiwiYjEiLCJiMiIsImxlcnAiLCJ5Iiwic21vb3Roc3RlcCIsInNtb290aGVyc3RlcCIsInJhbmRJbnQiLCJsb3ciLCJoaWdoIiwicmFuZEZsb2F0IiwicmFuZEZsb2F0U3ByZWFkIiwicmFuZ2UiLCJkZWdUb1JhZCIsImRlZ3JlZXMiLCJyYWRUb0RlZyIsInJhZGlhbnMiLCJpc1Bvd2VyT2ZUd28iLCJjZWlsUG93ZXJPZlR3byIsImNlaWwiLCJsb2ciLCJMTjIiLCJmbG9vclBvd2VyT2ZUd28iLCJWZWN0b3IyIiwiUXVhdGVybmlvbiIsInoiLCJ3IiwiX3giLCJfeSIsIl96IiwiX3ciLCJWZWN0b3IzIiwiTWF0cml4MyIsImVsZW1lbnRzIiwiY29uc29sZSIsImVycm9yIiwiZGVmaW5lUHJvcGVydGllcyIsIndpZHRoIiwic2V0IiwiaGVpZ2h0IiwiaXNWZWN0b3IyIiwic2V0U2NhbGFyIiwic2NhbGFyIiwic2V0WCIsInNldFkiLCJzZXRDb21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJjbG9uZSIsImNvbnN0cnVjdG9yIiwiY29weSIsInYiLCJ3YXJuIiwiYWRkVmVjdG9ycyIsImFkZFNjYWxhciIsImIiLCJhZGRTY2FsZWRWZWN0b3IiLCJzdWIiLCJzdWJWZWN0b3JzIiwic3ViU2NhbGFyIiwibXVsdGlwbHkiLCJtdWx0aXBseVNjYWxhciIsImRpdmlkZSIsImRpdmlkZVNjYWxhciIsImFwcGx5TWF0cml4MyIsImNsYW1wU2NhbGFyIiwibWluVmFsIiwibWF4VmFsIiwiY2xhbXBMZW5ndGgiLCJyb3VuZCIsInJvdW5kVG9aZXJvIiwibmVnYXRlIiwiZG90IiwiY3Jvc3MiLCJsZW5ndGhTcSIsIm1hbmhhdHRhbkxlbmd0aCIsImFicyIsIm5vcm1hbGl6ZSIsImFuZ2xlIiwiYXRhbjIiLCJkaXN0YW5jZVRvIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJkeCIsImR5IiwibWFuaGF0dGFuRGlzdGFuY2VUbyIsInNldExlbmd0aCIsImFscGhhIiwibGVycFZlY3RvcnMiLCJ2MSIsInYyIiwiZXF1YWxzIiwiZnJvbUFycmF5Iiwib2Zmc2V0IiwidG9BcnJheSIsImZyb21CdWZmZXJBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJnZXRYIiwiZ2V0WSIsInJvdGF0ZUFyb3VuZCIsImNlbnRlciIsInNsZXJwIiwicWEiLCJxYiIsInFtIiwic2xlcnBGbGF0IiwiZHN0IiwiZHN0T2Zmc2V0Iiwic3JjMCIsInNyY09mZnNldDAiLCJzcmMxIiwic3JjT2Zmc2V0MSIsIngwIiwieTAiLCJ6MCIsIncwIiwieDEiLCJ5MSIsInoxIiwidzEiLCJzcXJTaW4iLCJ0RGlyIiwiZiIsIl9vbkNoYW5nZUNhbGxiYWNrIiwiaXNRdWF0ZXJuaW9uIiwicXVhdGVybmlvbiIsInNldEZyb21FdWxlciIsImV1bGVyIiwiaXNFdWxlciIsIm9yZGVyIiwiYzEiLCJjMiIsImMzIiwiczEiLCJzMiIsInMzIiwic2V0RnJvbUF4aXNBbmdsZSIsImF4aXMiLCJoYWxmQW5nbGUiLCJzZXRGcm9tUm90YXRpb25NYXRyaXgiLCJ0ZSIsIm0xMSIsIm0xMiIsIm0xMyIsIm0yMSIsIm0yMiIsIm0yMyIsIm0zMSIsIm0zMiIsIm0zMyIsInRyYWNlIiwic2V0RnJvbVVuaXRWZWN0b3JzIiwidkZyb20iLCJ2VG8iLCJhbmdsZVRvIiwicSIsImFjb3MiLCJyb3RhdGVUb3dhcmRzIiwic3RlcCIsImludmVyc2UiLCJjb25qdWdhdGUiLCJtdWx0aXBseVF1YXRlcm5pb25zIiwicHJlbXVsdGlwbHkiLCJxYXgiLCJxYXkiLCJxYXoiLCJxYXciLCJxYngiLCJxYnkiLCJxYnoiLCJxYnciLCJjb3NIYWxmVGhldGEiLCJzcXJTaW5IYWxmVGhldGEiLCJzaW5IYWxmVGhldGEiLCJoYWxmVGhldGEiLCJyYXRpb0EiLCJyYXRpb0IiLCJfb25DaGFuZ2UiLCJjYWxsYmFjayIsImlzVmVjdG9yMyIsInNldFoiLCJtdWx0aXBseVZlY3RvcnMiLCJhcHBseUV1bGVyIiwiYXBwbHlRdWF0ZXJuaW9uIiwiYXBwbHlBeGlzQW5nbGUiLCJhcHBseU1hdHJpeDQiLCJxeCIsInF5IiwicXoiLCJxdyIsIml4IiwiaXkiLCJpeiIsIml3IiwicHJvamVjdCIsImNhbWVyYSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInByb2plY3Rpb25NYXRyaXgiLCJ1bnByb2plY3QiLCJwcm9qZWN0aW9uTWF0cml4SW52ZXJzZSIsIm1hdHJpeFdvcmxkIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwiY3Jvc3NWZWN0b3JzIiwiYXgiLCJheSIsImF6IiwiYngiLCJieSIsImJ6IiwicHJvamVjdE9uVmVjdG9yIiwidmVjdG9yIiwicHJvamVjdE9uUGxhbmUiLCJwbGFuZU5vcm1hbCIsInJlZmxlY3QiLCJub3JtYWwiLCJ0aGV0YSIsImR6Iiwic2V0RnJvbVNwaGVyaWNhbCIsInNldEZyb21TcGhlcmljYWxDb29yZHMiLCJyYWRpdXMiLCJwaGkiLCJzaW5QaGlSYWRpdXMiLCJzZXRGcm9tQ3lsaW5kcmljYWwiLCJzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMiLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJzZXRGcm9tTWF0cml4U2NhbGUiLCJzeCIsInNldEZyb21NYXRyaXhDb2x1bW4iLCJzeSIsInN6IiwiZ2V0WiIsImlzTWF0cml4MyIsIm4xMSIsIm4xMiIsIm4xMyIsIm4yMSIsIm4yMiIsIm4yMyIsIm4zMSIsIm4zMiIsIm4zMyIsImlkZW50aXR5IiwibWUiLCJzZXRGcm9tTWF0cml4NCIsImFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUiLCJjb3VudCIsInNldFhZWiIsIm11bHRpcGx5TWF0cmljZXMiLCJhZSIsImJlIiwiYTExIiwiYTEyIiwiYTEzIiwiYTIxIiwiYTIyIiwiYTIzIiwiYTMxIiwiYTMyIiwiYTMzIiwiYjExIiwiYjEyIiwiYjEzIiwiYjIxIiwiYjIyIiwiYjIzIiwiYjMxIiwiYjMyIiwiYjMzIiwiZGV0ZXJtaW5hbnQiLCJnIiwiaCIsImdldEludmVyc2UiLCJtYXRyaXgiLCJ0aHJvd09uRGVnZW5lcmF0ZSIsImlzTWF0cml4NCIsInQxMSIsInQxMiIsInQxMyIsImRldCIsImRldEludiIsInRyYW5zcG9zZSIsInRtcCIsImdldE5vcm1hbE1hdHJpeCIsIm1hdHJpeDQiLCJ0cmFuc3Bvc2VJbnRvQXJyYXkiLCJzZXRVdlRyYW5zZm9ybSIsInR4IiwidHkiLCJyb3RhdGlvbiIsImN4IiwiY3kiLCJzY2FsZSIsInJvdGF0ZSIsInRyYW5zbGF0ZSIsIl9tYXRyaXgiLCJfcXVhdGVybmlvbiIsIkltYWdlVXRpbHMiLCJnZXREYXRhVVJMIiwiaW1hZ2UiLCJjYW52YXMiLCJIVE1MQ2FudmFzRWxlbWVudCIsInNyYyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiY29udGV4dCIsImdldENvbnRleHQiLCJJbWFnZURhdGEiLCJwdXRJbWFnZURhdGEiLCJkcmF3SW1hZ2UiLCJ0b0RhdGFVUkwiLCJ0ZXh0dXJlSWQiLCJUZXh0dXJlIiwibWFwcGluZyIsIndyYXBTIiwid3JhcFQiLCJtYWdGaWx0ZXIiLCJtaW5GaWx0ZXIiLCJmb3JtYXQiLCJhbmlzb3Ryb3B5IiwiZW5jb2RpbmciLCJ1dWlkIiwiREVGQVVMVF9JTUFHRSIsIm1pcG1hcHMiLCJERUZBVUxUX01BUFBJTkciLCJtYXRyaXhBdXRvVXBkYXRlIiwiZ2VuZXJhdGVNaXBtYXBzIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwiVmVjdG9yNCIsIldlYkdMUmVuZGVyVGFyZ2V0Iiwib3B0aW9ucyIsInNjaXNzb3IiLCJzY2lzc29yVGVzdCIsInZpZXdwb3J0IiwidGV4dHVyZSIsImRlcHRoQnVmZmVyIiwic3RlbmNpbEJ1ZmZlciIsImRlcHRoVGV4dHVyZSIsIldlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQiLCJzYW1wbGVzIiwiTWF0cml4NCIsIkV1bGVyIiwiX29yZGVyIiwiRGVmYXVsdE9yZGVyIiwiTGF5ZXJzIiwibWFzayIsImlzVGV4dHVyZSIsInVwZGF0ZU1hdHJpeCIsInRvSlNPTiIsIm1ldGEiLCJpc1Jvb3RPYmplY3QiLCJ0ZXh0dXJlcyIsIm1ldGFkYXRhIiwiZ2VuZXJhdG9yIiwid3JhcCIsImltYWdlcyIsInVybCIsImlzQXJyYXkiLCJkaXNwb3NlIiwidHJhbnNmb3JtVXYiLCJ1diIsImlzVmVjdG9yNCIsInNldFciLCJzZXRBeGlzQW5nbGVGcm9tUXVhdGVybmlvbiIsInNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeCIsInh4IiwieXkiLCJ6eiIsInh5IiwieHoiLCJ5eiIsImdldFciLCJpc1dlYkdMUmVuZGVyVGFyZ2V0Iiwic2V0U2l6ZSIsImlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCIsIm4xNCIsIm4yNCIsIm4zNCIsIm40MSIsIm40MiIsIm40MyIsIm40NCIsImNvcHlQb3NpdGlvbiIsImV4dHJhY3RCYXNpcyIsInhBeGlzIiwieUF4aXMiLCJ6QXhpcyIsIm1ha2VCYXNpcyIsImV4dHJhY3RSb3RhdGlvbiIsInNjYWxlWCIsInNjYWxlWSIsInNjYWxlWiIsIm1ha2VSb3RhdGlvbkZyb21FdWxlciIsImFmIiwiYmYiLCJjZSIsImNmIiwiZGUiLCJkZiIsImFjIiwiYWQiLCJiYyIsImJkIiwibWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24iLCJ6ZXJvIiwib25lIiwiY29tcG9zZSIsImxvb2tBdCIsImV5ZSIsInVwIiwiYTE0IiwiYTI0IiwiYTM0IiwiYTQxIiwiYTQyIiwiYTQzIiwiYTQ0IiwiYjE0IiwiYjI0IiwiYjM0IiwiYjQxIiwiYjQyIiwiYjQzIiwiYjQ0Iiwic2V0UG9zaXRpb24iLCJ0MTQiLCJtc2ciLCJnZXRNYXhTY2FsZU9uQXhpcyIsInNjYWxlWFNxIiwic2NhbGVZU3EiLCJzY2FsZVpTcSIsIm1ha2VUcmFuc2xhdGlvbiIsIm1ha2VSb3RhdGlvblgiLCJtYWtlUm90YXRpb25ZIiwibWFrZVJvdGF0aW9uWiIsIm1ha2VSb3RhdGlvbkF4aXMiLCJtYWtlU2NhbGUiLCJtYWtlU2hlYXIiLCJwb3NpdGlvbiIsIngyIiwieTIiLCJ6MiIsInd4Iiwid3kiLCJ3eiIsImRlY29tcG9zZSIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsIm1ha2VQZXJzcGVjdGl2ZSIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm5lYXIiLCJmYXIiLCJtYWtlT3J0aG9ncmFwaGljIiwiUm90YXRpb25PcmRlcnMiLCJhc2luIiwic2V0RnJvbVF1YXRlcm5pb24iLCJzZXRGcm9tVmVjdG9yMyIsInJlb3JkZXIiLCJuZXdPcmRlciIsInRvVmVjdG9yMyIsIm9wdGlvbmFsUmVzdWx0IiwiY2hhbm5lbCIsImVuYWJsZSIsInRvZ2dsZSIsImRpc2FibGUiLCJ0ZXN0IiwibGF5ZXJzIiwiX2JveCIsIm9iamVjdDNESWQiLCJPYmplY3QzRCIsInBhcmVudCIsIkRlZmF1bHRVcCIsImNvbmZpZ3VyYWJsZSIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsIkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlIiwibWF0cml4V29ybGROZWVkc1VwZGF0ZSIsInZpc2libGUiLCJjYXN0U2hhZG93IiwicmVjZWl2ZVNoYWRvdyIsImZydXN0dW1DdWxsZWQiLCJyZW5kZXJPcmRlciIsInVzZXJEYXRhIiwiU2NlbmUiLCJiYWNrZ3JvdW5kIiwiZm9nIiwib3ZlcnJpZGVNYXRlcmlhbCIsImF1dG9VcGRhdGUiLCJfX1RIUkVFX0RFVlRPT0xTX18iLCJDdXN0b21FdmVudCIsImRldGFpbCIsIkJveDMiLCJJbmZpbml0eSIsIlNwaGVyZSIsIlJheSIsIm9yaWdpbiIsImRpcmVjdGlvbiIsIlRyaWFuZ2xlIiwiaXNPYmplY3QzRCIsIm9uQmVmb3JlUmVuZGVyIiwib25BZnRlclJlbmRlciIsImFwcGx5TWF0cml4Iiwic2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlIiwic2V0Um90YXRpb25Gcm9tRXVsZXIiLCJzZXRSb3RhdGlvbkZyb21NYXRyaXgiLCJzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwicm90YXRlT25BeGlzIiwicTEiLCJyb3RhdGVPbldvcmxkQXhpcyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInRyYW5zbGF0ZU9uQXhpcyIsImRpc3RhbmNlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ0cmFuc2xhdGVaIiwibG9jYWxUb1dvcmxkIiwid29ybGRUb0xvY2FsIiwibTEiLCJ1cGRhdGVXb3JsZE1hdHJpeCIsImlzQ2FtZXJhIiwiaXNMaWdodCIsImF0dGFjaCIsImdldE9iamVjdEJ5SWQiLCJpZCIsImdldE9iamVjdEJ5UHJvcGVydHkiLCJnZXRPYmplY3RCeU5hbWUiLCJnZXRXb3JsZFBvc2l0aW9uIiwidXBkYXRlTWF0cml4V29ybGQiLCJnZXRXb3JsZFF1YXRlcm5pb24iLCJnZXRXb3JsZFNjYWxlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJyYXljYXN0IiwidHJhdmVyc2UiLCJ0cmF2ZXJzZVZpc2libGUiLCJ0cmF2ZXJzZUFuY2VzdG9ycyIsImZvcmNlIiwidXBkYXRlUGFyZW50cyIsInVwZGF0ZUNoaWxkcmVuIiwiZ2VvbWV0cmllcyIsIm1hdGVyaWFscyIsInNoYXBlcyIsInNlcmlhbGl6ZSIsImxpYnJhcnkiLCJlbGVtZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImlzTWVzaCIsImRyYXdNb2RlIiwiaXNMaW5lIiwiaXNQb2ludHMiLCJnZW9tZXRyeSIsInBhcmFtZXRlcnMiLCJzaGFwZSIsIm1hdGVyaWFsIiwidXVpZHMiLCJleHRyYWN0RnJvbUNhY2hlIiwiY2FjaGUiLCJ2YWx1ZXMiLCJkYXRhIiwicmVjdXJzaXZlIiwicGFyc2UiLCJjaGlsZCIsImlzU2NlbmUiLCJpc0JveDMiLCJzZXRGcm9tQXJyYXkiLCJtaW5YIiwibWluWSIsIm1pbloiLCJtYXhYIiwibWF4WSIsIm1heFoiLCJzZXRGcm9tQnVmZmVyQXR0cmlidXRlIiwic2V0RnJvbVBvaW50cyIsInBvaW50cyIsIm1ha2VFbXB0eSIsImlsIiwiZXhwYW5kQnlQb2ludCIsInNldEZyb21DZW50ZXJBbmRTaXplIiwic2l6ZSIsImhhbGZTaXplIiwic2V0RnJvbU9iamVjdCIsImV4cGFuZEJ5T2JqZWN0IiwiYm94IiwiaXNFbXB0eSIsImdldENlbnRlciIsImdldFNpemUiLCJwb2ludCIsImV4cGFuZEJ5VmVjdG9yIiwiZXhwYW5kQnlTY2FsYXIiLCJzY29wZSIsIm5vZGUiLCJpc0dlb21ldHJ5IiwidmVydGljZXMiLCJpc0J1ZmZlckdlb21ldHJ5IiwiYXR0cmlidXRlcyIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImludGVyc2VjdHNCb3giLCJpbnRlcnNlY3RzU3BoZXJlIiwiY2xvc2VzdFBvaW50Iiwic3BoZXJlIiwiY2xhbXBQb2ludCIsImludGVyc2VjdHNQbGFuZSIsInBsYW5lIiwiY29uc3RhbnQiLCJpbnRlcnNlY3RzVHJpYW5nbGUiLCJ2MCIsImYwIiwiZjEiLCJmMiIsInRlc3RBeGlzIiwiZXh0ZW50cyIsInRyaWFuZ2xlTm9ybWFsIiwic2F0Rm9yQXhlcyIsImF4ZXMiLCJqIiwicDAiLCJwMSIsInAyIiwidHJpYW5nbGUiLCJkaXN0YW5jZVRvUG9pbnQiLCJnZXRCb3VuZGluZ1NwaGVyZSIsImludGVyc2VjdCIsInVuaW9uIiwib3B0aW9uYWxDZW50ZXIiLCJtYXhSYWRpdXNTcSIsImVtcHR5IiwicmFkaXVzU3VtIiwiZGVsdGFMZW5ndGhTcSIsImdldEJvdW5kaW5nQm94IiwicmF5IiwiYXQiLCJyZWNhc3QiLCJjbG9zZXN0UG9pbnRUb1BvaW50IiwiZGlyZWN0aW9uRGlzdGFuY2UiLCJkaXN0YW5jZVNxVG9Qb2ludCIsImRpc3RhbmNlU3FUb1NlZ21lbnQiLCJzZWdDZW50ZXIiLCJzZWdEaXIiLCJkaWZmIiwib3B0aW9uYWxQb2ludE9uUmF5Iiwib3B0aW9uYWxQb2ludE9uU2VnbWVudCIsInMwIiwic3FyRGlzdCIsImV4dERldCIsInNlZ0V4dGVudCIsImEwMSIsImIwIiwiaW52RGV0IiwiaW50ZXJzZWN0U3BoZXJlIiwidGNhIiwicmFkaXVzMiIsInRoYyIsInQwIiwidDEiLCJkaXN0YW5jZVRvUGxhbmUiLCJkZW5vbWluYXRvciIsImludGVyc2VjdFBsYW5lIiwiZGlzdFRvUG9pbnQiLCJpbnRlcnNlY3RCb3giLCJ0bWluIiwidG1heCIsInR5bWluIiwidHltYXgiLCJ0em1pbiIsInR6bWF4IiwiaW52ZGlyeCIsImludmRpcnkiLCJpbnZkaXJ6IiwiaW50ZXJzZWN0VHJpYW5nbGUiLCJlZGdlMSIsImVkZ2UyIiwiYmFja2ZhY2VDdWxsaW5nIiwiRGROIiwiRGRReEUyIiwiRGRFMXhRIiwiUWROIiwiZ2V0Tm9ybWFsIiwidGFyZ2V0TGVuZ3RoU3EiLCJnZXRCYXJ5Y29vcmQiLCJkb3QwMCIsImRvdDAxIiwiZG90MDIiLCJkb3QxMSIsImRvdDEyIiwiZGVub20iLCJpbnZEZW5vbSIsImdldFVWIiwiYmFyeWNvb3JkIiwicDMiLCJ1djEiLCJ1djIiLCJ1djMiLCJpc0Zyb250RmFjaW5nIiwic2V0RnJvbVBvaW50c0FuZEluZGljZXMiLCJpMCIsImkxIiwiaTIiLCJnZXRBcmVhIiwiZ2V0TWlkcG9pbnQiLCJnZXRQbGFuZSIsInNldEZyb21Db3BsYW5hclBvaW50cyIsInZhYiIsInZhYyIsInZiYyIsInZhcCIsInZicCIsInZjcCIsImQ0IiwidmMiLCJkNSIsImQ2IiwidmIiLCJ2YSIsIkNvbG9yS2V5d29yZHMiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsIkNvbG9yIiwic2V0UkdCIiwiaHVlMnJnYiIsIlNSR0JUb0xpbmVhciIsIkxpbmVhclRvU1JHQiIsIkZhY2UzIiwiY29sb3IiLCJtYXRlcmlhbEluZGV4IiwidmVydGV4Tm9ybWFscyIsImlzQ29sb3IiLCJ2ZXJ0ZXhDb2xvcnMiLCJzZXRIZXgiLCJzZXRTdHlsZSIsImhleCIsInNldEhTTCIsInN0eWxlIiwiaGFuZGxlQWxwaGEiLCJzdHJpbmciLCJleGVjIiwiY29tcG9uZW50cyIsInBhcnNlSW50IiwiY29weUdhbW1hVG9MaW5lYXIiLCJnYW1tYUZhY3RvciIsImNvcHlMaW5lYXJUb0dhbW1hIiwic2FmZUludmVyc2UiLCJjb252ZXJ0R2FtbWFUb0xpbmVhciIsImNvbnZlcnRMaW5lYXJUb0dhbW1hIiwiY29weVNSR0JUb0xpbmVhciIsImNvcHlMaW5lYXJUb1NSR0IiLCJjb252ZXJ0U1JHQlRvTGluZWFyIiwiY29udmVydExpbmVhclRvU1JHQiIsImdldEhleCIsImdldEhleFN0cmluZyIsImdldEhTTCIsImh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJkZWx0YSIsImdldFN0eWxlIiwib2Zmc2V0SFNMIiwiaHNsIiwiYWRkQ29sb3JzIiwiY29sb3IxIiwiY29sb3IyIiwibGVycEhTTCIsImhzbEEiLCJoc2xCIiwibWF0ZXJpYWxJZCIsIk1hdGVyaWFsIiwibGlnaHRzIiwiYmxlbmRpbmciLCJzaWRlIiwiZmxhdFNoYWRpbmciLCJ2ZXJ0ZXhUYW5nZW50cyIsIm9wYWNpdHkiLCJ0cmFuc3BhcmVudCIsImJsZW5kU3JjIiwiYmxlbmREc3QiLCJibGVuZEVxdWF0aW9uIiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZEVxdWF0aW9uQWxwaGEiLCJkZXB0aEZ1bmMiLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwic3RlbmNpbEZ1bmMiLCJzdGVuY2lsUmVmIiwic3RlbmNpbE1hc2siLCJzdGVuY2lsRmFpbCIsInN0ZW5jaWxaRmFpbCIsInN0ZW5jaWxaUGFzcyIsInN0ZW5jaWxXcml0ZSIsImNsaXBwaW5nUGxhbmVzIiwiY2xpcEludGVyc2VjdGlvbiIsImNsaXBTaGFkb3dzIiwic2hhZG93U2lkZSIsImNvbG9yV3JpdGUiLCJwcmVjaXNpb24iLCJwb2x5Z29uT2Zmc2V0IiwicG9seWdvbk9mZnNldEZhY3RvciIsInBvbHlnb25PZmZzZXRVbml0cyIsImRpdGhlcmluZyIsImFscGhhVGVzdCIsInByZW11bHRpcGxpZWRBbHBoYSIsIm5lZWRzVXBkYXRlIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJsaWdodE1hcCIsImxpZ2h0TWFwSW50ZW5zaXR5IiwiYW9NYXAiLCJhb01hcEludGVuc2l0eSIsInNwZWN1bGFyTWFwIiwiYWxwaGFNYXAiLCJlbnZNYXAiLCJjb21iaW5lIiwicmVmbGVjdGl2aXR5IiwicmVmcmFjdGlvblJhdGlvIiwid2lyZWZyYW1lIiwid2lyZWZyYW1lTGluZXdpZHRoIiwid2lyZWZyYW1lTGluZWNhcCIsIndpcmVmcmFtZUxpbmVqb2luIiwic2tpbm5pbmciLCJtb3JwaFRhcmdldHMiLCJzZXRWYWx1ZXMiLCJCdWZmZXJBdHRyaWJ1dGUiLCJpdGVtU2l6ZSIsIm5vcm1hbGl6ZWQiLCJkeW5hbWljIiwidXBkYXRlUmFuZ2UiLCJJbnQ4QnVmZmVyQXR0cmlidXRlIiwiSW50OEFycmF5IiwiVWludDhCdWZmZXJBdHRyaWJ1dGUiLCJVaW50OEFycmF5IiwiVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJJbnQxNkJ1ZmZlckF0dHJpYnV0ZSIsIkludDE2QXJyYXkiLCJVaW50MTZCdWZmZXJBdHRyaWJ1dGUiLCJVaW50MTZBcnJheSIsIkludDMyQnVmZmVyQXR0cmlidXRlIiwiSW50MzJBcnJheSIsIlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDY0QXJyYXkiLCJEaXJlY3RHZW9tZXRyeSIsIm5vcm1hbHMiLCJjb2xvcnMiLCJ1dnMiLCJ1dnMyIiwiZ3JvdXBzIiwic2tpbldlaWdodHMiLCJza2luSW5kaWNlcyIsImJvdW5kaW5nQm94IiwiYm91bmRpbmdTcGhlcmUiLCJ2ZXJ0aWNlc05lZWRVcGRhdGUiLCJub3JtYWxzTmVlZFVwZGF0ZSIsImNvbG9yc05lZWRVcGRhdGUiLCJ1dnNOZWVkVXBkYXRlIiwiZ3JvdXBzTmVlZFVwZGF0ZSIsImFycmF5TWF4IiwiaXNNYXRlcmlhbCIsIm9uQmVmb3JlQ29tcGlsZSIsIm5ld1ZhbHVlIiwiY3VycmVudFZhbHVlIiwiaXNSb290Iiwicm91Z2huZXNzIiwibWV0YWxuZXNzIiwiZW1pc3NpdmUiLCJlbWlzc2l2ZUludGVuc2l0eSIsInNwZWN1bGFyIiwic2hpbmluZXNzIiwiY2xlYXJDb2F0IiwiY2xlYXJDb2F0Um91Z2huZXNzIiwibWF0Y2FwIiwiYnVtcE1hcCIsImJ1bXBTY2FsZSIsIm5vcm1hbE1hcCIsIm5vcm1hbE1hcFR5cGUiLCJub3JtYWxTY2FsZSIsImRpc3BsYWNlbWVudE1hcCIsImRpc3BsYWNlbWVudFNjYWxlIiwiZGlzcGxhY2VtZW50QmlhcyIsInJvdWdobmVzc01hcCIsIm1ldGFsbmVzc01hcCIsImVtaXNzaXZlTWFwIiwiZW52TWFwSW50ZW5zaXR5IiwiZ3JhZGllbnRNYXAiLCJzaXplQXR0ZW51YXRpb24iLCJsaW5ld2lkdGgiLCJkYXNoU2l6ZSIsImdhcFNpemUiLCJtb3JwaE5vcm1hbHMiLCJzcmNQbGFuZXMiLCJkc3RQbGFuZXMiLCJpc01lc2hCYXNpY01hdGVyaWFsIiwiaXNCdWZmZXJBdHRyaWJ1dGUiLCJvblVwbG9hZENhbGxiYWNrIiwic2V0QXJyYXkiLCJzZXREeW5hbWljIiwiY29weUF0IiwiaW5kZXgxIiwiaW5kZXgyIiwiY29weUFycmF5IiwiY29weUNvbG9yc0FycmF5IiwiY29weVZlY3RvcjJzQXJyYXkiLCJ2ZWN0b3JzIiwiY29weVZlY3RvcjNzQXJyYXkiLCJjb3B5VmVjdG9yNHNBcnJheSIsInNldFhZIiwic2V0WFlaVyIsIm9uVXBsb2FkIiwiY29tcHV0ZUdyb3VwcyIsImZhY2VzIiwiZmFjZSIsImZyb21HZW9tZXRyeSIsIm1vcnBoVGFyZ2V0c1Bvc2l0aW9uIiwiZmFjZVZlcnRleFV2cyIsImhhc0ZhY2VWZXJ0ZXhVdiIsImhhc0ZhY2VWZXJ0ZXhVdjIiLCJtb3JwaFRhcmdldHNMZW5ndGgiLCJtb3JwaFRhcmdldHNOb3JtYWwiLCJtb3JwaE5vcm1hbHNMZW5ndGgiLCJoYXNTa2luSW5kaWNlcyIsImhhc1NraW5XZWlnaHRzIiwidmVydGV4VXZzIiwibW9ycGhUYXJnZXQiLCJtb3JwaE5vcm1hbCIsImJ1ZmZlckdlb21ldHJ5SWQiLCJCdWZmZXJHZW9tZXRyeSIsIm1vcnBoQXR0cmlidXRlcyIsImRyYXdSYW5nZSIsIk1lc2giLCJ1cGRhdGVNb3JwaFRhcmdldHMiLCJnZXRJbmRleCIsInNldEluZGV4IiwiYWRkQXR0cmlidXRlIiwiaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImFkZEdyb3VwIiwiY2xlYXJHcm91cHMiLCJzZXREcmF3UmFuZ2UiLCJ0YW5nZW50IiwiY29tcHV0ZUJvdW5kaW5nQm94IiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwib2JqIiwicG9zaXRpb25zIiwibGluZURpc3RhbmNlcyIsInVwZGF0ZUZyb21PYmplY3QiLCJkaXJlY3QiLCJfX2RpcmVjdEdlb21ldHJ5IiwiZWxlbWVudHNOZWVkVXBkYXRlIiwibGluZURpc3RhbmNlc05lZWRVcGRhdGUiLCJsaW5lRGlzdGFuY2UiLCJmcm9tRGlyZWN0R2VvbWV0cnkiLCJtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiIsIm1vcnBoQXR0cmlidXRlIiwiaXNOYU4iLCJib3hNb3JwaFRhcmdldHMiLCJqbCIsImNvbXB1dGVGYWNlTm9ybWFscyIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwidkEiLCJ2QiIsInZDIiwicEEiLCJwQiIsInBDIiwiY2IiLCJhYiIsImluZGljZXMiLCJub3JtYWxpemVOb3JtYWxzIiwibWVyZ2UiLCJhdHRyaWJ1dGVBcnJheTEiLCJhdHRyaWJ1dGUyIiwiYXR0cmlidXRlQXJyYXkyIiwiYXR0cmlidXRlT2Zmc2V0IiwidG9Ob25JbmRleGVkIiwiY29udmVydEJ1ZmZlckF0dHJpYnV0ZSIsImFycmF5MiIsImdlb21ldHJ5MiIsIm5ld0F0dHJpYnV0ZSIsIm1vcnBoQXJyYXkiLCJhdHRyaWJ1dGVEYXRhIiwiaGFzTW9ycGhBdHRyaWJ1dGVzIiwiYXR0cmlidXRlQXJyYXkiLCJzZXREcmF3TW9kZSIsIm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyIsIm1vcnBoVGFyZ2V0RGljdGlvbmFyeSIsIm1sIiwiU3RyaW5nIiwiaW52ZXJzZU1hdHJpeCIsInRlbXBBIiwidGVtcEIiLCJ0ZW1wQyIsIm1vcnBoQSIsIm1vcnBoQiIsIm1vcnBoQyIsInV2QSIsInV2QiIsInV2QyIsImludGVyc2VjdGlvblBvaW50IiwiaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCIsImNoZWNrSW50ZXJzZWN0aW9uIiwicmF5Y2FzdGVyIiwiY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiIsIm1vcnBoUG9zaXRpb24iLCJtb3JwaEluZmx1ZW5jZXMiLCJpbmZsdWVuY2UiLCJpbnRlcnNlY3Rpb24iLCJpbnRlcnNlY3RzIiwiZ3JvdXBNYXRlcmlhbCIsImZhY2VJbmRleCIsImZ2QSIsImZ2QiIsImZ2QyIsImlzTXVsdGlNYXRlcmlhbCIsImZsIiwiZmFjZU1hdGVyaWFsIiwidXZzX2YiLCJnZW9tZXRyeUlkIiwiR2VvbWV0cnkiLCJCb3hHZW9tZXRyeSIsImRlcHRoIiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwiZGVwdGhTZWdtZW50cyIsImZyb21CdWZmZXJHZW9tZXRyeSIsIkJveEJ1ZmZlckdlb21ldHJ5IiwibWVyZ2VWZXJ0aWNlcyIsIm51bWJlck9mVmVydGljZXMiLCJncm91cFN0YXJ0IiwiYnVpbGRQbGFuZSIsInVkaXIiLCJ2ZGlyIiwiZ3JpZFgiLCJncmlkWSIsInNlZ21lbnRXaWR0aCIsInNlZ21lbnRIZWlnaHQiLCJ3aWR0aEhhbGYiLCJoZWlnaHRIYWxmIiwiZGVwdGhIYWxmIiwiZ3JpZFgxIiwiZ3JpZFkxIiwidmVydGV4Q291bnRlciIsImdyb3VwQ291bnQiLCJjbG9uZVVuaWZvcm1zIiwibWVyZ2VVbmlmb3JtcyIsInVuaWZvcm1zIiwibWVyZ2VkIiwiYWRkRmFjZSIsImFyZWFXZWlnaHRlZCIsInZsIiwiY29tcHV0ZUZsYXRWZXJ0ZXhOb3JtYWxzIiwiY29tcHV0ZU1vcnBoTm9ybWFscyIsIl9fb3JpZ2luYWxGYWNlTm9ybWFsIiwiX19vcmlnaW5hbFZlcnRleE5vcm1hbHMiLCJ0bXBHZW8iLCJmYWNlTm9ybWFscyIsImRzdE5vcm1hbHNGYWNlIiwiZHN0Tm9ybWFsc1ZlcnRleCIsImZhY2VOb3JtYWwiLCJtYXRlcmlhbEluZGV4T2Zmc2V0IiwidmVydGV4T2Zmc2V0IiwidmVydGljZXMxIiwidmVydGljZXMyIiwiZmFjZXMxIiwiZmFjZXMyIiwiY29sb3JzMSIsImNvbG9yczIiLCJ2ZXJ0ZXhDb3B5IiwiZmFjZUNvcHkiLCJmYWNlVmVydGV4Tm9ybWFscyIsImZhY2VWZXJ0ZXhDb2xvcnMiLCJmYWNlVmVydGV4VXZzMiIsInV2c0NvcHkiLCJrIiwia2wiLCJtZXJnZU1lc2giLCJtZXNoIiwidmVydGljZXNNYXAiLCJ1bmlxdWUiLCJjaGFuZ2VzIiwiZmFjZUluZGljZXNUb1JlbW92ZSIsImlkeCIsInNvcnRGYWNlc0J5TWF0ZXJpYWxJbmRleCIsInNvcnQiLCJuZXdVdnMxIiwibmV3VXZzMiIsInV2czEiLCJ2ZXJ0ZXgiLCJub3JtYWxzSGFzaCIsImNvbG9yc0hhc2giLCJ1dnNIYXNoIiwiaGFzRmFjZU5vcm1hbCIsImhhc0ZhY2VWZXJ0ZXhOb3JtYWwiLCJoYXNGYWNlQ29sb3IiLCJoYXNGYWNlVmVydGV4Q29sb3IiLCJmYWNlVHlwZSIsInNldEJpdCIsImdldFV2SW5kZXgiLCJnZXROb3JtYWxJbmRleCIsImdldENvbG9ySW5kZXgiLCJlbmFibGVkIiwiaGFzaCIsInNyY1ZlcnRleE5vcm1hbCIsImRlc3RWZXJ0ZXhOb3JtYWwiLCJVbmlmb3Jtc1V0aWxzIiwiZGVmYXVsdF92ZXJ0ZXgiLCJkZWZhdWx0X2ZyYWdtZW50IiwiU2hhZGVyTWF0ZXJpYWwiLCJkZWZpbmVzIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJjbGlwcGluZyIsImV4dGVuc2lvbnMiLCJkZXJpdmF0aXZlcyIsImZyYWdEZXB0aCIsImRyYXdCdWZmZXJzIiwic2hhZGVyVGV4dHVyZUxPRCIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJpbmRleDBBdHRyaWJ1dGVOYW1lIiwidW5pZm9ybXNOZWVkVXBkYXRlIiwiQ2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJmb3YiLCJhc3BlY3QiLCJ6b29tIiwiZm9jdXMiLCJ2aWV3IiwiZmlsbUdhdWdlIiwiZmlsbU9mZnNldCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJpc1NoYWRlck1hdGVyaWFsIiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsInNldEZvY2FsTGVuZ3RoIiwiZm9jYWxMZW5ndGgiLCJ2RXh0ZW50U2xvcGUiLCJnZXRGaWxtSGVpZ2h0IiwiYXRhbiIsImdldEZvY2FsTGVuZ3RoIiwiZ2V0RWZmZWN0aXZlRk9WIiwiZ2V0RmlsbVdpZHRoIiwic2V0Vmlld09mZnNldCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsZWFyVmlld09mZnNldCIsInNrZXciLCJ0aHJlZV9tb2R1bGVfZm92IiwidGhyZWVfbW9kdWxlX2FzcGVjdCIsIkN1YmVDYW1lcmEiLCJjdWJlUmVzb2x1dGlvbiIsImNhbWVyYVBYIiwiY2FtZXJhTlgiLCJjYW1lcmFQWSIsImNhbWVyYU5ZIiwiY2FtZXJhUFoiLCJjYW1lcmFOWiIsInJlbmRlclRhcmdldCIsIldlYkdMUmVuZGVyVGFyZ2V0Q3ViZSIsInJlbmRlcmVyIiwic2NlbmUiLCJjdXJyZW50UmVuZGVyVGFyZ2V0IiwiZ2V0UmVuZGVyVGFyZ2V0Iiwic2V0UmVuZGVyVGFyZ2V0IiwicmVuZGVyIiwiY2xlYXIiLCJzdGVuY2lsIiwiRGF0YVRleHR1cmUiLCJQbGFuZSIsIkZydXN0dW0iLCJwNCIsInA1IiwicGxhbmVzIiwiaXNXZWJHTFJlbmRlclRhcmdldEN1YmUiLCJmcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSIsInNoYWRlciIsInRFcXVpcmVjdCIsImpvaW4iLCJpc0RhdGFUZXh0dXJlIiwiaXNQbGFuZSIsInNldENvbXBvbmVudHMiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsImludmVyc2VOb3JtYWxMZW5ndGgiLCJkaXN0YW5jZVRvU3BoZXJlIiwicHJvamVjdFBvaW50IiwiaW50ZXJzZWN0TGluZSIsImxpbmUiLCJpbnRlcnNlY3RzTGluZSIsInN0YXJ0U2lnbiIsImVuZFNpZ24iLCJjb3BsYW5hclBvaW50Iiwib3B0aW9uYWxOb3JtYWxNYXRyaXgiLCJyZWZlcmVuY2VQb2ludCIsImZydXN0dW0iLCJzZXRGcm9tTWF0cml4IiwibWUwIiwibWUxIiwibWUyIiwibWUzIiwibWU0IiwibWU1IiwibWU2IiwibWU3IiwibWU4IiwibWU5IiwibWUxMCIsIm1lMTEiLCJtZTEyIiwibWUxMyIsIm1lMTQiLCJtZTE1IiwiaW50ZXJzZWN0c09iamVjdCIsImludGVyc2VjdHNTcHJpdGUiLCJzcHJpdGUiLCJuZWdSYWRpdXMiLCJTaGFkZXJDaHVuayIsImFscGhhbWFwX2ZyYWdtZW50IiwiYWxwaGFtYXBfcGFyc19mcmFnbWVudCIsImFscGhhdGVzdF9mcmFnbWVudCIsImFvbWFwX2ZyYWdtZW50IiwiYW9tYXBfcGFyc19mcmFnbWVudCIsImJlZ2luX3ZlcnRleCIsImJlZ2lubm9ybWFsX3ZlcnRleCIsImJzZGZzIiwiYnVtcG1hcF9wYXJzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgiLCJjbGlwcGluZ19wbGFuZXNfdmVydGV4IiwiY29sb3JfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX2ZyYWdtZW50IiwiY29sb3JfcGFyc192ZXJ0ZXgiLCJjb2xvcl92ZXJ0ZXgiLCJjb21tb24iLCJjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQiLCJkZWZhdWx0bm9ybWFsX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgiLCJlbWlzc2l2ZW1hcF9mcmFnbWVudCIsImVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQiLCJlbmNvZGluZ3NfZnJhZ21lbnQiLCJlbmNvZGluZ3NfcGFyc19mcmFnbWVudCIsImVudm1hcF9mcmFnbWVudCIsImVudm1hcF9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfdmVydGV4IiwiZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfdmVydGV4IiwiZm9nX3ZlcnRleCIsImZvZ19wYXJzX3ZlcnRleCIsImZvZ19mcmFnbWVudCIsImZvZ19wYXJzX2ZyYWdtZW50IiwiZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0bWFwX2ZyYWdtZW50IiwibGlnaHRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0c19sYW1iZXJ0X3ZlcnRleCIsImxpZ2h0c19wYXJzX2JlZ2luIiwibGlnaHRzX3Bob25nX2ZyYWdtZW50IiwibGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImxpZ2h0c19mcmFnbWVudF9iZWdpbiIsImxpZ2h0c19mcmFnbWVudF9tYXBzIiwibGlnaHRzX2ZyYWdtZW50X2VuZCIsImxvZ2RlcHRoYnVmX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4IiwibG9nZGVwdGhidWZfdmVydGV4IiwibWFwX2ZyYWdtZW50IiwibWFwX3BhcnNfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50IiwibW9ycGhub3JtYWxfdmVydGV4IiwibW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgiLCJtb3JwaHRhcmdldF92ZXJ0ZXgiLCJub3JtYWxfZnJhZ21lbnRfYmVnaW4iLCJub3JtYWxfZnJhZ21lbnRfbWFwcyIsIm5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50IiwicGFja2luZyIsInByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQiLCJwcm9qZWN0X3ZlcnRleCIsImRpdGhlcmluZ19mcmFnbWVudCIsImRpdGhlcmluZ19wYXJzX2ZyYWdtZW50Iiwicm91Z2huZXNzbWFwX2ZyYWdtZW50Iiwicm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc19mcmFnbWVudCIsInNoYWRvd21hcF9wYXJzX3ZlcnRleCIsInNoYWRvd21hcF92ZXJ0ZXgiLCJzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQiLCJza2luYmFzZV92ZXJ0ZXgiLCJza2lubmluZ19wYXJzX3ZlcnRleCIsInNraW5uaW5nX3ZlcnRleCIsInNraW5ub3JtYWxfdmVydGV4Iiwic3BlY3VsYXJtYXBfZnJhZ21lbnQiLCJzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50IiwidG9uZW1hcHBpbmdfZnJhZ21lbnQiLCJ0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50IiwidXZfcGFyc19mcmFnbWVudCIsInV2X3BhcnNfdmVydGV4IiwidXZfdmVydGV4IiwidXYyX3BhcnNfZnJhZ21lbnQiLCJ1djJfcGFyc192ZXJ0ZXgiLCJ1djJfdmVydGV4Iiwid29ybGRwb3NfdmVydGV4IiwiYmFja2dyb3VuZF9mcmFnIiwiYmFja2dyb3VuZF92ZXJ0IiwiY3ViZV9mcmFnIiwiY3ViZV92ZXJ0IiwiZGVwdGhfZnJhZyIsImRlcHRoX3ZlcnQiLCJkaXN0YW5jZVJHQkFfZnJhZyIsImRpc3RhbmNlUkdCQV92ZXJ0IiwiZXF1aXJlY3RfZnJhZyIsImVxdWlyZWN0X3ZlcnQiLCJsaW5lZGFzaGVkX2ZyYWciLCJsaW5lZGFzaGVkX3ZlcnQiLCJtZXNoYmFzaWNfZnJhZyIsIm1lc2hiYXNpY192ZXJ0IiwibWVzaGxhbWJlcnRfZnJhZyIsIm1lc2hsYW1iZXJ0X3ZlcnQiLCJtZXNobWF0Y2FwX2ZyYWciLCJtZXNobWF0Y2FwX3ZlcnQiLCJtZXNocGhvbmdfZnJhZyIsIm1lc2hwaG9uZ192ZXJ0IiwibWVzaHBoeXNpY2FsX2ZyYWciLCJtZXNocGh5c2ljYWxfdmVydCIsIm5vcm1hbF9mcmFnIiwibm9ybWFsX3ZlcnQiLCJwb2ludHNfZnJhZyIsInBvaW50c192ZXJ0Iiwic2hhZG93X2ZyYWciLCJzaGFkb3dfdmVydCIsInNwcml0ZV9mcmFnIiwic3ByaXRlX3ZlcnQiLCJVbmlmb3Jtc0xpYiIsImRpZmZ1c2UiLCJ1dlRyYW5zZm9ybSIsInNwZWN1bGFybWFwIiwiZW52bWFwIiwiZmxpcEVudk1hcCIsIm1heE1pcExldmVsIiwiYW9tYXAiLCJsaWdodG1hcCIsImVtaXNzaXZlbWFwIiwiYnVtcG1hcCIsIm5vcm1hbG1hcCIsImRpc3BsYWNlbWVudG1hcCIsInJvdWdobmVzc21hcCIsIm1ldGFsbmVzc21hcCIsImdyYWRpZW50bWFwIiwiZm9nRGVuc2l0eSIsImZvZ05lYXIiLCJmb2dGYXIiLCJmb2dDb2xvciIsImFtYmllbnRMaWdodENvbG9yIiwibGlnaHRQcm9iZSIsImRpcmVjdGlvbmFsTGlnaHRzIiwicHJvcGVydGllcyIsInNoYWRvdyIsInNoYWRvd0JpYXMiLCJzaGFkb3dSYWRpdXMiLCJzaGFkb3dNYXBTaXplIiwiZGlyZWN0aW9uYWxTaGFkb3dNYXAiLCJkaXJlY3Rpb25hbFNoYWRvd01hdHJpeCIsInNwb3RMaWdodHMiLCJjb25lQ29zIiwicGVudW1icmFDb3MiLCJkZWNheSIsInNwb3RTaGFkb3dNYXAiLCJzcG90U2hhZG93TWF0cml4IiwicG9pbnRMaWdodHMiLCJzaGFkb3dDYW1lcmFOZWFyIiwic2hhZG93Q2FtZXJhRmFyIiwicG9pbnRTaGFkb3dNYXAiLCJwb2ludFNoYWRvd01hdHJpeCIsImhlbWlzcGhlcmVMaWdodHMiLCJza3lDb2xvciIsImdyb3VuZENvbG9yIiwicmVjdEFyZWFMaWdodHMiLCJTaGFkZXJMaWIiLCJiYXNpYyIsImxhbWJlcnQiLCJwaG9uZyIsInN0YW5kYXJkIiwiZGFzaGVkIiwidG90YWxTaXplIiwidDJEIiwiY3ViZSIsInRDdWJlIiwidEZsaXAiLCJlcXVpcmVjdCIsImRpc3RhbmNlUkdCQSIsInJlZmVyZW5jZVBvc2l0aW9uIiwibmVhckRpc3RhbmNlIiwiZmFyRGlzdGFuY2UiLCJXZWJHTEFuaW1hdGlvbiIsImlzQW5pbWF0aW5nIiwiYW5pbWF0aW9uTG9vcCIsIm9uQW5pbWF0aW9uRnJhbWUiLCJ0aW1lIiwiZnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRBbmltYXRpb25Mb29wIiwic2V0Q29udGV4dCIsIldlYkdMQXR0cmlidXRlcyIsImdsIiwiYnVmZmVycyIsIldlYWtNYXAiLCJkZWxldGVCdWZmZXIiLCJidWZmZXIiLCJkZWxldGUiLCJidWZmZXJUeXBlIiwidXNhZ2UiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsImJ5dGVzUGVyRWxlbWVudCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiYnVmZmVyU3ViRGF0YSIsInN1YmFycmF5IiwidXBkYXRlQnVmZmVyIiwiUGxhbmVHZW9tZXRyeSIsIlBsYW5lQnVmZmVyR2VvbWV0cnkiLCJ3aWR0aF9oYWxmIiwiaGVpZ2h0X2hhbGYiLCJzZWdtZW50X3dpZHRoIiwic2VnbWVudF9oZWlnaHQiLCJhYnNOdW1lcmljYWxTb3J0IiwiQ3ViZVRleHR1cmUiLCJEYXRhVGV4dHVyZTJEQXJyYXkiLCJ3cmFwUiIsIkRhdGFUZXh0dXJlM0QiLCJwaHlzaWNhbCIsImlzQ3ViZVRleHR1cmUiLCJpc0RhdGFUZXh0dXJlMkRBcnJheSIsImlzRGF0YVRleHR1cmUzRCIsImVtcHR5VGV4dHVyZSIsImVtcHR5VGV4dHVyZTJkQXJyYXkiLCJlbXB0eVRleHR1cmUzZCIsImVtcHR5Q3ViZVRleHR1cmUiLCJhcnJheUNhY2hlRjMyIiwiYXJyYXlDYWNoZUkzMiIsIm1hdDRhcnJheSIsIm1hdDNhcnJheSIsIm1hdDJhcnJheSIsImZsYXR0ZW4iLCJuQmxvY2tzIiwiYmxvY2tTaXplIiwiZmlyc3RFbGVtIiwiYXJyYXlzRXF1YWwiLCJhbGxvY1RleFVuaXRzIiwiYWxsb2NhdGVUZXh0dXJlVW5pdCIsInNldFZhbHVlVjFmIiwidW5pZm9ybTFmIiwiYWRkciIsInNldFZhbHVlVjJmIiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlVjNmIiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlVjRmIiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlTTIiLCJ1bmlmb3JtTWF0cml4MmZ2Iiwic2V0VmFsdWVNMyIsInVuaWZvcm1NYXRyaXgzZnYiLCJzZXRWYWx1ZU00IiwidW5pZm9ybU1hdHJpeDRmdiIsInNldFZhbHVlVDEiLCJ1bml0IiwidW5pZm9ybTFpIiwic2FmZVNldFRleHR1cmUyRCIsInNldFZhbHVlVDJEQXJyYXkxIiwic2V0VGV4dHVyZTJEQXJyYXkiLCJzZXRWYWx1ZVQzRDEiLCJzZXRUZXh0dXJlM0QiLCJzZXRWYWx1ZVQ2Iiwic2FmZVNldFRleHR1cmVDdWJlIiwic2V0VmFsdWVWMWkiLCJzZXRWYWx1ZVYyaSIsInVuaWZvcm0yaXYiLCJzZXRWYWx1ZVYzaSIsInVuaWZvcm0zaXYiLCJzZXRWYWx1ZVY0aSIsInVuaWZvcm00aXYiLCJzZXRWYWx1ZVYxZkFycmF5IiwidW5pZm9ybTFmdiIsInNldFZhbHVlVjFpQXJyYXkiLCJ1bmlmb3JtMWl2Iiwic2V0VmFsdWVWMmlBcnJheSIsInNldFZhbHVlVjNpQXJyYXkiLCJzZXRWYWx1ZVY0aUFycmF5Iiwic2V0VmFsdWVWMmZBcnJheSIsInNldFZhbHVlVjNmQXJyYXkiLCJzZXRWYWx1ZVY0ZkFycmF5Iiwic2V0VmFsdWVNMkFycmF5Iiwic2V0VmFsdWVNM0FycmF5Iiwic2V0VmFsdWVNNEFycmF5Iiwic2V0VmFsdWVUMUFycmF5IiwidW5pdHMiLCJzZXRWYWx1ZVQ2QXJyYXkiLCJTaW5nbGVVbmlmb3JtIiwiYWN0aXZlSW5mbyIsInNldFZhbHVlIiwiZ2V0U2luZ3VsYXJTZXR0ZXIiLCJQdXJlQXJyYXlVbmlmb3JtIiwiZ2V0UHVyZUFycmF5U2V0dGVyIiwiU3RydWN0dXJlZFVuaWZvcm0iLCJzZXEiLCJ1cGRhdGVDYWNoZSIsIlJlUGF0aFBhcnQiLCJhZGRVbmlmb3JtIiwiY29udGFpbmVyIiwidW5pZm9ybU9iamVjdCIsInBhcnNlVW5pZm9ybSIsInBhdGgiLCJwYXRoTGVuZ3RoIiwibGFzdEluZGV4IiwibWF0Y2hFbmQiLCJpZElzSW5kZXgiLCJzdWJzY3JpcHQiLCJuZXh0IiwiV2ViR0xVbmlmb3JtcyIsInByb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiaW5mbyIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJXZWJHTFNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJzZXRPcHRpb25hbCIsInVwbG9hZCIsInNlcVdpdGhWYWx1ZSIsInByb2dyYW1JZENvdW50IiwiZ2V0RW5jb2RpbmdDb21wb25lbnRzIiwiZ2V0U2hhZGVyRXJyb3JzIiwic3RhdHVzIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsInRyaW0iLCJsaW5lcyIsInNwbGl0IiwiYWRkTGluZU51bWJlcnMiLCJnZXRTaGFkZXJTb3VyY2UiLCJnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJmaWx0ZXJFbXB0eUxpbmUiLCJyZXBsYWNlTGlnaHROdW1zIiwicmVwbGFjZSIsIm51bURpckxpZ2h0cyIsIm51bVNwb3RMaWdodHMiLCJudW1SZWN0QXJlYUxpZ2h0cyIsIm51bVBvaW50TGlnaHRzIiwibnVtSGVtaUxpZ2h0cyIsInJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyIsIm51bUNsaXBwaW5nUGxhbmVzIiwibnVtQ2xpcEludGVyc2VjdGlvbiIsInBhcnNlSW5jbHVkZXMiLCJpbmNsdWRlIiwidW5yb2xsTG9vcHMiLCJzbmlwcGV0IiwidW5yb2xsIiwiV2ViR0xQcm9ncmFtIiwiY29kZSIsImNhcGFiaWxpdGllcyIsInNoYWRvd01hcFR5cGVEZWZpbmUiLCJzaGFkb3dNYXBUeXBlIiwiZW52TWFwVHlwZURlZmluZSIsImVudk1hcE1vZGVEZWZpbmUiLCJlbnZNYXBCbGVuZGluZ0RlZmluZSIsInByZWZpeFZlcnRleCIsInByZWZpeEZyYWdtZW50IiwiZ2FtbWFGYWN0b3JEZWZpbmUiLCJjdXN0b21FeHRlbnNpb25zIiwiaXNXZWJHTDIiLCJyZW5kZXJlckV4dGVuc2lvbnMiLCJlbnZNYXBDdWJlVVYiLCJvYmplY3RTcGFjZU5vcm1hbE1hcCIsImxvZ2FyaXRobWljRGVwdGhCdWZmZXIiLCJmaWx0ZXIiLCJnZW5lcmF0ZUV4dGVuc2lvbnMiLCJjdXN0b21EZWZpbmVzIiwiY2h1bmtzIiwiZ2VuZXJhdGVEZWZpbmVzIiwiY3JlYXRlUHJvZ3JhbSIsImlzUmF3U2hhZGVyTWF0ZXJpYWwiLCJzdXBwb3J0c1ZlcnRleFRleHR1cmVzIiwibWF4Qm9uZXMiLCJ1c2VGb2ciLCJmb2dFeHAiLCJ1c2VWZXJ0ZXhUZXh0dXJlIiwiZG91YmxlU2lkZWQiLCJmbGlwU2lkZWQiLCJzaGFkb3dNYXBFbmFibGVkIiwicGh5c2ljYWxseUNvcnJlY3RMaWdodHMiLCJ0b25lTWFwcGluZyIsInRvbmVNYXBwaW5nTmFtZSIsImdldFRvbmVNYXBwaW5nRnVuY3Rpb24iLCJvdXRwdXRFbmNvZGluZyIsIm1hcEVuY29kaW5nIiwibWF0Y2FwRW5jb2RpbmciLCJlbnZNYXBFbmNvZGluZyIsImVtaXNzaXZlTWFwRW5jb2RpbmciLCJnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24iLCJkZXB0aFBhY2tpbmciLCJpc0dMU0wzU2hhZGVyTWF0ZXJpYWwiLCJ2ZXJzaW9uUmVnZXgiLCJjYWNoZWRVbmlmb3JtcyIsImNhY2hlZEF0dHJpYnV0ZXMiLCJmcmFnbWVudEdsc2wiLCJnbFZlcnRleFNoYWRlciIsImdsRnJhZ21lbnRTaGFkZXIiLCJhdHRhY2hTaGFkZXIiLCJiaW5kQXR0cmliTG9jYXRpb24iLCJsaW5rUHJvZ3JhbSIsImRlYnVnIiwiY2hlY2tTaGFkZXJFcnJvcnMiLCJwcm9ncmFtTG9nIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJ2ZXJ0ZXhMb2ciLCJmcmFnbWVudExvZyIsInJ1bm5hYmxlIiwiaGF2ZURpYWdub3N0aWNzIiwidmVydGV4RXJyb3JzIiwiZnJhZ21lbnRFcnJvcnMiLCJnZXRFcnJvciIsImRpYWdub3N0aWNzIiwicHJlZml4IiwiZGVsZXRlU2hhZGVyIiwiZ2V0VW5pZm9ybXMiLCJnZXRBdHRyaWJ1dGVzIiwiZ2V0QWN0aXZlQXR0cmliIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyIsImRlc3Ryb3kiLCJkZWxldGVQcm9ncmFtIiwidXNlZFRpbWVzIiwiV2ViR0xQcm9ncmFtcyIsInByb2dyYW1zIiwic2hhZGVySURzIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJNZXNoRGlzdGFuY2VNYXRlcmlhbCIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJNZXNoUGhvbmdNYXRlcmlhbCIsIk1lc2hUb29uTWF0ZXJpYWwiLCJNZXNoU3RhbmRhcmRNYXRlcmlhbCIsIk1lc2hQaHlzaWNhbE1hdGVyaWFsIiwiTWVzaE1hdGNhcE1hdGVyaWFsIiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJMaW5lRGFzaGVkTWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsIlNoYWRvd01hdGVyaWFsIiwiU3ByaXRlTWF0ZXJpYWwiLCJwYXJhbWV0ZXJOYW1lcyIsImdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAiLCJnYW1tYU92ZXJyaWRlTGluZWFyIiwiZ2V0UGFyYW1ldGVycyIsInNoYWRvd3MiLCJuQ2xpcFBsYW5lcyIsIm5DbGlwSW50ZXJzZWN0aW9uIiwic2hhZGVySUQiLCJpc1NraW5uZWRNZXNoIiwiYm9uZXMiLCJza2VsZXRvbiIsImZsb2F0VmVydGV4VGV4dHVyZXMiLCJuVmVydGV4VW5pZm9ybXMiLCJtYXhWZXJ0ZXhVbmlmb3JtcyIsIm5WZXJ0ZXhNYXRyaWNlcyIsImFsbG9jYXRlQm9uZXMiLCJnZXRNYXhQcmVjaXNpb24iLCJ2ZXJ0ZXhUZXh0dXJlcyIsImdhbW1hT3V0cHV0IiwiZ2FtbWFJbnB1dCIsImVudk1hcE1vZGUiLCJpc0ZvZ0V4cDIiLCJtYXhNb3JwaFRhcmdldHMiLCJtYXhNb3JwaE5vcm1hbHMiLCJkaXJlY3Rpb25hbCIsInNwb3QiLCJyZWN0QXJlYSIsImhlbWkiLCJzaGFkb3dNYXAiLCJnZXRQcm9ncmFtQ29kZSIsImFjcXVpcmVQcm9ncmFtIiwicGwiLCJwcm9ncmFtSW5mbyIsInJlbGVhc2VQcm9ncmFtIiwicG9wIiwicGFpbnRlclNvcnRTdGFibGUiLCJncm91cE9yZGVyIiwicmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlIiwiV2ViR0xSZW5kZXJMaXN0IiwicmVuZGVySXRlbXMiLCJyZW5kZXJJdGVtc0luZGV4Iiwib3BhcXVlIiwiZGVmYXVsdFByb2dyYW0iLCJnZXROZXh0UmVuZGVySXRlbSIsInJlbmRlckl0ZW0iLCJpbml0IiwidW5zaGlmdCIsIm5leHRWZXJzaW9uIiwiV2ViR0xMaWdodHMiLCJsaWdodCIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJzdGF0ZSIsImRpcmVjdGlvbmFsTGVuZ3RoIiwicG9pbnRMZW5ndGgiLCJzcG90TGVuZ3RoIiwicmVjdEFyZWFMZW5ndGgiLCJoZW1pTGVuZ3RoIiwic2hhZG93c0xlbmd0aCIsImFtYmllbnQiLCJwcm9iZSIsInZlY3RvcjMiLCJtYXRyaXg0MiIsInNldHVwIiwidmlld01hdHJpeCIsImludGVuc2l0eSIsImlzQW1iaWVudExpZ2h0IiwiaXNMaWdodFByb2JlIiwic2giLCJjb2VmZmljaWVudHMiLCJpc0RpcmVjdGlvbmFsTGlnaHQiLCJiaWFzIiwibWFwU2l6ZSIsImlzU3BvdExpZ2h0IiwicGVudW1icmEiLCJpc1JlY3RBcmVhTGlnaHQiLCJpc1BvaW50TGlnaHQiLCJpc0hlbWlzcGhlcmVMaWdodCIsIldlYkdMUmVuZGVyU3RhdGUiLCJsaWdodHNBcnJheSIsInNoYWRvd3NBcnJheSIsInNldHVwTGlnaHRzIiwicHVzaExpZ2h0IiwicHVzaFNoYWRvdyIsInNoYWRvd0xpZ2h0IiwiV2ViR0xTaGFkb3dNYXAiLCJfcmVuZGVyZXIiLCJfb2JqZWN0cyIsIm1heFRleHR1cmVTaXplIiwiX2ZydXN0dW0iLCJfcHJvalNjcmVlbk1hdHJpeCIsIl9zaGFkb3dNYXBTaXplIiwiX21heFNoYWRvd01hcFNpemUiLCJfbG9va1RhcmdldCIsIl9saWdodFBvc2l0aW9uV29ybGQiLCJfTW9ycGhpbmdGbGFnIiwiX1NraW5uaW5nRmxhZyIsIl9OdW1iZXJPZk1hdGVyaWFsVmFyaWFudHMiLCJfZGVwdGhNYXRlcmlhbHMiLCJfZGlzdGFuY2VNYXRlcmlhbHMiLCJfbWF0ZXJpYWxDYWNoZSIsIjAiLCIxIiwiMiIsImN1YmVEaXJlY3Rpb25zIiwiY3ViZVVwcyIsImN1YmUyRFZpZXdQb3J0cyIsInVzZU1vcnBoaW5nIiwidXNlU2tpbm5pbmciLCJkZXB0aE1hdGVyaWFsIiwiZGlzdGFuY2VNYXRlcmlhbCIsImdldERlcHRoTWF0ZXJpYWwiLCJsaWdodFBvc2l0aW9uV29ybGQiLCJyZXN1bHQiLCJtYXRlcmlhbFZhcmlhbnRzIiwiY3VzdG9tTWF0ZXJpYWwiLCJjdXN0b21EZXB0aE1hdGVyaWFsIiwiY3VzdG9tRGlzdGFuY2VNYXRlcmlhbCIsInZhcmlhbnRJbmRleCIsImxvY2FsQ2xpcHBpbmdFbmFibGVkIiwia2V5QSIsImtleUIiLCJtYXRlcmlhbHNGb3JWYXJpYW50IiwiY2FjaGVkTWF0ZXJpYWwiLCJpc01lc2hEaXN0YW5jZU1hdGVyaWFsIiwicmVuZGVyT2JqZWN0Iiwic2hhZG93Q2FtZXJhIiwicmVuZGVyQnVmZmVyRGlyZWN0IiwiZmFjZUNvdW50IiwiYWN0aXZlQ3ViZUZhY2UiLCJnZXRBY3RpdmVDdWJlRmFjZSIsImFjdGl2ZU1pcG1hcExldmVsIiwiZ2V0QWN0aXZlTWlwbWFwTGV2ZWwiLCJfc3RhdGUiLCJzZXRCbGVuZGluZyIsInNldENsZWFyIiwic2V0VGVzdCIsInNldFNjaXNzb3JUZXN0IiwidnBXaWR0aCIsInZwSGVpZ2h0IiwicGFycyIsImlzU3BvdExpZ2h0U2hhZG93Iiwic2hhZG93TWF0cml4IiwidnBEaW1lbnNpb25zIiwiV2ViR0xUZXh0dXJlcyIsIl9nbCIsInV0aWxzIiwiX3ZpZGVvVGV4dHVyZXMiLCJ1c2VPZmZzY3JlZW5DYW52YXMiLCJPZmZzY3JlZW5DYW52YXMiLCJjcmVhdGVDYW52YXMiLCJyZXNpemVJbWFnZSIsIm5lZWRzUG93ZXJPZlR3byIsIm5lZWRzTmV3Q2FudmFzIiwibWF4U2l6ZSIsIkhUTUxJbWFnZUVsZW1lbnQiLCJJbWFnZUJpdG1hcCIsInRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyIsInN1cHBvcnRzTWlwcyIsImdlbmVyYXRlTWlwbWFwIiwiX19tYXhNaXBMZXZlbCIsIkxPRzJFIiwiZ2V0SW50ZXJuYWxGb3JtYXQiLCJnbEZvcm1hdCIsImdsVHlwZSIsImludGVybmFsRm9ybWF0IiwiZmlsdGVyRmFsbGJhY2siLCJvblRleHR1cmVEaXNwb3NlIiwidGV4dHVyZVByb3BlcnRpZXMiLCJfX3dlYmdsSW5pdCIsImRlbGV0ZVRleHR1cmUiLCJfX3dlYmdsVGV4dHVyZSIsImRlYWxsb2NhdGVUZXh0dXJlIiwiaXNWaWRlb1RleHR1cmUiLCJtZW1vcnkiLCJvblJlbmRlclRhcmdldERpc3Bvc2UiLCJyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJfX3dlYmdsRnJhbWVidWZmZXIiLCJfX3dlYmdsRGVwdGhidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0IiwidGV4dHVyZVVuaXRzIiwic2V0VGV4dHVyZTJEIiwic2xvdCIsInVwZGF0ZVZpZGVvVGV4dHVyZSIsIl9fdmVyc2lvbiIsImNvbXBsZXRlIiwidXBsb2FkVGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsInNldFRleHR1cmVDdWJlIiwiaW5pdFRleHR1cmUiLCJwaXhlbFN0b3JlaSIsImlzQ29tcHJlc3NlZCIsImlzQ29tcHJlc3NlZFRleHR1cmUiLCJjdWJlSW1hZ2UiLCJtYXhDdWJlbWFwU2l6ZSIsImNvbnZlcnQiLCJnbEludGVybmFsRm9ybWF0Iiwic2V0VGV4dHVyZVBhcmFtZXRlcnMiLCJtaXBtYXAiLCJnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMiLCJjb21wcmVzc2VkVGV4SW1hZ2UyRCIsInRleEltYWdlMkQiLCJzZXRUZXh0dXJlQ3ViZUR5bmFtaWMiLCJ0ZXh0dXJlVHlwZSIsImV4dGVuc2lvbiIsInRleFBhcmFtZXRlcmkiLCJfX2N1cnJlbnRBbmlzb3Ryb3B5IiwidGV4UGFyYW1ldGVyZiIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiZ2V0TWF4QW5pc290cm9weSIsImNyZWF0ZVRleHR1cmUiLCJ0ZXh0dXJlTmVlZHNQb3dlck9mVHdvIiwiaXNEZXB0aFRleHR1cmUiLCJ0ZXhJbWFnZTNEIiwic2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUiLCJmcmFtZWJ1ZmZlciIsImF0dGFjaG1lbnQiLCJ0ZXh0dXJlVGFyZ2V0IiwiYmluZEZyYW1lYnVmZmVyIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UiLCJyZW5kZXJidWZmZXIiLCJpc011bHRpc2FtcGxlIiwiYmluZFJlbmRlcmJ1ZmZlciIsImdldFJlbmRlclRhcmdldFNhbXBsZXMiLCJyZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUiLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJzZXR1cERlcHRoUmVuZGVyYnVmZmVyIiwiaXNDdWJlIiwid2ViZ2xEZXB0aFRleHR1cmUiLCJzZXR1cERlcHRoVGV4dHVyZSIsImNyZWF0ZVJlbmRlcmJ1ZmZlciIsIm1heFNhbXBsZXMiLCJ3YXJuZWRUZXh0dXJlMkQiLCJ3YXJuZWRUZXh0dXJlQ3ViZSIsInRleHR1cmVVbml0IiwibWF4VGV4dHVyZXMiLCJyZXNldFRleHR1cmVVbml0cyIsInNldHVwUmVuZGVyVGFyZ2V0IiwiY3JlYXRlRnJhbWVidWZmZXIiLCJfX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIiLCJfX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIiLCJfX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIiLCJ1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAiLCJ3ZWJnbFRleHR1cmUiLCJ1cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCIsImJsaXRGcmFtZWJ1ZmZlciIsIkFycmF5Q2FtZXJhIiwiY2FtZXJhcyIsImlzTWVzaERlcHRoTWF0ZXJpYWwiLCJpc0dyb3VwIiwiaXNBcnJheUNhbWVyYSIsInRocmVlX21vZHVsZV9nZW9tZXRyeSIsImNhbWVyYUxQb3MiLCJjYW1lcmFSUG9zIiwic2V0UHJvamVjdGlvbkZyb21VbmlvbiIsImNhbWVyYUwiLCJjYW1lcmFSIiwiaXBkIiwicHJvakwiLCJwcm9qUiIsInRvcEZvdiIsImJvdHRvbUZvdiIsImxlZnRGb3YiLCJyaWdodEZvdiIsInpPZmZzZXQiLCJ4T2Zmc2V0IiwibmVhcjIiLCJmYXIyIiwibGVmdDIiLCJyaWdodDIiLCJ0b3AyIiwiYm90dG9tMiIsIldlYlZSTWFuYWdlciIsInJlbmRlcldpZHRoIiwicmVuZGVySGVpZ2h0IiwiZGV2aWNlIiwiZnJhbWVEYXRhIiwicG9zZVRhcmdldCIsImNvbnRyb2xsZXJzIiwic3RhbmRpbmdNYXRyaXgiLCJzdGFuZGluZ01hdHJpeEludmVyc2UiLCJmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yIiwicmVmZXJlbmNlU3BhY2VUeXBlIiwid2luZG93IiwiVlJGcmFtZURhdGEiLCJvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UiLCJ0ZW1wUXVhdGVybmlvbiIsInRlbXBQb3NpdGlvbiIsImNhbWVyYVZSIiwiaXNQcmVzZW50aW5nIiwiY3VycmVudFBpeGVsUmF0aW8iLCJjdXJyZW50U2l6ZSIsImV5ZVBhcmFtZXRlcnMiLCJnZXRFeWVQYXJhbWV0ZXJzIiwiZ2V0UGl4ZWxSYXRpbyIsInNldERyYXdpbmdCdWZmZXJTaXplIiwiYW5pbWF0aW9uIiwidHJpZ2dlcnMiLCJmaW5kR2FtZXBhZCIsImdhbWVwYWRzIiwibmF2aWdhdG9yIiwiZ2V0R2FtZXBhZHMiLCJnYW1lcGFkIiwic3RhcnRzV2l0aCIsInVwZGF0ZVZpZXdwb3J0RnJvbUJvdW5kcyIsImJvdW5kcyIsImdldENvbnRyb2xsZXIiLCJjb250cm9sbGVyIiwiZ2V0RGV2aWNlIiwic2V0RGV2aWNlIiwic2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciIsInNldFJlZmVyZW5jZVNwYWNlVHlwZSIsInNldFBvc2VUYXJnZXQiLCJnZXRDYW1lcmEiLCJ1c2VySGVpZ2h0IiwiZGVwdGhOZWFyIiwiZGVwdGhGYXIiLCJnZXRGcmFtZURhdGEiLCJzdGFnZVBhcmFtZXRlcnMiLCJzaXR0aW5nVG9TdGFuZGluZ1RyYW5zZm9ybSIsInBvc2UiLCJwb3NlT2JqZWN0Iiwib3JpZW50YXRpb24iLCJsZWZ0Vmlld01hdHJpeCIsInJpZ2h0Vmlld01hdHJpeCIsImxlZnRQcm9qZWN0aW9uTWF0cml4IiwicmlnaHRQcm9qZWN0aW9uTWF0cml4IiwiZ2V0TGF5ZXJzIiwibGF5ZXIiLCJsZWZ0Qm91bmRzIiwicmlnaHRCb3VuZHMiLCJoYXNQb3NpdGlvbiIsImJ1dHRvbklkIiwiYnV0dG9ucyIsInByZXNzZWQiLCJ1cGRhdGVDb250cm9sbGVycyIsImdldFN0YW5kaW5nTWF0cml4Iiwic3VibWl0RnJhbWUiLCJzZXRGcmFtZU9mUmVmZXJlbmNlVHlwZSIsIldlYlhSTWFuYWdlciIsInNlc3Npb24iLCJyZWZlcmVuY2VTcGFjZSIsImlucHV0U291cmNlcyIsIm9uU2Vzc2lvbkV2ZW50IiwiaW5wdXRTb3VyY2UiLCJvblNlc3Npb25FbmQiLCJzZXRGcmFtZWJ1ZmZlciIsIm9uUmVxdWVzdFJlZmVyZW5jZVNwYWNlIiwidXBkYXRlQ2FtZXJhIiwiZ2V0U2Vzc2lvbiIsInNldFNlc3Npb24iLCJ1cGRhdGVSZW5kZXJTdGF0ZSIsImJhc2VMYXllciIsIlhSV2ViR0xMYXllciIsInJlcXVlc3RSZWZlcmVuY2VTcGFjZSIsInRoZW4iLCJvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2siLCJnZXRWaWV3ZXJQb3NlIiwidmlld3MiLCJyZW5kZXJTdGF0ZSIsImdldFZpZXdwb3J0IiwidHJhbnNmb3JtIiwiaW5wdXRQb3NlIiwiZ2V0UG9zZSIsInRhcmdldFJheVNwYWNlIiwiV2ViR0xSZW5kZXJlciIsIl9jb250ZXh0IiwiX2FscGhhIiwiX2RlcHRoIiwiX3N0ZW5jaWwiLCJfYW50aWFsaWFzIiwiYW50aWFsaWFzIiwiX3ByZW11bHRpcGxpZWRBbHBoYSIsIl9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJfcG93ZXJQcmVmZXJlbmNlIiwicG93ZXJQcmVmZXJlbmNlIiwiX2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0IiwiY3VycmVudFJlbmRlckxpc3QiLCJjdXJyZW50UmVuZGVyU3RhdGUiLCJkb21FbGVtZW50IiwiYXV0b0NsZWFyIiwiYXV0b0NsZWFyQ29sb3IiLCJhdXRvQ2xlYXJEZXB0aCIsImF1dG9DbGVhclN0ZW5jaWwiLCJzb3J0T2JqZWN0cyIsInRvbmVNYXBwaW5nRXhwb3N1cmUiLCJ0b25lTWFwcGluZ1doaXRlUG9pbnQiLCJvYmplY3RzIiwicHJvZ3JhbUNhY2hlIiwicmVuZGVyTGlzdHMiLCJyZW5kZXJTdGF0ZXMiLCJtb3JwaHRhcmdldHMiLCJidWZmZXJSZW5kZXJlciIsImluZGV4ZWRCdWZmZXJSZW5kZXJlciIsIl90aGlzIiwiX2lzQ29udGV4dExvc3QiLCJfZnJhbWVidWZmZXIiLCJfY3VycmVudEFjdGl2ZUN1YmVGYWNlIiwiX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCIsIl9jdXJyZW50UmVuZGVyVGFyZ2V0IiwiX2N1cnJlbnRGcmFtZWJ1ZmZlciIsIl9jdXJyZW50TWF0ZXJpYWxJZCIsIl9jdXJyZW50R2VvbWV0cnlQcm9ncmFtIiwiX2N1cnJlbnRDYW1lcmEiLCJfY3VycmVudEFycmF5Q2FtZXJhIiwiX2N1cnJlbnRWaWV3cG9ydCIsIl9jdXJyZW50U2Npc3NvciIsIl9jdXJyZW50U2Npc3NvclRlc3QiLCJfd2lkdGgiLCJfaGVpZ2h0IiwiX3BpeGVsUmF0aW8iLCJfdmlld3BvcnQiLCJfc2Npc3NvciIsIl9zY2lzc29yVGVzdCIsIl9jbGlwcGluZyIsImdsb2JhbFN0YXRlIiwibnVtR2xvYmFsUGxhbmVzIiwicmVuZGVyaW5nU2hhZG93cyIsInZpZXdOb3JtYWxNYXRyaXgiLCJ1bmlmb3JtIiwicmVzZXRHbG9iYWxTdGF0ZSIsIm51bVBsYW5lcyIsIm51bUludGVyc2VjdGlvbiIsInByb2plY3RQbGFuZXMiLCJza2lwVHJhbnNmb3JtIiwiblBsYW5lcyIsImRzdEFycmF5IiwiZmxhdFNpemUiLCJpNCIsImVuYWJsZUxvY2FsQ2xpcHBpbmciLCJiZWdpblNoYWRvd3MiLCJlbmRTaGFkb3dzIiwic2V0U3RhdGUiLCJmcm9tQ2FjaGUiLCJuR2xvYmFsIiwibEdsb2JhbCIsImNsaXBwaW5nU3RhdGUiLCJfY2xpcHBpbmdFbmFibGVkIiwiX2xvY2FsQ2xpcHBpbmdFbmFibGVkIiwiX3ZlY3RvcjMiLCJnZXRUYXJnZXRQaXhlbFJhdGlvIiwiY29udGV4dEF0dHJpYnV0ZXMiLCJ4ckNvbXBhdGlibGUiLCJvbkNvbnRleHRMb3N0Iiwib25Db250ZXh0UmVzdG9yZSIsImdldFNoYWRlclByZWNpc2lvbkZvcm1hdCIsInJhbmdlTWluIiwicmFuZ2VNYXgiLCJtZXNzYWdlIiwiaW5pdEdMQ29udGV4dCIsImdldEV4dGVuc2lvbiIsIm1heEFuaXNvdHJvcHkiLCJXZWJHTDJSZW5kZXJpbmdDb250ZXh0IiwibWF4UHJlY2lzaW9uIiwibWF4VmVydGV4VGV4dHVyZXMiLCJtYXhBdHRyaWJ1dGVzIiwibWF4VmFyeWluZ3MiLCJtYXhGcmFnbWVudFVuaWZvcm1zIiwiZmxvYXRGcmFnbWVudFRleHR1cmVzIiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiSEFMRl9GTE9BVF9PRVMiLCJDT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTCIsIk1JTl9FWFQiLCJNQVhfRVhUIiwiVU5TSUdORURfSU5UXzI0XzhfV0VCR0wiLCJjb2xvckJ1ZmZlciIsImxvY2tlZCIsImN1cnJlbnRDb2xvck1hc2siLCJjdXJyZW50Q29sb3JDbGVhciIsInNldE1hc2siLCJjb2xvck1hc2siLCJzZXRMb2NrZWQiLCJsb2NrIiwiY2xlYXJDb2xvciIsInJlc2V0IiwiY3VycmVudERlcHRoTWFzayIsImN1cnJlbnREZXB0aEZ1bmMiLCJjdXJyZW50RGVwdGhDbGVhciIsImRlcHRoTWFzayIsInNldEZ1bmMiLCJjbGVhckRlcHRoIiwiY3VycmVudFN0ZW5jaWxNYXNrIiwiY3VycmVudFN0ZW5jaWxGdW5jIiwiY3VycmVudFN0ZW5jaWxSZWYiLCJjdXJyZW50U3RlbmNpbEZ1bmNNYXNrIiwiY3VycmVudFN0ZW5jaWxGYWlsIiwiY3VycmVudFN0ZW5jaWxaRmFpbCIsImN1cnJlbnRTdGVuY2lsWlBhc3MiLCJjdXJyZW50U3RlbmNpbENsZWFyIiwic3RlbmNpbFRlc3QiLCJzZXRPcCIsInN0ZW5jaWxPcCIsImNsZWFyU3RlbmNpbCIsIm1heFZlcnRleEF0dHJpYnV0ZXMiLCJuZXdBdHRyaWJ1dGVzIiwiZW5hYmxlZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVEaXZpc29ycyIsImVuYWJsZWRDYXBhYmlsaXRpZXMiLCJjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMiLCJjdXJyZW50UHJvZ3JhbSIsImN1cnJlbnRCbGVuZGluZ0VuYWJsZWQiLCJjdXJyZW50QmxlbmRpbmciLCJjdXJyZW50QmxlbmRFcXVhdGlvbiIsImN1cnJlbnRCbGVuZFNyYyIsImN1cnJlbnRCbGVuZERzdCIsImN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEiLCJjdXJyZW50QmxlbmRTcmNBbHBoYSIsImN1cnJlbnRCbGVuZERzdEFscGhhIiwiY3VycmVudFByZW11bHRpcGxlZEFscGhhIiwiY3VycmVudEZsaXBTaWRlZCIsImN1cnJlbnRDdWxsRmFjZSIsImN1cnJlbnRMaW5lV2lkdGgiLCJjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciIsImN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMiLCJsaW5lV2lkdGhBdmFpbGFibGUiLCJnbFZlcnNpb24iLCJjdXJyZW50VGV4dHVyZVNsb3QiLCJjdXJyZW50Qm91bmRUZXh0dXJlcyIsImN1cnJlbnRTY2lzc29yIiwiY3VycmVudFZpZXdwb3J0IiwiZW1wdHlUZXh0dXJlcyIsImVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IiLCJtZXNoUGVyQXR0cmlidXRlIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJibGVuZEVxdWF0aW9uU2VwYXJhdGUiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRnVuYyIsInNldEZsaXBTaWRlZCIsImZyb250RmFjZSIsInNldEN1bGxGYWNlIiwiY3VsbEZhY2UiLCJzZXRQb2x5Z29uT2Zmc2V0IiwiZmFjdG9yIiwid2ViZ2xTbG90IiwiaW5pdEF0dHJpYnV0ZXMiLCJlbmFibGVBdHRyaWJ1dGUiLCJkaXNhYmxlVW51c2VkQXR0cmlidXRlcyIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImZvcm1hdHMiLCJ1c2VQcm9ncmFtIiwic2V0TWF0ZXJpYWwiLCJmcm9udEZhY2VDVyIsInNldExpbmVXaWR0aCIsImxpbmVXaWR0aCIsIndlYmdsVHlwZSIsImJvdW5kVGV4dHVyZSIsImNhbGxzIiwidHJpYW5nbGVzIiwiYXV0b1Jlc2V0IiwiaW5zdGFuY2VDb3VudCIsIndpcmVmcmFtZUF0dHJpYnV0ZXMiLCJvbkdlb21ldHJ5RGlzcG9zZSIsImJ1ZmZlcmdlb21ldHJ5IiwidXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlIiwiZ2VvbWV0cnlJbmRleCIsImdlb21ldHJ5UG9zaXRpb24iLCJwcmV2aW91c0F0dHJpYnV0ZSIsIl9idWZmZXJHZW9tZXRyeSIsImdlb21ldHJ5QXR0cmlidXRlcyIsImdldFdpcmVmcmFtZUF0dHJpYnV0ZSIsImN1cnJlbnRBdHRyaWJ1dGUiLCJ1cGRhdGVMaXN0IiwiaW5mbHVlbmNlc0xpc3QiLCJvYmplY3RJbmZsdWVuY2VzIiwiaW5mbHVlbmNlcyIsImxpc3RzIiwib25TY2VuZURpc3Bvc2UiLCJsaXN0IiwicGxhbmVNZXNoIiwiYm94TWVzaCIsImNsZWFyQWxwaGEiLCJjdXJyZW50QmFja2dyb3VuZCIsImN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiIsImdldENsZWFyQ29sb3IiLCJzZXRDbGVhckNvbG9yIiwiZ2V0Q2xlYXJBbHBoYSIsInNldENsZWFyQWxwaGEiLCJyZW5kZXJMaXN0IiwiZm9yY2VDbGVhciIsInZyIiwiZW52aXJvbm1lbnRCbGVuZE1vZGUiLCJzZXRNb2RlIiwiZHJhd0FycmF5cyIsInJlbmRlckluc3RhbmNlcyIsIm1heEluc3RhbmNlZENvdW50IiwiZHJhd0VsZW1lbnRzIiwieHIiLCJwcmV2ZW50RGVmYXVsdCIsIm9uTWF0ZXJpYWxEaXNwb3NlIiwicmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSIsImRlYWxsb2NhdGVNYXRlcmlhbCIsImdldENvbnRleHRBdHRyaWJ1dGVzIiwiZm9yY2VDb250ZXh0TG9zcyIsImxvc2VDb250ZXh0IiwiZm9yY2VDb250ZXh0UmVzdG9yZSIsInJlc3RvcmVDb250ZXh0Iiwic2V0UGl4ZWxSYXRpbyIsInVwZGF0ZVN0eWxlIiwic2V0Vmlld3BvcnQiLCJnZXREcmF3aW5nQnVmZmVyU2l6ZSIsInBpeGVsUmF0aW8iLCJnZXRDdXJyZW50Vmlld3BvcnQiLCJnZXRTY2lzc29yIiwic2V0U2Npc3NvciIsImdldFNjaXNzb3JUZXN0IiwiYm9vbGVhbiIsImJpdHMiLCJyZW5kZXJCdWZmZXJJbW1lZGlhdGUiLCJoYXNQb3NpdGlvbnMiLCJoYXNOb3JtYWxzIiwiaGFzVXZzIiwiaGFzQ29sb3JzIiwicHJvZ3JhbUF0dHJpYnV0ZXMiLCJwb3NpdGlvbkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsIm5vcm1hbEFycmF5IiwidXZBcnJheSIsImNvbG9yQXJyYXkiLCJzZXRQcm9ncmFtIiwidXBkYXRlQnVmZmVycyIsInJhbmdlRmFjdG9yIiwiaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIm1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsInByb2dyYW1BdHRyaWJ1dGUiLCJnZW9tZXRyeUF0dHJpYnV0ZSIsInN0cmlkZSIsImlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsInZlcnRleEF0dHJpYjFmdiIsInNldHVwVmVydGV4QXR0cmlidXRlcyIsImRhdGFDb3VudCIsInJhbmdlU3RhcnQiLCJyYW5nZUNvdW50IiwiZHJhd1N0YXJ0IiwiZHJhd0VuZCIsImRyYXdDb3VudCIsImlzTGluZVNlZ21lbnRzIiwiaXNMaW5lTG9vcCIsImlzU3ByaXRlIiwiY29tcGlsZSIsImluaXRNYXRlcmlhbCIsInJlbmRlck9iamVjdHMiLCJjYW1lcmEyIiwiaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QiLCJyZW5kZXJPYmplY3RJbW1lZGlhdGUiLCJtYXRlcmlhbFByb3BlcnRpZXMiLCJsaWdodHNTdGF0ZVZlcnNpb24iLCJwcm9ncmFtQ2hhbmdlIiwibnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzIiwibnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzIiwicHJvZ1VuaWZvcm1zIiwidW5pZm9ybXNMaXN0IiwidXNlQ2FjaGUiLCJyZWZyZXNoUHJvZ3JhbSIsInJlZnJlc2hNYXRlcmlhbCIsInJlZnJlc2hMaWdodHMiLCJwX3VuaWZvcm1zIiwibV91bmlmb3JtcyIsImlzTWVzaFBob25nTWF0ZXJpYWwiLCJpc01lc2hTdGFuZGFyZE1hdGVyaWFsIiwidUNhbVBvcyIsImNhbWVyYVBvc2l0aW9uIiwiaXNNZXNoTGFtYmVydE1hdGVyaWFsIiwiYm9uZVRleHR1cmUiLCJib25lTWF0cmljZXMiLCJib25lVGV4dHVyZVNpemUiLCJtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSIsImlzRm9nIiwiZGVuc2l0eSIsInJlZnJlc2hVbmlmb3Jtc0ZvZyIsInJlZnJlc2hVbmlmb3Jtc0NvbW1vbiIsInJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQiLCJpc01lc2hUb29uTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQaG9uZyIsInJlZnJlc2hVbmlmb3Jtc1Rvb24iLCJpc01lc2hQaHlzaWNhbE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQiLCJyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCIsImlzTWVzaE1hdGNhcE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zTWF0Y2FwIiwicmVmcmVzaFVuaWZvcm1zRGVwdGgiLCJyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSIsImlzTWVzaE5vcm1hbE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zTm9ybWFsIiwiaXNMaW5lQmFzaWNNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0xpbmUiLCJpc0xpbmVEYXNoZWRNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0Rhc2giLCJpc1BvaW50c01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zUG9pbnRzIiwiaXNTcHJpdGVNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMiLCJpc1NoYWRvd01hdGVyaWFsIiwibHRjXzEiLCJMVENfMSIsImx0Y18yIiwiTFRDXzIiLCJ1dlNjYWxlTWFwIiwicHJvamVjdE9iamVjdCIsImlzTE9EIiwib3BhcXVlT2JqZWN0cyIsInRyYW5zcGFyZW50T2JqZWN0cyIsInJlYWRSZW5kZXJUYXJnZXRQaXhlbHMiLCJhY3RpdmVDdWJlRmFjZUluZGV4IiwicmVzdG9yZSIsInRleHR1cmVGb3JtYXQiLCJjaGVja0ZyYW1lYnVmZmVyU3RhdHVzIiwicmVhZFBpeGVscyIsImNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSIsImxldmVsIiwiY29weVRleEltYWdlMkQiLCJjb3B5VGV4dHVyZVRvVGV4dHVyZSIsInNyY1RleHR1cmUiLCJkc3RUZXh0dXJlIiwidGV4U3ViSW1hZ2UyRCIsIkZvZ0V4cDIiLCJGb2ciLCJJbnRlcmxlYXZlZEJ1ZmZlciIsIkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwiaW50ZXJsZWF2ZWRCdWZmZXIiLCJTcHJpdGUiLCJMT0QiLCJsZXZlbHMiLCJTa2lubmVkTWVzaCIsImJpbmRNb2RlIiwiYmluZE1hdHJpeCIsImJpbmRNYXRyaXhJbnZlcnNlIiwiU2tlbGV0b24iLCJib25lSW52ZXJzZXMiLCJjYWxjdWxhdGVJbnZlcnNlcyIsIkJvbmUiLCJsaW5lY2FwIiwibGluZWpvaW4iLCJMaW5lIiwiTGluZVNlZ21lbnRzIiwiTGluZUxvb3AiLCJQb2ludHMiLCJWaWRlb1RleHR1cmUiLCJ2aWRlbyIsIkNvbXByZXNzZWRUZXh0dXJlIiwiQ2FudmFzVGV4dHVyZSIsIkRlcHRoVGV4dHVyZSIsIldpcmVmcmFtZUdlb21ldHJ5Iiwib2wiLCJlZGdlIiwiZWRnZXMiLCJQYXJhbWV0cmljR2VvbWV0cnkiLCJmdW5jIiwic2xpY2VzIiwic3RhY2tzIiwiUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5IiwicHUiLCJwdiIsInNsaWNlQ291bnQiLCJQb2x5aGVkcm9uR2VvbWV0cnkiLCJQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJ2ZXJ0ZXhCdWZmZXIiLCJ1dkJ1ZmZlciIsInN1YmRpdmlkZUZhY2UiLCJjb2xzIiwiYWoiLCJiaiIsInJvd3MiLCJwdXNoVmVydGV4IiwiZ2V0VmVydGV4QnlJbmRleCIsImNvcnJlY3RVViIsImF6aW11dGgiLCJpbmNsaW5hdGlvbiIsInN1YmRpdmlkZSIsImFwcGx5UmFkaXVzIiwiY2VudHJvaWQiLCJhemkiLCJjb3JyZWN0VVZzIiwiY29ycmVjdFNlYW0iLCJnZW5lcmF0ZVVWcyIsIlRldHJhaGVkcm9uR2VvbWV0cnkiLCJUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiT2N0YWhlZHJvbkdlb21ldHJ5IiwiT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiSWNvc2FoZWRyb25HZW9tZXRyeSIsIkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJEb2RlY2FoZWRyb25HZW9tZXRyeSIsIkRvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiVHViZUdlb21ldHJ5IiwidHVidWxhclNlZ21lbnRzIiwicmFkaWFsU2VnbWVudHMiLCJjbG9zZWQiLCJ0YXBlciIsImJ1ZmZlckdlb21ldHJ5IiwiVHViZUJ1ZmZlckdlb21ldHJ5IiwidGFuZ2VudHMiLCJiaW5vcm1hbHMiLCJmcmFtZXMiLCJjb21wdXRlRnJlbmV0RnJhbWVzIiwiUCIsImdlbmVyYXRlU2VnbWVudCIsImdldFBvaW50QXQiLCJOIiwiQiIsImdlbmVyYXRlSW5kaWNlcyIsImdlbmVyYXRlQnVmZmVyRGF0YSIsIlRvcnVzS25vdEdlb21ldHJ5IiwidHViZSIsImhlaWdodFNjYWxlIiwiVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkiLCJQMSIsIlAyIiwiVCIsImNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSIsImN1Iiwic3UiLCJxdU92ZXJQIiwiY3MiLCJUb3J1c0dlb21ldHJ5IiwiYXJjIiwiVG9ydXNCdWZmZXJHZW9tZXRyeSIsImlzSW50ZXJsZWF2ZWRCdWZmZXIiLCJpbnRlcnNlY3RQb2ludCIsIndvcmxkU2NhbGUiLCJtdlBvc2l0aW9uIiwiYWxpZ25lZFBvc2l0aW9uIiwicm90YXRlZFBvc2l0aW9uIiwidmlld1dvcmxkTWF0cml4IiwidHJhbnNmb3JtVmVydGV4IiwidmVydGV4UG9zaXRpb24iLCJfY2FtZXJhIiwiYWRkTGV2ZWwiLCJnZXRPYmplY3RGb3JEaXN0YW5jZSIsIm1hdHJpeFBvc2l0aW9uIiwibm9ybWFsaXplU2tpbldlaWdodHMiLCJza2luV2VpZ2h0IiwiYm9uZSIsImlzQm9uZSIsIm9mZnNldE1hdHJpeCIsImlkZW50aXR5TWF0cml4IiwiZ2V0Qm9uZUJ5TmFtZSIsImNvbXB1dGVMaW5lRGlzdGFuY2VzIiwicG9zaXRpb25BdHRyaWJ1dGUiLCJsaW5lUHJlY2lzaW9uIiwibG9jYWxQcmVjaXNpb24iLCJsb2NhbFByZWNpc2lvblNxIiwidlN0YXJ0IiwidkVuZCIsImludGVyU2VnbWVudCIsImludGVyUmF5IiwibmJWZXJ0aWNlcyIsInRocmVzaG9sZCIsInBhcmFtcyIsImxvY2FsVGhyZXNob2xkIiwibG9jYWxUaHJlc2hvbGRTcSIsInRlc3RQb2ludCIsInJheVBvaW50RGlzdGFuY2VTcSIsImRpc3RhbmNlVG9SYXkiLCJyZWFkeVN0YXRlIiwiSEFWRV9DVVJSRU5UX0RBVEEiLCJpc0NhbnZhc1RleHR1cmUiLCJFYXJjdXQiLCJob2xlSW5kaWNlcyIsImRpbSIsImludlNpemUiLCJoYXNIb2xlcyIsIm91dGVyTGVuIiwib3V0ZXJOb2RlIiwibGlua2VkTGlzdCIsInByZXYiLCJzdGVpbmVyIiwiZ2V0TGVmdG1vc3QiLCJjb21wYXJlWCIsImVsaW1pbmF0ZUhvbGUiLCJmaWx0ZXJQb2ludHMiLCJlbGltaW5hdGVIb2xlcyIsImVhcmN1dExpbmtlZCIsImNsb2Nrd2lzZSIsImxhc3QiLCJzdW0iLCJzaWduZWRBcmVhIiwiaW5zZXJ0Tm9kZSIsInJlbW92ZU5vZGUiLCJhZ2FpbiIsInRocmVlX21vZHVsZV9hcmVhIiwiZWFyIiwicGFzcyIsInpPcmRlciIsInByZXZaIiwibmV4dFoiLCJ0YWlsIiwibnVtTWVyZ2VzIiwicFNpemUiLCJxU2l6ZSIsImluU2l6ZSIsInNvcnRMaW5rZWQiLCJpbmRleEN1cnZlIiwiaXNFYXJIYXNoZWQiLCJpc0VhciIsImN1cmVMb2NhbEludGVyc2VjdGlvbnMiLCJzcGxpdEVhcmN1dCIsInBvaW50SW5UcmlhbmdsZSIsIm1pblRYIiwibWluVFkiLCJtYXhUWCIsIm1heFRZIiwidGhyZWVfbW9kdWxlX2ludGVyc2VjdHMiLCJsb2NhbGx5SW5zaWRlIiwiaXNWYWxpZERpYWdvbmFsIiwic3BsaXRQb2x5Z29uIiwiaG9sZSIsImh4IiwiaHkiLCJteCIsIm15IiwidGFuTWluIiwiZmluZEhvbGVCcmlkZ2UiLCJsZWZ0bW9zdCIsInB4IiwicHkiLCJpbnRlcnNlY3RzUG9seWdvbiIsImluc2lkZSIsIm1pZGRsZUluc2lkZSIsInEyIiwiTm9kZSIsImFuIiwiYnAiLCJTaGFwZVV0aWxzIiwiYXJlYSIsImNvbnRvdXIiLCJpc0Nsb2NrV2lzZSIsInB0cyIsInRyaWFuZ3VsYXRlU2hhcGUiLCJob2xlcyIsInJlbW92ZUR1cEVuZFB0cyIsImFkZENvbnRvdXIiLCJob2xlSW5kZXgiLCJmb3JFYWNoIiwiRXh0cnVkZUdlb21ldHJ5IiwiRXh0cnVkZUJ1ZmZlckdlb21ldHJ5IiwidmVydGljZXNBcnJheSIsImFkZFNoYXBlIiwicGxhY2Vob2xkZXIiLCJjdXJ2ZVNlZ21lbnRzIiwic3RlcHMiLCJiZXZlbEVuYWJsZWQiLCJiZXZlbFRoaWNrbmVzcyIsImJldmVsU2l6ZSIsImJldmVsT2Zmc2V0IiwiYmV2ZWxTZWdtZW50cyIsImV4dHJ1ZGVQYXRoIiwidXZnZW4iLCJVVkdlbmVyYXRvciIsIldvcmxkVVZHZW5lcmF0b3IiLCJhbW91bnQiLCJleHRydWRlUHRzIiwic3BsaW5lVHViZSIsImJpbm9ybWFsIiwicG9zaXRpb24yIiwiYWhvbGUiLCJobCIsImV4dHJ1ZGVCeVBhdGgiLCJnZXRTcGFjZWRQb2ludHMiLCJzaGFwZVBvaW50cyIsImV4dHJhY3RQb2ludHMiLCJyZXZlcnNlIiwic2NhbGVQdDIiLCJwdCIsInZlYyIsImJzIiwidmVydCIsInZsZW4iLCJmbGVuIiwiZ2V0QmV2ZWxWZWMiLCJpblB0IiwiaW5QcmV2IiwiaW5OZXh0Iiwidl90cmFuc194Iiwidl90cmFuc195Iiwic2hyaW5rX2J5Iiwidl9wcmV2X3giLCJ2X3ByZXZfeSIsInZfbmV4dF94Iiwidl9uZXh0X3kiLCJ2X3ByZXZfbGVuc3EiLCJjb2xsaW5lYXIwIiwidl9wcmV2X2xlbiIsInZfbmV4dF9sZW4iLCJwdFByZXZTaGlmdF94IiwicHRQcmV2U2hpZnRfeSIsInNmIiwidl90cmFuc19sZW5zcSIsImRpcmVjdGlvbl9lcSIsImNvbnRvdXJNb3ZlbWVudHMiLCJvbmVIb2xlTW92ZW1lbnRzIiwiaG9sZXNNb3ZlbWVudHMiLCJ2ZXJ0aWNlc01vdmVtZW50cyIsInNpZGV3YWxscyIsImxheWVyb2Zmc2V0Iiwic2wiLCJzbGVuMSIsInNsZW4yIiwiZjQiLCJmMyIsImFkZFZlcnRleCIsIm5leHRJbmRleCIsImdlbmVyYXRlVG9wVVYiLCJhZGRVViIsImdlbmVyYXRlU2lkZVdhbGxVViIsInZlY3RvcjIiLCJidWlsZExpZEZhY2VzIiwiYnVpbGRTaWRlRmFjZXMiLCJpbmRleEEiLCJpbmRleEIiLCJpbmRleEMiLCJhX3giLCJhX3kiLCJiX3giLCJiX3kiLCJjX3giLCJjX3kiLCJpbmRleEQiLCJhX3oiLCJiX3oiLCJjX3oiLCJkX3giLCJkX3kiLCJkX3oiLCJUZXh0R2VvbWV0cnkiLCJ0ZXh0IiwiVGV4dEJ1ZmZlckdlb21ldHJ5IiwiZm9udCIsImlzRm9udCIsImdlbmVyYXRlU2hhcGVzIiwiU3BoZXJlR2VvbWV0cnkiLCJwaGlTdGFydCIsInBoaUxlbmd0aCIsInRoZXRhU3RhcnQiLCJ0aGV0YUxlbmd0aCIsIlNwaGVyZUJ1ZmZlckdlb21ldHJ5IiwidGhldGFFbmQiLCJncmlkIiwidmVydGljZXNSb3ciLCJ1T2Zmc2V0IiwiUmluZ0dlb21ldHJ5IiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInRoZXRhU2VnbWVudHMiLCJwaGlTZWdtZW50cyIsIlJpbmdCdWZmZXJHZW9tZXRyeSIsInNlZ21lbnQiLCJyYWRpdXNTdGVwIiwidGhldGFTZWdtZW50TGV2ZWwiLCJMYXRoZUdlb21ldHJ5Iiwic2VnbWVudHMiLCJMYXRoZUJ1ZmZlckdlb21ldHJ5IiwiYmFzZSIsImludmVyc2VTZWdtZW50cyIsIm4xIiwibjIiLCJTaGFwZUdlb21ldHJ5IiwiU2hhcGVCdWZmZXJHZW9tZXRyeSIsInNoYXBlSG9sZSIsImluZGV4T2Zmc2V0Iiwic2hhcGVWZXJ0aWNlcyIsInNoYXBlSG9sZXMiLCJ0b0pTT04kMSIsIkVkZ2VzR2VvbWV0cnkiLCJ0aHJlc2hvbGRBbmdsZSIsInRocmVzaG9sZERvdCIsInNvdXJjZVZlcnRpY2VzIiwiZmFjZTEiLCJmYWNlMiIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJvcGVuRW5kZWQiLCJDeWxpbmRlckJ1ZmZlckdlb21ldHJ5IiwiaW5kZXhBcnJheSIsImdlbmVyYXRlQ2FwIiwiY2VudGVySW5kZXhTdGFydCIsImNlbnRlckluZGV4RW5kIiwiY29zVGhldGEiLCJzaW5UaGV0YSIsInNsb3BlIiwiaW5kZXhSb3ciLCJnZW5lcmF0ZVRvcnNvIiwiQ29uZUdlb21ldHJ5IiwiQ29uZUJ1ZmZlckdlb21ldHJ5IiwiQ2lyY2xlR2VvbWV0cnkiLCJDaXJjbGVCdWZmZXJHZW9tZXRyeSIsIkdlb21ldHJpZXMiLCJmcmVlemUiLCJSYXdTaGFkZXJNYXRlcmlhbCIsIlNUQU5EQVJEIiwiUEhZU0lDQUwiLCJUT09OIiwiTUFUQ0FQIiwiTWF0ZXJpYWxzIiwiQW5pbWF0aW9uVXRpbHMiLCJhcnJheVNsaWNlIiwiZnJvbSIsImlzVHlwZWRBcnJheSIsImNvbnZlcnRBcnJheSIsImZvcmNlQ2xvbmUiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkRhdGFWaWV3IiwiZ2V0S2V5ZnJhbWVPcmRlciIsInRpbWVzIiwic29ydGVkQXJyYXkiLCJuVmFsdWVzIiwic3JjT2Zmc2V0IiwiZmxhdHRlbkpTT04iLCJqc29uS2V5cyIsInZhbHVlUHJvcGVydHlOYW1lIiwiSW50ZXJwb2xhbnQiLCJwYXJhbWV0ZXJQb3NpdGlvbnMiLCJzYW1wbGVWYWx1ZXMiLCJzYW1wbGVTaXplIiwicmVzdWx0QnVmZmVyIiwiX2NhY2hlZEluZGV4IiwidmFsdWVTaXplIiwiQ3ViaWNJbnRlcnBvbGFudCIsIl93ZWlnaHRQcmV2IiwiX29mZnNldFByZXYiLCJfd2VpZ2h0TmV4dCIsIl9vZmZzZXROZXh0IiwiTGluZWFySW50ZXJwb2xhbnQiLCJEaXNjcmV0ZUludGVycG9sYW50IiwiS2V5ZnJhbWVUcmFjayIsIlRpbWVCdWZmZXJUeXBlIiwiVmFsdWVCdWZmZXJUeXBlIiwic2V0SW50ZXJwb2xhdGlvbiIsIkRlZmF1bHRJbnRlcnBvbGF0aW9uIiwiQm9vbGVhbktleWZyYW1lVHJhY2siLCJDb2xvcktleWZyYW1lVHJhY2siLCJOdW1iZXJLZXlmcmFtZVRyYWNrIiwiUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50IiwiUXVhdGVybmlvbktleWZyYW1lVHJhY2siLCJTdHJpbmdLZXlmcmFtZVRyYWNrIiwiVmVjdG9yS2V5ZnJhbWVUcmFjayIsIkFuaW1hdGlvbkNsaXAiLCJ0cmFja3MiLCJyZXNldER1cmF0aW9uIiwicGFyc2VLZXlmcmFtZVRyYWNrIiwianNvbiIsInRyYWNrVHlwZSIsInR5cGVOYW1lIiwidG9Mb3dlckNhc2UiLCJnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lIiwiZXZhbHVhdGUiLCJwcCIsInZhbGlkYXRlX2ludGVydmFsIiwic2VlayIsImxpbmVhcl9zY2FuIiwiZm9yd2FyZF9zY2FuIiwiZ2l2ZVVwQXQiLCJhZnRlckVuZF8iLCJ0MWdsb2JhbCIsImJlZm9yZVN0YXJ0XyIsIm1pZCIsImludGVydmFsQ2hhbmdlZF8iLCJpbnRlcnBvbGF0ZV8iLCJzZXR0aW5ncyIsIkRlZmF1bHRTZXR0aW5nc18iLCJnZXRTZXR0aW5nc18iLCJjb3B5U2FtcGxlVmFsdWVfIiwiZW5kaW5nU3RhcnQiLCJlbmRpbmdFbmQiLCJpUHJldiIsImlOZXh0IiwidFByZXYiLCJ0TmV4dCIsImhhbGZEdCIsIm8xIiwibzAiLCJvUCIsIm9OIiwid1AiLCJ3TiIsInBwcCIsInNQIiwic04iLCJvZmZzZXQxIiwib2Zmc2V0MCIsIndlaWdodDEiLCJ3ZWlnaHQwIiwidHJhY2siLCJnZXRJbnRlcnBvbGF0aW9uIiwiVmFsdWVUeXBlTmFtZSIsIkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlIiwiZ2V0VmFsdWVTaXplIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoIiwiZmFjdG9yeU1ldGhvZCIsImNyZWF0ZUludGVycG9sYW50Iiwic2hpZnQiLCJ0aW1lT2Zmc2V0IiwidGltZVNjYWxlIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsIm5LZXlzIiwidmFsaWRhdGUiLCJ2YWxpZCIsInByZXZUaW1lIiwiY3VyclRpbWUiLCJvcHRpbWl6ZSIsInNtb290aEludGVycG9sYXRpb24iLCJ3cml0ZUluZGV4Iiwia2VlcCIsIm9mZnNldFAiLCJvZmZzZXROIiwicmVhZE9mZnNldCIsIndyaXRlT2Zmc2V0IiwiVHlwZWRLZXlmcmFtZVRyYWNrIiwianNvblRyYWNrcyIsImZyYW1lVGltZSIsImZwcyIsImNsaXAiLCJjbGlwVHJhY2tzIiwiQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UiLCJtb3JwaFRhcmdldFNlcXVlbmNlIiwibm9Mb29wIiwibnVtTW9ycGhUYXJnZXRzIiwiZmluZEJ5TmFtZSIsIm9iamVjdE9yQ2xpcEFycmF5IiwiY2xpcEFycmF5IiwiYW5pbWF0aW9ucyIsIkNyZWF0ZUNsaXBzRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2VzIiwiYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMiLCJwYXR0ZXJuIiwicGFydHMiLCJhbmltYXRpb25Nb3JwaFRhcmdldHMiLCJjbGlwcyIsInBhcnNlQW5pbWF0aW9uIiwiYWRkTm9uZW1wdHlUcmFjayIsInRyYWNrTmFtZSIsImFuaW1hdGlvbktleXMiLCJwcm9wZXJ0eU5hbWUiLCJkZXN0VHJhY2tzIiwiY2xpcE5hbWUiLCJoaWVyYXJjaHlUcmFja3MiLCJoaWVyYXJjaHkiLCJtb3JwaFRhcmdldE5hbWVzIiwibW9ycGhUYXJnZXROYW1lIiwiYW5pbWF0aW9uS2V5IiwiYm9uZU5hbWUiLCJDYWNoZSIsImZpbGVzIiwiZmlsZSIsIkxvYWRpbmdNYW5hZ2VyIiwib25Mb2FkIiwib25Qcm9ncmVzcyIsIm9uRXJyb3IiLCJpc0xvYWRpbmciLCJpdGVtc0xvYWRlZCIsIml0ZW1zVG90YWwiLCJ1cmxNb2RpZmllciIsIml0ZW1TdGFydCIsIml0ZW1FbmQiLCJpdGVtRXJyb3IiLCJyZXNvbHZlVVJMIiwic2V0VVJMTW9kaWZpZXIiLCJEZWZhdWx0TG9hZGluZ01hbmFnZXIiLCJsb2FkaW5nIiwiRmlsZUxvYWRlciIsIm1hbmFnZXIiLCJEYXRhVGV4dHVyZUxvYWRlciIsIl9wYXJzZXIiLCJJbWFnZUxvYWRlciIsIkN1YmVUZXh0dXJlTG9hZGVyIiwiVGV4dHVyZUxvYWRlciIsIkN1cnZlIiwiYXJjTGVuZ3RoRGl2aXNpb25zIiwiRWxsaXBzZUN1cnZlIiwiYVgiLCJhWSIsInhSYWRpdXMiLCJ5UmFkaXVzIiwiYVN0YXJ0QW5nbGUiLCJhRW5kQW5nbGUiLCJhQ2xvY2t3aXNlIiwiYVJvdGF0aW9uIiwiQXJjQ3VydmUiLCJhUmFkaXVzIiwiQ3ViaWNQb2x5IiwiYzAiLCJpbml0Q2F0bXVsbFJvbSIsIngzIiwidGVuc2lvbiIsImluaXROb251bmlmb3JtQ2F0bXVsbFJvbSIsImR0MCIsImR0MSIsImR0MiIsInQyIiwiY2FsYyIsImxvYWQiLCJjYWNoZWQiLCJkYXRhVXJpUmVnZXhSZXN1bHQiLCJtaW1lVHlwZSIsImlzQmFzZTY0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXRvYiIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwiY2hhckNvZGVBdCIsIkJsb2IiLCJwYXJzZXIiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJoZWFkZXIiLCJvcGVuIiwiY2FsbGJhY2tzIiwid2l0aENyZWRlbnRpYWxzIiwib3ZlcnJpZGVNaW1lVHlwZSIsInJlcXVlc3RIZWFkZXIiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInNldFBhdGgiLCJzZXRSZXNwb25zZVR5cGUiLCJzZXRXaXRoQ3JlZGVudGlhbHMiLCJzZXRNaW1lVHlwZSIsImxvYWRlciIsImxvYWRUZXh0dXJlIiwidGV4RGF0YXMiLCJsb2FkZWQiLCJtaXBtYXBDb3VudCIsImlzQ3ViZW1hcCIsInRleERhdGEiLCJjcm9zc09yaWdpbiIsIm9uSW1hZ2VMb2FkIiwib25JbWFnZUVycm9yIiwic3Vic3RyIiwic2V0Q3Jvc3NPcmlnaW4iLCJ1cmxzIiwiaXNKUEVHIiwic2VhcmNoIiwiZ2V0UG9pbnQiLCJvcHRpb25hbFRhcmdldCIsImdldFV0b1RtYXBwaW5nIiwiZ2V0UG9pbnRzIiwiZGl2aXNpb25zIiwiZ2V0TGVuZ3RoIiwibGVuZ3RocyIsImdldExlbmd0aHMiLCJjYWNoZUFyY0xlbmd0aHMiLCJjdXJyZW50IiwidXBkYXRlQXJjTGVuZ3RocyIsInRhcmdldEFyY0xlbmd0aCIsImFyY0xlbmd0aHMiLCJjb21wYXJpc29uIiwibGVuZ3RoQmVmb3JlIiwiZ2V0VGFuZ2VudCIsInB0MSIsImdldFRhbmdlbnRBdCIsIm1hdCIsIk1BWF9WQUxVRSIsInR6IiwiZnJvbUpTT04iLCJpc0VsbGlwc2VDdXJ2ZSIsInR3b1BpIiwiZGVsdGFBbmdsZSIsInNhbWVQb2ludHMiLCJpc0FyY0N1cnZlIiwicHoiLCJDYXRtdWxsUm9tQ3VydmUzIiwiY3VydmVUeXBlIiwiUXVhZHJhdGljQmV6aWVyIiwiUXVhZHJhdGljQmV6aWVyUDAiLCJRdWFkcmF0aWNCZXppZXJQMSIsIlF1YWRyYXRpY0JlemllclAyIiwiQ3ViaWNCZXppZXIiLCJDdWJpY0JlemllclAwIiwiQ3ViaWNCZXppZXJQMSIsIkN1YmljQmV6aWVyUDIiLCJDdWJpY0JlemllclAzIiwiQ3ViaWNCZXppZXJDdXJ2ZSIsInYzIiwiQ3ViaWNCZXppZXJDdXJ2ZTMiLCJMaW5lQ3VydmUiLCJMaW5lQ3VydmUzIiwiUXVhZHJhdGljQmV6aWVyQ3VydmUiLCJRdWFkcmF0aWNCZXppZXJDdXJ2ZTMiLCJTcGxpbmVDdXJ2ZSIsImlzQ2F0bXVsbFJvbUN1cnZlMyIsImludFBvaW50Iiwid2VpZ2h0IiwiaXNDdWJpY0JlemllckN1cnZlIiwiaXNDdWJpY0JlemllckN1cnZlMyIsImlzTGluZUN1cnZlIiwiaXNMaW5lQ3VydmUzIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZSIsImlzUXVhZHJhdGljQmV6aWVyQ3VydmUzIiwiaXNTcGxpbmVDdXJ2ZSIsIkN1cnZlcyIsIkN1cnZlUGF0aCIsImN1cnZlcyIsImF1dG9DbG9zZSIsIlBhdGgiLCJjdXJyZW50UG9pbnQiLCJTaGFwZSIsIkxpZ2h0IiwiSGVtaXNwaGVyZUxpZ2h0IiwiTGlnaHRTaGFkb3ciLCJTcG90TGlnaHRTaGFkb3ciLCJTcG90TGlnaHQiLCJwb3dlciIsIlBvaW50TGlnaHQiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJEaXJlY3Rpb25hbExpZ2h0U2hhZG93IiwiRGlyZWN0aW9uYWxMaWdodCIsIkFtYmllbnRMaWdodCIsIlJlY3RBcmVhTGlnaHQiLCJNYXRlcmlhbExvYWRlciIsImN1cnZlIiwiY2xvc2VQYXRoIiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwiY3VydmVMZW5ndGhzIiwiZ2V0Q3VydmVMZW5ndGhzIiwic2VnbWVudExlbmd0aCIsImxlbnMiLCJjYWNoZUxlbmd0aHMiLCJzdW1zIiwicmVzb2x1dGlvbiIsIm1vdmVUbyIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJhQ1B4IiwiYUNQeSIsImJlemllckN1cnZlVG8iLCJhQ1AxeCIsImFDUDF5IiwiYUNQMngiLCJhQ1AyeSIsInNwbGluZVRocnUiLCJhYnNhcmMiLCJhYnNlbGxpcHNlIiwiZWxsaXBzZSIsImZpcnN0UG9pbnQiLCJsYXN0UG9pbnQiLCJnZXRQb2ludHNIb2xlcyIsImhvbGVzUHRzIiwiaXNPcnRob2dyYXBoaWNDYW1lcmEiLCJ6b29tVyIsInpvb21IIiwic2NhbGVXIiwic2NhbGVIIiwiZ2V0VGV4dHVyZSIsInNoYWRpbmciLCJzZXRUZXh0dXJlcyIsIkxvYWRlclV0aWxzIiwiZGVjb2RlVGV4dCIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwiZnJvbUNoYXJDb2RlIiwiZXNjYXBlIiwiZXh0cmFjdFVybEJhc2UiLCJsYXN0SW5kZXhPZiIsIkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IiwiSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIiwiQnVmZmVyR2VvbWV0cnlMb2FkZXIiLCJ0eXBlZEFycmF5IiwiVFlQRURfQVJSQVlTIiwiYnVmZmVyQXR0cmlidXRlIiwiZHJhd2NhbGxzIiwib2Zmc2V0cyIsIk9iamVjdExvYWRlciIsInJlc291cmNlUGF0aCIsInNldFJlc291cmNlUGF0aCIsInBhcnNlU2hhcGUiLCJwYXJzZUdlb21ldHJpZXMiLCJwYXJzZUltYWdlcyIsInBhcnNlVGV4dHVyZXMiLCJwYXJzZU1hdGVyaWFscyIsInBhcnNlT2JqZWN0IiwicGFyc2VBbmltYXRpb25zIiwiYnVmZmVyR2VvbWV0cnlMb2FkZXIiLCJkZXRhaWxzIiwiZ2VvbWV0cnlTaGFwZXMiLCJUSFJFRSIsIkxlZ2FjeUpTT05Mb2FkZXIiLCJsb2FkSW1hZ2UiLCJjdXJyZW50VXJsIiwicGFyc2VDb25zdGFudCIsIlRFWFRVUkVfTUFQUElORyIsIlRFWFRVUkVfV1JBUFBJTkciLCJURVhUVVJFX0ZJTFRFUiIsImdldEdlb21ldHJ5IiwiZ2V0TWF0ZXJpYWwiLCJVVk1hcHBpbmciLCJJbWFnZUJpdG1hcExvYWRlciIsImNyZWF0ZUltYWdlQml0bWFwIiwiZmV0Y2giLCJTaGFwZVBhdGgiLCJzdWJQYXRocyIsImN1cnJlbnRQYXRoIiwiRm9udCIsImNyZWF0ZVBhdGgiLCJjaGFyIiwiZ2x5cGgiLCJnbHlwaHMiLCJjcHgiLCJjcHkiLCJjcHgxIiwiY3B5MSIsImNweDIiLCJjcHkyIiwib3V0bGluZSIsIl9jYWNoZWRPdXRsaW5lIiwiaGEiLCJmYW1pbHlOYW1lIiwiTG9hZGVyIiwic2V0T3B0aW9ucyIsInJlcyIsImJsb2IiLCJpbWFnZUJpdG1hcCIsImNhdGNoIiwidG9TaGFwZXMiLCJpc0NDVyIsIm5vSG9sZXMiLCJ0b1NoYXBlc05vSG9sZXMiLCJpblN1YnBhdGhzIiwidG1wUGF0aCIsInRtcFNoYXBlIiwiaXNQb2ludEluc2lkZVBvbHlnb24iLCJpblBvbHlnb24iLCJwb2x5TGVuIiwiZWRnZUxvd1B0IiwiZWRnZUhpZ2hQdCIsImVkZ2VEeCIsImVkZ2VEeSIsInBlcnBFZGdlIiwic29saWQiLCJob2xlc0ZpcnN0IiwidG1wUG9pbnRzIiwidG1wSG9sZXMiLCJiZXR0ZXJTaGFwZUhvbGVzIiwibmV3U2hhcGVzIiwibmV3U2hhcGVIb2xlcyIsIm1haW5JZHgiLCJhbWJpZ3VvdXMiLCJ0b0NoYW5nZSIsInNJZHgiLCJzTGVuIiwic2hvIiwiaElkeCIsImhvIiwiaG9sZV91bmFzc2lnbmVkIiwiczJJZHgiLCJmcm9tcyIsInRvcyIsInBhdGhzIiwiY2hhcnMiLCJsaW5lX2hlaWdodCIsInlNYXgiLCJ5TWluIiwidW5kZXJsaW5lVGhpY2tuZXNzIiwicmV0IiwiY3JlYXRlUGF0aHMiLCJzdWJzdHJpbmciLCJIYW5kbGVycyIsImhhbmRsZXJzIiwicmVnZXgiLCJvbkxvYWRTdGFydCIsIm9uTG9hZFByb2dyZXNzIiwib25Mb2FkQ29tcGxldGUiLCJpbml0TWF0ZXJpYWxzIiwidGV4dHVyZVBhdGgiLCJjcmVhdGVNYXRlcmlhbCIsIkJsZW5kaW5nTW9kZSIsInRleHR1cmVMb2FkZXIiLCJtYXRlcmlhbExvYWRlciIsImZ1bGxQYXRoIiwibWFwRGlmZnVzZVJlcGVhdCIsIm1hcERpZmZ1c2VPZmZzZXQiLCJtYXBEaWZmdXNlV3JhcCIsIm1hcERpZmZ1c2VBbmlzb3Ryb3B5IiwibWFwRW1pc3NpdmVSZXBlYXQiLCJtYXBFbWlzc2l2ZU9mZnNldCIsIm1hcEVtaXNzaXZlV3JhcCIsIm1hcEVtaXNzaXZlQW5pc290cm9weSIsIm1hcExpZ2h0UmVwZWF0IiwibWFwTGlnaHRPZmZzZXQiLCJtYXBMaWdodFdyYXAiLCJtYXBMaWdodEFuaXNvdHJvcHkiLCJtYXBBT1JlcGVhdCIsIm1hcEFPT2Zmc2V0IiwibWFwQU9XcmFwIiwibWFwQU9Bbmlzb3Ryb3B5IiwibWFwQnVtcFJlcGVhdCIsIm1hcEJ1bXBPZmZzZXQiLCJtYXBCdW1wV3JhcCIsIm1hcEJ1bXBBbmlzb3Ryb3B5IiwibWFwTm9ybWFsUmVwZWF0IiwibWFwTm9ybWFsT2Zmc2V0IiwibWFwTm9ybWFsV3JhcCIsIm1hcE5vcm1hbEFuaXNvdHJvcHkiLCJtYXBTcGVjdWxhclJlcGVhdCIsIm1hcFNwZWN1bGFyT2Zmc2V0IiwibWFwU3BlY3VsYXJXcmFwIiwibWFwU3BlY3VsYXJBbmlzb3Ryb3B5IiwibWFwTWV0YWxuZXNzUmVwZWF0IiwibWFwTWV0YWxuZXNzT2Zmc2V0IiwibWFwTWV0YWxuZXNzV3JhcCIsIm1hcE1ldGFsbmVzc0FuaXNvdHJvcHkiLCJtYXBSb3VnaG5lc3NSZXBlYXQiLCJtYXBSb3VnaG5lc3NPZmZzZXQiLCJtYXBSb3VnaG5lc3NXcmFwIiwibWFwUm91Z2huZXNzQW5pc290cm9weSIsIm1hcEFscGhhUmVwZWF0IiwibWFwQWxwaGFPZmZzZXQiLCJtYXBBbHBoYVdyYXAiLCJtYXBBbHBoYUFuaXNvdHJvcHkiLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJBdWRpb0xvYWRlciIsIlNwaGVyaWNhbEhhcm1vbmljczMiLCJMaWdodFByb2JlIiwiSGVtaXNwaGVyZUxpZ2h0UHJvYmUiLCJza3kiLCJncm91bmQiLCJBbWJpZW50TGlnaHRQcm9iZSIsIkNsb2NrIiwiYXV0b1N0YXJ0Iiwib2xkVGltZSIsImVsYXBzZWRUaW1lIiwicnVubmluZyIsIkF1ZGlvTGlzdGVuZXIiLCJnYWluIiwiY3JlYXRlR2FpbiIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInRpbWVEZWx0YSIsIkF1ZGlvIiwiZ2V0SW5wdXQiLCJhdXRvcGxheSIsImRldHVuZSIsImxvb3AiLCJwbGF5YmFja1JhdGUiLCJoYXNQbGF5YmFja0NvbnRyb2wiLCJzb3VyY2VUeXBlIiwiZmlsdGVycyIsIlBvc2l0aW9uYWxBdWRpbyIsInBhbm5lciIsImNyZWF0ZVBhbm5lciIsInBhbm5pbmdNb2RlbCIsIkF1ZGlvQW5hbHlzZXIiLCJhdWRpbyIsImZmdFNpemUiLCJhbmFseXNlciIsImNyZWF0ZUFuYWx5c2VyIiwiZnJlcXVlbmN5QmluQ291bnQiLCJnZXRPdXRwdXQiLCJQcm9wZXJ0eU1peGVyIiwibWl4RnVuY3Rpb24iLCJfc2xlcnAiLCJfc2VsZWN0IiwiX2xlcnAiLCJfbWl4QnVmZmVyUmVnaW9uIiwiY3VtdWxhdGl2ZVdlaWdodCIsInVzZUNvdW50IiwicmVmZXJlbmNlQ291bnQiLCJidWZmZXJDb3B5IiwiZGVjb2RlQXVkaW9EYXRhIiwiYXVkaW9CdWZmZXIiLCJpc1NwaGVyaWNhbEhhcm1vbmljczMiLCJnZXRBdCIsImNvZWZmIiwiYWRkU2NhbGUiLCJnZXRJcnJhZGlhbmNlQXQiLCJnZXRCYXNpc0F0Iiwic2hCYXNpcyIsImlzSGVtaXNwaGVyZUxpZ2h0UHJvYmUiLCJpc0FtYmllbnRMaWdodFByb2JlIiwiZXllU2VwIiwiaW5zdGFuY2UiLCJleWVSaWdodCIsImV5ZUxlZnQiLCJ4bWluIiwieG1heCIsImV5ZVNlcE9uUHJvamVjdGlvbiIsInltYXgiLCJnZXRFbGFwc2VkVGltZSIsImdldERlbHRhIiwibmV3VGltZSIsInJlbW92ZUZpbHRlciIsImRpc2Nvbm5lY3QiLCJnZXRGaWx0ZXIiLCJzZXRGaWx0ZXIiLCJnZXRNYXN0ZXJWb2x1bWUiLCJzZXRNYXN0ZXJWb2x1bWUiLCJzZXRUYXJnZXRBdFRpbWUiLCJjdXJyZW50VGltZSIsImNsb2NrIiwicG9zaXRpb25YIiwibGluZWFyUmFtcFRvVmFsdWVBdFRpbWUiLCJwb3NpdGlvblkiLCJwb3NpdGlvbloiLCJmb3J3YXJkWCIsImZvcndhcmRZIiwiZm9yd2FyZFoiLCJ1cFgiLCJ1cFkiLCJ1cFoiLCJzZXRPcmllbnRhdGlvbiIsInNldE5vZGVTb3VyY2UiLCJhdWRpb05vZGUiLCJzZXRNZWRpYUVsZW1lbnRTb3VyY2UiLCJtZWRpYUVsZW1lbnQiLCJjcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UiLCJzZXRCdWZmZXIiLCJwbGF5IiwiY3JlYXRlQnVmZmVyU291cmNlIiwib25lbmRlZCIsIm9uRW5kZWQiLCJzZXREZXR1bmUiLCJzZXRQbGF5YmFja1JhdGUiLCJwYXVzZSIsImdldEZpbHRlcnMiLCJzZXRGaWx0ZXJzIiwiZ2V0RGV0dW5lIiwiZ2V0UGxheWJhY2tSYXRlIiwiZ2V0TG9vcCIsInNldExvb3AiLCJnZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJnZXRSZWZEaXN0YW5jZSIsInJlZkRpc3RhbmNlIiwic2V0UmVmRGlzdGFuY2UiLCJnZXRSb2xsb2ZmRmFjdG9yIiwicm9sbG9mZkZhY3RvciIsInNldFJvbGxvZmZGYWN0b3IiLCJnZXREaXN0YW5jZU1vZGVsIiwiZGlzdGFuY2VNb2RlbCIsInNldERpc3RhbmNlTW9kZWwiLCJnZXRNYXhEaXN0YW5jZSIsIm1heERpc3RhbmNlIiwic2V0TWF4RGlzdGFuY2UiLCJzZXREaXJlY3Rpb25hbENvbmUiLCJjb25lSW5uZXJBbmdsZSIsImNvbmVPdXRlckFuZ2xlIiwiY29uZU91dGVyR2FpbiIsIm9yaWVudGF0aW9uWCIsIm9yaWVudGF0aW9uWSIsIm9yaWVudGF0aW9uWiIsImdldEZyZXF1ZW5jeURhdGEiLCJnZXRCeXRlRnJlcXVlbmN5RGF0YSIsImdldEF2ZXJhZ2VGcmVxdWVuY3kiLCJhY2N1bXVsYXRlIiwiYWNjdUluZGV4IiwiY3VycmVudFdlaWdodCIsIm1peCIsIm9yaWdpbmFsVmFsdWVPZmZzZXQiLCJzYXZlT3JpZ2luYWxTdGF0ZSIsImdldFZhbHVlIiwicmVzdG9yZU9yaWdpbmFsU3RhdGUiLCJfc3RhcnRQIiwiX3N0YXJ0RW5kIiwibGluZUdlb21ldHJ5IiwiY29uZUdlb21ldHJ5IiwiQ29tcG9zaXRlIiwidGFyZ2V0R3JvdXAiLCJvcHRpb25hbFBhcnNlZFBhdGgiLCJwYXJzZWRQYXRoIiwiUHJvcGVydHlCaW5kaW5nIiwicGFyc2VUcmFja05hbWUiLCJfdGFyZ2V0R3JvdXAiLCJfYmluZGluZ3MiLCJzdWJzY3JpYmVfIiwicm9vdE5vZGUiLCJmaW5kTm9kZSIsIm5vZGVOYW1lIiwiQW5pbWF0aW9uQWN0aW9uIiwibWl4ZXIiLCJsb2NhbFJvb3QiLCJfbWl4ZXIiLCJfY2xpcCIsIl9sb2NhbFJvb3QiLCJuVHJhY2tzIiwiaW50ZXJwb2xhbnRzIiwiaW50ZXJwb2xhbnRTZXR0aW5ncyIsImludGVycG9sYW50IiwiX2ludGVycG9sYW50U2V0dGluZ3MiLCJfaW50ZXJwb2xhbnRzIiwiX3Byb3BlcnR5QmluZGluZ3MiLCJfY2FjaGVJbmRleCIsIl9ieUNsaXBDYWNoZUluZGV4IiwiX3RpbWVTY2FsZUludGVycG9sYW50IiwiX3dlaWdodEludGVycG9sYW50IiwiX2xvb3BDb3VudCIsIl9lZmZlY3RpdmVUaW1lU2NhbGUiLCJfZWZmZWN0aXZlV2VpZ2h0IiwicmVwZXRpdGlvbnMiLCJwYXVzZWQiLCJjbGFtcFdoZW5GaW5pc2hlZCIsInplcm9TbG9wZUF0U3RhcnQiLCJ6ZXJvU2xvcGVBdEVuZCIsIkFuaW1hdGlvbk1peGVyIiwicm9vdCIsIl9yb290IiwiX2luaXRNZW1vcnlNYW5hZ2VyIiwiX2FjY3VJbmRleCIsIlVuaWZvcm0iLCJJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciIsIlJheWNhc3RlciIsIlBvaW50Q2xvdWQiLCJhc2NTb3J0IiwiaW50ZXJzZWN0T2JqZWN0IiwiU3BoZXJpY2FsIiwiQm94MiIsIkxpbmUzIiwiSW1tZWRpYXRlUmVuZGVyT2JqZWN0IiwiVmVydGV4Tm9ybWFsc0hlbHBlciIsIm5Ob3JtYWxzIiwib2JqR2VvbWV0cnkiLCJTcG90TGlnaHRIZWxwZXIiLCJjb25lIiwiU2tlbGV0b25IZWxwZXIiLCJnZXRCb25lTGlzdCIsImJvbmVMaXN0IiwiUG9pbnRMaWdodEhlbHBlciIsInNwaGVyZVNpemUiLCJSZWN0QXJlYUxpZ2h0SGVscGVyIiwiSGVtaXNwaGVyZUxpZ2h0SGVscGVyIiwiTGlnaHRQcm9iZUhlbHBlciIsIkdBTU1BX09VVFBVVCIsIkdyaWRIZWxwZXIiLCJQb2xhckdyaWRIZWxwZXIiLCJyYWRpYWxzIiwiY2lyY2xlcyIsIlBvc2l0aW9uYWxBdWRpb0hlbHBlciIsImRpdmlzaW9uc0lubmVyQW5nbGUiLCJkaXZpc2lvbnNPdXRlckFuZ2xlIiwibWF0ZXJpYWxJbm5lckFuZ2xlIiwibWF0ZXJpYWxPdXRlckFuZ2xlIiwiRmFjZU5vcm1hbHNIZWxwZXIiLCJEaXJlY3Rpb25hbExpZ2h0SGVscGVyIiwibGlnaHRQbGFuZSIsInRhcmdldExpbmUiLCJDYW1lcmFIZWxwZXIiLCJwb2ludE1hcCIsImNvbG9yRnJ1c3R1bSIsImNvbG9yQ29uZSIsImNvbG9yVXAiLCJjb2xvclRhcmdldCIsImNvbG9yQ3Jvc3MiLCJhZGRMaW5lIiwiYWRkUG9pbnQiLCJCb3hIZWxwZXIiLCJCb3gzSGVscGVyIiwiUGxhbmVIZWxwZXIiLCJBcnJvd0hlbHBlciIsImhlYWRMZW5ndGgiLCJoZWFkV2lkdGgiLCJzZXREaXJlY3Rpb24iLCJBeGVzSGVscGVyIiwiZmlyc3RWYWxpZEluZGV4IiwibkNhY2hlZE9iamVjdHNfIiwiYmluZGluZ3MiLCJ1bmJpbmQiLCJpc0FuaW1hdGlvbk9iamVjdEdyb3VwIiwic2FuaXRpemVOb2RlTmFtZSIsInJlc2VydmVkUmUiLCJSZWdFeHAiLCJ3b3JkQ2hhciIsIndvcmRDaGFyT3JEb3QiLCJkaXJlY3RvcnlSZSIsIm5vZGVSZSIsIm9iamVjdFJlIiwicHJvcGVydHlSZSIsInRyYWNrUmUiLCJzdXBwb3J0ZWRPYmplY3ROYW1lcyIsIm1hdGNoZXMiLCJyZXN1bHRzIiwib2JqZWN0TmFtZSIsIm9iamVjdEluZGV4IiwicHJvcGVydHlJbmRleCIsImxhc3REb3QiLCJzZWFyY2hOb2RlU3VidHJlZSIsImNoaWxkTm9kZSIsInN1YlRyZWVOb2RlIiwiX2dldFZhbHVlX3VuYXZhaWxhYmxlIiwiX3NldFZhbHVlX3VuYXZhaWxhYmxlIiwiQmluZGluZ1R5cGUiLCJEaXJlY3QiLCJFbnRpcmVBcnJheSIsIkFycmF5RWxlbWVudCIsIkhhc0Zyb21Ub0FycmF5IiwiVmVyc2lvbmluZyIsIk5lZWRzVXBkYXRlIiwiTWF0cml4V29ybGROZWVkc1VwZGF0ZSIsIkdldHRlckJ5QmluZGluZ1R5cGUiLCJyZXNvbHZlZFByb3BlcnR5IiwiU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmciLCJ0YXJnZXRPYmplY3QiLCJkZXN0IiwidGFyZ2V0QXJyYXkiLCJzb3VyY2VBcnJheSIsIm5vZGVQcm9wZXJ0eSIsInZlcnNpb25pbmciLCJiaW5kaW5nVHlwZSIsIl9nZXRWYWx1ZV91bmJvdW5kIiwiX3NldFZhbHVlX3VuYm91bmQiLCJfaW5kaWNlc0J5VVVJRCIsIl9wYXRocyIsIl9wYXJzZWRQYXRocyIsIl9iaW5kaW5nc0luZGljZXNCeVBhdGgiLCJzdGF0cyIsInRvdGFsIiwiaW5Vc2UiLCJiaW5kaW5nc1Blck9iamVjdCIsIm5PYmplY3RzIiwibkNhY2hlZE9iamVjdHMiLCJpbmRpY2VzQnlVVUlEIiwicGFyc2VkUGF0aHMiLCJuQmluZGluZ3MiLCJrbm93bk9iamVjdCIsImZpcnN0QWN0aXZlSW5kZXgiLCJsYXN0Q2FjaGVkT2JqZWN0IiwiYmluZGluZ3NGb3JQYXRoIiwibGFzdENhY2hlZCIsImxhc3RDYWNoZWRJbmRleCIsImZpcnN0QWN0aXZlT2JqZWN0IiwiZmlyc3RBY3RpdmUiLCJ1bmNhY2hlIiwibGFzdE9iamVjdCIsImluZGljZXNCeVBhdGgiLCJ1bnN1YnNjcmliZV8iLCJsYXN0QmluZGluZ3NJbmRleCIsImxhc3RCaW5kaW5ncyIsIl9hY3RpdmF0ZUFjdGlvbiIsIl9kZWFjdGl2YXRlQWN0aW9uIiwic3RvcEZhZGluZyIsInN0b3BXYXJwaW5nIiwiaXNSdW5uaW5nIiwiX2lzQWN0aXZlQWN0aW9uIiwiaXNTY2hlZHVsZWQiLCJzdGFydEF0Iiwic2V0RWZmZWN0aXZlV2VpZ2h0IiwiZ2V0RWZmZWN0aXZlV2VpZ2h0IiwiZmFkZUluIiwiX3NjaGVkdWxlRmFkaW5nIiwiZmFkZU91dCIsImNyb3NzRmFkZUZyb20iLCJmYWRlT3V0QWN0aW9uIiwid2FycCIsImZhZGVJbkR1cmF0aW9uIiwiZmFkZU91dER1cmF0aW9uIiwic3RhcnRFbmRSYXRpbyIsImVuZFN0YXJ0UmF0aW8iLCJjcm9zc0ZhZGVUbyIsImZhZGVJbkFjdGlvbiIsIndlaWdodEludGVycG9sYW50IiwiX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50Iiwic2V0RWZmZWN0aXZlVGltZVNjYWxlIiwiZ2V0RWZmZWN0aXZlVGltZVNjYWxlIiwic2V0RHVyYXRpb24iLCJzeW5jV2l0aCIsImFjdGlvbiIsImhhbHQiLCJzdGFydFRpbWVTY2FsZSIsImVuZFRpbWVTY2FsZSIsIl9sZW5kQ29udHJvbEludGVycG9sYW50IiwidGltZVNjYWxlSW50ZXJwb2xhbnQiLCJnZXRNaXhlciIsImdldENsaXAiLCJnZXRSb290IiwiX3VwZGF0ZSIsImRlbHRhVGltZSIsInRpbWVEaXJlY3Rpb24iLCJ0aW1lUnVubmluZyIsIl91cGRhdGVUaW1lU2NhbGUiLCJjbGlwVGltZSIsIl91cGRhdGVUaW1lIiwiX3VwZGF0ZVdlaWdodCIsInByb3BlcnR5TWl4ZXJzIiwiaW50ZXJwb2xhbnRWYWx1ZSIsImxvb3BDb3VudCIsInBpbmdQb25nIiwiX3NldEVuZGluZ3MiLCJoYW5kbGVfc3RvcCIsImxvb3BEZWx0YSIsInBlbmRpbmciLCJhdFN0YXJ0IiwiYXRFbmQiLCJ3ZWlnaHROb3ciLCJ3ZWlnaHRUaGVuIiwiX2JpbmRBY3Rpb24iLCJwcm90b3R5cGVBY3Rpb24iLCJyb290VXVpZCIsImJpbmRpbmdzQnlSb290IiwiX2JpbmRpbmdzQnlSb290QW5kTmFtZSIsImJpbmRpbmdzQnlOYW1lIiwiX2FkZEluYWN0aXZlQmluZGluZyIsImNsaXBVdWlkIiwiYWN0aW9uc0ZvckNsaXAiLCJfYWN0aW9uc0J5Q2xpcCIsImtub3duQWN0aW9ucyIsIl9hZGRJbmFjdGl2ZUFjdGlvbiIsIl9sZW5kQmluZGluZyIsIl9sZW5kQWN0aW9uIiwiX3Rha2VCYWNrQmluZGluZyIsIl90YWtlQmFja0FjdGlvbiIsIl9hY3Rpb25zIiwiX25BY3RpdmVBY3Rpb25zIiwiX25BY3RpdmVCaW5kaW5ncyIsIl9jb250cm9sSW50ZXJwb2xhbnRzIiwiX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzIiwiYWN0aW9ucyIsImNvbnRyb2xJbnRlcnBvbGFudHMiLCJhY3Rpb25zQnlDbGlwIiwiYWN0aW9uQnlSb290IiwiX3JlbW92ZUluYWN0aXZlQWN0aW9uIiwibGFzdEluYWN0aXZlQWN0aW9uIiwiY2FjaGVJbmRleCIsImtub3duQWN0aW9uc0ZvckNsaXAiLCJsYXN0S25vd25BY3Rpb24iLCJieUNsaXBDYWNoZUluZGV4IiwiX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24iLCJfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nIiwicHJldkluZGV4IiwibGFzdEFjdGl2ZUluZGV4IiwiZmlyc3RJbmFjdGl2ZUFjdGlvbiIsImZpcnN0SW5hY3RpdmVJbmRleCIsImxhc3RBY3RpdmVBY3Rpb24iLCJiaW5kaW5nQnlOYW1lIiwicHJvcEJpbmRpbmciLCJsYXN0SW5hY3RpdmVCaW5kaW5nIiwiZmlyc3RJbmFjdGl2ZUJpbmRpbmciLCJsYXN0QWN0aXZlQmluZGluZyIsIl9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyIiwiX19jYWNoZUluZGV4IiwibGFzdEFjdGl2ZUludGVycG9sYW50IiwiY2xpcEFjdGlvbiIsIm9wdGlvbmFsUm9vdCIsImNsaXBPYmplY3QiLCJleGlzdGluZ0FjdGlvbiIsIm5ld0FjdGlvbiIsInN0b3BBbGxBY3Rpb24iLCJuQWN0aW9ucyIsInVuY2FjaGVDbGlwIiwiYWN0aW9uc1RvUmVtb3ZlIiwidW5jYWNoZVJvb3QiLCJ1bmNhY2hlQWN0aW9uIiwic2V0RnJvbUNhbWVyYSIsImNvb3JkcyIsImludGVyc2VjdE9iamVjdHMiLCJvdGhlciIsIm1ha2VTYWZlIiwic2V0RnJvbUNhcnRlc2lhbkNvb3JkcyIsImRpc3RhbmNlU3EiLCJjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyIiwiY2xhbXBUb0xpbmUiLCJzdGFydEVuZDIiLCJvYmpQb3MiLCJvYmpOb3JtIiwiY29uZUxlbmd0aCIsImNvbmVXaWR0aCIsImJvbmVNYXRyaXgiLCJtYXRyaXhXb3JsZEludiIsImhhbGZDb25lSW5uZXJBbmdsZSIsImhhbGZDb25lT3V0ZXJBbmdsZSIsInNldFBvaW50Iiwic2V0Q29sb3IiLCJTcGxpbmUiLCJjb25zdHJ1Y3QiLCJjcmVhdGVQb2ludHNHZW9tZXRyeSIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnkiLCJmcm9tUG9pbnRzIiwiaW5pdEZyb21BcnJheSIsImdldENvbnRyb2xQb2ludHNBcnJheSIsInJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aCIsInNldENvbG9ycyIsInNldFRleHR1cmVQYXRoIiwiaXNJbnRlcnNlY3Rpb25Cb3giLCJpc0ludGVyc2VjdGlvblNwaGVyZSIsInJhbmRvbTE2IiwibmVhcmVzdFBvd2VyT2ZUd28iLCJuZXh0UG93ZXJPZlR3byIsImZsYXR0ZW5Ub0FycmF5T2Zmc2V0IiwibXVsdGlwbHlWZWN0b3IzIiwibXVsdGlwbHlWZWN0b3IzQXJyYXkiLCJhcHBseVRvQnVmZmVyIiwiYXBwbHlUb1ZlY3RvcjNBcnJheSIsImV4dHJhY3RQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwibXVsdGlwbHlUb0FycmF5IiwibXVsdGlwbHlWZWN0b3I0Iiwicm90YXRlQXhpcyIsImNyb3NzVmVjdG9yIiwicm90YXRlQnlBeGlzIiwibWFrZUZydXN0dW0iLCJpc0ludGVyc2VjdGlvbkxpbmUiLCJpc0ludGVyc2VjdGlvblBsYW5lIiwiYmFyeWNvb3JkRnJvbVBvaW50IiwibWlkcG9pbnQiLCJleHRyYWN0QWxsUG9pbnRzIiwiZXh0cnVkZSIsIm1ha2VHZW9tZXRyeSIsImZyb21BdHRyaWJ1dGUiLCJkaXN0YW5jZVRvTWFuaGF0dGFuIiwibGVuZ3RoTWFuaGF0dGFuIiwic2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgiLCJzZXRFdWxlckZyb21RdWF0ZXJuaW9uIiwiZ2V0UG9zaXRpb25Gcm9tTWF0cml4IiwiZ2V0U2NhbGVGcm9tTWF0cml4IiwiZ2V0Q29sdW1uRnJvbU1hdHJpeCIsImFwcGx5UHJvamVjdGlvbiIsImNvbXB1dGVUYW5nZW50cyIsImdldENoaWxkQnlOYW1lIiwicmVuZGVyRGVwdGgiLCJnZXRXb3JsZFJvdGF0aW9uIiwiZXVsZXJPcmRlciIsInVzZVF1YXRlcm5pb24iLCJpbml0Qm9uZXMiLCJzZXRMZW5zIiwib25seVNoYWRvdyIsInNoYWRvd0NhbWVyYUZvdiIsInNoYWRvd0NhbWVyYUxlZnQiLCJzaGFkb3dDYW1lcmFSaWdodCIsInNoYWRvd0NhbWVyYVRvcCIsInNoYWRvd0NhbWVyYUJvdHRvbSIsInNoYWRvd0NhbWVyYVZpc2libGUiLCJzaGFkb3dEYXJrbmVzcyIsInNoYWRvd01hcFdpZHRoIiwic2hhZG93TWFwSGVpZ2h0IiwiY29weUluZGljZXNBcnJheSIsImFkZEluZGV4IiwiYWRkRHJhd0NhbGwiLCJjbGVhckRyYXdDYWxscyIsImNvbXB1dGVPZmZzZXRzIiwiZ2V0QXJyYXlzIiwiYWRkU2hhcGVMaXN0Iiwid3JhcEFyb3VuZCIsIm92ZXJkcmF3Iiwid3JhcFJHQiIsIm1ldGFsIiwiY2xlYXJUYXJnZXQiLCJhbmltYXRlIiwiZ2V0Q3VycmVudFJlbmRlclRhcmdldCIsImdldFByZWNpc2lvbiIsInJlc2V0R0xTdGF0ZSIsInN1cHBvcnRzRmxvYXRUZXh0dXJlcyIsInN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMiLCJzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXMiLCJzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQyIsInN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQyIsInN1cHBvcnRzQmxlbmRNaW5NYXgiLCJzdXBwb3J0c0luc3RhbmNlZEFycmF5cyIsImVuYWJsZVNjaXNzb3JUZXN0IiwiYWRkUHJlUGx1Z2luIiwiYWRkUG9zdFBsdWdpbiIsInVwZGF0ZVNoYWRvd01hcCIsInNldEZhY2VDdWxsaW5nIiwiYWxsb2NUZXh0dXJlVW5pdCIsInNldFRleHR1cmUiLCJnZXRBY3RpdmVNaXBNYXBMZXZlbCIsInNoYWRvd01hcEN1bGxGYWNlIiwicmVuZGVyUmV2ZXJzZVNpZGVkIiwicmVuZGVyU2luZ2xlU2lkZWQiLCJhY3RpdmVNaXBNYXBMZXZlbCIsInN0YW5kaW5nIiwiZ2V0RGF0YSIsInVwZGF0ZUN1YmVNYXAiLCJsb2FkVGV4dHVyZUN1YmUiLCJsb2FkQ29tcHJlc3NlZFRleHR1cmUiLCJsb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlIiwiT3JiaXRDb250cm9scyIsIm1pbkRpc3RhbmNlIiwibWluWm9vbSIsIm1heFpvb20iLCJtaW5Qb2xhckFuZ2xlIiwibWF4UG9sYXJBbmdsZSIsIm1pbkF6aW11dGhBbmdsZSIsIm1heEF6aW11dGhBbmdsZSIsImVuYWJsZURhbXBpbmciLCJkYW1waW5nRmFjdG9yIiwiZW5hYmxlWm9vbSIsInpvb21TcGVlZCIsImVuYWJsZVJvdGF0ZSIsInJvdGF0ZVNwZWVkIiwiZW5hYmxlUGFuIiwicGFuU3BlZWQiLCJzY3JlZW5TcGFjZVBhbm5pbmciLCJrZXlQYW5TcGVlZCIsImF1dG9Sb3RhdGUiLCJhdXRvUm90YXRlU3BlZWQiLCJlbmFibGVLZXlzIiwiVVAiLCJCT1RUT00iLCJtb3VzZUJ1dHRvbnMiLCJ0b3VjaGVzIiwiT05FIiwiVFdPIiwidGFyZ2V0MCIsInBvc2l0aW9uMCIsInpvb20wIiwiZ2V0UG9sYXJBbmdsZSIsInNwaGVyaWNhbCIsImdldEF6aW11dGhhbEFuZ2xlIiwic2F2ZVN0YXRlIiwiY2hhbmdlRXZlbnQiLCJTVEFURSIsIk5PTkUiLCJxdWF0IiwicXVhdEludmVyc2UiLCJsYXN0UG9zaXRpb24iLCJsYXN0UXVhdGVybmlvbiIsInJvdGF0ZUxlZnQiLCJzcGhlcmljYWxEZWx0YSIsInBhbk9mZnNldCIsInpvb21DaGFuZ2VkIiwiRVBTIiwib25Db250ZXh0TWVudSIsIm9uTW91c2VEb3duIiwib25Nb3VzZVdoZWVsIiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaEVuZCIsIm9uVG91Y2hNb3ZlIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvbktleURvd24iLCJzdGFydEV2ZW50IiwiZW5kRXZlbnQiLCJUT1VDSF9ST1RBVEUiLCJUT1VDSF9QQU4iLCJUT1VDSF9ET0xMWV9QQU4iLCJUT1VDSF9ET0xMWV9ST1RBVEUiLCJyb3RhdGVTdGFydCIsInJvdGF0ZUVuZCIsInJvdGF0ZURlbHRhIiwicGFuU3RhcnQiLCJwYW5FbmQiLCJwYW5EZWx0YSIsImRvbGx5U3RhcnQiLCJkb2xseUVuZCIsImRvbGx5RGVsdGEiLCJnZXRab29tU2NhbGUiLCJyb3RhdGVVcCIsInBhbkxlZnQiLCJvYmplY3RNYXRyaXgiLCJwYW5VcCIsInBhbiIsImRlbHRhWCIsImRlbHRhWSIsImJvZHkiLCJ0YXJnZXREaXN0YW5jZSIsImNsaWVudEhlaWdodCIsImNsaWVudFdpZHRoIiwiZG9sbHlJbiIsImRvbGx5U2NhbGUiLCJkb2xseU91dCIsImhhbmRsZU1vdXNlRG93blJvdGF0ZSIsImNsaWVudFgiLCJjbGllbnRZIiwiaGFuZGxlTW91c2VEb3duUGFuIiwiaGFuZGxlVG91Y2hTdGFydFJvdGF0ZSIsInBhZ2VYIiwicGFnZVkiLCJoYW5kbGVUb3VjaFN0YXJ0UGFuIiwiaGFuZGxlVG91Y2hTdGFydERvbGx5IiwiaGFuZGxlVG91Y2hNb3ZlUm90YXRlIiwiaGFuZGxlVG91Y2hNb3ZlUGFuIiwiaGFuZGxlVG91Y2hNb3ZlRG9sbHkiLCJidXR0b24iLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5IiwiaGFuZGxlTW91c2VEb3duRG9sbHkiLCJoYW5kbGVNb3VzZU1vdmVSb3RhdGUiLCJoYW5kbGVNb3VzZU1vdmVEb2xseSIsImhhbmRsZU1vdXNlTW92ZVBhbiIsInN0b3BQcm9wYWdhdGlvbiIsImhhbmRsZU1vdXNlV2hlZWwiLCJrZXlDb2RlIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZVRvdWNoU3RhcnREb2xseVBhbiIsImhhbmRsZVRvdWNoU3RhcnREb2xseVJvdGF0ZSIsImhhbmRsZVRvdWNoTW92ZURvbGx5UGFuIiwiaGFuZGxlVG91Y2hNb3ZlRG9sbHlSb3RhdGUiLCJub1pvb20iLCJub1JvdGF0ZSIsIm5vUGFuIiwibm9LZXlzIiwic3RhdGljTW92aW5nIiwiZHluYW1pY0RhbXBpbmdGYWN0b3IiLCJNYXBDb250cm9scyIsIm1vZCIsImluZmxhdGVfbW9kdWxlX21pbl9sIiwiYWEiLCJpbmZsYXRlX21vZHVsZV9taW5fciIsImV4ZWNTY3JpcHQiLCJpbmZsYXRlX21vZHVsZV9taW5fdCIsImluZmxhdGVfbW9kdWxlX21pbl92IiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJpbmZsYXRlX21vZHVsZV9taW5fdyIsImlucHV0IiwiaW5mbGF0ZV9tb2R1bGVfbWluX3kiLCJidWZmZXJTaXplIiwicmVzaXplIiwiQSIsImluZmxhdGVfbW9kdWxlX21pbl9DIiwiYmEiLCJjYSIsIlMiLCJVIiwiViIsIkQiLCJNIiwiRiIsIkUiLCJpbmZsYXRlX21vZHVsZV9taW5fUCIsImZhIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiZGEiLCJlYSIsImluZmxhdGVfbW9kdWxlX21pbl9OIiwiTyIsIlIiLCJnYSIsIlEiLCJXIiwidmVyaWZ5IiwibWV0aG9kIiwiWSIsIloiLCIkIiwiaWEiLCJYIiwiQURBUFRJVkUiLCJCTE9DSyIsIlpsaWIiLCJOVVJCU1V0aWxzIiwiZmluZFNwYW4iLCJjYWxjQmFzaXNGdW5jdGlvbnMiLCJzcGFuIiwic2F2ZWQiLCJydiIsImx2IiwidGVtcCIsImNhbGNCU3BsaW5lUG9pbnQiLCJDIiwiTmoiLCJ3TmoiLCJjYWxjQmFzaXNGdW5jdGlvbkRlcml2YXRpdmVzIiwiemVyb0FyciIsImRlcnMiLCJuZHUiLCJyayIsInBrIiwiajIiLCJjYWxjQlNwbGluZURlcml2YXRpdmVzIiwibmQiLCJkdSIsIkNLIiwibmRlcnMiLCJQdyIsImNhbGNLb3ZlckkiLCJub20iLCJjYWxjUmF0aW9uYWxDdXJ2ZURlcml2YXRpdmVzIiwiUGRlcnMiLCJBZGVycyIsIndkZXJzIiwiY2FsY05VUkJTRGVyaXZhdGl2ZXMiLCJjYWxjU3VyZmFjZVBvaW50IiwidXNwYW4iLCJ2c3BhbiIsIk51IiwiTnYiLCJTdyIsIk5VUkJTQ3VydmUiLCJkZWdyZWUiLCJrbm90cyIsImNvbnRyb2xQb2ludHMiLCJzdGFydEtub3QiLCJlbmRLbm90IiwiaHBvaW50IiwiZmJ4VHJlZSIsImNvbm5lY3Rpb25zIiwic2NlbmVHcmFwaCIsIkZCWExvYWRlciIsIkZCWFRyZWVQYXJzZXIiLCJHZW9tZXRyeVBhcnNlciIsIkFuaW1hdGlvblBhcnNlciIsIlRleHRQYXJzZXIiLCJCaW5hcnlQYXJzZXIiLCJCaW5hcnlSZWFkZXIiLCJsaXR0bGVFbmRpYW4iLCJkdiIsIkZCWFRyZWUiLCJnZXRGYnhWZXJzaW9uIiwiY29udmVydEZCWFRpbWVUb1NlY29uZHMiLCJGQlhCdWZmZXIiLCJDT1JSRUNUIiwiYnl0ZUxlbmd0aCIsImNvbnZlcnRBcnJheUJ1ZmZlclRvU3RyaW5nIiwiaXNGYnhGb3JtYXRCaW5hcnkiLCJGQlhUZXh0IiwiY3Vyc29yIiwicmVhZCIsIm51bSIsImlzRmJ4Rm9ybWF0QVNDSUkiLCJwYXJzZUNvbm5lY3Rpb25zIiwiZGVmb3JtZXJzIiwicGFyc2VEZWZvcm1lcnMiLCJnZW9tZXRyeU1hcCIsInBhcnNlU2NlbmUiLCJjb25uZWN0aW9uTWFwIiwiTWFwIiwiQ29ubmVjdGlvbnMiLCJyYXdDb25uZWN0aW9uIiwiZnJvbUlEIiwidG9JRCIsInJlbGF0aW9uc2hpcCIsImhhcyIsInBhcmVudHMiLCJwYXJlbnRSZWxhdGlvbnNoaXAiLCJJRCIsImNoaWxkUmVsYXRpb25zaGlwIiwiYmxvYnMiLCJPYmplY3RzIiwidmlkZW9Ob2RlcyIsIlZpZGVvIiwibm9kZUlEIiwidmlkZW9Ob2RlIiwiUmVsYXRpdmVGaWxlbmFtZSIsIkZpbGVuYW1lIiwiYXJyYXlCdWZmZXJDb250ZW50IiwiQ29udGVudCIsImJhc2U2NENvbnRlbnQiLCJwYXJzZUltYWdlIiwiZmlsZW5hbWUiLCJjb250ZW50IiwiZmlsZU5hbWUiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ0ZXh0dXJlTWFwIiwidGV4dHVyZU5vZGVzIiwicGFyc2VUZXh0dXJlIiwidGV4dHVyZU5vZGUiLCJhdHRyTmFtZSIsIndyYXBNb2RlVSIsIldyYXBNb2RlVSIsIndyYXBNb2RlViIsIldyYXBNb2RlViIsInZhbHVlVSIsInZhbHVlViIsIlNjYWxpbmciLCJGaWxlTmFtZSIsIm1hdGVyaWFsTWFwIiwibWF0ZXJpYWxOb2RlcyIsInBhcnNlTWF0ZXJpYWwiLCJtYXRlcmlhbE5vZGUiLCJTaGFkaW5nTW9kZWwiLCJwYXJzZVBhcmFtZXRlcnMiLCJCdW1wRmFjdG9yIiwiRGlmZnVzZSIsIkRpZmZ1c2VDb2xvciIsIkRpc3BsYWNlbWVudEZhY3RvciIsIkVtaXNzaXZlIiwiRW1pc3NpdmVDb2xvciIsIkVtaXNzaXZlRmFjdG9yIiwiT3BhY2l0eSIsIlJlZmxlY3Rpb25GYWN0b3IiLCJTaGluaW5lc3MiLCJTcGVjdWxhciIsIlNwZWN1bGFyQ29sb3IiLCJMYXllcmVkVGV4dHVyZSIsInNrZWxldG9ucyIsIkRlZm9ybWVyTm9kZXMiLCJEZWZvcm1lciIsImRlZm9ybWVyTm9kZSIsInJlbGF0aW9uc2hpcHMiLCJhdHRyVHlwZSIsInBhcnNlU2tlbGV0b24iLCJnZW9tZXRyeUlEIiwicmF3VGFyZ2V0cyIsInBhcnNlTW9ycGhUYXJnZXRzIiwiZGVmb3JtZXJOb2RlcyIsInJhd0JvbmVzIiwiYm9uZU5vZGUiLCJyYXdCb25lIiwid2VpZ2h0cyIsInRyYW5zZm9ybUxpbmsiLCJUcmFuc2Zvcm1MaW5rIiwiSW5kZXhlcyIsIldlaWdodHMiLCJyYXdNb3JwaFRhcmdldHMiLCJtb3JwaFRhcmdldE5vZGUiLCJyYXdNb3JwaFRhcmdldCIsImluaXRpYWxXZWlnaHQiLCJEZWZvcm1QZXJjZW50IiwiZnVsbFdlaWdodHMiLCJGdWxsV2VpZ2h0cyIsImdlb0lEIiwibW9kZWxNYXAiLCJwYXJzZU1vZGVscyIsIm1vZGVsTm9kZXMiLCJNb2RlbCIsIm1vZGVsIiwibW9kZWxOb2RlIiwic2V0TG9va0F0UHJvcGVydGllcyIsImNvbm5lY3Rpb24iLCJiaW5kU2tlbGV0b24iLCJjcmVhdGVBbWJpZW50TGlnaHQiLCJzZXR1cE1vcnBoTWF0ZXJpYWxzIiwidHJhbnNmb3JtRGF0YSIsInBhcmVudE1hdHJpeFdvcmxkIiwiZ2VuZXJhdGVUcmFuc2Zvcm0iLCJidWlsZFNrZWxldG9uIiwiY3JlYXRlQ2FtZXJhIiwiY3JlYXRlTGlnaHQiLCJjcmVhdGVNZXNoIiwiY3JlYXRlQ3VydmUiLCJnZXRUcmFuc2Zvcm1EYXRhIiwic3ViQm9uZSIsImNhbWVyYUF0dHJpYnV0ZSIsImF0dHIiLCJOb2RlQXR0cmlidXRlIiwiQ2FtZXJhUHJvamVjdGlvblR5cGUiLCJuZWFyQ2xpcHBpbmdQbGFuZSIsIk5lYXJQbGFuZSIsImZhckNsaXBwaW5nUGxhbmUiLCJGYXJQbGFuZSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIkFzcGVjdFdpZHRoIiwiQXNwZWN0SGVpZ2h0IiwiRmllbGRPZlZpZXciLCJGb2NhbExlbmd0aCIsImxpZ2h0QXR0cmlidXRlIiwiTGlnaHRUeXBlIiwiSW50ZW5zaXR5IiwiQ2FzdExpZ2h0T25PYmplY3QiLCJGYXJBdHRlbnVhdGlvbkVuZCIsIkVuYWJsZUZhckF0dGVudWF0aW9uIiwiSW5uZXJBbmdsZSIsIk91dGVyQW5nbGUiLCJDYXN0U2hhZG93cyIsIkZCWF9EZWZvcm1lciIsInJlZHVjZSIsImdlbyIsImluaGVyaXRUeXBlIiwiSW5oZXJpdFR5cGUiLCJnZXRFdWxlck9yZGVyIiwiUm90YXRpb25PcmRlciIsInRyYW5zbGF0aW9uIiwiTGNsX1RyYW5zbGF0aW9uIiwicHJlUm90YXRpb24iLCJQcmVSb3RhdGlvbiIsIkxjbF9Sb3RhdGlvbiIsInBvc3RSb3RhdGlvbiIsIlBvc3RSb3RhdGlvbiIsIkxjbF9TY2FsaW5nIiwic2NhbGluZ09mZnNldCIsIlNjYWxpbmdPZmZzZXQiLCJzY2FsaW5nUGl2b3QiLCJTY2FsaW5nUGl2b3QiLCJyb3RhdGlvbk9mZnNldCIsIlJvdGF0aW9uT2Zmc2V0Iiwicm90YXRpb25QaXZvdCIsIlJvdGF0aW9uUGl2b3QiLCJsb29rQXRUYXJnZXQiLCJwb3MiLCJiaW5kTWF0cmljZXMiLCJwYXJzZVBvc2VOb2RlcyIsImdlb0Nvbm5QYXJlbnQiLCJCaW5kUG9zZU5vZGUiLCJQb3NlIiwicG9zZU5vZGVzIiwiUG9zZU5vZGUiLCJwb3NlTm9kZSIsIk1hdHJpeCIsIkdsb2JhbFNldHRpbmdzIiwiYW1iaWVudENvbG9yIiwiQW1iaWVudENvbG9yIiwic2V0dXBNb3JwaE1hdGVyaWFsIiwibWF0VXVpZCIsInNoYXJlZE1hdCIsImNsb25lZE1hdCIsImdlb05vZGVzIiwicGFyc2VHZW9tZXRyeSIsImdlb05vZGUiLCJwYXJzZU1lc2hHZW9tZXRyeSIsInBhcnNlTnVyYnNHZW9tZXRyeSIsIkdlb21ldHJpY1RyYW5zbGF0aW9uIiwiR2VvbWV0cmljUm90YXRpb24iLCJHZW9tZXRyaWNTY2FsaW5nIiwiZ2VuR2VvbWV0cnkiLCJwcmVUcmFuc2Zvcm0iLCJnZW9JbmZvIiwicGFyc2VHZW9Ob2RlIiwiZ2VuQnVmZmVycyIsIndlaWdodHNJbmRpY2VzIiwidmVydGV4V2VpZ2h0cyIsIm5vcm1hbEF0dHJpYnV0ZSIsIm1hcHBpbmdUeXBlIiwicHJldk1hdGVyaWFsSW5kZXgiLCJzdGFydEluZGV4IiwiY3VycmVudEluZGV4IiwibGFzdEdyb3VwIiwiYWRkTW9ycGhUYXJnZXRzIiwidmVydGV4UG9zaXRpb25zIiwiVmVydGljZXMiLCJ2ZXJ0ZXhJbmRpY2VzIiwiUG9seWdvblZlcnRleEluZGV4IiwiTGF5ZXJFbGVtZW50Q29sb3IiLCJwYXJzZVZlcnRleENvbG9ycyIsIkxheWVyRWxlbWVudE1hdGVyaWFsIiwicGFyc2VNYXRlcmlhbEluZGljZXMiLCJMYXllckVsZW1lbnROb3JtYWwiLCJwYXJzZU5vcm1hbHMiLCJMYXllckVsZW1lbnRVViIsInBhcnNlVVZzIiwid2VpZ2h0VGFibGUiLCJwb2x5Z29uSW5kZXgiLCJmYWNlTGVuZ3RoIiwiZGlzcGxheWVkV2VpZ2h0c1dhcm5pbmciLCJmYWNlUG9zaXRpb25JbmRleGVzIiwiZmFjZUNvbG9ycyIsImZhY2VVVnMiLCJmYWNlV2VpZ2h0cyIsImZhY2VXZWlnaHRJbmRpY2VzIiwidmVydGV4SW5kZXgiLCJwb2x5Z29uVmVydGV4SW5kZXgiLCJlbmRPZkZhY2UiLCJ3ZWlnaHRJbmRpY2VzIiwid3QiLCJ3SW5kZXgiLCJXZWlnaHQiLCJ3ZWlnaHRJbmRleCIsImNvbXBhcmVkV2VpZ2h0IiwiY29tcGFyZWRXZWlnaHRJbmRleCIsImNvbXBhcmVkV2VpZ2h0QXJyYXkiLCJnZW5GYWNlIiwicGFyZW50R2VvIiwicGFyZW50R2VvTm9kZSIsInJhd1RhcmdldCIsIm1vcnBoR2VvTm9kZSIsImdlbk1vcnBoR2VvbWV0cnkiLCJtb3JwaEdlbyIsIm1vcnBoUG9zaXRpb25zIiwibW9ycGhJbmRleCIsIm1vcnBoR2VvSW5mbyIsIk5vcm1hbE5vZGUiLCJNYXBwaW5nSW5mb3JtYXRpb25UeXBlIiwicmVmZXJlbmNlVHlwZSIsIlJlZmVyZW5jZUluZm9ybWF0aW9uVHlwZSIsIk5vcm1hbHMiLCJpbmRleEJ1ZmZlciIsIk5vcm1hbEluZGV4IiwiTm9ybWFsc0luZGV4IiwiZGF0YVNpemUiLCJVVk5vZGUiLCJVViIsIlVWSW5kZXgiLCJDb2xvck5vZGUiLCJDb2xvcnMiLCJDb2xvckluZGV4IiwiTWF0ZXJpYWxOb2RlIiwibWF0ZXJpYWxJbmRleEJ1ZmZlciIsIm1hdGVyaWFsSW5kaWNlcyIsIk9yZGVyIiwiS25vdFZlY3RvciIsInBvaW50c1ZhbHVlcyIsIkZvcm0iLCJhbmltYXRpb25DbGlwcyIsInJhd0NsaXBzIiwicGFyc2VDbGlwcyIsInJhd0NsaXAiLCJhZGRDbGlwIiwiQW5pbWF0aW9uQ3VydmUiLCJjdXJ2ZU5vZGVzTWFwIiwicGFyc2VBbmltYXRpb25DdXJ2ZU5vZGVzIiwicGFyc2VBbmltYXRpb25DdXJ2ZXMiLCJsYXllcnNNYXAiLCJwYXJzZUFuaW1hdGlvbkxheWVycyIsInBhcnNlQW5pbVN0YWNrcyIsInJhd0N1cnZlTm9kZXMiLCJBbmltYXRpb25DdXJ2ZU5vZGUiLCJyYXdDdXJ2ZU5vZGUiLCJjdXJ2ZU5vZGUiLCJyYXdDdXJ2ZXMiLCJhbmltYXRpb25DdXJ2ZSIsIktleVRpbWUiLCJLZXlWYWx1ZUZsb2F0IiwiYW5pbWF0aW9uQ3VydmVJRCIsImFuaW1hdGlvbkN1cnZlUmVsYXRpb25zaGlwIiwicmF3TGF5ZXJzIiwiQW5pbWF0aW9uTGF5ZXIiLCJsYXllckN1cnZlTm9kZXMiLCJtb2RlbElEIiwicmF3TW9kZWwiLCJtb2RlbE5hbWUiLCJpbml0aWFsUG9zaXRpb24iLCJpbml0aWFsUm90YXRpb24iLCJpbml0aWFsU2NhbGUiLCJtb3JwaCIsImRlZm9ybWVySUQiLCJtb3JwaGVySUQiLCJtb3JwaE5hbWUiLCJyYXdTdGFja3MiLCJBbmltYXRpb25TdGFjayIsInJhd1RyYWNrcyIsImdlbmVyYXRlVHJhY2tzIiwicG9zaXRpb25UcmFjayIsImdlbmVyYXRlVmVjdG9yVHJhY2siLCJyb3RhdGlvblRyYWNrIiwiZ2VuZXJhdGVSb3RhdGlvblRyYWNrIiwic2NhbGVUcmFjayIsIm1vcnBoVHJhY2siLCJnZW5lcmF0ZU1vcnBoVHJhY2siLCJpbml0aWFsVmFsdWUiLCJnZXRUaW1lc0ZvckFsbEF4ZXMiLCJnZXRLZXlmcmFtZVRyYWNrVmFsdWVzIiwiaW50ZXJwb2xhdGVSb3RhdGlvbnMiLCJxdWF0ZXJuaW9uVmFsdWVzIiwidmFsIiwibW9ycGhOdW0iLCJlbGVtIiwicHJldlZhbHVlIiwieEluZGV4IiwieUluZGV4IiwiekluZGV4IiwieFZhbHVlIiwieVZhbHVlIiwielZhbHVlIiwidmFsdWVzU3BhbiIsImFic29sdXRlU3BhbiIsIm51bVN1YkludGVydmFscyIsIm5leHRWYWx1ZSIsImluaXRpYWxUaW1lIiwiaW50ZXJ2YWwiLCJuZXh0VGltZSIsImludGVycG9sYXRlZFRpbWVzIiwiaW50ZXJwb2xhdGVkVmFsdWVzIiwiaW5qZWN0IiwiZ2V0UHJldk5vZGUiLCJub2RlU3RhY2siLCJjdXJyZW50SW5kZW50IiwiZ2V0Q3VycmVudE5vZGUiLCJnZXRDdXJyZW50UHJvcCIsImN1cnJlbnRQcm9wIiwicHVzaFN0YWNrIiwicG9wU3RhY2siLCJzZXRDdXJyZW50UHJvcCIsImN1cnJlbnRQcm9wTmFtZSIsImFsbE5vZGVzIiwibWF0Y2hDb21tZW50IiwibWF0Y2hFbXB0eSIsIm1hdGNoQmVnaW5uaW5nIiwibWF0Y2hQcm9wZXJ0eSIsInBhcnNlTm9kZUJlZ2luIiwicGFyc2VOb2RlUHJvcGVydHkiLCJwYXJzZU5vZGVQcm9wZXJ0eUNvbnRpbnVlZCIsIm5vZGVBdHRycyIsImF0dHJzIiwicGFyc2VOb2RlQXR0ciIsImN1cnJlbnROb2RlIiwiY29udGVudExpbmUiLCJwcm9wTmFtZSIsInByb3BWYWx1ZSIsImNvbm5Qcm9wcyIsInJlc3QiLCJhcHBlbmQiLCJwYXJzZU51bWJlckFycmF5IiwicGFyc2VOb2RlU3BlY2lhbFByb3BlcnR5IiwicHJvcHMiLCJwcm9wIiwiaW5uZXJQcm9wTmFtZSIsImlubmVyUHJvcFR5cGUxIiwiaW5uZXJQcm9wVHlwZTIiLCJpbm5lclByb3BGbGFnIiwiaW5uZXJQcm9wVmFsdWUiLCJ0eXBlMiIsImZsYWciLCJyZWFkZXIiLCJza2lwIiwiZ2V0VWludDMyIiwiZW5kT2ZDb250ZW50IiwicGFyc2VOb2RlIiwiZ2V0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiZ2V0VWludDY0IiwibnVtUHJvcGVydGllcyIsIm5hbWVMZW4iLCJnZXRVaW50OCIsImdldFN0cmluZyIsInByb3BlcnR5TGlzdCIsInBhcnNlUHJvcGVydHkiLCJzaW5nbGVQcm9wZXJ0eSIsInN1Yk5vZGUiLCJwYXJzZVN1Yk5vZGUiLCJnZXRCb29sZWFuIiwiZ2V0RmxvYXQ2NCIsImdldEZsb2F0MzIiLCJnZXRJbnQzMiIsImdldEludDY0IiwiZ2V0QXJyYXlCdWZmZXIiLCJnZXRJbnQxNiIsImFycmF5TGVuZ3RoIiwiY29tcHJlc3NlZExlbmd0aCIsImdldEJvb2xlYW5BcnJheSIsImdldEZsb2F0NjRBcnJheSIsImdldEZsb2F0MzJBcnJheSIsImdldEludDMyQXJyYXkiLCJnZXRJbnQ2NEFycmF5IiwicmVhZGVyMiIsIkluZmxhdGUiLCJkZWNvbXByZXNzIiwibnVsbEJ5dGUiLCJkYXRhQXJyYXkiLCJpbmZvT2JqZWN0IiwidGVtcEV1bGVyIiwidGVtcFZlYyIsImxUcmFuc2xhdGlvbk0iLCJsUHJlUm90YXRpb25NIiwibFJvdGF0aW9uTSIsImxQb3N0Um90YXRpb25NIiwibFNjYWxpbmdNIiwibFNjYWxpbmdQaXZvdE0iLCJsU2NhbGluZ09mZnNldE0iLCJsUm90YXRpb25PZmZzZXRNIiwibFJvdGF0aW9uUGl2b3RNIiwibFBhcmVudEdYIiwibEdsb2JhbFQiLCJsTFJNIiwibFBhcmVudEdSTSIsImxMU00iLCJsUGFyZW50R1NNIiwibFBhcmVudEdSU00iLCJsR2xvYmFsUlMiLCJsUGFyZW50VE0iLCJsUGFyZW50TFNNIiwibFBhcmVudEdTTV9ub0xvY2FsIiwibFRyYW5zZm9ybSIsImxMb2NhbFRXaXRoQWxsUGl2b3RBbmRPZmZzZXRJbmZvIiwibEdsb2JhbFRyYW5zbGF0aW9uIiwiZW51bXMiLCJHTFRGTG9hZGVyX0dMVEZMb2FkZXIiLCJHTFRGTG9hZGVyIiwiZHJhY29Mb2FkZXIiLCJkZHNMb2FkZXIiLCJfb25FcnJvciIsImdsdGYiLCJzZXREUkFDT0xvYWRlciIsInNldEREU0xvYWRlciIsIkJJTkFSWV9FWFRFTlNJT05fSEVBREVSX01BR0lDIiwiRVhURU5TSU9OUyIsIktIUl9CSU5BUllfR0xURiIsImhlYWRlclZpZXciLCJCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEgiLCJtYWdpYyIsImNodW5rVmlldyIsImNodW5rSW5kZXgiLCJjaHVua0xlbmd0aCIsImNodW5rVHlwZSIsIkJJTkFSWV9FWFRFTlNJT05fQ0hVTktfVFlQRVMiLCJjb250ZW50QXJyYXkiLCJCSU4iLCJieXRlT2Zmc2V0IiwiYXNzZXQiLCJleHRlbnNpb25zVXNlZCIsImV4dGVuc2lvbk5hbWUiLCJleHRlbnNpb25zUmVxdWlyZWQiLCJLSFJfTElHSFRTX1BVTkNUVUFMIiwiR0xURkxpZ2h0c0V4dGVuc2lvbiIsIktIUl9NQVRFUklBTFNfVU5MSVQiLCJHTFRGTWF0ZXJpYWxzVW5saXRFeHRlbnNpb24iLCJLSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIiwiR0xURk1hdGVyaWFsc1BiclNwZWN1bGFyR2xvc3NpbmVzc0V4dGVuc2lvbiIsIktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OIiwiR0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uIiwiTVNGVF9URVhUVVJFX0REUyIsIkdMVEZUZXh0dXJlRERTRXh0ZW5zaW9uIiwiS0hSX1RFWFRVUkVfVFJBTlNGT1JNIiwiR0xURlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24iLCJHTFRGUGFyc2VyIiwibGlnaHREZWZzIiwibG9hZExpZ2h0IiwibGlnaHRJbmRleCIsImxpZ2h0Tm9kZSIsImxpZ2h0RGVmIiwiaW5uZXJDb25lQW5nbGUiLCJvdXRlckNvbmVBbmdsZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZ2V0TWF0ZXJpYWxUeXBlIiwiZXh0ZW5kUGFyYW1zIiwibWF0ZXJpYWxQYXJhbXMiLCJtYXRlcmlhbERlZiIsIm1ldGFsbGljUm91Z2huZXNzIiwicGJyTWV0YWxsaWNSb3VnaG5lc3MiLCJiYXNlQ29sb3JGYWN0b3IiLCJiYXNlQ29sb3JUZXh0dXJlIiwiYXNzaWduVGV4dHVyZSIsImFsbCIsInNwZWN1bGFyR2xvc3NpbmVzc1BhcmFtcyIsInBiclNwZWN1bGFyR2xvc3NpbmVzcyIsInNwZWN1bGFyTWFwUGFyc0ZyYWdtZW50Q2h1bmsiLCJnbG9zc2luZXNzTWFwUGFyc0ZyYWdtZW50Q2h1bmsiLCJzcGVjdWxhck1hcEZyYWdtZW50Q2h1bmsiLCJnbG9zc2luZXNzTWFwRnJhZ21lbnRDaHVuayIsImxpZ2h0UGh5c2ljYWxGcmFnbWVudENodW5rIiwiZ2xvc3NpbmVzcyIsImdsb3NzaW5lc3NNYXAiLCJkaWZmdXNlRmFjdG9yIiwiZGlmZnVzZVRleHR1cmUiLCJnbG9zc2luZXNzRmFjdG9yIiwic3BlY3VsYXJGYWN0b3IiLCJzcGVjdWxhckdsb3NzaW5lc3NUZXh0dXJlIiwic3BlY0dsb3NzTWFwRGVmIiwiaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwiLCJjbG9uZU1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zIiwiVVNFX0dMT1NTSU5FU1NNQVAiLCJVU0VfUk9VR0hORVNTTUFQIiwiR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQiLCJkZWNvZGVQcmltaXRpdmUiLCJwcmltaXRpdmUiLCJidWZmZXJWaWV3SW5kZXgiLCJidWZmZXJWaWV3IiwiZ2x0ZkF0dHJpYnV0ZU1hcCIsInRocmVlQXR0cmlidXRlTWFwIiwiYXR0cmlidXRlTm9ybWFsaXplZE1hcCIsImF0dHJpYnV0ZVR5cGVNYXAiLCJhdHRyaWJ1dGVOYW1lIiwidGhyZWVBdHRyaWJ1dGVOYW1lIiwiQVRUUklCVVRFUyIsImFjY2Vzc29yRGVmIiwiYWNjZXNzb3JzIiwiY29tcG9uZW50VHlwZSIsIldFQkdMX0NPTVBPTkVOVF9UWVBFUyIsImdldERlcGVuZGVuY3kiLCJkZWNvZGVEcmFjb0ZpbGUiLCJleHRlbmRUZXh0dXJlIiwidGV4Q29vcmQiLCJzdHJpZGUyIiwic3RyaWRlMyIsInRkIiwibTAiLCJkZWZhdWx0TWF0ZXJpYWwiLCJXRUJHTF9DT05TVEFOVFMiLCI1MTIwIiwiNTEyMSIsIjUxMjIiLCI1MTIzIiwiNTEyNSIsIjUxMjYiLCJXRUJHTF9GSUxURVJTIiwiOTcyOCIsIjk3MjkiLCI5OTg0IiwiOTk4NSIsIjk5ODYiLCI5OTg3IiwiV0VCR0xfV1JBUFBJTkdTIiwiMzMwNzEiLCIzMzY0OCIsIjEwNDk3IiwiV0VCR0xfVFlQRV9TSVpFUyIsIlNDQUxBUiIsIlZFQzIiLCJWRUMzIiwiVkVDNCIsIk1BVDIiLCJNQVQzIiwiTUFUNCIsIlBPU0lUSU9OIiwiTk9STUFMIiwiVEFOR0VOVCIsIlRFWENPT1JEXzAiLCJURVhDT09SRF8xIiwiQ09MT1JfMCIsIldFSUdIVFNfMCIsIkpPSU5UU18wIiwiUEFUSF9QUk9QRVJUSUVTIiwiSU5URVJQT0xBVElPTiIsIkNVQklDU1BMSU5FIiwiTElORUFSIiwiU1RFUCIsIkFMUEhBX01PREVTIiwiTUlNRV9UWVBFX0ZPUk1BVFMiLCJpbWFnZS9wbmciLCJpbWFnZS9qcGVnIiwiYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhIiwia25vd25FeHRlbnNpb25zIiwib2JqZWN0RGVmIiwiZ2x0ZkV4dGVuc2lvbnMiLCJhc3NpZ25FeHRyYXNUb1VzZXJEYXRhIiwiZ2x0ZkRlZiIsImV4dHJhcyIsIm1lc2hEZWYiLCJ0YXJnZXROYW1lcyIsImNyZWF0ZVByaW1pdGl2ZUtleSIsInByaW1pdGl2ZURlZiIsImRyYWNvRXh0ZW5zaW9uIiwiY3JlYXRlQXR0cmlidXRlc0tleSIsImF0dHJpYnV0ZXNLZXkiLCJjbG9uZUJ1ZmZlckF0dHJpYnV0ZSIsInByaW1pdGl2ZUNhY2hlIiwiZmlsZUxvYWRlciIsImFkZFByaW1pdGl2ZUF0dHJpYnV0ZXMiLCJhc3NpZ25BdHRyaWJ1dGVBY2Nlc3NvciIsImFjY2Vzc29ySW5kZXgiLCJhY2Nlc3NvciIsImdsdGZBdHRyaWJ1dGVOYW1lIiwidGFyZ2V0cyIsImhhc01vcnBoUG9zaXRpb24iLCJoYXNNb3JwaE5vcm1hbCIsInBlbmRpbmdQb3NpdGlvbkFjY2Vzc29ycyIsInBlbmRpbmdOb3JtYWxBY2Nlc3NvcnMiLCJwZW5kaW5nQWNjZXNzb3IiLCJtYXJrRGVmcyIsImdldERlcGVuZGVuY2llcyIsImRlcGVuZGVuY2llcyIsInNjZW5lcyIsIm5vZGVEZWZzIiwibm9kZXMiLCJza2luRGVmcyIsInNraW5zIiwibWVzaERlZnMiLCJtZXNoZXMiLCJtZXNoUmVmZXJlbmNlcyIsIm1lc2hVc2VzIiwic2tpbkluZGV4Iiwic2tpbkxlbmd0aCIsImpvaW50cyIsIm5vZGVJbmRleCIsIm5vZGVMZW5ndGgiLCJub2RlRGVmIiwic2tpbiIsImNhY2hlS2V5IiwiZGVwZW5kZW5jeSIsImxvYWRTY2VuZSIsImxvYWROb2RlIiwibG9hZE1lc2giLCJsb2FkQWNjZXNzb3IiLCJsb2FkQnVmZmVyVmlldyIsImxvYWRCdWZmZXIiLCJsb2FkTWF0ZXJpYWwiLCJsb2FkU2tpbiIsImxvYWRBbmltYXRpb24iLCJsb2FkQ2FtZXJhIiwiZGVmcyIsImRlZiIsImJ1ZmZlckluZGV4IiwiYnVmZmVyRGVmIiwidXJpIiwicmVqZWN0IiwiYnVmZmVyVmlld0RlZiIsImJ1ZmZlclZpZXdzIiwic3BhcnNlIiwicGVuZGluZ0J1ZmZlclZpZXdzIiwiVHlwZWRBcnJheSIsImVsZW1lbnRCeXRlcyIsIml0ZW1CeXRlcyIsImJ5dGVTdHJpZGUiLCJpYlNsaWNlIiwiaWJDYWNoZUtleSIsImliIiwiaXRlbVNpemVJbmRpY2VzIiwiVHlwZWRBcnJheUluZGljZXMiLCJieXRlT2Zmc2V0SW5kaWNlcyIsImJ5dGVPZmZzZXRWYWx1ZXMiLCJzcGFyc2VJbmRpY2VzIiwic3BhcnNlVmFsdWVzIiwidGV4dHVyZUluZGV4Iiwid2Via2l0VVJMIiwidGV4dHVyZURlZiIsInRleHR1cmVFeHRlbnNpb25zIiwic291cmNlVVJJIiwiaXNPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJzYW1wbGVyIiwic2FtcGxlcnMiLCJtYXBOYW1lIiwibWFwRGVmIiwiYXNzaWduRmluYWxNYXRlcmlhbCIsInVzZVZlcnRleFRhbmdlbnRzIiwidXNlVmVydGV4Q29sb3JzIiwidXNlRmxhdFNoYWRpbmciLCJ1c2VNb3JwaFRhcmdldHMiLCJ1c2VNb3JwaE5vcm1hbHMiLCJwb2ludHNNYXRlcmlhbCIsImxpbmVNYXRlcmlhbCIsIm1hdGVyaWFsVHlwZSIsIm1hdGVyaWFsRXh0ZW5zaW9ucyIsInNnRXh0ZW5zaW9uIiwia211RXh0ZW5zaW9uIiwibWV0YWxsaWNGYWN0b3IiLCJyb3VnaG5lc3NGYWN0b3IiLCJtZXRhbGxpY1JvdWdobmVzc1RleHR1cmUiLCJhbHBoYU1vZGUiLCJhbHBoYUN1dG9mZiIsIm5vcm1hbFRleHR1cmUiLCJvY2NsdXNpb25UZXh0dXJlIiwic3RyZW5ndGgiLCJlbWlzc2l2ZUZhY3RvciIsImVtaXNzaXZlVGV4dHVyZSIsImxvYWRHZW9tZXRyaWVzIiwicHJpbWl0aXZlcyIsImNyZWF0ZURyYWNvUHJpbWl0aXZlIiwiZ2VvbWV0cnlQcm9taXNlIiwicHJvbWlzZSIsIm1lc2hJbmRleCIsIm9yaWdpbmFsTWF0ZXJpYWxzIiwiY2FtZXJhSW5kZXgiLCJjYW1lcmFEZWYiLCJ5Zm92IiwiYXNwZWN0UmF0aW8iLCJ6bmVhciIsInpmYXIiLCJ4bWFnIiwieW1hZyIsInNraW5EZWYiLCJza2luRW50cnkiLCJpbnZlcnNlQmluZE1hdHJpY2VzIiwiYW5pbWF0aW9uSW5kZXgiLCJhbmltYXRpb25EZWYiLCJwZW5kaW5nTm9kZXMiLCJwZW5kaW5nSW5wdXRBY2Nlc3NvcnMiLCJwZW5kaW5nT3V0cHV0QWNjZXNzb3JzIiwicGVuZGluZ1NhbXBsZXJzIiwicGVuZGluZ1RhcmdldHMiLCJjaGFubmVscyIsImlucHV0QWNjZXNzb3JzIiwib3V0cHV0QWNjZXNzb3JzIiwiaW5wdXRBY2Nlc3NvciIsIm91dHB1dEFjY2Vzc29yIiwidGFyZ2V0TmFtZSIsIm91dHB1dEFycmF5Iiwic2NhbGVkIiwiaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUiLCJpbnN0YW5jZU51bSIsImJ1aWxkTm9kZUhpZXJhY2h5Iiwibm9kZUlkIiwicGFyZW50T2JqZWN0IiwicGVuZGluZ0pvaW50cyIsImpvaW50Tm9kZXMiLCJqb2ludE5vZGUiLCJzY2VuZUluZGV4Iiwic2NlbmVEZWYiLCJub2RlSWRzIiwiV2F0ZXIiLCJ0ZXh0dXJlV2lkdGgiLCJ0ZXh0dXJlSGVpZ2h0IiwiY2xpcEJpYXMiLCJub3JtYWxTYW1wbGVyIiwid2F0ZXJOb3JtYWxzIiwic3VuRGlyZWN0aW9uIiwic3VuQ29sb3IiLCJ3YXRlckNvbG9yIiwiZGlzdG9ydGlvblNjYWxlIiwibWlycm9yUGxhbmUiLCJtaXJyb3JXb3JsZFBvc2l0aW9uIiwiY2FtZXJhV29ybGRQb3NpdGlvbiIsInJvdGF0aW9uTWF0cml4IiwibG9va0F0UG9zaXRpb24iLCJjbGlwUGxhbmUiLCJ0ZXh0dXJlTWF0cml4IiwibWlycm9yQ2FtZXJhIiwibWlycm9yU2hhZGVyIiwibWlycm9yU2FtcGxlciIsImN1cnJlbnRWckVuYWJsZWQiLCJjdXJyZW50U2hhZG93QXV0b1VwZGF0ZSIsIm1haW5fY2FtZXJhIiwibWFpbl9zY2VuZSIsImNvbnRyb2xzIiwid2F0ZXIiLCJtaXhlcnMiLCJCcGxhY2UiLCJqenhfZ3JvdXBfMSIsInJlbmRlclRpbWUiLCJEYXRhcyIsImtleURhdGFzIiwiaW5jbHVkZXMiLCJib3hfd2FmX2luaXQiLCJKWlhfT0JKIiwiYndfd29ybGRfcG9zIiwiSlpYX09CSl9uZXciLCJzbUNhcl9tb3ZlIiwiZW5kX2J3IiwicWlhb2RpYW9femh1YXF1X25ldyIsInJldHVybldvcmxkUG9zQnlOYW1lIiwib2JqX3dvcmxkX3BvcyIsInR3ZWVuX21vZHVsZV9taW4iLCJ0d2VlbkFuaW1hdGVaIiwiTXRBbmltYXRlIiwiYW5pbWF0ZU5hbWUiLCJib3hfaWQiLCJib3hfbmV3Iiwib25XaW5kb3dSZXNpemUiLCJyZW50dXJuQm9hdFR5cGUiLCJib2F0X3R5cGUiLCJib2F0X3N0YXJ0TmFtZSIsInR3ZWVuQW5pbWF0ZVgiLCJxdWVyeVNlbGVjdG9yIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImN1YmVUZXh0dXJlTG9hZGVyIiwiY3ViZVRleHR1cmUiLCJJbml0ZXZNYXBzIiwiaW5pdFNlYSIsIm10Y2oiLCJib2F0IiwiYm9hdF9uZXciLCJib2F0X2JheURvY2siLCJiYXlEb2NrIiwic3MiLCJzczAiLCJzczEiLCJ3YWZfYndfd29ybGRfcG9zIiwiYm9hdF9jaGlsZCIsImJvYXRfY2hpbGRfbmFtZSIsImJvYXRfYndfd29ybGRfcG9zIiwiYm9hdF9wb3MiLCJpdHNfeCIsImJvYXRJbml0IiwiY2FyIiwiY2FyX25ldyIsImNhcl9wb3NpdGlvbiIsImNhcl9id193b3JsZF9wb3MiLCJjYXJfd29ybGRfcG9zIiwiY2FySW5pdCIsImJyaWRnZSIsInFpYW9kaWFvX25ldyIsImJyaWRnZV9wb3NpdGlvblMiLCJwb3NpdGlvbkEiLCJwb3NpdGlvblMiLCJicmlkZ2VJbml0IiwiSlpYX3NodWlwaW54aWFuZyIsIkpaWF9qaWFucm9uZ3hpYW5nIiwiSlpYX3NoaWxhaml4aWFuZyIsIkpaWF9jYW5jaHV4aWFuZyIsImxvYWRlcklkIiwiYm94X3Bvc2l0aW9uIiwiYm94X3R5cGUiLCJib2F0X29iaiIsImp6eEluaXQiLCJiaWdDYXJfbW92ZSIsInRpbWVfbmV3IiwidGVzdEFuaW1hdGUiLCJpbml0TW9kZWwiLCJTeCIsIlN5Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXpCLEVBQUE2QixFQUFBLFNBQUExQixHQUNBLElBQUFTLEVBQUFULEtBQUFxQixXQUNBLFdBQTJCLE9BQUFyQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REL0IsRUFBQWtDLEVBQUEsR0FJQWxDLElBQUFtQyxFQUFBLGlEQ2xGQW5DLEVBQUFVLEVBQUEwQixFQUFBLHNCQUFBQyxJQUNBLElBQUFDLEVBQUEsV0FBc0JDLEtBQUFDLFdBQWVELEtBQUFFLDZCQUFtQ0gsRUFBQU4sV0FBa0JVLE9BQUEsV0FBa0IsT0FBQTVCLE9BQUE2QixLQUFBSixLQUFBQyxTQUFBSSxJQUFBLFNBQUF0QixHQUFpRCxPQUFBaUIsS0FBQUMsUUFBQWxCLElBQXVCTSxLQUFBVyxRQUFhTSxVQUFBLFdBQXNCTixLQUFBQyxZQUFnQk0sSUFBQSxTQUFBeEIsR0FBaUJpQixLQUFBQyxRQUFBbEIsRUFBQXlCLFNBQUF6QixFQUFBaUIsS0FBQUUseUJBQUFuQixFQUFBeUIsU0FBQXpCLEdBQXFFMEIsT0FBQSxTQUFBMUIsVUFBb0JpQixLQUFBQyxRQUFBbEIsRUFBQXlCLGdCQUFBUixLQUFBRSx5QkFBQW5CLEVBQUF5QixVQUErRUUsT0FBQSxTQUFBM0IsRUFBQU8sR0FBc0IsSUFBQXFCLEVBQUFwQyxPQUFBNkIsS0FBQUosS0FBQUMsU0FBZ0MsT0FBQVUsRUFBQUMsT0FBQSxTQUF5QixJQUFBN0IsT0FBQSxJQUFBQSxJQUFBZSxFQUFBZSxNQUErQixFQUFBRixFQUFBQyxRQUFXLENBQUVaLEtBQUFFLDRCQUFpQyxRQUFBckMsRUFBQSxFQUFZQSxFQUFBOEMsRUFBQUMsT0FBVy9DLElBQUEsQ0FBSyxJQUFBYyxFQUFBcUIsS0FBQUMsUUFBQVUsRUFBQTlDLElBQXlCYyxJQUFBLElBQUFBLEVBQUErQixPQUFBM0IsS0FBQUosRUFBQW1DLFlBQUEsRUFBQXhCLFVBQUFVLEtBQUFDLFFBQUFVLEVBQUE5QyxLQUFvRThDLEVBQUFwQyxPQUFBNkIsS0FBQUosS0FBQUUsMEJBQTZDLFdBQVcsSUFBQUosRUFBQSxJQUFBQyxFQUFxQkQsRUFBQWlCLE1BQUFoQixFQUFBRCxFQUFBa0IsUUFBQSxFQUFBbEIsRUFBQW1CLE9BQUEsV0FBMkQsT0FBQW5CLEVBQUFrQixXQUF1QixvQkFBQUUsV0FBQSxJQUFBQyxLQUFBQyxPQUFBdEIsRUFBQWUsSUFBQSxXQUE0RixJQUFBOUIsRUFBQW9DLEVBQUFDLFNBQXVCLFdBQUFyQyxFQUFBLEdBQUFBLEVBQUEsUUFBeUIsb0JBQUFtQyxXQUFBLElBQUFBLEtBQUFHLGtCQUFBLElBQUFILEtBQUFHLFlBQUFSLElBQUFmLEVBQUFlLElBQUFLLEtBQUFHLFlBQUFSLElBQUF4QixLQUFBNkIsS0FBQUcsa0JBQUEsSUFBQUMsS0FBQVQsSUFBQWYsRUFBQWUsSUFBQVMsS0FBQVQsSUFBQWYsRUFBQWUsSUFBQSxXQUFvTSxXQUFBUyxNQUFBQyxXQUEyQnpCLEVBQUEwQixNQUFBLFNBQUF6QyxFQUFBTyxHQUEyQlUsS0FBQXlCLFFBQUExQyxFQUFBaUIsS0FBQTBCLGdCQUFtQzFCLEtBQUEyQixjQUFtQjNCLEtBQUE0QixzQkFBMkI1QixLQUFBNkIsVUFBQSxJQUFBN0IsS0FBQThCLFFBQUEsRUFBQTlCLEtBQUErQixzQkFBQSxFQUFBL0IsS0FBQWdDLE9BQUEsRUFBQWhDLEtBQUFjLFlBQUEsRUFBQWQsS0FBQWlDLFdBQUEsRUFBQWpDLEtBQUFrQyxXQUFBLEVBQUFsQyxLQUFBbUMsV0FBQSxLQUFBbkMsS0FBQW9DLGdCQUFBdEMsRUFBQXVDLE9BQUFDLE9BQUFDLEtBQUF2QyxLQUFBd0MsdUJBQUExQyxFQUFBMkMsY0FBQUgsT0FBQXRDLEtBQUEwQyxrQkFBQTFDLEtBQUEyQyxpQkFBQSxLQUFBM0MsS0FBQTRDLHVCQUFBLEVBQUE1QyxLQUFBNkMsa0JBQUEsS0FBQTdDLEtBQUE4QyxvQkFBQSxLQUFBOUMsS0FBQStDLGdCQUFBLEtBQUEvQyxLQUFBZ0QsT0FBQTFELEdBQUFRLEVBQUFFLEtBQUFpRCxJQUFBbkQsRUFBQW1CLFVBQWdkbkIsRUFBQTBCLE1BQUEvQixXQUF3QmUsTUFBQSxXQUFpQixPQUFBUixLQUFBaUQsS0FBZ0JDLFVBQUEsV0FBc0IsT0FBQWxELEtBQUFjLFlBQXVCcUMsR0FBQSxTQUFBcEUsRUFBQU8sR0FBa0IsT0FBQVUsS0FBQTJCLFdBQUFwRCxPQUFBWSxPQUFBSixRQUFBLElBQUFPLElBQUFVLEtBQUE2QixVQUFBdkMsR0FBQVUsTUFBNEVvRCxTQUFBLFNBQUFyRSxHQUFzQixPQUFBaUIsS0FBQTZCLFVBQUE5QyxFQUFBaUIsTUFBNkJxRCxNQUFBLFNBQUF0RSxHQUFtQixRQUFBTyxLQUFBVSxLQUFBZ0QsT0FBQXpDLElBQUFQLFdBQUFjLFlBQUEsRUFBQWQsS0FBQTRDLHVCQUFBLEVBQUE1QyxLQUFBbUMsZ0JBQUEsSUFBQXBELEVBQUEsaUJBQUFBLEVBQUFlLEVBQUFlLE1BQUF5QyxXQUFBdkUsS0FBQWUsRUFBQWUsTUFBQWIsS0FBQW1DLFlBQUFuQyxLQUFBa0MsV0FBQWxDLEtBQUEyQixXQUFBLENBQTROLEdBQUEzQixLQUFBMkIsV0FBQXJDLGFBQUFpRSxNQUFBLENBQXVDLE9BQUF2RCxLQUFBMkIsV0FBQXJDLEdBQUFzQixPQUFBLFNBQTBDWixLQUFBMkIsV0FBQXJDLElBQUFVLEtBQUF5QixRQUFBbkMsSUFBQWtFLE9BQUF4RCxLQUFBMkIsV0FBQXJDLFNBQWdFLElBQUFVLEtBQUF5QixRQUFBbkMsS0FBQVUsS0FBQTBCLGFBQUFwQyxHQUFBVSxLQUFBeUIsUUFBQW5DLEdBQUFVLEtBQUEwQixhQUFBcEMsYUFBQWlFLE9BQUEsSUFBQXZELEtBQUEwQixhQUFBcEMsSUFBQSxHQUFBVSxLQUFBNEIsbUJBQUF0QyxHQUFBVSxLQUFBMEIsYUFBQXBDLElBQUEsR0FBd0wsT0FBQVUsTUFBWXlELEtBQUEsV0FBaUIsT0FBQXpELEtBQUFjLGFBQUFkLEtBQUFnRCxPQUFBdkMsT0FBQVQsV0FBQWMsWUFBQSxTQUFBZCxLQUFBK0MsaUJBQUEvQyxLQUFBK0MsZ0JBQUEvQyxLQUFBeUIsU0FBQXpCLEtBQUEwRCxxQkFBQTFELE1BQW9LMkQsSUFBQSxXQUFnQixPQUFBM0QsS0FBQVUsT0FBQSxLQUFBVixNQUE2QjBELGtCQUFBLFdBQThCLFFBQUEzRSxFQUFBLEVBQUFPLEVBQUFVLEtBQUEwQyxlQUFBOUIsT0FBeUM3QixFQUFBTyxFQUFJUCxJQUFBaUIsS0FBQTBDLGVBQUEzRCxHQUFBMEUsUUFBa0NHLE1BQUEsU0FBQTdFLEdBQW1CLE9BQUFpQixLQUFBZ0QsT0FBQWpFLEVBQUFpQixNQUEwQjZELE1BQUEsU0FBQTlFLEdBQW1CLE9BQUFpQixLQUFBa0MsV0FBQW5ELEVBQUFpQixNQUE4QjhELE9BQUEsU0FBQS9FLEdBQW9CLE9BQUFpQixLQUFBOEIsUUFBQS9DLEVBQUFpQixNQUEyQitELFlBQUEsU0FBQWhGLEdBQXlCLE9BQUFpQixLQUFBK0IsaUJBQUFoRCxFQUFBaUIsTUFBb0NnRSxLQUFBLFNBQUFqRixHQUFrQixPQUFBaUIsS0FBQWdDLE1BQUFqRCxFQUFBaUIsTUFBeUJpRSxPQUFBLFNBQUFsRixHQUFvQixPQUFBaUIsS0FBQW9DLGdCQUFBckQsRUFBQWlCLE1BQW1Da0UsY0FBQSxTQUFBbkYsR0FBMkIsT0FBQWlCLEtBQUF3Qyx1QkFBQXpELEVBQUFpQixNQUEwQ21FLE1BQUEsV0FBa0IsT0FBQW5FLEtBQUEwQyxlQUFBMEIsVUFBQXBFLE1BQTBDcUUsUUFBQSxTQUFBdEYsR0FBcUIsT0FBQWlCLEtBQUEyQyxpQkFBQTVELEVBQUFpQixNQUFvQ3NFLFNBQUEsU0FBQXZGLEdBQXNCLE9BQUFpQixLQUFBNkMsa0JBQUE5RCxFQUFBaUIsTUFBcUN1RSxXQUFBLFNBQUF4RixHQUF3QixPQUFBaUIsS0FBQThDLG9CQUFBL0QsRUFBQWlCLE1BQXVDd0UsT0FBQSxTQUFBekYsR0FBb0IsT0FBQWlCLEtBQUErQyxnQkFBQWhFLEVBQUFpQixNQUFtQ1UsT0FBQSxTQUFBM0IsR0FBb0IsSUFBQU8sRUFBQXFCLEVBQUE5QyxFQUFVLEdBQUFrQixFQUFBaUIsS0FBQW1DLFdBQUEsU0FBOEIsSUFBQTdDLEtBQUEsSUFBQVUsS0FBQTRDLHdCQUFBLE9BQUE1QyxLQUFBMkMsa0JBQUEzQyxLQUFBMkMsaUJBQUEzQyxLQUFBeUIsU0FBQXpCLEtBQUE0Qyx1QkFBQSxHQUFBakMsR0FBQTVCLEVBQUFpQixLQUFBbUMsWUFBQW5DLEtBQUE2QixVQUFBbEIsRUFBQSxJQUFBWCxLQUFBNkIsV0FBQSxFQUFBbEIsRUFBQSxFQUFBQSxFQUFBOUMsRUFBQW1DLEtBQUFvQyxnQkFBQXpCLEdBQUFYLEtBQUEyQixXQUFBLFlBQUEzQixLQUFBMEIsYUFBQXBDLEdBQUEsQ0FBMFIsSUFBQVgsRUFBQXFCLEtBQUEwQixhQUFBcEMsSUFBQSxFQUFBbUYsRUFBQXpFLEtBQUEyQixXQUFBckMsR0FBbURtRixhQUFBbEIsTUFBQXZELEtBQUF5QixRQUFBbkMsR0FBQVUsS0FBQXdDLHVCQUFBaUMsRUFBQTVHLElBQUEsaUJBQUE0RyxNQUFBLE1BQUFBLEVBQUFDLE9BQUEsVUFBQUQsRUFBQUMsT0FBQSxHQUFBL0YsRUFBQTJFLFdBQUFtQixHQUFBbkIsV0FBQW1CLElBQUEsaUJBQUFBLElBQUF6RSxLQUFBeUIsUUFBQW5DLEdBQUFYLEdBQUE4RixFQUFBOUYsR0FBQWQsSUFBaU4sVUFBQW1DLEtBQUE2QyxtQkFBQTdDLEtBQUE2QyxrQkFBQTdDLEtBQUF5QixTQUFBLElBQUFkLEVBQUEsU0FBc0YsS0FBQVgsS0FBQThCLFFBQUEsQ0FBbUIsSUFBQXhDLEtBQUFxRixTQUFBM0UsS0FBQThCLFVBQUE5QixLQUFBOEIsVUFBQTlCLEtBQUE0QixtQkFBQSxDQUF5RSxvQkFBQTVCLEtBQUEyQixXQUFBckMsS0FBQVUsS0FBQTRCLG1CQUFBdEMsR0FBQVUsS0FBQTRCLG1CQUFBdEMsR0FBQWdFLFdBQUF0RCxLQUFBMkIsV0FBQXJDLEtBQUFVLEtBQUFnQyxNQUFBLENBQTJJLElBQUFwQyxFQUFBSSxLQUFBNEIsbUJBQUF0QyxHQUFpQ1UsS0FBQTRCLG1CQUFBdEMsR0FBQVUsS0FBQTJCLFdBQUFyQyxHQUFBVSxLQUFBMkIsV0FBQXJDLEdBQUFNLEVBQW1FSSxLQUFBMEIsYUFBQXBDLEdBQUFVLEtBQUE0QixtQkFBQXRDLEdBQWdELE9BQUFVLEtBQUFnQyxRQUFBaEMsS0FBQWlDLFdBQUFqQyxLQUFBaUMsZ0JBQUEsSUFBQWpDLEtBQUErQixpQkFBQS9CLEtBQUFtQyxXQUFBcEQsRUFBQWlCLEtBQUErQixpQkFBQS9CLEtBQUFtQyxXQUFBcEQsRUFBQWlCLEtBQUFrQyxZQUFBLEVBQWdLLE9BQUFsQyxLQUFBOEMscUJBQUE5QyxLQUFBOEMsb0JBQUE5QyxLQUFBeUIsU0FBd0UsUUFBQW5ELEVBQUEsRUFBQXNHLEVBQUE1RSxLQUFBMEMsZUFBQTlCLE9BQXlDdEMsRUFBQXNHLEVBQUl0RyxJQUFBMEIsS0FBQTBDLGVBQUFwRSxHQUFBK0UsTUFBQXJELEtBQUFtQyxXQUFBbkMsS0FBQTZCLFdBQWlFLFdBQVUvQixFQUFBdUMsUUFBZUMsUUFBUUMsS0FBQSxTQUFBeEQsR0FBaUIsT0FBQUEsSUFBVThGLFdBQVlDLEdBQUEsU0FBQS9GLEdBQWUsT0FBQUEsS0FBV2dHLElBQUEsU0FBQWhHLEdBQWlCLE9BQUFBLEdBQUEsRUFBQUEsSUFBZWlHLE1BQUEsU0FBQWpHLEdBQW1CLE9BQUFBLEdBQUEsUUFBQUEsS0FBQSxNQUFBQSxLQUFBLFFBQXlDa0csT0FBUUgsR0FBQSxTQUFBL0YsR0FBZSxPQUFBQSxPQUFhZ0csSUFBQSxTQUFBaEcsR0FBaUIsUUFBQUEsTUFBQSxHQUFnQmlHLE1BQUEsU0FBQWpHLEdBQW1CLE9BQUFBLEdBQUEsUUFBQUEsTUFBQSxLQUFBQSxHQUFBLEdBQUFBLElBQUEsS0FBMkNtRyxTQUFVSixHQUFBLFNBQUEvRixHQUFlLE9BQUFBLFNBQWVnRyxJQUFBLFNBQUFoRyxHQUFpQixZQUFBQSxTQUFvQmlHLE1BQUEsU0FBQWpHLEdBQW1CLE9BQUFBLEdBQUEsUUFBQUEsU0FBQSxLQUFBQSxHQUFBLEdBQUFBLE1BQUEsS0FBZ0RvRyxTQUFVTCxHQUFBLFNBQUEvRixHQUFlLE9BQUFBLFdBQWlCZ0csSUFBQSxTQUFBaEcsR0FBaUIsUUFBQUEsVUFBQSxHQUFvQmlHLE1BQUEsU0FBQWpHLEdBQW1CLE9BQUFBLEdBQUEsUUFBQUEsVUFBQSxLQUFBQSxHQUFBLEdBQUFBLFFBQUEsS0FBbURxRyxZQUFhTixHQUFBLFNBQUEvRixHQUFlLFNBQUFzRyxLQUFBQyxJQUFBdkcsRUFBQXNHLEtBQUFFLEdBQUEsSUFBK0JSLElBQUEsU0FBQWhHLEdBQWlCLE9BQUFzRyxLQUFBRyxJQUFBekcsRUFBQXNHLEtBQUFFLEdBQUEsSUFBNkJQLE1BQUEsU0FBQWpHLEdBQW1CLFlBQUFzRyxLQUFBQyxJQUFBRCxLQUFBRSxHQUFBeEcsTUFBa0MwRyxhQUFjWCxHQUFBLFNBQUEvRixHQUFlLFdBQUFBLEVBQUEsRUFBQXNHLEtBQUFLLElBQUEsS0FBQTNHLEVBQUEsSUFBa0NnRyxJQUFBLFNBQUFoRyxHQUFpQixXQUFBQSxFQUFBLElBQUFzRyxLQUFBSyxJQUFBLE1BQUEzRyxJQUFtQ2lHLE1BQUEsU0FBQWpHLEdBQW1CLFdBQUFBLEVBQUEsTUFBQUEsRUFBQSxHQUFBQSxHQUFBLFFBQUFzRyxLQUFBSyxJQUFBLEtBQUEzRyxFQUFBLFNBQUFzRyxLQUFBSyxJQUFBLE9BQUEzRyxFQUFBLE9BQW9GNEcsVUFBV2IsR0FBQSxTQUFBL0YsR0FBZSxTQUFBc0csS0FBQU8sS0FBQSxFQUFBN0csTUFBMEJnRyxJQUFBLFNBQUFoRyxHQUFpQixPQUFBc0csS0FBQU8sS0FBQSxLQUFBN0csTUFBMkJpRyxNQUFBLFNBQUFqRyxHQUFtQixPQUFBQSxHQUFBLFVBQUFzRyxLQUFBTyxLQUFBLEVBQUE3RyxLQUFBLE9BQUFzRyxLQUFBTyxLQUFBLEdBQUE3RyxHQUFBLEdBQUFBLEdBQUEsS0FBc0U4RyxTQUFVZixHQUFBLFNBQUEvRixHQUFlLFdBQUFBLEVBQUEsTUFBQUEsRUFBQSxHQUFBc0csS0FBQUssSUFBQSxNQUFBM0csRUFBQSxJQUFBc0csS0FBQUcsSUFBQSxHQUFBekcsRUFBQSxLQUFBc0csS0FBQUUsS0FBeUVSLElBQUEsU0FBQWhHLEdBQWlCLFdBQUFBLEVBQUEsTUFBQUEsRUFBQSxFQUFBc0csS0FBQUssSUFBQSxNQUFBM0csR0FBQXNHLEtBQUFHLElBQUEsR0FBQXpHLEVBQUEsSUFBQXNHLEtBQUFFLElBQUEsR0FBc0VQLE1BQUEsU0FBQWpHLEdBQW1CLFdBQUFBLEVBQUEsTUFBQUEsRUFBQSxHQUFBQSxHQUFBLFNBQUFzRyxLQUFBSyxJQUFBLE1BQUEzRyxFQUFBLElBQUFzRyxLQUFBRyxJQUFBLEdBQUF6RyxFQUFBLEtBQUFzRyxLQUFBRSxJQUFBLEdBQUFGLEtBQUFLLElBQUEsT0FBQTNHLEVBQUEsSUFBQXNHLEtBQUFHLElBQUEsR0FBQXpHLEVBQUEsS0FBQXNHLEtBQUFFLElBQUEsSUFBNklPLE1BQU9oQixHQUFBLFNBQUEvRixHQUFlLE9BQUFBLEtBQUEsUUFBQUEsRUFBQSxVQUErQmdHLElBQUEsU0FBQWhHLEdBQWlCLFFBQUFBLEtBQUEsUUFBQUEsRUFBQSxZQUFrQ2lHLE1BQUEsU0FBQWpHLEdBQW1CLElBQUFPLEVBQUEsVUFBZ0IsT0FBQVAsR0FBQSxLQUFBQSxNQUFBLEVBQUFPLEdBQUFQLEVBQUFPLEdBQUEsUUFBQVAsR0FBQSxHQUFBQSxJQUFBLEVBQUFPLEdBQUFQLEVBQUFPLEdBQUEsS0FBK0R5RyxRQUFTakIsR0FBQSxTQUFBL0YsR0FBZSxTQUFBZSxFQUFBdUMsT0FBQTBELE9BQUFoQixJQUFBLEVBQUFoRyxJQUFzQ2dHLElBQUEsU0FBQWhHLEdBQWlCLE9BQUFBLEVBQUEsY0FBQUEsTUFBQSxlQUFBQSxHQUFBLFVBQUFBLEVBQUEsSUFBQUEsRUFBQSxpQkFBQUEsR0FBQSxXQUFBQSxFQUFBLGNBQUFBLEdBQUEsWUFBQUEsRUFBQSxTQUF5SWlHLE1BQUEsU0FBQWpHLEdBQW1CLE9BQUFBLEVBQUEsTUFBQWUsRUFBQXVDLE9BQUEwRCxPQUFBakIsR0FBQSxFQUFBL0YsR0FBQSxHQUFBZSxFQUFBdUMsT0FBQTBELE9BQUFoQixJQUFBLEVBQUFoRyxFQUFBLFNBQWtGZSxFQUFBMkMsZUFBc0JILE9BQUEsU0FBQXZELEVBQUFPLEdBQXFCLElBQUFxQixFQUFBNUIsRUFBQTZCLE9BQUEsRUFBQS9DLEVBQUE4QyxFQUFBckIsRUFBQVgsRUFBQTBHLEtBQUFXLE1BQUFuSSxHQUFBNEcsRUFBQTNFLEVBQUEyQyxjQUFBd0QsTUFBQTNELE9BQTBFLE9BQUFoRCxFQUFBLEVBQUFtRixFQUFBMUYsRUFBQSxHQUFBQSxFQUFBLEdBQUFsQixHQUFBLEVBQUF5QixFQUFBbUYsRUFBQTFGLEVBQUE0QixHQUFBNUIsRUFBQTRCLEVBQUEsR0FBQUEsRUFBQTlDLEdBQUE0RyxFQUFBMUYsRUFBQUosR0FBQUksRUFBQTRCLEVBQUFoQyxFQUFBLEVBQUFnQyxFQUFBaEMsRUFBQSxHQUFBZCxFQUFBYyxJQUE0RXVILE9BQUEsU0FBQW5ILEVBQUFPLEdBQXNCLFFBQUFxQixFQUFBLEVBQUE5QyxFQUFBa0IsRUFBQTZCLE9BQUEsRUFBQWpDLEVBQUEwRyxLQUFBSyxJQUFBakIsRUFBQTNFLEVBQUEyQyxjQUFBd0QsTUFBQUUsVUFBQXZHLEVBQUEsRUFBOEVBLEdBQUEvQixFQUFLK0IsSUFBQWUsR0FBQWhDLEVBQUEsRUFBQVcsRUFBQXpCLEVBQUErQixHQUFBakIsRUFBQVcsRUFBQU0sR0FBQWIsRUFBQWEsR0FBQTZFLEVBQUE1RyxFQUFBK0IsR0FBcUMsT0FBQWUsR0FBU3lGLFdBQUEsU0FBQXJILEVBQUFPLEdBQTBCLElBQUFxQixFQUFBNUIsRUFBQTZCLE9BQUEsRUFBQS9DLEVBQUE4QyxFQUFBckIsRUFBQVgsRUFBQTBHLEtBQUFXLE1BQUFuSSxHQUFBNEcsRUFBQTNFLEVBQUEyQyxjQUFBd0QsTUFBQUcsV0FBOEUsT0FBQXJILEVBQUEsS0FBQUEsRUFBQTRCLElBQUFyQixFQUFBLElBQUFYLEVBQUEwRyxLQUFBVyxNQUFBbkksRUFBQThDLEdBQUEsRUFBQXJCLEtBQUFtRixFQUFBMUYsR0FBQUosRUFBQSxFQUFBZ0MsTUFBQTVCLEVBQUFKLEdBQUFJLEdBQUFKLEVBQUEsR0FBQWdDLEdBQUE1QixHQUFBSixFQUFBLEdBQUFnQyxHQUFBOUMsRUFBQWMsSUFBQVcsRUFBQSxFQUFBUCxFQUFBLElBQUEwRixFQUFBMUYsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBbEIsR0FBQWtCLEVBQUEsTUFBQU8sRUFBQVAsRUFBQTRCLElBQUE4RCxFQUFBMUYsRUFBQTRCLEdBQUE1QixFQUFBNEIsR0FBQTVCLEVBQUE0QixFQUFBLEdBQUE1QixFQUFBNEIsRUFBQSxHQUFBOUMsRUFBQThDLEdBQUE1QixFQUFBNEIsSUFBQThELEVBQUExRixFQUFBSixJQUFBLEtBQUFJLEVBQUFKLEdBQUFJLEVBQUE0QixFQUFBaEMsRUFBQSxFQUFBZ0MsRUFBQWhDLEVBQUEsR0FBQUksRUFBQTRCLEVBQUFoQyxFQUFBLEVBQUFnQyxFQUFBaEMsRUFBQSxHQUFBZCxFQUFBYyxJQUFpUHNILE9BQVEzRCxPQUFBLFNBQUF2RCxFQUFBTyxFQUFBcUIsR0FBdUIsT0FBQXJCLEVBQUFQLEdBQUE0QixFQUFBNUIsR0FBZ0JvSCxVQUFBLFNBQUFwSCxFQUFBTyxHQUF5QixJQUFBcUIsRUFBQWIsRUFBQTJDLGNBQUF3RCxNQUFBSSxVQUEwQyxPQUFBMUYsRUFBQTVCLEdBQUE0QixFQUFBckIsR0FBQXFCLEVBQUE1QixFQUFBTyxJQUF3QitHLFVBQUEsV0FBc0IsSUFBQXhJLEdBQUEsR0FBVSxnQkFBQWtCLEdBQW1CLElBQUFPLEVBQUEsRUFBUSxHQUFBekIsRUFBQWtCLEdBQUEsT0FBQWxCLEVBQUFrQixHQUFvQixRQUFBNEIsRUFBQTVCLEVBQVksRUFBQTRCLEVBQUlBLElBQUFyQixHQUFBcUIsRUFBUyxPQUFBOUMsRUFBQWtCLEdBQUFPLEdBQXhHLEdBQXVIOEcsV0FBQSxTQUFBckgsRUFBQU8sRUFBQXFCLEVBQUE5QyxFQUFBYyxHQUFrQyxJQUFBOEYsRUFBQSxJQUFBOUQsRUFBQTVCLEdBQUFhLEVBQUEsSUFBQS9CLEVBQUF5QixHQUFBaEIsRUFBQUssSUFBZ0MsU0FBQVcsRUFBQSxFQUFBcUIsRUFBQThELEVBQUE3RSxJQUFBakIsRUFBQUwsS0FBQSxFQUFBZ0IsRUFBQSxFQUFBcUIsRUFBQSxFQUFBOEQsRUFBQTdFLEdBQUF0QixFQUFBbUcsRUFBQTlGLEVBQUFXLEtBQXFELFNBQUFQLEdBQWEsbUJBQUF1SCxRQUFBN0ksRUFBQSxHQUFBNkksVUFBQSxXQUEyRCxPQUFBeEcsU0FBYSxJQUFBbEMsR0FBQSxpQkFBQUQsUUFBQUMsRUFBQUQsUUFBQW1DLE9BQUEsSUFBQWYsTUFBQWUsU0FBckYsTUFBNkx5Ryw0Q0NBMW5RLElBT0FDLEVBQ0FDLEVBUkF0RixFQUFBdkQsRUFBQUQsV0FVQSxTQUFBK0ksSUFDQSxVQUFBQyxNQUFBLG1DQUVBLFNBQUFDLElBQ0EsVUFBQUQsTUFBQSxxQ0FzQkEsU0FBQUUsRUFBQUMsR0FDQSxHQUFBTixJQUFBTyxXQUVBLE9BQUFBLFdBQUFELEVBQUEsR0FHQSxJQUFBTixJQUFBRSxJQUFBRixJQUFBTyxXQUVBLE9BREFQLEVBQUFPLFdBQ0FBLFdBQUFELEVBQUEsR0FFQSxJQUVBLE9BQUFOLEVBQUFNLEVBQUEsR0FDSyxNQUFBbkcsR0FDTCxJQUVBLE9BQUE2RixFQUFBeEksS0FBQSxLQUFBOEksRUFBQSxHQUNTLE1BQUFuRyxHQUVULE9BQUE2RixFQUFBeEksS0FBQWdDLEtBQUE4RyxFQUFBLE1BdkNBLFdBQ0EsSUFFQU4sRUFEQSxtQkFBQU8sV0FDQUEsV0FFQUwsRUFFSyxNQUFBL0YsR0FDTDZGLEVBQUFFLEVBRUEsSUFFQUQsRUFEQSxtQkFBQU8sYUFDQUEsYUFFQUosRUFFSyxNQUFBakcsR0FDTDhGLEVBQUFHLEdBakJBLEdBd0VBLElBRUFLLEVBRkFDLEtBQ0FDLEdBQUEsRUFFQUMsR0FBQSxFQUVBLFNBQUFDLElBQ0FGLEdBQUFGLElBR0FFLEdBQUEsRUFDQUYsRUFBQXJHLE9BQ0FzRyxFQUFBRCxFQUFBekQsT0FBQTBELEdBRUFFLEdBQUEsRUFFQUYsRUFBQXRHLFFBQ0EwRyxLQUlBLFNBQUFBLElBQ0EsSUFBQUgsRUFBQSxDQUdBLElBQUFJLEVBQUFWLEVBQUFRLEdBQ0FGLEdBQUEsRUFHQSxJQURBLElBQUFLLEVBQUFOLEVBQUF0RyxPQUNBNEcsR0FBQSxDQUdBLElBRkFQLEVBQUFDLEVBQ0FBLE9BQ0FFLEVBQUFJLEdBQ0FQLEdBQ0FBLEVBQUFHLEdBQUFLLE1BR0FMLEdBQUEsRUFDQUksRUFBQU4sRUFBQXRHLE9BRUFxRyxFQUFBLEtBQ0FFLEdBQUEsRUFuRUEsU0FBQU8sR0FDQSxHQUFBakIsSUFBQU8sYUFFQSxPQUFBQSxhQUFBVSxHQUdBLElBQUFqQixJQUFBRyxJQUFBSCxJQUFBTyxhQUVBLE9BREFQLEVBQUFPLGFBQ0FBLGFBQUFVLEdBRUEsSUFFQWpCLEVBQUFpQixHQUNLLE1BQUEvRyxHQUNMLElBRUEsT0FBQThGLEVBQUF6SSxLQUFBLEtBQUEwSixHQUNTLE1BQUEvRyxHQUdULE9BQUE4RixFQUFBekksS0FBQWdDLEtBQUEwSCxLQWdEQUMsQ0FBQUosSUFpQkEsU0FBQUssRUFBQWQsRUFBQWUsR0FDQTdILEtBQUE4RyxNQUNBOUcsS0FBQTZILFFBWUEsU0FBQUMsS0E1QkEzRyxFQUFBNEcsU0FBQSxTQUFBakIsR0FDQSxJQUFBa0IsRUFBQSxJQUFBekUsTUFBQWEsVUFBQXhELE9BQUEsR0FDQSxHQUFBd0QsVUFBQXhELE9BQUEsRUFDQSxRQUFBL0MsRUFBQSxFQUF1QkEsRUFBQXVHLFVBQUF4RCxPQUFzQi9DLElBQzdDbUssRUFBQW5LLEVBQUEsR0FBQXVHLFVBQUF2RyxHQUdBcUosRUFBQWUsS0FBQSxJQUFBTCxFQUFBZCxFQUFBa0IsSUFDQSxJQUFBZCxFQUFBdEcsUUFBQXVHLEdBQ0FOLEVBQUFTLElBU0FNLEVBQUFuSSxVQUFBZ0ksSUFBQSxXQUNBekgsS0FBQThHLElBQUFvQixNQUFBLEtBQUFsSSxLQUFBNkgsUUFFQTFHLEVBQUFnSCxNQUFBLFVBQ0FoSCxFQUFBaUgsU0FBQSxFQUNBakgsRUFBQWtILE9BQ0FsSCxFQUFBbUgsUUFDQW5ILEVBQUFvSCxRQUFBLEdBQ0FwSCxFQUFBcUgsWUFJQXJILEVBQUFzSCxHQUFBWCxFQUNBM0csRUFBQXVILFlBQUFaLEVBQ0EzRyxFQUFBd0gsS0FBQWIsRUFDQTNHLEVBQUF5SCxJQUFBZCxFQUNBM0csRUFBQTBILGVBQUFmLEVBQ0EzRyxFQUFBMkgsbUJBQUFoQixFQUNBM0csRUFBQTRILEtBQUFqQixFQUNBM0csRUFBQTZILGdCQUFBbEIsRUFDQTNHLEVBQUE4SCxvQkFBQW5CLEVBRUEzRyxFQUFBK0gsVUFBQSxTQUFBOUssR0FBcUMsVUFFckMrQyxFQUFBZ0ksUUFBQSxTQUFBL0ssR0FDQSxVQUFBdUksTUFBQSxxQ0FHQXhGLEVBQUFpSSxJQUFBLFdBQTJCLFdBQzNCakksRUFBQWtJLE1BQUEsU0FBQUMsR0FDQSxVQUFBM0MsTUFBQSxtQ0FFQXhGLEVBQUFvSSxNQUFBLFdBQTRCLHlCQ3ZMNUIzTCxFQUFBRCxRQUFBLFNBQUE2TCxHQUNBLElBQUFBLEVBQUFDLGdCQUFBLENBQ0EsSUFBQTdMLEVBQUFXLE9BQUFZLE9BQUFxSyxHQUVBNUwsRUFBQThMLFdBQUE5TCxFQUFBOEwsYUFDQW5MLE9BQUFDLGVBQUFaLEVBQUEsVUFDQWEsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWQsRUFBQUUsS0FHQVMsT0FBQUMsZUFBQVosRUFBQSxNQUNBYSxZQUFBLEVBQ0FDLElBQUEsV0FDQSxPQUFBZCxFQUFBQyxLQUdBVSxPQUFBQyxlQUFBWixFQUFBLFdBQ0FhLFlBQUEsSUFFQWIsRUFBQTZMLGdCQUFBLEVBRUEsT0FBQTdMLG1CQ3RCQSxTQUFBK0wsR0FDQS9MLEVBQUFELFFBQUFnTSxnRENvR0EsU0FBQUMsaUJBbkdBckQsSUFBQXNELE9BQUFDLFVBRUFELE9BQUFDLFFBQUF6RSxLQUFBSyxJQUFBLGFBSUFhLElBQUFzRCxPQUFBRSxZQUtBRixPQUFBRSxVQUFBLFNBQUFqTCxHQUVBLHVCQUFBQSxHQUFBNkYsU0FBQTdGLElBQUF1RyxLQUFBVyxNQUFBbEgsY0FRQXlILElBQUFsQixLQUFBMkUsT0FJQTNFLEtBQUEyRSxLQUFBLFNBQUFDLEdBRUEsT0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLElBTUEsU0FBQUMsU0FBQXpLLFlBQUEsR0FLQWxCLE9BQUFDLGVBQUEwTCxTQUFBekssVUFBQSxRQUVBZixJQUFBLFdBRUEsT0FBQXNCLEtBQUFtSyxXQUFBQyxNQUFBLHdDQVFBN0QsSUFBQWhJLE9BQUE4TCxTQU9BOUwsT0FBQThMLE9BQUEsU0FBQUMsR0FFQSxRQUFBL0QsSUFBQStELEdBQUEsT0FBQUEsRUFFQSxVQUFBQyxVQUFBLDhDQU1BLElBRkEsSUFBQUMsRUFBQWpNLE9BQUErTCxHQUVBRyxFQUFBLEVBQXVCQSxFQUFBckcsVUFBQXhELE9BQTBCNkosSUFBQSxDQUVqRCxJQUFBQyxFQUFBdEcsVUFBQXFHLEdBRUEsUUFBQWxFLElBQUFtRSxHQUFBLE9BQUFBLEVBRUEsUUFBQUMsS0FBQUQsRUFFQW5NLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQTBNLEVBQUFDLEtBRUFILEVBQUFHLEdBQUFELEVBQUFDLElBVUEsT0FBQUgsSUFjQWpNLE9BQUE4TCxPQUFBVCxFQUFBbkssV0FFQW1MLGlCQUFBLFNBQUFDLEVBQUFDLFFBRUF2RSxJQUFBdkcsS0FBQStLLGFBQUEvSyxLQUFBK0ssZUFFQSxJQUFBN0IsRUFBQWxKLEtBQUErSyxnQkFFQXhFLElBQUEyQyxFQUFBMkIsS0FFQTNCLEVBQUEyQixRQUlBLElBQUEzQixFQUFBMkIsR0FBQUcsUUFBQUYsSUFFQTVCLEVBQUEyQixHQUFBNUMsS0FBQTZDLElBTUFHLGlCQUFBLFNBQUFKLEVBQUFDLEdBRUEsUUFBQXZFLElBQUF2RyxLQUFBK0ssV0FBQSxTQUVBLElBQUE3QixFQUFBbEosS0FBQStLLFdBRUEsWUFBQXhFLElBQUEyQyxFQUFBMkIsS0FBQSxJQUFBM0IsRUFBQTJCLEdBQUFHLFFBQUFGLElBSUFJLG9CQUFBLFNBQUFMLEVBQUFDLEdBRUEsUUFBQXZFLElBQUF2RyxLQUFBK0ssV0FBQSxDQUVBLElBQ0FJLEVBREFuTCxLQUFBK0ssV0FDQUYsR0FFQSxRQUFBdEUsSUFBQTRFLEVBQUEsQ0FFQSxJQUFBVixFQUFBVSxFQUFBSCxRQUFBRixJQUVBLElBQUFMLEdBRUFVLEVBQUFDLE9BQUFYLEVBQUEsTUFRQVksY0FBQSxTQUFBQyxHQUVBLFFBQUEvRSxJQUFBdkcsS0FBQStLLFdBQUEsQ0FFQSxJQUNBSSxFQURBbkwsS0FBQStLLFdBQ0FPLEVBQUFULE1BRUEsUUFBQXRFLElBQUE0RSxFQUFBLENBRUFHLEVBQUFoQixPQUFBdEssS0FJQSxJQUZBLElBQUE2SCxFQUFBc0QsRUFBQUksTUFBQSxHQUVBMU4sRUFBQSxFQUFBQyxFQUFBK0osRUFBQWpILE9BQXFDL0MsRUFBQUMsRUFBT0QsSUFFNUNnSyxFQUFBaEssR0FBQUcsS0FBQWdDLEtBQUFzTCxRQVVBLElBb25FQUUsRUE2WEFDLEVBai9FQUMsRUFBQSxNQUNBQyxHQUFhQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsTUFBQSxFQUFBQyxPQUFBLEVBQUFDLE1BQUEsRUFBQUMsSUFBQSxHQUNiQyxHQUFhSCxPQUFBLEVBQUFFLElBQUEsRUFBQUUsVUFBQSxFQUFBQyxhQUFBLEdBQ2JDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBS0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUdBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUdBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUVBQyxHQUFBLEtBRUFDLEdBQUEsS0FDQUMsR0FBQSxLQUVBQyxHQUFBLEtBRUFDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUVBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEs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QyxZQUFBLFFBQ0FDLGVBQUEsUUFBQUMsV0FBQSxTQUFBQyxXQUFBLFNBQUFDLFFBQUEsUUFBQUMsV0FBQSxTQUFBQyxhQUFBLFFBQ0FDLGNBQUEsUUFBQUMsY0FBQSxRQUFBQyxjQUFBLFFBQUFDLGNBQUEsTUFBQUMsV0FBQSxRQUNBQyxTQUFBLFNBQUFDLFlBQUEsTUFBQUMsUUFBQSxRQUFBQyxRQUFBLFFBQUFDLFdBQUEsUUFBQUMsVUFBQSxTQUNBQyxZQUFBLFNBQUFDLFlBQUEsUUFBQUMsUUFBQSxTQUFBQyxVQUFBLFNBQUFDLFdBQUEsU0FBQUMsS0FBQSxTQUNBQyxVQUFBLFNBQUFDLEtBQUEsUUFBQUMsTUFBQSxNQUFBQyxZQUFBLFNBQUFDLEtBQUEsUUFBQUMsU0FBQSxTQUFBQyxRQUFBLFNBQ0FDLFVBQUEsU0FBQUMsT0FBQSxRQUFBQyxNQUFBLFNBQUFDLE1BQUEsU0FBQUMsU0FBQSxTQUFBQyxjQUFBLFNBQUFDLFVBQUEsUUFDQUMsYUFBQSxTQUFBQyxVQUFBLFNBQUFDLFdBQUEsU0FBQUMsVUFBQSxTQUFBQyxxQkFBQSxTQUFBQyxVQUFBLFNBQ0FDLFdBQUEsUUFBQUMsVUFBQSxTQUFBQyxVQUFBLFNBQUFDLFlBQUEsU0FBQUMsY0FBQSxRQUFBQyxhQUFBLFFBQ0FDLGVBQUEsUUFBQUMsZUFBQSxRQUFBQyxlQUFBLFNBQUFDLFlBQUEsU0FBQUMsS0FBQSxNQUFBQyxVQUFBLFFBQ0FDLE1BQUEsU0FBQUMsUUFBQSxTQUFBQyxPQUFBLFFBQUFDLGlCQUFBLFFBQUFDLFdBQUEsSUFBQUMsYUFBQSxTQUNBQyxhQUFBLFFBQUFDLGVBQUEsUUFBQUMsZ0JBQUEsUUFBQUMsa0JBQUEsTUFBQUMsZ0JBQUEsUUFDQUMsZ0JBQUEsU0FBQUMsYUFBQSxRQUFBQyxVQUFBLFNBQUFDLFVBQUEsU0FBQUMsU0FBQSxTQUFBQyxZQUFBLFNBQ0FDLEtBQUEsSUFBQUMsUUFBQSxTQUFBQyxNQUFBLFFBQUFDLFVBQUEsUUFBQUMsT0FBQSxTQUFBQyxVQUFBLFNBQUFDLE9BQUEsU0FDQUMsY0FBQSxTQUFBQyxV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QUFBcE4sRUFBQXlMLEVBQUEsSUFFQWdNLFVBQUFzc0osSUFFQWwxSixJQUFBazFKLEdBQUFyOUksVUFBQXpXLFlBSUE2akMsRUFGQSxJQUFBeTZFLEdBQUF3MUMsR0FBQXI5SSxTQUFBdU0sR0FFQXdxRyxpQkFBQTJtQyxJQUFBLEdBRUF0d0gsRUFBQW45QyxPQUFBLEdBRUFtOUMsRUFBQSxLQTJCQSxTQUFBd3ZGLElBQ0E3MkUsc0JBQUE2MkUsR0FDQWhtRixHQUFBSyxPQUFBcW1ILEdBQUFELElBQ0FHLEdBQUEvMUksU0FBQWlvQixTQUFBbVcsS0FBQTEzRCxPQUFBLEtBQ0EsSUFBQWt2QyxFQUFBeWpGLEdBQUFWLFdBQ0FxOUMsR0FBQXh0SyxRQUNBd3RLLEdBQUEvdEssSUFBQTRoRCxJQUNBQSxFQUFBdmhELE9BQUFzdEMsS0FHQW9oSSxHQUFBLEVBQUExdUssU0Fsb0JBNnNJIiwiZmlsZSI6InNob3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNCk7XG4iLCIvLyB0d2Vlbi5qcyAxNy4zLjUgLSBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qc1xudmFyIF9Hcm91cD1mdW5jdGlvbigpe3RoaXMuX3R3ZWVucz17fSx0aGlzLl90d2VlbnNBZGRlZER1cmluZ1VwZGF0ZT17fX07X0dyb3VwLnByb3RvdHlwZT17Z2V0QWxsOmZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3R3ZWVucykubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl90d2VlbnNbdF19LmJpbmQodGhpcykpfSxyZW1vdmVBbGw6ZnVuY3Rpb24oKXt0aGlzLl90d2VlbnM9e319LGFkZDpmdW5jdGlvbih0KXt0aGlzLl90d2VlbnNbdC5nZXRJZCgpXT10LHRoaXMuX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlW3QuZ2V0SWQoKV09dH0scmVtb3ZlOmZ1bmN0aW9uKHQpe2RlbGV0ZSB0aGlzLl90d2VlbnNbdC5nZXRJZCgpXSxkZWxldGUgdGhpcy5fdHdlZW5zQWRkZWREdXJpbmdVcGRhdGVbdC5nZXRJZCgpXX0sdXBkYXRlOmZ1bmN0aW9uKHQsbil7dmFyIGU9T2JqZWN0LmtleXModGhpcy5fdHdlZW5zKTtpZigwPT09ZS5sZW5ndGgpcmV0dXJuITE7Zm9yKHQ9dm9pZCAwIT09dD90OlRXRUVOLm5vdygpOzA8ZS5sZW5ndGg7KXt0aGlzLl90d2VlbnNBZGRlZER1cmluZ1VwZGF0ZT17fTtmb3IodmFyIGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIHI9dGhpcy5fdHdlZW5zW2VbaV1dO3ImJiExPT09ci51cGRhdGUodCkmJihyLl9pc1BsYXlpbmc9ITEsbnx8ZGVsZXRlIHRoaXMuX3R3ZWVuc1tlW2ldXSl9ZT1PYmplY3Qua2V5cyh0aGlzLl90d2VlbnNBZGRlZER1cmluZ1VwZGF0ZSl9cmV0dXJuITB9fTt2YXIgVFdFRU49bmV3IF9Hcm91cDtUV0VFTi5Hcm91cD1fR3JvdXAsVFdFRU4uX25leHRJZD0wLFRXRUVOLm5leHRJZD1mdW5jdGlvbigpe3JldHVybiBUV0VFTi5fbmV4dElkKyt9LFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzZWxmJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmcHJvY2Vzcy5ocnRpbWU/VFdFRU4ubm93PWZ1bmN0aW9uKCl7dmFyIHQ9cHJvY2Vzcy5ocnRpbWUoKTtyZXR1cm4gMWUzKnRbMF0rdFsxXS8xZTZ9OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZ2b2lkIDAhPT1zZWxmLnBlcmZvcm1hbmNlJiZ2b2lkIDAhPT1zZWxmLnBlcmZvcm1hbmNlLm5vdz9UV0VFTi5ub3c9c2VsZi5wZXJmb3JtYW5jZS5ub3cuYmluZChzZWxmLnBlcmZvcm1hbmNlKTp2b2lkIDAhPT1EYXRlLm5vdz9UV0VFTi5ub3c9RGF0ZS5ub3c6VFdFRU4ubm93PWZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9LFRXRUVOLlR3ZWVuPWZ1bmN0aW9uKHQsbil7dGhpcy5fb2JqZWN0PXQsdGhpcy5fdmFsdWVzU3RhcnQ9e30sdGhpcy5fdmFsdWVzRW5kPXt9LHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0PXt9LHRoaXMuX2R1cmF0aW9uPTFlMyx0aGlzLl9yZXBlYXQ9MCx0aGlzLl9yZXBlYXREZWxheVRpbWU9dm9pZCAwLHRoaXMuX3lveW89ITEsdGhpcy5faXNQbGF5aW5nPSExLHRoaXMuX3JldmVyc2VkPSExLHRoaXMuX2RlbGF5VGltZT0wLHRoaXMuX3N0YXJ0VGltZT1udWxsLHRoaXMuX2Vhc2luZ0Z1bmN0aW9uPVRXRUVOLkVhc2luZy5MaW5lYXIuTm9uZSx0aGlzLl9pbnRlcnBvbGF0aW9uRnVuY3Rpb249VFdFRU4uSW50ZXJwb2xhdGlvbi5MaW5lYXIsdGhpcy5fY2hhaW5lZFR3ZWVucz1bXSx0aGlzLl9vblN0YXJ0Q2FsbGJhY2s9bnVsbCx0aGlzLl9vblN0YXJ0Q2FsbGJhY2tGaXJlZD0hMSx0aGlzLl9vblVwZGF0ZUNhbGxiYWNrPW51bGwsdGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrPW51bGwsdGhpcy5fb25TdG9wQ2FsbGJhY2s9bnVsbCx0aGlzLl9ncm91cD1ufHxUV0VFTix0aGlzLl9pZD1UV0VFTi5uZXh0SWQoKX0sVFdFRU4uVHdlZW4ucHJvdG90eXBlPXtnZXRJZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pZH0saXNQbGF5aW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzUGxheWluZ30sdG86ZnVuY3Rpb24odCxuKXtyZXR1cm4gdGhpcy5fdmFsdWVzRW5kPU9iamVjdC5jcmVhdGUodCksdm9pZCAwIT09biYmKHRoaXMuX2R1cmF0aW9uPW4pLHRoaXN9LGR1cmF0aW9uOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9kdXJhdGlvbj10LHRoaXN9LHN0YXJ0OmZ1bmN0aW9uKHQpe2Zvcih2YXIgbiBpbiB0aGlzLl9ncm91cC5hZGQodGhpcyksdGhpcy5faXNQbGF5aW5nPSEwLHRoaXMuX29uU3RhcnRDYWxsYmFja0ZpcmVkPSExLHRoaXMuX3N0YXJ0VGltZT12b2lkIDAhPT10P1wic3RyaW5nXCI9PXR5cGVvZiB0P1RXRUVOLm5vdygpK3BhcnNlRmxvYXQodCk6dDpUV0VFTi5ub3coKSx0aGlzLl9zdGFydFRpbWUrPXRoaXMuX2RlbGF5VGltZSx0aGlzLl92YWx1ZXNFbmQpe2lmKHRoaXMuX3ZhbHVlc0VuZFtuXWluc3RhbmNlb2YgQXJyYXkpe2lmKDA9PT10aGlzLl92YWx1ZXNFbmRbbl0ubGVuZ3RoKWNvbnRpbnVlO3RoaXMuX3ZhbHVlc0VuZFtuXT1bdGhpcy5fb2JqZWN0W25dXS5jb25jYXQodGhpcy5fdmFsdWVzRW5kW25dKX12b2lkIDAhPT10aGlzLl9vYmplY3Rbbl0mJih0aGlzLl92YWx1ZXNTdGFydFtuXT10aGlzLl9vYmplY3Rbbl0sdGhpcy5fdmFsdWVzU3RhcnRbbl1pbnN0YW5jZW9mIEFycmF5PT0hMSYmKHRoaXMuX3ZhbHVlc1N0YXJ0W25dKj0xKSx0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtuXT10aGlzLl92YWx1ZXNTdGFydFtuXXx8MCl9cmV0dXJuIHRoaXN9LHN0b3A6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNQbGF5aW5nJiYodGhpcy5fZ3JvdXAucmVtb3ZlKHRoaXMpLHRoaXMuX2lzUGxheWluZz0hMSxudWxsIT09dGhpcy5fb25TdG9wQ2FsbGJhY2smJnRoaXMuX29uU3RvcENhbGxiYWNrKHRoaXMuX29iamVjdCksdGhpcy5zdG9wQ2hhaW5lZFR3ZWVucygpKSx0aGlzfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51cGRhdGUoMS8wKSx0aGlzfSxzdG9wQ2hhaW5lZFR3ZWVuczpmdW5jdGlvbigpe2Zvcih2YXIgdD0wLG49dGhpcy5fY2hhaW5lZFR3ZWVucy5sZW5ndGg7dDxuO3QrKyl0aGlzLl9jaGFpbmVkVHdlZW5zW3RdLnN0b3AoKX0sZ3JvdXA6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2dyb3VwPXQsdGhpc30sZGVsYXk6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2RlbGF5VGltZT10LHRoaXN9LHJlcGVhdDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcmVwZWF0PXQsdGhpc30scmVwZWF0RGVsYXk6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX3JlcGVhdERlbGF5VGltZT10LHRoaXN9LHlveW86ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX3lveW89dCx0aGlzfSxlYXNpbmc6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2Vhc2luZ0Z1bmN0aW9uPXQsdGhpc30saW50ZXJwb2xhdGlvbjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5faW50ZXJwb2xhdGlvbkZ1bmN0aW9uPXQsdGhpc30sY2hhaW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hhaW5lZFR3ZWVucz1hcmd1bWVudHMsdGhpc30sb25TdGFydDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fb25TdGFydENhbGxiYWNrPXQsdGhpc30sb25VcGRhdGU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX29uVXBkYXRlQ2FsbGJhY2s9dCx0aGlzfSxvbkNvbXBsZXRlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9vbkNvbXBsZXRlQ2FsbGJhY2s9dCx0aGlzfSxvblN0b3A6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX29uU3RvcENhbGxiYWNrPXQsdGhpc30sdXBkYXRlOmZ1bmN0aW9uKHQpe3ZhciBuLGUsaTtpZih0PHRoaXMuX3N0YXJ0VGltZSlyZXR1cm4hMDtmb3IobiBpbiExPT09dGhpcy5fb25TdGFydENhbGxiYWNrRmlyZWQmJihudWxsIT09dGhpcy5fb25TdGFydENhbGxiYWNrJiZ0aGlzLl9vblN0YXJ0Q2FsbGJhY2sodGhpcy5fb2JqZWN0KSx0aGlzLl9vblN0YXJ0Q2FsbGJhY2tGaXJlZD0hMCksZT0odC10aGlzLl9zdGFydFRpbWUpL3RoaXMuX2R1cmF0aW9uLGU9MD09PXRoaXMuX2R1cmF0aW9ufHwxPGU/MTplLGk9dGhpcy5fZWFzaW5nRnVuY3Rpb24oZSksdGhpcy5fdmFsdWVzRW5kKWlmKHZvaWQgMCE9PXRoaXMuX3ZhbHVlc1N0YXJ0W25dKXt2YXIgcj10aGlzLl92YWx1ZXNTdGFydFtuXXx8MCxhPXRoaXMuX3ZhbHVlc0VuZFtuXTthIGluc3RhbmNlb2YgQXJyYXk/dGhpcy5fb2JqZWN0W25dPXRoaXMuX2ludGVycG9sYXRpb25GdW5jdGlvbihhLGkpOihcInN0cmluZ1wiPT10eXBlb2YgYSYmKGE9XCIrXCI9PT1hLmNoYXJBdCgwKXx8XCItXCI9PT1hLmNoYXJBdCgwKT9yK3BhcnNlRmxvYXQoYSk6cGFyc2VGbG9hdChhKSksXCJudW1iZXJcIj09dHlwZW9mIGEmJih0aGlzLl9vYmplY3Rbbl09cisoYS1yKSppKSl9aWYobnVsbCE9PXRoaXMuX29uVXBkYXRlQ2FsbGJhY2smJnRoaXMuX29uVXBkYXRlQ2FsbGJhY2sodGhpcy5fb2JqZWN0KSwxIT09ZSlyZXR1cm4hMDtpZigwPHRoaXMuX3JlcGVhdCl7Zm9yKG4gaW4gaXNGaW5pdGUodGhpcy5fcmVwZWF0KSYmdGhpcy5fcmVwZWF0LS0sdGhpcy5fdmFsdWVzU3RhcnRSZXBlYXQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0aGlzLl92YWx1ZXNFbmRbbl0mJih0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtuXT10aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtuXStwYXJzZUZsb2F0KHRoaXMuX3ZhbHVlc0VuZFtuXSkpLHRoaXMuX3lveW8pe3ZhciBzPXRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W25dO3RoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W25dPXRoaXMuX3ZhbHVlc0VuZFtuXSx0aGlzLl92YWx1ZXNFbmRbbl09c310aGlzLl92YWx1ZXNTdGFydFtuXT10aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtuXX1yZXR1cm4gdGhpcy5feW95byYmKHRoaXMuX3JldmVyc2VkPSF0aGlzLl9yZXZlcnNlZCksdm9pZCAwIT09dGhpcy5fcmVwZWF0RGVsYXlUaW1lP3RoaXMuX3N0YXJ0VGltZT10K3RoaXMuX3JlcGVhdERlbGF5VGltZTp0aGlzLl9zdGFydFRpbWU9dCt0aGlzLl9kZWxheVRpbWUsITB9bnVsbCE9PXRoaXMuX29uQ29tcGxldGVDYWxsYmFjayYmdGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrKHRoaXMuX29iamVjdCk7Zm9yKHZhciBvPTAsdT10aGlzLl9jaGFpbmVkVHdlZW5zLmxlbmd0aDtvPHU7bysrKXRoaXMuX2NoYWluZWRUd2VlbnNbb10uc3RhcnQodGhpcy5fc3RhcnRUaW1lK3RoaXMuX2R1cmF0aW9uKTtyZXR1cm4hMX19LFRXRUVOLkVhc2luZz17TGluZWFyOntOb25lOmZ1bmN0aW9uKHQpe3JldHVybiB0fX0sUXVhZHJhdGljOntJbjpmdW5jdGlvbih0KXtyZXR1cm4gdCp0fSxPdXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQqKDItdCl9LEluT3V0OmZ1bmN0aW9uKHQpe3JldHVybih0Kj0yKTwxPy41KnQqdDotLjUqKC0tdCoodC0yKS0xKX19LEN1YmljOntJbjpmdW5jdGlvbih0KXtyZXR1cm4gdCp0KnR9LE91dDpmdW5jdGlvbih0KXtyZXR1cm4tLXQqdCp0KzF9LEluT3V0OmZ1bmN0aW9uKHQpe3JldHVybih0Kj0yKTwxPy41KnQqdCp0Oi41KigodC09MikqdCp0KzIpfX0sUXVhcnRpYzp7SW46ZnVuY3Rpb24odCl7cmV0dXJuIHQqdCp0KnR9LE91dDpmdW5jdGlvbih0KXtyZXR1cm4gMS0gLS10KnQqdCp0fSxJbk91dDpmdW5jdGlvbih0KXtyZXR1cm4odCo9Mik8MT8uNSp0KnQqdCp0Oi0uNSooKHQtPTIpKnQqdCp0LTIpfX0sUXVpbnRpYzp7SW46ZnVuY3Rpb24odCl7cmV0dXJuIHQqdCp0KnQqdH0sT3V0OmZ1bmN0aW9uKHQpe3JldHVybi0tdCp0KnQqdCp0KzF9LEluT3V0OmZ1bmN0aW9uKHQpe3JldHVybih0Kj0yKTwxPy41KnQqdCp0KnQqdDouNSooKHQtPTIpKnQqdCp0KnQrMil9fSxTaW51c29pZGFsOntJbjpmdW5jdGlvbih0KXtyZXR1cm4gMS1NYXRoLmNvcyh0Kk1hdGguUEkvMil9LE91dDpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5zaW4odCpNYXRoLlBJLzIpfSxJbk91dDpmdW5jdGlvbih0KXtyZXR1cm4uNSooMS1NYXRoLmNvcyhNYXRoLlBJKnQpKX19LEV4cG9uZW50aWFsOntJbjpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/MDpNYXRoLnBvdygxMDI0LHQtMSl9LE91dDpmdW5jdGlvbih0KXtyZXR1cm4gMT09PXQ/MToxLU1hdGgucG93KDIsLTEwKnQpfSxJbk91dDpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/MDoxPT09dD8xOih0Kj0yKTwxPy41Kk1hdGgucG93KDEwMjQsdC0xKTouNSooMi1NYXRoLnBvdygyLC0xMCoodC0xKSkpfX0sQ2lyY3VsYXI6e0luOmZ1bmN0aW9uKHQpe3JldHVybiAxLU1hdGguc3FydCgxLXQqdCl9LE91dDpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5zcXJ0KDEtIC0tdCp0KX0sSW5PdXQ6ZnVuY3Rpb24odCl7cmV0dXJuKHQqPTIpPDE/LS41KihNYXRoLnNxcnQoMS10KnQpLTEpOi41KihNYXRoLnNxcnQoMS0odC09MikqdCkrMSl9fSxFbGFzdGljOntJbjpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/MDoxPT09dD8xOi1NYXRoLnBvdygyLDEwKih0LTEpKSpNYXRoLnNpbig1Kih0LTEuMSkqTWF0aC5QSSl9LE91dDpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/MDoxPT09dD8xOk1hdGgucG93KDIsLTEwKnQpKk1hdGguc2luKDUqKHQtLjEpKk1hdGguUEkpKzF9LEluT3V0OmZ1bmN0aW9uKHQpe3JldHVybiAwPT09dD8wOjE9PT10PzE6KHQqPTIpPDE/LS41Kk1hdGgucG93KDIsMTAqKHQtMSkpKk1hdGguc2luKDUqKHQtMS4xKSpNYXRoLlBJKTouNSpNYXRoLnBvdygyLC0xMCoodC0xKSkqTWF0aC5zaW4oNSoodC0xLjEpKk1hdGguUEkpKzF9fSxCYWNrOntJbjpmdW5jdGlvbih0KXtyZXR1cm4gdCp0KigyLjcwMTU4KnQtMS43MDE1OCl9LE91dDpmdW5jdGlvbih0KXtyZXR1cm4tLXQqdCooMi43MDE1OCp0KzEuNzAxNTgpKzF9LEluT3V0OmZ1bmN0aW9uKHQpe3ZhciBuPTIuNTk0OTA5NTtyZXR1cm4odCo9Mik8MT90KnQqKCgxK24pKnQtbikqLjU6LjUqKCh0LT0yKSp0KigoMStuKSp0K24pKzIpfX0sQm91bmNlOntJbjpmdW5jdGlvbih0KXtyZXR1cm4gMS1UV0VFTi5FYXNpbmcuQm91bmNlLk91dCgxLXQpfSxPdXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MS8yLjc1PzcuNTYyNSp0KnQ6dDwyLzIuNzU/Ny41NjI1Kih0LT0xLjUvMi43NSkqdCsuNzU6dDwyLjUvMi43NT83LjU2MjUqKHQtPTIuMjUvMi43NSkqdCsuOTM3NTo3LjU2MjUqKHQtPTIuNjI1LzIuNzUpKnQrLjk4NDM3NX0sSW5PdXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQ8LjU/LjUqVFdFRU4uRWFzaW5nLkJvdW5jZS5JbigyKnQpOi41KlRXRUVOLkVhc2luZy5Cb3VuY2UuT3V0KDIqdC0xKSsuNX19fSxUV0VFTi5JbnRlcnBvbGF0aW9uPXtMaW5lYXI6ZnVuY3Rpb24odCxuKXt2YXIgZT10Lmxlbmd0aC0xLGk9ZSpuLHI9TWF0aC5mbG9vcihpKSxhPVRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuTGluZWFyO3JldHVybiBuPDA/YSh0WzBdLHRbMV0saSk6MTxuP2EodFtlXSx0W2UtMV0sZS1pKTphKHRbcl0sdFtlPHIrMT9lOnIrMV0saS1yKX0sQmV6aWVyOmZ1bmN0aW9uKHQsbil7Zm9yKHZhciBlPTAsaT10Lmxlbmd0aC0xLHI9TWF0aC5wb3csYT1UV0VFTi5JbnRlcnBvbGF0aW9uLlV0aWxzLkJlcm5zdGVpbixzPTA7czw9aTtzKyspZSs9cigxLW4saS1zKSpyKG4scykqdFtzXSphKGkscyk7cmV0dXJuIGV9LENhdG11bGxSb206ZnVuY3Rpb24odCxuKXt2YXIgZT10Lmxlbmd0aC0xLGk9ZSpuLHI9TWF0aC5mbG9vcihpKSxhPVRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuQ2F0bXVsbFJvbTtyZXR1cm4gdFswXT09PXRbZV0/KG48MCYmKHI9TWF0aC5mbG9vcihpPWUqKDErbikpKSxhKHRbKHItMStlKSVlXSx0W3JdLHRbKHIrMSklZV0sdFsocisyKSVlXSxpLXIpKTpuPDA/dFswXS0oYSh0WzBdLHRbMF0sdFsxXSx0WzFdLC1pKS10WzBdKToxPG4/dFtlXS0oYSh0W2VdLHRbZV0sdFtlLTFdLHRbZS0xXSxpLWUpLXRbZV0pOmEodFtyP3ItMTowXSx0W3JdLHRbZTxyKzE/ZTpyKzFdLHRbZTxyKzI/ZTpyKzJdLGktcil9LFV0aWxzOntMaW5lYXI6ZnVuY3Rpb24odCxuLGUpe3JldHVybihuLXQpKmUrdH0sQmVybnN0ZWluOmZ1bmN0aW9uKHQsbil7dmFyIGU9VFdFRU4uSW50ZXJwb2xhdGlvbi5VdGlscy5GYWN0b3JpYWw7cmV0dXJuIGUodCkvZShuKS9lKHQtbil9LEZhY3RvcmlhbDpmdW5jdGlvbigpe3ZhciBpPVsxXTtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIG49MTtpZihpW3RdKXJldHVybiBpW3RdO2Zvcih2YXIgZT10OzE8ZTtlLS0pbio9ZTtyZXR1cm4gaVt0XT1ufX0oKSxDYXRtdWxsUm9tOmZ1bmN0aW9uKHQsbixlLGkscil7dmFyIGE9LjUqKGUtdCkscz0uNSooaS1uKSxvPXIqcjtyZXR1cm4oMipuLTIqZSthK3MpKihyKm8pKygtMypuKzMqZS0yKmEtcykqbythKnIrbn19fSxmdW5jdGlvbih0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGZ1bmN0aW9uKCl7cmV0dXJuIFRXRUVOfSk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9VFdFRU46dm9pZCAwIT09dCYmKHQuVFdFRU49VFdFRU4pfSh0aGlzKTtcbmV4cG9ydCB7VFdFRU59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xuIiwiLy8gUG9seWZpbGxzXG5cbmlmICggTnVtYmVyLkVQU0lMT04gPT09IHVuZGVmaW5lZCApIHtcblxuXHROdW1iZXIuRVBTSUxPTiA9IE1hdGgucG93KCAyLCAtIDUyICk7XG5cbn1cblxuaWYgKCBOdW1iZXIuaXNJbnRlZ2VyID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gTWlzc2luZyBpbiBJRVxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvaXNJbnRlZ2VyXG5cblx0TnVtYmVyLmlzSW50ZWdlciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSggdmFsdWUgKSAmJiBNYXRoLmZsb29yKCB2YWx1ZSApID09PSB2YWx1ZTtcblxuXHR9O1xuXG59XG5cbi8vXG5cbmlmICggTWF0aC5zaWduID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zaWduXG5cblx0TWF0aC5zaWduID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdFx0cmV0dXJuICggeCA8IDAgKSA/IC0gMSA6ICggeCA+IDAgKSA/IDEgOiArIHg7XG5cblx0fTtcblxufVxuXG5pZiAoICduYW1lJyBpbiBGdW5jdGlvbi5wcm90b3R5cGUgPT09IGZhbHNlICkge1xuXG5cdC8vIE1pc3NpbmcgaW4gSUVcblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vbmFtZVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggRnVuY3Rpb24ucHJvdG90eXBlLCAnbmFtZScsIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy50b1N0cmluZygpLm1hdGNoKCAvXlxccypmdW5jdGlvblxccyooW15cXChcXHNdKikvIClbIDEgXTtcblxuXHRcdH1cblxuXHR9ICk7XG5cbn1cblxuaWYgKCBPYmplY3QuYXNzaWduID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gTWlzc2luZyBpbiBJRVxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXG5cblx0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRPYmplY3QuYXNzaWduID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG91dHB1dCA9IE9iamVjdCggdGFyZ2V0ICk7XG5cblx0XHRcdGZvciAoIHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggKysgKSB7XG5cblx0XHRcdFx0dmFyIHNvdXJjZSA9IGFyZ3VtZW50c1sgaW5kZXggXTtcblxuXHRcdFx0XHRpZiAoIHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBuZXh0S2V5IGluIHNvdXJjZSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIHNvdXJjZSwgbmV4dEtleSApICkge1xuXG5cdFx0XHRcdFx0XHRcdG91dHB1dFsgbmV4dEtleSBdID0gc291cmNlWyBuZXh0S2V5IF07XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdH07XG5cblx0fSApKCk7XG5cbn1cblxuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL2V2ZW50ZGlzcGF0Y2hlci5qcy9cbiAqL1xuXG5mdW5jdGlvbiBFdmVudERpc3BhdGNoZXIoKSB7fVxuXG5PYmplY3QuYXNzaWduKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlLCB7XG5cblx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcblxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxpc3RlbmVyc1sgdHlwZSBdID0gW107XG5cblx0XHR9XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgPT09IC0gMSApIHtcblxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0ucHVzaCggbGlzdGVuZXIgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGhhc0V2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblxuXHRcdHJldHVybiBsaXN0ZW5lcnNbIHR5cGUgXSAhPT0gdW5kZWZpbmVkICYmIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgIT09IC0gMTtcblxuXHR9LFxuXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblx0XHR2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBpbmRleCA9IGxpc3RlbmVyQXJyYXkuaW5kZXhPZiggbGlzdGVuZXIgKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gLSAxICkge1xuXG5cdFx0XHRcdGxpc3RlbmVyQXJyYXkuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cdFx0dmFyIGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lcnNbIGV2ZW50LnR5cGUgXTtcblxuXHRcdGlmICggbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRldmVudC50YXJnZXQgPSB0aGlzO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBsaXN0ZW5lckFycmF5LnNsaWNlKCAwICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXlbIGkgXS5jYWxsKCB0aGlzLCBldmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbnZhciBSRVZJU0lPTiA9ICcxMDcnO1xudmFyIE1PVVNFID0geyBMRUZUOiAwLCBNSURETEU6IDEsIFJJR0hUOiAyLCBST1RBVEU6IDAsIERPTExZOiAxLCBQQU46IDIgfTtcbnZhciBUT1VDSCA9IHsgUk9UQVRFOiAwLCBQQU46IDEsIERPTExZX1BBTjogMiwgRE9MTFlfUk9UQVRFOiAzIH07XG52YXIgQ3VsbEZhY2VOb25lID0gMDtcbnZhciBDdWxsRmFjZUJhY2sgPSAxO1xudmFyIEN1bGxGYWNlRnJvbnQgPSAyO1xudmFyIEN1bGxGYWNlRnJvbnRCYWNrID0gMztcbnZhciBGcm9udEZhY2VEaXJlY3Rpb25DVyA9IDA7XG52YXIgRnJvbnRGYWNlRGlyZWN0aW9uQ0NXID0gMTtcbnZhciBCYXNpY1NoYWRvd01hcCA9IDA7XG52YXIgUENGU2hhZG93TWFwID0gMTtcbnZhciBQQ0ZTb2Z0U2hhZG93TWFwID0gMjtcbnZhciBGcm9udFNpZGUgPSAwO1xudmFyIEJhY2tTaWRlID0gMTtcbnZhciBEb3VibGVTaWRlID0gMjtcbnZhciBGbGF0U2hhZGluZyA9IDE7XG52YXIgU21vb3RoU2hhZGluZyA9IDI7XG52YXIgTm9Db2xvcnMgPSAwO1xudmFyIEZhY2VDb2xvcnMgPSAxO1xudmFyIFZlcnRleENvbG9ycyA9IDI7XG52YXIgTm9CbGVuZGluZyA9IDA7XG52YXIgTm9ybWFsQmxlbmRpbmcgPSAxO1xudmFyIEFkZGl0aXZlQmxlbmRpbmcgPSAyO1xudmFyIFN1YnRyYWN0aXZlQmxlbmRpbmcgPSAzO1xudmFyIE11bHRpcGx5QmxlbmRpbmcgPSA0O1xudmFyIEN1c3RvbUJsZW5kaW5nID0gNTtcbnZhciBBZGRFcXVhdGlvbiA9IDEwMDtcbnZhciBTdWJ0cmFjdEVxdWF0aW9uID0gMTAxO1xudmFyIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uID0gMTAyO1xudmFyIE1pbkVxdWF0aW9uID0gMTAzO1xudmFyIE1heEVxdWF0aW9uID0gMTA0O1xudmFyIFplcm9GYWN0b3IgPSAyMDA7XG52YXIgT25lRmFjdG9yID0gMjAxO1xudmFyIFNyY0NvbG9yRmFjdG9yID0gMjAyO1xudmFyIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IgPSAyMDM7XG52YXIgU3JjQWxwaGFGYWN0b3IgPSAyMDQ7XG52YXIgT25lTWludXNTcmNBbHBoYUZhY3RvciA9IDIwNTtcbnZhciBEc3RBbHBoYUZhY3RvciA9IDIwNjtcbnZhciBPbmVNaW51c0RzdEFscGhhRmFjdG9yID0gMjA3O1xudmFyIERzdENvbG9yRmFjdG9yID0gMjA4O1xudmFyIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgPSAyMDk7XG52YXIgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciA9IDIxMDtcbnZhciBOZXZlckRlcHRoID0gMDtcbnZhciBBbHdheXNEZXB0aCA9IDE7XG52YXIgTGVzc0RlcHRoID0gMjtcbnZhciBMZXNzRXF1YWxEZXB0aCA9IDM7XG52YXIgRXF1YWxEZXB0aCA9IDQ7XG52YXIgR3JlYXRlckVxdWFsRGVwdGggPSA1O1xudmFyIEdyZWF0ZXJEZXB0aCA9IDY7XG52YXIgTm90RXF1YWxEZXB0aCA9IDc7XG52YXIgTXVsdGlwbHlPcGVyYXRpb24gPSAwO1xudmFyIE1peE9wZXJhdGlvbiA9IDE7XG52YXIgQWRkT3BlcmF0aW9uID0gMjtcbnZhciBOb1RvbmVNYXBwaW5nID0gMDtcbnZhciBMaW5lYXJUb25lTWFwcGluZyA9IDE7XG52YXIgUmVpbmhhcmRUb25lTWFwcGluZyA9IDI7XG52YXIgVW5jaGFydGVkMlRvbmVNYXBwaW5nID0gMztcbnZhciBDaW5lb25Ub25lTWFwcGluZyA9IDQ7XG52YXIgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nID0gNTtcblxudmFyIFVWTWFwcGluZyA9IDMwMDtcbnZhciBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDE7XG52YXIgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nID0gMzAyO1xudmFyIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nID0gMzAzO1xudmFyIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nID0gMzA0O1xudmFyIFNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nID0gMzA1O1xudmFyIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nID0gMzA2O1xudmFyIEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nID0gMzA3O1xudmFyIFJlcGVhdFdyYXBwaW5nID0gMTAwMDtcbnZhciBDbGFtcFRvRWRnZVdyYXBwaW5nID0gMTAwMTtcbnZhciBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nID0gMTAwMjtcbnZhciBOZWFyZXN0RmlsdGVyID0gMTAwMztcbnZhciBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciA9IDEwMDQ7XG52YXIgTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0O1xudmFyIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgPSAxMDA1O1xudmFyIE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA1O1xudmFyIExpbmVhckZpbHRlciA9IDEwMDY7XG52YXIgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7XG52YXIgTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7XG52YXIgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyID0gMTAwODtcbnZhciBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA4O1xudmFyIFVuc2lnbmVkQnl0ZVR5cGUgPSAxMDA5O1xudmFyIEJ5dGVUeXBlID0gMTAxMDtcbnZhciBTaG9ydFR5cGUgPSAxMDExO1xudmFyIFVuc2lnbmVkU2hvcnRUeXBlID0gMTAxMjtcbnZhciBJbnRUeXBlID0gMTAxMztcbnZhciBVbnNpZ25lZEludFR5cGUgPSAxMDE0O1xudmFyIEZsb2F0VHlwZSA9IDEwMTU7XG52YXIgSGFsZkZsb2F0VHlwZSA9IDEwMTY7XG52YXIgVW5zaWduZWRTaG9ydDQ0NDRUeXBlID0gMTAxNztcbnZhciBVbnNpZ25lZFNob3J0NTU1MVR5cGUgPSAxMDE4O1xudmFyIFVuc2lnbmVkU2hvcnQ1NjVUeXBlID0gMTAxOTtcbnZhciBVbnNpZ25lZEludDI0OFR5cGUgPSAxMDIwO1xudmFyIEFscGhhRm9ybWF0ID0gMTAyMTtcbnZhciBSR0JGb3JtYXQgPSAxMDIyO1xudmFyIFJHQkFGb3JtYXQgPSAxMDIzO1xudmFyIEx1bWluYW5jZUZvcm1hdCA9IDEwMjQ7XG52YXIgTHVtaW5hbmNlQWxwaGFGb3JtYXQgPSAxMDI1O1xudmFyIFJHQkVGb3JtYXQgPSBSR0JBRm9ybWF0O1xudmFyIERlcHRoRm9ybWF0ID0gMTAyNjtcbnZhciBEZXB0aFN0ZW5jaWxGb3JtYXQgPSAxMDI3O1xudmFyIFJlZEZvcm1hdCA9IDEwMjg7XG52YXIgUkdCX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NjtcbnZhciBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NztcbnZhciBSR0JBX1MzVENfRFhUM19Gb3JtYXQgPSAzMzc3ODtcbnZhciBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgPSAzMzc3OTtcbnZhciBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQwO1xudmFyIFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDE7XG52YXIgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDI7XG52YXIgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDM7XG52YXIgUkdCX0VUQzFfRm9ybWF0ID0gMzYxOTY7XG52YXIgUkdCQV9BU1RDXzR4NF9Gb3JtYXQgPSAzNzgwODtcbnZhciBSR0JBX0FTVENfNXg0X0Zvcm1hdCA9IDM3ODA5O1xudmFyIFJHQkFfQVNUQ181eDVfRm9ybWF0ID0gMzc4MTA7XG52YXIgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgPSAzNzgxMTtcbnZhciBSR0JBX0FTVENfNng2X0Zvcm1hdCA9IDM3ODEyO1xudmFyIFJHQkFfQVNUQ184eDVfRm9ybWF0ID0gMzc4MTM7XG52YXIgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgPSAzNzgxNDtcbnZhciBSR0JBX0FTVENfOHg4X0Zvcm1hdCA9IDM3ODE1O1xudmFyIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IDM3ODE2O1xudmFyIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCA9IDM3ODE3O1xudmFyIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCA9IDM3ODE4O1xudmFyIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgPSAzNzgxOTtcbnZhciBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ID0gMzc4MjA7XG52YXIgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCA9IDM3ODIxO1xudmFyIExvb3BPbmNlID0gMjIwMDtcbnZhciBMb29wUmVwZWF0ID0gMjIwMTtcbnZhciBMb29wUGluZ1BvbmcgPSAyMjAyO1xudmFyIEludGVycG9sYXRlRGlzY3JldGUgPSAyMzAwO1xudmFyIEludGVycG9sYXRlTGluZWFyID0gMjMwMTtcbnZhciBJbnRlcnBvbGF0ZVNtb290aCA9IDIzMDI7XG52YXIgWmVyb0N1cnZhdHVyZUVuZGluZyA9IDI0MDA7XG52YXIgWmVyb1Nsb3BlRW5kaW5nID0gMjQwMTtcbnZhciBXcmFwQXJvdW5kRW5kaW5nID0gMjQwMjtcbnZhciBUcmlhbmdsZXNEcmF3TW9kZSA9IDA7XG52YXIgVHJpYW5nbGVTdHJpcERyYXdNb2RlID0gMTtcbnZhciBUcmlhbmdsZUZhbkRyYXdNb2RlID0gMjtcbnZhciBMaW5lYXJFbmNvZGluZyA9IDMwMDA7XG52YXIgc1JHQkVuY29kaW5nID0gMzAwMTtcbnZhciBHYW1tYUVuY29kaW5nID0gMzAwNztcbnZhciBSR0JFRW5jb2RpbmcgPSAzMDAyO1xudmFyIExvZ0x1dkVuY29kaW5nID0gMzAwMztcbnZhciBSR0JNN0VuY29kaW5nID0gMzAwNDtcbnZhciBSR0JNMTZFbmNvZGluZyA9IDMwMDU7XG52YXIgUkdCREVuY29kaW5nID0gMzAwNjtcbnZhciBCYXNpY0RlcHRoUGFja2luZyA9IDMyMDA7XG52YXIgUkdCQURlcHRoUGFja2luZyA9IDMyMDE7XG52YXIgVGFuZ2VudFNwYWNlTm9ybWFsTWFwID0gMDtcbnZhciBPYmplY3RTcGFjZU5vcm1hbE1hcCA9IDE7XG5cbnZhciBaZXJvU3RlbmNpbE9wID0gMDtcbnZhciBLZWVwU3RlbmNpbE9wID0gNzY4MDtcbnZhciBSZXBsYWNlU3RlbmNpbE9wID0gNzY4MTtcbnZhciBJbmNyZW1lbnRTdGVuY2lsT3AgPSA3NjgyO1xudmFyIERlY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODM7XG52YXIgSW5jcmVtZW50V3JhcFN0ZW5jaWxPcCA9IDM0MDU1O1xudmFyIERlY3JlbWVudFdyYXBTdGVuY2lsT3AgPSAzNDA1NjtcbnZhciBJbnZlcnRTdGVuY2lsT3AgPSA1Mzg2O1xuXG52YXIgTmV2ZXJTdGVuY2lsRnVuYyA9IDUxMjtcbnZhciBMZXNzU3RlbmNpbEZ1bmMgPSA1MTM7XG52YXIgRXF1YWxTdGVuY2lsRnVuYyA9IDUxNDtcbnZhciBMZXNzRXF1YWxTdGVuY2lsRnVuYyA9IDUxNTtcbnZhciBHcmVhdGVyU3RlbmNpbEZ1bmMgPSA1MTY7XG52YXIgTm90RXF1YWxTdGVuY2lsRnVuYyA9IDUxNztcbnZhciBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYyA9IDUxODtcbnZhciBBbHdheXNTdGVuY2lsRnVuYyA9IDUxOTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgX01hdGggPSB7XG5cblx0REVHMlJBRDogTWF0aC5QSSAvIDE4MCxcblx0UkFEMkRFRzogMTgwIC8gTWF0aC5QSSxcblxuXHRnZW5lcmF0ZVVVSUQ6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxOTYzMTM2IzIxOTYzMTM2XG5cblx0XHR2YXIgbHV0ID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAyNTY7IGkgKysgKSB7XG5cblx0XHRcdGx1dFsgaSBdID0gKCBpIDwgMTYgPyAnMCcgOiAnJyApICsgKCBpICkudG9TdHJpbmcoIDE2ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xuXG5cdFx0XHR2YXIgZDAgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDIgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDMgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgdXVpZCA9IGx1dFsgZDAgJiAweGZmIF0gKyBsdXRbIGQwID4+IDggJiAweGZmIF0gKyBsdXRbIGQwID4+IDE2ICYgMHhmZiBdICsgbHV0WyBkMCA+PiAyNCAmIDB4ZmYgXSArICctJyArXG5cdFx0XHRcdGx1dFsgZDEgJiAweGZmIF0gKyBsdXRbIGQxID4+IDggJiAweGZmIF0gKyAnLScgKyBsdXRbIGQxID4+IDE2ICYgMHgwZiB8IDB4NDAgXSArIGx1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0XHRsdXRbIGQyICYgMHgzZiB8IDB4ODAgXSArIGx1dFsgZDIgPj4gOCAmIDB4ZmYgXSArICctJyArIGx1dFsgZDIgPj4gMTYgJiAweGZmIF0gKyBsdXRbIGQyID4+IDI0ICYgMHhmZiBdICtcblx0XHRcdFx0bHV0WyBkMyAmIDB4ZmYgXSArIGx1dFsgZDMgPj4gOCAmIDB4ZmYgXSArIGx1dFsgZDMgPj4gMTYgJiAweGZmIF0gKyBsdXRbIGQzID4+IDI0ICYgMHhmZiBdO1xuXG5cdFx0XHQvLyAudG9VcHBlckNhc2UoKSBoZXJlIGZsYXR0ZW5zIGNvbmNhdGVuYXRlZCBzdHJpbmdzIHRvIHNhdmUgaGVhcCBtZW1vcnkgc3BhY2UuXG5cdFx0XHRyZXR1cm4gdXVpZC50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0fTtcblxuXHR9ICkoKSxcblxuXHRjbGFtcDogZnVuY3Rpb24gKCB2YWx1ZSwgbWluLCBtYXggKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgdmFsdWUgKSApO1xuXG5cdH0sXG5cblx0Ly8gY29tcHV0ZSBldWNsaWRpYW4gbW9kdWxvIG9mIG0gJSBuXG5cdC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vZHVsb19vcGVyYXRpb25cblxuXHRldWNsaWRlYW5Nb2R1bG86IGZ1bmN0aW9uICggbiwgbSApIHtcblxuXHRcdHJldHVybiAoICggbiAlIG0gKSArIG0gKSAlIG07XG5cblx0fSxcblxuXHQvLyBMaW5lYXIgbWFwcGluZyBmcm9tIHJhbmdlIDxhMSwgYTI+IHRvIHJhbmdlIDxiMSwgYjI+XG5cblx0bWFwTGluZWFyOiBmdW5jdGlvbiAoIHgsIGExLCBhMiwgYjEsIGIyICkge1xuXG5cdFx0cmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7XG5cblx0fSxcblxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lYXJfaW50ZXJwb2xhdGlvblxuXG5cdGxlcnA6IGZ1bmN0aW9uICggeCwgeSwgdCApIHtcblxuXHRcdHJldHVybiAoIDEgLSB0ICkgKiB4ICsgdCAqIHk7XG5cblx0fSxcblxuXHQvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Ntb290aHN0ZXBcblxuXHRzbW9vdGhzdGVwOiBmdW5jdGlvbiAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdFx0aWYgKCB4IDw9IG1pbiApIHJldHVybiAwO1xuXHRcdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHRcdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0XHRyZXR1cm4geCAqIHggKiAoIDMgLSAyICogeCApO1xuXG5cdH0sXG5cblx0c21vb3RoZXJzdGVwOiBmdW5jdGlvbiAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdFx0aWYgKCB4IDw9IG1pbiApIHJldHVybiAwO1xuXHRcdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHRcdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0XHRyZXR1cm4geCAqIHggKiB4ICogKCB4ICogKCB4ICogNiAtIDE1ICkgKyAxMCApO1xuXG5cdH0sXG5cblx0Ly8gUmFuZG9tIGludGVnZXIgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuXG5cdHJhbmRJbnQ6IGZ1bmN0aW9uICggbG93LCBoaWdoICkge1xuXG5cdFx0cmV0dXJuIGxvdyArIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKyAxICkgKTtcblxuXHR9LFxuXG5cdC8vIFJhbmRvbSBmbG9hdCBmcm9tIDxsb3csIGhpZ2g+IGludGVydmFsXG5cblx0cmFuZEZsb2F0OiBmdW5jdGlvbiAoIGxvdywgaGlnaCApIHtcblxuXHRcdHJldHVybiBsb3cgKyBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICk7XG5cblx0fSxcblxuXHQvLyBSYW5kb20gZmxvYXQgZnJvbSA8LXJhbmdlLzIsIHJhbmdlLzI+IGludGVydmFsXG5cblx0cmFuZEZsb2F0U3ByZWFkOiBmdW5jdGlvbiAoIHJhbmdlICkge1xuXG5cdFx0cmV0dXJuIHJhbmdlICogKCAwLjUgLSBNYXRoLnJhbmRvbSgpICk7XG5cblx0fSxcblxuXHRkZWdUb1JhZDogZnVuY3Rpb24gKCBkZWdyZWVzICkge1xuXG5cdFx0cmV0dXJuIGRlZ3JlZXMgKiBfTWF0aC5ERUcyUkFEO1xuXG5cdH0sXG5cblx0cmFkVG9EZWc6IGZ1bmN0aW9uICggcmFkaWFucyApIHtcblxuXHRcdHJldHVybiByYWRpYW5zICogX01hdGguUkFEMkRFRztcblxuXHR9LFxuXG5cdGlzUG93ZXJPZlR3bzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG5cdH0sXG5cblx0Y2VpbFBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cblx0fSxcblxuXHRmbG9vclBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKi9cblxuZnVuY3Rpb24gVmVjdG9yMiggeCwgeSApIHtcblxuXHR0aGlzLnggPSB4IHx8IDA7XG5cdHRoaXMueSA9IHkgfHwgMDtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVmVjdG9yMi5wcm90b3R5cGUsIHtcblxuXHRcIndpZHRoXCI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy54O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy54ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRcImhlaWdodFwiOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMueTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMueSA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IyLnByb3RvdHlwZSwge1xuXG5cdGlzVmVjdG9yMjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnkgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGl2aWRlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXTtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWluOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWF4OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fSxcblxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTtcblxuXHR9LFxuXG5cdGNyb3NzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi55IC0gdGhpcy55ICogdi54O1xuXG5cdH0sXG5cblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XG5cblx0fSxcblxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSApO1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuTGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH0sXG5cblx0YW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGNvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzXG5cblx0XHR2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKCB0aGlzLnksIHRoaXMueCApO1xuXG5cdFx0aWYgKCBhbmdsZSA8IDAgKSBhbmdsZSArPSAyICogTWF0aC5QSTtcblxuXHRcdHJldHVybiBhbmdsZTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG86IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1NxdWFyZWQ6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2Lnk7XG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKTtcblxuXHR9LFxuXG5cdHNldExlbmd0aDogZnVuY3Rpb24gKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwVmVjdG9yczogZnVuY3Rpb24gKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdjIsIHYxICkubXVsdGlwbHlTY2FsYXIoIGFscGhhICkuYWRkKCB2MSApO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVBcm91bmQ6IGZ1bmN0aW9uICggY2VudGVyLCBhbmdsZSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIGFuZ2xlICksIHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblxuXHRcdHZhciB4ID0gdGhpcy54IC0gY2VudGVyLng7XG5cdFx0dmFyIHkgPSB0aGlzLnkgLSBjZW50ZXIueTtcblxuXHRcdHRoaXMueCA9IHggKiBjIC0geSAqIHMgKyBjZW50ZXIueDtcblx0XHR0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIFF1YXRlcm5pb24oIHgsIHksIHosIHcgKSB7XG5cblx0dGhpcy5feCA9IHggfHwgMDtcblx0dGhpcy5feSA9IHkgfHwgMDtcblx0dGhpcy5feiA9IHogfHwgMDtcblx0dGhpcy5fdyA9ICggdyAhPT0gdW5kZWZpbmVkICkgPyB3IDogMTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBRdWF0ZXJuaW9uLCB7XG5cblx0c2xlcnA6IGZ1bmN0aW9uICggcWEsIHFiLCBxbSwgdCApIHtcblxuXHRcdHJldHVybiBxbS5jb3B5KCBxYSApLnNsZXJwKCBxYiwgdCApO1xuXG5cdH0sXG5cblx0c2xlcnBGbGF0OiBmdW5jdGlvbiAoIGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxLCB0ICkge1xuXG5cdFx0Ly8gZnV6ei1mcmVlLCBhcnJheS1iYXNlZCBRdWF0ZXJuaW9uIFNMRVJQIG9wZXJhdGlvblxuXG5cdFx0dmFyIHgwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDAgXSxcblx0XHRcdHkwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDEgXSxcblx0XHRcdHowID0gc3JjMFsgc3JjT2Zmc2V0MCArIDIgXSxcblx0XHRcdHcwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDMgXSxcblxuXHRcdFx0eDEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMCBdLFxuXHRcdFx0eTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdLFxuXHRcdFx0ejEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMiBdLFxuXHRcdFx0dzEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMyBdO1xuXG5cdFx0aWYgKCB3MCAhPT0gdzEgfHwgeDAgIT09IHgxIHx8IHkwICE9PSB5MSB8fCB6MCAhPT0gejEgKSB7XG5cblx0XHRcdHZhciBzID0gMSAtIHQsXG5cblx0XHRcdFx0Y29zID0geDAgKiB4MSArIHkwICogeTEgKyB6MCAqIHoxICsgdzAgKiB3MSxcblxuXHRcdFx0XHRkaXIgPSAoIGNvcyA+PSAwID8gMSA6IC0gMSApLFxuXHRcdFx0XHRzcXJTaW4gPSAxIC0gY29zICogY29zO1xuXG5cdFx0XHQvLyBTa2lwIHRoZSBTbGVycCBmb3IgdGlueSBzdGVwcyB0byBhdm9pZCBudW1lcmljIHByb2JsZW1zOlxuXHRcdFx0aWYgKCBzcXJTaW4gPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHR2YXIgc2luID0gTWF0aC5zcXJ0KCBzcXJTaW4gKSxcblx0XHRcdFx0XHRsZW4gPSBNYXRoLmF0YW4yKCBzaW4sIGNvcyAqIGRpciApO1xuXG5cdFx0XHRcdHMgPSBNYXRoLnNpbiggcyAqIGxlbiApIC8gc2luO1xuXHRcdFx0XHR0ID0gTWF0aC5zaW4oIHQgKiBsZW4gKSAvIHNpbjtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdERpciA9IHQgKiBkaXI7XG5cblx0XHRcdHgwID0geDAgKiBzICsgeDEgKiB0RGlyO1xuXHRcdFx0eTAgPSB5MCAqIHMgKyB5MSAqIHREaXI7XG5cdFx0XHR6MCA9IHowICogcyArIHoxICogdERpcjtcblx0XHRcdHcwID0gdzAgKiBzICsgdzEgKiB0RGlyO1xuXG5cdFx0XHQvLyBOb3JtYWxpemUgaW4gY2FzZSB3ZSBqdXN0IGRpZCBhIGxlcnA6XG5cdFx0XHRpZiAoIHMgPT09IDEgLSB0ICkge1xuXG5cdFx0XHRcdHZhciBmID0gMSAvIE1hdGguc3FydCggeDAgKiB4MCArIHkwICogeTAgKyB6MCAqIHowICsgdzAgKiB3MCApO1xuXG5cdFx0XHRcdHgwICo9IGY7XG5cdFx0XHRcdHkwICo9IGY7XG5cdFx0XHRcdHowICo9IGY7XG5cdFx0XHRcdHcwICo9IGY7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGRzdFsgZHN0T2Zmc2V0IF0gPSB4MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFF1YXRlcm5pb24ucHJvdG90eXBlLCB7XG5cblx0eDoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl94O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feCA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0eToge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl95O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feSA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0ejoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl96O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dzoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl93O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5fdyA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBRdWF0ZXJuaW9uLnByb3RvdHlwZSwge1xuXG5cdGlzUXVhdGVybmlvbjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX3cgPSB3O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl93ICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHF1YXRlcm5pb24gKSB7XG5cblx0XHR0aGlzLl94ID0gcXVhdGVybmlvbi54O1xuXHRcdHRoaXMuX3kgPSBxdWF0ZXJuaW9uLnk7XG5cdFx0dGhpcy5feiA9IHF1YXRlcm5pb24uejtcblx0XHR0aGlzLl93ID0gcXVhdGVybmlvbi53O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tRXVsZXI6IGZ1bmN0aW9uICggZXVsZXIsIHVwZGF0ZSApIHtcblxuXHRcdGlmICggISAoIGV1bGVyICYmIGV1bGVyLmlzRXVsZXIgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIG5vdyBleHBlY3RzIGFuIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuJyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHggPSBldWxlci5feCwgeSA9IGV1bGVyLl95LCB6ID0gZXVsZXIuX3osIG9yZGVyID0gZXVsZXIub3JkZXI7XG5cblx0XHQvLyBodHRwOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvXG5cdFx0Ly8gXHQyMDY5Ni1mdW5jdGlvbi10by1jb252ZXJ0LWJldHdlZW4tZGNtLWV1bGVyLWFuZ2xlcy1xdWF0ZXJuaW9ucy1hbmQtZXVsZXItdmVjdG9ycy9cblx0XHQvL1x0Y29udGVudC9TcGluQ2FsYy5tXG5cblx0XHR2YXIgY29zID0gTWF0aC5jb3M7XG5cdFx0dmFyIHNpbiA9IE1hdGguc2luO1xuXG5cdFx0dmFyIGMxID0gY29zKCB4IC8gMiApO1xuXHRcdHZhciBjMiA9IGNvcyggeSAvIDIgKTtcblx0XHR2YXIgYzMgPSBjb3MoIHogLyAyICk7XG5cblx0XHR2YXIgczEgPSBzaW4oIHggLyAyICk7XG5cdFx0dmFyIHMyID0gc2luKCB5IC8gMiApO1xuXHRcdHZhciBzMyA9IHNpbiggeiAvIDIgKTtcblxuXHRcdGlmICggb3JkZXIgPT09ICdYWVonICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdZWFonICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWVgnICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdZWlgnICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1cGRhdGUgIT09IGZhbHNlICkgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQXhpc0FuZ2xlOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHZhciBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl94ID0gYXhpcy54ICogcztcblx0XHR0aGlzLl95ID0gYXhpcy55ICogcztcblx0XHR0aGlzLl96ID0gYXhpcy56ICogcztcblx0XHR0aGlzLl93ID0gTWF0aC5jb3MoIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb1F1YXRlcm5pb24vaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0dmFyIHRlID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSxcblx0XHRcdG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sXG5cdFx0XHRtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXSxcblxuXHRcdFx0dHJhY2UgPSBtMTEgKyBtMjIgKyBtMzMsXG5cdFx0XHRzO1xuXG5cdFx0aWYgKCB0cmFjZSA+IDAgKSB7XG5cblx0XHRcdHMgPSAwLjUgLyBNYXRoLnNxcnQoIHRyYWNlICsgMS4wICk7XG5cblx0XHRcdHRoaXMuX3cgPSAwLjI1IC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0zMiAtIG0yMyApICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMyAtIG0zMSApICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMSAtIG0xMiApICogcztcblxuXHRcdH0gZWxzZSBpZiAoIG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMgKSB7XG5cblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0xMSAtIG0yMiAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cblx0XHR9IGVsc2UgaWYgKCBtMjIgPiBtMzMgKSB7XG5cblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0yMiAtIG0xMSAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMzMgLSBtMTEgLSBtMjIgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTEzICsgbTMxICkgLyBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTIzICsgbTMyICkgLyBzO1xuXHRcdFx0dGhpcy5feiA9IDAuMjUgKiBzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tVW5pdFZlY3RvcnM6IGZ1bmN0aW9uICggdkZyb20sIHZUbyApIHtcblxuXHRcdC8vIGFzc3VtZXMgZGlyZWN0aW9uIHZlY3RvcnMgdkZyb20gYW5kIHZUbyBhcmUgbm9ybWFsaXplZFxuXG5cdFx0dmFyIEVQUyA9IDAuMDAwMDAxO1xuXG5cdFx0dmFyIHIgPSB2RnJvbS5kb3QoIHZUbyApICsgMTtcblxuXHRcdGlmICggciA8IEVQUyApIHtcblxuXHRcdFx0ciA9IDA7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIHZGcm9tLnggKSA+IE1hdGguYWJzKCB2RnJvbS56ICkgKSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IC0gdkZyb20ueTtcblx0XHRcdFx0dGhpcy5feSA9IHZGcm9tLng7XG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xuXHRcdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdFx0dGhpcy5feSA9IC0gdkZyb20uejtcblx0XHRcdFx0dGhpcy5feiA9IHZGcm9tLnk7XG5cdFx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBjcm9zc1ZlY3RvcnMoIHZGcm9tLCB2VG8gKTsgLy8gaW5saW5lZCB0byBhdm9pZCBjeWNsaWMgZGVwZW5kZW5jeSBvbiBWZWN0b3IzXG5cblx0XHRcdHRoaXMuX3ggPSB2RnJvbS55ICogdlRvLnogLSB2RnJvbS56ICogdlRvLnk7XG5cdFx0XHR0aGlzLl95ID0gdkZyb20ueiAqIHZUby54IC0gdkZyb20ueCAqIHZUby56O1xuXHRcdFx0dGhpcy5feiA9IHZGcm9tLnggKiB2VG8ueSAtIHZGcm9tLnkgKiB2VG8ueDtcblx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHRhbmdsZVRvOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHRyZXR1cm4gMiAqIE1hdGguYWNvcyggTWF0aC5hYnMoIF9NYXRoLmNsYW1wKCB0aGlzLmRvdCggcSApLCAtIDEsIDEgKSApICk7XG5cblx0fSxcblxuXHRyb3RhdGVUb3dhcmRzOiBmdW5jdGlvbiAoIHEsIHN0ZXAgKSB7XG5cblx0XHR2YXIgYW5nbGUgPSB0aGlzLmFuZ2xlVG8oIHEgKTtcblxuXHRcdGlmICggYW5nbGUgPT09IDAgKSByZXR1cm4gdGhpcztcblxuXHRcdHZhciB0ID0gTWF0aC5taW4oIDEsIHN0ZXAgLyBhbmdsZSApO1xuXG5cdFx0dGhpcy5zbGVycCggcSwgdCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpbnZlcnNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBxdWF0ZXJuaW9uIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdFx0cmV0dXJuIHRoaXMuY29uanVnYXRlKCk7XG5cblx0fSxcblxuXHRjb25qdWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuX3ggKj0gLSAxO1xuXHRcdHRoaXMuX3kgKj0gLSAxO1xuXHRcdHRoaXMuX3ogKj0gLSAxO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkb3Q6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLl94ICogdi5feCArIHRoaXMuX3kgKiB2Ll95ICsgdGhpcy5feiAqIHYuX3ogKyB0aGlzLl93ICogdi5fdztcblxuXHR9LFxuXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3c7XG5cblx0fSxcblxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93ICk7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBsID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdGlmICggbCA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHR0aGlzLl95ID0gMDtcblx0XHRcdHRoaXMuX3ogPSAwO1xuXHRcdFx0dGhpcy5fdyA9IDE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsID0gMSAvIGw7XG5cblx0XHRcdHRoaXMuX3ggPSB0aGlzLl94ICogbDtcblx0XHRcdHRoaXMuX3kgPSB0aGlzLl95ICogbDtcblx0XHRcdHRoaXMuX3ogPSB0aGlzLl96ICogbDtcblx0XHRcdHRoaXMuX3cgPSB0aGlzLl93ICogbDtcblxuXHRcdH1cblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uICggcSwgcCApIHtcblxuXHRcdGlmICggcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVF1YXRlcm5pb25zKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCBxLCBwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCB0aGlzLCBxICk7XG5cblx0fSxcblxuXHRwcmVtdWx0aXBseTogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgdGhpcyApO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlRdWF0ZXJuaW9uczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0Ly8gZnJvbSBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL2NvZGUvaW5kZXguaHRtXG5cblx0XHR2YXIgcWF4ID0gYS5feCwgcWF5ID0gYS5feSwgcWF6ID0gYS5feiwgcWF3ID0gYS5fdztcblx0XHR2YXIgcWJ4ID0gYi5feCwgcWJ5ID0gYi5feSwgcWJ6ID0gYi5feiwgcWJ3ID0gYi5fdztcblxuXHRcdHRoaXMuX3ggPSBxYXggKiBxYncgKyBxYXcgKiBxYnggKyBxYXkgKiBxYnogLSBxYXogKiBxYnk7XG5cdFx0dGhpcy5feSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejtcblx0XHR0aGlzLl96ID0gcWF6ICogcWJ3ICsgcWF3ICogcWJ6ICsgcWF4ICogcWJ5IC0gcWF5ICogcWJ4O1xuXHRcdHRoaXMuX3cgPSBxYXcgKiBxYncgLSBxYXggKiBxYnggLSBxYXkgKiBxYnkgLSBxYXogKiBxYno7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNsZXJwOiBmdW5jdGlvbiAoIHFiLCB0ICkge1xuXG5cdFx0aWYgKCB0ID09PSAwICkgcmV0dXJuIHRoaXM7XG5cdFx0aWYgKCB0ID09PSAxICkgcmV0dXJuIHRoaXMuY29weSggcWIgKTtcblxuXHRcdHZhciB4ID0gdGhpcy5feCwgeSA9IHRoaXMuX3ksIHogPSB0aGlzLl96LCB3ID0gdGhpcy5fdztcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXG5cblx0XHR2YXIgY29zSGFsZlRoZXRhID0gdyAqIHFiLl93ICsgeCAqIHFiLl94ICsgeSAqIHFiLl95ICsgeiAqIHFiLl96O1xuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPCAwICkge1xuXG5cdFx0XHR0aGlzLl93ID0gLSBxYi5fdztcblx0XHRcdHRoaXMuX3ggPSAtIHFiLl94O1xuXHRcdFx0dGhpcy5feSA9IC0gcWIuX3k7XG5cdFx0XHR0aGlzLl96ID0gLSBxYi5fejtcblxuXHRcdFx0Y29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvcHkoIHFiICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNvc0hhbGZUaGV0YSA+PSAxLjAgKSB7XG5cblx0XHRcdHRoaXMuX3cgPSB3O1xuXHRcdFx0dGhpcy5feCA9IHg7XG5cdFx0XHR0aGlzLl95ID0geTtcblx0XHRcdHRoaXMuX3ogPSB6O1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHZhciBzcXJTaW5IYWxmVGhldGEgPSAxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGE7XG5cblx0XHRpZiAoIHNxclNpbkhhbGZUaGV0YSA8PSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0dmFyIHMgPSAxIC0gdDtcblx0XHRcdHRoaXMuX3cgPSBzICogdyArIHQgKiB0aGlzLl93O1xuXHRcdFx0dGhpcy5feCA9IHMgKiB4ICsgdCAqIHRoaXMuX3g7XG5cdFx0XHR0aGlzLl95ID0gcyAqIHkgKyB0ICogdGhpcy5feTtcblx0XHRcdHRoaXMuX3ogPSBzICogeiArIHQgKiB0aGlzLl96O1xuXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZSgpO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHZhciBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoIHNxclNpbkhhbGZUaGV0YSApO1xuXHRcdHZhciBoYWxmVGhldGEgPSBNYXRoLmF0YW4yKCBzaW5IYWxmVGhldGEsIGNvc0hhbGZUaGV0YSApO1xuXHRcdHZhciByYXRpb0EgPSBNYXRoLnNpbiggKCAxIC0gdCApICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGEsXG5cdFx0XHRyYXRpb0IgPSBNYXRoLnNpbiggdCAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhO1xuXG5cdFx0dGhpcy5fdyA9ICggdyAqIHJhdGlvQSArIHRoaXMuX3cgKiByYXRpb0IgKTtcblx0XHR0aGlzLl94ID0gKCB4ICogcmF0aW9BICsgdGhpcy5feCAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3kgPSAoIHkgKiByYXRpb0EgKyB0aGlzLl95ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feiA9ICggeiAqIHJhdGlvQSArIHRoaXMuX3ogKiByYXRpb0IgKTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHF1YXRlcm5pb24gKSB7XG5cblx0XHRyZXR1cm4gKCBxdWF0ZXJuaW9uLl94ID09PSB0aGlzLl94ICkgJiYgKCBxdWF0ZXJuaW9uLl95ID09PSB0aGlzLl95ICkgJiYgKCBxdWF0ZXJuaW9uLl96ID09PSB0aGlzLl96ICkgJiYgKCBxdWF0ZXJuaW9uLl93ID09PSB0aGlzLl93ICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLl95ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLl96ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblx0XHR0aGlzLl93ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX3c7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fSxcblxuXHRfb25DaGFuZ2U6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdF9vbkNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3Iga2lsZSAvIGh0dHA6Ly9raWxlLnN0cmF2YWdhbnphLm9yZy9cbiAqIEBhdXRob3IgcGhpbG9nYiAvIGh0dHA6Ly9ibG9nLnRoZWppdC5vcmcvXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBlZ3JhZXRoZXIgLyBodHRwOi8vZWdyYWV0aGVyLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIFZlY3RvcjMoIHgsIHksIHogKSB7XG5cblx0dGhpcy54ID0geCB8fCAwO1xuXHR0aGlzLnkgPSB5IHx8IDA7XG5cdHRoaXMueiA9IHogfHwgMDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IzLnByb3RvdHlwZSwge1xuXG5cdGlzVmVjdG9yMzogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblx0XHR0aGlzLnogPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFo6IGZ1bmN0aW9uICggeiApIHtcblxuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56ICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXHRcdHRoaXMueiA9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmFkZFZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblx0XHR0aGlzLnogKz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXHRcdHRoaXMueiA9IGEueiArIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGVkVmVjdG9yOiBmdW5jdGlvbiAoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblx0XHR0aGlzLnogKz0gdi56ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblx0XHR0aGlzLnogLT0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXHRcdHRoaXMueiAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXHRcdHRoaXMueiA9IGEueiAtIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5VmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXHRcdHRoaXMueiAqPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblx0XHR0aGlzLnogKj0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAqIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKiBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICogYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhcHBseUV1bGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlFdWxlciggZXVsZXIgKSB7XG5cblx0XHRcdGlmICggISAoIGV1bGVyICYmIGV1bGVyLmlzRXVsZXIgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLmFwcGx5RXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciApICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhcHBseUF4aXNBbmdsZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGFwcGx5QXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGFwcGx5TWF0cml4MzogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDggXSAqIHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHcgPSAxIC8gKCBlWyAzIF0gKiB4ICsgZVsgNyBdICogeSArIGVbIDExIF0gKiB6ICsgZVsgMTUgXSApO1xuXG5cdFx0dGhpcy54ID0gKCBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICkgKiB3O1xuXHRcdHRoaXMueSA9ICggZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSApICogdztcblx0XHR0aGlzLnogPSAoIGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHogKyBlWyAxNCBdICkgKiB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhcHBseVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBxeCA9IHEueCwgcXkgPSBxLnksIHF6ID0gcS56LCBxdyA9IHEudztcblxuXHRcdC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjdG9yXG5cblx0XHR2YXIgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XG5cdFx0dmFyIGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuXHRcdHZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcblx0XHR2YXIgaXcgPSAtIHF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcblxuXHRcdC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcblxuXHRcdHRoaXMueCA9IGl4ICogcXcgKyBpdyAqIC0gcXggKyBpeSAqIC0gcXogLSBpeiAqIC0gcXk7XG5cdFx0dGhpcy55ID0gaXkgKiBxdyArIGl3ICogLSBxeSArIGl6ICogLSBxeCAtIGl4ICogLSBxejtcblx0XHR0aGlzLnogPSBpeiAqIHF3ICsgaXcgKiAtIHF6ICsgaXggKiAtIHF5IC0gaXkgKiAtIHF4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRwcm9qZWN0OiBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHR9LFxuXG5cdHVucHJvamVjdDogZnVuY3Rpb24gKCBjYW1lcmEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0fSxcblxuXHR0cmFuc2Zvcm1EaXJlY3Rpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGlucHV0OiBUSFJFRS5NYXRyaXg0IGFmZmluZSBtYXRyaXhcblx0XHQvLyB2ZWN0b3IgaW50ZXJwcmV0ZWQgYXMgYSBkaXJlY3Rpb25cblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogejtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xuXG5cdH0sXG5cblx0ZGl2aWRlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cdFx0dGhpcy56IC89IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGl2aWRlU2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKCAxIC8gc2NhbGFyICk7XG5cblx0fSxcblxuXHRtaW46IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWluKCB0aGlzLnosIHYueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYXg6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIHYueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluLngsIE1hdGgubWluKCBtYXgueCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluLnosIE1hdGgubWluKCBtYXgueiwgdGhpcy56ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXBTY2FsYXI6IGZ1bmN0aW9uICggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy56ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXBMZW5ndGg6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHR2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgbGVuZ3RoICkgKSApO1xuXG5cdH0sXG5cblx0Zmxvb3I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjZWlsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5jZWlsKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgucm91bmQoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gKCB0aGlzLnogPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueiApIDogTWF0aC5mbG9vciggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYuejtcblxuXHR9LFxuXG5cdC8vIFRPRE8gbGVuZ3RoU3F1YXJlZD9cblxuXHRsZW5ndGhTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMuejtcblxuXHR9LFxuXG5cdGxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICk7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICk7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fSxcblxuXHRzZXRMZW5ndGg6IGZ1bmN0aW9uICggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogKz0gKCB2LnogLSB0aGlzLnogKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwVmVjdG9yczogZnVuY3Rpb24gKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdjIsIHYxICkubXVsdGlwbHlTY2FsYXIoIGFscGhhICkuYWRkKCB2MSApO1xuXG5cdH0sXG5cblx0Y3Jvc3M6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuY3Jvc3MoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5jcm9zc1ZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmNyb3NzVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB0aGlzLCB2ICk7XG5cblx0fSxcblxuXHRjcm9zc1ZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHZhciBheCA9IGEueCwgYXkgPSBhLnksIGF6ID0gYS56O1xuXHRcdHZhciBieCA9IGIueCwgYnkgPSBiLnksIGJ6ID0gYi56O1xuXG5cdFx0dGhpcy54ID0gYXkgKiBieiAtIGF6ICogYnk7XG5cdFx0dGhpcy55ID0gYXogKiBieCAtIGF4ICogYno7XG5cdFx0dGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHByb2plY3RPblZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHR2YXIgc2NhbGFyID0gdmVjdG9yLmRvdCggdGhpcyApIC8gdmVjdG9yLmxlbmd0aFNxKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5jb3B5KCB2ZWN0b3IgKS5tdWx0aXBseVNjYWxhciggc2NhbGFyICk7XG5cblx0fSxcblxuXHRwcm9qZWN0T25QbGFuZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBwcm9qZWN0T25QbGFuZSggcGxhbmVOb3JtYWwgKSB7XG5cblx0XHRcdHYxLmNvcHkoIHRoaXMgKS5wcm9qZWN0T25WZWN0b3IoIHBsYW5lTm9ybWFsICk7XG5cblx0XHRcdHJldHVybiB0aGlzLnN1YiggdjEgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJlZmxlY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHJlZmxlY3QgaW5jaWRlbnQgdmVjdG9yIG9mZiBwbGFuZSBvcnRob2dvbmFsIHRvIG5vcm1hbFxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmVmbGVjdCggbm9ybWFsICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zdWIoIHYxLmNvcHkoIG5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAyICogdGhpcy5kb3QoIG5vcm1hbCApICkgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGFuZ2xlVG86IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciB0aGV0YSA9IHRoaXMuZG90KCB2ICkgLyAoIE1hdGguc3FydCggdGhpcy5sZW5ndGhTcSgpICogdi5sZW5ndGhTcSgpICkgKTtcblxuXHRcdC8vIGNsYW1wLCB0byBoYW5kbGUgbnVtZXJpY2FsIHByb2JsZW1zXG5cblx0XHRyZXR1cm4gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggdGhldGEsIC0gMSwgMSApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9TcXVhcmVkOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgZHggPSB0aGlzLnggLSB2LngsIGR5ID0gdGhpcy55IC0gdi55LCBkeiA9IHRoaXMueiAtIHYuejtcblxuXHRcdHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeSArIGR6ICogZHo7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApICsgTWF0aC5hYnMoIHRoaXMueiAtIHYueiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbVNwaGVyaWNhbDogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbVNwaGVyaWNhbENvb3Jkcyggcy5yYWRpdXMsIHMucGhpLCBzLnRoZXRhICk7XG5cblx0fSxcblxuXHRzZXRGcm9tU3BoZXJpY2FsQ29vcmRzOiBmdW5jdGlvbiAoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHRcdHZhciBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbiggcGhpICkgKiByYWRpdXM7XG5cblx0XHR0aGlzLnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNvcyggcGhpICkgKiByYWRpdXM7XG5cdFx0dGhpcy56ID0gc2luUGhpUmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21DeWxpbmRyaWNhbDogZnVuY3Rpb24gKCBjICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKCBjLnJhZGl1cywgYy50aGV0YSwgYy55ICk7XG5cblx0fSxcblxuXHRzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHM6IGZ1bmN0aW9uICggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMueCA9IHJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApO1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXhQb3NpdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMTIgXTtcblx0XHR0aGlzLnkgPSBlWyAxMyBdO1xuXHRcdHRoaXMueiA9IGVbIDE0IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXhTY2FsZTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHN4ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAwICkubGVuZ3RoKCk7XG5cdFx0dmFyIHN5ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0dmFyIHN6ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAyICkubGVuZ3RoKCk7XG5cblx0XHR0aGlzLnggPSBzeDtcblx0XHR0aGlzLnkgPSBzeTtcblx0XHR0aGlzLnogPSBzejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU1hdHJpeENvbHVtbjogZnVuY3Rpb24gKCBtLCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmZyb21BcnJheSggbS5lbGVtZW50cywgaW5kZXggKiA0ICk7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy56ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fSxcblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG52YXIgX3ZlY3RvcjtcblxuZnVuY3Rpb24gTWF0cml4MygpIHtcblxuXHR0aGlzLmVsZW1lbnRzID0gW1xuXG5cdFx0MSwgMCwgMCxcblx0XHQwLCAxLCAwLFxuXHRcdDAsIDAsIDFcblxuXHRdO1xuXG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4MzogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIE1hdHJpeDMucHJvdG90eXBlLCB7XG5cblx0aXNNYXRyaXgzOiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyAxIF0gPSBuMjE7IHRlWyAyIF0gPSBuMzE7XG5cdFx0dGVbIDMgXSA9IG4xMjsgdGVbIDQgXSA9IG4yMjsgdGVbIDUgXSA9IG4zMjtcblx0XHR0ZVsgNiBdID0gbjEzOyB0ZVsgNyBdID0gbjIzOyB0ZVsgOCBdID0gbjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpZGVudGl0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmZyb21BcnJheSggdGhpcy5lbGVtZW50cyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF07IHRlWyAxIF0gPSBtZVsgMSBdOyB0ZVsgMiBdID0gbWVbIDIgXTtcblx0XHR0ZVsgMyBdID0gbWVbIDMgXTsgdGVbIDQgXSA9IG1lWyA0IF07IHRlWyA1IF0gPSBtZVsgNSBdO1xuXHRcdHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTsgdGVbIDggXSA9IG1lWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdG1lWyAwIF0sIG1lWyA0IF0sIG1lWyA4IF0sXG5cdFx0XHRtZVsgMSBdLCBtZVsgNSBdLCBtZVsgOSBdLFxuXHRcdFx0bWVbIDIgXSwgbWVbIDYgXSwgbWVbIDEwIF1cblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCBfdmVjdG9yID09PSB1bmRlZmluZWQgKSBfdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IueCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG5cdFx0XHRfdmVjdG9yLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaSApO1xuXHRcdFx0X3ZlY3Rvci56ID0gYXR0cmlidXRlLmdldFooIGkgKTtcblxuXHRcdFx0X3ZlY3Rvci5hcHBseU1hdHJpeDMoIHRoaXMgKTtcblxuXHRcdFx0YXR0cmlidXRlLnNldFhZWiggaSwgX3ZlY3Rvci54LCBfdmVjdG9yLnksIF92ZWN0b3IueiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGF0dHJpYnV0ZTtcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fSxcblxuXHRwcmVtdWx0aXBseTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlNYXRyaWNlczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dmFyIGFlID0gYS5lbGVtZW50cztcblx0XHR2YXIgYmUgPSBiLmVsZW1lbnRzO1xuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgYTExID0gYWVbIDAgXSwgYTEyID0gYWVbIDMgXSwgYTEzID0gYWVbIDYgXTtcblx0XHR2YXIgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDQgXSwgYTIzID0gYWVbIDcgXTtcblx0XHR2YXIgYTMxID0gYWVbIDIgXSwgYTMyID0gYWVbIDUgXSwgYTMzID0gYWVbIDggXTtcblxuXHRcdHZhciBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgMyBdLCBiMTMgPSBiZVsgNiBdO1xuXHRcdHZhciBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNCBdLCBiMjMgPSBiZVsgNyBdO1xuXHRcdHZhciBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNSBdLCBiMzMgPSBiZVsgOCBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMTtcblx0XHR0ZVsgMyBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuXHRcdHRlWyA2IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzM7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxO1xuXHRcdHRlWyA0IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzI7XG5cdFx0dGVbIDcgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMztcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzE7XG5cdFx0dGVbIDUgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMjtcblx0XHR0ZVsgOCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDMgXSAqPSBzOyB0ZVsgNiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNCBdICo9IHM7IHRlWyA3IF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA1IF0gKj0gczsgdGVbIDggXSAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkZXRlcm1pbmFudDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBhID0gdGVbIDAgXSwgYiA9IHRlWyAxIF0sIGMgPSB0ZVsgMiBdLFxuXHRcdFx0ZCA9IHRlWyAzIF0sIGUgPSB0ZVsgNCBdLCBmID0gdGVbIDUgXSxcblx0XHRcdGcgPSB0ZVsgNiBdLCBoID0gdGVbIDcgXSwgaSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYSAqIGUgKiBpIC0gYSAqIGYgKiBoIC0gYiAqIGQgKiBpICsgYiAqIGYgKiBnICsgYyAqIGQgKiBoIC0gYyAqIGUgKiBnO1xuXG5cdH0sXG5cblx0Z2V0SW52ZXJzZTogZnVuY3Rpb24gKCBtYXRyaXgsIHRocm93T25EZWdlbmVyYXRlICkge1xuXG5cdFx0aWYgKCBtYXRyaXggJiYgbWF0cml4LmlzTWF0cml4NCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggXCJUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIG5vIGxvbmdlciB0YWtlcyBhIE1hdHJpeDQgYXJndW1lbnQuXCIgKTtcblxuXHRcdH1cblxuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cyxcblx0XHRcdHRlID0gdGhpcy5lbGVtZW50cyxcblxuXHRcdFx0bjExID0gbWVbIDAgXSwgbjIxID0gbWVbIDEgXSwgbjMxID0gbWVbIDIgXSxcblx0XHRcdG4xMiA9IG1lWyAzIF0sIG4yMiA9IG1lWyA0IF0sIG4zMiA9IG1lWyA1IF0sXG5cdFx0XHRuMTMgPSBtZVsgNiBdLCBuMjMgPSBtZVsgNyBdLCBuMzMgPSBtZVsgOCBdLFxuXG5cdFx0XHR0MTEgPSBuMzMgKiBuMjIgLSBuMzIgKiBuMjMsXG5cdFx0XHR0MTIgPSBuMzIgKiBuMTMgLSBuMzMgKiBuMTIsXG5cdFx0XHR0MTMgPSBuMjMgKiBuMTIgLSBuMjIgKiBuMTMsXG5cblx0XHRcdGRldCA9IG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMztcblxuXHRcdGlmICggZGV0ID09PSAwICkge1xuXG5cdFx0XHR2YXIgbXNnID0gXCJUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIjtcblxuXHRcdFx0aWYgKCB0aHJvd09uRGVnZW5lcmF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG4vL1x0XHRcdFx0Y29uc29sZS53YXJuKCBtc2cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5pZGVudGl0eSgpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGRldEludiA9IDEgLyBkZXQ7XG5cblx0XHR0ZVsgMCBdID0gdDExICogZGV0SW52O1xuXHRcdHRlWyAxIF0gPSAoIG4zMSAqIG4yMyAtIG4zMyAqIG4yMSApICogZGV0SW52O1xuXHRcdHRlWyAyIF0gPSAoIG4zMiAqIG4yMSAtIG4zMSAqIG4yMiApICogZGV0SW52O1xuXG5cdFx0dGVbIDMgXSA9IHQxMiAqIGRldEludjtcblx0XHR0ZVsgNCBdID0gKCBuMzMgKiBuMTEgLSBuMzEgKiBuMTMgKSAqIGRldEludjtcblx0XHR0ZVsgNSBdID0gKCBuMzEgKiBuMTIgLSBuMzIgKiBuMTEgKSAqIGRldEludjtcblxuXHRcdHRlWyA2IF0gPSB0MTMgKiBkZXRJbnY7XG5cdFx0dGVbIDcgXSA9ICggbjIxICogbjEzIC0gbjIzICogbjExICkgKiBkZXRJbnY7XG5cdFx0dGVbIDggXSA9ICggbjIyICogbjExIC0gbjIxICogbjEyICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyYW5zcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRtcCwgbSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0bXAgPSBtWyAxIF07IG1bIDEgXSA9IG1bIDMgXTsgbVsgMyBdID0gdG1wO1xuXHRcdHRtcCA9IG1bIDIgXTsgbVsgMiBdID0gbVsgNiBdOyBtWyA2IF0gPSB0bXA7XG5cdFx0dG1wID0gbVsgNSBdOyBtWyA1IF0gPSBtWyA3IF07IG1bIDcgXSA9IHRtcDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Tm9ybWFsTWF0cml4OiBmdW5jdGlvbiAoIG1hdHJpeDQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4NCggbWF0cml4NCApLmdldEludmVyc2UoIHRoaXMgKS50cmFuc3Bvc2UoKTtcblxuXHR9LFxuXG5cdHRyYW5zcG9zZUludG9BcnJheTogZnVuY3Rpb24gKCByICkge1xuXG5cdFx0dmFyIG0gPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0clsgMCBdID0gbVsgMCBdO1xuXHRcdHJbIDEgXSA9IG1bIDMgXTtcblx0XHRyWyAyIF0gPSBtWyA2IF07XG5cdFx0clsgMyBdID0gbVsgMSBdO1xuXHRcdHJbIDQgXSA9IG1bIDQgXTtcblx0XHRyWyA1IF0gPSBtWyA3IF07XG5cdFx0clsgNiBdID0gbVsgMiBdO1xuXHRcdHJbIDcgXSA9IG1bIDUgXTtcblx0XHRyWyA4IF0gPSBtWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFV2VHJhbnNmb3JtOiBmdW5jdGlvbiAoIHR4LCB0eSwgc3gsIHN5LCByb3RhdGlvbiwgY3gsIGN5ICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggcm90YXRpb24gKTtcblx0XHR2YXIgcyA9IE1hdGguc2luKCByb3RhdGlvbiApO1xuXG5cdFx0dGhpcy5zZXQoXG5cdFx0XHRzeCAqIGMsIHN4ICogcywgLSBzeCAqICggYyAqIGN4ICsgcyAqIGN5ICkgKyBjeCArIHR4LFxuXHRcdFx0LSBzeSAqIHMsIHN5ICogYywgLSBzeSAqICggLSBzICogY3ggKyBjICogY3kgKSArIGN5ICsgdHksXG5cdFx0XHQwLCAwLCAxXG5cdFx0KTtcblxuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoIHN4LCBzeSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHN4OyB0ZVsgMyBdICo9IHN4OyB0ZVsgNiBdICo9IHN4O1xuXHRcdHRlWyAxIF0gKj0gc3k7IHRlWyA0IF0gKj0gc3k7IHRlWyA3IF0gKj0gc3k7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdGF0ZTogZnVuY3Rpb24gKCB0aGV0YSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cdFx0dmFyIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgYTExID0gdGVbIDAgXSwgYTEyID0gdGVbIDMgXSwgYTEzID0gdGVbIDYgXTtcblx0XHR2YXIgYTIxID0gdGVbIDEgXSwgYTIyID0gdGVbIDQgXSwgYTIzID0gdGVbIDcgXTtcblxuXHRcdHRlWyAwIF0gPSBjICogYTExICsgcyAqIGEyMTtcblx0XHR0ZVsgMyBdID0gYyAqIGExMiArIHMgKiBhMjI7XG5cdFx0dGVbIDYgXSA9IGMgKiBhMTMgKyBzICogYTIzO1xuXG5cdFx0dGVbIDEgXSA9IC0gcyAqIGExMSArIGMgKiBhMjE7XG5cdFx0dGVbIDQgXSA9IC0gcyAqIGExMiArIGMgKiBhMjI7XG5cdFx0dGVbIDcgXSA9IC0gcyAqIGExMyArIGMgKiBhMjM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCB0eCwgdHkgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSArPSB0eCAqIHRlWyAyIF07IHRlWyAzIF0gKz0gdHggKiB0ZVsgNSBdOyB0ZVsgNiBdICs9IHR4ICogdGVbIDggXTtcblx0XHR0ZVsgMSBdICs9IHR5ICogdGVbIDIgXTsgdGVbIDQgXSArPSB0eSAqIHRlWyA1IF07IHRlWyA3IF0gKz0gdHkgKiB0ZVsgOCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgbWUgPSBtYXRyaXguZWxlbWVudHM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRlWyAwIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRlWyAxIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRlWyAyIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGVbIDMgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNCBdID0gdGVbIDQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNSBdID0gdGVbIDUgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyA2IF0gPSB0ZVsgNiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA3IF0gPSB0ZVsgNyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBzemltZWsgLyBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrL1xuICovXG5cbnZhciBfY2FudmFzO1xuXG52YXIgSW1hZ2VVdGlscyA9IHtcblxuXHRnZXREYXRhVVJMOiBmdW5jdGlvbiAoIGltYWdlICkge1xuXG5cdFx0dmFyIGNhbnZhcztcblxuXHRcdGlmICggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ID09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRyZXR1cm4gaW1hZ2Uuc3JjO1xuXG5cdFx0fSBlbHNlIGlmICggaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHtcblxuXHRcdFx0Y2FudmFzID0gaW1hZ2U7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIF9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKTtcblxuXHRcdFx0X2NhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuXHRcdFx0X2NhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cblx0XHRcdHZhciBjb250ZXh0ID0gX2NhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cblx0XHRcdGlmICggaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZURhdGEgKSB7XG5cblx0XHRcdFx0Y29udGV4dC5wdXRJbWFnZURhdGEoIGltYWdlLCAwLCAwICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FudmFzID0gX2NhbnZhcztcblxuXHRcdH1cblxuXHRcdGlmICggY2FudmFzLndpZHRoID4gMjA0OCB8fCBjYW52YXMuaGVpZ2h0ID4gMjA0OCApIHtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoICdpbWFnZS9qcGVnJywgMC42ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gY2FudmFzLnRvRGF0YVVSTCggJ2ltYWdlL3BuZycgKTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIHN6aW1layAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvXG4gKi9cblxudmFyIHRleHR1cmVJZCA9IDA7XG5cbmZ1bmN0aW9uIFRleHR1cmUoIGltYWdlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogdGV4dHVyZUlkICsrIH0gKTtcblxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmltYWdlID0gaW1hZ2UgIT09IHVuZGVmaW5lZCA/IGltYWdlIDogVGV4dHVyZS5ERUZBVUxUX0lNQUdFO1xuXHR0aGlzLm1pcG1hcHMgPSBbXTtcblxuXHR0aGlzLm1hcHBpbmcgPSBtYXBwaW5nICE9PSB1bmRlZmluZWQgPyBtYXBwaW5nIDogVGV4dHVyZS5ERUZBVUxUX01BUFBJTkc7XG5cblx0dGhpcy53cmFwUyA9IHdyYXBTICE9PSB1bmRlZmluZWQgPyB3cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cdHRoaXMud3JhcFQgPSB3cmFwVCAhPT0gdW5kZWZpbmVkID8gd3JhcFQgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI7XG5cblx0dGhpcy5hbmlzb3Ryb3B5ID0gYW5pc290cm9weSAhPT0gdW5kZWZpbmVkID8gYW5pc290cm9weSA6IDE7XG5cblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IFJHQkFGb3JtYXQ7XG5cdHRoaXMudHlwZSA9IHR5cGUgIT09IHVuZGVmaW5lZCA/IHR5cGUgOiBVbnNpZ25lZEJ5dGVUeXBlO1xuXG5cdHRoaXMub2Zmc2V0ID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcblx0dGhpcy5yZXBlYXQgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXHR0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XG5cdHRoaXMucm90YXRpb24gPSAwO1xuXG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHRydWU7XG5cdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuXHR0aGlzLmZsaXBZID0gdHJ1ZTtcblx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSA0O1x0Ly8gdmFsaWQgdmFsdWVzOiAxLCAyLCA0LCA4IChzZWUgaHR0cDovL3d3dy5raHJvbm9zLm9yZy9vcGVuZ2xlcy9zZGsvZG9jcy9tYW4veGh0bWwvZ2xQaXhlbFN0b3JlaS54bWwpXG5cblx0Ly8gVmFsdWVzIG9mIGVuY29kaW5nICE9PSBUSFJFRS5MaW5lYXJFbmNvZGluZyBvbmx5IHN1cHBvcnRlZCBvbiBtYXAsIGVudk1hcCBhbmQgZW1pc3NpdmVNYXAuXG5cdC8vXG5cdC8vIEFsc28gY2hhbmdpbmcgdGhlIGVuY29kaW5nIGFmdGVyIGFscmVhZHkgdXNlZCBieSBhIE1hdGVyaWFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgbWFrZSB0aGUgTWF0ZXJpYWxcblx0Ly8gdXBkYXRlLiBZb3UgbmVlZCB0byBleHBsaWNpdGx5IGNhbGwgTWF0ZXJpYWwubmVlZHNVcGRhdGUgdG8gdHJpZ2dlciBpdCB0byByZWNvbXBpbGUuXG5cdHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZyAhPT0gdW5kZWZpbmVkID8gZW5jb2RpbmcgOiBMaW5lYXJFbmNvZGluZztcblxuXHR0aGlzLnZlcnNpb24gPSAwO1xuXHR0aGlzLm9uVXBkYXRlID0gbnVsbDtcblxufVxuXG5UZXh0dXJlLkRFRkFVTFRfSU1BR0UgPSB1bmRlZmluZWQ7XG5UZXh0dXJlLkRFRkFVTFRfTUFQUElORyA9IFVWTWFwcGluZztcblxuVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogVGV4dHVyZSxcblxuXHRpc1RleHR1cmU6IHRydWUsXG5cblx0dXBkYXRlTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5zZXRVdlRyYW5zZm9ybSggdGhpcy5vZmZzZXQueCwgdGhpcy5vZmZzZXQueSwgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSwgdGhpcy5yb3RhdGlvbiwgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLmltYWdlID0gc291cmNlLmltYWdlO1xuXHRcdHRoaXMubWlwbWFwcyA9IHNvdXJjZS5taXBtYXBzLnNsaWNlKCAwICk7XG5cblx0XHR0aGlzLm1hcHBpbmcgPSBzb3VyY2UubWFwcGluZztcblxuXHRcdHRoaXMud3JhcFMgPSBzb3VyY2Uud3JhcFM7XG5cdFx0dGhpcy53cmFwVCA9IHNvdXJjZS53cmFwVDtcblxuXHRcdHRoaXMubWFnRmlsdGVyID0gc291cmNlLm1hZ0ZpbHRlcjtcblx0XHR0aGlzLm1pbkZpbHRlciA9IHNvdXJjZS5taW5GaWx0ZXI7XG5cblx0XHR0aGlzLmFuaXNvdHJvcHkgPSBzb3VyY2UuYW5pc290cm9weTtcblxuXHRcdHRoaXMuZm9ybWF0ID0gc291cmNlLmZvcm1hdDtcblx0XHR0aGlzLnR5cGUgPSBzb3VyY2UudHlwZTtcblxuXHRcdHRoaXMub2Zmc2V0LmNvcHkoIHNvdXJjZS5vZmZzZXQgKTtcblx0XHR0aGlzLnJlcGVhdC5jb3B5KCBzb3VyY2UucmVwZWF0ICk7XG5cdFx0dGhpcy5jZW50ZXIuY29weSggc291cmNlLmNlbnRlciApO1xuXHRcdHRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247XG5cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeC5jb3B5KCBzb3VyY2UubWF0cml4ICk7XG5cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHNvdXJjZS5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gc291cmNlLnByZW11bHRpcGx5QWxwaGE7XG5cdFx0dGhpcy5mbGlwWSA9IHNvdXJjZS5mbGlwWTtcblx0XHR0aGlzLnVucGFja0FsaWdubWVudCA9IHNvdXJjZS51bnBhY2tBbGlnbm1lbnQ7XG5cdFx0dGhpcy5lbmNvZGluZyA9IHNvdXJjZS5lbmNvZGluZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXTtcblxuXHRcdH1cblxuXHRcdHZhciBvdXRwdXQgPSB7XG5cblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ1RleHR1cmUnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdUZXh0dXJlLnRvSlNPTidcblx0XHRcdH0sXG5cblx0XHRcdHV1aWQ6IHRoaXMudXVpZCxcblx0XHRcdG5hbWU6IHRoaXMubmFtZSxcblxuXHRcdFx0bWFwcGluZzogdGhpcy5tYXBwaW5nLFxuXG5cdFx0XHRyZXBlYXQ6IFsgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSBdLFxuXHRcdFx0b2Zmc2V0OiBbIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnkgXSxcblx0XHRcdGNlbnRlcjogWyB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55IF0sXG5cdFx0XHRyb3RhdGlvbjogdGhpcy5yb3RhdGlvbixcblxuXHRcdFx0d3JhcDogWyB0aGlzLndyYXBTLCB0aGlzLndyYXBUIF0sXG5cblx0XHRcdGZvcm1hdDogdGhpcy5mb3JtYXQsXG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0XHRlbmNvZGluZzogdGhpcy5lbmNvZGluZyxcblxuXHRcdFx0bWluRmlsdGVyOiB0aGlzLm1pbkZpbHRlcixcblx0XHRcdG1hZ0ZpbHRlcjogdGhpcy5tYWdGaWx0ZXIsXG5cdFx0XHRhbmlzb3Ryb3B5OiB0aGlzLmFuaXNvdHJvcHksXG5cblx0XHRcdGZsaXBZOiB0aGlzLmZsaXBZLFxuXG5cdFx0XHRwcmVtdWx0aXBseUFscGhhOiB0aGlzLnByZW11bHRpcGx5QWxwaGEsXG5cdFx0XHR1bnBhY2tBbGlnbm1lbnQ6IHRoaXMudW5wYWNrQWxpZ25tZW50XG5cblx0XHR9O1xuXG5cdFx0aWYgKCB0aGlzLmltYWdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFRPRE86IE1vdmUgdG8gVEhSRUUuSW1hZ2VcblxuXHRcdFx0dmFyIGltYWdlID0gdGhpcy5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZS51dWlkID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aW1hZ2UudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpOyAvLyBVR0hcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEuaW1hZ2VzWyBpbWFnZS51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR2YXIgdXJsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggaW1hZ2UgKSApIHtcblxuXHRcdFx0XHRcdC8vIHByb2Nlc3MgYXJyYXkgb2YgaW1hZ2VzIGUuZy4gQ3ViZVRleHR1cmVcblxuXHRcdFx0XHRcdHVybCA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW1hZ2UubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dXJsLnB1c2goIEltYWdlVXRpbHMuZ2V0RGF0YVVSTCggaW1hZ2VbIGkgXSApICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHByb2Nlc3Mgc2luZ2xlIGltYWdlXG5cblx0XHRcdFx0XHR1cmwgPSBJbWFnZVV0aWxzLmdldERhdGFVUkwoIGltYWdlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1ldGEuaW1hZ2VzWyBpbWFnZS51dWlkIF0gPSB7XG5cdFx0XHRcdFx0dXVpZDogaW1hZ2UudXVpZCxcblx0XHRcdFx0XHR1cmw6IHVybFxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dHB1dC5pbWFnZSA9IGltYWdlLnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXSA9IG91dHB1dDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9LFxuXG5cdHRyYW5zZm9ybVV2OiBmdW5jdGlvbiAoIHV2ICkge1xuXG5cdFx0aWYgKCB0aGlzLm1hcHBpbmcgIT09IFVWTWFwcGluZyApIHJldHVybiB1djtcblxuXHRcdHV2LmFwcGx5TWF0cml4MyggdGhpcy5tYXRyaXggKTtcblxuXHRcdGlmICggdXYueCA8IDAgfHwgdXYueCA+IDEgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMud3JhcFMgKSB7XG5cblx0XHRcdFx0Y2FzZSBSZXBlYXRXcmFwcGluZzpcblxuXHRcdFx0XHRcdHV2LnggPSB1di54IC0gTWF0aC5mbG9vciggdXYueCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgQ2xhbXBUb0VkZ2VXcmFwcGluZzpcblxuXHRcdFx0XHRcdHV2LnggPSB1di54IDwgMCA/IDAgOiAxO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgTWlycm9yZWRSZXBlYXRXcmFwcGluZzpcblxuXHRcdFx0XHRcdGlmICggTWF0aC5hYnMoIE1hdGguZmxvb3IoIHV2LnggKSAlIDIgKSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0dXYueCA9IE1hdGguY2VpbCggdXYueCApIC0gdXYueDtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHV2LnggPSB1di54IC0gTWF0aC5mbG9vciggdXYueCApO1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2LnkgPCAwIHx8IHV2LnkgPiAxICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLndyYXBUICkge1xuXG5cdFx0XHRcdGNhc2UgUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di55ID0gdXYueSAtIE1hdGguZmxvb3IoIHV2LnkgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di55ID0gdXYueSA8IDAgPyAwIDogMTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di55ICkgJSAyICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdHV2LnkgPSBNYXRoLmNlaWwoIHV2LnkgKSAtIHV2Lnk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1di55ID0gdXYueSAtIE1hdGguZmxvb3IoIHV2LnkgKTtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmZsaXBZICkge1xuXG5cdFx0XHR1di55ID0gMSAtIHV2Lnk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdXY7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggVGV4dHVyZS5wcm90b3R5cGUsIFwibmVlZHNVcGRhdGVcIiwge1xuXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBzdXBlcmVnZ2JlcnQgLyBodHRwOi8vd3d3LnBhdWxicnVudC5jby51ay9cbiAqIEBhdXRob3IgcGhpbG9nYiAvIGh0dHA6Ly9ibG9nLnRoZWppdC5vcmcvXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBlZ3JhZXRoZXIgLyBodHRwOi8vZWdyYWV0aGVyLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIFZlY3RvcjQoIHgsIHksIHosIHcgKSB7XG5cblx0dGhpcy54ID0geCB8fCAwO1xuXHR0aGlzLnkgPSB5IHx8IDA7XG5cdHRoaXMueiA9IHogfHwgMDtcblx0dGhpcy53ID0gKCB3ICE9PSB1bmRlZmluZWQgKSA/IHcgOiAxO1xuXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWZWN0b3I0LnByb3RvdHlwZSwge1xuXG5cdFwid2lkdGhcIjoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLno7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLnogPSB2YWx1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdFwiaGVpZ2h0XCI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy53O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy53ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFZlY3RvcjQucHJvdG90eXBlLCB7XG5cblx0aXNWZWN0b3I0OiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cdFx0dGhpcy53ID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cdFx0dGhpcy56ID0gc2NhbGFyO1xuXHRcdHRoaXMudyA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WDogZnVuY3Rpb24gKCB4ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WTogZnVuY3Rpb24gKCB5ICkge1xuXG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WjogZnVuY3Rpb24gKCB6ICkge1xuXG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0VzogZnVuY3Rpb24gKCB3ICkge1xuXG5cdFx0dGhpcy53ID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoIGluZGV4LCB2YWx1ZSApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDM6IHRoaXMudyA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRjYXNlIDI6IHJldHVybiB0aGlzLno7XG5cdFx0XHRjYXNlIDM6IHJldHVybiB0aGlzLnc7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53ICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXHRcdHRoaXMueiA9IHYuejtcblx0XHR0aGlzLncgPSAoIHYudyAhPT0gdW5kZWZpbmVkICkgPyB2LncgOiAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXHRcdHRoaXMueiArPSB2Lno7XG5cdFx0dGhpcy53ICs9IHYudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gcztcblx0XHR0aGlzLnkgKz0gcztcblx0XHR0aGlzLnogKz0gcztcblx0XHR0aGlzLncgKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cdFx0dGhpcy53ID0gYS53ICsgYi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsZWRWZWN0b3I6IGZ1bmN0aW9uICggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXHRcdHRoaXMueiArPSB2LnogKiBzO1xuXHRcdHRoaXMudyArPSB2LncgKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWI6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54IC09IHYueDtcblx0XHR0aGlzLnkgLT0gdi55O1xuXHRcdHRoaXMueiAtPSB2Lno7XG5cdFx0dGhpcy53IC09IHYudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnggLT0gcztcblx0XHR0aGlzLnkgLT0gcztcblx0XHR0aGlzLnogLT0gcztcblx0XHR0aGlzLncgLT0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcblx0XHR0aGlzLnogPSBhLnogLSBiLno7XG5cdFx0dGhpcy53ID0gYS53IC0gYi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcblx0XHR0aGlzLncgKj0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56LCB3ID0gdGhpcy53O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogeiArIGVbIDEyIF0gKiB3O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKiB3O1xuXHRcdHRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHogKyBlWyAxNCBdICogdztcblx0XHR0aGlzLncgPSBlWyAzIF0gKiB4ICsgZVsgNyBdICogeSArIGVbIDExIF0gKiB6ICsgZVsgMTUgXSAqIHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH0sXG5cblx0c2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9xdWF0ZXJuaW9uVG9BbmdsZS9pbmRleC5odG1cblxuXHRcdC8vIHEgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHR0aGlzLncgPSAyICogTWF0aC5hY29zKCBxLncgKTtcblxuXHRcdHZhciBzID0gTWF0aC5zcXJ0KCAxIC0gcS53ICogcS53ICk7XG5cblx0XHRpZiAoIHMgPCAwLjAwMDEgKSB7XG5cblx0XHRcdHRoaXMueCA9IDE7XG5cdFx0XHR0aGlzLnkgPSAwO1xuXHRcdFx0dGhpcy56ID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMueCA9IHEueCAvIHM7XG5cdFx0XHR0aGlzLnkgPSBxLnkgLyBzO1xuXHRcdFx0dGhpcy56ID0gcS56IC8gcztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9BbmdsZS9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR2YXIgYW5nbGUsIHgsIHksIHosXHRcdC8vIHZhcmlhYmxlcyBmb3IgcmVzdWx0XG5cdFx0XHRlcHNpbG9uID0gMC4wMSxcdFx0Ly8gbWFyZ2luIHRvIGFsbG93IGZvciByb3VuZGluZyBlcnJvcnNcblx0XHRcdGVwc2lsb24yID0gMC4xLFx0XHQvLyBtYXJnaW4gdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiAwIGFuZCAxODAgZGVncmVlc1xuXG5cdFx0XHR0ZSA9IG0uZWxlbWVudHMsXG5cblx0XHRcdG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF0sXG5cdFx0XHRtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdLFxuXHRcdFx0bTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF07XG5cblx0XHRpZiAoICggTWF0aC5hYnMoIG0xMiAtIG0yMSApIDwgZXBzaWxvbiApICYmXG5cdFx0ICAgICAoIE1hdGguYWJzKCBtMTMgLSBtMzEgKSA8IGVwc2lsb24gKSAmJlxuXHRcdCAgICAgKCBNYXRoLmFicyggbTIzIC0gbTMyICkgPCBlcHNpbG9uICkgKSB7XG5cblx0XHRcdC8vIHNpbmd1bGFyaXR5IGZvdW5kXG5cdFx0XHQvLyBmaXJzdCBjaGVjayBmb3IgaWRlbnRpdHkgbWF0cml4IHdoaWNoIG11c3QgaGF2ZSArMSBmb3IgYWxsIHRlcm1zXG5cdFx0XHQvLyBpbiBsZWFkaW5nIGRpYWdvbmFsIGFuZCB6ZXJvIGluIG90aGVyIHRlcm1zXG5cblx0XHRcdGlmICggKCBNYXRoLmFicyggbTEyICsgbTIxICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0xMyArIG0zMSApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMjMgKyBtMzIgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTExICsgbTIyICsgbTMzIC0gMyApIDwgZXBzaWxvbjIgKSApIHtcblxuXHRcdFx0XHQvLyB0aGlzIHNpbmd1bGFyaXR5IGlzIGlkZW50aXR5IG1hdHJpeCBzbyBhbmdsZSA9IDBcblxuXHRcdFx0XHR0aGlzLnNldCggMSwgMCwgMCwgMCApO1xuXG5cdFx0XHRcdHJldHVybiB0aGlzOyAvLyB6ZXJvIGFuZ2xlLCBhcmJpdHJhcnkgYXhpc1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIG90aGVyd2lzZSB0aGlzIHNpbmd1bGFyaXR5IGlzIGFuZ2xlID0gMTgwXG5cblx0XHRcdGFuZ2xlID0gTWF0aC5QSTtcblxuXHRcdFx0dmFyIHh4ID0gKCBtMTEgKyAxICkgLyAyO1xuXHRcdFx0dmFyIHl5ID0gKCBtMjIgKyAxICkgLyAyO1xuXHRcdFx0dmFyIHp6ID0gKCBtMzMgKyAxICkgLyAyO1xuXHRcdFx0dmFyIHh5ID0gKCBtMTIgKyBtMjEgKSAvIDQ7XG5cdFx0XHR2YXIgeHogPSAoIG0xMyArIG0zMSApIC8gNDtcblx0XHRcdHZhciB5eiA9ICggbTIzICsgbTMyICkgLyA0O1xuXG5cdFx0XHRpZiAoICggeHggPiB5eSApICYmICggeHggPiB6eiApICkge1xuXG5cdFx0XHRcdC8vIG0xMSBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtXG5cblx0XHRcdFx0aWYgKCB4eCA8IGVwc2lsb24gKSB7XG5cblx0XHRcdFx0XHR4ID0gMDtcblx0XHRcdFx0XHR5ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eiA9IDAuNzA3MTA2NzgxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR4ID0gTWF0aC5zcXJ0KCB4eCApO1xuXHRcdFx0XHRcdHkgPSB4eSAvIHg7XG5cdFx0XHRcdFx0eiA9IHh6IC8geDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHl5ID4genogKSB7XG5cblx0XHRcdFx0Ly8gbTIyIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm1cblxuXHRcdFx0XHRpZiAoIHl5IDwgZXBzaWxvbiApIHtcblxuXHRcdFx0XHRcdHggPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR5ID0gMDtcblx0XHRcdFx0XHR6ID0gMC43MDcxMDY3ODE7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHkgPSBNYXRoLnNxcnQoIHl5ICk7XG5cdFx0XHRcdFx0eCA9IHh5IC8geTtcblx0XHRcdFx0XHR6ID0geXogLyB5O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBtMzMgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybSBzbyBiYXNlIHJlc3VsdCBvbiB0aGlzXG5cblx0XHRcdFx0aWYgKCB6eiA8IGVwc2lsb24gKSB7XG5cblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eSA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHogPSAwO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR6ID0gTWF0aC5zcXJ0KCB6eiApO1xuXHRcdFx0XHRcdHggPSB4eiAvIHo7XG5cdFx0XHRcdFx0eSA9IHl6IC8gejtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXQoIHgsIHksIHosIGFuZ2xlICk7XG5cblx0XHRcdHJldHVybiB0aGlzOyAvLyByZXR1cm4gMTgwIGRlZyByb3RhdGlvblxuXG5cdFx0fVxuXG5cdFx0Ly8gYXMgd2UgaGF2ZSByZWFjaGVkIGhlcmUgdGhlcmUgYXJlIG5vIHNpbmd1bGFyaXRpZXMgc28gd2UgY2FuIGhhbmRsZSBub3JtYWxseVxuXG5cdFx0dmFyIHMgPSBNYXRoLnNxcnQoICggbTMyIC0gbTIzICkgKiAoIG0zMiAtIG0yMyApICtcblx0XHQgICAgICAgICAgICAgICAgICAgKCBtMTMgLSBtMzEgKSAqICggbTEzIC0gbTMxICkgK1xuXHRcdCAgICAgICAgICAgICAgICAgICAoIG0yMSAtIG0xMiApICogKCBtMjEgLSBtMTIgKSApOyAvLyB1c2VkIHRvIG5vcm1hbGl6ZVxuXG5cdFx0aWYgKCBNYXRoLmFicyggcyApIDwgMC4wMDEgKSBzID0gMTtcblxuXHRcdC8vIHByZXZlbnQgZGl2aWRlIGJ5IHplcm8sIHNob3VsZCBub3QgaGFwcGVuIGlmIG1hdHJpeCBpcyBvcnRob2dvbmFsIGFuZCBzaG91bGQgYmVcblx0XHQvLyBjYXVnaHQgYnkgc2luZ3VsYXJpdHkgdGVzdCBhYm92ZSwgYnV0IEkndmUgbGVmdCBpdCBpbiBqdXN0IGluIGNhc2VcblxuXHRcdHRoaXMueCA9ICggbTMyIC0gbTIzICkgLyBzO1xuXHRcdHRoaXMueSA9ICggbTEzIC0gbTMxICkgLyBzO1xuXHRcdHRoaXMueiA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdHRoaXMudyA9IE1hdGguYWNvcyggKCBtMTEgKyBtMjIgKyBtMzMgLSAxICkgLyAyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1pbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5taW4oIHRoaXMudywgdi53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1heDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5tYXgoIHRoaXMudywgdi53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW4ueiwgTWF0aC5taW4oIG1heC56LCB0aGlzLnogKSApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCBtaW4udywgTWF0aC5taW4oIG1heC53LCB0aGlzLncgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcFNjYWxhcjogZnVuY3Rpb24gKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnogKSApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMudyApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wTGVuZ3RoOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9LFxuXG5cdGZsb29yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLmZsb29yKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2VpbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5jZWlsKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgucm91bmQoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9IE1hdGgucm91bmQoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gKCB0aGlzLnogPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueiApIDogTWF0aC5mbG9vciggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gKCB0aGlzLncgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMudyApIDogTWF0aC5mbG9vciggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XG5cdFx0dGhpcy53ID0gLSB0aGlzLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYueiArIHRoaXMudyAqIHYudztcblxuXHR9LFxuXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuXG5cdH0sXG5cblx0bGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLncgKTtcblxuXHR9LFxuXG5cdG1hbmhhdHRhbkxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKSArIE1hdGguYWJzKCB0aGlzLncgKTtcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9LFxuXG5cdHNldExlbmd0aDogZnVuY3Rpb24gKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXHRcdHRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7XG5cdFx0dGhpcy53ICs9ICggdi53IC0gdGhpcy53ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycFZlY3RvcnM6IGZ1bmN0aW9uICggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYyLCB2MSApLm11bHRpcGx5U2NhbGFyKCBhbHBoYSApLmFkZCggdjEgKTtcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSAmJiAoIHYueiA9PT0gdGhpcy56ICkgJiYgKCB2LncgPT09IHRoaXMudyApICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy56ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblx0XHR0aGlzLncgPSBhcnJheVsgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuejtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy53O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cdFx0dGhpcy53ID0gYXR0cmlidXRlLmdldFcoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHN6aW1layAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBNYXJpdXMgS2ludGVsIC8gaHR0cHM6Ly9naXRodWIuY29tL2tpbnRlbFxuICovXG5cbi8qXG4gSW4gb3B0aW9ucywgd2UgY2FuIHNwZWNpZnk6XG4gKiBUZXh0dXJlIHBhcmFtZXRlcnMgZm9yIGFuIGF1dG8tZ2VuZXJhdGVkIHRhcmdldCB0ZXh0dXJlXG4gKiBkZXB0aEJ1ZmZlci9zdGVuY2lsQnVmZmVyOiBCb29sZWFucyB0byBpbmRpY2F0ZSBpZiB3ZSBzaG91bGQgZ2VuZXJhdGUgdGhlc2UgYnVmZmVyc1xuKi9cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdHRoaXMud2lkdGggPSB3aWR0aDtcblx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0dGhpcy5zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblx0dGhpcy5zY2lzc29yVGVzdCA9IGZhbHNlO1xuXG5cdHRoaXMudmlld3BvcnQgPSBuZXcgVmVjdG9yNCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdHRoaXMudGV4dHVyZSA9IG5ldyBUZXh0dXJlKCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb3B0aW9ucy53cmFwUywgb3B0aW9ucy53cmFwVCwgb3B0aW9ucy5tYWdGaWx0ZXIsIG9wdGlvbnMubWluRmlsdGVyLCBvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy50eXBlLCBvcHRpb25zLmFuaXNvdHJvcHksIG9wdGlvbnMuZW5jb2RpbmcgKTtcblxuXHR0aGlzLnRleHR1cmUuaW1hZ2UgPSB7fTtcblx0dGhpcy50ZXh0dXJlLmltYWdlLndpZHRoID0gd2lkdGg7XG5cdHRoaXMudGV4dHVyZS5pbWFnZS5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyA6IGZhbHNlO1xuXHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gb3B0aW9ucy5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWluRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXG5cdHRoaXMuZGVwdGhCdWZmZXIgPSBvcHRpb25zLmRlcHRoQnVmZmVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoQnVmZmVyIDogdHJ1ZTtcblx0dGhpcy5zdGVuY2lsQnVmZmVyID0gb3B0aW9ucy5zdGVuY2lsQnVmZmVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnN0ZW5jaWxCdWZmZXIgOiB0cnVlO1xuXHR0aGlzLmRlcHRoVGV4dHVyZSA9IG9wdGlvbnMuZGVwdGhUZXh0dXJlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoVGV4dHVyZSA6IG51bGw7XG5cbn1cblxuV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFdlYkdMUmVuZGVyVGFyZ2V0LFxuXG5cdGlzV2ViR0xSZW5kZXJUYXJnZXQ6IHRydWUsXG5cblx0c2V0U2l6ZTogZnVuY3Rpb24gKCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0aWYgKCB0aGlzLndpZHRoICE9PSB3aWR0aCB8fCB0aGlzLmhlaWdodCAhPT0gaGVpZ2h0ICkge1xuXG5cdFx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuXHRcdFx0dGhpcy50ZXh0dXJlLmltYWdlLndpZHRoID0gd2lkdGg7XG5cdFx0XHR0aGlzLnRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cblx0XHR0aGlzLnZpZXdwb3J0LmNvcHkoIHNvdXJjZS52aWV3cG9ydCApO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gc291cmNlLnRleHR1cmUuY2xvbmUoKTtcblxuXHRcdHRoaXMuZGVwdGhCdWZmZXIgPSBzb3VyY2UuZGVwdGhCdWZmZXI7XG5cdFx0dGhpcy5zdGVuY2lsQnVmZmVyID0gc291cmNlLnN0ZW5jaWxCdWZmZXI7XG5cdFx0dGhpcy5kZXB0aFRleHR1cmUgPSBzb3VyY2UuZGVwdGhUZXh0dXJlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBNYXR0IERlc0xhdXJpZXJzIC8gQG1hdHRkZXNsXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIHtcblxuXHRXZWJHTFJlbmRlclRhcmdldC5jYWxsKCB0aGlzLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XG5cblx0dGhpcy5zYW1wbGVzID0gNDtcblxufVxuXG5XZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIFdlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQsXG5cblx0aXNXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0V2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLnNhbXBsZXMgPSBzb3VyY2Uuc2FtcGxlcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIHN1cGVyZWdnYmVydCAvIGh0dHA6Ly93d3cucGF1bGJydW50LmNvLnVrL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3Igam9yZGlfcm9zIC8gaHR0cDovL3BsYXR0c29mdC5jb21cbiAqIEBhdXRob3IgRDFwbG8xZCAvIGh0dHA6Ly9naXRodWIuY29tL0QxcGxvMWRcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciB0aW1rbmlwIC8gaHR0cDovL3d3dy5mbG9vcnBsYW5uZXIuY29tL1xuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gTWF0cml4NCgpIHtcblxuXHR0aGlzLmVsZW1lbnRzID0gW1xuXG5cdFx0MSwgMCwgMCwgMCxcblx0XHQwLCAxLCAwLCAwLFxuXHRcdDAsIDAsIDEsIDAsXG5cdFx0MCwgMCwgMCwgMVxuXG5cdF07XG5cblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMCApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiB0aGUgY29uc3RydWN0b3Igbm8gbG9uZ2VyIHJlYWRzIGFyZ3VtZW50cy4gdXNlIC5zZXQoKSBpbnN0ZWFkLicgKTtcblxuXHR9XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTWF0cml4NC5wcm90b3R5cGUsIHtcblxuXHRpc01hdHJpeDQ6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIG4xMSwgbjEyLCBuMTMsIG4xNCwgbjIxLCBuMjIsIG4yMywgbjI0LCBuMzEsIG4zMiwgbjMzLCBuMzQsIG40MSwgbjQyLCBuNDMsIG40NCApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgNCBdID0gbjEyOyB0ZVsgOCBdID0gbjEzOyB0ZVsgMTIgXSA9IG4xNDtcblx0XHR0ZVsgMSBdID0gbjIxOyB0ZVsgNSBdID0gbjIyOyB0ZVsgOSBdID0gbjIzOyB0ZVsgMTMgXSA9IG4yNDtcblx0XHR0ZVsgMiBdID0gbjMxOyB0ZVsgNiBdID0gbjMyOyB0ZVsgMTAgXSA9IG4zMzsgdGVbIDE0IF0gPSBuMzQ7XG5cdFx0dGVbIDMgXSA9IG40MTsgdGVbIDcgXSA9IG40MjsgdGVbIDExIF0gPSBuNDM7IHRlWyAxNSBdID0gbjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpZGVudGl0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLCAwLFxuXHRcdFx0MCwgMCwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHRoaXMuZWxlbWVudHMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07IHRlWyAzIF0gPSBtZVsgMyBdO1xuXHRcdHRlWyA0IF0gPSBtZVsgNCBdOyB0ZVsgNSBdID0gbWVbIDUgXTsgdGVbIDYgXSA9IG1lWyA2IF07IHRlWyA3IF0gPSBtZVsgNyBdO1xuXHRcdHRlWyA4IF0gPSBtZVsgOCBdOyB0ZVsgOSBdID0gbWVbIDkgXTsgdGVbIDEwIF0gPSBtZVsgMTAgXTsgdGVbIDExIF0gPSBtZVsgMTEgXTtcblx0XHR0ZVsgMTIgXSA9IG1lWyAxMiBdOyB0ZVsgMTMgXSA9IG1lWyAxMyBdOyB0ZVsgMTQgXSA9IG1lWyAxNCBdOyB0ZVsgMTUgXSA9IG1lWyAxNSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5UG9zaXRpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07XG5cdFx0dGVbIDEzIF0gPSBtZVsgMTMgXTtcblx0XHR0ZVsgMTQgXSA9IG1lWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHRyYWN0QmFzaXM6IGZ1bmN0aW9uICggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHhBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDAgKTtcblx0XHR5QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAxICk7XG5cdFx0ekF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlQmFzaXM6IGZ1bmN0aW9uICggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHRoaXMuc2V0KFxuXHRcdFx0eEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMCxcblx0XHRcdHhBeGlzLnksIHlBeGlzLnksIHpBeGlzLnksIDAsXG5cdFx0XHR4QXhpcy56LCB5QXhpcy56LCB6QXhpcy56LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGV4dHJhY3RSb3RhdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBleHRyYWN0Um90YXRpb24oIG0gKSB7XG5cblx0XHRcdC8vIHRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgcmVmbGVjdGlvbiBtYXRyaWNlc1xuXG5cdFx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdFx0dmFyIG1lID0gbS5lbGVtZW50cztcblxuXHRcdFx0dmFyIHNjYWxlWCA9IDEgLyB2MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAwICkubGVuZ3RoKCk7XG5cdFx0XHR2YXIgc2NhbGVZID0gMSAvIHYxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDEgKS5sZW5ndGgoKTtcblx0XHRcdHZhciBzY2FsZVogPSAxIC8gdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0XHR0ZVsgMCBdID0gbWVbIDAgXSAqIHNjYWxlWDtcblx0XHRcdHRlWyAxIF0gPSBtZVsgMSBdICogc2NhbGVYO1xuXHRcdFx0dGVbIDIgXSA9IG1lWyAyIF0gKiBzY2FsZVg7XG5cdFx0XHR0ZVsgMyBdID0gMDtcblxuXHRcdFx0dGVbIDQgXSA9IG1lWyA0IF0gKiBzY2FsZVk7XG5cdFx0XHR0ZVsgNSBdID0gbWVbIDUgXSAqIHNjYWxlWTtcblx0XHRcdHRlWyA2IF0gPSBtZVsgNiBdICogc2NhbGVZO1xuXHRcdFx0dGVbIDcgXSA9IDA7XG5cblx0XHRcdHRlWyA4IF0gPSBtZVsgOCBdICogc2NhbGVaO1xuXHRcdFx0dGVbIDkgXSA9IG1lWyA5IF0gKiBzY2FsZVo7XG5cdFx0XHR0ZVsgMTAgXSA9IG1lWyAxMCBdICogc2NhbGVaO1xuXHRcdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0XHR0ZVsgMTIgXSA9IDA7XG5cdFx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0XHR0ZVsgMTQgXSA9IDA7XG5cdFx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bWFrZVJvdGF0aW9uRnJvbUV1bGVyOiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0aWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLm1ha2VSb3RhdGlvbkZyb21FdWxlcigpIG5vdyBleHBlY3RzIGEgRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nICk7XG5cblx0XHR9XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHggPSBldWxlci54LCB5ID0gZXVsZXIueSwgeiA9IGV1bGVyLno7XG5cdFx0dmFyIGEgPSBNYXRoLmNvcyggeCApLCBiID0gTWF0aC5zaW4oIHggKTtcblx0XHR2YXIgYyA9IE1hdGguY29zKCB5ICksIGQgPSBNYXRoLnNpbiggeSApO1xuXHRcdHZhciBlID0gTWF0aC5jb3MoIHogKSwgZiA9IE1hdGguc2luKCB6ICk7XG5cblx0XHRpZiAoIGV1bGVyLm9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0dmFyIGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGQ7XG5cblx0XHRcdHRlWyAxIF0gPSBhZiArIGJlICogZDtcblx0XHRcdHRlWyA1IF0gPSBhZSAtIGJmICogZDtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBjO1xuXG5cdFx0XHR0ZVsgMiBdID0gYmYgLSBhZSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYmUgKyBhZiAqIGQ7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWFonICkge1xuXG5cdFx0XHR2YXIgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGNlICsgZGYgKiBiO1xuXHRcdFx0dGVbIDQgXSA9IGRlICogYiAtIGNmO1xuXHRcdFx0dGVbIDggXSA9IGEgKiBkO1xuXG5cdFx0XHR0ZVsgMSBdID0gYSAqIGY7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gLSBiO1xuXG5cdFx0XHR0ZVsgMiBdID0gY2YgKiBiIC0gZGU7XG5cdFx0XHR0ZVsgNiBdID0gZGYgKyBjZSAqIGI7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHR2YXIgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGNlIC0gZGYgKiBiO1xuXHRcdFx0dGVbIDQgXSA9IC0gYSAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZGUgKyBjZiAqIGI7XG5cblx0XHRcdHRlWyAxIF0gPSBjZiArIGRlICogYjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBkZiAtIGNlICogYjtcblxuXHRcdFx0dGVbIDIgXSA9IC0gYSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYjtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pZWCcgKSB7XG5cblx0XHRcdHZhciBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gYmUgKiBkIC0gYWY7XG5cdFx0XHR0ZVsgOCBdID0gYWUgKiBkICsgYmY7XG5cblx0XHRcdHRlWyAxIF0gPSBjICogZjtcblx0XHRcdHRlWyA1IF0gPSBiZiAqIGQgKyBhZTtcblx0XHRcdHRlWyA5IF0gPSBhZiAqIGQgLSBiZTtcblxuXHRcdFx0dGVbIDIgXSA9IC0gZDtcblx0XHRcdHRlWyA2IF0gPSBiICogYztcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1laWCcgKSB7XG5cblx0XHRcdHZhciBhYyA9IGEgKiBjLCBhZCA9IGEgKiBkLCBiYyA9IGIgKiBjLCBiZCA9IGIgKiBkO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gYmQgLSBhYyAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gYmMgKiBmICsgYWQ7XG5cblx0XHRcdHRlWyAxIF0gPSBmO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IC0gYiAqIGU7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGQgKiBlO1xuXHRcdFx0dGVbIDYgXSA9IGFkICogZiArIGJjO1xuXHRcdFx0dGVbIDEwIF0gPSBhYyAtIGJkICogZjtcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWFpZJyApIHtcblxuXHRcdFx0dmFyIGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGY7XG5cdFx0XHR0ZVsgOCBdID0gZCAqIGU7XG5cblx0XHRcdHRlWyAxIF0gPSBhYyAqIGYgKyBiZDtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBhZCAqIGYgLSBiYztcblxuXHRcdFx0dGVbIDIgXSA9IGJjICogZiAtIGFkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBlO1xuXHRcdFx0dGVbIDEwIF0gPSBiZCAqIGYgKyBhYztcblxuXHRcdH1cblxuXHRcdC8vIGJvdHRvbSByb3dcblx0XHR0ZVsgMyBdID0gMDtcblx0XHR0ZVsgNyBdID0gMDtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHQvLyBsYXN0IGNvbHVtblxuXHRcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDE0IF0gPSAwO1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB6ZXJvID0gbmV3IFZlY3RvcjMoIDAsIDAsIDAgKTtcblx0XHR2YXIgb25lID0gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY29tcG9zZSggemVybywgcSwgb25lICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRsb29rQXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgeSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHogPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxvb2tBdCggZXllLCB0YXJnZXQsIHVwICkge1xuXG5cdFx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0XHR6LnN1YlZlY3RvcnMoIGV5ZSwgdGFyZ2V0ICk7XG5cblx0XHRcdGlmICggei5sZW5ndGhTcSgpID09PSAwICkge1xuXG5cdFx0XHRcdC8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvblxuXG5cdFx0XHRcdHoueiA9IDE7XG5cblx0XHRcdH1cblxuXHRcdFx0ei5ub3JtYWxpemUoKTtcblx0XHRcdHguY3Jvc3NWZWN0b3JzKCB1cCwgeiApO1xuXG5cdFx0XHRpZiAoIHgubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyB1cCBhbmQgeiBhcmUgcGFyYWxsZWxcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCB1cC56ICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHR6LnggKz0gMC4wMDAxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR6LnogKz0gMC4wMDAxO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR6Lm5vcm1hbGl6ZSgpO1xuXHRcdFx0XHR4LmNyb3NzVmVjdG9ycyggdXAsIHogKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR4Lm5vcm1hbGl6ZSgpO1xuXHRcdFx0eS5jcm9zc1ZlY3RvcnMoIHosIHggKTtcblxuXHRcdFx0dGVbIDAgXSA9IHgueDsgdGVbIDQgXSA9IHkueDsgdGVbIDggXSA9IHoueDtcblx0XHRcdHRlWyAxIF0gPSB4Lnk7IHRlWyA1IF0gPSB5Lnk7IHRlWyA5IF0gPSB6Lnk7XG5cdFx0XHR0ZVsgMiBdID0geC56OyB0ZVsgNiBdID0geS56OyB0ZVsgMTAgXSA9IHouejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCBtLCBuICkge1xuXG5cdFx0aWYgKCBuICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIG4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIHRoaXMsIG0gKTtcblxuXHR9LFxuXG5cdHByZW11bHRpcGx5OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCB0aGlzICk7XG5cblx0fSxcblxuXHRtdWx0aXBseU1hdHJpY2VzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR2YXIgYWUgPSBhLmVsZW1lbnRzO1xuXHRcdHZhciBiZSA9IGIuZWxlbWVudHM7XG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgNCBdLCBhMTMgPSBhZVsgOCBdLCBhMTQgPSBhZVsgMTIgXTtcblx0XHR2YXIgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDUgXSwgYTIzID0gYWVbIDkgXSwgYTI0ID0gYWVbIDEzIF07XG5cdFx0dmFyIGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA2IF0sIGEzMyA9IGFlWyAxMCBdLCBhMzQgPSBhZVsgMTQgXTtcblx0XHR2YXIgYTQxID0gYWVbIDMgXSwgYTQyID0gYWVbIDcgXSwgYTQzID0gYWVbIDExIF0sIGE0NCA9IGFlWyAxNSBdO1xuXG5cdFx0dmFyIGIxMSA9IGJlWyAwIF0sIGIxMiA9IGJlWyA0IF0sIGIxMyA9IGJlWyA4IF0sIGIxNCA9IGJlWyAxMiBdO1xuXHRcdHZhciBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNSBdLCBiMjMgPSBiZVsgOSBdLCBiMjQgPSBiZVsgMTMgXTtcblx0XHR2YXIgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDYgXSwgYjMzID0gYmVbIDEwIF0sIGIzNCA9IGJlWyAxNCBdO1xuXHRcdHZhciBiNDEgPSBiZVsgMyBdLCBiNDIgPSBiZVsgNyBdLCBiNDMgPSBiZVsgMTEgXSwgYjQ0ID0gYmVbIDE1IF07XG5cblx0XHR0ZVsgMCBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxICsgYTE0ICogYjQxO1xuXHRcdHRlWyA0IF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7XG5cdFx0dGVbIDggXSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMyArIGExNCAqIGI0Mztcblx0XHR0ZVsgMTIgXSA9IGExMSAqIGIxNCArIGExMiAqIGIyNCArIGExMyAqIGIzNCArIGExNCAqIGI0NDtcblxuXHRcdHRlWyAxIF0gPSBhMjEgKiBiMTEgKyBhMjIgKiBiMjEgKyBhMjMgKiBiMzEgKyBhMjQgKiBiNDE7XG5cdFx0dGVbIDUgXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMiArIGEyNCAqIGI0Mjtcblx0XHR0ZVsgOSBdID0gYTIxICogYjEzICsgYTIyICogYjIzICsgYTIzICogYjMzICsgYTI0ICogYjQzO1xuXHRcdHRlWyAxMyBdID0gYTIxICogYjE0ICsgYTIyICogYjI0ICsgYTIzICogYjM0ICsgYTI0ICogYjQ0O1xuXG5cdFx0dGVbIDIgXSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMSArIGEzNCAqIGI0MTtcblx0XHR0ZVsgNiBdID0gYTMxICogYjEyICsgYTMyICogYjIyICsgYTMzICogYjMyICsgYTM0ICogYjQyO1xuXHRcdHRlWyAxMCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzICsgYTM0ICogYjQzO1xuXHRcdHRlWyAxNCBdID0gYTMxICogYjE0ICsgYTMyICogYjI0ICsgYTMzICogYjM0ICsgYTM0ICogYjQ0O1xuXG5cdFx0dGVbIDMgXSA9IGE0MSAqIGIxMSArIGE0MiAqIGIyMSArIGE0MyAqIGIzMSArIGE0NCAqIGI0MTtcblx0XHR0ZVsgNyBdID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyO1xuXHRcdHRlWyAxMSBdID0gYTQxICogYjEzICsgYTQyICogYjIzICsgYTQzICogYjMzICsgYTQ0ICogYjQzO1xuXHRcdHRlWyAxNSBdID0gYTQxICogYjE0ICsgYTQyICogYjI0ICsgYTQzICogYjM0ICsgYTQ0ICogYjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgOCBdICo9IHM7IHRlWyAxMiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNSBdICo9IHM7IHRlWyA5IF0gKj0gczsgdGVbIDEzIF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA2IF0gKj0gczsgdGVbIDEwIF0gKj0gczsgdGVbIDE0IF0gKj0gcztcblx0XHR0ZVsgMyBdICo9IHM7IHRlWyA3IF0gKj0gczsgdGVbIDExIF0gKj0gczsgdGVbIDE1IF0gKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlUb0J1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseVRvQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0djEueCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG5cdFx0XHRcdHYxLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaSApO1xuXHRcdFx0XHR2MS56ID0gYXR0cmlidXRlLmdldFooIGkgKTtcblxuXHRcdFx0XHR2MS5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuc2V0WFlaKCBpLCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGF0dHJpYnV0ZTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGRldGVybWluYW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIG4xMSA9IHRlWyAwIF0sIG4xMiA9IHRlWyA0IF0sIG4xMyA9IHRlWyA4IF0sIG4xNCA9IHRlWyAxMiBdO1xuXHRcdHZhciBuMjEgPSB0ZVsgMSBdLCBuMjIgPSB0ZVsgNSBdLCBuMjMgPSB0ZVsgOSBdLCBuMjQgPSB0ZVsgMTMgXTtcblx0XHR2YXIgbjMxID0gdGVbIDIgXSwgbjMyID0gdGVbIDYgXSwgbjMzID0gdGVbIDEwIF0sIG4zNCA9IHRlWyAxNCBdO1xuXHRcdHZhciBuNDEgPSB0ZVsgMyBdLCBuNDIgPSB0ZVsgNyBdLCBuNDMgPSB0ZVsgMTEgXSwgbjQ0ID0gdGVbIDE1IF07XG5cblx0XHQvL1RPRE86IG1ha2UgdGhpcyBtb3JlIGVmZmljaWVudFxuXHRcdC8vKCBiYXNlZCBvbiBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL21hdHJpeC9mdW5jdGlvbnMvaW52ZXJzZS9mb3VyRC9pbmRleC5odG0gKVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdG40MSAqIChcblx0XHRcdFx0KyBuMTQgKiBuMjMgKiBuMzJcblx0XHRcdFx0IC0gbjEzICogbjI0ICogbjMyXG5cdFx0XHRcdCAtIG4xNCAqIG4yMiAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xMiAqIG4yMyAqIG4zNFxuXHRcdFx0KSArXG5cdFx0XHRuNDIgKiAoXG5cdFx0XHRcdCsgbjExICogbjIzICogbjM0XG5cdFx0XHRcdCAtIG4xMSAqIG4yNCAqIG4zM1xuXHRcdFx0XHQgKyBuMTQgKiBuMjEgKiBuMzNcblx0XHRcdFx0IC0gbjEzICogbjIxICogbjM0XG5cdFx0XHRcdCArIG4xMyAqIG4yNCAqIG4zMVxuXHRcdFx0XHQgLSBuMTQgKiBuMjMgKiBuMzFcblx0XHRcdCkgK1xuXHRcdFx0bjQzICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTEgKiBuMjIgKiBuMzRcblx0XHRcdFx0IC0gbjE0ICogbjIxICogbjMyXG5cdFx0XHRcdCArIG4xMiAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTQgKiBuMjIgKiBuMzFcblx0XHRcdFx0IC0gbjEyICogbjI0ICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40NCAqIChcblx0XHRcdFx0LSBuMTMgKiBuMjIgKiBuMzFcblx0XHRcdFx0IC0gbjExICogbjIzICogbjMyXG5cdFx0XHRcdCArIG4xMSAqIG4yMiAqIG4zM1xuXHRcdFx0XHQgKyBuMTMgKiBuMjEgKiBuMzJcblx0XHRcdFx0IC0gbjEyICogbjIxICogbjMzXG5cdFx0XHRcdCArIG4xMiAqIG4yMyAqIG4zMVxuXHRcdFx0KVxuXG5cdFx0KTtcblxuXHR9LFxuXG5cdHRyYW5zcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgdG1wO1xuXG5cdFx0dG1wID0gdGVbIDEgXTsgdGVbIDEgXSA9IHRlWyA0IF07IHRlWyA0IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDIgXTsgdGVbIDIgXSA9IHRlWyA4IF07IHRlWyA4IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDYgXTsgdGVbIDYgXSA9IHRlWyA5IF07IHRlWyA5IF0gPSB0bXA7XG5cblx0XHR0bXAgPSB0ZVsgMyBdOyB0ZVsgMyBdID0gdGVbIDEyIF07IHRlWyAxMiBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyA3IF07IHRlWyA3IF0gPSB0ZVsgMTMgXTsgdGVbIDEzIF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDExIF07IHRlWyAxMSBdID0gdGVbIDE0IF07IHRlWyAxNCBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRQb3NpdGlvbjogZnVuY3Rpb24gKCB4LCB5LCB6ICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGlmICggeC5pc1ZlY3RvcjMgKSB7XG5cblx0XHRcdHRlWyAxMiBdID0geC54O1xuXHRcdFx0dGVbIDEzIF0gPSB4Lnk7XG5cdFx0XHR0ZVsgMTQgXSA9IHguejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRlWyAxMiBdID0geDtcblx0XHRcdHRlWyAxMyBdID0geTtcblx0XHRcdHRlWyAxNCBdID0gejtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0SW52ZXJzZTogZnVuY3Rpb24gKCBtLCB0aHJvd09uRGVnZW5lcmF0ZSApIHtcblxuXHRcdC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bVxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cdFx0XHRtZSA9IG0uZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IG1lWyAwIF0sIG4yMSA9IG1lWyAxIF0sIG4zMSA9IG1lWyAyIF0sIG40MSA9IG1lWyAzIF0sXG5cdFx0XHRuMTIgPSBtZVsgNCBdLCBuMjIgPSBtZVsgNSBdLCBuMzIgPSBtZVsgNiBdLCBuNDIgPSBtZVsgNyBdLFxuXHRcdFx0bjEzID0gbWVbIDggXSwgbjIzID0gbWVbIDkgXSwgbjMzID0gbWVbIDEwIF0sIG40MyA9IG1lWyAxMSBdLFxuXHRcdFx0bjE0ID0gbWVbIDEyIF0sIG4yNCA9IG1lWyAxMyBdLCBuMzQgPSBtZVsgMTQgXSwgbjQ0ID0gbWVbIDE1IF0sXG5cblx0XHRcdHQxMSA9IG4yMyAqIG4zNCAqIG40MiAtIG4yNCAqIG4zMyAqIG40MiArIG4yNCAqIG4zMiAqIG40MyAtIG4yMiAqIG4zNCAqIG40MyAtIG4yMyAqIG4zMiAqIG40NCArIG4yMiAqIG4zMyAqIG40NCxcblx0XHRcdHQxMiA9IG4xNCAqIG4zMyAqIG40MiAtIG4xMyAqIG4zNCAqIG40MiAtIG4xNCAqIG4zMiAqIG40MyArIG4xMiAqIG4zNCAqIG40MyArIG4xMyAqIG4zMiAqIG40NCAtIG4xMiAqIG4zMyAqIG40NCxcblx0XHRcdHQxMyA9IG4xMyAqIG4yNCAqIG40MiAtIG4xNCAqIG4yMyAqIG40MiArIG4xNCAqIG4yMiAqIG40MyAtIG4xMiAqIG4yNCAqIG40MyAtIG4xMyAqIG4yMiAqIG40NCArIG4xMiAqIG4yMyAqIG40NCxcblx0XHRcdHQxNCA9IG4xNCAqIG4yMyAqIG4zMiAtIG4xMyAqIG4yNCAqIG4zMiAtIG4xNCAqIG4yMiAqIG4zMyArIG4xMiAqIG4yNCAqIG4zMyArIG4xMyAqIG4yMiAqIG4zNCAtIG4xMiAqIG4yMyAqIG4zNDtcblxuXHRcdHZhciBkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTMgKyBuNDEgKiB0MTQ7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHtcblxuXHRcdFx0dmFyIG1zZyA9IFwiVEhSRUUuTWF0cml4NDogLmdldEludmVyc2UoKSBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCI7XG5cblx0XHRcdGlmICggdGhyb3dPbkRlZ2VuZXJhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIG1zZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG5cblx0XHR9XG5cblx0XHR2YXIgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjI0ICogbjMzICogbjQxIC0gbjIzICogbjM0ICogbjQxIC0gbjI0ICogbjMxICogbjQzICsgbjIxICogbjM0ICogbjQzICsgbjIzICogbjMxICogbjQ0IC0gbjIxICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjIyICogbjM0ICogbjQxIC0gbjI0ICogbjMyICogbjQxICsgbjI0ICogbjMxICogbjQyIC0gbjIxICogbjM0ICogbjQyIC0gbjIyICogbjMxICogbjQ0ICsgbjIxICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgNCBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA2IF0gPSAoIG4xNCAqIG4zMiAqIG40MSAtIG4xMiAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMSAqIG40MiArIG4xMSAqIG4zNCAqIG40MiArIG4xMiAqIG4zMSAqIG40NCAtIG4xMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDggXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgOSBdID0gKCBuMTQgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjEgKiBuNDMgKyBuMTEgKiBuMjQgKiBuNDMgKyBuMTMgKiBuMjEgKiBuNDQgLSBuMTEgKiBuMjMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTAgXSA9ICggbjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7XG5cdFx0dGVbIDEzIF0gPSAoIG4xMyAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMyAqIG4zMSArIG4xNCAqIG4yMSAqIG4zMyAtIG4xMSAqIG4yNCAqIG4zMyAtIG4xMyAqIG4yMSAqIG4zNCArIG4xMSAqIG4yMyAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNCBdID0gKCBuMTQgKiBuMjIgKiBuMzEgLSBuMTIgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjEgKiBuMzIgKyBuMTEgKiBuMjQgKiBuMzIgKyBuMTIgKiBuMjEgKiBuMzQgLSBuMTEgKiBuMjIgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56O1xuXG5cdFx0dGVbIDAgXSAqPSB4OyB0ZVsgNCBdICo9IHk7IHRlWyA4IF0gKj0gejtcblx0XHR0ZVsgMSBdICo9IHg7IHRlWyA1IF0gKj0geTsgdGVbIDkgXSAqPSB6O1xuXHRcdHRlWyAyIF0gKj0geDsgdGVbIDYgXSAqPSB5OyB0ZVsgMTAgXSAqPSB6O1xuXHRcdHRlWyAzIF0gKj0geDsgdGVbIDcgXSAqPSB5OyB0ZVsgMTEgXSAqPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXhTY2FsZU9uQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBzY2FsZVhTcSA9IHRlWyAwIF0gKiB0ZVsgMCBdICsgdGVbIDEgXSAqIHRlWyAxIF0gKyB0ZVsgMiBdICogdGVbIDIgXTtcblx0XHR2YXIgc2NhbGVZU3EgPSB0ZVsgNCBdICogdGVbIDQgXSArIHRlWyA1IF0gKiB0ZVsgNSBdICsgdGVbIDYgXSAqIHRlWyA2IF07XG5cdFx0dmFyIHNjYWxlWlNxID0gdGVbIDggXSAqIHRlWyA4IF0gKyB0ZVsgOSBdICogdGVbIDkgXSArIHRlWyAxMCBdICogdGVbIDEwIF07XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLm1heCggc2NhbGVYU3EsIHNjYWxlWVNxLCBzY2FsZVpTcSApICk7XG5cblx0fSxcblxuXHRtYWtlVHJhbnNsYXRpb246IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCB4LFxuXHRcdFx0MCwgMSwgMCwgeSxcblx0XHRcdDAsIDAsIDEsIHosXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25YOiBmdW5jdGlvbiAoIHRoZXRhICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCBjLCAtIHMsIDAsXG5cdFx0XHQwLCBzLCBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVJvdGF0aW9uWTogZnVuY3Rpb24gKCB0aGV0YSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQgYywgMCwgcywgMCxcblx0XHRcdCAwLCAxLCAwLCAwLFxuXHRcdFx0LSBzLCAwLCBjLCAwLFxuXHRcdFx0IDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VSb3RhdGlvblo6IGZ1bmN0aW9uICggdGhldGEgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0YywgLSBzLCAwLCAwLFxuXHRcdFx0cywgYywgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25BeGlzOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gQmFzZWQgb24gaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCBhbmdsZSApO1xuXHRcdHZhciBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cdFx0dmFyIHQgPSAxIC0gYztcblx0XHR2YXIgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcblx0XHR2YXIgdHggPSB0ICogeCwgdHkgPSB0ICogeTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR0eCAqIHggKyBjLCB0eCAqIHkgLSBzICogeiwgdHggKiB6ICsgcyAqIHksIDAsXG5cdFx0XHR0eCAqIHkgKyBzICogeiwgdHkgKiB5ICsgYywgdHkgKiB6IC0gcyAqIHgsIDAsXG5cdFx0XHR0eCAqIHogLSBzICogeSwgdHkgKiB6ICsgcyAqIHgsIHQgKiB6ICogeiArIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0IHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVNjYWxlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0eCwgMCwgMCwgMCxcblx0XHRcdDAsIHksIDAsIDAsXG5cdFx0XHQwLCAwLCB6LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVNoZWFyOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgeSwgeiwgMCxcblx0XHRcdHgsIDEsIHosIDAsXG5cdFx0XHR4LCB5LCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcG9zZTogZnVuY3Rpb24gKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHggPSBxdWF0ZXJuaW9uLl94LCB5ID0gcXVhdGVybmlvbi5feSwgeiA9IHF1YXRlcm5pb24uX3osIHcgPSBxdWF0ZXJuaW9uLl93O1xuXHRcdHZhciB4MiA9IHggKyB4LFx0eTIgPSB5ICsgeSwgejIgPSB6ICsgejtcblx0XHR2YXIgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6Mjtcblx0XHR2YXIgeXkgPSB5ICogeTIsIHl6ID0geSAqIHoyLCB6eiA9IHogKiB6Mjtcblx0XHR2YXIgd3ggPSB3ICogeDIsIHd5ID0gdyAqIHkyLCB3eiA9IHcgKiB6MjtcblxuXHRcdHZhciBzeCA9IHNjYWxlLngsIHN5ID0gc2NhbGUueSwgc3ogPSBzY2FsZS56O1xuXG5cdFx0dGVbIDAgXSA9ICggMSAtICggeXkgKyB6eiApICkgKiBzeDtcblx0XHR0ZVsgMSBdID0gKCB4eSArIHd6ICkgKiBzeDtcblx0XHR0ZVsgMiBdID0gKCB4eiAtIHd5ICkgKiBzeDtcblx0XHR0ZVsgMyBdID0gMDtcblxuXHRcdHRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5O1xuXHRcdHRlWyA1IF0gPSAoIDEgLSAoIHh4ICsgenogKSApICogc3k7XG5cdFx0dGVbIDYgXSA9ICggeXogKyB3eCApICogc3k7XG5cdFx0dGVbIDcgXSA9IDA7XG5cblx0XHR0ZVsgOCBdID0gKCB4eiArIHd5ICkgKiBzejtcblx0XHR0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejtcblx0XHR0ZVsgMTAgXSA9ICggMSAtICggeHggKyB5eSApICkgKiBzejtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHR0ZVsgMTIgXSA9IHBvc2l0aW9uLng7XG5cdFx0dGVbIDEzIF0gPSBwb3NpdGlvbi55O1xuXHRcdHRlWyAxNCBdID0gcG9zaXRpb24uejtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRlY29tcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRcdHZhciBzeCA9IHZlY3Rvci5zZXQoIHRlWyAwIF0sIHRlWyAxIF0sIHRlWyAyIF0gKS5sZW5ndGgoKTtcblx0XHRcdHZhciBzeSA9IHZlY3Rvci5zZXQoIHRlWyA0IF0sIHRlWyA1IF0sIHRlWyA2IF0gKS5sZW5ndGgoKTtcblx0XHRcdHZhciBzeiA9IHZlY3Rvci5zZXQoIHRlWyA4IF0sIHRlWyA5IF0sIHRlWyAxMCBdICkubGVuZ3RoKCk7XG5cblx0XHRcdC8vIGlmIGRldGVybWluZSBpcyBuZWdhdGl2ZSwgd2UgbmVlZCB0byBpbnZlcnQgb25lIHNjYWxlXG5cdFx0XHR2YXIgZGV0ID0gdGhpcy5kZXRlcm1pbmFudCgpO1xuXHRcdFx0aWYgKCBkZXQgPCAwICkgc3ggPSAtIHN4O1xuXG5cdFx0XHRwb3NpdGlvbi54ID0gdGVbIDEyIF07XG5cdFx0XHRwb3NpdGlvbi55ID0gdGVbIDEzIF07XG5cdFx0XHRwb3NpdGlvbi56ID0gdGVbIDE0IF07XG5cblx0XHRcdC8vIHNjYWxlIHRoZSByb3RhdGlvbiBwYXJ0XG5cdFx0XHRtYXRyaXguY29weSggdGhpcyApO1xuXG5cdFx0XHR2YXIgaW52U1ggPSAxIC8gc3g7XG5cdFx0XHR2YXIgaW52U1kgPSAxIC8gc3k7XG5cdFx0XHR2YXIgaW52U1ogPSAxIC8gc3o7XG5cblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgMCBdICo9IGludlNYO1xuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxIF0gKj0gaW52U1g7XG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDIgXSAqPSBpbnZTWDtcblxuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyA0IF0gKj0gaW52U1k7XG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDUgXSAqPSBpbnZTWTtcblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgNiBdICo9IGludlNZO1xuXG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDggXSAqPSBpbnZTWjtcblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgOSBdICo9IGludlNaO1xuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxMCBdICo9IGludlNaO1xuXG5cdFx0XHRxdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbWF0cml4ICk7XG5cblx0XHRcdHNjYWxlLnggPSBzeDtcblx0XHRcdHNjYWxlLnkgPSBzeTtcblx0XHRcdHNjYWxlLnogPSBzejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRtYWtlUGVyc3BlY3RpdmU6IGZ1bmN0aW9uICggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7XG5cblx0XHRpZiAoIGZhciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubWFrZVBlcnNwZWN0aXZlKCkgaGFzIGJlZW4gcmVkZWZpbmVkIGFuZCBoYXMgYSBuZXcgc2lnbmF0dXJlLiBQbGVhc2UgY2hlY2sgdGhlIGRvY3MuJyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgeCA9IDIgKiBuZWFyIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHR2YXIgeSA9IDIgKiBuZWFyIC8gKCB0b3AgLSBib3R0b20gKTtcblxuXHRcdHZhciBhID0gKCByaWdodCArIGxlZnQgKSAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0dmFyIGIgPSAoIHRvcCArIGJvdHRvbSApIC8gKCB0b3AgLSBib3R0b20gKTtcblx0XHR2YXIgYyA9IC0gKCBmYXIgKyBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTtcblx0XHR2YXIgZCA9IC0gMiAqIGZhciAqIG5lYXIgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdHRlWyAwIF0gPSB4O1x0dGVbIDQgXSA9IDA7XHR0ZVsgOCBdID0gYTtcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSB5O1x0dGVbIDkgXSA9IGI7XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gYztcdHRlWyAxNCBdID0gZDtcblx0XHR0ZVsgMyBdID0gMDtcdHRlWyA3IF0gPSAwO1x0dGVbIDExIF0gPSAtIDE7XHR0ZVsgMTUgXSA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VPcnRob2dyYXBoaWM6IGZ1bmN0aW9uICggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB3ID0gMS4wIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHR2YXIgaCA9IDEuMCAvICggdG9wIC0gYm90dG9tICk7XG5cdFx0dmFyIHAgPSAxLjAgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdHZhciB4ID0gKCByaWdodCArIGxlZnQgKSAqIHc7XG5cdFx0dmFyIHkgPSAoIHRvcCArIGJvdHRvbSApICogaDtcblx0XHR2YXIgeiA9ICggZmFyICsgbmVhciApICogcDtcblxuXHRcdHRlWyAwIF0gPSAyICogdztcdHRlWyA0IF0gPSAwO1x0dGVbIDggXSA9IDA7XHR0ZVsgMTIgXSA9IC0geDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSAyICogaDtcdHRlWyA5IF0gPSAwO1x0dGVbIDEzIF0gPSAtIHk7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gLSAyICogcDtcdHRlWyAxNCBdID0gLSB6O1xuXHRcdHRlWyAzIF0gPSAwO1x0dGVbIDcgXSA9IDA7XHR0ZVsgMTEgXSA9IDA7XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAxNjsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0ZVsgMSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0ZVsgMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDQgXSA9IHRlWyA0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgOCBdID0gdGVbIDggXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgOSBdID0gdGVbIDkgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTAgXSA9IHRlWyAxMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMSBdID0gdGVbIDExIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgMTIgXSA9IHRlWyAxMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMyBdID0gdGVbIDEzIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDE0IF0gPSB0ZVsgMTQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTUgXSA9IHRlWyAxNSBdO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG52YXIgX21hdHJpeCwgX3F1YXRlcm5pb247XG5cbmZ1bmN0aW9uIEV1bGVyKCB4LCB5LCB6LCBvcmRlciApIHtcblxuXHR0aGlzLl94ID0geCB8fCAwO1xuXHR0aGlzLl95ID0geSB8fCAwO1xuXHR0aGlzLl96ID0geiB8fCAwO1xuXHR0aGlzLl9vcmRlciA9IG9yZGVyIHx8IEV1bGVyLkRlZmF1bHRPcmRlcjtcblxufVxuXG5FdWxlci5Sb3RhdGlvbk9yZGVycyA9IFsgJ1hZWicsICdZWlgnLCAnWlhZJywgJ1haWScsICdZWFonLCAnWllYJyBdO1xuXG5FdWxlci5EZWZhdWx0T3JkZXIgPSAnWFlaJztcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEV1bGVyLnByb3RvdHlwZSwge1xuXG5cdHg6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5feDtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSB2YWx1ZTtcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHk6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHo6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fejtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3ogPSB2YWx1ZTtcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdG9yZGVyOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX29yZGVyO1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5fb3JkZXIgPSB2YWx1ZTtcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggRXVsZXIucHJvdG90eXBlLCB7XG5cblx0aXNFdWxlcjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgb3JkZXIgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyIHx8IHRoaXMuX29yZGVyO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl9vcmRlciApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBldWxlciApIHtcblxuXHRcdHRoaXMuX3ggPSBldWxlci5feDtcblx0XHR0aGlzLl95ID0gZXVsZXIuX3k7XG5cdFx0dGhpcy5feiA9IGV1bGVyLl96O1xuXHRcdHRoaXMuX29yZGVyID0gZXVsZXIuX29yZGVyO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICggbSwgb3JkZXIsIHVwZGF0ZSApIHtcblxuXHRcdHZhciBjbGFtcCA9IF9NYXRoLmNsYW1wO1xuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdHZhciB0ZSA9IG0uZWxlbWVudHM7XG5cdFx0dmFyIG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF07XG5cdFx0dmFyIG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF07XG5cdFx0dmFyIG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdO1xuXG5cdFx0b3JkZXIgPSBvcmRlciB8fCB0aGlzLl9vcmRlcjtcblxuXHRcdGlmICggb3JkZXIgPT09ICdYWVonICkge1xuXG5cdFx0XHR0aGlzLl95ID0gTWF0aC5hc2luKCBjbGFtcCggbTEzLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMTMgKSA8IDAuOTk5OTkgKSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMTEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMjIgKTtcblx0XHRcdFx0dGhpcy5feiA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWVhaJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IE1hdGguYXNpbiggLSBjbGFtcCggbTIzLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMjMgKSA8IDAuOTk5OTkgKSB7XG5cblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTMzICk7XG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0yMiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7XG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1pYWScgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIGNsYW1wKCBtMzIsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0zMiApIDwgMC45OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3kgPSAwO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMTEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWVgnICkge1xuXG5cdFx0XHR0aGlzLl95ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMzEsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0zMSApIDwgMC45OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMzMgKTtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTIyICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWVpYJyApIHtcblxuXHRcdFx0dGhpcy5feiA9IE1hdGguYXNpbiggY2xhbXAoIG0yMSwgLSAxLCAxICkgKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggbTIxICkgPCAwLjk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTIyICk7XG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0zMyApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1haWScgKSB7XG5cblx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0xMiwgLSAxLCAxICkgKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggbTEyICkgPCAwLjk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0yMiApO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMTEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl95ID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRXVsZXI6IC5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBnaXZlbiB1bnN1cHBvcnRlZCBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXG5cdFx0aWYgKCB1cGRhdGUgIT09IGZhbHNlICkgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxLCBvcmRlciwgdXBkYXRlICkge1xuXG5cdFx0aWYgKCBfbWF0cml4ID09PSB1bmRlZmluZWQgKSBfbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdF9tYXRyaXgubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX21hdHJpeCwgb3JkZXIsIHVwZGF0ZSApO1xuXG5cdH0sXG5cblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiwgb3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyIHx8IHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRyZW9yZGVyOiBmdW5jdGlvbiAoIG5ld09yZGVyICkge1xuXG5cdFx0Ly8gV0FSTklORzogdGhpcyBkaXNjYXJkcyByZXZvbHV0aW9uIGluZm9ybWF0aW9uIC1iaG91c3RvblxuXG5cdFx0aWYgKCBfcXVhdGVybmlvbiA9PT0gdW5kZWZpbmVkICkgX3F1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0X3F1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUXVhdGVybmlvbiggX3F1YXRlcm5pb24sIG5ld09yZGVyICk7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggZXVsZXIgKSB7XG5cblx0XHRyZXR1cm4gKCBldWxlci5feCA9PT0gdGhpcy5feCApICYmICggZXVsZXIuX3kgPT09IHRoaXMuX3kgKSAmJiAoIGV1bGVyLl96ID09PSB0aGlzLl96ICkgJiYgKCBldWxlci5fb3JkZXIgPT09IHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXkgKSB7XG5cblx0XHR0aGlzLl94ID0gYXJyYXlbIDAgXTtcblx0XHR0aGlzLl95ID0gYXJyYXlbIDEgXTtcblx0XHR0aGlzLl96ID0gYXJyYXlbIDIgXTtcblx0XHRpZiAoIGFycmF5WyAzIF0gIT09IHVuZGVmaW5lZCApIHRoaXMuX29yZGVyID0gYXJyYXlbIDMgXTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX29yZGVyO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0dG9WZWN0b3IzOiBmdW5jdGlvbiAoIG9wdGlvbmFsUmVzdWx0ICkge1xuXG5cdFx0aWYgKCBvcHRpb25hbFJlc3VsdCApIHtcblxuXHRcdFx0cmV0dXJuIG9wdGlvbmFsUmVzdWx0LnNldCggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IzKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRfb25DaGFuZ2U6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdF9vbkNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMYXllcnMoKSB7XG5cblx0dGhpcy5tYXNrID0gMSB8IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTGF5ZXJzLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrID0gMSA8PCBjaGFubmVsIHwgMDtcblxuXHR9LFxuXG5cdGVuYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrIHw9IDEgPDwgY2hhbm5lbCB8IDA7XG5cblx0fSxcblxuXHR0b2dnbGU6IGZ1bmN0aW9uICggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayBePSAxIDw8IGNoYW5uZWwgfCAwO1xuXG5cdH0sXG5cblx0ZGlzYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrICY9IH4gKCAxIDw8IGNoYW5uZWwgfCAwICk7XG5cblx0fSxcblxuXHR0ZXN0OiBmdW5jdGlvbiAoIGxheWVycyApIHtcblxuXHRcdHJldHVybiAoIHRoaXMubWFzayAmIGxheWVycy5tYXNrICkgIT09IDA7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGVsZXBoYW50YXR3b3JrIC8gd3d3LmVsZXBoYW50YXR3b3JrLmNoXG4gKi9cblxudmFyIG9iamVjdDNESWQgPSAwO1xuXG5mdW5jdGlvbiBPYmplY3QzRCgpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IG9iamVjdDNESWQgKysgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnT2JqZWN0M0QnO1xuXG5cdHRoaXMucGFyZW50ID0gbnVsbDtcblx0dGhpcy5jaGlsZHJlbiA9IFtdO1xuXG5cdHRoaXMudXAgPSBPYmplY3QzRC5EZWZhdWx0VXAuY2xvbmUoKTtcblxuXHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgcm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xuXG5cdGZ1bmN0aW9uIG9uUm90YXRpb25DaGFuZ2UoKSB7XG5cblx0XHRxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggcm90YXRpb24sIGZhbHNlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUXVhdGVybmlvbkNoYW5nZSgpIHtcblxuXHRcdHJvdGF0aW9uLnNldEZyb21RdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLCB1bmRlZmluZWQsIGZhbHNlICk7XG5cblx0fVxuXG5cdHJvdGF0aW9uLl9vbkNoYW5nZSggb25Sb3RhdGlvbkNoYW5nZSApO1xuXHRxdWF0ZXJuaW9uLl9vbkNoYW5nZSggb25RdWF0ZXJuaW9uQ2hhbmdlICk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIHRoaXMsIHtcblx0XHRwb3NpdGlvbjoge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBwb3NpdGlvblxuXHRcdH0sXG5cdFx0cm90YXRpb246IHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogcm90YXRpb25cblx0XHR9LFxuXHRcdHF1YXRlcm5pb246IHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogcXVhdGVybmlvblxuXHRcdH0sXG5cdFx0c2NhbGU6IHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogc2NhbGVcblx0XHR9LFxuXHRcdG1vZGVsVmlld01hdHJpeDoge1xuXHRcdFx0dmFsdWU6IG5ldyBNYXRyaXg0KClcblx0XHR9LFxuXHRcdG5vcm1hbE1hdHJpeDoge1xuXHRcdFx0dmFsdWU6IG5ldyBNYXRyaXgzKClcblx0XHR9XG5cdH0gKTtcblxuXHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdHRoaXMubWF0cml4V29ybGQgPSBuZXcgTWF0cml4NCgpO1xuXG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IE9iamVjdDNELkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlO1xuXHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmxheWVycyA9IG5ldyBMYXllcnMoKTtcblx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHR0aGlzLmNhc3RTaGFkb3cgPSBmYWxzZTtcblx0dGhpcy5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cblx0dGhpcy5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcblx0dGhpcy5yZW5kZXJPcmRlciA9IDA7XG5cblx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG59XG5cbk9iamVjdDNELkRlZmF1bHRVcCA9IG5ldyBWZWN0b3IzKCAwLCAxLCAwICk7XG5PYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cbk9iamVjdDNELnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBPYmplY3QzRCxcblxuXHRpc09iamVjdDNEOiB0cnVlLFxuXG5cdG9uQmVmb3JlUmVuZGVyOiBmdW5jdGlvbiAoKSB7fSxcblx0b25BZnRlclJlbmRlcjogZnVuY3Rpb24gKCkge30sXG5cblx0YXBwbHlNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5tYXRyaXgucHJlbXVsdGlwbHkoIG1hdHJpeCApO1xuXG5cdFx0dGhpcy5tYXRyaXguZGVjb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTtcblxuXHR9LFxuXG5cdGFwcGx5UXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZTogZnVuY3Rpb24gKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcblxuXHR9LFxuXG5cdHNldFJvdGF0aW9uRnJvbUV1bGVyOiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21FdWxlciggZXVsZXIsIHRydWUgKTtcblxuXHR9LFxuXG5cdHNldFJvdGF0aW9uRnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIG0gKTtcblxuXHR9LFxuXG5cdHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdC8vIGFzc3VtZXMgcSBpcyBub3JtYWxpemVkXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uY29weSggcSApO1xuXG5cdH0sXG5cblx0cm90YXRlT25BeGlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gb2JqZWN0IHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdHZhciBxMSA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlT25BeGlzKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdFx0cTEuc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLm11bHRpcGx5KCBxMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZU9uV29ybGRBeGlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gd29ybGQgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXHRcdC8vIG1ldGhvZCBhc3N1bWVzIG5vIHJvdGF0ZWQgcGFyZW50XG5cblx0XHR2YXIgcTEgPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZU9uV29ybGRBeGlzKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdFx0cTEuc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBxMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZVg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCAxLCAwLCAwICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWCggYW5nbGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggdjEsIGFuZ2xlICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVkoIGFuZ2xlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIHYxLCBhbmdsZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoIDAsIDAsIDEgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVaKCBhbmdsZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCB2MSwgYW5nbGUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZU9uQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gdHJhbnNsYXRlIG9iamVjdCBieSBkaXN0YW5jZSBhbG9uZyBheGlzIGluIG9iamVjdCBzcGFjZVxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKSB7XG5cblx0XHRcdHYxLmNvcHkoIGF4aXMgKS5hcHBseVF1YXRlcm5pb24oIHRoaXMucXVhdGVybmlvbiApO1xuXG5cdFx0XHR0aGlzLnBvc2l0aW9uLmFkZCggdjEubXVsdGlwbHlTY2FsYXIoIGRpc3RhbmNlICkgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGVYOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMyggMSwgMCwgMCApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHRyYW5zbGF0ZVgoIGRpc3RhbmNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIHYxLCBkaXN0YW5jZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGVZKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCB2MSwgZGlzdGFuY2UgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZVo6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdHJhbnNsYXRlWiggZGlzdGFuY2UgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggdjEsIGRpc3RhbmNlICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRsb2NhbFRvV29ybGQ6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHR9LFxuXG5cdHdvcmxkVG9Mb2NhbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB3b3JsZFRvTG9jYWwoIHZlY3RvciApIHtcblxuXHRcdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIG0xLmdldEludmVyc2UoIHRoaXMubWF0cml4V29ybGQgKSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IG9iamVjdHMgaGF2aW5nIG5vbi11bmlmb3JtbHktc2NhbGVkIHBhcmVudChzKVxuXG5cdFx0dmFyIHExID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciB0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbG9va0F0KCB4LCB5LCB6ICkge1xuXG5cdFx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHRcdHRhcmdldC5jb3B5KCB4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGFyZ2V0LnNldCggeCwgeSwgeiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdFx0cG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGlmICggdGhpcy5pc0NhbWVyYSB8fCB0aGlzLmlzTGlnaHQgKSB7XG5cblx0XHRcdFx0bTEubG9va0F0KCBwb3NpdGlvbiwgdGFyZ2V0LCB0aGlzLnVwICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bTEubG9va0F0KCB0YXJnZXQsIHBvc2l0aW9uLCB0aGlzLnVwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbTEgKTtcblxuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0bTEuZXh0cmFjdFJvdGF0aW9uKCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0cTEuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtMSApO1xuXHRcdFx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIHExLmludmVyc2UoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhZGQ6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmFkZCggYXJndW1lbnRzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0ID09PSB0aGlzICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCBcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhbid0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgaXRzZWxmLlwiLCBvYmplY3QgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIG9iamVjdCAmJiBvYmplY3QuaXNPYmplY3QzRCApICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5wYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0b2JqZWN0LnBhcmVudC5yZW1vdmUoIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG9iamVjdC5wYXJlbnQgPSB0aGlzO1xuXHRcdFx0dGhpcy5jaGlsZHJlbi5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2FkZGVkJyB9ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCBcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5PYmplY3QzRC5cIiwgb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMucmVtb3ZlKCBhcmd1bWVudHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKCBvYmplY3QgKTtcblxuXHRcdGlmICggaW5kZXggIT09IC0gMSApIHtcblxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IG51bGw7XG5cdFx0XHR0aGlzLmNoaWxkcmVuLnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3JlbW92ZWQnIH0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXR0YWNoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBhZGRzIG9iamVjdCBhcyBhIGNoaWxkIG9mIHRoaXMsIHdoaWxlIG1haW50YWluaW5nIHRoZSBvYmplY3QncyB3b3JsZCB0cmFuc2Zvcm1cblxuXHRcdHZhciBtID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhdHRhY2goIG9iamVjdCApIHtcblxuXHRcdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdFx0bS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGlmICggb2JqZWN0LnBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRvYmplY3QucGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0XHRcdG0ubXVsdGlwbHkoIG9iamVjdC5wYXJlbnQubWF0cml4V29ybGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRvYmplY3QuYXBwbHlNYXRyaXgoIG0gKTtcblxuXHRcdFx0b2JqZWN0LnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgZmFsc2UgKTtcblxuXHRcdFx0dGhpcy5hZGQoIG9iamVjdCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGdldE9iamVjdEJ5SWQ6IGZ1bmN0aW9uICggaWQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnaWQnLCBpZCApO1xuXG5cdH0sXG5cblx0Z2V0T2JqZWN0QnlOYW1lOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnbmFtZScsIG5hbWUgKTtcblxuXHR9LFxuXG5cdGdldE9iamVjdEJ5UHJvcGVydHk6IGZ1bmN0aW9uICggbmFtZSwgdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXNbIG5hbWUgXSA9PT0gdmFsdWUgKSByZXR1cm4gdGhpcztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlblsgaSBdO1xuXHRcdFx0dmFyIG9iamVjdCA9IGNoaWxkLmdldE9iamVjdEJ5UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cblx0XHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG9iamVjdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9LFxuXG5cdGdldFdvcmxkUG9zaXRpb246IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFBvc2l0aW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdH0sXG5cblx0Z2V0V29ybGRRdWF0ZXJuaW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBzY2FsZSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0V29ybGRRdWF0ZXJuaW9uKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFF1YXRlcm5pb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIHBvc2l0aW9uLCB0YXJnZXQsIHNjYWxlICk7XG5cblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRnZXRXb3JsZFNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBnZXRXb3JsZFNjYWxlKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFNjYWxlKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgdGFyZ2V0ICk7XG5cblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRnZXRXb3JsZERpcmVjdGlvbjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLmdldFdvcmxkRGlyZWN0aW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHR2YXIgZSA9IHRoaXMubWF0cml4V29ybGQuZWxlbWVudHM7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggZVsgOCBdLCBlWyA5IF0sIGVbIDEwIF0gKS5ub3JtYWxpemUoKTtcblxuXHR9LFxuXG5cdHJheWNhc3Q6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdHRyYXZlcnNlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dHJhdmVyc2VWaXNpYmxlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlVmlzaWJsZSggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHRyYXZlcnNlQW5jZXN0b3JzOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdGNhbGxiYWNrKCBwYXJlbnQgKTtcblxuXHRcdFx0cGFyZW50LnRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5jb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlIHx8IGZvcmNlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weSggdGhpcy5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRmb3JjZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgY2hpbGRyZW5cblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlV29ybGRNYXRyaXg6IGZ1bmN0aW9uICggdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4gKSB7XG5cblx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cblx0XHRpZiAoIHVwZGF0ZVBhcmVudHMgPT09IHRydWUgJiYgcGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRwYXJlbnQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSApIHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHRpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGNoaWxkcmVuXG5cblx0XHRpZiAoIHVwZGF0ZUNoaWxkcmVuID09PSB0cnVlICkge1xuXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNoaWxkcmVuWyBpIF0udXBkYXRlV29ybGRNYXRyaXgoIGZhbHNlLCB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0Ly8gbWV0YSBpcyBhIHN0cmluZyB3aGVuIGNhbGxlZCBmcm9tIEpTT04uc3RyaW5naWZ5XG5cdFx0dmFyIGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0dmFyIG91dHB1dCA9IHt9O1xuXG5cdFx0Ly8gbWV0YSBpcyBhIGhhc2ggdXNlZCB0byBjb2xsZWN0IGdlb21ldHJpZXMsIG1hdGVyaWFscy5cblx0XHQvLyBub3QgcHJvdmlkaW5nIGl0IGltcGxpZXMgdGhhdCB0aGlzIGlzIHRoZSByb290IG9iamVjdFxuXHRcdC8vIGJlaW5nIHNlcmlhbGl6ZWQuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdC8vIGluaXRpYWxpemUgbWV0YSBvYmpcblx0XHRcdG1ldGEgPSB7XG5cdFx0XHRcdGdlb21ldHJpZXM6IHt9LFxuXHRcdFx0XHRtYXRlcmlhbHM6IHt9LFxuXHRcdFx0XHR0ZXh0dXJlczoge30sXG5cdFx0XHRcdGltYWdlczoge30sXG5cdFx0XHRcdHNoYXBlczoge31cblx0XHRcdH07XG5cblx0XHRcdG91dHB1dC5tZXRhZGF0YSA9IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnT2JqZWN0Jyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnT2JqZWN0M0QudG9KU09OJ1xuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdC8vIHN0YW5kYXJkIE9iamVjdDNEIHNlcmlhbGl6YXRpb25cblxuXHRcdHZhciBvYmplY3QgPSB7fTtcblxuXHRcdG9iamVjdC51dWlkID0gdGhpcy51dWlkO1xuXHRcdG9iamVjdC50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgb2JqZWN0Lm5hbWUgPSB0aGlzLm5hbWU7XG5cdFx0aWYgKCB0aGlzLmNhc3RTaGFkb3cgPT09IHRydWUgKSBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnJlY2VpdmVTaGFkb3cgPT09IHRydWUgKSBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgb2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMuZnJ1c3R1bUN1bGxlZCA9PT0gZmFsc2UgKSBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlO1xuXHRcdGlmICggdGhpcy5yZW5kZXJPcmRlciAhPT0gMCApIG9iamVjdC5yZW5kZXJPcmRlciA9IHRoaXMucmVuZGVyT3JkZXI7XG5cdFx0aWYgKCBKU09OLnN0cmluZ2lmeSggdGhpcy51c2VyRGF0YSApICE9PSAne30nICkgb2JqZWN0LnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdG9iamVjdC5sYXllcnMgPSB0aGlzLmxheWVycy5tYXNrO1xuXHRcdG9iamVjdC5tYXRyaXggPSB0aGlzLm1hdHJpeC50b0FycmF5KCk7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9PT0gZmFsc2UgKSBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0Ly8gb2JqZWN0IHNwZWNpZmljIHByb3BlcnRpZXNcblxuXHRcdGlmICggdGhpcy5pc01lc2ggJiYgdGhpcy5kcmF3TW9kZSAhPT0gVHJpYW5nbGVzRHJhd01vZGUgKSBvYmplY3QuZHJhd01vZGUgPSB0aGlzLmRyYXdNb2RlO1xuXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIHNlcmlhbGl6ZSggbGlicmFyeSwgZWxlbWVudCApIHtcblxuXHRcdFx0aWYgKCBsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID0gZWxlbWVudC50b0pTT04oIG1ldGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbWVudC51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzTWVzaCB8fCB0aGlzLmlzTGluZSB8fCB0aGlzLmlzUG9pbnRzICkge1xuXG5cdFx0XHRvYmplY3QuZ2VvbWV0cnkgPSBzZXJpYWxpemUoIG1ldGEuZ2VvbWV0cmllcywgdGhpcy5nZW9tZXRyeSApO1xuXG5cdFx0XHR2YXIgcGFyYW1ldGVycyA9IHRoaXMuZ2VvbWV0cnkucGFyYW1ldGVycztcblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgJiYgcGFyYW1ldGVycy5zaGFwZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR2YXIgc2hhcGVzID0gcGFyYW1ldGVycy5zaGFwZXM7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGkgXTtcblxuXHRcdFx0XHRcdFx0c2VyaWFsaXplKCBtZXRhLnNoYXBlcywgc2hhcGUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c2VyaWFsaXplKCBtZXRhLnNoYXBlcywgc2hhcGVzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB0aGlzLm1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0dmFyIHV1aWRzID0gW107XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5tYXRlcmlhbC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dXVpZHMucHVzaCggc2VyaWFsaXplKCBtZXRhLm1hdGVyaWFscywgdGhpcy5tYXRlcmlhbFsgaSBdICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0b2JqZWN0Lm1hdGVyaWFsID0gdXVpZHM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0b2JqZWN0Lm1hdGVyaWFsID0gc2VyaWFsaXplKCBtZXRhLm1hdGVyaWFscywgdGhpcy5tYXRlcmlhbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdG9iamVjdC5jaGlsZHJlbiA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRvYmplY3QuY2hpbGRyZW4ucHVzaCggdGhpcy5jaGlsZHJlblsgaSBdLnRvSlNPTiggbWV0YSApLm9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJpZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmdlb21ldHJpZXMgKTtcblx0XHRcdHZhciBtYXRlcmlhbHMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLm1hdGVyaWFscyApO1xuXHRcdFx0dmFyIHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0dmFyIGltYWdlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuaW1hZ2VzICk7XG5cdFx0XHR2YXIgc2hhcGVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5zaGFwZXMgKTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyaWVzLmxlbmd0aCA+IDAgKSBvdXRwdXQuZ2VvbWV0cmllcyA9IGdlb21ldHJpZXM7XG5cdFx0XHRpZiAoIG1hdGVyaWFscy5sZW5ndGggPiAwICkgb3V0cHV0Lm1hdGVyaWFscyA9IG1hdGVyaWFscztcblx0XHRcdGlmICggdGV4dHVyZXMubGVuZ3RoID4gMCApIG91dHB1dC50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIG91dHB1dC5pbWFnZXMgPSBpbWFnZXM7XG5cdFx0XHRpZiAoIHNoYXBlcy5sZW5ndGggPiAwICkgb3V0cHV0LnNoYXBlcyA9IHNoYXBlcztcblxuXHRcdH1cblxuXHRcdG91dHB1dC5vYmplY3QgPSBvYmplY3Q7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdFx0Ly8gZXh0cmFjdCBkYXRhIGZyb20gdGhlIGNhY2hlIGhhc2hcblx0XHQvLyByZW1vdmUgbWV0YWRhdGEgb24gZWFjaCBpdGVtXG5cdFx0Ly8gYW5kIHJldHVybiBhcyBhcnJheVxuXHRcdGZ1bmN0aW9uIGV4dHJhY3RGcm9tQ2FjaGUoIGNhY2hlICkge1xuXG5cdFx0XHR2YXIgdmFsdWVzID0gW107XG5cdFx0XHRmb3IgKCB2YXIga2V5IGluIGNhY2hlICkge1xuXG5cdFx0XHRcdHZhciBkYXRhID0gY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5tZXRhZGF0YTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcblxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlcztcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMsIHJlY3Vyc2l2ZSApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdGlmICggcmVjdXJzaXZlID09PSB1bmRlZmluZWQgKSByZWN1cnNpdmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLnVwLmNvcHkoIHNvdXJjZS51cCApO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBzb3VyY2UucG9zaXRpb24gKTtcblx0XHR0aGlzLnF1YXRlcm5pb24uY29weSggc291cmNlLnF1YXRlcm5pb24gKTtcblx0XHR0aGlzLnNjYWxlLmNvcHkoIHNvdXJjZS5zY2FsZSApO1xuXG5cdFx0dGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApO1xuXHRcdHRoaXMubWF0cml4V29ybGQuY29weSggc291cmNlLm1hdHJpeFdvcmxkICk7XG5cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBzb3VyY2UubWF0cml4V29ybGROZWVkc1VwZGF0ZTtcblxuXHRcdHRoaXMubGF5ZXJzLm1hc2sgPSBzb3VyY2UubGF5ZXJzLm1hc2s7XG5cdFx0dGhpcy52aXNpYmxlID0gc291cmNlLnZpc2libGU7XG5cblx0XHR0aGlzLmNhc3RTaGFkb3cgPSBzb3VyY2UuY2FzdFNoYWRvdztcblx0XHR0aGlzLnJlY2VpdmVTaGFkb3cgPSBzb3VyY2UucmVjZWl2ZVNoYWRvdztcblxuXHRcdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHNvdXJjZS5mcnVzdHVtQ3VsbGVkO1xuXHRcdHRoaXMucmVuZGVyT3JkZXIgPSBzb3VyY2UucmVuZGVyT3JkZXI7XG5cblx0XHR0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7XG5cblx0XHRpZiAoIHJlY3Vyc2l2ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgc291cmNlLmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgY2hpbGQgPSBzb3VyY2UuY2hpbGRyZW5bIGkgXTtcblx0XHRcdFx0dGhpcy5hZGQoIGNoaWxkLmNsb25lKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBTY2VuZSgpIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NjZW5lJztcblxuXHR0aGlzLmJhY2tncm91bmQgPSBudWxsO1xuXHR0aGlzLmZvZyA9IG51bGw7XG5cdHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IG51bGw7XG5cblx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTsgLy8gY2hlY2tlZCBieSB0aGUgcmVuZGVyZXJcblxuXHRpZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0X19USFJFRV9ERVZUT09MU19fLmRpc3BhdGNoRXZlbnQoIG5ldyBDdXN0b21FdmVudCggJ29ic2VydmUnLCB7IGRldGFpbDogdGhpcyB9ICkgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cdH1cblxufVxuXG5TY2VuZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTY2VuZSxcblxuXHRpc1NjZW5lOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UuYmFja2dyb3VuZCAhPT0gbnVsbCApIHRoaXMuYmFja2dyb3VuZCA9IHNvdXJjZS5iYWNrZ3JvdW5kLmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2UuZm9nICE9PSBudWxsICkgdGhpcy5mb2cgPSBzb3VyY2UuZm9nLmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCk7XG5cblx0XHR0aGlzLmF1dG9VcGRhdGUgPSBzb3VyY2UuYXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IE9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0aWYgKCB0aGlzLmJhY2tncm91bmQgIT09IG51bGwgKSBkYXRhLm9iamVjdC5iYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLnRvSlNPTiggbWV0YSApO1xuXHRcdGlmICggdGhpcy5mb2cgIT09IG51bGwgKSBkYXRhLm9iamVjdC5mb2cgPSB0aGlzLmZvZy50b0pTT04oKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gQm94MyggbWluLCBtYXggKSB7XG5cblx0dGhpcy5taW4gPSAoIG1pbiAhPT0gdW5kZWZpbmVkICkgPyBtaW4gOiBuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApO1xuXHR0aGlzLm1heCA9ICggbWF4ICE9PSB1bmRlZmluZWQgKSA/IG1heCA6IG5ldyBWZWN0b3IzKCAtIEluZmluaXR5LCAtIEluZmluaXR5LCAtIEluZmluaXR5ICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQm94My5wcm90b3R5cGUsIHtcblxuXHRpc0JveDM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcblx0XHR2YXIgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0dmFyIG1heFggPSAtIEluZmluaXR5O1xuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdHZhciB4ID0gYXJyYXlbIGkgXTtcblx0XHRcdHZhciB5ID0gYXJyYXlbIGkgKyAxIF07XG5cdFx0XHR2YXIgeiA9IGFycmF5WyBpICsgMiBdO1xuXG5cdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRpZiAoIHkgPCBtaW5ZICkgbWluWSA9IHk7XG5cdFx0XHRpZiAoIHogPCBtaW5aICkgbWluWiA9IHo7XG5cblx0XHRcdGlmICggeCA+IG1heFggKSBtYXhYID0geDtcblx0XHRcdGlmICggeSA+IG1heFkgKSBtYXhZID0geTtcblx0XHRcdGlmICggeiA+IG1heFogKSBtYXhaID0gejtcblxuXHRcdH1cblxuXHRcdHRoaXMubWluLnNldCggbWluWCwgbWluWSwgbWluWiApO1xuXHRcdHRoaXMubWF4LnNldCggbWF4WCwgbWF4WSwgbWF4WiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcblx0XHR2YXIgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0dmFyIG1heFggPSAtIEluZmluaXR5O1xuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgeCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG5cdFx0XHR2YXIgeSA9IGF0dHJpYnV0ZS5nZXRZKCBpICk7XG5cdFx0XHR2YXIgeiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdGlmICggeCA8IG1pblggKSBtaW5YID0geDtcblx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdGlmICggeiA8IG1pblogKSBtaW5aID0gejtcblxuXHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0aWYgKCB5ID4gbWF4WSApIG1heFkgPSB5O1xuXHRcdFx0aWYgKCB6ID4gbWF4WiApIG1heFogPSB6O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5taW4uc2V0KCBtaW5YLCBtaW5ZLCBtaW5aICk7XG5cdFx0dGhpcy5tYXguc2V0KCBtYXhYLCBtYXhZLCBtYXhaICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdFx0dmFyIGhhbGZTaXplID0gdjEuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRcdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdHJldHVybiB0aGlzLmV4cGFuZEJ5T2JqZWN0KCBvYmplY3QgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VFbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5taW4ueCA9IHRoaXMubWluLnkgPSB0aGlzLm1pbi56ID0gKyBJbmZpbml0eTtcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IHRoaXMubWF4LnogPSAtIEluZmluaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0aGlzIGlzIGEgbW9yZSByb2J1c3QgY2hlY2sgZm9yIGVtcHR5IHRoYW4gKCB2b2x1bWUgPD0gMCApIGJlY2F1c2Ugdm9sdW1lIGNhbiBnZXQgcG9zaXRpdmUgd2l0aCB0d28gbmVnYXRpdmUgYXhlc1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXgueCA8IHRoaXMubWluLnggKSB8fCAoIHRoaXMubWF4LnkgPCB0aGlzLm1pbi55ICkgfHwgKCB0aGlzLm1heC56IDwgdGhpcy5taW4ueiApO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRDZW50ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAsIDAgKSA6IHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLm1pbiwgdGhpcy5tYXggKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0fSxcblxuXHRnZXRTaXplOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fSxcblxuXHRleHBhbmRCeVBvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlWZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlPYmplY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIENvbXB1dGVzIHRoZSB3b3JsZC1heGlzLWFsaWduZWQgYm91bmRpbmcgYm94IG9mIGFuIG9iamVjdCAoaW5jbHVkaW5nIGl0cyBjaGlsZHJlbiksXG5cdFx0Ly8gYWNjb3VudGluZyBmb3IgYm90aCB0aGUgb2JqZWN0J3MsIGFuZCBjaGlsZHJlbidzLCB3b3JsZCB0cmFuc2Zvcm1zXG5cblx0XHR2YXIgc2NvcGUsIGksIGw7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gdHJhdmVyc2UoIG5vZGUgKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IG5vZGUuZ2VvbWV0cnk7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0djEuY29weSggdmVydGljZXNbIGkgXSApO1xuXHRcdFx0XHRcdFx0djEuYXBwbHlNYXRyaXg0KCBub2RlLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0XHRcdHNjb3BlLmV4cGFuZEJ5UG9pbnQoIHYxICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHYxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaSApLmFwcGx5TWF0cml4NCggbm9kZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdFx0XHRcdHNjb3BlLmV4cGFuZEJ5UG9pbnQoIHYxICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBleHBhbmRCeU9iamVjdCggb2JqZWN0ICkge1xuXG5cdFx0XHRzY29wZSA9IHRoaXM7XG5cblx0XHRcdG9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHRvYmplY3QudHJhdmVyc2UoIHRyYXZlcnNlICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0cG9pbnQueSA8IHRoaXMubWluLnkgfHwgcG9pbnQueSA+IHRoaXMubWF4LnkgfHxcblx0XHRcdHBvaW50LnogPCB0aGlzLm1pbi56IHx8IHBvaW50LnogPiB0aGlzLm1heC56ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y29udGFpbnNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueSAmJlxuXHRcdFx0dGhpcy5taW4ueiA8PSBib3gubWluLnogJiYgYm94Lm1heC56IDw9IHRoaXMubWF4Lno7XG5cblx0fSxcblxuXHRnZXRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdC8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94XG5cdFx0Ly8gaGFzIGEgc2l6ZSBkaW1lbnNpb24gb2YgMC5cblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRQYXJhbWV0ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KFxuXHRcdFx0KCBwb2ludC54IC0gdGhpcy5taW4ueCApIC8gKCB0aGlzLm1heC54IC0gdGhpcy5taW4ueCApLFxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApLFxuXHRcdFx0KCBwb2ludC56IC0gdGhpcy5taW4ueiApIC8gKCB0aGlzLm1heC56IC0gdGhpcy5taW4ueiApXG5cdFx0KTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Ly8gdXNpbmcgNiBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnMuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55IHx8XG5cdFx0XHRib3gubWF4LnogPCB0aGlzLm1pbi56IHx8IGJveC5taW4ueiA+IHRoaXMubWF4LnogPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBjbG9zZXN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdFx0Ly8gRmluZCB0aGUgcG9pbnQgb24gdGhlIEFBQkIgY2xvc2VzdCB0byB0aGUgc3BoZXJlIGNlbnRlci5cblx0XHRcdHRoaXMuY2xhbXBQb2ludCggc3BoZXJlLmNlbnRlciwgY2xvc2VzdFBvaW50ICk7XG5cblx0XHRcdC8vIElmIHRoYXQgcG9pbnQgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHRoZSBBQUJCIGFuZCBzcGhlcmUgaW50ZXJzZWN0LlxuXHRcdFx0cmV0dXJuIGNsb3Nlc3RQb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Ly8gV2UgY29tcHV0ZSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkb3QgcHJvZHVjdCB2YWx1ZXMuIElmIHRob3NlIHZhbHVlc1xuXHRcdC8vIGFyZSBvbiB0aGUgc2FtZSBzaWRlIChiYWNrIG9yIGZyb250KSBvZiB0aGUgcGxhbmUsIHRoZW4gdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuXG5cdFx0dmFyIG1pbiwgbWF4O1xuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueCA+IDAgKSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnkgPiAwICkge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5tYXgueTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueiA+IDAgKSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5tYXguejtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gKCBtaW4gPD0gLSBwbGFuZS5jb25zdGFudCAmJiBtYXggPj0gLSBwbGFuZS5jb25zdGFudCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1RyaWFuZ2xlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyaWFuZ2xlIGNlbnRlcmVkIHZlcnRpY2VzXG5cdFx0dmFyIHYwID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnNcblx0XHR2YXIgZjAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBmMSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGYyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB0ZXN0QXhpcyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZXh0ZW50cyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdHJpYW5nbGVOb3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gc2F0Rm9yQXhlcyggYXhlcyApIHtcblxuXHRcdFx0dmFyIGksIGo7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBqID0gYXhlcy5sZW5ndGggLSAzOyBpIDw9IGo7IGkgKz0gMyApIHtcblxuXHRcdFx0XHR0ZXN0QXhpcy5mcm9tQXJyYXkoIGF4ZXMsIGkgKTtcblx0XHRcdFx0Ly8gcHJvamVjdCB0aGUgYWFiYiBvbnRvIHRoZSBzZXBlcmF0aW5nIGF4aXNcblx0XHRcdFx0dmFyIHIgPSBleHRlbnRzLnggKiBNYXRoLmFicyggdGVzdEF4aXMueCApICsgZXh0ZW50cy55ICogTWF0aC5hYnMoIHRlc3RBeGlzLnkgKSArIGV4dGVudHMueiAqIE1hdGguYWJzKCB0ZXN0QXhpcy56ICk7XG5cdFx0XHRcdC8vIHByb2plY3QgYWxsIDMgdmVydGljZXMgb2YgdGhlIHRyaWFuZ2xlIG9udG8gdGhlIHNlcGVyYXRpbmcgYXhpc1xuXHRcdFx0XHR2YXIgcDAgPSB2MC5kb3QoIHRlc3RBeGlzICk7XG5cdFx0XHRcdHZhciBwMSA9IHYxLmRvdCggdGVzdEF4aXMgKTtcblx0XHRcdFx0dmFyIHAyID0gdjIuZG90KCB0ZXN0QXhpcyApO1xuXHRcdFx0XHQvLyBhY3R1YWwgdGVzdCwgYmFzaWNhbGx5IHNlZSBpZiBlaXRoZXIgb2YgdGhlIG1vc3QgZXh0cmVtZSBvZiB0aGUgdHJpYW5nbGUgcG9pbnRzIGludGVyc2VjdHMgclxuXHRcdFx0XHRpZiAoIE1hdGgubWF4KCAtIE1hdGgubWF4KCBwMCwgcDEsIHAyICksIE1hdGgubWluKCBwMCwgcDEsIHAyICkgKSA+IHIgKSB7XG5cblx0XHRcdFx0XHQvLyBwb2ludHMgb2YgdGhlIHByb2plY3RlZCB0cmlhbmdsZSBhcmUgb3V0c2lkZSB0aGUgcHJvamVjdGVkIGhhbGYtbGVuZ3RoIG9mIHRoZSBhYWJiXG5cdFx0XHRcdFx0Ly8gdGhlIGF4aXMgaXMgc2VwZXJhdGluZyBhbmQgd2UgY2FuIGV4aXRcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNUcmlhbmdsZSggdHJpYW5nbGUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNvbXB1dGUgYm94IGNlbnRlciBhbmQgZXh0ZW50c1xuXHRcdFx0dGhpcy5nZXRDZW50ZXIoIGNlbnRlciApO1xuXHRcdFx0ZXh0ZW50cy5zdWJWZWN0b3JzKCB0aGlzLm1heCwgY2VudGVyICk7XG5cblx0XHRcdC8vIHRyYW5zbGF0ZSB0cmlhbmdsZSB0byBhYWJiIG9yaWdpblxuXHRcdFx0djAuc3ViVmVjdG9ycyggdHJpYW5nbGUuYSwgY2VudGVyICk7XG5cdFx0XHR2MS5zdWJWZWN0b3JzKCB0cmlhbmdsZS5iLCBjZW50ZXIgKTtcblx0XHRcdHYyLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmMsIGNlbnRlciApO1xuXG5cdFx0XHQvLyBjb21wdXRlIGVkZ2UgdmVjdG9ycyBmb3IgdHJpYW5nbGVcblx0XHRcdGYwLnN1YlZlY3RvcnMoIHYxLCB2MCApO1xuXHRcdFx0ZjEuc3ViVmVjdG9ycyggdjIsIHYxICk7XG5cdFx0XHRmMi5zdWJWZWN0b3JzKCB2MCwgdjIgKTtcblxuXHRcdFx0Ly8gdGVzdCBhZ2FpbnN0IGF4ZXMgdGhhdCBhcmUgZ2l2ZW4gYnkgY3Jvc3MgcHJvZHVjdCBjb21iaW5hdGlvbnMgb2YgdGhlIGVkZ2VzIG9mIHRoZSB0cmlhbmdsZSBhbmQgdGhlIGVkZ2VzIG9mIHRoZSBhYWJiXG5cdFx0XHQvLyBtYWtlIGFuIGF4aXMgdGVzdGluZyBvZiBlYWNoIG9mIHRoZSAzIHNpZGVzIG9mIHRoZSBhYWJiIGFnYWluc3QgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgdHJpYW5nbGUgPSA5IGF4aXMgb2Ygc2VwYXJhdGlvblxuXHRcdFx0Ly8gYXhpc19paiA9IHVfaSB4IGZfaiAodTAsIHUxLCB1MiA9IGZhY2Ugbm9ybWFscyBvZiBhYWJiID0geCx5LHogYXhlcyB2ZWN0b3JzIHNpbmNlIGFhYmIgaXMgYXhpcyBhbGlnbmVkKVxuXHRcdFx0dmFyIGF4ZXMgPSBbXG5cdFx0XHRcdDAsIC0gZjAueiwgZjAueSwgMCwgLSBmMS56LCBmMS55LCAwLCAtIGYyLnosIGYyLnksXG5cdFx0XHRcdGYwLnosIDAsIC0gZjAueCwgZjEueiwgMCwgLSBmMS54LCBmMi56LCAwLCAtIGYyLngsXG5cdFx0XHRcdC0gZjAueSwgZjAueCwgMCwgLSBmMS55LCBmMS54LCAwLCAtIGYyLnksIGYyLngsIDBcblx0XHRcdF07XG5cdFx0XHRpZiAoICEgc2F0Rm9yQXhlcyggYXhlcyApICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0ZXN0IDMgZmFjZSBub3JtYWxzIGZyb20gdGhlIGFhYmJcblx0XHRcdGF4ZXMgPSBbIDEsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDEgXTtcblx0XHRcdGlmICggISBzYXRGb3JBeGVzKCBheGVzICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZpbmFsbHkgdGVzdGluZyB0aGUgZmFjZSBub3JtYWwgb2YgdGhlIHRyaWFuZ2xlXG5cdFx0XHQvLyB1c2UgYWxyZWFkeSBleGlzdGluZyB0cmlhbmdsZSBlZGdlIHZlY3RvcnMgaGVyZVxuXHRcdFx0dHJpYW5nbGVOb3JtYWwuY3Jvc3NWZWN0b3JzKCBmMCwgZjEgKTtcblx0XHRcdGF4ZXMgPSBbIHRyaWFuZ2xlTm9ybWFsLngsIHRyaWFuZ2xlTm9ybWFsLnksIHRyaWFuZ2xlTm9ybWFsLnogXTtcblx0XHRcdHJldHVybiBzYXRGb3JBeGVzKCBheGVzICk7XG5cblx0XHR9O1xuXG5cdH0gKSgpLFxuXG5cdGNsYW1wUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5jbGFtcFBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRcdHZhciBjbGFtcGVkUG9pbnQgPSB2MS5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblx0XHRcdHJldHVybiBjbGFtcGVkUG9pbnQuc3ViKCBwb2ludCApLmxlbmd0aCgpO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0Qm91bmRpbmdTcGhlcmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0Qm91bmRpbmdTcGhlcmUoIHRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQm94MzogLmdldEJvdW5kaW5nU3BoZXJlKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0Ly90YXJnZXQgPSBuZXcgU3BoZXJlKCk7IC8vIHJlbW92ZWQgdG8gYXZvaWQgY3ljbGljIGRlcGVuZGVuY3lcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmdldENlbnRlciggdGFyZ2V0LmNlbnRlciApO1xuXG5cdFx0XHR0YXJnZXQucmFkaXVzID0gdGhpcy5nZXRTaXplKCB2MSApLmxlbmd0aCgpICogMC41O1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1pbiggYm94Lm1heCApO1xuXG5cdFx0Ly8gZW5zdXJlIHRoYXQgaWYgdGhlcmUgaXMgbm8gb3ZlcmxhcCwgdGhlIHJlc3VsdCBpcyBmdWxseSBlbXB0eSwgbm90IHNsaWdodGx5IGVtcHR5IHdpdGggbm9uLWluZi8raW5mIHZhbHVlcyB0aGF0IHdpbGwgY2F1c2Ugc3Vic2VxdWVuY2UgaW50ZXJzZWN0cyB0byBlcnJvbmVvdXNseSByZXR1cm4gdmFsaWQgdmFsdWVzLlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR1bmlvbjogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5tYXgoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9pbnRzID0gW1xuXHRcdFx0bmV3IFZlY3RvcjMoKSxcblx0XHRcdG5ldyBWZWN0b3IzKCksXG5cdFx0XHRuZXcgVmVjdG9yMygpLFxuXHRcdFx0bmV3IFZlY3RvcjMoKSxcblx0XHRcdG5ldyBWZWN0b3IzKCksXG5cdFx0XHRuZXcgVmVjdG9yMygpLFxuXHRcdFx0bmV3IFZlY3RvcjMoKSxcblx0XHRcdG5ldyBWZWN0b3IzKClcblx0XHRdO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xuXG5cdFx0XHQvLyB0cmFuc2Zvcm0gb2YgZW1wdHkgYm94IGlzIGFuIGVtcHR5IGJveC5cblx0XHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSByZXR1cm4gdGhpcztcblxuXHRcdFx0Ly8gTk9URTogSSBhbSB1c2luZyBhIGJpbmFyeSBwYXR0ZXJuIHRvIHNwZWNpZnkgYWxsIDJeMyBjb21iaW5hdGlvbnMgYmVsb3dcblx0XHRcdHBvaW50c1sgMCBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMFxuXHRcdFx0cG9pbnRzWyAxIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDAxXG5cdFx0XHRwb2ludHNbIDIgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMTBcblx0XHRcdHBvaW50c1sgMyBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAxMVxuXHRcdFx0cG9pbnRzWyA0IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAwXG5cdFx0XHRwb2ludHNbIDUgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMDFcblx0XHRcdHBvaW50c1sgNiBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMFxuXHRcdFx0cG9pbnRzWyA3IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTExXG5cblx0XHRcdHRoaXMuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIG9mZnNldCApIHtcblxuXHRcdHRoaXMubWluLmFkZCggb2Zmc2V0ICk7XG5cdFx0dGhpcy5tYXguYWRkKCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHJldHVybiBib3gubWluLmVxdWFscyggdGhpcy5taW4gKSAmJiBib3gubWF4LmVxdWFscyggdGhpcy5tYXggKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBfYm94O1xuXG5mdW5jdGlvbiBTcGhlcmUoIGNlbnRlciwgcmFkaXVzICkge1xuXG5cdHRoaXMuY2VudGVyID0gKCBjZW50ZXIgIT09IHVuZGVmaW5lZCApID8gY2VudGVyIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5yYWRpdXMgPSAoIHJhZGl1cyAhPT0gdW5kZWZpbmVkICkgPyByYWRpdXMgOiAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFNwaGVyZS5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggY2VudGVyLCByYWRpdXMgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBjZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMsIG9wdGlvbmFsQ2VudGVyICkge1xuXG5cdFx0aWYgKCBfYm94ID09PSB1bmRlZmluZWQgKSBfYm94ID0gbmV3IEJveDMoKTtcblxuXHRcdHZhciBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcblxuXHRcdGlmICggb3B0aW9uYWxDZW50ZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y2VudGVyLmNvcHkoIG9wdGlvbmFsQ2VudGVyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfYm94LnNldEZyb21Qb2ludHMoIHBvaW50cyApLmdldENlbnRlciggY2VudGVyICk7XG5cblx0XHR9XG5cblx0XHR2YXIgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnRzWyBpIF0gKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHRoaXMuY2VudGVyLmNvcHkoIHNwaGVyZS5jZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLnJhZGl1cyA8PSAwICk7XG5cblx0fSxcblxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuICggcG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuY2VudGVyICkgPD0gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiAoIHBvaW50LmRpc3RhbmNlVG8oIHRoaXMuY2VudGVyICkgLSB0aGlzLnJhZGl1cyApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHR2YXIgcmFkaXVzU3VtID0gdGhpcy5yYWRpdXMgKyBzcGhlcmUucmFkaXVzO1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuY2VudGVyICkgPD0gKCByYWRpdXNTdW0gKiByYWRpdXNTdW0gKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzU3BoZXJlKCB0aGlzICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzUGxhbmU6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5jZW50ZXIgKSApIDw9IHRoaXMucmFkaXVzO1xuXG5cdH0sXG5cblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0dmFyIGRlbHRhTGVuZ3RoU3EgPSB0aGlzLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwaGVyZTogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5jb3B5KCBwb2ludCApO1xuXG5cdFx0aWYgKCBkZWx0YUxlbmd0aFNxID4gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKSB7XG5cblx0XHRcdHRhcmdldC5zdWIoIHRoaXMuY2VudGVyICkubm9ybWFsaXplKCk7XG5cdFx0XHR0YXJnZXQubXVsdGlwbHlTY2FsYXIoIHRoaXMucmFkaXVzICkuYWRkKCB0aGlzLmNlbnRlciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9LFxuXG5cdGdldEJvdW5kaW5nQm94OiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwaGVyZTogLmdldEJvdW5kaW5nQm94KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuc2V0KCB0aGlzLmNlbnRlciwgdGhpcy5jZW50ZXIgKTtcblx0XHR0YXJnZXQuZXhwYW5kQnlTY2FsYXIoIHRoaXMucmFkaXVzICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuY2VudGVyLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cdFx0dGhpcy5yYWRpdXMgPSB0aGlzLnJhZGl1cyAqIG1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuYWRkKCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiBzcGhlcmUuY2VudGVyLmVxdWFscyggdGhpcy5jZW50ZXIgKSAmJiAoIHNwaGVyZS5yYWRpdXMgPT09IHRoaXMucmFkaXVzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKSB7XG5cblx0dGhpcy5vcmlnaW4gPSAoIG9yaWdpbiAhPT0gdW5kZWZpbmVkICkgPyBvcmlnaW4gOiBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLmRpcmVjdGlvbiA9ICggZGlyZWN0aW9uICE9PSB1bmRlZmluZWQgKSA/IGRpcmVjdGlvbiA6IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUmF5LnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHRcdHRoaXMub3JpZ2luLmNvcHkoIG9yaWdpbiApO1xuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIGRpcmVjdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCByYXkgKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5jb3B5KCByYXkub3JpZ2luICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24uY29weSggcmF5LmRpcmVjdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhdDogZnVuY3Rpb24gKCB0LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXk6IC5hdCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLmRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLm9yaWdpbiApO1xuXG5cdH0sXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCB2ICkuc3ViKCB0aGlzLm9yaWdpbiApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyZWNhc3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmVjYXN0KCB0ICkge1xuXG5cdFx0XHR0aGlzLm9yaWdpbi5jb3B5KCB0aGlzLmF0KCB0LCB2MSApICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuY2xvc2VzdFBvaW50VG9Qb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0dmFyIGRpcmVjdGlvbkRpc3RhbmNlID0gdGFyZ2V0LmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGlyZWN0aW9uRGlzdGFuY2UgPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMub3JpZ2luICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIGRpcmVjdGlvbkRpc3RhbmNlICkuYWRkKCB0aGlzLm9yaWdpbiApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5kaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VTcVRvUG9pbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0XHR2YXIgZGlyZWN0aW9uRGlzdGFuY2UgPSB2MS5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5vcmlnaW4gKS5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0XHRcdC8vIHBvaW50IGJlaGluZCB0aGUgcmF5XG5cblx0XHRcdGlmICggZGlyZWN0aW9uRGlzdGFuY2UgPCAwICkge1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbi5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2MS5jb3B5KCB0aGlzLmRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCBkaXJlY3Rpb25EaXN0YW5jZSApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHRcdFx0cmV0dXJuIHYxLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZGlzdGFuY2VTcVRvU2VnbWVudDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHNlZ0NlbnRlciA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHNlZ0RpciA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGRpZmYgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGRpc3RhbmNlU3FUb1NlZ21lbnQoIHYwLCB2MSwgb3B0aW9uYWxQb2ludE9uUmF5LCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkge1xuXG5cdFx0XHQvLyBmcm9tIGh0dHA6Ly93d3cuZ2VvbWV0cmljdG9vbHMuY29tL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlRGlzdFJheVNlZ21lbnQuaFxuXHRcdFx0Ly8gSXQgcmV0dXJucyB0aGUgbWluIGRpc3RhbmNlIGJldHdlZW4gdGhlIHJheSBhbmQgdGhlIHNlZ21lbnRcblx0XHRcdC8vIGRlZmluZWQgYnkgdjAgYW5kIHYxXG5cdFx0XHQvLyBJdCBjYW4gYWxzbyBzZXQgdHdvIG9wdGlvbmFsIHRhcmdldHMgOlxuXHRcdFx0Ly8gLSBUaGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgcmF5XG5cdFx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBzZWdtZW50XG5cblx0XHRcdHNlZ0NlbnRlci5jb3B5KCB2MCApLmFkZCggdjEgKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cdFx0XHRzZWdEaXIuY29weSggdjEgKS5zdWIoIHYwICkubm9ybWFsaXplKCk7XG5cdFx0XHRkaWZmLmNvcHkoIHRoaXMub3JpZ2luICkuc3ViKCBzZWdDZW50ZXIgKTtcblxuXHRcdFx0dmFyIHNlZ0V4dGVudCA9IHYwLmRpc3RhbmNlVG8oIHYxICkgKiAwLjU7XG5cdFx0XHR2YXIgYTAxID0gLSB0aGlzLmRpcmVjdGlvbi5kb3QoIHNlZ0RpciApO1xuXHRcdFx0dmFyIGIwID0gZGlmZi5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cdFx0XHR2YXIgYjEgPSAtIGRpZmYuZG90KCBzZWdEaXIgKTtcblx0XHRcdHZhciBjID0gZGlmZi5sZW5ndGhTcSgpO1xuXHRcdFx0dmFyIGRldCA9IE1hdGguYWJzKCAxIC0gYTAxICogYTAxICk7XG5cdFx0XHR2YXIgczAsIHMxLCBzcXJEaXN0LCBleHREZXQ7XG5cblx0XHRcdGlmICggZGV0ID4gMCApIHtcblxuXHRcdFx0XHQvLyBUaGUgcmF5IGFuZCBzZWdtZW50IGFyZSBub3QgcGFyYWxsZWwuXG5cblx0XHRcdFx0czAgPSBhMDEgKiBiMSAtIGIwO1xuXHRcdFx0XHRzMSA9IGEwMSAqIGIwIC0gYjE7XG5cdFx0XHRcdGV4dERldCA9IHNlZ0V4dGVudCAqIGRldDtcblxuXHRcdFx0XHRpZiAoIHMwID49IDAgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHMxID49IC0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHMxIDw9IGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyByZWdpb24gMFxuXHRcdFx0XHRcdFx0XHQvLyBNaW5pbXVtIGF0IGludGVyaW9yIHBvaW50cyBvZiByYXkgYW5kIHNlZ21lbnQuXG5cblx0XHRcdFx0XHRcdFx0dmFyIGludkRldCA9IDEgLyBkZXQ7XG5cdFx0XHRcdFx0XHRcdHMwICo9IGludkRldDtcblx0XHRcdFx0XHRcdFx0czEgKj0gaW52RGV0O1xuXHRcdFx0XHRcdFx0XHRzcXJEaXN0ID0gczAgKiAoIHMwICsgYTAxICogczEgKyAyICogYjAgKSArIHMxICogKCBhMDEgKiBzMCArIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIHJlZ2lvbiAxXG5cblx0XHRcdFx0XHRcdFx0czEgPSBzZWdFeHRlbnQ7XG5cdFx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDVcblxuXHRcdFx0XHRcdFx0czEgPSAtIHNlZ0V4dGVudDtcblx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggczEgPD0gLSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHJlZ2lvbiA0XG5cblx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCAtIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcblx0XHRcdFx0XHRcdHMxID0gKCBzMCA+IDAgKSA/IC0gc2VnRXh0ZW50IDogTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBzMSA8PSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHJlZ2lvbiAzXG5cblx0XHRcdFx0XHRcdHMwID0gMDtcblx0XHRcdFx0XHRcdHMxID0gTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gMlxuXG5cdFx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogc2VnRXh0ZW50ICsgYjAgKSApO1xuXHRcdFx0XHRcdFx0czEgPSAoIHMwID4gMCApID8gc2VnRXh0ZW50IDogTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFJheSBhbmQgc2VnbWVudCBhcmUgcGFyYWxsZWwuXG5cblx0XHRcdFx0czEgPSAoIGEwMSA+IDAgKSA/IC0gc2VnRXh0ZW50IDogc2VnRXh0ZW50O1xuXHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XG5cdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvcHRpb25hbFBvaW50T25SYXkgKSB7XG5cblx0XHRcdFx0b3B0aW9uYWxQb2ludE9uUmF5LmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIHMwICkuYWRkKCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb3B0aW9uYWxQb2ludE9uU2VnbWVudCApIHtcblxuXHRcdFx0XHRvcHRpb25hbFBvaW50T25TZWdtZW50LmNvcHkoIHNlZ0RpciApLm11bHRpcGx5U2NhbGFyKCBzMSApLmFkZCggc2VnQ2VudGVyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNxckRpc3Q7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRpbnRlcnNlY3RTcGhlcmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0U3BoZXJlKCBzcGhlcmUsIHRhcmdldCApIHtcblxuXHRcdFx0djEuc3ViVmVjdG9ycyggc3BoZXJlLmNlbnRlciwgdGhpcy5vcmlnaW4gKTtcblx0XHRcdHZhciB0Y2EgPSB2MS5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cdFx0XHR2YXIgZDIgPSB2MS5kb3QoIHYxICkgLSB0Y2EgKiB0Y2E7XG5cdFx0XHR2YXIgcmFkaXVzMiA9IHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzO1xuXG5cdFx0XHRpZiAoIGQyID4gcmFkaXVzMiApIHJldHVybiBudWxsO1xuXG5cdFx0XHR2YXIgdGhjID0gTWF0aC5zcXJ0KCByYWRpdXMyIC0gZDIgKTtcblxuXHRcdFx0Ly8gdDAgPSBmaXJzdCBpbnRlcnNlY3QgcG9pbnQgLSBlbnRyYW5jZSBvbiBmcm9udCBvZiBzcGhlcmVcblx0XHRcdHZhciB0MCA9IHRjYSAtIHRoYztcblxuXHRcdFx0Ly8gdDEgPSBzZWNvbmQgaW50ZXJzZWN0IHBvaW50IC0gZXhpdCBwb2ludCBvbiBiYWNrIG9mIHNwaGVyZVxuXHRcdFx0dmFyIHQxID0gdGNhICsgdGhjO1xuXG5cdFx0XHQvLyB0ZXN0IHRvIHNlZSBpZiBib3RoIHQwIGFuZCB0MSBhcmUgYmVoaW5kIHRoZSByYXkgLSBpZiBzbywgcmV0dXJuIG51bGxcblx0XHRcdGlmICggdDAgPCAwICYmIHQxIDwgMCApIHJldHVybiBudWxsO1xuXG5cdFx0XHQvLyB0ZXN0IHRvIHNlZSBpZiB0MCBpcyBiZWhpbmQgdGhlIHJheTpcblx0XHRcdC8vIGlmIGl0IGlzLCB0aGUgcmF5IGlzIGluc2lkZSB0aGUgc3BoZXJlLCBzbyByZXR1cm4gdGhlIHNlY29uZCBleGl0IHBvaW50IHNjYWxlZCBieSB0MSxcblx0XHRcdC8vIGluIG9yZGVyIHRvIGFsd2F5cyByZXR1cm4gYW4gaW50ZXJzZWN0IHBvaW50IHRoYXQgaXMgaW4gZnJvbnQgb2YgdGhlIHJheS5cblx0XHRcdGlmICggdDAgPCAwICkgcmV0dXJuIHRoaXMuYXQoIHQxLCB0YXJnZXQgKTtcblxuXHRcdFx0Ly8gZWxzZSB0MCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LCBzbyByZXR1cm4gdGhlIGZpcnN0IGNvbGxpc2lvbiBwb2ludCBzY2FsZWQgYnkgdDBcblx0XHRcdHJldHVybiB0aGlzLmF0KCB0MCwgdGFyZ2V0ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmRpc3RhbmNlU3FUb1BvaW50KCBzcGhlcmUuY2VudGVyICkgPD0gKCBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cyApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0dmFyIGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSB7XG5cblx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cblx0XHRcdGlmICggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLm9yaWdpbiApID09PSAwICkge1xuXG5cdFx0XHRcdHJldHVybiAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIE51bGwgaXMgcHJlZmVyYWJsZSB0byB1bmRlZmluZWQgc2luY2UgdW5kZWZpbmVkIG1lYW5zLi4uLiBpdCBpcyB1bmRlZmluZWRcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgdCA9IC0gKCB0aGlzLm9yaWdpbi5kb3QoIHBsYW5lLm5vcm1hbCApICsgcGxhbmUuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0Ly8gUmV0dXJuIGlmIHRoZSByYXkgbmV2ZXIgaW50ZXJzZWN0cyB0aGUgcGxhbmVcblxuXHRcdHJldHVybiB0ID49IDAgPyB0IDogbnVsbDtcblxuXHR9LFxuXG5cdGludGVyc2VjdFBsYW5lOiBmdW5jdGlvbiAoIHBsYW5lLCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgdCA9IHRoaXMuZGlzdGFuY2VUb1BsYW5lKCBwbGFuZSApO1xuXG5cdFx0aWYgKCB0ID09PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmF0KCB0LCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNQbGFuZTogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdC8vIGNoZWNrIGlmIHRoZSByYXkgbGllcyBvbiB0aGUgcGxhbmUgZmlyc3RcblxuXHRcdHZhciBkaXN0VG9Qb2ludCA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKTtcblxuXHRcdGlmICggZGlzdFRvUG9pbnQgPT09IDAgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgKiBkaXN0VG9Qb2ludCA8IDAgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gcmF5IG9yaWdpbiBpcyBiZWhpbmQgdGhlIHBsYW5lIChhbmQgaXMgcG9pbnRpbmcgYmVoaW5kIGl0KVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0Qm94OiBmdW5jdGlvbiAoIGJveCwgdGFyZ2V0ICkge1xuXG5cdFx0dmFyIHRtaW4sIHRtYXgsIHR5bWluLCB0eW1heCwgdHptaW4sIHR6bWF4O1xuXG5cdFx0dmFyIGludmRpcnggPSAxIC8gdGhpcy5kaXJlY3Rpb24ueCxcblx0XHRcdGludmRpcnkgPSAxIC8gdGhpcy5kaXJlY3Rpb24ueSxcblx0XHRcdGludmRpcnogPSAxIC8gdGhpcy5kaXJlY3Rpb24uejtcblxuXHRcdHZhciBvcmlnaW4gPSB0aGlzLm9yaWdpbjtcblxuXHRcdGlmICggaW52ZGlyeCA+PSAwICkge1xuXG5cdFx0XHR0bWluID0gKCBib3gubWluLnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblx0XHRcdHRtYXggPSAoIGJveC5tYXgueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dG1pbiA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cdFx0XHR0bWF4ID0gKCBib3gubWluLnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblxuXHRcdH1cblxuXHRcdGlmICggaW52ZGlyeSA+PSAwICkge1xuXG5cdFx0XHR0eW1pbiA9ICggYm94Lm1pbi55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cdFx0XHR0eW1heCA9ICggYm94Lm1heC55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0eW1pbiA9ICggYm94Lm1heC55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cdFx0XHR0eW1heCA9ICggYm94Lm1pbi55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cblx0XHR9XG5cblx0XHRpZiAoICggdG1pbiA+IHR5bWF4ICkgfHwgKCB0eW1pbiA+IHRtYXggKSApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gVGhlc2UgbGluZXMgYWxzbyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdG1pbiBvciB0bWF4IGlzIE5hTlxuXHRcdC8vIChyZXN1bHQgb2YgMCAqIEluZmluaXR5KS4geCAhPT0geCByZXR1cm5zIHRydWUgaWYgeCBpcyBOYU5cblxuXHRcdGlmICggdHltaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4gKSB0bWluID0gdHltaW47XG5cblx0XHRpZiAoIHR5bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4ICkgdG1heCA9IHR5bWF4O1xuXG5cdFx0aWYgKCBpbnZkaXJ6ID49IDAgKSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHptYXggKSB8fCAoIHR6bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHRpZiAoIHR6bWluID4gdG1pbiB8fCB0bWluICE9PSB0bWluICkgdG1pbiA9IHR6bWluO1xuXG5cdFx0aWYgKCB0em1heCA8IHRtYXggfHwgdG1heCAhPT0gdG1heCApIHRtYXggPSB0em1heDtcblxuXHRcdC8vcmV0dXJuIHBvaW50IGNsb3Nlc3QgdG8gdGhlIHJheSAocG9zaXRpdmUgc2lkZSlcblxuXHRcdGlmICggdG1heCA8IDAgKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzLmF0KCB0bWluID49IDAgPyB0bWluIDogdG1heCwgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmludGVyc2VjdEJveCggYm94LCB2ICkgIT09IG51bGw7XG5cblx0XHR9O1xuXG5cdH0gKSgpLFxuXG5cdGludGVyc2VjdFRyaWFuZ2xlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBDb21wdXRlIHRoZSBvZmZzZXQgb3JpZ2luLCBlZGdlcywgYW5kIG5vcm1hbC5cblx0XHR2YXIgZGlmZiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGVkZ2UxID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZWRnZTIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdFRyaWFuZ2xlKCBhLCBiLCBjLCBiYWNrZmFjZUN1bGxpbmcsIHRhcmdldCApIHtcblxuXHRcdFx0Ly8gZnJvbSBodHRwOi8vd3d3Lmdlb21ldHJpY3Rvb2xzLmNvbS9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZUludHJSYXkzVHJpYW5nbGUzLmhcblxuXHRcdFx0ZWRnZTEuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdFx0ZWRnZTIuc3ViVmVjdG9ycyggYywgYSApO1xuXHRcdFx0bm9ybWFsLmNyb3NzVmVjdG9ycyggZWRnZTEsIGVkZ2UyICk7XG5cblx0XHRcdC8vIFNvbHZlIFEgKyB0KkQgPSBiMSpFMSArIGIyKkUyIChRID0ga0RpZmYsIEQgPSByYXkgZGlyZWN0aW9uLFxuXHRcdFx0Ly8gRTEgPSBrRWRnZTEsIEUyID0ga0VkZ2UyLCBOID0gQ3Jvc3MoRTEsRTIpKSBieVxuXHRcdFx0Ly8gICB8RG90KEQsTil8KmIxID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoUSxFMikpXG5cdFx0XHQvLyAgIHxEb3QoRCxOKXwqYjIgPSBzaWduKERvdChELE4pKSpEb3QoRCxDcm9zcyhFMSxRKSlcblx0XHRcdC8vICAgfERvdChELE4pfCp0ID0gLXNpZ24oRG90KEQsTikpKkRvdChRLE4pXG5cdFx0XHR2YXIgRGROID0gdGhpcy5kaXJlY3Rpb24uZG90KCBub3JtYWwgKTtcblx0XHRcdHZhciBzaWduO1xuXG5cdFx0XHRpZiAoIERkTiA+IDAgKSB7XG5cblx0XHRcdFx0aWYgKCBiYWNrZmFjZUN1bGxpbmcgKSByZXR1cm4gbnVsbDtcblx0XHRcdFx0c2lnbiA9IDE7XG5cblx0XHRcdH0gZWxzZSBpZiAoIERkTiA8IDAgKSB7XG5cblx0XHRcdFx0c2lnbiA9IC0gMTtcblx0XHRcdFx0RGROID0gLSBEZE47XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0ZGlmZi5zdWJWZWN0b3JzKCB0aGlzLm9yaWdpbiwgYSApO1xuXHRcdFx0dmFyIERkUXhFMiA9IHNpZ24gKiB0aGlzLmRpcmVjdGlvbi5kb3QoIGVkZ2UyLmNyb3NzVmVjdG9ycyggZGlmZiwgZWRnZTIgKSApO1xuXG5cdFx0XHQvLyBiMSA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdFx0aWYgKCBEZFF4RTIgPCAwICkge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBEZEUxeFEgPSBzaWduICogdGhpcy5kaXJlY3Rpb24uZG90KCBlZGdlMS5jcm9zcyggZGlmZiApICk7XG5cblx0XHRcdC8vIGIyIDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0XHRpZiAoIERkRTF4USA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gYjErYjIgPiAxLCBubyBpbnRlcnNlY3Rpb25cblx0XHRcdGlmICggRGRReEUyICsgRGRFMXhRID4gRGROICkge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIExpbmUgaW50ZXJzZWN0cyB0cmlhbmdsZSwgY2hlY2sgaWYgcmF5IGRvZXMuXG5cdFx0XHR2YXIgUWROID0gLSBzaWduICogZGlmZi5kb3QoIG5vcm1hbCApO1xuXG5cdFx0XHQvLyB0IDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0XHRpZiAoIFFkTiA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmF5IGludGVyc2VjdHMgdHJpYW5nbGUuXG5cdFx0XHRyZXR1cm4gdGhpcy5hdCggUWROIC8gRGROLCB0YXJnZXQgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXg0ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uYXBwbHlNYXRyaXg0KCBtYXRyaXg0ICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXg0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCByYXkgKSB7XG5cblx0XHRyZXR1cm4gcmF5Lm9yaWdpbi5lcXVhbHMoIHRoaXMub3JpZ2luICkgJiYgcmF5LmRpcmVjdGlvbi5lcXVhbHMoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBUcmlhbmdsZSggYSwgYiwgYyApIHtcblxuXHR0aGlzLmEgPSAoIGEgIT09IHVuZGVmaW5lZCApID8gYSA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMuYiA9ICggYiAhPT0gdW5kZWZpbmVkICkgPyBiIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5jID0gKCBjICE9PSB1bmRlZmluZWQgKSA/IGMgOiBuZXcgVmVjdG9yMygpO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFRyaWFuZ2xlLCB7XG5cblx0Z2V0Tm9ybWFsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjAgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldE5vcm1hbCggYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0Tm9ybWFsKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0YXJnZXQuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdFx0djAuc3ViVmVjdG9ycyggYSwgYiApO1xuXHRcdFx0dGFyZ2V0LmNyb3NzKCB2MCApO1xuXG5cdFx0XHR2YXIgdGFyZ2V0TGVuZ3RoU3EgPSB0YXJnZXQubGVuZ3RoU3EoKTtcblx0XHRcdGlmICggdGFyZ2V0TGVuZ3RoU3EgPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiB0YXJnZXQubXVsdGlwbHlTY2FsYXIoIDEgLyBNYXRoLnNxcnQoIHRhcmdldExlbmd0aFNxICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LnNldCggMCwgMCwgMCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Ly8gc3RhdGljL2luc3RhbmNlIG1ldGhvZCB0byBjYWxjdWxhdGUgYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXNcblx0Ly8gYmFzZWQgb246IGh0dHA6Ly93d3cuYmxhY2twYXduLmNvbS90ZXh0cy9wb2ludGlucG9seS9kZWZhdWx0Lmh0bWxcblx0Z2V0QmFyeWNvb3JkOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBnZXRCYXJ5Y29vcmQoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRcdHYwLnN1YlZlY3RvcnMoIGMsIGEgKTtcblx0XHRcdHYxLnN1YlZlY3RvcnMoIGIsIGEgKTtcblx0XHRcdHYyLnN1YlZlY3RvcnMoIHBvaW50LCBhICk7XG5cblx0XHRcdHZhciBkb3QwMCA9IHYwLmRvdCggdjAgKTtcblx0XHRcdHZhciBkb3QwMSA9IHYwLmRvdCggdjEgKTtcblx0XHRcdHZhciBkb3QwMiA9IHYwLmRvdCggdjIgKTtcblx0XHRcdHZhciBkb3QxMSA9IHYxLmRvdCggdjEgKTtcblx0XHRcdHZhciBkb3QxMiA9IHYxLmRvdCggdjIgKTtcblxuXHRcdFx0dmFyIGRlbm9tID0gKCBkb3QwMCAqIGRvdDExIC0gZG90MDEgKiBkb3QwMSApO1xuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0QmFyeWNvb3JkKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjb2xsaW5lYXIgb3Igc2luZ3VsYXIgdHJpYW5nbGVcblx0XHRcdGlmICggZGVub20gPT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gYXJiaXRyYXJ5IGxvY2F0aW9uIG91dHNpZGUgb2YgdHJpYW5nbGU/XG5cdFx0XHRcdC8vIG5vdCBzdXJlIGlmIHRoaXMgaXMgdGhlIGJlc3QgaWRlYSwgbWF5YmUgc2hvdWxkIGJlIHJldHVybmluZyB1bmRlZmluZWRcblx0XHRcdFx0cmV0dXJuIHRhcmdldC5zZXQoIC0gMiwgLSAxLCAtIDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaW52RGVub20gPSAxIC8gZGVub207XG5cdFx0XHR2YXIgdSA9ICggZG90MTEgKiBkb3QwMiAtIGRvdDAxICogZG90MTIgKSAqIGludkRlbm9tO1xuXHRcdFx0dmFyIHYgPSAoIGRvdDAwICogZG90MTIgLSBkb3QwMSAqIGRvdDAyICkgKiBpbnZEZW5vbTtcblxuXHRcdFx0Ly8gYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgbXVzdCBhbHdheXMgc3VtIHRvIDFcblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCAxIC0gdSAtIHYsIHYsIHUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY29udGFpbnNQb2ludCggcG9pbnQsIGEsIGIsIGMgKSB7XG5cblx0XHRcdFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHYxICk7XG5cblx0XHRcdHJldHVybiAoIHYxLnggPj0gMCApICYmICggdjEueSA+PSAwICkgJiYgKCAoIHYxLnggKyB2MS55ICkgPD0gMSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0VVY6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBiYXJ5Y29vcmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldFVWKCBwb2ludCwgcDEsIHAyLCBwMywgdXYxLCB1djIsIHV2MywgdGFyZ2V0ICkge1xuXG5cdFx0XHR0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIHAxLCBwMiwgcDMsIGJhcnljb29yZCApO1xuXG5cdFx0XHR0YXJnZXQuc2V0KCAwLCAwICk7XG5cdFx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB1djEsIGJhcnljb29yZC54ICk7XG5cdFx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB1djIsIGJhcnljb29yZC55ICk7XG5cdFx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB1djMsIGJhcnljb29yZC56ICk7XG5cblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRpc0Zyb250RmFjaW5nOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaXNGcm9udEZhY2luZyggYSwgYiwgYywgZGlyZWN0aW9uICkge1xuXG5cdFx0XHR2MC5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0XHR2MS5zdWJWZWN0b3JzKCBhLCBiICk7XG5cblx0XHRcdC8vIHN0cmljdGx5IGZyb250IGZhY2luZ1xuXHRcdFx0cmV0dXJuICggdjAuY3Jvc3MoIHYxICkuZG90KCBkaXJlY3Rpb24gKSA8IDAgKSA/IHRydWUgOiBmYWxzZTtcblxuXHRcdH07XG5cblx0fSgpXG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIGEsIGIsIGMgKSB7XG5cblx0XHR0aGlzLmEuY29weSggYSApO1xuXHRcdHRoaXMuYi5jb3B5KCBiICk7XG5cdFx0dGhpcy5jLmNvcHkoIGMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50c0FuZEluZGljZXM6IGZ1bmN0aW9uICggcG9pbnRzLCBpMCwgaTEsIGkyICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHBvaW50c1sgaTAgXSApO1xuXHRcdHRoaXMuYi5jb3B5KCBwb2ludHNbIGkxIF0gKTtcblx0XHR0aGlzLmMuY29weSggcG9pbnRzWyBpMiBdICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHRyaWFuZ2xlLmEgKTtcblx0XHR0aGlzLmIuY29weSggdHJpYW5nbGUuYiApO1xuXHRcdHRoaXMuYy5jb3B5KCB0cmlhbmdsZS5jICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBnZXRBcmVhKCkge1xuXG5cdFx0XHR2MC5zdWJWZWN0b3JzKCB0aGlzLmMsIHRoaXMuYiApO1xuXHRcdFx0djEuc3ViVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKTtcblxuXHRcdFx0cmV0dXJuIHYwLmNyb3NzKCB2MSApLmxlbmd0aCgpICogMC41O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0TWlkcG9pbnQ6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRNaWRwb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLmEsIHRoaXMuYiApLmFkZCggdGhpcy5jICkubXVsdGlwbHlTY2FsYXIoIDEgLyAzICk7XG5cblx0fSxcblxuXHRnZXROb3JtYWw6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldE5vcm1hbCggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRnZXRQbGFuZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmdldFBsYW5lKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldEZyb21Db3BsYW5hclBvaW50cyggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYyApO1xuXG5cdH0sXG5cblx0Z2V0QmFyeWNvb3JkOiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRnZXRVVjogZnVuY3Rpb24gKCBwb2ludCwgdXYxLCB1djIsIHV2MywgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldFVWKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdXYxLCB1djIsIHV2MywgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmNvbnRhaW5zUG9pbnQoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7XG5cblx0fSxcblxuXHRpc0Zyb250RmFjaW5nOiBmdW5jdGlvbiAoIGRpcmVjdGlvbiApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5pc0Zyb250RmFjaW5nKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCBkaXJlY3Rpb24gKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzVHJpYW5nbGUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2YWIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2YWMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2YmMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2YXAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2YnAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2Y3AgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNsb3Nlc3RQb2ludFRvUG9pbnQoIHAsIHRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBhID0gdGhpcy5hLCBiID0gdGhpcy5iLCBjID0gdGhpcy5jO1xuXHRcdFx0dmFyIHYsIHc7XG5cblx0XHRcdC8vIGFsZ29yaXRobSB0aGFua3MgdG8gUmVhbC1UaW1lIENvbGxpc2lvbiBEZXRlY3Rpb24gYnkgQ2hyaXN0ZXIgRXJpY3Nvbixcblx0XHRcdC8vIHB1Ymxpc2hlZCBieSBNb3JnYW4gS2F1Zm1hbm4gUHVibGlzaGVycywgKGMpIDIwMDUgRWxzZXZpZXIgSW5jLixcblx0XHRcdC8vIHVuZGVyIHRoZSBhY2NvbXBhbnlpbmcgbGljZW5zZTsgc2VlIGNoYXB0ZXIgNS4xLjUgZm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uLlxuXHRcdFx0Ly8gYmFzaWNhbGx5LCB3ZSdyZSBkaXN0aW5ndWlzaGluZyB3aGljaCBvZiB0aGUgdm9yb25vaSByZWdpb25zIG9mIHRoZSB0cmlhbmdsZVxuXHRcdFx0Ly8gdGhlIHBvaW50IGxpZXMgaW4gd2l0aCB0aGUgbWluaW11bSBhbW91bnQgb2YgcmVkdW5kYW50IGNvbXB1dGF0aW9uLlxuXG5cdFx0XHR2YWIuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdFx0dmFjLnN1YlZlY3RvcnMoIGMsIGEgKTtcblx0XHRcdHZhcC5zdWJWZWN0b3JzKCBwLCBhICk7XG5cdFx0XHR2YXIgZDEgPSB2YWIuZG90KCB2YXAgKTtcblx0XHRcdHZhciBkMiA9IHZhYy5kb3QoIHZhcCApO1xuXHRcdFx0aWYgKCBkMSA8PSAwICYmIGQyIDw9IDAgKSB7XG5cblx0XHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBBOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEsIDAsIDApXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZicC5zdWJWZWN0b3JzKCBwLCBiICk7XG5cdFx0XHR2YXIgZDMgPSB2YWIuZG90KCB2YnAgKTtcblx0XHRcdHZhciBkNCA9IHZhYy5kb3QoIHZicCApO1xuXHRcdFx0aWYgKCBkMyA+PSAwICYmIGQ0IDw9IGQzICkge1xuXG5cdFx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQjsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLCAwKVxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdmMgPSBkMSAqIGQ0IC0gZDMgKiBkMjtcblx0XHRcdGlmICggdmMgPD0gMCAmJiBkMSA+PSAwICYmIGQzIDw9IDAgKSB7XG5cblx0XHRcdFx0diA9IGQxIC8gKCBkMSAtIGQzICk7XG5cdFx0XHRcdC8vIGVkZ2UgcmVnaW9uIG9mIEFCOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEtdiwgdiwgMClcblx0XHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCB2YWIsIHYgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2Y3Auc3ViVmVjdG9ycyggcCwgYyApO1xuXHRcdFx0dmFyIGQ1ID0gdmFiLmRvdCggdmNwICk7XG5cdFx0XHR2YXIgZDYgPSB2YWMuZG90KCB2Y3AgKTtcblx0XHRcdGlmICggZDYgPj0gMCAmJiBkNSA8PSBkNiApIHtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMCwgMSlcblx0XHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBjICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHZiID0gZDUgKiBkMiAtIGQxICogZDY7XG5cdFx0XHRpZiAoIHZiIDw9IDAgJiYgZDIgPj0gMCAmJiBkNiA8PSAwICkge1xuXG5cdFx0XHRcdHcgPSBkMiAvICggZDIgLSBkNiApO1xuXHRcdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBBQzsgYmFyeWNlbnRyaWMgY29vcmRzICgxLXcsIDAsIHcpXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggdmFjLCB3ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHZhID0gZDMgKiBkNiAtIGQ1ICogZDQ7XG5cdFx0XHRpZiAoIHZhIDw9IDAgJiYgKCBkNCAtIGQzICkgPj0gMCAmJiAoIGQ1IC0gZDYgKSA+PSAwICkge1xuXG5cdFx0XHRcdHZiYy5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0XHRcdHcgPSAoIGQ0IC0gZDMgKSAvICggKCBkNCAtIGQzICkgKyAoIGQ1IC0gZDYgKSApO1xuXHRcdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBCQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLXcsIHcpXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYiApLmFkZFNjYWxlZFZlY3RvciggdmJjLCB3ICk7IC8vIGVkZ2UgcmVnaW9uIG9mIEJDXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZmFjZSByZWdpb25cblx0XHRcdHZhciBkZW5vbSA9IDEgLyAoIHZhICsgdmIgKyB2YyApO1xuXHRcdFx0Ly8gdSA9IHZhICogZGVub21cblx0XHRcdHYgPSB2YiAqIGRlbm9tO1xuXHRcdFx0dyA9IHZjICogZGVub207XG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIHZhYiwgdiApLmFkZFNjYWxlZFZlY3RvciggdmFjLCB3ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggdHJpYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdHJpYW5nbGUuYS5lcXVhbHMoIHRoaXMuYSApICYmIHRyaWFuZ2xlLmIuZXF1YWxzKCB0aGlzLmIgKSAmJiB0cmlhbmdsZS5jLmVxdWFscyggdGhpcy5jICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgQ29sb3JLZXl3b3JkcyA9IHsgJ2FsaWNlYmx1ZSc6IDB4RjBGOEZGLCAnYW50aXF1ZXdoaXRlJzogMHhGQUVCRDcsICdhcXVhJzogMHgwMEZGRkYsICdhcXVhbWFyaW5lJzogMHg3RkZGRDQsICdhenVyZSc6IDB4RjBGRkZGLFxuXHQnYmVpZ2UnOiAweEY1RjVEQywgJ2Jpc3F1ZSc6IDB4RkZFNEM0LCAnYmxhY2snOiAweDAwMDAwMCwgJ2JsYW5jaGVkYWxtb25kJzogMHhGRkVCQ0QsICdibHVlJzogMHgwMDAwRkYsICdibHVldmlvbGV0JzogMHg4QTJCRTIsXG5cdCdicm93bic6IDB4QTUyQTJBLCAnYnVybHl3b29kJzogMHhERUI4ODcsICdjYWRldGJsdWUnOiAweDVGOUVBMCwgJ2NoYXJ0cmV1c2UnOiAweDdGRkYwMCwgJ2Nob2NvbGF0ZSc6IDB4RDI2OTFFLCAnY29yYWwnOiAweEZGN0Y1MCxcblx0J2Nvcm5mbG93ZXJibHVlJzogMHg2NDk1RUQsICdjb3Juc2lsayc6IDB4RkZGOERDLCAnY3JpbXNvbic6IDB4REMxNDNDLCAnY3lhbic6IDB4MDBGRkZGLCAnZGFya2JsdWUnOiAweDAwMDA4QiwgJ2RhcmtjeWFuJzogMHgwMDhCOEIsXG5cdCdkYXJrZ29sZGVucm9kJzogMHhCODg2MEIsICdkYXJrZ3JheSc6IDB4QTlBOUE5LCAnZGFya2dyZWVuJzogMHgwMDY0MDAsICdkYXJrZ3JleSc6IDB4QTlBOUE5LCAnZGFya2toYWtpJzogMHhCREI3NkIsICdkYXJrbWFnZW50YSc6IDB4OEIwMDhCLFxuXHQnZGFya29saXZlZ3JlZW4nOiAweDU1NkIyRiwgJ2RhcmtvcmFuZ2UnOiAweEZGOEMwMCwgJ2RhcmtvcmNoaWQnOiAweDk5MzJDQywgJ2RhcmtyZWQnOiAweDhCMDAwMCwgJ2RhcmtzYWxtb24nOiAweEU5OTY3QSwgJ2RhcmtzZWFncmVlbic6IDB4OEZCQzhGLFxuXHQnZGFya3NsYXRlYmx1ZSc6IDB4NDgzRDhCLCAnZGFya3NsYXRlZ3JheSc6IDB4MkY0RjRGLCAnZGFya3NsYXRlZ3JleSc6IDB4MkY0RjRGLCAnZGFya3R1cnF1b2lzZSc6IDB4MDBDRUQxLCAnZGFya3Zpb2xldCc6IDB4OTQwMEQzLFxuXHQnZGVlcHBpbmsnOiAweEZGMTQ5MywgJ2RlZXBza3libHVlJzogMHgwMEJGRkYsICdkaW1ncmF5JzogMHg2OTY5NjksICdkaW1ncmV5JzogMHg2OTY5NjksICdkb2RnZXJibHVlJzogMHgxRTkwRkYsICdmaXJlYnJpY2snOiAweEIyMjIyMixcblx0J2Zsb3JhbHdoaXRlJzogMHhGRkZBRjAsICdmb3Jlc3RncmVlbic6IDB4MjI4QjIyLCAnZnVjaHNpYSc6IDB4RkYwMEZGLCAnZ2FpbnNib3JvJzogMHhEQ0RDREMsICdnaG9zdHdoaXRlJzogMHhGOEY4RkYsICdnb2xkJzogMHhGRkQ3MDAsXG5cdCdnb2xkZW5yb2QnOiAweERBQTUyMCwgJ2dyYXknOiAweDgwODA4MCwgJ2dyZWVuJzogMHgwMDgwMDAsICdncmVlbnllbGxvdyc6IDB4QURGRjJGLCAnZ3JleSc6IDB4ODA4MDgwLCAnaG9uZXlkZXcnOiAweEYwRkZGMCwgJ2hvdHBpbmsnOiAweEZGNjlCNCxcblx0J2luZGlhbnJlZCc6IDB4Q0Q1QzVDLCAnaW5kaWdvJzogMHg0QjAwODIsICdpdm9yeSc6IDB4RkZGRkYwLCAna2hha2knOiAweEYwRTY4QywgJ2xhdmVuZGVyJzogMHhFNkU2RkEsICdsYXZlbmRlcmJsdXNoJzogMHhGRkYwRjUsICdsYXduZ3JlZW4nOiAweDdDRkMwMCxcblx0J2xlbW9uY2hpZmZvbic6IDB4RkZGQUNELCAnbGlnaHRibHVlJzogMHhBREQ4RTYsICdsaWdodGNvcmFsJzogMHhGMDgwODAsICdsaWdodGN5YW4nOiAweEUwRkZGRiwgJ2xpZ2h0Z29sZGVucm9keWVsbG93JzogMHhGQUZBRDIsICdsaWdodGdyYXknOiAweEQzRDNEMyxcblx0J2xpZ2h0Z3JlZW4nOiAweDkwRUU5MCwgJ2xpZ2h0Z3JleSc6IDB4RDNEM0QzLCAnbGlnaHRwaW5rJzogMHhGRkI2QzEsICdsaWdodHNhbG1vbic6IDB4RkZBMDdBLCAnbGlnaHRzZWFncmVlbic6IDB4MjBCMkFBLCAnbGlnaHRza3libHVlJzogMHg4N0NFRkEsXG5cdCdsaWdodHNsYXRlZ3JheSc6IDB4Nzc4ODk5LCAnbGlnaHRzbGF0ZWdyZXknOiAweDc3ODg5OSwgJ2xpZ2h0c3RlZWxibHVlJzogMHhCMEM0REUsICdsaWdodHllbGxvdyc6IDB4RkZGRkUwLCAnbGltZSc6IDB4MDBGRjAwLCAnbGltZWdyZWVuJzogMHgzMkNEMzIsXG5cdCdsaW5lbic6IDB4RkFGMEU2LCAnbWFnZW50YSc6IDB4RkYwMEZGLCAnbWFyb29uJzogMHg4MDAwMDAsICdtZWRpdW1hcXVhbWFyaW5lJzogMHg2NkNEQUEsICdtZWRpdW1ibHVlJzogMHgwMDAwQ0QsICdtZWRpdW1vcmNoaWQnOiAweEJBNTVEMyxcblx0J21lZGl1bXB1cnBsZSc6IDB4OTM3MERCLCAnbWVkaXVtc2VhZ3JlZW4nOiAweDNDQjM3MSwgJ21lZGl1bXNsYXRlYmx1ZSc6IDB4N0I2OEVFLCAnbWVkaXVtc3ByaW5nZ3JlZW4nOiAweDAwRkE5QSwgJ21lZGl1bXR1cnF1b2lzZSc6IDB4NDhEMUNDLFxuXHQnbWVkaXVtdmlvbGV0cmVkJzogMHhDNzE1ODUsICdtaWRuaWdodGJsdWUnOiAweDE5MTk3MCwgJ21pbnRjcmVhbSc6IDB4RjVGRkZBLCAnbWlzdHlyb3NlJzogMHhGRkU0RTEsICdtb2NjYXNpbic6IDB4RkZFNEI1LCAnbmF2YWpvd2hpdGUnOiAweEZGREVBRCxcblx0J25hdnknOiAweDAwMDA4MCwgJ29sZGxhY2UnOiAweEZERjVFNiwgJ29saXZlJzogMHg4MDgwMDAsICdvbGl2ZWRyYWInOiAweDZCOEUyMywgJ29yYW5nZSc6IDB4RkZBNTAwLCAnb3JhbmdlcmVkJzogMHhGRjQ1MDAsICdvcmNoaWQnOiAweERBNzBENixcblx0J3BhbGVnb2xkZW5yb2QnOiAweEVFRThBQSwgJ3BhbGVncmVlbic6IDB4OThGQjk4LCAncGFsZXR1cnF1b2lzZSc6IDB4QUZFRUVFLCAncGFsZXZpb2xldHJlZCc6IDB4REI3MDkzLCAncGFwYXlhd2hpcCc6IDB4RkZFRkQ1LCAncGVhY2hwdWZmJzogMHhGRkRBQjksXG5cdCdwZXJ1JzogMHhDRDg1M0YsICdwaW5rJzogMHhGRkMwQ0IsICdwbHVtJzogMHhEREEwREQsICdwb3dkZXJibHVlJzogMHhCMEUwRTYsICdwdXJwbGUnOiAweDgwMDA4MCwgJ3JlYmVjY2FwdXJwbGUnOiAweDY2MzM5OSwgJ3JlZCc6IDB4RkYwMDAwLCAncm9zeWJyb3duJzogMHhCQzhGOEYsXG5cdCdyb3lhbGJsdWUnOiAweDQxNjlFMSwgJ3NhZGRsZWJyb3duJzogMHg4QjQ1MTMsICdzYWxtb24nOiAweEZBODA3MiwgJ3NhbmR5YnJvd24nOiAweEY0QTQ2MCwgJ3NlYWdyZWVuJzogMHgyRThCNTcsICdzZWFzaGVsbCc6IDB4RkZGNUVFLFxuXHQnc2llbm5hJzogMHhBMDUyMkQsICdzaWx2ZXInOiAweEMwQzBDMCwgJ3NreWJsdWUnOiAweDg3Q0VFQiwgJ3NsYXRlYmx1ZSc6IDB4NkE1QUNELCAnc2xhdGVncmF5JzogMHg3MDgwOTAsICdzbGF0ZWdyZXknOiAweDcwODA5MCwgJ3Nub3cnOiAweEZGRkFGQSxcblx0J3NwcmluZ2dyZWVuJzogMHgwMEZGN0YsICdzdGVlbGJsdWUnOiAweDQ2ODJCNCwgJ3Rhbic6IDB4RDJCNDhDLCAndGVhbCc6IDB4MDA4MDgwLCAndGhpc3RsZSc6IDB4RDhCRkQ4LCAndG9tYXRvJzogMHhGRjYzNDcsICd0dXJxdW9pc2UnOiAweDQwRTBEMCxcblx0J3Zpb2xldCc6IDB4RUU4MkVFLCAnd2hlYXQnOiAweEY1REVCMywgJ3doaXRlJzogMHhGRkZGRkYsICd3aGl0ZXNtb2tlJzogMHhGNUY1RjUsICd5ZWxsb3cnOiAweEZGRkYwMCwgJ3llbGxvd2dyZWVuJzogMHg5QUNEMzIgfTtcblxuZnVuY3Rpb24gQ29sb3IoIHIsIGcsIGIgKSB7XG5cblx0aWYgKCBnID09PSB1bmRlZmluZWQgJiYgYiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Ly8gciBpcyBUSFJFRS5Db2xvciwgaGV4IG9yIHN0cmluZ1xuXHRcdHJldHVybiB0aGlzLnNldCggciApO1xuXG5cdH1cblxuXHRyZXR1cm4gdGhpcy5zZXRSR0IoIHIsIGcsIGIgKTtcblxufVxuXG5mdW5jdGlvbiBodWUycmdiKCBwLCBxLCB0ICkge1xuXG5cdGlmICggdCA8IDAgKSB0ICs9IDE7XG5cdGlmICggdCA+IDEgKSB0IC09IDE7XG5cdGlmICggdCA8IDEgLyA2ICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogdDtcblx0aWYgKCB0IDwgMSAvIDIgKSByZXR1cm4gcTtcblx0aWYgKCB0IDwgMiAvIDMgKSByZXR1cm4gcCArICggcSAtIHAgKSAqIDYgKiAoIDIgLyAzIC0gdCApO1xuXHRyZXR1cm4gcDtcblxufVxuXG5mdW5jdGlvbiBTUkdCVG9MaW5lYXIoIGMgKSB7XG5cblx0cmV0dXJuICggYyA8IDAuMDQwNDUgKSA/IGMgKiAwLjA3NzM5OTM4MDggOiBNYXRoLnBvdyggYyAqIDAuOTQ3ODY3Mjk4NiArIDAuMDUyMTMyNzAxNCwgMi40ICk7XG5cbn1cblxuZnVuY3Rpb24gTGluZWFyVG9TUkdCKCBjICkge1xuXG5cdHJldHVybiAoIGMgPCAwLjAwMzEzMDggKSA/IGMgKiAxMi45MiA6IDEuMDU1ICogKCBNYXRoLnBvdyggYywgMC40MTY2NiApICkgLSAwLjA1NTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBDb2xvci5wcm90b3R5cGUsIHtcblxuXHRpc0NvbG9yOiB0cnVlLFxuXG5cdHI6IDEsIGc6IDEsIGI6IDEsXG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHR0aGlzLmNvcHkoIHZhbHVlICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHR0aGlzLnNldEhleCggdmFsdWUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgKSB7XG5cblx0XHRcdHRoaXMuc2V0U3R5bGUoIHZhbHVlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnIgPSBzY2FsYXI7XG5cdFx0dGhpcy5nID0gc2NhbGFyO1xuXHRcdHRoaXMuYiA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0SGV4OiBmdW5jdGlvbiAoIGhleCApIHtcblxuXHRcdGhleCA9IE1hdGguZmxvb3IoIGhleCApO1xuXG5cdFx0dGhpcy5yID0gKCBoZXggPj4gMTYgJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmcgPSAoIGhleCA+PiA4ICYgMjU1ICkgLyAyNTU7XG5cdFx0dGhpcy5iID0gKCBoZXggJiAyNTUgKSAvIDI1NTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UkdCOiBmdW5jdGlvbiAoIHIsIGcsIGIgKSB7XG5cblx0XHR0aGlzLnIgPSByO1xuXHRcdHRoaXMuZyA9IGc7XG5cdFx0dGhpcy5iID0gYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0SFNMOiBmdW5jdGlvbiAoIGgsIHMsIGwgKSB7XG5cblx0XHQvLyBoLHMsbCByYW5nZXMgYXJlIGluIDAuMCAtIDEuMFxuXHRcdGggPSBfTWF0aC5ldWNsaWRlYW5Nb2R1bG8oIGgsIDEgKTtcblx0XHRzID0gX01hdGguY2xhbXAoIHMsIDAsIDEgKTtcblx0XHRsID0gX01hdGguY2xhbXAoIGwsIDAsIDEgKTtcblxuXHRcdGlmICggcyA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy5yID0gdGhpcy5nID0gdGhpcy5iID0gbDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBwID0gbCA8PSAwLjUgPyBsICogKCAxICsgcyApIDogbCArIHMgLSAoIGwgKiBzICk7XG5cdFx0XHR2YXIgcSA9ICggMiAqIGwgKSAtIHA7XG5cblx0XHRcdHRoaXMuciA9IGh1ZTJyZ2IoIHEsIHAsIGggKyAxIC8gMyApO1xuXHRcdFx0dGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApO1xuXHRcdFx0dGhpcy5iID0gaHVlMnJnYiggcSwgcCwgaCAtIDEgLyAzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFN0eWxlOiBmdW5jdGlvbiAoIHN0eWxlICkge1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoIHN0cmluZyApIHtcblxuXHRcdFx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiAnICsgc3R5bGUgKyAnIHdpbGwgYmUgaWdub3JlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0dmFyIG07XG5cblx0XHRpZiAoIG0gPSAvXigoPzpyZ2J8aHNsKWE/KVxcKFxccyooW15cXCldKilcXCkvLmV4ZWMoIHN0eWxlICkgKSB7XG5cblx0XHRcdC8vIHJnYiAvIGhzbFxuXG5cdFx0XHR2YXIgY29sb3I7XG5cdFx0XHR2YXIgbmFtZSA9IG1bIDEgXTtcblx0XHRcdHZhciBjb21wb25lbnRzID0gbVsgMiBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmdiKDI1NSwwLDApIHJnYmEoMjU1LDAsMCwwLjUpXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMjU1O1xuXHRcdFx0XHRcdFx0dGhpcy5nID0gTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDI1NTtcblx0XHRcdFx0XHRcdHRoaXMuYiA9IE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAyNTU7XG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmdiKDEwMCUsMCUsMCUpIHJnYmEoMTAwJSwwJSwwJSwwLjUpXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dGhpcy5nID0gTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDEwMDtcblx0XHRcdFx0XHRcdHRoaXMuYiA9IE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAxMDA7XG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnaHNsJzpcblx0XHRcdFx0Y2FzZSAnaHNsYSc6XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL14oWzAtOV0qXFwuP1swLTldKylcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBoc2woMTIwLDUwJSw1MCUpIGhzbGEoMTIwLDUwJSw1MCUsMC41KVxuXHRcdFx0XHRcdFx0dmFyIGggPSBwYXJzZUZsb2F0KCBjb2xvclsgMSBdICkgLyAzNjA7XG5cdFx0XHRcdFx0XHR2YXIgcyA9IHBhcnNlSW50KCBjb2xvclsgMiBdLCAxMCApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dmFyIGwgPSBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSAvIDEwMDtcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA1IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0SFNMKCBoLCBzLCBsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbSA9IC9eXFwjKFtBLUZhLWYwLTldKykkLy5leGVjKCBzdHlsZSApICkge1xuXG5cdFx0XHQvLyBoZXggY29sb3JcblxuXHRcdFx0dmFyIGhleCA9IG1bIDEgXTtcblx0XHRcdHZhciBzaXplID0gaGV4Lmxlbmd0aDtcblxuXHRcdFx0aWYgKCBzaXplID09PSAzICkge1xuXG5cdFx0XHRcdC8vICNmZjBcblx0XHRcdFx0dGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDAgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDIgKSArIGhleC5jaGFyQXQoIDIgKSwgMTYgKSAvIDI1NTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0fSBlbHNlIGlmICggc2l6ZSA9PT0gNiApIHtcblxuXHRcdFx0XHQvLyAjZmYwMDAwXG5cdFx0XHRcdHRoaXMuciA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAwICkgKyBoZXguY2hhckF0KCAxICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuZyA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAyICkgKyBoZXguY2hhckF0KCAzICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuYiA9IHBhcnNlSW50KCBoZXguY2hhckF0KCA0ICkgKyBoZXguY2hhckF0KCA1ICksIDE2ICkgLyAyNTU7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gY29sb3Iga2V5d29yZHNcblx0XHRcdHZhciBoZXggPSBDb2xvcktleXdvcmRzWyBzdHlsZSBdO1xuXG5cdFx0XHRpZiAoIGhleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIHJlZFxuXHRcdFx0XHR0aGlzLnNldEhleCggaGV4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gdW5rbm93biBjb2xvclxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciAnICsgc3R5bGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLnIsIHRoaXMuZywgdGhpcy5iICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3Iucjtcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlHYW1tYVRvTGluZWFyOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHtcblxuXHRcdGlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIGdhbW1hRmFjdG9yID0gMi4wO1xuXG5cdFx0dGhpcy5yID0gTWF0aC5wb3coIGNvbG9yLnIsIGdhbW1hRmFjdG9yICk7XG5cdFx0dGhpcy5nID0gTWF0aC5wb3coIGNvbG9yLmcsIGdhbW1hRmFjdG9yICk7XG5cdFx0dGhpcy5iID0gTWF0aC5wb3coIGNvbG9yLmIsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHtcblxuXHRcdGlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIGdhbW1hRmFjdG9yID0gMi4wO1xuXG5cdFx0dmFyIHNhZmVJbnZlcnNlID0gKCBnYW1tYUZhY3RvciA+IDAgKSA/ICggMS4wIC8gZ2FtbWFGYWN0b3IgKSA6IDEuMDtcblxuXHRcdHRoaXMuciA9IE1hdGgucG93KCBjb2xvci5yLCBzYWZlSW52ZXJzZSApO1xuXHRcdHRoaXMuZyA9IE1hdGgucG93KCBjb2xvci5nLCBzYWZlSW52ZXJzZSApO1xuXHRcdHRoaXMuYiA9IE1hdGgucG93KCBjb2xvci5iLCBzYWZlSW52ZXJzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb252ZXJ0R2FtbWFUb0xpbmVhcjogZnVuY3Rpb24gKCBnYW1tYUZhY3RvciApIHtcblxuXHRcdHRoaXMuY29weUdhbW1hVG9MaW5lYXIoIHRoaXMsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnZlcnRMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGdhbW1hRmFjdG9yICkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9HYW1tYSggdGhpcywgZ2FtbWFGYWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IFNSR0JUb0xpbmVhciggY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IFNSR0JUb0xpbmVhciggY29sb3IuZyApO1xuXHRcdHRoaXMuYiA9IFNSR0JUb0xpbmVhciggY29sb3IuYiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5TGluZWFyVG9TUkdCOiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gTGluZWFyVG9TUkdCKCBjb2xvci5yICk7XG5cdFx0dGhpcy5nID0gTGluZWFyVG9TUkdCKCBjb2xvci5nICk7XG5cdFx0dGhpcy5iID0gTGluZWFyVG9TUkdCKCBjb2xvci5iICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnZlcnRTUkdCVG9MaW5lYXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY29weVNSR0JUb0xpbmVhciggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb252ZXJ0TGluZWFyVG9TUkdCOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNvcHlMaW5lYXJUb1NSR0IoIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0SGV4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLnIgKiAyNTUgKSA8PCAxNiBeICggdGhpcy5nICogMjU1ICkgPDwgOCBeICggdGhpcy5iICogMjU1ICkgPDwgMDtcblxuXHR9LFxuXG5cdGdldEhleFN0cmluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuICggJzAwMDAwMCcgKyB0aGlzLmdldEhleCgpLnRvU3RyaW5nKCAxNiApICkuc2xpY2UoIC0gNiApO1xuXG5cdH0sXG5cblx0Z2V0SFNMOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdC8vIGgscyxsIHJhbmdlcyBhcmUgaW4gMC4wIC0gMS4wXG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogLmdldEhTTCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSB7IGg6IDAsIHM6IDAsIGw6IDAgfTtcblxuXHRcdH1cblxuXHRcdHZhciByID0gdGhpcy5yLCBnID0gdGhpcy5nLCBiID0gdGhpcy5iO1xuXG5cdFx0dmFyIG1heCA9IE1hdGgubWF4KCByLCBnLCBiICk7XG5cdFx0dmFyIG1pbiA9IE1hdGgubWluKCByLCBnLCBiICk7XG5cblx0XHR2YXIgaHVlLCBzYXR1cmF0aW9uO1xuXHRcdHZhciBsaWdodG5lc3MgPSAoIG1pbiArIG1heCApIC8gMi4wO1xuXG5cdFx0aWYgKCBtaW4gPT09IG1heCApIHtcblxuXHRcdFx0aHVlID0gMDtcblx0XHRcdHNhdHVyYXRpb24gPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGRlbHRhID0gbWF4IC0gbWluO1xuXG5cdFx0XHRzYXR1cmF0aW9uID0gbGlnaHRuZXNzIDw9IDAuNSA/IGRlbHRhIC8gKCBtYXggKyBtaW4gKSA6IGRlbHRhIC8gKCAyIC0gbWF4IC0gbWluICk7XG5cblx0XHRcdHN3aXRjaCAoIG1heCApIHtcblxuXHRcdFx0XHRjYXNlIHI6IGh1ZSA9ICggZyAtIGIgKSAvIGRlbHRhICsgKCBnIDwgYiA/IDYgOiAwICk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIGc6IGh1ZSA9ICggYiAtIHIgKSAvIGRlbHRhICsgMjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgYjogaHVlID0gKCByIC0gZyApIC8gZGVsdGEgKyA0OyBicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRodWUgLz0gNjtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5oID0gaHVlO1xuXHRcdHRhcmdldC5zID0gc2F0dXJhdGlvbjtcblx0XHR0YXJnZXQubCA9IGxpZ2h0bmVzcztcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fSxcblxuXHRnZXRTdHlsZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuICdyZ2IoJyArICggKCB0aGlzLnIgKiAyNTUgKSB8IDAgKSArICcsJyArICggKCB0aGlzLmcgKiAyNTUgKSB8IDAgKSArICcsJyArICggKCB0aGlzLmIgKiAyNTUgKSB8IDAgKSArICcpJztcblxuXHR9LFxuXG5cdG9mZnNldEhTTDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGhzbCA9IHt9O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uICggaCwgcywgbCApIHtcblxuXHRcdFx0dGhpcy5nZXRIU0woIGhzbCApO1xuXG5cdFx0XHRoc2wuaCArPSBoOyBoc2wucyArPSBzOyBoc2wubCArPSBsO1xuXG5cdFx0XHR0aGlzLnNldEhTTCggaHNsLmgsIGhzbC5zLCBoc2wubCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGFkZDogZnVuY3Rpb24gKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciArPSBjb2xvci5yO1xuXHRcdHRoaXMuZyArPSBjb2xvci5nO1xuXHRcdHRoaXMuYiArPSBjb2xvci5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRDb2xvcnM6IGZ1bmN0aW9uICggY29sb3IxLCBjb2xvcjIgKSB7XG5cblx0XHR0aGlzLnIgPSBjb2xvcjEuciArIGNvbG9yMi5yO1xuXHRcdHRoaXMuZyA9IGNvbG9yMS5nICsgY29sb3IyLmc7XG5cdFx0dGhpcy5iID0gY29sb3IxLmIgKyBjb2xvcjIuYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnIgKz0gcztcblx0XHR0aGlzLmcgKz0gcztcblx0XHR0aGlzLmIgKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViOiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gTWF0aC5tYXgoIDAsIHRoaXMuciAtIGNvbG9yLnIgKTtcblx0XHR0aGlzLmcgPSBNYXRoLm1heCggMCwgdGhpcy5nIC0gY29sb3IuZyApO1xuXHRcdHRoaXMuYiA9IE1hdGgubWF4KCAwLCB0aGlzLmIgLSBjb2xvci5iICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yICo9IGNvbG9yLnI7XG5cdFx0dGhpcy5nICo9IGNvbG9yLmc7XG5cdFx0dGhpcy5iICo9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnIgKj0gcztcblx0XHR0aGlzLmcgKj0gcztcblx0XHR0aGlzLmIgKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnIgKz0gKCBjb2xvci5yIC0gdGhpcy5yICkgKiBhbHBoYTtcblx0XHR0aGlzLmcgKz0gKCBjb2xvci5nIC0gdGhpcy5nICkgKiBhbHBoYTtcblx0XHR0aGlzLmIgKz0gKCBjb2xvci5iIC0gdGhpcy5iICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycEhTTDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGhzbEEgPSB7IGg6IDAsIHM6IDAsIGw6IDAgfTtcblx0XHR2YXIgaHNsQiA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxlcnBIU0woIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdFx0dGhpcy5nZXRIU0woIGhzbEEgKTtcblx0XHRcdGNvbG9yLmdldEhTTCggaHNsQiApO1xuXG5cdFx0XHR2YXIgaCA9IF9NYXRoLmxlcnAoIGhzbEEuaCwgaHNsQi5oLCBhbHBoYSApO1xuXHRcdFx0dmFyIHMgPSBfTWF0aC5sZXJwKCBoc2xBLnMsIGhzbEIucywgYWxwaGEgKTtcblx0XHRcdHZhciBsID0gX01hdGgubGVycCggaHNsQS5sLCBoc2xCLmwsIGFscGhhICk7XG5cblx0XHRcdHRoaXMuc2V0SFNMKCBoLCBzLCBsICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIGMgKSB7XG5cblx0XHRyZXR1cm4gKCBjLnIgPT09IHRoaXMuciApICYmICggYy5nID09PSB0aGlzLmcgKSAmJiAoIGMuYiA9PT0gdGhpcy5iICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy5yID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMuZyA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy5iID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMucjtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5nO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLmI7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdldEhleCgpO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZhY2UzKCBhLCBiLCBjLCBub3JtYWwsIGNvbG9yLCBtYXRlcmlhbEluZGV4ICkge1xuXG5cdHRoaXMuYSA9IGE7XG5cdHRoaXMuYiA9IGI7XG5cdHRoaXMuYyA9IGM7XG5cblx0dGhpcy5ub3JtYWwgPSAoIG5vcm1hbCAmJiBub3JtYWwuaXNWZWN0b3IzICkgPyBub3JtYWwgOiBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnZlcnRleE5vcm1hbHMgPSBBcnJheS5pc0FycmF5KCBub3JtYWwgKSA/IG5vcm1hbCA6IFtdO1xuXG5cdHRoaXMuY29sb3IgPSAoIGNvbG9yICYmIGNvbG9yLmlzQ29sb3IgKSA/IGNvbG9yIDogbmV3IENvbG9yKCk7XG5cdHRoaXMudmVydGV4Q29sb3JzID0gQXJyYXkuaXNBcnJheSggY29sb3IgKSA/IGNvbG9yIDogW107XG5cblx0dGhpcy5tYXRlcmlhbEluZGV4ID0gbWF0ZXJpYWxJbmRleCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWxJbmRleCA6IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRmFjZTMucHJvdG90eXBlLCB7XG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5hID0gc291cmNlLmE7XG5cdFx0dGhpcy5iID0gc291cmNlLmI7XG5cdFx0dGhpcy5jID0gc291cmNlLmM7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBzb3VyY2Uubm9ybWFsICk7XG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWF0ZXJpYWxJbmRleCA9IHNvdXJjZS5tYXRlcmlhbEluZGV4O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHNvdXJjZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnZlcnRleE5vcm1hbHNbIGkgXSA9IHNvdXJjZS52ZXJ0ZXhOb3JtYWxzWyBpIF0uY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBzb3VyY2UudmVydGV4Q29sb3JzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnZlcnRleENvbG9yc1sgaSBdID0gc291cmNlLnZlcnRleENvbG9yc1sgaSBdLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG52YXIgbWF0ZXJpYWxJZCA9IDA7XG5cbmZ1bmN0aW9uIE1hdGVyaWFsKCkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogbWF0ZXJpYWxJZCArKyB9ICk7XG5cblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cdHRoaXMudHlwZSA9ICdNYXRlcmlhbCc7XG5cblx0dGhpcy5mb2cgPSB0cnVlO1xuXHR0aGlzLmxpZ2h0cyA9IHRydWU7XG5cblx0dGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nO1xuXHR0aGlzLnNpZGUgPSBGcm9udFNpZGU7XG5cdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblx0dGhpcy52ZXJ0ZXhUYW5nZW50cyA9IGZhbHNlO1xuXHR0aGlzLnZlcnRleENvbG9ycyA9IE5vQ29sb3JzOyAvLyBUSFJFRS5Ob0NvbG9ycywgVEhSRUUuVmVydGV4Q29sb3JzLCBUSFJFRS5GYWNlQ29sb3JzXG5cblx0dGhpcy5vcGFjaXR5ID0gMTtcblx0dGhpcy50cmFuc3BhcmVudCA9IGZhbHNlO1xuXG5cdHRoaXMuYmxlbmRTcmMgPSBTcmNBbHBoYUZhY3Rvcjtcblx0dGhpcy5ibGVuZERzdCA9IE9uZU1pbnVzU3JjQWxwaGFGYWN0b3I7XG5cdHRoaXMuYmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uO1xuXHR0aGlzLmJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHR0aGlzLmJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cblx0dGhpcy5kZXB0aEZ1bmMgPSBMZXNzRXF1YWxEZXB0aDtcblx0dGhpcy5kZXB0aFRlc3QgPSB0cnVlO1xuXHR0aGlzLmRlcHRoV3JpdGUgPSB0cnVlO1xuXG5cdHRoaXMuc3RlbmNpbEZ1bmMgPSBBbHdheXNTdGVuY2lsRnVuYztcblx0dGhpcy5zdGVuY2lsUmVmID0gMDtcblx0dGhpcy5zdGVuY2lsTWFzayA9IDB4ZmY7XG5cdHRoaXMuc3RlbmNpbEZhaWwgPSBLZWVwU3RlbmNpbE9wO1xuXHR0aGlzLnN0ZW5jaWxaRmFpbCA9IEtlZXBTdGVuY2lsT3A7XG5cdHRoaXMuc3RlbmNpbFpQYXNzID0gS2VlcFN0ZW5jaWxPcDtcblx0dGhpcy5zdGVuY2lsV3JpdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gbnVsbDtcblx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gZmFsc2U7XG5cdHRoaXMuY2xpcFNoYWRvd3MgPSBmYWxzZTtcblxuXHR0aGlzLnNoYWRvd1NpZGUgPSBudWxsO1xuXG5cdHRoaXMuY29sb3JXcml0ZSA9IHRydWU7XG5cblx0dGhpcy5wcmVjaXNpb24gPSBudWxsOyAvLyBvdmVycmlkZSB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IHByZWNpc2lvbiBmb3IgdGhpcyBtYXRlcmlhbFxuXG5cdHRoaXMucG9seWdvbk9mZnNldCA9IGZhbHNlO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAwO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IDA7XG5cblx0dGhpcy5kaXRoZXJpbmcgPSBmYWxzZTtcblxuXHR0aGlzLmFscGhhVGVzdCA9IDA7XG5cdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG5cblx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHR0aGlzLnVzZXJEYXRhID0ge307XG5cblx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbn1cblxuTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IE1hdGVyaWFsLFxuXG5cdGlzTWF0ZXJpYWw6IHRydWUsXG5cblx0b25CZWZvcmVDb21waWxlOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRzZXRWYWx1ZXM6IGZ1bmN0aW9uICggdmFsdWVzICkge1xuXG5cdFx0aWYgKCB2YWx1ZXMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGZvciAoIHZhciBrZXkgaW4gdmFsdWVzICkge1xuXG5cdFx0XHR2YXIgbmV3VmFsdWUgPSB2YWx1ZXNbIGtleSBdO1xuXG5cdFx0XHRpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLk1hdGVyaWFsOiAnXCIgKyBrZXkgKyBcIicgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC5cIiApO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBmb3IgYmFja3dhcmQgY29tcGF0YWJpbGl0eSBpZiBzaGFkaW5nIGlzIHNldCBpbiB0aGUgY29uc3RydWN0b3Jcblx0XHRcdGlmICgga2V5ID09PSAnc2hhZGluZycgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZmxhdFNoYWRpbmcgPSAoIG5ld1ZhbHVlID09PSBGbGF0U2hhZGluZyApID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY3VycmVudFZhbHVlID0gdGhpc1sga2V5IF07XG5cblx0XHRcdGlmICggY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLlwiICsgdGhpcy50eXBlICsgXCI6ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlwiICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRcdGN1cnJlbnRWYWx1ZS5zZXQoIG5ld1ZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc1ZlY3RvcjMgKSAmJiAoIG5ld1ZhbHVlICYmIG5ld1ZhbHVlLmlzVmVjdG9yMyApICkge1xuXG5cdFx0XHRcdGN1cnJlbnRWYWx1ZS5jb3B5KCBuZXdWYWx1ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXNbIGtleSBdID0gbmV3VmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGlzUm9vdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0aWYgKCBpc1Jvb3QgKSB7XG5cblx0XHRcdG1ldGEgPSB7XG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnTWF0ZXJpYWwnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdNYXRlcmlhbC50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb25cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICYmIHRoaXMuY29sb3IuaXNDb2xvciApIGRhdGEuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzcztcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLm1ldGFsbmVzcyA9IHRoaXMubWV0YWxuZXNzO1xuXG5cdFx0aWYgKCB0aGlzLmVtaXNzaXZlICYmIHRoaXMuZW1pc3NpdmUuaXNDb2xvciApIGRhdGEuZW1pc3NpdmUgPSB0aGlzLmVtaXNzaXZlLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAmJiB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSAxICkgZGF0YS5lbWlzc2l2ZUludGVuc2l0eSA9IHRoaXMuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHRpZiAoIHRoaXMuc3BlY3VsYXIgJiYgdGhpcy5zcGVjdWxhci5pc0NvbG9yICkgZGF0YS5zcGVjdWxhciA9IHRoaXMuc3BlY3VsYXIuZ2V0SGV4KCk7XG5cdFx0aWYgKCB0aGlzLnNoaW5pbmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaGluaW5lc3MgPSB0aGlzLnNoaW5pbmVzcztcblx0XHRpZiAoIHRoaXMuY2xlYXJDb2F0ICE9PSB1bmRlZmluZWQgKSBkYXRhLmNsZWFyQ29hdCA9IHRoaXMuY2xlYXJDb2F0O1xuXHRcdGlmICggdGhpcy5jbGVhckNvYXRSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuY2xlYXJDb2F0Um91Z2huZXNzID0gdGhpcy5jbGVhckNvYXRSb3VnaG5lc3M7XG5cblx0XHRpZiAoIHRoaXMubWFwICYmIHRoaXMubWFwLmlzVGV4dHVyZSApIGRhdGEubWFwID0gdGhpcy5tYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMubWF0Y2FwICYmIHRoaXMubWF0Y2FwLmlzVGV4dHVyZSApIGRhdGEubWF0Y2FwID0gdGhpcy5tYXRjYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMuYWxwaGFNYXAgJiYgdGhpcy5hbHBoYU1hcC5pc1RleHR1cmUgKSBkYXRhLmFscGhhTWFwID0gdGhpcy5hbHBoYU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5saWdodE1hcCAmJiB0aGlzLmxpZ2h0TWFwLmlzVGV4dHVyZSApIGRhdGEubGlnaHRNYXAgPSB0aGlzLmxpZ2h0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuYW9NYXAgJiYgdGhpcy5hb01hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuYW9NYXAgPSB0aGlzLmFvTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLmFvTWFwSW50ZW5zaXR5ID0gdGhpcy5hb01hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5idW1wTWFwICYmIHRoaXMuYnVtcE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuYnVtcE1hcCA9IHRoaXMuYnVtcE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5idW1wU2NhbGUgPSB0aGlzLmJ1bXBTY2FsZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ub3JtYWxNYXAgJiYgdGhpcy5ub3JtYWxNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLm5vcm1hbE1hcCA9IHRoaXMubm9ybWFsTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLm5vcm1hbE1hcFR5cGUgPSB0aGlzLm5vcm1hbE1hcFR5cGU7XG5cdFx0XHRkYXRhLm5vcm1hbFNjYWxlID0gdGhpcy5ub3JtYWxTY2FsZS50b0FycmF5KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZGlzcGxhY2VtZW50TWFwICYmIHRoaXMuZGlzcGxhY2VtZW50TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRNYXAgPSB0aGlzLmRpc3BsYWNlbWVudE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRTY2FsZSA9IHRoaXMuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudEJpYXMgPSB0aGlzLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMucm91Z2huZXNzTWFwICYmIHRoaXMucm91Z2huZXNzTWFwLmlzVGV4dHVyZSApIGRhdGEucm91Z2huZXNzTWFwID0gdGhpcy5yb3VnaG5lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzTWFwICYmIHRoaXMubWV0YWxuZXNzTWFwLmlzVGV4dHVyZSApIGRhdGEubWV0YWxuZXNzTWFwID0gdGhpcy5tZXRhbG5lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdGlmICggdGhpcy5lbWlzc2l2ZU1hcCAmJiB0aGlzLmVtaXNzaXZlTWFwLmlzVGV4dHVyZSApIGRhdGEuZW1pc3NpdmVNYXAgPSB0aGlzLmVtaXNzaXZlTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyTWFwICYmIHRoaXMuc3BlY3VsYXJNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhck1hcCA9IHRoaXMuc3BlY3VsYXJNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdGlmICggdGhpcy5lbnZNYXAgJiYgdGhpcy5lbnZNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmVudk1hcCA9IHRoaXMuZW52TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLnJlZmxlY3Rpdml0eSA9IHRoaXMucmVmbGVjdGl2aXR5OyAvLyBTY2FsZSBiZWhpbmQgZW52TWFwXG5cdFx0XHRkYXRhLnJlZnJhY3Rpb25SYXRpbyA9IHRoaXMucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0XHRpZiAoIHRoaXMuY29tYmluZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5jb21iaW5lID0gdGhpcy5jb21iaW5lO1xuXHRcdFx0aWYgKCB0aGlzLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ncmFkaWVudE1hcCAmJiB0aGlzLmdyYWRpZW50TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ncmFkaWVudE1hcCA9IHRoaXMuZ3JhZGllbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5zaXplICE9PSB1bmRlZmluZWQgKSBkYXRhLnNpemUgPSB0aGlzLnNpemU7XG5cdFx0aWYgKCB0aGlzLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplQXR0ZW51YXRpb24gPSB0aGlzLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdGlmICggdGhpcy5ibGVuZGluZyAhPT0gTm9ybWFsQmxlbmRpbmcgKSBkYXRhLmJsZW5kaW5nID0gdGhpcy5ibGVuZGluZztcblx0XHRpZiAoIHRoaXMuZmxhdFNoYWRpbmcgPT09IHRydWUgKSBkYXRhLmZsYXRTaGFkaW5nID0gdGhpcy5mbGF0U2hhZGluZztcblx0XHRpZiAoIHRoaXMuc2lkZSAhPT0gRnJvbnRTaWRlICkgZGF0YS5zaWRlID0gdGhpcy5zaWRlO1xuXHRcdGlmICggdGhpcy52ZXJ0ZXhDb2xvcnMgIT09IE5vQ29sb3JzICkgZGF0YS52ZXJ0ZXhDb2xvcnMgPSB0aGlzLnZlcnRleENvbG9ycztcblxuXHRcdGlmICggdGhpcy5vcGFjaXR5IDwgMSApIGRhdGEub3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcblx0XHRpZiAoIHRoaXMudHJhbnNwYXJlbnQgPT09IHRydWUgKSBkYXRhLnRyYW5zcGFyZW50ID0gdGhpcy50cmFuc3BhcmVudDtcblxuXHRcdGRhdGEuZGVwdGhGdW5jID0gdGhpcy5kZXB0aEZ1bmM7XG5cdFx0ZGF0YS5kZXB0aFRlc3QgPSB0aGlzLmRlcHRoVGVzdDtcblx0XHRkYXRhLmRlcHRoV3JpdGUgPSB0aGlzLmRlcHRoV3JpdGU7XG5cblx0XHRkYXRhLnN0ZW5jaWxXcml0ZSA9IHRoaXMuc3RlbmNpbFdyaXRlO1xuXHRcdGRhdGEuc3RlbmNpbEZ1bmMgPSB0aGlzLnN0ZW5jaWxGdW5jO1xuXHRcdGRhdGEuc3RlbmNpbFJlZiA9IHRoaXMuc3RlbmNpbFJlZjtcblx0XHRkYXRhLnN0ZW5jaWxNYXNrID0gdGhpcy5zdGVuY2lsTWFzaztcblx0XHRkYXRhLnN0ZW5jaWxGYWlsID0gdGhpcy5zdGVuY2lsRmFpbDtcblx0XHRkYXRhLnN0ZW5jaWxaRmFpbCA9IHRoaXMuc3RlbmNpbFpGYWlsO1xuXHRcdGRhdGEuc3RlbmNpbFpQYXNzID0gdGhpcy5zdGVuY2lsWlBhc3M7XG5cblx0XHQvLyByb3RhdGlvbiAoU3ByaXRlTWF0ZXJpYWwpXG5cdFx0aWYgKCB0aGlzLnJvdGF0aW9uICYmIHRoaXMucm90YXRpb24gIT09IDAgKSBkYXRhLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbjtcblxuXHRcdGlmICggdGhpcy5wb2x5Z29uT2Zmc2V0ID09PSB0cnVlICkgZGF0YS5wb2x5Z29uT2Zmc2V0ID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldEZhY3RvciAhPT0gMCApIGRhdGEucG9seWdvbk9mZnNldEZhY3RvciA9IHRoaXMucG9seWdvbk9mZnNldEZhY3Rvcjtcblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldFVuaXRzICE9PSAwICkgZGF0YS5wb2x5Z29uT2Zmc2V0VW5pdHMgPSB0aGlzLnBvbHlnb25PZmZzZXRVbml0cztcblxuXHRcdGlmICggdGhpcy5saW5ld2lkdGggJiYgdGhpcy5saW5ld2lkdGggIT09IDEgKSBkYXRhLmxpbmV3aWR0aCA9IHRoaXMubGluZXdpZHRoO1xuXHRcdGlmICggdGhpcy5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5kYXNoU2l6ZSA9IHRoaXMuZGFzaFNpemU7XG5cdFx0aWYgKCB0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTtcblx0XHRpZiAoIHRoaXMuc2NhbGUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG5cdFx0aWYgKCB0aGlzLmRpdGhlcmluZyA9PT0gdHJ1ZSApIGRhdGEuZGl0aGVyaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5hbHBoYVRlc3QgPiAwICkgZGF0YS5hbHBoYVRlc3QgPSB0aGlzLmFscGhhVGVzdDtcblx0XHRpZiAoIHRoaXMucHJlbXVsdGlwbGllZEFscGhhID09PSB0cnVlICkgZGF0YS5wcmVtdWx0aXBsaWVkQWxwaGEgPSB0aGlzLnByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdGlmICggdGhpcy53aXJlZnJhbWUgPT09IHRydWUgKSBkYXRhLndpcmVmcmFtZSA9IHRoaXMud2lyZWZyYW1lO1xuXHRcdGlmICggdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPiAxICkgZGF0YS53aXJlZnJhbWVMaW5ld2lkdGggPSB0aGlzLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWNhcCAhPT0gJ3JvdW5kJyApIGRhdGEud2lyZWZyYW1lTGluZWNhcCA9IHRoaXMud2lyZWZyYW1lTGluZWNhcDtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWpvaW4gIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVqb2luID0gdGhpcy53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdGlmICggdGhpcy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSBkYXRhLm1vcnBoVGFyZ2V0cyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLm1vcnBoTm9ybWFscyA9PT0gdHJ1ZSApIGRhdGEubW9ycGhOb3JtYWxzID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMuc2tpbm5pbmcgPT09IHRydWUgKSBkYXRhLnNraW5uaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIGRhdGEudmlzaWJsZSA9IGZhbHNlO1xuXHRcdGlmICggSlNPTi5zdHJpbmdpZnkoIHRoaXMudXNlckRhdGEgKSAhPT0gJ3t9JyApIGRhdGEudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0Ly8gVE9ETzogQ29waWVkIGZyb20gT2JqZWN0M0QudG9KU09OXG5cblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIga2V5IGluIGNhY2hlICkge1xuXG5cdFx0XHRcdHZhciBkYXRhID0gY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5tZXRhZGF0YTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc1Jvb3QgKSB7XG5cblx0XHRcdHZhciB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTtcblx0XHRcdHZhciBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBkYXRhLnRleHR1cmVzID0gdGV4dHVyZXM7XG5cdFx0XHRpZiAoIGltYWdlcy5sZW5ndGggPiAwICkgZGF0YS5pbWFnZXMgPSBpbWFnZXM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xuXHRcdHRoaXMubGlnaHRzID0gc291cmNlLmxpZ2h0cztcblxuXHRcdHRoaXMuYmxlbmRpbmcgPSBzb3VyY2UuYmxlbmRpbmc7XG5cdFx0dGhpcy5zaWRlID0gc291cmNlLnNpZGU7XG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblx0XHR0aGlzLnZlcnRleENvbG9ycyA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHR0aGlzLm9wYWNpdHkgPSBzb3VyY2Uub3BhY2l0eTtcblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gc291cmNlLnRyYW5zcGFyZW50O1xuXG5cdFx0dGhpcy5ibGVuZFNyYyA9IHNvdXJjZS5ibGVuZFNyYztcblx0XHR0aGlzLmJsZW5kRHN0ID0gc291cmNlLmJsZW5kRHN0O1xuXHRcdHRoaXMuYmxlbmRFcXVhdGlvbiA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uO1xuXHRcdHRoaXMuYmxlbmRTcmNBbHBoYSA9IHNvdXJjZS5ibGVuZFNyY0FscGhhO1xuXHRcdHRoaXMuYmxlbmREc3RBbHBoYSA9IHNvdXJjZS5ibGVuZERzdEFscGhhO1xuXHRcdHRoaXMuYmxlbmRFcXVhdGlvbkFscGhhID0gc291cmNlLmJsZW5kRXF1YXRpb25BbHBoYTtcblxuXHRcdHRoaXMuZGVwdGhGdW5jID0gc291cmNlLmRlcHRoRnVuYztcblx0XHR0aGlzLmRlcHRoVGVzdCA9IHNvdXJjZS5kZXB0aFRlc3Q7XG5cdFx0dGhpcy5kZXB0aFdyaXRlID0gc291cmNlLmRlcHRoV3JpdGU7XG5cblx0XHR0aGlzLnN0ZW5jaWxXcml0ZSA9IHNvdXJjZS5zdGVuY2lsV3JpdGU7XG5cdFx0dGhpcy5zdGVuY2lsRnVuYyA9IHNvdXJjZS5zdGVuY2lsRnVuYztcblx0XHR0aGlzLnN0ZW5jaWxSZWYgPSBzb3VyY2Uuc3RlbmNpbFJlZjtcblx0XHR0aGlzLnN0ZW5jaWxNYXNrID0gc291cmNlLnN0ZW5jaWxNYXNrO1xuXHRcdHRoaXMuc3RlbmNpbEZhaWwgPSBzb3VyY2Uuc3RlbmNpbEZhaWw7XG5cdFx0dGhpcy5zdGVuY2lsWkZhaWwgPSBzb3VyY2Uuc3RlbmNpbFpGYWlsO1xuXHRcdHRoaXMuc3RlbmNpbFpQYXNzID0gc291cmNlLnN0ZW5jaWxaUGFzcztcblxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHNvdXJjZS5jb2xvcldyaXRlO1xuXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBzb3VyY2UucHJlY2lzaW9uO1xuXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gc291cmNlLnBvbHlnb25PZmZzZXQ7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gc291cmNlLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBzb3VyY2UucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0dGhpcy5kaXRoZXJpbmcgPSBzb3VyY2UuZGl0aGVyaW5nO1xuXG5cdFx0dGhpcy5hbHBoYVRlc3QgPSBzb3VyY2UuYWxwaGFUZXN0O1xuXHRcdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gc291cmNlLnByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBzb3VyY2UuY2xpcFNoYWRvd3M7XG5cdFx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gc291cmNlLmNsaXBJbnRlcnNlY3Rpb247XG5cblx0XHR2YXIgc3JjUGxhbmVzID0gc291cmNlLmNsaXBwaW5nUGxhbmVzLFxuXHRcdFx0ZHN0UGxhbmVzID0gbnVsbDtcblxuXHRcdGlmICggc3JjUGxhbmVzICE9PSBudWxsICkge1xuXG5cdFx0XHR2YXIgbiA9IHNyY1BsYW5lcy5sZW5ndGg7XG5cdFx0XHRkc3RQbGFuZXMgPSBuZXcgQXJyYXkoIG4gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpIClcblx0XHRcdFx0ZHN0UGxhbmVzWyBpIF0gPSBzcmNQbGFuZXNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IGRzdFBsYW5lcztcblxuXHRcdHRoaXMuc2hhZG93U2lkZSA9IHNvdXJjZS5zaGFkb3dTaWRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgZGVwdGhUZXN0OiA8Ym9vbD4sXG4gKiAgZGVwdGhXcml0ZTogPGJvb2w+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoQmFzaWNNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hCYXNpY01hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBlbWlzc2l2ZVxuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoQmFzaWNNYXRlcmlhbDtcblxuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaEJhc2ljTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYXJyYXkgKSApIHtcblxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LicgKTtcblxuXHR9XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cblx0dGhpcy5hcnJheSA9IGFycmF5O1xuXHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cdHRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gaXRlbVNpemUgOiAwO1xuXHR0aGlzLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkID09PSB0cnVlO1xuXG5cdHRoaXMuZHluYW1pYyA9IGZhbHNlO1xuXHR0aGlzLnVwZGF0ZVJhbmdlID0geyBvZmZzZXQ6IDAsIGNvdW50OiAtIDEgfTtcblxuXHR0aGlzLnZlcnNpb24gPSAwO1xuXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwgJ25lZWRzVXBkYXRlJywge1xuXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHtcblxuXHRpc0J1ZmZlckF0dHJpYnV0ZTogdHJ1ZSxcblxuXHRvblVwbG9hZENhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRzZXRBcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggYXJyYXkgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyB0aGlzLml0ZW1TaXplIDogMDtcblx0XHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldER5bmFtaWM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmR5bmFtaWMgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblx0XHR0aGlzLmFycmF5ID0gbmV3IHNvdXJjZS5hcnJheS5jb25zdHJ1Y3Rvciggc291cmNlLmFycmF5ICk7XG5cdFx0dGhpcy5pdGVtU2l6ZSA9IHNvdXJjZS5pdGVtU2l6ZTtcblx0XHR0aGlzLmNvdW50ID0gc291cmNlLmNvdW50O1xuXHRcdHRoaXMubm9ybWFsaXplZCA9IHNvdXJjZS5ub3JtYWxpemVkO1xuXG5cdFx0dGhpcy5keW5hbWljID0gc291cmNlLmR5bmFtaWM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlBdDogZnVuY3Rpb24gKCBpbmRleDEsIGF0dHJpYnV0ZSwgaW5kZXgyICkge1xuXG5cdFx0aW5kZXgxICo9IHRoaXMuaXRlbVNpemU7XG5cdFx0aW5kZXgyICo9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuaXRlbVNpemU7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weUFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIGFycmF5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlDb2xvcnNBcnJheTogZnVuY3Rpb24gKCBjb2xvcnMgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY29sb3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjb2xvciA9IGNvbG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGNvbG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlDb2xvcnNBcnJheSgpOiBjb2xvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdGNvbG9yID0gbmV3IENvbG9yKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gY29sb3Iucjtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IGNvbG9yLmc7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSBjb2xvci5iO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5VmVjdG9yMnNBcnJheTogZnVuY3Rpb24gKCB2ZWN0b3JzICkge1xuXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlY3RvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlY3RvciA9IHZlY3RvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjJzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0dmVjdG9yID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueDtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci55O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5VmVjdG9yM3NBcnJheTogZnVuY3Rpb24gKCB2ZWN0b3JzICkge1xuXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlY3RvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlY3RvciA9IHZlY3RvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0dmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueDtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci55O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlWZWN0b3I0c0FycmF5OiBmdW5jdGlvbiAoIHZlY3RvcnMgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdmVjdG9yID0gdmVjdG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHZlY3RvciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yNHNBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkJywgaSApO1xuXHRcdFx0XHR2ZWN0b3IgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci54O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnk7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3Iuejtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci53O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIHZhbHVlLCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0WDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgXTtcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggaW5kZXgsIHggKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgXSA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFk6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMSBdO1xuXG5cdH0sXG5cblx0c2V0WTogZnVuY3Rpb24gKCBpbmRleCwgeSApIHtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFo6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMiBdO1xuXG5cdH0sXG5cblx0c2V0WjogZnVuY3Rpb24gKCBpbmRleCwgeiApIHtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFc6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdO1xuXG5cdH0sXG5cblx0c2V0VzogZnVuY3Rpb24gKCBpbmRleCwgdyApIHtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXSA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFhZOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFhZWjogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSwgeiApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WFlaVzogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSwgeiwgdyApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDMgXSA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG9uVXBsb2FkOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuYXJyYXksIHRoaXMuaXRlbVNpemUgKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcblx0XHRcdHR5cGU6IHRoaXMuYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdGFycmF5OiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggdGhpcy5hcnJheSApLFxuXHRcdFx0bm9ybWFsaXplZDogdGhpcy5ub3JtYWxpemVkXG5cdFx0fTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuZnVuY3Rpb24gSW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgSW50OEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cbkludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuSW50OEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQ4QnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIFVpbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBVaW50OEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cblVpbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcblVpbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQ4QnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgVWludDhDbGFtcGVkQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcblVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gSW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEludDE2QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuSW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuSW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW50MTZCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gVWludDE2QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBVaW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5VaW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuVWludDE2QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgSW50MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5JbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5JbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQzMkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBVaW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cblVpbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5VaW50MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDMyQnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEZsb2F0MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5GbG9hdDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcbkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBGbG9hdDY0QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBGbG9hdDY0QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5GbG9hdDY0QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGU7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBEaXJlY3RHZW9tZXRyeSgpIHtcblxuXHR0aGlzLnZlcnRpY2VzID0gW107XG5cdHRoaXMubm9ybWFscyA9IFtdO1xuXHR0aGlzLmNvbG9ycyA9IFtdO1xuXHR0aGlzLnV2cyA9IFtdO1xuXHR0aGlzLnV2czIgPSBbXTtcblxuXHR0aGlzLmdyb3VwcyA9IFtdO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0ge307XG5cblx0dGhpcy5za2luV2VpZ2h0cyA9IFtdO1xuXHR0aGlzLnNraW5JbmRpY2VzID0gW107XG5cblx0Ly8gdGhpcy5saW5lRGlzdGFuY2VzID0gW107XG5cblx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdC8vIHVwZGF0ZSBmbGFnc1xuXG5cdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBEaXJlY3RHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRjb21wdXRlR3JvdXBzOiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIGdyb3VwO1xuXHRcdHZhciBncm91cHMgPSBbXTtcblx0XHR2YXIgbWF0ZXJpYWxJbmRleCA9IHVuZGVmaW5lZDtcblxuXHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZmFjZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRcdC8vIG1hdGVyaWFsc1xuXG5cdFx0XHRpZiAoIGZhY2UubWF0ZXJpYWxJbmRleCAhPT0gbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbEluZGV4ID0gZmFjZS5tYXRlcmlhbEluZGV4O1xuXG5cdFx0XHRcdGlmICggZ3JvdXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGdyb3VwLmNvdW50ID0gKCBpICogMyApIC0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdFx0Z3JvdXBzLnB1c2goIGdyb3VwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdyb3VwID0ge1xuXHRcdFx0XHRcdHN0YXJ0OiBpICogMyxcblx0XHRcdFx0XHRtYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4XG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZ3JvdXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Z3JvdXAuY291bnQgPSAoIGkgKiAzICkgLSBncm91cC5zdGFydDtcblx0XHRcdGdyb3Vwcy5wdXNoKCBncm91cCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ncm91cHMgPSBncm91cHM7XG5cblx0fSxcblxuXHRmcm9tR2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgZmFjZXMgPSBnZW9tZXRyeS5mYWNlcztcblx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnM7XG5cblx0XHR2YXIgaGFzRmFjZVZlcnRleFV2ID0gZmFjZVZlcnRleFV2c1sgMCBdICYmIGZhY2VWZXJ0ZXhVdnNbIDAgXS5sZW5ndGggPiAwO1xuXHRcdHZhciBoYXNGYWNlVmVydGV4VXYyID0gZmFjZVZlcnRleFV2c1sgMSBdICYmIGZhY2VWZXJ0ZXhVdnNbIDEgXS5sZW5ndGggPiAwO1xuXG5cdFx0Ly8gbW9ycGhzXG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xuXHRcdHZhciBtb3JwaFRhcmdldHNMZW5ndGggPSBtb3JwaFRhcmdldHMubGVuZ3RoO1xuXG5cdFx0dmFyIG1vcnBoVGFyZ2V0c1Bvc2l0aW9uO1xuXG5cdFx0aWYgKCBtb3JwaFRhcmdldHNMZW5ndGggPiAwICkge1xuXG5cdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvbiA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBtb3JwaFRhcmdldHNMZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0bW9ycGhUYXJnZXRzUG9zaXRpb25bIGkgXSA9IHtcblx0XHRcdFx0XHRuYW1lOiBtb3JwaFRhcmdldHNbIGkgXS5uYW1lLFxuXHRcdFx0XHQgXHRkYXRhOiBbXVxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRzLnBvc2l0aW9uID0gbW9ycGhUYXJnZXRzUG9zaXRpb247XG5cblx0XHR9XG5cblx0XHR2YXIgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhOb3JtYWxzO1xuXHRcdHZhciBtb3JwaE5vcm1hbHNMZW5ndGggPSBtb3JwaE5vcm1hbHMubGVuZ3RoO1xuXG5cdFx0dmFyIG1vcnBoVGFyZ2V0c05vcm1hbDtcblxuXHRcdGlmICggbW9ycGhOb3JtYWxzTGVuZ3RoID4gMCApIHtcblxuXHRcdFx0bW9ycGhUYXJnZXRzTm9ybWFsID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG1vcnBoTm9ybWFsc0xlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNOb3JtYWxbIGkgXSA9IHtcblx0XHRcdFx0XHRuYW1lOiBtb3JwaE5vcm1hbHNbIGkgXS5uYW1lLFxuXHRcdFx0XHQgXHRkYXRhOiBbXVxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRzLm5vcm1hbCA9IG1vcnBoVGFyZ2V0c05vcm1hbDtcblxuXHRcdH1cblxuXHRcdC8vIHNraW5zXG5cblx0XHR2YXIgc2tpbkluZGljZXMgPSBnZW9tZXRyeS5za2luSW5kaWNlcztcblx0XHR2YXIgc2tpbldlaWdodHMgPSBnZW9tZXRyeS5za2luV2VpZ2h0cztcblxuXHRcdHZhciBoYXNTa2luSW5kaWNlcyA9IHNraW5JbmRpY2VzLmxlbmd0aCA9PT0gdmVydGljZXMubGVuZ3RoO1xuXHRcdHZhciBoYXNTa2luV2VpZ2h0cyA9IHNraW5XZWlnaHRzLmxlbmd0aCA9PT0gdmVydGljZXMubGVuZ3RoO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggdmVydGljZXMubGVuZ3RoID4gMCAmJiBmYWNlcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5EaXJlY3RHZW9tZXRyeTogRmFjZWxlc3MgZ2VvbWV0cmllcyBhcmUgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBmYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKCB2ZXJ0aWNlc1sgZmFjZS5hIF0sIHZlcnRpY2VzWyBmYWNlLmIgXSwgdmVydGljZXNbIGZhY2UuYyBdICk7XG5cblx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRpZiAoIHZlcnRleE5vcm1hbHMubGVuZ3RoID09PSAzICkge1xuXG5cdFx0XHRcdHRoaXMubm9ybWFscy5wdXNoKCB2ZXJ0ZXhOb3JtYWxzWyAwIF0sIHZlcnRleE5vcm1hbHNbIDEgXSwgdmVydGV4Tm9ybWFsc1sgMiBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIG5vcm1hbCA9IGZhY2Uubm9ybWFsO1xuXG5cdFx0XHRcdHRoaXMubm9ybWFscy5wdXNoKCBub3JtYWwsIG5vcm1hbCwgbm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0XHRpZiAoIHZlcnRleENvbG9ycy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dGhpcy5jb2xvcnMucHVzaCggdmVydGV4Q29sb3JzWyAwIF0sIHZlcnRleENvbG9yc1sgMSBdLCB2ZXJ0ZXhDb2xvcnNbIDIgXSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciBjb2xvciA9IGZhY2UuY29sb3I7XG5cblx0XHRcdFx0dGhpcy5jb2xvcnMucHVzaCggY29sb3IsIGNvbG9yLCBjb2xvciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzRmFjZVZlcnRleFV2ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHZhciB2ZXJ0ZXhVdnMgPSBmYWNlVmVydGV4VXZzWyAwIF1bIGkgXTtcblxuXHRcdFx0XHRpZiAoIHZlcnRleFV2cyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGhpcy51dnMucHVzaCggdmVydGV4VXZzWyAwIF0sIHZlcnRleFV2c1sgMSBdLCB2ZXJ0ZXhVdnNbIDIgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5EaXJlY3RHZW9tZXRyeS5mcm9tR2VvbWV0cnkoKTogVW5kZWZpbmVkIHZlcnRleFV2ICcsIGkgKTtcblxuXHRcdFx0XHRcdHRoaXMudXZzLnB1c2goIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4VXYyID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHZhciB2ZXJ0ZXhVdnMgPSBmYWNlVmVydGV4VXZzWyAxIF1bIGkgXTtcblxuXHRcdFx0XHRpZiAoIHZlcnRleFV2cyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGhpcy51dnMyLnB1c2goIHZlcnRleFV2c1sgMCBdLCB2ZXJ0ZXhVdnNbIDEgXSwgdmVydGV4VXZzWyAyIF0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRGlyZWN0R2VvbWV0cnkuZnJvbUdlb21ldHJ5KCk6IFVuZGVmaW5lZCB2ZXJ0ZXhVdjIgJywgaSApO1xuXG5cdFx0XHRcdFx0dGhpcy51dnMyLnB1c2goIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbW9ycGhzXG5cblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IG1vcnBoVGFyZ2V0c0xlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGogXS52ZXJ0aWNlcztcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvblsgaiBdLmRhdGEucHVzaCggbW9ycGhUYXJnZXRbIGZhY2UuYSBdLCBtb3JwaFRhcmdldFsgZmFjZS5iIF0sIG1vcnBoVGFyZ2V0WyBmYWNlLmMgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IG1vcnBoTm9ybWFsc0xlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgbW9ycGhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGogXS52ZXJ0ZXhOb3JtYWxzWyBpIF07XG5cblx0XHRcdFx0bW9ycGhUYXJnZXRzTm9ybWFsWyBqIF0uZGF0YS5wdXNoKCBtb3JwaE5vcm1hbC5hLCBtb3JwaE5vcm1hbC5iLCBtb3JwaE5vcm1hbC5jICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc2tpbnNcblxuXHRcdFx0aWYgKCBoYXNTa2luSW5kaWNlcyApIHtcblxuXHRcdFx0XHR0aGlzLnNraW5JbmRpY2VzLnB1c2goIHNraW5JbmRpY2VzWyBmYWNlLmEgXSwgc2tpbkluZGljZXNbIGZhY2UuYiBdLCBza2luSW5kaWNlc1sgZmFjZS5jIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NraW5XZWlnaHRzICkge1xuXG5cdFx0XHRcdHRoaXMuc2tpbldlaWdodHMucHVzaCggc2tpbldlaWdodHNbIGZhY2UuYSBdLCBza2luV2VpZ2h0c1sgZmFjZS5iIF0sIHNraW5XZWlnaHRzWyBmYWNlLmMgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmNvbXB1dGVHcm91cHMoIGdlb21ldHJ5ICk7XG5cblx0XHR0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLnV2c05lZWRVcGRhdGUgPSBnZW9tZXRyeS51dnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMuZ3JvdXBzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5Lmdyb3Vwc05lZWRVcGRhdGU7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBhcnJheU1heCggYXJyYXkgKSB7XG5cblx0aWYgKCBhcnJheS5sZW5ndGggPT09IDAgKSByZXR1cm4gLSBJbmZpbml0eTtcblxuXHR2YXIgbWF4ID0gYXJyYXlbIDAgXTtcblxuXHRmb3IgKCB2YXIgaSA9IDEsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyArKyBpICkge1xuXG5cdFx0aWYgKCBhcnJheVsgaSBdID4gbWF4ICkgbWF4ID0gYXJyYXlbIGkgXTtcblxuXHR9XG5cblx0cmV0dXJuIG1heDtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBidWZmZXJHZW9tZXRyeUlkID0gMTsgLy8gQnVmZmVyR2VvbWV0cnkgdXNlcyBvZGQgbnVtYmVycyBhcyBJZFxuXG5mdW5jdGlvbiBCdWZmZXJHZW9tZXRyeSgpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IGJ1ZmZlckdlb21ldHJ5SWQgKz0gMiB9ICk7XG5cblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cdHRoaXMudHlwZSA9ICdCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5pbmRleCA9IG51bGw7XG5cdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXG5cdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cblx0dGhpcy5ncm91cHMgPSBbXTtcblxuXHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0dGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogSW5maW5pdHkgfTtcblxuXHR0aGlzLnVzZXJEYXRhID0ge307XG5cbn1cblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEJ1ZmZlckdlb21ldHJ5LFxuXG5cdGlzQnVmZmVyR2VvbWV0cnk6IHRydWUsXG5cblx0Z2V0SW5kZXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmluZGV4O1xuXG5cdH0sXG5cblx0c2V0SW5kZXg6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGluZGV4ICkgKSB7XG5cblx0XHRcdHRoaXMuaW5kZXggPSBuZXcgKCBhcnJheU1heCggaW5kZXggKSA+IDY1NTM1ID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGV4LCAxICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmluZGV4ID0gaW5kZXg7XG5cblx0XHR9XG5cblx0fSxcblxuXHRhZGRBdHRyaWJ1dGU6IGZ1bmN0aW9uICggbmFtZSwgYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCAhICggYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5pc0J1ZmZlckF0dHJpYnV0ZSApICYmICEgKCBhdHRyaWJ1dGUgJiYgYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRBdHRyaWJ1dGUoKSBub3cgZXhwZWN0cyAoIG5hbWUsIGF0dHJpYnV0ZSApLicgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuYWRkQXR0cmlidXRlKCBuYW1lLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcmd1bWVudHNbIDEgXSwgYXJndW1lbnRzWyAyIF0gKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBuYW1lID09PSAnaW5kZXgnICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5hZGRBdHRyaWJ1dGU6IFVzZSAuc2V0SW5kZXgoKSBmb3IgaW5kZXggYXR0cmlidXRlLicgKTtcblx0XHRcdHRoaXMuc2V0SW5kZXgoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHRoaXMuYXR0cmlidXRlc1sgbmFtZSBdID0gYXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHR9LFxuXG5cdHJlbW92ZUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0ZGVsZXRlIHRoaXMuYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRHcm91cDogZnVuY3Rpb24gKCBzdGFydCwgY291bnQsIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHR0aGlzLmdyb3Vwcy5wdXNoKCB7XG5cblx0XHRcdHN0YXJ0OiBzdGFydCxcblx0XHRcdGNvdW50OiBjb3VudCxcblx0XHRcdG1hdGVyaWFsSW5kZXg6IG1hdGVyaWFsSW5kZXggIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsSW5kZXggOiAwXG5cblx0XHR9ICk7XG5cblx0fSxcblxuXHRjbGVhckdyb3VwczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblxuXHR9LFxuXG5cdHNldERyYXdSYW5nZTogZnVuY3Rpb24gKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHR0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHN0YXJ0O1xuXHRcdHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gY291bnQ7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hdHJpeC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiApO1xuXHRcdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG5vcm1hbCA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRpZiAoIG5vcm1hbCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0XHRub3JtYWxNYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggbm9ybWFsICk7XG5cdFx0XHRub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRhbmdlbnQgPSB0aGlzLmF0dHJpYnV0ZXMudGFuZ2VudDtcblxuXHRcdGlmICggdGFuZ2VudCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0XHQvLyBUYW5nZW50IGlzIHZlYzQsIGJ1dCB0aGUgJy53JyBjb21wb25lbnQgaXMgYSBzaWduIHZhbHVlICgrMS8tMSkuXG5cdFx0XHRub3JtYWxNYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggdGFuZ2VudCApO1xuXHRcdFx0dGFuZ2VudC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdGF0ZVg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeC1heGlzXG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVgoIGFuZ2xlICkge1xuXG5cdFx0XHRtMS5tYWtlUm90YXRpb25YKCBhbmdsZSApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZVk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeS1heGlzXG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVkoIGFuZ2xlICkge1xuXG5cdFx0XHRtMS5tYWtlUm90YXRpb25ZKCBhbmdsZSApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZVo6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgei1heGlzXG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVooIGFuZ2xlICkge1xuXG5cdFx0XHRtMS5tYWtlUm90YXRpb25aKCBhbmdsZSApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gdHJhbnNsYXRlIGdlb21ldHJ5XG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHRyYW5zbGF0ZSggeCwgeSwgeiApIHtcblxuXHRcdFx0bTEubWFrZVRyYW5zbGF0aW9uKCB4LCB5LCB6ICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0c2NhbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHNjYWxlIGdlb21ldHJ5XG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNjYWxlKCB4LCB5LCB6ICkge1xuXG5cdFx0XHRtMS5tYWtlU2NhbGUoIHgsIHksIHogKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRsb29rQXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmogPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBsb29rQXQoIHZlY3RvciApIHtcblxuXHRcdFx0b2JqLmxvb2tBdCggdmVjdG9yICk7XG5cblx0XHRcdG9iai51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggb2JqLm1hdHJpeCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2Zmc2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjZW50ZXIoKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3guZ2V0Q2VudGVyKCBvZmZzZXQgKS5uZWdhdGUoKTtcblxuXHRcdFx0dGhpcy50cmFuc2xhdGUoIG9mZnNldC54LCBvZmZzZXQueSwgb2Zmc2V0LnogKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRzZXRGcm9tT2JqZWN0OiBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuc2V0RnJvbU9iamVjdCgpLiBDb252ZXJ0aW5nJywgb2JqZWN0LCB0aGlzICk7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIG9iamVjdC5pc1BvaW50cyB8fCBvYmplY3QuaXNMaW5lICkge1xuXG5cdFx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCAqIDMsIDMgKTtcblx0XHRcdHZhciBjb2xvcnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuY29sb3JzLmxlbmd0aCAqIDMsIDMgKTtcblxuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIHBvc2l0aW9ucy5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKSApO1xuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIGNvbG9ycy5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApICk7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkubGluZURpc3RhbmNlcyAmJiBnZW9tZXRyeS5saW5lRGlzdGFuY2VzLmxlbmd0aCA9PT0gZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdHZhciBsaW5lRGlzdGFuY2VzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LmxpbmVEaXN0YW5jZXMubGVuZ3RoLCAxICk7XG5cblx0XHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICdsaW5lRGlzdGFuY2UnLCBsaW5lRGlzdGFuY2VzLmNvcHlBcnJheSggZ2VvbWV0cnkubGluZURpc3RhbmNlcyApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNNZXNoICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dGhpcy5mcm9tR2VvbWV0cnkoIGdlb21ldHJ5ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgcG9pbnQgPSBwb2ludHNbIGkgXTtcblx0XHRcdHBvc2l0aW9uLnB1c2goIHBvaW50LngsIHBvaW50LnksIHBvaW50LnogfHwgMCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgMyApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHVwZGF0ZUZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0aWYgKCBvYmplY3QuaXNNZXNoICkge1xuXG5cdFx0XHR2YXIgZGlyZWN0ID0gZ2VvbWV0cnkuX19kaXJlY3RHZW9tZXRyeTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5lbGVtZW50c05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0ZGlyZWN0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRnZW9tZXRyeS5lbGVtZW50c05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGRpcmVjdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLmZyb21HZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkaXJlY3QudmVydGljZXNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlO1xuXHRcdFx0ZGlyZWN0Lm5vcm1hbHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGU7XG5cdFx0XHRkaXJlY3QuY29sb3JzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGU7XG5cdFx0XHRkaXJlY3QudXZzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnV2c05lZWRVcGRhdGU7XG5cdFx0XHRkaXJlY3QuZ3JvdXBzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5Lmdyb3Vwc05lZWRVcGRhdGU7XG5cblx0XHRcdGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0XHRcdGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0XHRcdGdlb21ldHJ5LnV2c05lZWRVcGRhdGUgPSBmYWxzZTtcblx0XHRcdGdlb21ldHJ5Lmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0Z2VvbWV0cnkgPSBkaXJlY3Q7XG5cblx0XHR9XG5cblx0XHR2YXIgYXR0cmlidXRlO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoIGdlb21ldHJ5LnZlcnRpY2VzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5Lm5vcm1hbHNOZWVkVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkubm9ybWFscyApO1xuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5Lm5vcm1hbHNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5jb2xvcjtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weUNvbG9yc0FycmF5KCBnZW9tZXRyeS5jb2xvcnMgKTtcblx0XHRcdFx0YXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LnV2c05lZWRVcGRhdGUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy51djtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weVZlY3RvcjJzQXJyYXkoIGdlb21ldHJ5LnV2cyApO1xuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LnV2c05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkubGluZURpc3RhbmNlc05lZWRVcGRhdGUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5saW5lRGlzdGFuY2U7XG5cblx0XHRcdGlmICggYXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlLmNvcHlBcnJheSggZ2VvbWV0cnkubGluZURpc3RhbmNlcyApO1xuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5Lmdyb3Vwc05lZWRVcGRhdGUgKSB7XG5cblx0XHRcdGdlb21ldHJ5LmNvbXB1dGVHcm91cHMoIG9iamVjdC5nZW9tZXRyeSApO1xuXHRcdFx0dGhpcy5ncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRcdGdlb21ldHJ5Lmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZnJvbUdlb21ldHJ5OiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0Z2VvbWV0cnkuX19kaXJlY3RHZW9tZXRyeSA9IG5ldyBEaXJlY3RHZW9tZXRyeSgpLmZyb21HZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdHJldHVybiB0aGlzLmZyb21EaXJlY3RHZW9tZXRyeSggZ2VvbWV0cnkuX19kaXJlY3RHZW9tZXRyeSApO1xuXG5cdH0sXG5cblx0ZnJvbURpcmVjdEdlb21ldHJ5OiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCAqIDMgKTtcblx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkuY29weVZlY3RvcjNzQXJyYXkoIGdlb21ldHJ5LnZlcnRpY2VzICkgKTtcblxuXHRcdGlmICggZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgbm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5Lm5vcm1hbHMubGVuZ3RoICogMyApO1xuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkuY29weVZlY3RvcjNzQXJyYXkoIGdlb21ldHJ5Lm5vcm1hbHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5jb2xvcnMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LmNvbG9ycy5sZW5ndGggKiAzICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkuY29weUNvbG9yc0FycmF5KCBnZW9tZXRyeS5jb2xvcnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS51dnMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHV2cyA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LnV2cy5sZW5ndGggKiAyICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkuY29weVZlY3RvcjJzQXJyYXkoIGdlb21ldHJ5LnV2cyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LnV2czIubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHV2czIgPSBuZXcgRmxvYXQzMkFycmF5KCBnZW9tZXRyeS51dnMyLmxlbmd0aCAqIDIgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAndXYyJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdXZzMiwgMiApLmNvcHlWZWN0b3Iyc0FycmF5KCBnZW9tZXRyeS51dnMyICkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGdyb3Vwc1xuXG5cdFx0dGhpcy5ncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHQvLyBtb3JwaHNcblxuXHRcdGZvciAoIHZhciBuYW1lIGluIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gW107XG5cdFx0XHR2YXIgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzWyBuYW1lIF07XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgaSBdO1xuXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhUYXJnZXQuZGF0YS5sZW5ndGggKiAzLCAzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uYW1lID0gbW9ycGhUYXJnZXQubmFtZTtcblxuXHRcdFx0XHRhcnJheS5wdXNoKCBhdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoIG1vcnBoVGFyZ2V0LmRhdGEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF0gPSBhcnJheTtcblxuXHRcdH1cblxuXHRcdC8vIHNraW5uaW5nXG5cblx0XHRpZiAoIGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHZhciBza2luSW5kaWNlcyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5za2luSW5kaWNlcy5sZW5ndGggKiA0LCA0ICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3NraW5JbmRleCcsIHNraW5JbmRpY2VzLmNvcHlWZWN0b3I0c0FycmF5KCBnZW9tZXRyeS5za2luSW5kaWNlcyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHZhciBza2luV2VpZ2h0cyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5za2luV2VpZ2h0cy5sZW5ndGggKiA0LCA0ICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3NraW5XZWlnaHQnLCBza2luV2VpZ2h0cy5jb3B5VmVjdG9yNHNBcnJheSggZ2VvbWV0cnkuc2tpbldlaWdodHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbXB1dGVCb3VuZGluZ0JveDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJveCA9IG5ldyBCb3gzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY29tcHV0ZUJvdW5kaW5nQm94KCkge1xuXG5cdFx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xuXHRcdFx0XHRcdFx0Ym94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggYm94Lm1pbiApO1xuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBib3gubWF4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuYm91bmRpbmdCb3gubWFrZUVtcHR5KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueCApIHx8IGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi55ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnogKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94OiBDb21wdXRlZCBtaW4vbWF4IGhhdmUgTmFOIHZhbHVlcy4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJveCA9IG5ldyBCb3gzKCk7XG5cdFx0dmFyIGJveE1vcnBoVGFyZ2V0cyA9IG5ldyBCb3gzKCk7XG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuXG5cdFx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gPSB0aGlzLm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0aWYgKCBwb3NpdGlvbiApIHtcblxuXHRcdFx0XHQvLyBmaXJzdCwgZmluZCB0aGUgY2VudGVyIG9mIHRoZSBib3VuZGluZyBzcGhlcmVcblxuXHRcdFx0XHR2YXIgY2VudGVyID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7XG5cblx0XHRcdFx0Ym94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xuXHRcdFx0XHRcdFx0Ym94TW9ycGhUYXJnZXRzLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdGJveC5leHBhbmRCeVBvaW50KCBib3hNb3JwaFRhcmdldHMubWluICk7XG5cdFx0XHRcdFx0XHRib3guZXhwYW5kQnlQb2ludCggYm94TW9ycGhUYXJnZXRzLm1heCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRib3guZ2V0Q2VudGVyKCBjZW50ZXIgKTtcblxuXHRcdFx0XHQvLyBzZWNvbmQsIHRyeSB0byBmaW5kIGEgYm91bmRpbmdTcGhlcmUgd2l0aCBhIHJhZGl1cyBzbWFsbGVyIHRoYW4gdGhlXG5cdFx0XHRcdC8vIGJvdW5kaW5nU3BoZXJlIG9mIHRoZSBib3VuZGluZ0JveDogc3FydCgzKSBzbWFsbGVyIGluIHRoZSBiZXN0IGNhc2VcblxuXHRcdFx0XHR2YXIgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpICk7XG5cblx0XHRcdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCB2ZWN0b3IgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudFxuXG5cdFx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBtb3JwaEF0dHJpYnV0ZS5jb3VudDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgaiApO1xuXG5cdFx0XHRcdFx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHZlY3RvciApICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRcdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgKSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjb21wdXRlRmFjZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cblx0fSxcblxuXHRjb21wdXRlVmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5pbmRleDtcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdGlmICggYXR0cmlidXRlcy5wb3NpdGlvbiApIHtcblxuXHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cblx0XHRcdGlmICggYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9ucy5sZW5ndGggKSwgMyApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gcmVzZXQgZXhpc3Rpbmcgbm9ybWFscyB0byB6ZXJvXG5cblx0XHRcdFx0dmFyIGFycmF5ID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0YXJyYXlbIGkgXSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBub3JtYWxzID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG5cblx0XHRcdHZhciB2QSwgdkIsIHZDO1xuXHRcdFx0dmFyIHBBID0gbmV3IFZlY3RvcjMoKSwgcEIgPSBuZXcgVmVjdG9yMygpLCBwQyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgY2IgPSBuZXcgVmVjdG9yMygpLCBhYiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdC8vIGluZGV4ZWQgZWxlbWVudHNcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblxuXHRcdFx0XHR2YXIgaW5kaWNlcyA9IGluZGV4LmFycmF5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBpbmRleC5jb3VudDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHR2QSA9IGluZGljZXNbIGkgKyAwIF0gKiAzO1xuXHRcdFx0XHRcdHZCID0gaW5kaWNlc1sgaSArIDEgXSAqIDM7XG5cdFx0XHRcdFx0dkMgPSBpbmRpY2VzWyBpICsgMiBdICogMztcblxuXHRcdFx0XHRcdHBBLmZyb21BcnJheSggcG9zaXRpb25zLCB2QSApO1xuXHRcdFx0XHRcdHBCLmZyb21BcnJheSggcG9zaXRpb25zLCB2QiApO1xuXHRcdFx0XHRcdHBDLmZyb21BcnJheSggcG9zaXRpb25zLCB2QyApO1xuXG5cdFx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7XG5cdFx0XHRcdFx0YWIuc3ViVmVjdG9ycyggcEEsIHBCICk7XG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0XHRub3JtYWxzWyB2QSBdICs9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgdkEgKyAxIF0gKz0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyB2QSArIDIgXSArPSBjYi56O1xuXG5cdFx0XHRcdFx0bm9ybWFsc1sgdkIgXSArPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIHZCICsgMSBdICs9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgdkIgKyAyIF0gKz0gY2IuejtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIHZDIF0gKz0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyB2QyArIDEgXSArPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIHZDICsgMiBdICs9IGNiLno7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIGVsZW1lbnRzICh1bmNvbm5lY3RlZCB0cmlhbmdsZSBzb3VwKVxuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgaWw7IGkgKz0gOSApIHtcblxuXHRcdFx0XHRcdHBBLmZyb21BcnJheSggcG9zaXRpb25zLCBpICk7XG5cdFx0XHRcdFx0cEIuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyAzICk7XG5cdFx0XHRcdFx0cEMuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyA2ICk7XG5cblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcblx0XHRcdFx0XHRhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTtcblx0XHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIGkgXSA9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDEgXSA9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDIgXSA9IGNiLno7XG5cblx0XHRcdFx0XHRub3JtYWxzWyBpICsgMyBdID0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNCBdID0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNSBdID0gY2IuejtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA2IF0gPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA3IF0gPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA4IF0gPSBjYi56O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTtcblxuXHRcdFx0YXR0cmlidXRlcy5ub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnksIG9mZnNldCApIHtcblxuXHRcdGlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS4nLCBnZW9tZXRyeSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2Zmc2V0ID0gMDtcblxuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHQnVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogT3ZlcndyaXRpbmcgb3JpZ2luYWwgZ2VvbWV0cnksIHN0YXJ0aW5nIGF0IG9mZnNldD0wLiAnXG5cdFx0XHRcdCsgJ1VzZSBCdWZmZXJHZW9tZXRyeVV0aWxzLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZvciBsb3NzbGVzcyBtZXJnZS4nXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlMSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5MSA9IGF0dHJpYnV0ZTEuYXJyYXk7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUyID0gZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHR2YXIgYXR0cmlidXRlQXJyYXkyID0gYXR0cmlidXRlMi5hcnJheTtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZU9mZnNldCA9IGF0dHJpYnV0ZTIuaXRlbVNpemUgKiBvZmZzZXQ7XG5cdFx0XHR2YXIgbGVuZ3RoID0gTWF0aC5taW4oIGF0dHJpYnV0ZUFycmF5Mi5sZW5ndGgsIGF0dHJpYnV0ZUFycmF5MS5sZW5ndGggLSBhdHRyaWJ1dGVPZmZzZXQgKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gYXR0cmlidXRlT2Zmc2V0OyBpIDwgbGVuZ3RoOyBpICsrLCBqICsrICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZUFycmF5MVsgaiBdID0gYXR0cmlidXRlQXJyYXkyWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplTm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbm9ybWFsaXplTm9ybWFscygpIHtcblxuXHRcdFx0dmFyIG5vcm1hbHMgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbm9ybWFscy5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZlY3Rvci54ID0gbm9ybWFscy5nZXRYKCBpICk7XG5cdFx0XHRcdHZlY3Rvci55ID0gbm9ybWFscy5nZXRZKCBpICk7XG5cdFx0XHRcdHZlY3Rvci56ID0gbm9ybWFscy5nZXRaKCBpICk7XG5cblx0XHRcdFx0dmVjdG9yLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdG5vcm1hbHMuc2V0WFlaKCBpLCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRvTm9uSW5kZXhlZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0ZnVuY3Rpb24gY29udmVydEJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRpY2VzICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0XHR2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cblx0XHRcdHZhciBhcnJheTIgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGluZGljZXMubGVuZ3RoICogaXRlbVNpemUgKTtcblxuXHRcdFx0dmFyIGluZGV4ID0gMCwgaW5kZXgyID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc1sgaSBdICogaXRlbVNpemU7XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheTIsIGl0ZW1TaXplICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeS50b05vbkluZGV4ZWQoKTogR2VvbWV0cnkgaXMgYWxyZWFkeSBub24taW5kZXhlZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHZhciBnZW9tZXRyeTIgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdHZhciBpbmRpY2VzID0gdGhpcy5pbmRleC5hcnJheTtcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdGZvciAoIHZhciBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdHZhciBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTtcblxuXHRcdFx0Z2VvbWV0cnkyLmFkZEF0dHJpYnV0ZSggbmFtZSwgbmV3QXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCBhdHRyaWJ1dGVzXG5cblx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBuYW1lIGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIG1vcnBoQXJyYXkgPSBbXTtcblx0XHRcdHZhciBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sgbmFtZSBdOyAvLyBtb3JwaEF0dHJpYnV0ZTogYXJyYXkgb2YgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZXNcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZVsgaSBdO1xuXG5cdFx0XHRcdHZhciBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTtcblxuXHRcdFx0XHRtb3JwaEFycmF5LnB1c2goIG5ld0F0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5Mi5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IG1vcnBoQXJyYXk7XG5cblx0XHR9XG5cblx0XHQvLyBncm91cHNcblxuXHRcdHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdGdlb21ldHJ5Mi5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnkyO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ0J1ZmZlckdlb21ldHJ5Jyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnQnVmZmVyR2VvbWV0cnkudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBzdGFuZGFyZCBCdWZmZXJHZW9tZXRyeSBzZXJpYWxpemF0aW9uXG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLnVzZXJEYXRhICkubGVuZ3RoID4gMCApIGRhdGEudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0aWYgKCB0aGlzLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHRcdGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcblxuXHRcdFx0XHRpZiAoIHBhcmFtZXRlcnNbIGtleSBdICE9PSB1bmRlZmluZWQgKSBkYXRhWyBrZXkgXSA9IHBhcmFtZXRlcnNbIGtleSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXG5cdFx0fVxuXG5cdFx0ZGF0YS5kYXRhID0geyBhdHRyaWJ1dGVzOiB7fSB9O1xuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5pbmRleCA9IHtcblx0XHRcdFx0dHlwZTogaW5kZXguYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdFx0YXJyYXk6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBpbmRleC5hcnJheSApXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZURhdGEgPSBhdHRyaWJ1dGUudG9KU09OKCk7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09ICcnICkgYXR0cmlidXRlRGF0YS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cblx0XHRcdGRhdGEuZGF0YS5hdHRyaWJ1dGVzWyBrZXkgXSA9IGF0dHJpYnV0ZURhdGE7XG5cblx0XHR9XG5cblx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dmFyIGhhc01vcnBoQXR0cmlidXRlcyA9IGZhbHNlO1xuXG5cdFx0Zm9yICggdmFyIGtleSBpbiB0aGlzLm1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5ID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXNbIGtleSBdO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVBcnJheVsgaSBdO1xuXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVEYXRhID0gYXR0cmlidXRlLnRvSlNPTigpO1xuXG5cdFx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09ICcnICkgYXR0cmlidXRlRGF0YS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggYXR0cmlidXRlRGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXJyYXkubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRtb3JwaEF0dHJpYnV0ZXNbIGtleSBdID0gYXJyYXk7XG5cblx0XHRcdFx0aGFzTW9ycGhBdHRyaWJ1dGVzID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBoYXNNb3JwaEF0dHJpYnV0ZXMgKSBkYXRhLmRhdGEubW9ycGhBdHRyaWJ1dGVzID0gbW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0aWYgKCBncm91cHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLmdyb3VwcyA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBncm91cHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5ib3VuZGluZ1NwaGVyZSA9IHtcblx0XHRcdFx0Y2VudGVyOiBib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxuXHRcdFx0XHRyYWRpdXM6IGJvdW5kaW5nU3BoZXJlLnJhZGl1c1xuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qXG5cdFx0IC8vIEhhbmRsZSBwcmltaXRpdmVzXG5cblx0XHQgdmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHQgaWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHQgdmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0IGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcblxuXHRcdCB2YWx1ZXMucHVzaCggcGFyYW1ldGVyc1sga2V5IF0gKTtcblxuXHRcdCB9XG5cblx0XHQgdmFyIGdlb21ldHJ5ID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgKTtcblx0XHQgdGhpcy5jb25zdHJ1Y3Rvci5hcHBseSggZ2VvbWV0cnksIHZhbHVlcyApO1xuXHRcdCByZXR1cm4gZ2VvbWV0cnk7XG5cblx0XHQgfVxuXG5cdFx0IHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblx0XHQgKi9cblxuXHRcdHJldHVybiBuZXcgQnVmZmVyR2VvbWV0cnkoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHZhciBuYW1lLCBpLCBsO1xuXG5cdFx0Ly8gcmVzZXRcblxuXHRcdHRoaXMuaW5kZXggPSBudWxsO1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gaW5kZXhcblxuXHRcdHZhciBpbmRleCA9IHNvdXJjZS5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuc2V0SW5kZXgoIGluZGV4LmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBhdHRyaWJ1dGVzID0gc291cmNlLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhcnJheSA9IFtdO1xuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbW9ycGhBdHRyaWJ1dGVbIGkgXS5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHR2YXIgZ3JvdXBzID0gc291cmNlLmdyb3VwcztcblxuXHRcdGZvciAoIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBib3hcblxuXHRcdHZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcblxuXHRcdGlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgc3BoZXJlXG5cblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIGRyYXcgcmFuZ2VcblxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc291cmNlLmRyYXdSYW5nZS5zdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IHNvdXJjZS5kcmF3UmFuZ2UuY291bnQ7XG5cblx0XHQvLyB1c2VyIGRhdGFcblxuXHRcdHRoaXMudXNlckRhdGEgPSBzb3VyY2UudXNlckRhdGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3Igam9ub2JyMSAvIGh0dHA6Ly9qb25vYnIxLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7XG5cblx0dGhpcy5kcmF3TW9kZSA9IFRyaWFuZ2xlc0RyYXdNb2RlO1xuXG5cdHRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cbn1cblxuTWVzaC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBNZXNoLFxuXG5cdGlzTWVzaDogdHJ1ZSxcblxuXHRzZXREcmF3TW9kZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZHJhd01vZGUgPSB2YWx1ZTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRyYXdNb2RlID0gc291cmNlLmRyYXdNb2RlO1xuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5tb3JwaFRhcmdldERpY3Rpb25hcnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlTW9ycGhUYXJnZXRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdHZhciBtLCBtbCwgbmFtZTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblx0XHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xuXG5cdFx0XHRpZiAoIGtleXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xuXG5cdFx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRcdGZvciAoIG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkge1xuXG5cdFx0XHRcdFx0XHRuYW1lID0gbW9ycGhBdHRyaWJ1dGVbIG0gXS5uYW1lIHx8IFN0cmluZyggbSApO1xuXG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgbW9ycGhUYXJnZXRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1lc2gudXBkYXRlTW9ycGhUYXJnZXRzKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciByYXkgPSBuZXcgUmF5KCk7XG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHZhciB2QSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZCID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdkMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIHRlbXBBID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdGVtcEIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB0ZW1wQyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgbW9ycGhBID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbW9ycGhCID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbW9ycGhDID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB1dkEgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkIgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkMgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0dmFyIGludGVyc2VjdGlvblBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRmdW5jdGlvbiBjaGVja0ludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBBLCBwQiwgcEMsIHBvaW50ICkge1xuXG5cdFx0XHR2YXIgaW50ZXJzZWN0O1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0XHRcdGludGVyc2VjdCA9IHJheS5pbnRlcnNlY3RUcmlhbmdsZSggcEMsIHBCLCBwQSwgdHJ1ZSwgcG9pbnQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHBBLCBwQiwgcEMsIG1hdGVyaWFsLnNpZGUgIT09IERvdWJsZVNpZGUsIHBvaW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0aW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jb3B5KCBwb2ludCApO1xuXHRcdFx0aW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlcnNlY3Rpb25Qb2ludFdvcmxkICk7XG5cblx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRwb2ludDogaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jbG9uZSgpLFxuXHRcdFx0XHRvYmplY3Q6IG9iamVjdFxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgdXYsIHV2MiwgYSwgYiwgYyApIHtcblxuXHRcdFx0dkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGEgKTtcblx0XHRcdHZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBiICk7XG5cdFx0XHR2Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYyApO1xuXG5cdFx0XHR2YXIgbW9ycGhJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgJiYgbW9ycGhQb3NpdGlvbiAmJiBtb3JwaEluZmx1ZW5jZXMgKSB7XG5cblx0XHRcdFx0bW9ycGhBLnNldCggMCwgMCwgMCApO1xuXHRcdFx0XHRtb3JwaEIuc2V0KCAwLCAwLCAwICk7XG5cdFx0XHRcdG1vcnBoQy5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBpbmZsdWVuY2UgPSBtb3JwaEluZmx1ZW5jZXNbIGkgXTtcblx0XHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaFBvc2l0aW9uWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIGluZmx1ZW5jZSA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0dGVtcEEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGEgKTtcblx0XHRcdFx0XHR0ZW1wQi5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgYiApO1xuXHRcdFx0XHRcdHRlbXBDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlLCBjICk7XG5cblx0XHRcdFx0XHRtb3JwaEEuYWRkU2NhbGVkVmVjdG9yKCB0ZW1wQS5zdWIoIHZBICksIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRcdG1vcnBoQi5hZGRTY2FsZWRWZWN0b3IoIHRlbXBCLnN1YiggdkIgKSwgaW5mbHVlbmNlICk7XG5cdFx0XHRcdFx0bW9ycGhDLmFkZFNjYWxlZFZlY3RvciggdGVtcEMuc3ViKCB2QyApLCBpbmZsdWVuY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dkEuYWRkKCBtb3JwaEEgKTtcblx0XHRcdFx0dkIuYWRkKCBtb3JwaEIgKTtcblx0XHRcdFx0dkMuYWRkKCBtb3JwaEMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaW50ZXJzZWN0aW9uID0gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCB2QSwgdkIsIHZDLCBpbnRlcnNlY3Rpb25Qb2ludCApO1xuXG5cdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRpZiAoIHV2ICkge1xuXG5cdFx0XHRcdFx0dXZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBhICk7XG5cdFx0XHRcdFx0dXZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBiICk7XG5cdFx0XHRcdFx0dXZDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBjICk7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3Rpb24udXYgPSBUcmlhbmdsZS5nZXRVViggaW50ZXJzZWN0aW9uUG9pbnQsIHZBLCB2QiwgdkMsIHV2QSwgdXZCLCB1dkMsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB1djIgKSB7XG5cblx0XHRcdFx0XHR1dkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYyLCBhICk7XG5cdFx0XHRcdFx0dXZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2MiwgYiApO1xuXHRcdFx0XHRcdHV2Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCB1djIsIGMgKTtcblxuXHRcdFx0XHRcdGludGVyc2VjdGlvbi51djIgPSBUcmlhbmdsZS5nZXRVViggaW50ZXJzZWN0aW9uUG9pbnQsIHZBLCB2QiwgdkMsIHV2QSwgdXZCLCB1dkMsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGZhY2UgPSBuZXcgRmFjZTMoIGEsIGIsIGMgKTtcblx0XHRcdFx0VHJpYW5nbGUuZ2V0Tm9ybWFsKCB2QSwgdkIsIHZDLCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaW50ZXJzZWN0aW9uO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRcdHZhciBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7XG5cdFx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdFx0c3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0Ly9cblxuXHRcdFx0aW52ZXJzZU1hdHJpeC5nZXRJbnZlcnNlKCBtYXRyaXhXb3JsZCApO1xuXHRcdFx0cmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIGludmVyc2VNYXRyaXggKTtcblxuXHRcdFx0Ly8gQ2hlY2sgYm91bmRpbmdCb3ggYmVmb3JlIGNvbnRpbnVpbmdcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHJheS5pbnRlcnNlY3RzQm94KCBnZW9tZXRyeS5ib3VuZGluZ0JveCApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaW50ZXJzZWN0aW9uO1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIGEsIGIsIGM7XG5cdFx0XHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0XHR2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0XHR2YXIgbW9ycGhQb3NpdGlvbiA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdFx0dmFyIHV2ID0gZ2VvbWV0cnkuYXR0cmlidXRlcy51djtcblx0XHRcdFx0dmFyIHV2MiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYyO1xuXHRcdFx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXHRcdFx0XHR2YXIgZHJhd1JhbmdlID0gZ2VvbWV0cnkuZHJhd1JhbmdlO1xuXHRcdFx0XHR2YXIgaSwgaiwgaWwsIGpsO1xuXHRcdFx0XHR2YXIgZ3JvdXAsIGdyb3VwTWF0ZXJpYWw7XG5cdFx0XHRcdHZhciBzdGFydCwgZW5kO1xuXG5cdFx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHQvLyBpbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdFx0XHRcdFx0Z3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0c3RhcnQgPSBNYXRoLm1heCggZ3JvdXAuc3RhcnQsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0XHRlbmQgPSBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBqID0gc3RhcnQsIGpsID0gZW5kOyBqIDwgamw7IGogKz0gMyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGEgPSBpbmRleC5nZXRYKCBqICk7XG5cdFx0XHRcdFx0XHRcdFx0YiA9IGluZGV4LmdldFgoIGogKyAxICk7XG5cdFx0XHRcdFx0XHRcdFx0YyA9IGluZGV4LmdldFgoIGogKyAyICk7XG5cblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBncm91cE1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaiAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2UubWF0ZXJpYWxJbmRleCA9IGdyb3VwLm1hdGVyaWFsSW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0XHRlbmQgPSBNYXRoLm1pbiggaW5kZXguY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IHN0YXJ0LCBpbCA9IGVuZDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdFx0YSA9IGluZGV4LmdldFgoIGkgKTtcblx0XHRcdFx0XHRcdFx0YiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0XHRcdGMgPSBpbmRleC5nZXRYKCBpICsgMiApO1xuXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBpIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gaW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gbm9uLWluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5XG5cblx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0YSA9IGo7XG5cdFx0XHRcdFx0XHRcdFx0YiA9IGogKyAxO1xuXHRcdFx0XHRcdFx0XHRcdGMgPSBqICsgMjtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIGdyb3VwTWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgdXYsIHV2MiwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBqIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2UubWF0ZXJpYWxJbmRleCA9IGdyb3VwLm1hdGVyaWFsSW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0XHRlbmQgPSBNYXRoLm1pbiggcG9zaXRpb24uY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IHN0YXJ0LCBpbCA9IGVuZDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdFx0YSA9IGk7XG5cdFx0XHRcdFx0XHRcdGIgPSBpICsgMTtcblx0XHRcdFx0XHRcdFx0YyA9IGkgKyAyO1xuXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBpIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRcdHZhciBmdkEsIGZ2QiwgZnZDO1xuXHRcdFx0XHR2YXIgaXNNdWx0aU1hdGVyaWFsID0gQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHRcdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cdFx0XHRcdHZhciB1dnM7XG5cblx0XHRcdFx0dmFyIGZhY2VWZXJ0ZXhVdnMgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWyAwIF07XG5cdFx0XHRcdGlmICggZmFjZVZlcnRleFV2cy5sZW5ndGggPiAwICkgdXZzID0gZmFjZVZlcnRleFV2cztcblxuXHRcdFx0XHRmb3IgKCB2YXIgZiA9IDAsIGZsID0gZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBmIF07XG5cdFx0XHRcdFx0dmFyIGZhY2VNYXRlcmlhbCA9IGlzTXVsdGlNYXRlcmlhbCA/IG1hdGVyaWFsWyBmYWNlLm1hdGVyaWFsSW5kZXggXSA6IG1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0aWYgKCBmYWNlTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0ZnZBID0gdmVydGljZXNbIGZhY2UuYSBdO1xuXHRcdFx0XHRcdGZ2QiA9IHZlcnRpY2VzWyBmYWNlLmIgXTtcblx0XHRcdFx0XHRmdkMgPSB2ZXJ0aWNlc1sgZmFjZS5jIF07XG5cblx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0ludGVyc2VjdGlvbiggdGhpcywgZmFjZU1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgZnZBLCBmdkIsIGZ2QywgaW50ZXJzZWN0aW9uUG9pbnQgKTtcblxuXHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHV2cyAmJiB1dnNbIGYgXSApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgdXZzX2YgPSB1dnNbIGYgXTtcblx0XHRcdFx0XHRcdFx0dXZBLmNvcHkoIHV2c19mWyAwIF0gKTtcblx0XHRcdFx0XHRcdFx0dXZCLmNvcHkoIHV2c19mWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0dXZDLmNvcHkoIHV2c19mWyAyIF0gKTtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24udXYgPSBUcmlhbmdsZS5nZXRVViggaW50ZXJzZWN0aW9uUG9pbnQsIGZ2QSwgZnZCLCBmdkMsIHV2QSwgdXZCLCB1dkMsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZSA9IGZhY2U7XG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gZjtcblx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3Iga2lsZSAvIGh0dHA6Ly9raWxlLnN0cmF2YWdhbnphLm9yZy9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbnZhciBnZW9tZXRyeUlkID0gMDsgLy8gR2VvbWV0cnkgdXNlcyBldmVuIG51bWJlcnMgYXMgSWRcblxuZnVuY3Rpb24gR2VvbWV0cnkoKSB7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBnZW9tZXRyeUlkICs9IDIgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnR2VvbWV0cnknO1xuXG5cdHRoaXMudmVydGljZXMgPSBbXTtcblx0dGhpcy5jb2xvcnMgPSBbXTtcblx0dGhpcy5mYWNlcyA9IFtdO1xuXHR0aGlzLmZhY2VWZXJ0ZXhVdnMgPSBbW11dO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gW107XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gW107XG5cblx0dGhpcy5za2luV2VpZ2h0cyA9IFtdO1xuXHR0aGlzLnNraW5JbmRpY2VzID0gW107XG5cblx0dGhpcy5saW5lRGlzdGFuY2VzID0gW107XG5cblx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdC8vIHVwZGF0ZSBmbGFnc1xuXG5cdHRoaXMuZWxlbWVudHNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMuY29sb3JzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG59XG5cbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBHZW9tZXRyeSxcblxuXHRpc0dlb21ldHJ5OiB0cnVlLFxuXG5cdGFwcGx5TWF0cml4OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHZhciBub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHRoaXMudmVydGljZXNbIGkgXTtcblx0XHRcdHZlcnRleC5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gdGhpcy5mYWNlc1sgaSBdO1xuXHRcdFx0ZmFjZS5ub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRmYWNlLnZlcnRleE5vcm1hbHNbIGogXS5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdGF0ZVg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeC1heGlzXG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVgoIGFuZ2xlICkge1xuXG5cdFx0XHRtMS5tYWtlUm90YXRpb25YKCBhbmdsZSApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZVk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeS1heGlzXG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVkoIGFuZ2xlICkge1xuXG5cdFx0XHRtMS5tYWtlUm90YXRpb25ZKCBhbmdsZSApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZVo6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgei1heGlzXG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVooIGFuZ2xlICkge1xuXG5cdFx0XHRtMS5tYWtlUm90YXRpb25aKCBhbmdsZSApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gdHJhbnNsYXRlIGdlb21ldHJ5XG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHRyYW5zbGF0ZSggeCwgeSwgeiApIHtcblxuXHRcdFx0bTEubWFrZVRyYW5zbGF0aW9uKCB4LCB5LCB6ICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0c2NhbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHNjYWxlIGdlb21ldHJ5XG5cblx0XHR2YXIgbTEgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNjYWxlKCB4LCB5LCB6ICkge1xuXG5cdFx0XHRtMS5tYWtlU2NhbGUoIHgsIHksIHogKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRsb29rQXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmogPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBsb29rQXQoIHZlY3RvciApIHtcblxuXHRcdFx0b2JqLmxvb2tBdCggdmVjdG9yICk7XG5cblx0XHRcdG9iai51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggb2JqLm1hdHJpeCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZnJvbUJ1ZmZlckdlb21ldHJ5OiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgPyBnZW9tZXRyeS5pbmRleC5hcnJheSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cblx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcblx0XHR2YXIgbm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgPyBhdHRyaWJ1dGVzLm5vcm1hbC5hcnJheSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgY29sb3JzID0gYXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy5jb2xvci5hcnJheSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgdXZzID0gYXR0cmlidXRlcy51diAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy51di5hcnJheSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgdXZzMiA9IGF0dHJpYnV0ZXMudXYyICE9PSB1bmRlZmluZWQgPyBhdHRyaWJ1dGVzLnV2Mi5hcnJheSA6IHVuZGVmaW5lZDtcblxuXHRcdGlmICggdXZzMiAhPT0gdW5kZWZpbmVkICkgdGhpcy5mYWNlVmVydGV4VXZzWyAxIF0gPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0c2NvcGUudmVydGljZXMucHVzaCggbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHBvc2l0aW9ucywgaSApICk7XG5cblx0XHRcdGlmICggY29sb3JzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUuY29sb3JzLnB1c2goIG5ldyBDb2xvcigpLmZyb21BcnJheSggY29sb3JzLCBpICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWRkRmFjZSggYSwgYiwgYywgbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdFx0dmFyIHZlcnRleENvbG9ycyA9ICggY29sb3JzID09PSB1bmRlZmluZWQgKSA/IFtdIDogW1xuXHRcdFx0XHRzY29wZS5jb2xvcnNbIGEgXS5jbG9uZSgpLFxuXHRcdFx0XHRzY29wZS5jb2xvcnNbIGIgXS5jbG9uZSgpLFxuXHRcdFx0XHRzY29wZS5jb2xvcnNbIGMgXS5jbG9uZSgpIF07XG5cblx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gKCBub3JtYWxzID09PSB1bmRlZmluZWQgKSA/IFtdIDogW1xuXHRcdFx0XHRuZXcgVmVjdG9yMygpLmZyb21BcnJheSggbm9ybWFscywgYSAqIDMgKSxcblx0XHRcdFx0bmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIG5vcm1hbHMsIGIgKiAzICksXG5cdFx0XHRcdG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBub3JtYWxzLCBjICogMyApXG5cdFx0XHRdO1xuXG5cdFx0XHR2YXIgZmFjZSA9IG5ldyBGYWNlMyggYSwgYiwgYywgdmVydGV4Tm9ybWFscywgdmVydGV4Q29sb3JzLCBtYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdHNjb3BlLmZhY2VzLnB1c2goIGZhY2UgKTtcblxuXHRcdFx0aWYgKCB1dnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5mYWNlVmVydGV4VXZzWyAwIF0ucHVzaCggW1xuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMsIGEgKiAyICksXG5cdFx0XHRcdFx0bmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHV2cywgYiAqIDIgKSxcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzLCBjICogMiApXG5cdFx0XHRcdF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHV2czIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5mYWNlVmVydGV4VXZzWyAxIF0ucHVzaCggW1xuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMyLCBhICogMiApLFxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMyLCBiICogMiApLFxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMyLCBjICogMiApXG5cdFx0XHRcdF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdGlmICggZ3JvdXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdFx0dmFyIHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdHZhciBjb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gc3RhcnQsIGpsID0gc3RhcnQgKyBjb3VudDsgaiA8IGpsOyBqICs9IDMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGluZGljZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0YWRkRmFjZSggaW5kaWNlc1sgaiBdLCBpbmRpY2VzWyBqICsgMSBdLCBpbmRpY2VzWyBqICsgMiBdLCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRhZGRGYWNlKCBqLCBqICsgMSwgaiArIDIsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggaW5kaWNlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRhZGRGYWNlKCBpbmRpY2VzWyBpIF0sIGluZGljZXNbIGkgKyAxIF0sIGluZGljZXNbIGkgKyAyIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aCAvIDM7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdGFkZEZhY2UoIGksIGkgKyAxLCBpICsgMiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlbnRlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9mZnNldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY2VudGVyKCkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LmdldENlbnRlciggb2Zmc2V0ICkubmVnYXRlKCk7XG5cblx0XHRcdHRoaXMudHJhbnNsYXRlKCBvZmZzZXQueCwgb2Zmc2V0LnksIG9mZnNldC56ICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0dmFyIGNlbnRlciA9IHRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyO1xuXHRcdHZhciByYWRpdXMgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cztcblxuXHRcdHZhciBzID0gcmFkaXVzID09PSAwID8gMSA6IDEuMCAvIHJhZGl1cztcblxuXHRcdHZhciBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdG1hdHJpeC5zZXQoXG5cdFx0XHRzLCAwLCAwLCAtIHMgKiBjZW50ZXIueCxcblx0XHRcdDAsIHMsIDAsIC0gcyAqIGNlbnRlci55LFxuXHRcdFx0MCwgMCwgcywgLSBzICogY2VudGVyLnosXG5cdFx0XHQwLCAwLCAwLCAxXG5cdFx0KTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb21wdXRlRmFjZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBjYiA9IG5ldyBWZWN0b3IzKCksIGFiID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGZvciAoIHZhciBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0dmFyIHZBID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5hIF07XG5cdFx0XHR2YXIgdkIgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmIgXTtcblx0XHRcdHZhciB2QyA9IHRoaXMudmVydGljZXNbIGZhY2UuYyBdO1xuXG5cdFx0XHRjYi5zdWJWZWN0b3JzKCB2QywgdkIgKTtcblx0XHRcdGFiLnN1YlZlY3RvcnMoIHZBLCB2QiApO1xuXHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdGNiLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRmYWNlLm5vcm1hbC5jb3B5KCBjYiApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZVZlcnRleE5vcm1hbHM6IGZ1bmN0aW9uICggYXJlYVdlaWdodGVkICkge1xuXG5cdFx0aWYgKCBhcmVhV2VpZ2h0ZWQgPT09IHVuZGVmaW5lZCApIGFyZWFXZWlnaHRlZCA9IHRydWU7XG5cblx0XHR2YXIgdiwgdmwsIGYsIGZsLCBmYWNlLCB2ZXJ0aWNlcztcblxuXHRcdHZlcnRpY2VzID0gbmV3IEFycmF5KCB0aGlzLnZlcnRpY2VzLmxlbmd0aCApO1xuXG5cdFx0Zm9yICggdiA9IDAsIHZsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IHYgPCB2bDsgdiArKyApIHtcblxuXHRcdFx0dmVydGljZXNbIHYgXSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGFyZWFXZWlnaHRlZCApIHtcblxuXHRcdFx0Ly8gdmVydGV4IG5vcm1hbHMgd2VpZ2h0ZWQgYnkgdHJpYW5nbGUgYXJlYXNcblx0XHRcdC8vIGh0dHA6Ly93d3cuaXF1aWxlemxlcy5vcmcvd3d3L2FydGljbGVzL25vcm1hbHMvbm9ybWFscy5odG1cblxuXHRcdFx0dmFyIHZBLCB2QiwgdkM7XG5cdFx0XHR2YXIgY2IgPSBuZXcgVmVjdG9yMygpLCBhYiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0XHR2QSA9IHRoaXMudmVydGljZXNbIGZhY2UuYSBdO1xuXHRcdFx0XHR2QiA9IHRoaXMudmVydGljZXNbIGZhY2UuYiBdO1xuXHRcdFx0XHR2QyA9IHRoaXMudmVydGljZXNbIGZhY2UuYyBdO1xuXG5cdFx0XHRcdGNiLnN1YlZlY3RvcnMoIHZDLCB2QiApO1xuXHRcdFx0XHRhYi5zdWJWZWN0b3JzKCB2QSwgdkIgKTtcblx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYSBdLmFkZCggY2IgKTtcblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYiBdLmFkZCggY2IgKTtcblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYyBdLmFkZCggY2IgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtcblxuXHRcdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmEgXS5hZGQoIGZhY2Uubm9ybWFsICk7XG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmIgXS5hZGQoIGZhY2Uubm9ybWFsICk7XG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmMgXS5hZGQoIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZvciAoIHYgPSAwLCB2bCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyB2IDwgdmw7IHYgKysgKSB7XG5cblx0XHRcdHZlcnRpY2VzWyB2IF0ubm9ybWFsaXplKCk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscztcblxuXHRcdFx0aWYgKCB2ZXJ0ZXhOb3JtYWxzLmxlbmd0aCA9PT0gMyApIHtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAwIF0uY29weSggdmVydGljZXNbIGZhY2UuYSBdICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDEgXS5jb3B5KCB2ZXJ0aWNlc1sgZmFjZS5iIF0gKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMiBdLmNvcHkoIHZlcnRpY2VzWyBmYWNlLmMgXSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDAgXSA9IHZlcnRpY2VzWyBmYWNlLmEgXS5jbG9uZSgpO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAxIF0gPSB2ZXJ0aWNlc1sgZmFjZS5iIF0uY2xvbmUoKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMiBdID0gdmVydGljZXNbIGZhY2UuYyBdLmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5mYWNlcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNvbXB1dGVGbGF0VmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGYsIGZsLCBmYWNlO1xuXG5cdFx0dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtcblxuXHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRpZiAoIHZlcnRleE5vcm1hbHMubGVuZ3RoID09PSAzICkge1xuXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDAgXS5jb3B5KCBmYWNlLm5vcm1hbCApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAxIF0uY29weSggZmFjZS5ub3JtYWwgKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMiBdLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMCBdID0gZmFjZS5ub3JtYWwuY2xvbmUoKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMSBdID0gZmFjZS5ub3JtYWwuY2xvbmUoKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMiBdID0gZmFjZS5ub3JtYWwuY2xvbmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmZhY2VzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZU1vcnBoTm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGksIGlsLCBmLCBmbCwgZmFjZTtcblxuXHRcdC8vIHNhdmUgb3JpZ2luYWwgbm9ybWFsc1xuXHRcdC8vIC0gY3JlYXRlIHRlbXAgdmFyaWFibGVzIG9uIGZpcnN0IGFjY2Vzc1xuXHRcdC8vICAgb3RoZXJ3aXNlIGp1c3QgY29weSAoZm9yIGZhc3RlciByZXBlYXRlZCBjYWxscylcblxuXHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdGlmICggISBmYWNlLl9fb3JpZ2luYWxGYWNlTm9ybWFsICkge1xuXG5cdFx0XHRcdGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWwgPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWwuY29weSggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICEgZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFscyApIGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHMgPSBbXTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGlsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggISBmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzWyBpIF0gKSB7XG5cblx0XHRcdFx0XHRmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzWyBpIF0gPSBmYWNlLnZlcnRleE5vcm1hbHNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzWyBpIF0uY29weSggZmFjZS52ZXJ0ZXhOb3JtYWxzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHVzZSB0ZW1wIGdlb21ldHJ5IHRvIGNvbXB1dGUgZmFjZSBhbmQgdmVydGV4IG5vcm1hbHMgZm9yIGVhY2ggbW9ycGhcblxuXHRcdHZhciB0bXBHZW8gPSBuZXcgR2VvbWV0cnkoKTtcblx0XHR0bXBHZW8uZmFjZXMgPSB0aGlzLmZhY2VzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy5tb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdC8vIGNyZWF0ZSBvbiBmaXJzdCBhY2Nlc3NcblxuXHRcdFx0aWYgKCAhIHRoaXMubW9ycGhOb3JtYWxzWyBpIF0gKSB7XG5cblx0XHRcdFx0dGhpcy5tb3JwaE5vcm1hbHNbIGkgXSA9IHt9O1xuXHRcdFx0XHR0aGlzLm1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzID0gW107XG5cdFx0XHRcdHRoaXMubW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFscyA9IFtdO1xuXG5cdFx0XHRcdHZhciBkc3ROb3JtYWxzRmFjZSA9IHRoaXMubW9ycGhOb3JtYWxzWyBpIF0uZmFjZU5vcm1hbHM7XG5cdFx0XHRcdHZhciBkc3ROb3JtYWxzVmVydGV4ID0gdGhpcy5tb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRcdHZhciBmYWNlTm9ybWFsLCB2ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlTm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzID0geyBhOiBuZXcgVmVjdG9yMygpLCBiOiBuZXcgVmVjdG9yMygpLCBjOiBuZXcgVmVjdG9yMygpIH07XG5cblx0XHRcdFx0XHRkc3ROb3JtYWxzRmFjZS5wdXNoKCBmYWNlTm9ybWFsICk7XG5cdFx0XHRcdFx0ZHN0Tm9ybWFsc1ZlcnRleC5wdXNoKCB2ZXJ0ZXhOb3JtYWxzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBtb3JwaE5vcm1hbHMgPSB0aGlzLm1vcnBoTm9ybWFsc1sgaSBdO1xuXG5cdFx0XHQvLyBzZXQgdmVydGljZXMgdG8gbW9ycGggdGFyZ2V0XG5cblx0XHRcdHRtcEdlby52ZXJ0aWNlcyA9IHRoaXMubW9ycGhUYXJnZXRzWyBpIF0udmVydGljZXM7XG5cblx0XHRcdC8vIGNvbXB1dGUgbW9ycGggbm9ybWFsc1xuXG5cdFx0XHR0bXBHZW8uY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cdFx0XHR0bXBHZW8uY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcblxuXHRcdFx0Ly8gc3RvcmUgbW9ycGggbm9ybWFsc1xuXG5cdFx0XHR2YXIgZmFjZU5vcm1hbCwgdmVydGV4Tm9ybWFscztcblxuXHRcdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHRcdGZhY2VOb3JtYWwgPSBtb3JwaE5vcm1hbHMuZmFjZU5vcm1hbHNbIGYgXTtcblx0XHRcdFx0dmVydGV4Tm9ybWFscyA9IG1vcnBoTm9ybWFscy52ZXJ0ZXhOb3JtYWxzWyBmIF07XG5cblx0XHRcdFx0ZmFjZU5vcm1hbC5jb3B5KCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHRcdHZlcnRleE5vcm1hbHMuYS5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIDAgXSApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzLmIuY29weSggZmFjZS52ZXJ0ZXhOb3JtYWxzWyAxIF0gKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFscy5jLmNvcHkoIGZhY2UudmVydGV4Tm9ybWFsc1sgMiBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHJlc3RvcmUgb3JpZ2luYWwgbm9ybWFsc1xuXG5cdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0ZmFjZS5ub3JtYWwgPSBmYWNlLl9fb3JpZ2luYWxGYWNlTm9ybWFsO1xuXHRcdFx0ZmFjZS52ZXJ0ZXhOb3JtYWxzID0gZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFscztcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNvbXB1dGVCb3VuZGluZ0JveDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbmV3IEJveDMoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYm91bmRpbmdCb3guc2V0RnJvbVBvaW50cyggdGhpcy52ZXJ0aWNlcyApO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLnNldEZyb21Qb2ludHMoIHRoaXMudmVydGljZXMgKTtcblxuXHR9LFxuXG5cdG1lcmdlOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCBtYXRyaXgsIG1hdGVyaWFsSW5kZXhPZmZzZXQgKSB7XG5cblx0XHRpZiAoICEgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0dlb21ldHJ5ICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HZW9tZXRyeS5tZXJnZSgpOiBnZW9tZXRyeSBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuR2VvbWV0cnkuJywgZ2VvbWV0cnkgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHZhciBub3JtYWxNYXRyaXgsXG5cdFx0XHR2ZXJ0ZXhPZmZzZXQgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCxcblx0XHRcdHZlcnRpY2VzMSA9IHRoaXMudmVydGljZXMsXG5cdFx0XHR2ZXJ0aWNlczIgPSBnZW9tZXRyeS52ZXJ0aWNlcyxcblx0XHRcdGZhY2VzMSA9IHRoaXMuZmFjZXMsXG5cdFx0XHRmYWNlczIgPSBnZW9tZXRyeS5mYWNlcyxcblx0XHRcdGNvbG9yczEgPSB0aGlzLmNvbG9ycyxcblx0XHRcdGNvbG9yczIgPSBnZW9tZXRyeS5jb2xvcnM7XG5cblx0XHRpZiAoIG1hdGVyaWFsSW5kZXhPZmZzZXQgPT09IHVuZGVmaW5lZCApIG1hdGVyaWFsSW5kZXhPZmZzZXQgPSAwO1xuXG5cdFx0aWYgKCBtYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdmVydGljZXNcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB2ZXJ0aWNlczIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSB2ZXJ0aWNlczJbIGkgXTtcblxuXHRcdFx0dmFyIHZlcnRleENvcHkgPSB2ZXJ0ZXguY2xvbmUoKTtcblxuXHRcdFx0aWYgKCBtYXRyaXggIT09IHVuZGVmaW5lZCApIHZlcnRleENvcHkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdFx0dmVydGljZXMxLnB1c2goIHZlcnRleENvcHkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbG9yc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNvbG9yczIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbG9yczEucHVzaCggY29sb3JzMlsgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGZhY2VzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBmYWNlczIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXMyWyBpIF0sIGZhY2VDb3B5LCBub3JtYWwsIGNvbG9yLFxuXHRcdFx0XHRmYWNlVmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscyxcblx0XHRcdFx0ZmFjZVZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0XHRmYWNlQ29weSA9IG5ldyBGYWNlMyggZmFjZS5hICsgdmVydGV4T2Zmc2V0LCBmYWNlLmIgKyB2ZXJ0ZXhPZmZzZXQsIGZhY2UuYyArIHZlcnRleE9mZnNldCApO1xuXHRcdFx0ZmFjZUNvcHkubm9ybWFsLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdGlmICggbm9ybWFsTWF0cml4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZmFjZUNvcHkubm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGZhY2VWZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdG5vcm1hbCA9IGZhY2VWZXJ0ZXhOb3JtYWxzWyBqIF0uY2xvbmUoKTtcblxuXHRcdFx0XHRpZiAoIG5vcm1hbE1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZhY2VDb3B5LnZlcnRleE5vcm1hbHMucHVzaCggbm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZmFjZUNvcHkuY29sb3IuY29weSggZmFjZS5jb2xvciApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZmFjZVZlcnRleENvbG9ycy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRjb2xvciA9IGZhY2VWZXJ0ZXhDb2xvcnNbIGogXTtcblx0XHRcdFx0ZmFjZUNvcHkudmVydGV4Q29sb3JzLnB1c2goIGNvbG9yLmNsb25lKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmYWNlQ29weS5tYXRlcmlhbEluZGV4ID0gZmFjZS5tYXRlcmlhbEluZGV4ICsgbWF0ZXJpYWxJbmRleE9mZnNldDtcblxuXHRcdFx0ZmFjZXMxLnB1c2goIGZhY2VDb3B5ICk7XG5cblx0XHR9XG5cblx0XHQvLyB1dnNcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZVZlcnRleFV2czIgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWyBpIF07XG5cblx0XHRcdGlmICggdGhpcy5mYWNlVmVydGV4VXZzWyBpIF0gPT09IHVuZGVmaW5lZCApIHRoaXMuZmFjZVZlcnRleFV2c1sgaSBdID0gW107XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlVmVydGV4VXZzMi5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgdXZzMiA9IGZhY2VWZXJ0ZXhVdnMyWyBqIF0sIHV2c0NvcHkgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgayA9IDAsIGtsID0gdXZzMi5sZW5ndGg7IGsgPCBrbDsgayArKyApIHtcblxuXHRcdFx0XHRcdHV2c0NvcHkucHVzaCggdXZzMlsgayBdLmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5mYWNlVmVydGV4VXZzWyBpIF0ucHVzaCggdXZzQ29weSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRtZXJnZU1lc2g6IGZ1bmN0aW9uICggbWVzaCApIHtcblxuXHRcdGlmICggISAoIG1lc2ggJiYgbWVzaC5pc01lc2ggKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5Lm1lcmdlTWVzaCgpOiBtZXNoIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5NZXNoLicsIG1lc2ggKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggbWVzaC5tYXRyaXhBdXRvVXBkYXRlICkgbWVzaC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMubWVyZ2UoIG1lc2guZ2VvbWV0cnksIG1lc2gubWF0cml4ICk7XG5cblx0fSxcblxuXHQvKlxuXHQgKiBDaGVja3MgZm9yIGR1cGxpY2F0ZSB2ZXJ0aWNlcyB3aXRoIGhhc2htYXAuXG5cdCAqIER1cGxpY2F0ZWQgdmVydGljZXMgYXJlIHJlbW92ZWRcblx0ICogYW5kIGZhY2VzJyB2ZXJ0aWNlcyBhcmUgdXBkYXRlZC5cblx0ICovXG5cblx0bWVyZ2VWZXJ0aWNlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZlcnRpY2VzTWFwID0ge307IC8vIEhhc2htYXAgZm9yIGxvb2tpbmcgdXAgdmVydGljZXMgYnkgcG9zaXRpb24gY29vcmRpbmF0ZXMgKGFuZCBtYWtpbmcgc3VyZSB0aGV5IGFyZSB1bmlxdWUpXG5cdFx0dmFyIHVuaXF1ZSA9IFtdLCBjaGFuZ2VzID0gW107XG5cblx0XHR2YXIgdiwga2V5O1xuXHRcdHZhciBwcmVjaXNpb25Qb2ludHMgPSA0OyAvLyBudW1iZXIgb2YgZGVjaW1hbCBwb2ludHMsIGUuZy4gNCBmb3IgZXBzaWxvbiBvZiAwLjAwMDFcblx0XHR2YXIgcHJlY2lzaW9uID0gTWF0aC5wb3coIDEwLCBwcmVjaXNpb25Qb2ludHMgKTtcblx0XHR2YXIgaSwgaWwsIGZhY2U7XG5cdFx0dmFyIGluZGljZXMsIGosIGpsO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0diA9IHRoaXMudmVydGljZXNbIGkgXTtcblx0XHRcdGtleSA9IE1hdGgucm91bmQoIHYueCAqIHByZWNpc2lvbiApICsgJ18nICsgTWF0aC5yb3VuZCggdi55ICogcHJlY2lzaW9uICkgKyAnXycgKyBNYXRoLnJvdW5kKCB2LnogKiBwcmVjaXNpb24gKTtcblxuXHRcdFx0aWYgKCB2ZXJ0aWNlc01hcFsga2V5IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR2ZXJ0aWNlc01hcFsga2V5IF0gPSBpO1xuXHRcdFx0XHR1bmlxdWUucHVzaCggdGhpcy52ZXJ0aWNlc1sgaSBdICk7XG5cdFx0XHRcdGNoYW5nZXNbIGkgXSA9IHVuaXF1ZS5sZW5ndGggLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ0R1cGxpY2F0ZSB2ZXJ0ZXggZm91bmQuICcsIGksICcgY291bGQgYmUgdXNpbmcgJywgdmVydGljZXNNYXBba2V5XSk7XG5cdFx0XHRcdGNoYW5nZXNbIGkgXSA9IGNoYW5nZXNbIHZlcnRpY2VzTWFwWyBrZXkgXSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblxuXHRcdC8vIGlmIGZhY2VzIGFyZSBjb21wbGV0ZWx5IGRlZ2VuZXJhdGUgYWZ0ZXIgbWVyZ2luZyB2ZXJ0aWNlcywgd2Vcblx0XHQvLyBoYXZlIHRvIHJlbW92ZSB0aGVtIGZyb20gdGhlIGdlb21ldHJ5LlxuXHRcdHZhciBmYWNlSW5kaWNlc1RvUmVtb3ZlID0gW107XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgaSBdO1xuXG5cdFx0XHRmYWNlLmEgPSBjaGFuZ2VzWyBmYWNlLmEgXTtcblx0XHRcdGZhY2UuYiA9IGNoYW5nZXNbIGZhY2UuYiBdO1xuXHRcdFx0ZmFjZS5jID0gY2hhbmdlc1sgZmFjZS5jIF07XG5cblx0XHRcdGluZGljZXMgPSBbIGZhY2UuYSwgZmFjZS5iLCBmYWNlLmMgXTtcblxuXHRcdFx0Ly8gaWYgYW55IGR1cGxpY2F0ZSB2ZXJ0aWNlcyBhcmUgZm91bmQgaW4gYSBGYWNlM1xuXHRcdFx0Ly8gd2UgaGF2ZSB0byByZW1vdmUgdGhlIGZhY2UgYXMgbm90aGluZyBjYW4gYmUgc2F2ZWRcblx0XHRcdGZvciAoIHZhciBuID0gMDsgbiA8IDM7IG4gKysgKSB7XG5cblx0XHRcdFx0aWYgKCBpbmRpY2VzWyBuIF0gPT09IGluZGljZXNbICggbiArIDEgKSAlIDMgXSApIHtcblxuXHRcdFx0XHRcdGZhY2VJbmRpY2VzVG9SZW1vdmUucHVzaCggaSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IGZhY2VJbmRpY2VzVG9SZW1vdmUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC0tICkge1xuXG5cdFx0XHR2YXIgaWR4ID0gZmFjZUluZGljZXNUb1JlbW92ZVsgaSBdO1xuXG5cdFx0XHR0aGlzLmZhY2VzLnNwbGljZSggaWR4LCAxICk7XG5cblx0XHRcdGZvciAoIGogPSAwLCBqbCA9IHRoaXMuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR0aGlzLmZhY2VWZXJ0ZXhVdnNbIGogXS5zcGxpY2UoIGlkeCwgMSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBVc2UgdW5pcXVlIHNldCBvZiB2ZXJ0aWNlc1xuXG5cdFx0dmFyIGRpZmYgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCAtIHVuaXF1ZS5sZW5ndGg7XG5cdFx0dGhpcy52ZXJ0aWNlcyA9IHVuaXF1ZTtcblx0XHRyZXR1cm4gZGlmZjtcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy52ZXJ0aWNlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IHBvaW50c1sgaSBdO1xuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKCBuZXcgVmVjdG9yMyggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c29ydEZhY2VzQnlNYXRlcmlhbEluZGV4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZmFjZXMgPSB0aGlzLmZhY2VzO1xuXHRcdHZhciBsZW5ndGggPSBmYWNlcy5sZW5ndGg7XG5cblx0XHQvLyB0YWcgZmFjZXNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0ZmFjZXNbIGkgXS5faWQgPSBpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc29ydCBmYWNlc1xuXG5cdFx0ZnVuY3Rpb24gbWF0ZXJpYWxJbmRleFNvcnQoIGEsIGIgKSB7XG5cblx0XHRcdHJldHVybiBhLm1hdGVyaWFsSW5kZXggLSBiLm1hdGVyaWFsSW5kZXg7XG5cblx0XHR9XG5cblx0XHRmYWNlcy5zb3J0KCBtYXRlcmlhbEluZGV4U29ydCApO1xuXG5cdFx0Ly8gc29ydCB1dnNcblxuXHRcdHZhciB1dnMxID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF07XG5cdFx0dmFyIHV2czIgPSB0aGlzLmZhY2VWZXJ0ZXhVdnNbIDEgXTtcblxuXHRcdHZhciBuZXdVdnMxLCBuZXdVdnMyO1xuXG5cdFx0aWYgKCB1dnMxICYmIHV2czEubGVuZ3RoID09PSBsZW5ndGggKSBuZXdVdnMxID0gW107XG5cdFx0aWYgKCB1dnMyICYmIHV2czIubGVuZ3RoID09PSBsZW5ndGggKSBuZXdVdnMyID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpZCA9IGZhY2VzWyBpIF0uX2lkO1xuXG5cdFx0XHRpZiAoIG5ld1V2czEgKSBuZXdVdnMxLnB1c2goIHV2czFbIGlkIF0gKTtcblx0XHRcdGlmICggbmV3VXZzMiApIG5ld1V2czIucHVzaCggdXZzMlsgaWQgXSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBuZXdVdnMxICkgdGhpcy5mYWNlVmVydGV4VXZzWyAwIF0gPSBuZXdVdnMxO1xuXHRcdGlmICggbmV3VXZzMiApIHRoaXMuZmFjZVZlcnRleFV2c1sgMSBdID0gbmV3VXZzMjtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdHZW9tZXRyeScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ0dlb21ldHJ5LnRvSlNPTidcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gc3RhbmRhcmQgR2VvbWV0cnkgc2VyaWFsaXphdGlvblxuXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblx0XHRpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBkYXRhLm5hbWUgPSB0aGlzLm5hbWU7XG5cblx0XHRpZiAoIHRoaXMucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRcdGlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIGRhdGFbIGtleSBdID0gcGFyYW1ldGVyc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cblx0XHR9XG5cblx0XHR2YXIgdmVydGljZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMudmVydGljZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdmVydGV4ID0gdGhpcy52ZXJ0aWNlc1sgaSBdO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGZhY2VzID0gW107XG5cdFx0dmFyIG5vcm1hbHMgPSBbXTtcblx0XHR2YXIgbm9ybWFsc0hhc2ggPSB7fTtcblx0XHR2YXIgY29sb3JzID0gW107XG5cdFx0dmFyIGNvbG9yc0hhc2ggPSB7fTtcblx0XHR2YXIgdXZzID0gW107XG5cdFx0dmFyIHV2c0hhc2ggPSB7fTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuZmFjZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IHRoaXMuZmFjZXNbIGkgXTtcblxuXHRcdFx0dmFyIGhhc01hdGVyaWFsID0gdHJ1ZTtcblx0XHRcdHZhciBoYXNGYWNlVXYgPSBmYWxzZTsgLy8gZGVwcmVjYXRlZFxuXHRcdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhVdiA9IHRoaXMuZmFjZVZlcnRleFV2c1sgMCBdWyBpIF0gIT09IHVuZGVmaW5lZDtcblx0XHRcdHZhciBoYXNGYWNlTm9ybWFsID0gZmFjZS5ub3JtYWwubGVuZ3RoKCkgPiAwO1xuXHRcdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhOb3JtYWwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoID4gMDtcblx0XHRcdHZhciBoYXNGYWNlQ29sb3IgPSBmYWNlLmNvbG9yLnIgIT09IDEgfHwgZmFjZS5jb2xvci5nICE9PSAxIHx8IGZhY2UuY29sb3IuYiAhPT0gMTtcblx0XHRcdHZhciBoYXNGYWNlVmVydGV4Q29sb3IgPSBmYWNlLnZlcnRleENvbG9ycy5sZW5ndGggPiAwO1xuXG5cdFx0XHR2YXIgZmFjZVR5cGUgPSAwO1xuXG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDAsIDAgKTsgLy8gaXNRdWFkXG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDEsIGhhc01hdGVyaWFsICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDIsIGhhc0ZhY2VVdiApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCAzLCBoYXNGYWNlVmVydGV4VXYgKTtcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgNCwgaGFzRmFjZU5vcm1hbCApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA1LCBoYXNGYWNlVmVydGV4Tm9ybWFsICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDYsIGhhc0ZhY2VDb2xvciApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA3LCBoYXNGYWNlVmVydGV4Q29sb3IgKTtcblxuXHRcdFx0ZmFjZXMucHVzaCggZmFjZVR5cGUgKTtcblx0XHRcdGZhY2VzLnB1c2goIGZhY2UuYSwgZmFjZS5iLCBmYWNlLmMgKTtcblx0XHRcdGZhY2VzLnB1c2goIGZhY2UubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhVdiApIHtcblxuXHRcdFx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IHRoaXMuZmFjZVZlcnRleFV2c1sgMCBdWyBpIF07XG5cblx0XHRcdFx0ZmFjZXMucHVzaChcblx0XHRcdFx0XHRnZXRVdkluZGV4KCBmYWNlVmVydGV4VXZzWyAwIF0gKSxcblx0XHRcdFx0XHRnZXRVdkluZGV4KCBmYWNlVmVydGV4VXZzWyAxIF0gKSxcblx0XHRcdFx0XHRnZXRVdkluZGV4KCBmYWNlVmVydGV4VXZzWyAyIF0gKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzRmFjZU5vcm1hbCApIHtcblxuXHRcdFx0XHRmYWNlcy5wdXNoKCBnZXROb3JtYWxJbmRleCggZmFjZS5ub3JtYWwgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzRmFjZVZlcnRleE5vcm1hbCApIHtcblxuXHRcdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscztcblxuXHRcdFx0XHRmYWNlcy5wdXNoKFxuXHRcdFx0XHRcdGdldE5vcm1hbEluZGV4KCB2ZXJ0ZXhOb3JtYWxzWyAwIF0gKSxcblx0XHRcdFx0XHRnZXROb3JtYWxJbmRleCggdmVydGV4Tm9ybWFsc1sgMSBdICksXG5cdFx0XHRcdFx0Z2V0Tm9ybWFsSW5kZXgoIHZlcnRleE5vcm1hbHNbIDIgXSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlQ29sb3IgKSB7XG5cblx0XHRcdFx0ZmFjZXMucHVzaCggZ2V0Q29sb3JJbmRleCggZmFjZS5jb2xvciApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4Q29sb3IgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0XHRcdGZhY2VzLnB1c2goXG5cdFx0XHRcdFx0Z2V0Q29sb3JJbmRleCggdmVydGV4Q29sb3JzWyAwIF0gKSxcblx0XHRcdFx0XHRnZXRDb2xvckluZGV4KCB2ZXJ0ZXhDb2xvcnNbIDEgXSApLFxuXHRcdFx0XHRcdGdldENvbG9ySW5kZXgoIHZlcnRleENvbG9yc1sgMiBdIClcblx0XHRcdFx0KTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2V0Qml0KCB2YWx1ZSwgcG9zaXRpb24sIGVuYWJsZWQgKSB7XG5cblx0XHRcdHJldHVybiBlbmFibGVkID8gdmFsdWUgfCAoIDEgPDwgcG9zaXRpb24gKSA6IHZhbHVlICYgKCB+ICggMSA8PCBwb3NpdGlvbiApICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXROb3JtYWxJbmRleCggbm9ybWFsICkge1xuXG5cdFx0XHR2YXIgaGFzaCA9IG5vcm1hbC54LnRvU3RyaW5nKCkgKyBub3JtYWwueS50b1N0cmluZygpICsgbm9ybWFsLnoudG9TdHJpbmcoKTtcblxuXHRcdFx0aWYgKCBub3JtYWxzSGFzaFsgaGFzaCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG5vcm1hbHNIYXNoWyBoYXNoIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bm9ybWFsc0hhc2hbIGhhc2ggXSA9IG5vcm1hbHMubGVuZ3RoIC8gMztcblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRyZXR1cm4gbm9ybWFsc0hhc2hbIGhhc2ggXTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldENvbG9ySW5kZXgoIGNvbG9yICkge1xuXG5cdFx0XHR2YXIgaGFzaCA9IGNvbG9yLnIudG9TdHJpbmcoKSArIGNvbG9yLmcudG9TdHJpbmcoKSArIGNvbG9yLmIudG9TdHJpbmcoKTtcblxuXHRcdFx0aWYgKCBjb2xvcnNIYXNoWyBoYXNoIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gY29sb3JzSGFzaFsgaGFzaCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbG9yc0hhc2hbIGhhc2ggXSA9IGNvbG9ycy5sZW5ndGg7XG5cdFx0XHRjb2xvcnMucHVzaCggY29sb3IuZ2V0SGV4KCkgKTtcblxuXHRcdFx0cmV0dXJuIGNvbG9yc0hhc2hbIGhhc2ggXTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldFV2SW5kZXgoIHV2ICkge1xuXG5cdFx0XHR2YXIgaGFzaCA9IHV2LngudG9TdHJpbmcoKSArIHV2LnkudG9TdHJpbmcoKTtcblxuXHRcdFx0aWYgKCB1dnNIYXNoWyBoYXNoIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gdXZzSGFzaFsgaGFzaCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHV2c0hhc2hbIGhhc2ggXSA9IHV2cy5sZW5ndGggLyAyO1xuXHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0cmV0dXJuIHV2c0hhc2hbIGhhc2ggXTtcblxuXHRcdH1cblxuXHRcdGRhdGEuZGF0YSA9IHt9O1xuXG5cdFx0ZGF0YS5kYXRhLnZlcnRpY2VzID0gdmVydGljZXM7XG5cdFx0ZGF0YS5kYXRhLm5vcm1hbHMgPSBub3JtYWxzO1xuXHRcdGlmICggY29sb3JzLmxlbmd0aCA+IDAgKSBkYXRhLmRhdGEuY29sb3JzID0gY29sb3JzO1xuXHRcdGlmICggdXZzLmxlbmd0aCA+IDAgKSBkYXRhLmRhdGEudXZzID0gWyB1dnMgXTsgLy8gdGVtcG9yYWwgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXHRcdGRhdGEuZGF0YS5mYWNlcyA9IGZhY2VzO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Lypcblx0XHQgLy8gSGFuZGxlIHByaW1pdGl2ZXNcblxuXHRcdCB2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdCBpZiAoIHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdCB2YXIgdmFsdWVzID0gW107XG5cblx0XHQgZm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0IHZhbHVlcy5wdXNoKCBwYXJhbWV0ZXJzWyBrZXkgXSApO1xuXG5cdFx0IH1cblxuXHRcdCB2YXIgZ2VvbWV0cnkgPSBPYmplY3QuY3JlYXRlKCB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSApO1xuXHRcdCB0aGlzLmNvbnN0cnVjdG9yLmFwcGx5KCBnZW9tZXRyeSwgdmFsdWVzICk7XG5cdFx0IHJldHVybiBnZW9tZXRyeTtcblxuXHRcdCB9XG5cblx0XHQgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXHRcdCAqL1xuXG5cdFx0cmV0dXJuIG5ldyBHZW9tZXRyeSgpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dmFyIGksIGlsLCBqLCBqbCwgaywga2w7XG5cblx0XHQvLyByZXNldFxuXG5cdFx0dGhpcy52ZXJ0aWNlcyA9IFtdO1xuXHRcdHRoaXMuY29sb3JzID0gW107XG5cdFx0dGhpcy5mYWNlcyA9IFtdO1xuXHRcdHRoaXMuZmFjZVZlcnRleFV2cyA9IFtbXV07XG5cdFx0dGhpcy5tb3JwaFRhcmdldHMgPSBbXTtcblx0XHR0aGlzLm1vcnBoTm9ybWFscyA9IFtdO1xuXHRcdHRoaXMuc2tpbldlaWdodHMgPSBbXTtcblx0XHR0aGlzLnNraW5JbmRpY2VzID0gW107XG5cdFx0dGhpcy5saW5lRGlzdGFuY2VzID0gW107XG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0XHQvLyBuYW1lXG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdC8vIHZlcnRpY2VzXG5cblx0XHR2YXIgdmVydGljZXMgPSBzb3VyY2UudmVydGljZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKCB2ZXJ0aWNlc1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbG9yc1xuXG5cdFx0dmFyIGNvbG9ycyA9IHNvdXJjZS5jb2xvcnM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBjb2xvcnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29sb3JzLnB1c2goIGNvbG9yc1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGZhY2VzXG5cblx0XHR2YXIgZmFjZXMgPSBzb3VyY2UuZmFjZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBmYWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5mYWNlcy5wdXNoKCBmYWNlc1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGZhY2UgdmVydGV4IHV2c1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gc291cmNlLmZhY2VWZXJ0ZXhVdnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlVmVydGV4VXZzID0gc291cmNlLmZhY2VWZXJ0ZXhVdnNbIGkgXTtcblxuXHRcdFx0aWYgKCB0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuZmFjZVZlcnRleFV2c1sgaSBdID0gW107XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaiA9IDAsIGpsID0gZmFjZVZlcnRleFV2cy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgdXZzID0gZmFjZVZlcnRleFV2c1sgaiBdLCB1dnNDb3B5ID0gW107XG5cblx0XHRcdFx0Zm9yICggayA9IDAsIGtsID0gdXZzLmxlbmd0aDsgayA8IGtsOyBrICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHV2ID0gdXZzWyBrIF07XG5cblx0XHRcdFx0XHR1dnNDb3B5LnB1c2goIHV2LmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5mYWNlVmVydGV4VXZzWyBpIF0ucHVzaCggdXZzQ29weSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCB0YXJnZXRzXG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0ge307XG5cdFx0XHRtb3JwaFRhcmdldC5uYW1lID0gbW9ycGhUYXJnZXRzWyBpIF0ubmFtZTtcblxuXHRcdFx0Ly8gdmVydGljZXNcblxuXHRcdFx0aWYgKCBtb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0LnZlcnRpY2VzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhUYXJnZXRzWyBpIF0udmVydGljZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRtb3JwaFRhcmdldC52ZXJ0aWNlcy5wdXNoKCBtb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlc1sgaiBdLmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbm9ybWFsc1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1sgaSBdLm5vcm1hbHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtb3JwaFRhcmdldC5ub3JtYWxzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhUYXJnZXRzWyBpIF0ubm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdG1vcnBoVGFyZ2V0Lm5vcm1hbHMucHVzaCggbW9ycGhUYXJnZXRzWyBpIF0ubm9ybWFsc1sgaiBdLmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMucHVzaCggbW9ycGhUYXJnZXQgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIG5vcm1hbHNcblxuXHRcdHZhciBtb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gbW9ycGhOb3JtYWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbW9ycGhOb3JtYWwgPSB7fTtcblxuXHRcdFx0Ly8gdmVydGV4IG5vcm1hbHNcblxuXHRcdFx0aWYgKCBtb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bW9ycGhOb3JtYWwudmVydGV4Tm9ybWFscyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGogPSAwLCBqbCA9IG1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgc3JjVmVydGV4Tm9ybWFsID0gbW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFsc1sgaiBdO1xuXHRcdFx0XHRcdHZhciBkZXN0VmVydGV4Tm9ybWFsID0ge307XG5cblx0XHRcdFx0XHRkZXN0VmVydGV4Tm9ybWFsLmEgPSBzcmNWZXJ0ZXhOb3JtYWwuYS5jbG9uZSgpO1xuXHRcdFx0XHRcdGRlc3RWZXJ0ZXhOb3JtYWwuYiA9IHNyY1ZlcnRleE5vcm1hbC5iLmNsb25lKCk7XG5cdFx0XHRcdFx0ZGVzdFZlcnRleE5vcm1hbC5jID0gc3JjVmVydGV4Tm9ybWFsLmMuY2xvbmUoKTtcblxuXHRcdFx0XHRcdG1vcnBoTm9ybWFsLnZlcnRleE5vcm1hbHMucHVzaCggZGVzdFZlcnRleE5vcm1hbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBmYWNlIG5vcm1hbHNcblxuXHRcdFx0aWYgKCBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1vcnBoTm9ybWFsLmZhY2VOb3JtYWxzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhOb3JtYWxzWyBpIF0uZmFjZU5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRtb3JwaE5vcm1hbC5mYWNlTm9ybWFscy5wdXNoKCBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFsc1sgaiBdLmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaE5vcm1hbHMucHVzaCggbW9ycGhOb3JtYWwgKTtcblxuXHRcdH1cblxuXHRcdC8vIHNraW4gd2VpZ2h0c1xuXG5cdFx0dmFyIHNraW5XZWlnaHRzID0gc291cmNlLnNraW5XZWlnaHRzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gc2tpbldlaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuc2tpbldlaWdodHMucHVzaCggc2tpbldlaWdodHNbIGkgXS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHQvLyBza2luIGluZGljZXNcblxuXHRcdHZhciBza2luSW5kaWNlcyA9IHNvdXJjZS5za2luSW5kaWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHNraW5JbmRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnNraW5JbmRpY2VzLnB1c2goIHNraW5JbmRpY2VzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbGluZSBkaXN0YW5jZXNcblxuXHRcdHZhciBsaW5lRGlzdGFuY2VzID0gc291cmNlLmxpbmVEaXN0YW5jZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBsaW5lRGlzdGFuY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmxpbmVEaXN0YW5jZXMucHVzaCggbGluZURpc3RhbmNlc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBib3hcblxuXHRcdHZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcblxuXHRcdGlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgc3BoZXJlXG5cblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBmbGFnc1xuXG5cdFx0dGhpcy5lbGVtZW50c05lZWRVcGRhdGUgPSBzb3VyY2UuZWxlbWVudHNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gc291cmNlLnZlcnRpY2VzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLnV2c05lZWRVcGRhdGUgPSBzb3VyY2UudXZzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gc291cmNlLm5vcm1hbHNOZWVkVXBkYXRlO1xuXHRcdHRoaXMuY29sb3JzTmVlZFVwZGF0ZSA9IHNvdXJjZS5jb2xvcnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubGluZURpc3RhbmNlc05lZWRVcGRhdGUgPSBzb3VyY2UubGluZURpc3RhbmNlc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gc291cmNlLmdyb3Vwc05lZWRVcGRhdGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEJveEdlb21ldHJ5XG5cbmZ1bmN0aW9uIEJveEdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb3hHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRkZXB0aDogZGVwdGgsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQm94QnVmZmVyR2VvbWV0cnkoIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgZGVwdGhTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkJveEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuQm94R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94R2VvbWV0cnk7XG5cbi8vIEJveEJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIEJveEJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb3hCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRkZXB0aDogZGVwdGgsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHR9O1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0d2lkdGggPSB3aWR0aCB8fCAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblx0ZGVwdGggPSBkZXB0aCB8fCAxO1xuXG5cdC8vIHNlZ21lbnRzXG5cblx0d2lkdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSB8fCAxO1xuXHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgfHwgMTtcblx0ZGVwdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIGRlcHRoU2VnbWVudHMgKSB8fCAxO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7XG5cdHZhciBncm91cFN0YXJ0ID0gMDtcblxuXHQvLyBidWlsZCBlYWNoIHNpZGUgb2YgdGhlIGJveCBnZW9tZXRyeVxuXG5cdGJ1aWxkUGxhbmUoICd6JywgJ3knLCAneCcsIC0gMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDAgKTsgLy8gcHhcblx0YnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCAtIHdpZHRoLCBkZXB0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgMSApOyAvLyBueFxuXHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAxLCB3aWR0aCwgZGVwdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cywgMiApOyAvLyBweVxuXHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAtIDEsIHdpZHRoLCBkZXB0aCwgLSBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDMgKTsgLy8gbnlcblx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDQgKTsgLy8gcHpcblx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgLSAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIC0gZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA1ICk7IC8vIG56XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdGZ1bmN0aW9uIGJ1aWxkUGxhbmUoIHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFksIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHR2YXIgc2VnbWVudFdpZHRoID0gd2lkdGggLyBncmlkWDtcblx0XHR2YXIgc2VnbWVudEhlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0dmFyIHdpZHRoSGFsZiA9IHdpZHRoIC8gMjtcblx0XHR2YXIgaGVpZ2h0SGFsZiA9IGhlaWdodCAvIDI7XG5cdFx0dmFyIGRlcHRoSGFsZiA9IGRlcHRoIC8gMjtcblxuXHRcdHZhciBncmlkWDEgPSBncmlkWCArIDE7XG5cdFx0dmFyIGdyaWRZMSA9IGdyaWRZICsgMTtcblxuXHRcdHZhciB2ZXJ0ZXhDb3VudGVyID0gMDtcblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHR2YXIgaXgsIGl5O1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdFx0dmFyIHkgPSBpeSAqIHNlZ21lbnRIZWlnaHQgLSBoZWlnaHRIYWxmO1xuXG5cdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcblxuXHRcdFx0XHR2YXIgeCA9IGl4ICogc2VnbWVudFdpZHRoIC0gd2lkdGhIYWxmO1xuXG5cdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0dmVjdG9yWyB1IF0gPSB4ICogdWRpcjtcblx0XHRcdFx0dmVjdG9yWyB2IF0gPSB5ICogdmRpcjtcblx0XHRcdFx0dmVjdG9yWyB3IF0gPSBkZXB0aEhhbGY7XG5cblx0XHRcdFx0Ly8gbm93IGFwcGx5IHZlY3RvciB0byB2ZXJ0ZXggYnVmZmVyXG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0dmVjdG9yWyB1IF0gPSAwO1xuXHRcdFx0XHR2ZWN0b3JbIHYgXSA9IDA7XG5cdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGggPiAwID8gMSA6IC0gMTtcblxuXHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0XHQvLyB1dnNcblxuXHRcdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0XHR1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7XG5cblx0XHRcdFx0Ly8gY291bnRlcnNcblxuXHRcdFx0XHR2ZXJ0ZXhDb3VudGVyICs9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdC8vIDEuIHlvdSBuZWVkIHRocmVlIGluZGljZXMgdG8gZHJhdyBhIHNpbmdsZSBmYWNlXG5cdFx0Ly8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXNcblx0XHQvLyAzLiBzbyB3ZSBuZWVkIHRvIGdlbmVyYXRlIHNpeCAoMiozKSBpbmRpY2VzIHBlciBzZWdtZW50XG5cblx0XHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xuXG5cdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdHZhciBhID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogaXk7XG5cdFx0XHRcdHZhciBiID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdFx0dmFyIGMgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdHZhciBkID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiBpeTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHQvLyBpbmNyZWFzZSBjb3VudGVyXG5cblx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIG1hdGVyaWFsSW5kZXggKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0Ly8gdXBkYXRlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlc1xuXG5cdFx0bnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyO1xuXG5cdH1cblxufVxuXG5Cb3hCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkJveEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIFVuaWZvcm0gVXRpbGl0aWVzXG4gKi9cblxuZnVuY3Rpb24gY2xvbmVVbmlmb3Jtcyggc3JjICkge1xuXG5cdHZhciBkc3QgPSB7fTtcblxuXHRmb3IgKCB2YXIgdSBpbiBzcmMgKSB7XG5cblx0XHRkc3RbIHUgXSA9IHt9O1xuXG5cdFx0Zm9yICggdmFyIHAgaW4gc3JjWyB1IF0gKSB7XG5cblx0XHRcdHZhciBwcm9wZXJ0eSA9IHNyY1sgdSBdWyBwIF07XG5cblx0XHRcdGlmICggcHJvcGVydHkgJiYgKCBwcm9wZXJ0eS5pc0NvbG9yIHx8XG5cdFx0XHRcdHByb3BlcnR5LmlzTWF0cml4MyB8fCBwcm9wZXJ0eS5pc01hdHJpeDQgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNWZWN0b3IyIHx8IHByb3BlcnR5LmlzVmVjdG9yMyB8fCBwcm9wZXJ0eS5pc1ZlY3RvcjQgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNUZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5LmNsb25lKCk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHByb3BlcnR5ICkgKSB7XG5cblx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5LnNsaWNlKCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBkc3Q7XG5cbn1cblxuZnVuY3Rpb24gbWVyZ2VVbmlmb3JtcyggdW5pZm9ybXMgKSB7XG5cblx0dmFyIG1lcmdlZCA9IHt9O1xuXG5cdGZvciAoIHZhciB1ID0gMDsgdSA8IHVuaWZvcm1zLmxlbmd0aDsgdSArKyApIHtcblxuXHRcdHZhciB0bXAgPSBjbG9uZVVuaWZvcm1zKCB1bmlmb3Jtc1sgdSBdICk7XG5cblx0XHRmb3IgKCB2YXIgcCBpbiB0bXAgKSB7XG5cblx0XHRcdG1lcmdlZFsgcCBdID0gdG1wWyBwIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBtZXJnZWQ7XG5cbn1cblxuLy8gTGVnYWN5XG5cbnZhciBVbmlmb3Jtc1V0aWxzID0geyBjbG9uZTogY2xvbmVVbmlmb3JtcywgbWVyZ2U6IG1lcmdlVW5pZm9ybXMgfTtcblxudmFyIGRlZmF1bHRfdmVydGV4ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn1cIjtcblxudmFyIGRlZmF1bHRfZnJhZ21lbnQgPSBcInZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG59XCI7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGRlZmluZXM6IHsgXCJsYWJlbFwiIDogXCJ2YWx1ZVwiIH0sXG4gKiAgdW5pZm9ybXM6IHsgXCJwYXJhbWV0ZXIxXCI6IHsgdmFsdWU6IDEuMCB9LCBcInBhcmFtZXRlcjJcIjogeyB2YWx1ZTI6IDIgfSB9LFxuICpcbiAqICBmcmFnbWVudFNoYWRlcjogPHN0cmluZz4sXG4gKiAgdmVydGV4U2hhZGVyOiA8c3RyaW5nPixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBsaWdodHM6IDxib29sPixcbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcbiAqICBtb3JwaE5vcm1hbHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIFNoYWRlck1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhZGVyTWF0ZXJpYWwnO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHt9O1xuXHR0aGlzLnVuaWZvcm1zID0ge307XG5cblx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSBkZWZhdWx0X3ZlcnRleDtcblx0dGhpcy5mcmFnbWVudFNoYWRlciA9IGRlZmF1bHRfZnJhZ21lbnQ7XG5cblx0dGhpcy5saW5ld2lkdGggPSAxO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHR0aGlzLmZvZyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHNjZW5lIGZvZ1xuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHNjZW5lIGxpZ2h0c1xuXHR0aGlzLmNsaXBwaW5nID0gZmFsc2U7IC8vIHNldCB0byB1c2UgdXNlci1kZWZpbmVkIGNsaXBwaW5nIHBsYW5lc1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBza2lubmluZyBhdHRyaWJ1dGUgc3RyZWFtc1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIG1vcnBoIHRhcmdldHNcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBtb3JwaCBub3JtYWxzXG5cblx0dGhpcy5leHRlbnNpb25zID0ge1xuXHRcdGRlcml2YXRpdmVzOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBkZXJpdmF0aXZlc1xuXHRcdGZyYWdEZXB0aDogZmFsc2UsIC8vIHNldCB0byB1c2UgZnJhZ21lbnQgZGVwdGggdmFsdWVzXG5cdFx0ZHJhd0J1ZmZlcnM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRyYXcgYnVmZmVyc1xuXHRcdHNoYWRlclRleHR1cmVMT0Q6IGZhbHNlIC8vIHNldCB0byB1c2Ugc2hhZGVyIHRleHR1cmUgTE9EXG5cdH07XG5cblx0Ly8gV2hlbiByZW5kZXJlZCBnZW9tZXRyeSBkb2Vzbid0IGluY2x1ZGUgdGhlc2UgYXR0cmlidXRlcyBidXQgdGhlIG1hdGVyaWFsIGRvZXMsXG5cdC8vIHVzZSB0aGVzZSBkZWZhdWx0IHZhbHVlcyBpbiBXZWJHTC4gVGhpcyBhdm9pZHMgZXJyb3JzIHdoZW4gYnVmZmVyIGRhdGEgaXMgbWlzc2luZy5cblx0dGhpcy5kZWZhdWx0QXR0cmlidXRlVmFsdWVzID0ge1xuXHRcdCdjb2xvcic6IFsgMSwgMSwgMSBdLFxuXHRcdCd1dic6IFsgMCwgMCBdLFxuXHRcdCd1djInOiBbIDAsIDAgXVxuXHR9O1xuXG5cdHRoaXMuaW5kZXgwQXR0cmlidXRlTmFtZSA9IHVuZGVmaW5lZDtcblx0dGhpcy51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRpZiAoIHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggcGFyYW1ldGVycy5hdHRyaWJ1dGVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TaGFkZXJNYXRlcmlhbDogYXR0cmlidXRlcyBzaG91bGQgbm93IGJlIGRlZmluZWQgaW4gVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxufVxuXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYWRlck1hdGVyaWFsO1xuXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuaXNTaGFkZXJNYXRlcmlhbCA9IHRydWU7XG5cblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5mcmFnbWVudFNoYWRlciA9IHNvdXJjZS5mcmFnbWVudFNoYWRlcjtcblx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSBzb3VyY2UudmVydGV4U2hhZGVyO1xuXG5cdHRoaXMudW5pZm9ybXMgPSBjbG9uZVVuaWZvcm1zKCBzb3VyY2UudW5pZm9ybXMgKTtcblxuXHR0aGlzLmRlZmluZXMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLmRlZmluZXMgKTtcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHR0aGlzLmxpZ2h0cyA9IHNvdXJjZS5saWdodHM7XG5cdHRoaXMuY2xpcHBpbmcgPSBzb3VyY2UuY2xpcHBpbmc7XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcblxuXHR0aGlzLmV4dGVuc2lvbnMgPSBzb3VyY2UuZXh0ZW5zaW9ucztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHR2YXIgZGF0YSA9IE1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdGRhdGEudW5pZm9ybXMgPSB7fTtcblxuXHRmb3IgKCB2YXIgbmFtZSBpbiB0aGlzLnVuaWZvcm1zICkge1xuXG5cdFx0dmFyIHVuaWZvcm0gPSB0aGlzLnVuaWZvcm1zWyBuYW1lIF07XG5cdFx0dmFyIHZhbHVlID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdGlmICggdmFsdWUgJiYgdmFsdWUuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHR5cGU6ICd0Jyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvSlNPTiggbWV0YSApLnV1aWRcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHR5cGU6ICdjJyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLmdldEhleCgpXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNWZWN0b3IyICkge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHR5cGU6ICd2MicsXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0FycmF5KClcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjMgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ3YzJyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yNCApIHtcblxuXHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHR0eXBlOiAndjQnLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNNYXRyaXgzICkge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHR5cGU6ICdtMycsXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0FycmF5KClcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc01hdHJpeDQgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ200Jyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBub3RlOiB0aGUgYXJyYXkgdmFyaWFudHMgdjJ2LCB2M3YsIHY0diwgbTR2IGFuZCB0diBhcmUgbm90IHN1cHBvcnRlZCBzbyBmYXJcblxuXHRcdH1cblxuXHR9XG5cblx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy5kZWZpbmVzICkubGVuZ3RoID4gMCApIGRhdGEuZGVmaW5lcyA9IHRoaXMuZGVmaW5lcztcblxuXHRkYXRhLnZlcnRleFNoYWRlciA9IHRoaXMudmVydGV4U2hhZGVyO1xuXHRkYXRhLmZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNoYWRlcjtcblxuXHR2YXIgZXh0ZW5zaW9ucyA9IHt9O1xuXG5cdGZvciAoIHZhciBrZXkgaW4gdGhpcy5leHRlbnNpb25zICkge1xuXG5cdFx0aWYgKCB0aGlzLmV4dGVuc2lvbnNbIGtleSBdID09PSB0cnVlICkgZXh0ZW5zaW9uc1sga2V5IF0gPSB0cnVlO1xuXG5cdH1cblxuXHRpZiAoIE9iamVjdC5rZXlzKCBleHRlbnNpb25zICkubGVuZ3RoID4gMCApIGRhdGEuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiovXG5cbmZ1bmN0aW9uIENhbWVyYSgpIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0NhbWVyYSc7XG5cblx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG59XG5cbkNhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBDYW1lcmEsXG5cblx0aXNDYW1lcmE6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBzb3VyY2UubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXguY29weSggc291cmNlLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRXb3JsZERpcmVjdGlvbjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DYW1lcmE6IC5nZXRXb3JsZERpcmVjdGlvbigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0dmFyIGUgPSB0aGlzLm1hdHJpeFdvcmxkLmVsZW1lbnRzO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIC0gZVsgOCBdLCAtIGVbIDkgXSwgLSBlWyAxMCBdICkubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBncmVnZ21hbiAvIGh0dHA6Ly9nYW1lcy5ncmVnZ21hbi5jb20vXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKSB7XG5cblx0Q2FtZXJhLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUGVyc3BlY3RpdmVDYW1lcmEnO1xuXG5cdHRoaXMuZm92ID0gZm92ICE9PSB1bmRlZmluZWQgPyBmb3YgOiA1MDtcblx0dGhpcy56b29tID0gMTtcblxuXHR0aGlzLm5lYXIgPSBuZWFyICE9PSB1bmRlZmluZWQgPyBuZWFyIDogMC4xO1xuXHR0aGlzLmZhciA9IGZhciAhPT0gdW5kZWZpbmVkID8gZmFyIDogMjAwMDtcblx0dGhpcy5mb2N1cyA9IDEwO1xuXG5cdHRoaXMuYXNwZWN0ID0gYXNwZWN0ICE9PSB1bmRlZmluZWQgPyBhc3BlY3QgOiAxO1xuXHR0aGlzLnZpZXcgPSBudWxsO1xuXG5cdHRoaXMuZmlsbUdhdWdlID0gMzU7XHQvLyB3aWR0aCBvZiB0aGUgZmlsbSAoZGVmYXVsdCBpbiBtaWxsaW1ldGVycylcblx0dGhpcy5maWxtT2Zmc2V0ID0gMDtcdC8vIGhvcml6b250YWwgZmlsbSBvZmZzZXQgKHNhbWUgdW5pdCBhcyBnYXVnZSlcblxuXHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxufVxuXG5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDYW1lcmEucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUGVyc3BlY3RpdmVDYW1lcmEsXG5cblx0aXNQZXJzcGVjdGl2ZUNhbWVyYTogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0Q2FtZXJhLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLmZvdiA9IHNvdXJjZS5mb3Y7XG5cdFx0dGhpcy56b29tID0gc291cmNlLnpvb207XG5cblx0XHR0aGlzLm5lYXIgPSBzb3VyY2UubmVhcjtcblx0XHR0aGlzLmZhciA9IHNvdXJjZS5mYXI7XG5cdFx0dGhpcy5mb2N1cyA9IHNvdXJjZS5mb2N1cztcblxuXHRcdHRoaXMuYXNwZWN0ID0gc291cmNlLmFzcGVjdDtcblx0XHR0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTtcblxuXHRcdHRoaXMuZmlsbUdhdWdlID0gc291cmNlLmZpbG1HYXVnZTtcblx0XHR0aGlzLmZpbG1PZmZzZXQgPSBzb3VyY2UuZmlsbU9mZnNldDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIEZPViBieSBmb2NhbCBsZW5ndGggaW4gcmVzcGVjdCB0byB0aGUgY3VycmVudCAuZmlsbUdhdWdlLlxuXHQgKlxuXHQgKiBUaGUgZGVmYXVsdCBmaWxtIGdhdWdlIGlzIDM1LCBzbyB0aGF0IHRoZSBmb2NhbCBsZW5ndGggY2FuIGJlIHNwZWNpZmllZCBmb3Jcblx0ICogYSAzNW1tIChmdWxsIGZyYW1lKSBjYW1lcmEuXG5cdCAqXG5cdCAqIFZhbHVlcyBmb3IgZm9jYWwgbGVuZ3RoIGFuZCBmaWxtIGdhdWdlIG11c3QgaGF2ZSB0aGUgc2FtZSB1bml0LlxuXHQgKi9cblx0c2V0Rm9jYWxMZW5ndGg6IGZ1bmN0aW9uICggZm9jYWxMZW5ndGggKSB7XG5cblx0XHQvLyBzZWUgaHR0cDovL3d3dy5ib2JhdGtpbnMuY29tL3Bob3RvZ3JhcGh5L3RlY2huaWNhbC9maWVsZF9vZl92aWV3Lmh0bWxcblx0XHR2YXIgdkV4dGVudFNsb3BlID0gMC41ICogdGhpcy5nZXRGaWxtSGVpZ2h0KCkgLyBmb2NhbExlbmd0aDtcblxuXHRcdHRoaXMuZm92ID0gX01hdGguUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4oIHZFeHRlbnRTbG9wZSApO1xuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGZvY2FsIGxlbmd0aCBmcm9tIHRoZSBjdXJyZW50IC5mb3YgYW5kIC5maWxtR2F1Z2UuXG5cdCAqL1xuXHRnZXRGb2NhbExlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZFeHRlbnRTbG9wZSA9IE1hdGgudGFuKCBfTWF0aC5ERUcyUkFEICogMC41ICogdGhpcy5mb3YgKTtcblxuXHRcdHJldHVybiAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIHZFeHRlbnRTbG9wZTtcblxuXHR9LFxuXG5cdGdldEVmZmVjdGl2ZUZPVjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9NYXRoLlJBRDJERUcgKiAyICogTWF0aC5hdGFuKFxuXHRcdFx0TWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tICk7XG5cblx0fSxcblxuXHRnZXRGaWxtV2lkdGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGZpbG0gbm90IGNvbXBsZXRlbHkgY292ZXJlZCBpbiBwb3J0cmFpdCBmb3JtYXQgKGFzcGVjdCA8IDEpXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlICogTWF0aC5taW4oIHRoaXMuYXNwZWN0LCAxICk7XG5cblx0fSxcblxuXHRnZXRGaWxtSGVpZ2h0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBmaWxtIG5vdCBjb21wbGV0ZWx5IGNvdmVyZWQgaW4gbGFuZHNjYXBlIGZvcm1hdCAoYXNwZWN0ID4gMSlcblx0XHRyZXR1cm4gdGhpcy5maWxtR2F1Z2UgLyBNYXRoLm1heCggdGhpcy5hc3BlY3QsIDEgKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXRzIGFuIG9mZnNldCBpbiBhIGxhcmdlciBmcnVzdHVtLiBUaGlzIGlzIHVzZWZ1bCBmb3IgbXVsdGktd2luZG93IG9yXG5cdCAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuXG5cdCAqXG5cdCAqIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSAzeDIgbW9uaXRvcnMgYW5kIGVhY2ggbW9uaXRvciBpcyAxOTIweDEwODAgYW5kXG5cdCAqIHRoZSBtb25pdG9ycyBhcmUgaW4gZ3JpZCBsaWtlIHRoaXNcblx0ICpcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqICAgfCBBIHwgQiB8IEMgfFxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICogICB8IEQgfCBFIHwgRiB8XG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKlxuXHQgKiB0aGVuIGZvciBlYWNoIG1vbml0b3IgeW91IHdvdWxkIGNhbGwgaXQgbGlrZSB0aGlzXG5cdCAqXG5cdCAqICAgdmFyIHcgPSAxOTIwO1xuXHQgKiAgIHZhciBoID0gMTA4MDtcblx0ICogICB2YXIgZnVsbFdpZHRoID0gdyAqIDM7XG5cdCAqICAgdmFyIGZ1bGxIZWlnaHQgPSBoICogMjtcblx0ICpcblx0ICogICAtLUEtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAwLCBoICogMCwgdywgaCApO1xuXHQgKiAgIC0tQi0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDEsIGggKiAwLCB3LCBoICk7XG5cdCAqICAgLS1DLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDAsIHcsIGggKTtcblx0ICogICAtLUQtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAwLCBoICogMSwgdywgaCApO1xuXHQgKiAgIC0tRS0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDEsIGggKiAxLCB3LCBoICk7XG5cdCAqICAgLS1GLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDEsIHcsIGggKTtcblx0ICpcblx0ICogICBOb3RlIHRoZXJlIGlzIG5vIHJlYXNvbiBtb25pdG9ycyBoYXZlIHRvIGJlIHRoZSBzYW1lIHNpemUgb3IgaW4gYSBncmlkLlxuXHQgKi9cblx0c2V0Vmlld09mZnNldDogZnVuY3Rpb24gKCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHR0aGlzLmFzcGVjdCA9IGZ1bGxXaWR0aCAvIGZ1bGxIZWlnaHQ7XG5cblx0XHRpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3ID0ge1xuXHRcdFx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdFx0XHRmdWxsV2lkdGg6IDEsXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXG5cdFx0XHRcdG9mZnNldFg6IDAsXG5cdFx0XHRcdG9mZnNldFk6IDAsXG5cdFx0XHRcdHdpZHRoOiAxLFxuXHRcdFx0XHRoZWlnaHQ6IDFcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDtcblx0XHR0aGlzLnZpZXcuZnVsbEhlaWdodCA9IGZ1bGxIZWlnaHQ7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xuXHRcdHRoaXMudmlldy5vZmZzZXRZID0geTtcblx0XHR0aGlzLnZpZXcud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHRjbGVhclZpZXdPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHR1cGRhdGVQcm9qZWN0aW9uTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbmVhciA9IHRoaXMubmVhcixcblx0XHRcdHRvcCA9IG5lYXIgKiBNYXRoLnRhbiggX01hdGguREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICkgLyB0aGlzLnpvb20sXG5cdFx0XHRoZWlnaHQgPSAyICogdG9wLFxuXHRcdFx0d2lkdGggPSB0aGlzLmFzcGVjdCAqIGhlaWdodCxcblx0XHRcdGxlZnQgPSAtIDAuNSAqIHdpZHRoLFxuXHRcdFx0dmlldyA9IHRoaXMudmlldztcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xuXG5cdFx0XHR2YXIgZnVsbFdpZHRoID0gdmlldy5mdWxsV2lkdGgsXG5cdFx0XHRcdGZ1bGxIZWlnaHQgPSB2aWV3LmZ1bGxIZWlnaHQ7XG5cblx0XHRcdGxlZnQgKz0gdmlldy5vZmZzZXRYICogd2lkdGggLyBmdWxsV2lkdGg7XG5cdFx0XHR0b3AgLT0gdmlldy5vZmZzZXRZICogaGVpZ2h0IC8gZnVsbEhlaWdodDtcblx0XHRcdHdpZHRoICo9IHZpZXcud2lkdGggLyBmdWxsV2lkdGg7XG5cdFx0XHRoZWlnaHQgKj0gdmlldy5oZWlnaHQgLyBmdWxsSGVpZ2h0O1xuXG5cdFx0fVxuXG5cdFx0dmFyIHNrZXcgPSB0aGlzLmZpbG1PZmZzZXQ7XG5cdFx0aWYgKCBza2V3ICE9PSAwICkgbGVmdCArPSBuZWFyICogc2tldyAvIHRoaXMuZ2V0RmlsbVdpZHRoKCk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCBsZWZ0ICsgd2lkdGgsIHRvcCwgdG9wIC0gaGVpZ2h0LCBuZWFyLCB0aGlzLmZhciApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LmZvdiA9IHRoaXMuZm92O1xuXHRcdGRhdGEub2JqZWN0Lnpvb20gPSB0aGlzLnpvb207XG5cblx0XHRkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyO1xuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xuXHRcdGRhdGEub2JqZWN0LmZvY3VzID0gdGhpcy5mb2N1cztcblxuXHRcdGRhdGEub2JqZWN0LmFzcGVjdCA9IHRoaXMuYXNwZWN0O1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApO1xuXG5cdFx0ZGF0YS5vYmplY3QuZmlsbUdhdWdlID0gdGhpcy5maWxtR2F1Z2U7XG5cdFx0ZGF0YS5vYmplY3QuZmlsbU9mZnNldCA9IHRoaXMuZmlsbU9mZnNldDtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIENhbWVyYSBmb3IgcmVuZGVyaW5nIGN1YmUgbWFwc1xuICpcdC0gcmVuZGVycyBzY2VuZSBpbnRvIGF4aXMtYWxpZ25lZCBjdWJlXG4gKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG52YXIgZm92ID0gOTAsIGFzcGVjdCA9IDE7XG5cbmZ1bmN0aW9uIEN1YmVDYW1lcmEoIG5lYXIsIGZhciwgY3ViZVJlc29sdXRpb24sIG9wdGlvbnMgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDdWJlQ2FtZXJhJztcblxuXHR2YXIgY2FtZXJhUFggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhUFgudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0Y2FtZXJhUFgubG9va0F0KCBuZXcgVmVjdG9yMyggMSwgMCwgMCApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFQWCApO1xuXG5cdHZhciBjYW1lcmFOWCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRjYW1lcmFOWC51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRjYW1lcmFOWC5sb29rQXQoIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhTlggKTtcblxuXHR2YXIgY2FtZXJhUFkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhUFkudXAuc2V0KCAwLCAwLCAxICk7XG5cdGNhbWVyYVBZLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhUFkgKTtcblxuXHR2YXIgY2FtZXJhTlkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhTlkudXAuc2V0KCAwLCAwLCAtIDEgKTtcblx0Y2FtZXJhTlkubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgLSAxLCAwICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYU5ZICk7XG5cblx0dmFyIGNhbWVyYVBaID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYVBaLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdGNhbWVyYVBaLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhUFogKTtcblxuXHR2YXIgY2FtZXJhTlogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhTloudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0Y2FtZXJhTloubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgMCwgLSAxICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYU5aICk7XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwgeyBmb3JtYXQ6IFJHQkZvcm1hdCwgbWFnRmlsdGVyOiBMaW5lYXJGaWx0ZXIsIG1pbkZpbHRlcjogTGluZWFyRmlsdGVyIH07XG5cblx0dGhpcy5yZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXRDdWJlKCBjdWJlUmVzb2x1dGlvbiwgY3ViZVJlc29sdXRpb24sIG9wdGlvbnMgKTtcblx0dGhpcy5yZW5kZXJUYXJnZXQudGV4dHVyZS5uYW1lID0gXCJDdWJlQ2FtZXJhXCI7XG5cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBzY2VuZSApIHtcblxuXHRcdGlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHR2YXIgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0O1xuXHRcdHZhciBnZW5lcmF0ZU1pcG1hcHMgPSByZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAwICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFggKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAxICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlggKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAyICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFkgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAzICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlkgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCA0ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFogKTtcblxuXHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGdlbmVyYXRlTWlwbWFwcztcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCA1ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlogKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHtcblxuXHRcdHZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgaSApO1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhciggY29sb3IsIGRlcHRoLCBzdGVuY2lsICk7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHR9O1xuXG59XG5cbkN1YmVDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5DdWJlQ2FtZXJhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVDYW1lcmE7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbVxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJUYXJnZXRDdWJlKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdFdlYkdMUmVuZGVyVGFyZ2V0LmNhbGwoIHRoaXMsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcblxufVxuXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlICk7XG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2ViR0xSZW5kZXJUYXJnZXRDdWJlO1xuXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID0gdHJ1ZTtcblxuV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZS5mcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHRleHR1cmUgKSB7XG5cblx0dGhpcy50ZXh0dXJlLnR5cGUgPSB0ZXh0dXJlLnR5cGU7XG5cdHRoaXMudGV4dHVyZS5mb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcblx0dGhpcy50ZXh0dXJlLmVuY29kaW5nID0gdGV4dHVyZS5lbmNvZGluZztcblxuXHR2YXIgc2NlbmUgPSBuZXcgU2NlbmUoKTtcblxuXHR2YXIgc2hhZGVyID0ge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHRFcXVpcmVjdDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFtcblxuXHRcdFx0XCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1wiLFxuXG5cdFx0XHRcInZlYzMgdHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XCIsXG5cblx0XHRcdFwiXHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcIixcblxuXHRcdFx0XCJ9XCIsXG5cblx0XHRcdFwidm9pZCBtYWluKCkge1wiLFxuXG5cdFx0XHRcIlx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcIixcblxuXHRcdFx0XCJcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XCIsXG5cdFx0XHRcIlx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlwiLFxuXG5cdFx0XHRcIn1cIlxuXG5cdFx0XS5qb2luKCAnXFxuJyApLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFtcblxuXHRcdFx0XCJ1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XCIsXG5cblx0XHRcdFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcIixcblxuXHRcdFx0XCIjZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOFwiLFxuXHRcdFx0XCIjZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTRcIixcblxuXHRcdFx0XCJ2b2lkIG1haW4oKSB7XCIsXG5cblx0XHRcdFwiXHR2ZWMzIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggdldvcmxkRGlyZWN0aW9uICk7XCIsXG5cblx0XHRcdFwiXHR2ZWMyIHNhbXBsZVVWO1wiLFxuXG5cdFx0XHRcIlx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCBkaXJlY3Rpb24ueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1wiLFxuXG5cdFx0XHRcIlx0c2FtcGxlVVYueCA9IGF0YW4oIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XCIsXG5cblx0XHRcdFwiXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcIixcblxuXHRcdFx0XCJ9XCJcblxuXHRcdF0uam9pbiggJ1xcbicgKSxcblx0fTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblxuXHRcdHR5cGU6ICdDdWJlbWFwRnJvbUVxdWlyZWN0JyxcblxuXHRcdHVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBzaGFkZXIudW5pZm9ybXMgKSxcblx0XHR2ZXJ0ZXhTaGFkZXI6IHNoYWRlci52ZXJ0ZXhTaGFkZXIsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlcixcblx0XHRzaWRlOiBCYWNrU2lkZSxcblx0XHRibGVuZGluZzogTm9CbGVuZGluZ1xuXG5cdH0gKTtcblxuXHRtYXRlcmlhbC51bmlmb3Jtcy50RXF1aXJlY3QudmFsdWUgPSB0ZXh0dXJlO1xuXG5cdHZhciBtZXNoID0gbmV3IE1lc2goIG5ldyBCb3hCdWZmZXJHZW9tZXRyeSggNSwgNSwgNSApLCBtYXRlcmlhbCApO1xuXG5cdHNjZW5lLmFkZCggbWVzaCApO1xuXG5cdHZhciBjYW1lcmEgPSBuZXcgQ3ViZUNhbWVyYSggMSwgMTAsIDEgKTtcblxuXHRjYW1lcmEucmVuZGVyVGFyZ2V0ID0gdGhpcztcblx0Y2FtZXJhLnJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSAnQ3ViZUNhbWVyYVRleHR1cmUnO1xuXG5cdGNhbWVyYS51cGRhdGUoIHJlbmRlcmVyLCBzY2VuZSApO1xuXG5cdG1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRtZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApO1xuXG5cdHRoaXMuaW1hZ2UgPSB7IGRhdGE6IGRhdGEsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHR0aGlzLnVucGFja0FsaWdubWVudCA9IDE7XG5cbn1cblxuRGF0YVRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkRhdGFUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERhdGFUZXh0dXJlO1xuXG5EYXRhVGV4dHVyZS5wcm90b3R5cGUuaXNEYXRhVGV4dHVyZSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIFBsYW5lKCBub3JtYWwsIGNvbnN0YW50ICkge1xuXG5cdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHR0aGlzLm5vcm1hbCA9ICggbm9ybWFsICE9PSB1bmRlZmluZWQgKSA/IG5vcm1hbCA6IG5ldyBWZWN0b3IzKCAxLCAwLCAwICk7XG5cdHRoaXMuY29uc3RhbnQgPSAoIGNvbnN0YW50ICE9PSB1bmRlZmluZWQgKSA/IGNvbnN0YW50IDogMDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBQbGFuZS5wcm90b3R5cGUsIHtcblxuXHRpc1BsYW5lOiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCBub3JtYWwsIGNvbnN0YW50ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IGNvbnN0YW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnRzOiBmdW5jdGlvbiAoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5zZXQoIHgsIHksIHogKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQ6IGZ1bmN0aW9uICggbm9ybWFsLCBwb2ludCApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSAtIHBvaW50LmRvdCggdGhpcy5ub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNvcGxhbmFyUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNvcGxhbmFyUG9pbnRzKCBhLCBiLCBjICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsID0gdjEuc3ViVmVjdG9ycyggYywgYiApLmNyb3NzKCB2Mi5zdWJWZWN0b3JzKCBhLCBiICkgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Ly8gUTogc2hvdWxkIGFuIGVycm9yIGJlIHRocm93biBpZiBub3JtYWwgaXMgemVybyAoZS5nLiBkZWdlbmVyYXRlIHBsYW5lKT9cblxuXHRcdFx0dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggbm9ybWFsLCBhICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBwbGFuZS5ub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gcGxhbmUuY29uc3RhbnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gTm90ZTogd2lsbCBsZWFkIHRvIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIHBsYW5lIGlzIGludmFsaWQuXG5cblx0XHR2YXIgaW52ZXJzZU5vcm1hbExlbmd0aCA9IDEuMCAvIHRoaXMubm9ybWFsLmxlbmd0aCgpO1xuXHRcdHRoaXMubm9ybWFsLm11bHRpcGx5U2NhbGFyKCBpbnZlcnNlTm9ybWFsTGVuZ3RoICk7XG5cdFx0dGhpcy5jb25zdGFudCAqPSBpbnZlcnNlTm9ybWFsTGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY29uc3RhbnQgKj0gLSAxO1xuXHRcdHRoaXMubm9ybWFsLm5lZ2F0ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWwuZG90KCBwb2ludCApICsgdGhpcy5jb25zdGFudDtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9TcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBzcGhlcmUuY2VudGVyICkgLSBzcGhlcmUucmFkaXVzO1xuXG5cdH0sXG5cblx0cHJvamVjdFBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLnByb2plY3RQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAtIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBwb2ludCApICkuYWRkKCBwb2ludCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0TGluZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RMaW5lKCBsaW5lLCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5pbnRlcnNlY3RMaW5lKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGlyZWN0aW9uID0gbGluZS5kZWx0YSggdjEgKTtcblxuXHRcdFx0dmFyIGRlbm9taW5hdG9yID0gdGhpcy5ub3JtYWwuZG90KCBkaXJlY3Rpb24gKTtcblxuXHRcdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBsaW5lIGlzIGNvcGxhbmFyLCByZXR1cm4gb3JpZ2luXG5cdFx0XHRcdGlmICggdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBVbnN1cmUgaWYgdGhpcyBpcyB0aGUgY29ycmVjdCBtZXRob2QgdG8gaGFuZGxlIHRoaXMgY2FzZS5cblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdCA9IC0gKCBsaW5lLnN0YXJ0LmRvdCggdGhpcy5ub3JtYWwgKSArIHRoaXMuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0XHRpZiAoIHQgPCAwIHx8IHQgPiAxICkge1xuXG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBkaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggbGluZS5zdGFydCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0c0xpbmU6IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRcdC8vIE5vdGU6IHRoaXMgdGVzdHMgaWYgYSBsaW5lIGludGVyc2VjdHMgdGhlIHBsYW5lLCBub3Qgd2hldGhlciBpdCAob3IgaXRzIGVuZC1wb2ludHMpIGFyZSBjb3BsYW5hciB3aXRoIGl0LlxuXG5cdFx0dmFyIHN0YXJ0U2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICk7XG5cdFx0dmFyIGVuZFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiAoIHN0YXJ0U2lnbiA8IDAgJiYgZW5kU2lnbiA+IDAgKSB8fCAoIGVuZFNpZ24gPCAwICYmIHN0YXJ0U2lnbiA+IDAgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcGxhbmFyUG9pbnQ6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5jb3BsYW5hclBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMubm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIC0gdGhpcy5jb25zdGFudCApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXgzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlNYXRyaXg0KCBtYXRyaXgsIG9wdGlvbmFsTm9ybWFsTWF0cml4ICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsTWF0cml4ID0gb3B0aW9uYWxOb3JtYWxNYXRyaXggfHwgbTEuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0dmFyIHJlZmVyZW5jZVBvaW50ID0gdGhpcy5jb3BsYW5hclBvaW50KCB2MSApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRcdHZhciBub3JtYWwgPSB0aGlzLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHR0aGlzLmNvbnN0YW50ID0gLSByZWZlcmVuY2VQb2ludC5kb3QoIG5vcm1hbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmNvbnN0YW50IC09IG9mZnNldC5kb3QoIHRoaXMubm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdHJldHVybiBwbGFuZS5ub3JtYWwuZXF1YWxzKCB0aGlzLm5vcm1hbCApICYmICggcGxhbmUuY29uc3RhbnQgPT09IHRoaXMuY29uc3RhbnQgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBGcnVzdHVtKCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1ICkge1xuXG5cdHRoaXMucGxhbmVzID0gW1xuXG5cdFx0KCBwMCAhPT0gdW5kZWZpbmVkICkgPyBwMCA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDEgIT09IHVuZGVmaW5lZCApID8gcDEgOiBuZXcgUGxhbmUoKSxcblx0XHQoIHAyICE9PSB1bmRlZmluZWQgKSA/IHAyIDogbmV3IFBsYW5lKCksXG5cdFx0KCBwMyAhPT0gdW5kZWZpbmVkICkgPyBwMyA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDQgIT09IHVuZGVmaW5lZCApID8gcDQgOiBuZXcgUGxhbmUoKSxcblx0XHQoIHA1ICE9PSB1bmRlZmluZWQgKSA/IHA1IDogbmV3IFBsYW5lKClcblxuXHRdO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZydXN0dW0ucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgKSB7XG5cblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRwbGFuZXNbIDAgXS5jb3B5KCBwMCApO1xuXHRcdHBsYW5lc1sgMSBdLmNvcHkoIHAxICk7XG5cdFx0cGxhbmVzWyAyIF0uY29weSggcDIgKTtcblx0XHRwbGFuZXNbIDMgXS5jb3B5KCBwMyApO1xuXHRcdHBsYW5lc1sgNCBdLmNvcHkoIHA0ICk7XG5cdFx0cGxhbmVzWyA1IF0uY29weSggcDUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggZnJ1c3R1bSApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdHBsYW5lc1sgaSBdLmNvcHkoIGZydXN0dW0ucGxhbmVzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cdFx0dmFyIG1lMCA9IG1lWyAwIF0sIG1lMSA9IG1lWyAxIF0sIG1lMiA9IG1lWyAyIF0sIG1lMyA9IG1lWyAzIF07XG5cdFx0dmFyIG1lNCA9IG1lWyA0IF0sIG1lNSA9IG1lWyA1IF0sIG1lNiA9IG1lWyA2IF0sIG1lNyA9IG1lWyA3IF07XG5cdFx0dmFyIG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdO1xuXHRcdHZhciBtZTEyID0gbWVbIDEyIF0sIG1lMTMgPSBtZVsgMTMgXSwgbWUxNCA9IG1lWyAxNCBdLCBtZTE1ID0gbWVbIDE1IF07XG5cblx0XHRwbGFuZXNbIDAgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTAsIG1lNyAtIG1lNCwgbWUxMSAtIG1lOCwgbWUxNSAtIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDEgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTAsIG1lNyArIG1lNCwgbWUxMSArIG1lOCwgbWUxNSArIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDIgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTEsIG1lNyArIG1lNSwgbWUxMSArIG1lOSwgbWUxNSArIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDMgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTEsIG1lNyAtIG1lNSwgbWUxMSAtIG1lOSwgbWUxNSAtIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDQgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTIsIG1lNyAtIG1lNiwgbWUxMSAtIG1lMTAsIG1lMTUgLSBtZTE0ICkubm9ybWFsaXplKCk7XG5cdFx0cGxhbmVzWyA1IF0uc2V0Q29tcG9uZW50cyggbWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwLCBtZTE1ICsgbWUxNCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzT2JqZWN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNPYmplY3QoIG9iamVjdCApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsIClcblx0XHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApXG5cdFx0XHRcdC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdHNTcHJpdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c1Nwcml0ZSggc3ByaXRlICkge1xuXG5cdFx0XHRzcGhlcmUuY2VudGVyLnNldCggMCwgMCwgMCApO1xuXHRcdFx0c3BoZXJlLnJhZGl1cyA9IDAuNzA3MTA2NzgxMTg2NTQ3Njtcblx0XHRcdHNwaGVyZS5hcHBseU1hdHJpeDQoIHNwcml0ZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXHRcdHZhciBjZW50ZXIgPSBzcGhlcmUuY2VudGVyO1xuXHRcdHZhciBuZWdSYWRpdXMgPSAtIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIGNlbnRlciApO1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbmVnUmFkaXVzICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHBsYW5lID0gcGxhbmVzWyBpIF07XG5cblx0XHRcdFx0Ly8gY29ybmVyIGF0IG1heCBkaXN0YW5jZVxuXG5cdFx0XHRcdHAueCA9IHBsYW5lLm5vcm1hbC54ID4gMCA/IGJveC5tYXgueCA6IGJveC5taW4ueDtcblx0XHRcdFx0cC55ID0gcGxhbmUubm9ybWFsLnkgPiAwID8gYm94Lm1heC55IDogYm94Lm1pbi55O1xuXHRcdFx0XHRwLnogPSBwbGFuZS5ub3JtYWwueiA+IDAgPyBib3gubWF4LnogOiBib3gubWluLno7XG5cblx0XHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHAgKSA8IDAgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdGlmICggcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxufSApO1xuXG52YXIgYWxwaGFtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2VXYgKS5nO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGFtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGF0ZXN0X2ZyYWdtZW50ID0gXCIjaWZkZWYgQUxQSEFURVNUXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IEFMUEhBVEVTVCApIGRpc2NhcmQ7XFxuI2VuZGlmXCI7XG5cbnZhciBhb21hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdGZsb2F0IGFtYmllbnRPY2NsdXNpb24gPSAoIHRleHR1cmUyRCggYW9NYXAsIHZVdjIgKS5yIC0gMS4wICkgKiBhb01hcEludGVuc2l0eSArIDEuMDtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHRcXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciAqPSBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGRvdE5WLCBhbWJpZW50T2NjbHVzaW9uLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgYW9tYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCI7XG5cbnZhciBiZWdpbl92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWQgPSB2ZWMzKCBwb3NpdGlvbiApO1wiO1xuXG52YXIgYmVnaW5ub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xcbiNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdHZlYzMgb2JqZWN0VGFuZ2VudCA9IHZlYzMoIHRhbmdlbnQueHl6ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBic2RmcyA9IFwidmVjMiBpbnRlZ3JhdGVTcGVjdWxhckJSREYoIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgdmVjNCBjMCA9IHZlYzQoIC0gMSwgLSAwLjAyNzUsIC0gMC41NzIsIDAuMDIyICk7XFxuXFx0Y29uc3QgdmVjNCBjMSA9IHZlYzQoIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XFxuXFx0dmVjNCByID0gcm91Z2huZXNzICogYzAgKyBjMTtcXG5cXHRmbG9hdCBhMDA0ID0gbWluKCByLnggKiByLngsIGV4cDIoIC0gOS4yOCAqIGRvdE5WICkgKSAqIHIueCArIHIueTtcXG5cXHRyZXR1cm4gdmVjMiggLTEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xcbn1cXG5mbG9hdCBwdW5jdHVhbExpZ2h0SW50ZW5zaXR5VG9JcnJhZGlhbmNlRmFjdG9yKCBjb25zdCBpbiBmbG9hdCBsaWdodERpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBjdXRvZmZEaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgZGVjYXlFeHBvbmVudCApIHtcXG4jaWYgZGVmaW5lZCAoIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMgKVxcblxcdGZsb2F0IGRpc3RhbmNlRmFsbG9mZiA9IDEuMCAvIG1heCggcG93KCBsaWdodERpc3RhbmNlLCBkZWNheUV4cG9uZW50ICksIDAuMDEgKTtcXG5cXHRpZiggY3V0b2ZmRGlzdGFuY2UgPiAwLjAgKSB7XFxuXFx0XFx0ZGlzdGFuY2VGYWxsb2ZmICo9IHBvdzIoIHNhdHVyYXRlKCAxLjAgLSBwb3c0KCBsaWdodERpc3RhbmNlIC8gY3V0b2ZmRGlzdGFuY2UgKSApICk7XFxuXFx0fVxcblxcdHJldHVybiBkaXN0YW5jZUZhbGxvZmY7XFxuI2Vsc2VcXG5cXHRpZiggY3V0b2ZmRGlzdGFuY2UgPiAwLjAgJiYgZGVjYXlFeHBvbmVudCA+IDAuMCApIHtcXG5cXHRcXHRyZXR1cm4gcG93KCBzYXR1cmF0ZSggLWxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSArIDEuMCApLCBkZWNheUV4cG9uZW50ICk7XFxuXFx0fVxcblxcdHJldHVybiAxLjA7XFxuI2VuZGlmXFxufVxcbnZlYzMgQlJERl9EaWZmdXNlX0xhbWJlcnQoIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogZGlmZnVzZUNvbG9yO1xcbn1cXG52ZWMzIEZfU2NobGljayggY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBkb3RMSCApIHtcXG5cXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtNS41NTQ3MyAqIGRvdExIIC0gNi45ODMxNiApICogZG90TEggKTtcXG5cXHRyZXR1cm4gKCAxLjAgLSBzcGVjdWxhckNvbG9yICkgKiBmcmVzbmVsICsgc3BlY3VsYXJDb2xvcjtcXG59XFxudmVjMyBGX1NjaGxpY2tfUm91Z2huZXNzRGVwZW5kZW50KCBjb25zdCBpbiB2ZWMzIEYwLCBjb25zdCBpbiBmbG9hdCBkb3ROViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC01LjU1NDczICogZG90TlYgLSA2Ljk4MzE2ICkgKiBkb3ROViApO1xcblxcdHZlYzMgRnIgPSBtYXgoIHZlYzMoIDEuMCAtIHJvdWdobmVzcyApLCBGMCApIC0gRjA7XFxuXFx0cmV0dXJuIEZyICogZnJlc25lbCArIEYwO1xcbn1cXG5mbG9hdCBHX0dHWF9TbWl0aCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ2wgPSBkb3ROTCArIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xcblxcdGZsb2F0IGd2ID0gZG90TlYgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRyZXR1cm4gMS4wIC8gKCBnbCAqIGd2ICk7XFxufVxcbmZsb2F0IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ3YgPSBkb3ROTCAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TlYgKSApO1xcblxcdGZsb2F0IGdsID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XFxufVxcbmZsb2F0IERfR0dYKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gcG93MiggZGVub20gKTtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX0dHWCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XFxuXFx0ZmxvYXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxudmVjMiBMVENfVXYoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NJWkUgID0gNjQuMDtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcXG5cXHRjb25zdCBmbG9hdCBMVVRfQklBUyAgPSAwLjUgLyBMVVRfU0laRTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIE4sIFYgKSApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKCByb3VnaG5lc3MsIHNxcnQoIDEuMCAtIGRvdE5WICkgKTtcXG5cXHR1diA9IHV2ICogTFVUX1NDQUxFICsgTFVUX0JJQVM7XFxuXFx0cmV0dXJuIHV2O1xcbn1cXG5mbG9hdCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgZiApIHtcXG5cXHRmbG9hdCBsID0gbGVuZ3RoKCBmICk7XFxuXFx0cmV0dXJuIG1heCggKCBsICogbCArIGYueiApIC8gKCBsICsgMS4wICksIDAuMCApO1xcbn1cXG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcXG5cXHRmbG9hdCB4ID0gZG90KCB2MSwgdjIgKTtcXG5cXHRmbG9hdCB5ID0gYWJzKCB4ICk7XFxuXFx0ZmxvYXQgYSA9IDAuODU0Mzk4NSArICggMC40OTY1MTU1ICsgMC4wMTQ1MjA2ICogeSApICogeTtcXG5cXHRmbG9hdCBiID0gMy40MTc1OTQwICsgKCA0LjE2MTY3MjQgKyB5ICkgKiB5O1xcblxcdGZsb2F0IHYgPSBhIC8gYjtcXG5cXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICggeCA+IDAuMCApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCBtYXgoIDEuMCAtIHggKiB4LCAxZS03ICkgKSAtIHY7XFxuXFx0cmV0dXJuIGNyb3NzKCB2MSwgdjIgKSAqIHRoZXRhX3NpbnRoZXRhO1xcbn1cXG52ZWMzIExUQ19FdmFsdWF0ZSggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIHZlYzMgUCwgY29uc3QgaW4gbWF0MyBtSW52LCBjb25zdCBpbiB2ZWMzIHJlY3RDb29yZHNbIDQgXSApIHtcXG5cXHR2ZWMzIHYxID0gcmVjdENvb3Jkc1sgMSBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgdjIgPSByZWN0Q29vcmRzWyAzIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcXG5cXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdHZlYzMgVDEsIFQyO1xcblxcdFQxID0gbm9ybWFsaXplKCBWIC0gTiAqIGRvdCggViwgTiApICk7XFxuXFx0VDIgPSAtIGNyb3NzKCBOLCBUMSApO1xcblxcdG1hdDMgbWF0ID0gbUludiAqIHRyYW5zcG9zZU1hdDMoIG1hdDMoIFQxLCBUMiwgTiApICk7XFxuXFx0dmVjMyBjb29yZHNbIDQgXTtcXG5cXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMSBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAxIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDIgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMCBdID0gbm9ybWFsaXplKCBjb29yZHNbIDAgXSApO1xcblxcdGNvb3Jkc1sgMSBdID0gbm9ybWFsaXplKCBjb29yZHNbIDEgXSApO1xcblxcdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xcblxcdGNvb3Jkc1sgMyBdID0gbm9ybWFsaXplKCBjb29yZHNbIDMgXSApO1xcblxcdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDAgXSwgY29vcmRzWyAxIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAxIF0sIGNvb3Jkc1sgMiBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDMgXSwgY29vcmRzWyAwIF0gKTtcXG5cXHRmbG9hdCByZXN1bHQgPSBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIHZlY3RvckZvcm1GYWN0b3IgKTtcXG5cXHRyZXR1cm4gdmVjMyggcmVzdWx0ICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHR2ZWMyIGJyZGYgPSBpbnRlZ3JhdGVTcGVjdWxhckJSREYoIGRvdE5WLCByb3VnaG5lc3MgKTtcXG5cXHRyZXR1cm4gc3BlY3VsYXJDb2xvciAqIGJyZGYueCArIGJyZGYueTtcXG59XFxudm9pZCBCUkRGX1NwZWN1bGFyX011bHRpc2NhdHRlcmluZ19FbnZpcm9ubWVudCggY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGlub3V0IHZlYzMgc2luZ2xlU2NhdHRlciwgaW5vdXQgdmVjMyBtdWx0aVNjYXR0ZXIgKSB7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGlja19Sb3VnaG5lc3NEZXBlbmRlbnQoIHNwZWN1bGFyQ29sb3IsIGRvdE5WLCByb3VnaG5lc3MgKTtcXG5cXHR2ZWMyIGJyZGYgPSBpbnRlZ3JhdGVTcGVjdWxhckJSREYoIGRvdE5WLCByb3VnaG5lc3MgKTtcXG5cXHR2ZWMzIEZzc0VzcyA9IEYgKiBicmRmLnggKyBicmRmLnk7XFxuXFx0ZmxvYXQgRXNzID0gYnJkZi54ICsgYnJkZi55O1xcblxcdGZsb2F0IEVtcyA9IDEuMCAtIEVzcztcXG5cXHR2ZWMzIEZhdmcgPSBzcGVjdWxhckNvbG9yICsgKCAxLjAgLSBzcGVjdWxhckNvbG9yICkgKiAwLjA0NzYxOTtcXHR2ZWMzIEZtcyA9IEZzc0VzcyAqIEZhdmcgLyAoIDEuMCAtIEVtcyAqIEZhdmcgKTtcXG5cXHRzaW5nbGVTY2F0dGVyICs9IEZzc0VzcztcXG5cXHRtdWx0aVNjYXR0ZXIgKz0gRm1zICogRW1zO1xcbn1cXG5mbG9hdCBHX0JsaW5uUGhvbmdfSW1wbGljaXQoICkge1xcblxcdHJldHVybiAwLjI1O1xcbn1cXG5mbG9hdCBEX0JsaW5uUGhvbmcoIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcywgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiAoIHNoaW5pbmVzcyAqIDAuNSArIDEuMCApICogcG93KCBkb3ROSCwgc2hpbmluZXNzICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9CbGlublBob25nKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGluY2lkZW50TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzICkge1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19CbGlublBob25nX0ltcGxpY2l0KCApO1xcblxcdGZsb2F0IEQgPSBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzcywgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxuZmxvYXQgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KCBjb25zdCBpbiBmbG9hdCBnZ3hSb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuICggMi4wIC8gcG93MiggZ2d4Um91Z2huZXNzICsgMC4wMDAxICkgLSAyLjAgKTtcXG59XFxuZmxvYXQgQmxpbm5FeHBvbmVudFRvR0dYUm91Z2huZXNzKCBjb25zdCBpbiBmbG9hdCBibGlubkV4cG9uZW50ICkge1xcblxcdHJldHVybiBzcXJ0KCAyLjAgLyAoIGJsaW5uRXhwb25lbnQgKyAyLjAgKSApO1xcbn1cIjtcblxudmFyIGJ1bXBtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9CVU1QTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYnVtcE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGJ1bXBTY2FsZTtcXG5cXHR2ZWMyIGRIZHh5X2Z3ZCgpIHtcXG5cXHRcXHR2ZWMyIGRTVGR4ID0gZEZkeCggdlV2ICk7XFxuXFx0XFx0dmVjMiBkU1RkeSA9IGRGZHkoIHZVdiApO1xcblxcdFxcdGZsb2F0IEhsbCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICkueDtcXG5cXHRcXHRmbG9hdCBkQnggPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiArIGRTVGR4ICkueCAtIEhsbDtcXG5cXHRcXHRmbG9hdCBkQnkgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiArIGRTVGR5ICkueCAtIEhsbDtcXG5cXHRcXHRyZXR1cm4gdmVjMiggZEJ4LCBkQnkgKTtcXG5cXHR9XFxuXFx0dmVjMyBwZXJ0dXJiTm9ybWFsQXJiKCB2ZWMzIHN1cmZfcG9zLCB2ZWMzIHN1cmZfbm9ybSwgdmVjMiBkSGR4eSApIHtcXG5cXHRcXHR2ZWMzIHZTaWdtYVggPSB2ZWMzKCBkRmR4KCBzdXJmX3Bvcy54ICksIGRGZHgoIHN1cmZfcG9zLnkgKSwgZEZkeCggc3VyZl9wb3MueiApICk7XFxuXFx0XFx0dmVjMyB2U2lnbWFZID0gdmVjMyggZEZkeSggc3VyZl9wb3MueCApLCBkRmR5KCBzdXJmX3Bvcy55ICksIGRGZHkoIHN1cmZfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgdk4gPSBzdXJmX25vcm07XFxuXFx0XFx0dmVjMyBSMSA9IGNyb3NzKCB2U2lnbWFZLCB2TiApO1xcblxcdFxcdHZlYzMgUjIgPSBjcm9zcyggdk4sIHZTaWdtYVggKTtcXG5cXHRcXHRmbG9hdCBmRGV0ID0gZG90KCB2U2lnbWFYLCBSMSApO1xcblxcdFxcdGZEZXQgKj0gKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdFxcdHZlYzMgdkdyYWQgPSBzaWduKCBmRGV0ICkgKiAoIGRIZHh5LnggKiBSMSArIGRIZHh5LnkgKiBSMiApO1xcblxcdFxcdHJldHVybiBub3JtYWxpemUoIGFicyggZkRldCApICogc3VyZl9ub3JtIC0gdkdyYWQgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQgPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZlYzQgcGxhbmU7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0aWYgKCBkb3QoIHZWaWV3UG9zaXRpb24sIHBsYW5lLnh5eiApID4gcGxhbmUudyApIGRpc2NhcmQ7XFxuXFx0fVxcblxcdCNpZiBVTklPTl9DTElQUElOR19QTEFORVMgPCBOVU1fQ0xJUFBJTkdfUExBTkVTXFxuXFx0XFx0Ym9vbCBjbGlwcGVkID0gdHJ1ZTtcXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0XFx0Zm9yICggaW50IGkgPSBVTklPTl9DTElQUElOR19QTEFORVM7IGkgPCBOVU1fQ0xJUFBJTkdfUExBTkVTOyBpICsrICkge1xcblxcdFxcdFxcdHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcXG5cXHRcXHRcXHRjbGlwcGVkID0gKCBkb3QoIHZWaWV3UG9zaXRpb24sIHBsYW5lLnh5eiApID4gcGxhbmUudyApICYmIGNsaXBwZWQ7XFxuXFx0XFx0fVxcblxcdFxcdGlmICggY2xpcHBlZCApIGRpc2NhcmQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0I2lmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAhIGRlZmluZWQoIFBIT05HICkgJiYgISBkZWZpbmVkKCBNQVRDQVAgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gdmVjNCBjbGlwcGluZ1BsYW5lc1sgTlVNX0NMSVBQSU5HX1BMQU5FUyBdO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4ID0gXCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDAgJiYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICEgZGVmaW5lZCggUEhPTkcgKSAmJiAhIGRlZmluZWQoIE1BVENBUCApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfdmVydGV4ID0gXCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDAgJiYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICEgZGVmaW5lZCggUEhPTkcgKSAmJiAhIGRlZmluZWQoIE1BVENBUCApXFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2Q29sb3IueHl6ID0gY29sb3IueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgY29tbW9uID0gXCIjZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTlcXG4jZGVmaW5lIFBJMiA2LjI4MzE4NTMwNzE4XFxuI2RlZmluZSBQSV9IQUxGIDEuNTcwNzk2MzI2Nzk0OVxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NjE4XFxuI2RlZmluZSBSRUNJUFJPQ0FMX1BJMiAwLjE1OTE1NDk0XFxuI2RlZmluZSBMT0cyIDEuNDQyNjk1XFxuI2RlZmluZSBFUFNJTE9OIDFlLTZcXG4jZGVmaW5lIHNhdHVyYXRlKGEpIGNsYW1wKCBhLCAwLjAsIDEuMCApXFxuI2RlZmluZSB3aGl0ZUNvbXBsaW1lbnQoYSkgKCAxLjAgLSBzYXR1cmF0ZSggYSApIClcXG5mbG9hdCBwb3cyKCBjb25zdCBpbiBmbG9hdCB4ICkgeyByZXR1cm4geCp4OyB9XFxuZmxvYXQgcG93MyggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeCp4OyB9XFxuZmxvYXQgcG93NCggY29uc3QgaW4gZmxvYXQgeCApIHsgZmxvYXQgeDIgPSB4Kng7IHJldHVybiB4Mip4MjsgfVxcbmZsb2F0IGF2ZXJhZ2UoIGNvbnN0IGluIHZlYzMgY29sb3IgKSB7IHJldHVybiBkb3QoIGNvbG9yLCB2ZWMzKCAwLjMzMzMgKSApOyB9XFxuaGlnaHAgZmxvYXQgcmFuZCggY29uc3QgaW4gdmVjMiB1diApIHtcXG5cXHRjb25zdCBoaWdocCBmbG9hdCBhID0gMTIuOTg5OCwgYiA9IDc4LjIzMywgYyA9IDQzNzU4LjU0NTM7XFxuXFx0aGlnaHAgZmxvYXQgZHQgPSBkb3QoIHV2Lnh5LCB2ZWMyKCBhLGIgKSApLCBzbiA9IG1vZCggZHQsIFBJICk7XFxuXFx0cmV0dXJuIGZyYWN0KHNpbihzbikgKiBjKTtcXG59XFxuc3RydWN0IEluY2lkZW50TGlnaHQge1xcblxcdHZlYzMgY29sb3I7XFxuXFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0Ym9vbCB2aXNpYmxlO1xcbn07XFxuc3RydWN0IFJlZmxlY3RlZExpZ2h0IHtcXG5cXHR2ZWMzIGRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyBkaXJlY3RTcGVjdWxhcjtcXG5cXHR2ZWMzIGluZGlyZWN0RGlmZnVzZTtcXG5cXHR2ZWMzIGluZGlyZWN0U3BlY3VsYXI7XFxufTtcXG5zdHJ1Y3QgR2VvbWV0cmljQ29udGV4dCB7XFxuXFx0dmVjMyBwb3NpdGlvbjtcXG5cXHR2ZWMzIG5vcm1hbDtcXG5cXHR2ZWMzIHZpZXdEaXI7XFxufTtcXG52ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNCggZGlyLCAwLjAgKSApLnh5eiApO1xcbn1cXG52ZWMzIGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIHZlYzQoIGRpciwgMC4wICkgKiBtYXRyaXggKS54eXogKTtcXG59XFxudmVjMyBwcm9qZWN0T25QbGFuZShpbiB2ZWMzIHBvaW50LCBpbiB2ZWMzIHBvaW50T25QbGFuZSwgaW4gdmVjMyBwbGFuZU5vcm1hbCApIHtcXG5cXHRmbG9hdCBkaXN0YW5jZSA9IGRvdCggcGxhbmVOb3JtYWwsIHBvaW50IC0gcG9pbnRPblBsYW5lICk7XFxuXFx0cmV0dXJuIC0gZGlzdGFuY2UgKiBwbGFuZU5vcm1hbCArIHBvaW50O1xcbn1cXG5mbG9hdCBzaWRlT2ZQbGFuZSggaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0cmV0dXJuIHNpZ24oIGRvdCggcG9pbnQgLSBwb2ludE9uUGxhbmUsIHBsYW5lTm9ybWFsICkgKTtcXG59XFxudmVjMyBsaW5lUGxhbmVJbnRlcnNlY3QoIGluIHZlYzMgcG9pbnRPbkxpbmUsIGluIHZlYzMgbGluZURpcmVjdGlvbiwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0cmV0dXJuIGxpbmVEaXJlY3Rpb24gKiAoIGRvdCggcGxhbmVOb3JtYWwsIHBvaW50T25QbGFuZSAtIHBvaW50T25MaW5lICkgLyBkb3QoIHBsYW5lTm9ybWFsLCBsaW5lRGlyZWN0aW9uICkgKSArIHBvaW50T25MaW5lO1xcbn1cXG5tYXQzIHRyYW5zcG9zZU1hdDMoIGNvbnN0IGluIG1hdDMgbSApIHtcXG5cXHRtYXQzIHRtcDtcXG5cXHR0bXBbIDAgXSA9IHZlYzMoIG1bIDAgXS54LCBtWyAxIF0ueCwgbVsgMiBdLnggKTtcXG5cXHR0bXBbIDEgXSA9IHZlYzMoIG1bIDAgXS55LCBtWyAxIF0ueSwgbVsgMiBdLnkgKTtcXG5cXHR0bXBbIDIgXSA9IHZlYzMoIG1bIDAgXS56LCBtWyAxIF0ueiwgbVsgMiBdLnogKTtcXG5cXHRyZXR1cm4gdG1wO1xcbn1cXG5mbG9hdCBsaW5lYXJUb1JlbGF0aXZlTHVtaW5hbmNlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkge1xcblxcdHZlYzMgd2VpZ2h0cyA9IHZlYzMoIDAuMjEyNiwgMC43MTUyLCAwLjA3MjIgKTtcXG5cXHRyZXR1cm4gZG90KCB3ZWlnaHRzLCBjb2xvci5yZ2IgKTtcXG59XCI7XG5cbnZhciBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQgPSBcIiNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXFxuI2RlZmluZSBjdWJlVVZfdGV4dHVyZVNpemUgKDEwMjQuMClcXG5pbnQgZ2V0RmFjZUZyb21EaXJlY3Rpb24odmVjMyBkaXJlY3Rpb24pIHtcXG5cXHR2ZWMzIGFic0RpcmVjdGlvbiA9IGFicyhkaXJlY3Rpb24pO1xcblxcdGludCBmYWNlID0gLTE7XFxuXFx0aWYoIGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnogKSB7XFxuXFx0XFx0aWYoYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi54ID4gMC4wID8gMCA6IDM7XFxuXFx0XFx0ZWxzZVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEgOiA0O1xcblxcdH1cXG5cXHRlbHNlIHtcXG5cXHRcXHRpZihhYnNEaXJlY3Rpb24ueiA+IGFic0RpcmVjdGlvbi55IClcXG5cXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnogPiAwLjAgPyAyIDogNTtcXG5cXHRcXHRlbHNlXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMSA6IDQ7XFxuXFx0fVxcblxcdHJldHVybiBmYWNlO1xcbn1cXG4jZGVmaW5lIGN1YmVVVl9tYXhMb2RzMSAgKGxvZzIoY3ViZVVWX3RleHR1cmVTaXplKjAuMjUpIC0gMS4wKVxcbiNkZWZpbmUgY3ViZVVWX3JhbmdlQ2xhbXAgKGV4cDIoKDYuMCAtIDEuMCkgKiAyLjApKVxcbnZlYzIgTWlwTGV2ZWxJbmZvKCB2ZWMzIHZlYywgZmxvYXQgcm91Z2huZXNzTGV2ZWwsIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBzY2FsZSA9IGV4cDIoY3ViZVVWX21heExvZHMxIC0gcm91Z2huZXNzTGV2ZWwpO1xcblxcdGZsb2F0IGR4Um91Z2huZXNzID0gZEZkeChyb3VnaG5lc3MpO1xcblxcdGZsb2F0IGR5Um91Z2huZXNzID0gZEZkeShyb3VnaG5lc3MpO1xcblxcdHZlYzMgZHggPSBkRmR4KCB2ZWMgKiBzY2FsZSAqIGR4Um91Z2huZXNzICk7XFxuXFx0dmVjMyBkeSA9IGRGZHkoIHZlYyAqIHNjYWxlICogZHlSb3VnaG5lc3MgKTtcXG5cXHRmbG9hdCBkID0gbWF4KCBkb3QoIGR4LCBkeCApLCBkb3QoIGR5LCBkeSApICk7XFxuXFx0ZCA9IGNsYW1wKGQsIDEuMCwgY3ViZVVWX3JhbmdlQ2xhbXApO1xcblxcdGZsb2F0IG1pcExldmVsID0gMC41ICogbG9nMihkKTtcXG5cXHRyZXR1cm4gdmVjMihmbG9vcihtaXBMZXZlbCksIGZyYWN0KG1pcExldmVsKSk7XFxufVxcbiNkZWZpbmUgY3ViZVVWX21heExvZHMyIChsb2cyKGN1YmVVVl90ZXh0dXJlU2l6ZSowLjI1KSAtIDIuMClcXG4jZGVmaW5lIGN1YmVVVl9yY3BUZXh0dXJlU2l6ZSAoMS4wIC8gY3ViZVVWX3RleHR1cmVTaXplKVxcbnZlYzIgZ2V0Q3ViZVVWKHZlYzMgZGlyZWN0aW9uLCBmbG9hdCByb3VnaG5lc3NMZXZlbCwgZmxvYXQgbWlwTGV2ZWwpIHtcXG5cXHRtaXBMZXZlbCA9IHJvdWdobmVzc0xldmVsID4gY3ViZVVWX21heExvZHMyIC0gMy4wID8gMC4wIDogbWlwTGV2ZWw7XFxuXFx0ZmxvYXQgYSA9IDE2LjAgKiBjdWJlVVZfcmNwVGV4dHVyZVNpemU7XFxuXFx0dmVjMiBleHAyX3BhY2tlZCA9IGV4cDIoIHZlYzIoIHJvdWdobmVzc0xldmVsLCBtaXBMZXZlbCApICk7XFxuXFx0dmVjMiByY3BfZXhwMl9wYWNrZWQgPSB2ZWMyKCAxLjAgKSAvIGV4cDJfcGFja2VkO1xcblxcdGZsb2F0IHBvd1NjYWxlID0gZXhwMl9wYWNrZWQueCAqIGV4cDJfcGFja2VkLnk7XFxuXFx0ZmxvYXQgc2NhbGUgPSByY3BfZXhwMl9wYWNrZWQueCAqIHJjcF9leHAyX3BhY2tlZC55ICogMC4yNTtcXG5cXHRmbG9hdCBtaXBPZmZzZXQgPSAwLjc1KigxLjAgLSByY3BfZXhwMl9wYWNrZWQueSkgKiByY3BfZXhwMl9wYWNrZWQueDtcXG5cXHRib29sIGJSZXMgPSBtaXBMZXZlbCA9PSAwLjA7XFxuXFx0c2NhbGUgPSAgYlJlcyAmJiAoc2NhbGUgPCBhKSA/IGEgOiBzY2FsZTtcXG5cXHR2ZWMzIHI7XFxuXFx0dmVjMiBvZmZzZXQ7XFxuXFx0aW50IGZhY2UgPSBnZXRGYWNlRnJvbURpcmVjdGlvbihkaXJlY3Rpb24pO1xcblxcdGZsb2F0IHJjcFBvd1NjYWxlID0gMS4wIC8gcG93U2NhbGU7XFxuXFx0aWYoIGZhY2UgPT0gMCkge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi54LCAtZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDAuMCttaXBPZmZzZXQsMC43NSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gYSA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDEpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueSwgZGlyZWN0aW9uLngsIGRpcmVjdGlvbi56KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKHNjYWxlK21pcE9mZnNldCwgMC43NSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gYSA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDIpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDIuMCpzY2FsZSttaXBPZmZzZXQsIDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAzKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLngsIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigwLjArbWlwT2Zmc2V0LDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2UgaWYoIGZhY2UgPT0gNCkge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi55LCBkaXJlY3Rpb24ueCwgLWRpcmVjdGlvbi56KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKHNjYWxlK21pcE9mZnNldCwgMC41ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyAwLjAgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnosIC1kaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkpO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoMi4wKnNjYWxlK21pcE9mZnNldCwgMC41ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyAwLjAgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ciA9IG5vcm1hbGl6ZShyKTtcXG5cXHRmbG9hdCB0ZXhlbE9mZnNldCA9IDAuNSAqIGN1YmVVVl9yY3BUZXh0dXJlU2l6ZTtcXG5cXHR2ZWMyIHMgPSAoIHIueXogLyBhYnMoIHIueCApICsgdmVjMiggMS4wICkgKSAqIDAuNTtcXG5cXHR2ZWMyIGJhc2UgPSBvZmZzZXQgKyB2ZWMyKCB0ZXhlbE9mZnNldCApO1xcblxcdHJldHVybiBiYXNlICsgcyAqICggc2NhbGUgLSAyLjAgKiB0ZXhlbE9mZnNldCApO1xcbn1cXG4jZGVmaW5lIGN1YmVVVl9tYXhMb2RzMyAobG9nMihjdWJlVVZfdGV4dHVyZVNpemUqMC4yNSkgLSAzLjApXFxudmVjNCB0ZXh0dXJlQ3ViZVVWKCBzYW1wbGVyMkQgZW52TWFwLCB2ZWMzIHJlZmxlY3RlZERpcmVjdGlvbiwgZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IHJvdWdobmVzc1ZhbCA9IHJvdWdobmVzcyogY3ViZVVWX21heExvZHMzO1xcblxcdGZsb2F0IHIxID0gZmxvb3Iocm91Z2huZXNzVmFsKTtcXG5cXHRmbG9hdCByMiA9IHIxICsgMS4wO1xcblxcdGZsb2F0IHQgPSBmcmFjdChyb3VnaG5lc3NWYWwpO1xcblxcdHZlYzIgbWlwSW5mbyA9IE1pcExldmVsSW5mbyhyZWZsZWN0ZWREaXJlY3Rpb24sIHIxLCByb3VnaG5lc3MpO1xcblxcdGZsb2F0IHMgPSBtaXBJbmZvLnk7XFxuXFx0ZmxvYXQgbGV2ZWwwID0gbWlwSW5mby54O1xcblxcdGZsb2F0IGxldmVsMSA9IGxldmVsMCArIDEuMDtcXG5cXHRsZXZlbDEgPSBsZXZlbDEgPiA1LjAgPyA1LjAgOiBsZXZlbDE7XFxuXFx0bGV2ZWwwICs9IG1pbiggZmxvb3IoIHMgKyAwLjUgKSwgNS4wICk7XFxuXFx0dmVjMiB1dl8xMCA9IGdldEN1YmVVVihyZWZsZWN0ZWREaXJlY3Rpb24sIHIxLCBsZXZlbDApO1xcblxcdHZlYzQgY29sb3IxMCA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXZfMTApKTtcXG5cXHR2ZWMyIHV2XzIwID0gZ2V0Q3ViZVVWKHJlZmxlY3RlZERpcmVjdGlvbiwgcjIsIGxldmVsMCk7XFxuXFx0dmVjNCBjb2xvcjIwID0gZW52TWFwVGV4ZWxUb0xpbmVhcih0ZXh0dXJlMkQoZW52TWFwLCB1dl8yMCkpO1xcblxcdHZlYzQgcmVzdWx0ID0gbWl4KGNvbG9yMTAsIGNvbG9yMjAsIHQpO1xcblxcdHJldHVybiB2ZWM0KHJlc3VsdC5yZ2IsIDEuMCk7XFxufVxcbiNlbmRpZlwiO1xuXG52YXIgZGVmYXVsdG5vcm1hbF92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxNYXRyaXggKiBvYmplY3ROb3JtYWw7XFxuI2lmZGVmIEZMSVBfU0lERURcXG5cXHR0cmFuc2Zvcm1lZE5vcm1hbCA9IC0gdHJhbnNmb3JtZWROb3JtYWw7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0dmVjMyB0cmFuc2Zvcm1lZFRhbmdlbnQgPSBub3JtYWxNYXRyaXggKiBvYmplY3RUYW5nZW50O1xcblxcdCNpZmRlZiBGTElQX1NJREVEXFxuXFx0XFx0dHJhbnNmb3JtZWRUYW5nZW50ID0gLSB0cmFuc2Zvcm1lZFRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlzcGxhY2VtZW50TWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50U2NhbGU7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRCaWFzO1xcbiNlbmRpZlwiO1xuXG52YXIgZGlzcGxhY2VtZW50bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHR0cmFuc2Zvcm1lZCArPSBub3JtYWxpemUoIG9iamVjdE5vcm1hbCApICogKCB0ZXh0dXJlMkQoIGRpc3BsYWNlbWVudE1hcCwgdXYgKS54ICogZGlzcGxhY2VtZW50U2NhbGUgKyBkaXNwbGFjZW1lbnRCaWFzICk7XFxuI2VuZGlmXCI7XG5cbnZhciBlbWlzc2l2ZW1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcblxcdHZlYzQgZW1pc3NpdmVDb2xvciA9IHRleHR1cmUyRCggZW1pc3NpdmVNYXAsIHZVdiApO1xcblxcdGVtaXNzaXZlQ29sb3IucmdiID0gZW1pc3NpdmVNYXBUZXhlbFRvTGluZWFyKCBlbWlzc2l2ZUNvbG9yICkucmdiO1xcblxcdHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSBlbWlzc2l2ZUNvbG9yLnJnYjtcXG4jZW5kaWZcIjtcblxudmFyIGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBlbWlzc2l2ZU1hcDtcXG4jZW5kaWZcIjtcblxudmFyIGVuY29kaW5nc19mcmFnbWVudCA9IFwiZ2xfRnJhZ0NvbG9yID0gbGluZWFyVG9PdXRwdXRUZXhlbCggZ2xfRnJhZ0NvbG9yICk7XCI7XG5cbnZhciBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCA9IFwiXFxudmVjNCBMaW5lYXJUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmFsdWU7XFxufVxcbnZlYzQgR2FtbWFUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCBnYW1tYUZhY3RvciApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBMaW5lYXJUb0dhbW1hKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBnYW1tYUZhY3RvciApIHtcXG5cXHRyZXR1cm4gdmVjNCggcG93KCB2YWx1ZS5yZ2IsIHZlYzMoIDEuMCAvIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUuYSApO1xcbn1cXG52ZWM0IHNSR0JUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCB2YWx1ZS5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wNDA0NSApICkgKSApLCB2YWx1ZS5hICk7XFxufVxcbnZlYzQgTGluZWFyVG9zUkdCKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMyggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBSR0JFVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqIGV4cDIoIHZhbHVlLmEgKiAyNTUuMCAtIDEyOC4wICksIDEuMCApO1xcbn1cXG52ZWM0IExpbmVhclRvUkdCRSggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRmbG9hdCBtYXhDb21wb25lbnQgPSBtYXgoIG1heCggdmFsdWUuciwgdmFsdWUuZyApLCB2YWx1ZS5iICk7XFxuXFx0ZmxvYXQgZkV4cCA9IGNsYW1wKCBjZWlsKCBsb2cyKCBtYXhDb21wb25lbnQgKSApLCAtMTI4LjAsIDEyNy4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAvIGV4cDIoIGZFeHAgKSwgKCBmRXhwICsgMTI4LjAgKSAvIDI1NS4wICk7XFxufVxcbnZlYzQgUkdCTVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogdmFsdWUuYSAqIG1heFJhbmdlLCAxLjAgKTtcXG59XFxudmVjNCBMaW5lYXJUb1JHQk0oIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xcblxcdGZsb2F0IG1heFJHQiA9IG1heCggdmFsdWUuciwgbWF4KCB2YWx1ZS5nLCB2YWx1ZS5iICkgKTtcXG5cXHRmbG9hdCBNID0gY2xhbXAoIG1heFJHQiAvIG1heFJhbmdlLCAwLjAsIDEuMCApO1xcblxcdE0gPSBjZWlsKCBNICogMjU1LjAgKSAvIDI1NS4wO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgLyAoIE0gKiBtYXhSYW5nZSApLCBNICk7XFxufVxcbnZlYzQgUkdCRFRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogKCAoIG1heFJhbmdlIC8gMjU1LjAgKSAvIHZhbHVlLmEgKSwgMS4wICk7XFxufVxcbnZlYzQgTGluZWFyVG9SR0JEKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRmbG9hdCBtYXhSR0IgPSBtYXgoIHZhbHVlLnIsIG1heCggdmFsdWUuZywgdmFsdWUuYiApICk7XFxuXFx0ZmxvYXQgRCA9IG1heCggbWF4UmFuZ2UgLyBtYXhSR0IsIDEuMCApO1xcblxcdEQgPSBtaW4oIGZsb29yKCBEICkgLyAyNTUuMCwgMS4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqICggRCAqICggMjU1LjAgLyBtYXhSYW5nZSApICksIEQgKTtcXG59XFxuY29uc3QgbWF0MyBjTG9nTHV2TSA9IG1hdDMoIDAuMjIwOSwgMC4zMzkwLCAwLjQxODQsIDAuMTEzOCwgMC42NzgwLCAwLjczMTksIDAuMDEwMiwgMC4xMTMwLCAwLjI5NjkgKTtcXG52ZWM0IExpbmVhclRvTG9nTHV2KCBpbiB2ZWM0IHZhbHVlICkgIHtcXG5cXHR2ZWMzIFhwX1lfWFlacCA9IGNMb2dMdXZNICogdmFsdWUucmdiO1xcblxcdFhwX1lfWFlacCA9IG1heCggWHBfWV9YWVpwLCB2ZWMzKCAxZS02LCAxZS02LCAxZS02ICkgKTtcXG5cXHR2ZWM0IHZSZXN1bHQ7XFxuXFx0dlJlc3VsdC54eSA9IFhwX1lfWFlacC54eSAvIFhwX1lfWFlacC56O1xcblxcdGZsb2F0IExlID0gMi4wICogbG9nMihYcF9ZX1hZWnAueSkgKyAxMjcuMDtcXG5cXHR2UmVzdWx0LncgPSBmcmFjdCggTGUgKTtcXG5cXHR2UmVzdWx0LnogPSAoIExlIC0gKCBmbG9vciggdlJlc3VsdC53ICogMjU1LjAgKSApIC8gMjU1LjAgKSAvIDI1NS4wO1xcblxcdHJldHVybiB2UmVzdWx0O1xcbn1cXG5jb25zdCBtYXQzIGNMb2dMdXZJbnZlcnNlTSA9IG1hdDMoIDYuMDAxNCwgLTIuNzAwOCwgLTEuNzk5NiwgLTEuMzMyMCwgMy4xMDI5LCAtNS43NzIxLCAwLjMwMDgsIC0xLjA4ODIsIDUuNjI2OCApO1xcbnZlYzQgTG9nTHV2VG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0ZmxvYXQgTGUgPSB2YWx1ZS56ICogMjU1LjAgKyB2YWx1ZS53O1xcblxcdHZlYzMgWHBfWV9YWVpwO1xcblxcdFhwX1lfWFlacC55ID0gZXhwMiggKCBMZSAtIDEyNy4wICkgLyAyLjAgKTtcXG5cXHRYcF9ZX1hZWnAueiA9IFhwX1lfWFlacC55IC8gdmFsdWUueTtcXG5cXHRYcF9ZX1hZWnAueCA9IHZhbHVlLnggKiBYcF9ZX1hZWnAuejtcXG5cXHR2ZWMzIHZSR0IgPSBjTG9nTHV2SW52ZXJzZU0gKiBYcF9ZX1hZWnAucmdiO1xcblxcdHJldHVybiB2ZWM0KCBtYXgoIHZSR0IsIDAuMCApLCAxLjAgKTtcXG59XCI7XG5cbnZhciBlbnZtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyByZWZsZWN0VmVjID0gdlJlZmxlY3Q7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfRVFVSVJFQyApXFxuXFx0XFx0dmVjMiBzYW1wbGVVVjtcXG5cXHRcXHRyZWZsZWN0VmVjID0gbm9ybWFsaXplKCByZWZsZWN0VmVjICk7XFxuXFx0XFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCByZWZsZWN0VmVjLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggcmVmbGVjdFZlYy56LCByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgc2FtcGxlVVYgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxcblxcdFxcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIHJlZmxlY3RWZWMgKTtcXG5cXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwgMC4wLCAxLjAgKSApO1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB2ZWM0KCAwLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHRlbnZDb2xvciA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudkNvbG9yICk7XFxuXFx0I2lmZGVmIEVOVk1BUF9CTEVORElOR19NVUxUSVBMWVxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIG91dGdvaW5nTGlnaHQgKiBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfTUlYIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfQUREIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGVudkNvbG9yLnh5eiAqIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBQSFlTSUNBTCApXFxuXFx0dW5pZm9ybSBmbG9hdCByZWZsZWN0aXZpdHk7XFxuXFx0dW5pZm9ybSBmbG9hdCBlbnZNYXBJbnRlbnNpdHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICggZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSApXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyQ3ViZSBlbnZNYXA7XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBlbnZNYXA7XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSBmbG9hdCBmbGlwRW52TWFwO1xcblxcdHVuaWZvcm0gaW50IG1heE1pcExldmVsO1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApIHx8IGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggd29ybGRQb3NpdGlvbi54eXogLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZSZWZsZWN0ID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGZvZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0Zm9nRGVwdGggPSAtbXZQb3NpdGlvbi56O1xcbiNlbmRpZlwiO1xuXG52YXIgZm9nX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdHZhcnlpbmcgZmxvYXQgZm9nRGVwdGg7XFxuI2VuZGlmXCI7XG5cbnZhciBmb2dfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gd2hpdGVDb21wbGltZW50KCBleHAyKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZm9nRGVwdGggKiBmb2dEZXB0aCAqIExPRzIgKSApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBmb2dEZXB0aCApO1xcblxcdCNlbmRpZlxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBtaXgoIGdsX0ZyYWdDb2xvci5yZ2IsIGZvZ0NvbG9yLCBmb2dGYWN0b3IgKTtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdHVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcXG5cXHR2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBUT09OXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZ3JhZGllbnRNYXA7XFxuXFx0dmVjMyBnZXRHcmFkaWVudElycmFkaWFuY2UoIHZlYzMgbm9ybWFsLCB2ZWMzIGxpZ2h0RGlyZWN0aW9uICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBub3JtYWwsIGxpZ2h0RGlyZWN0aW9uICk7XFxuXFx0XFx0dmVjMiBjb29yZCA9IHZlYzIoIGRvdE5MICogMC41ICsgMC41LCAwLjAgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX0dSQURJRU5UTUFQXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyRCggZ3JhZGllbnRNYXAsIGNvb3JkICkucmdiO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuICggY29vcmQueCA8IDAuNyApID8gdmVjMyggMC43ICkgOiB2ZWMzKCAxLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBQSSAqIHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2xhbWJlcnRfdmVydGV4ID0gXCJ2ZWMzIGRpZmZ1c2UgPSB2ZWMzKCAxLjAgKTtcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gbXZQb3NpdGlvbi54eXo7XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSBub3JtYWxpemUoIC1tdlBvc2l0aW9uLnh5eiApO1xcbkdlb21ldHJpY0NvbnRleHQgYmFja0dlb21ldHJ5O1xcbmJhY2tHZW9tZXRyeS5wb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcbmJhY2tHZW9tZXRyeS5ub3JtYWwgPSAtZ2VvbWV0cnkubm9ybWFsO1xcbmJhY2tHZW9tZXRyeS52aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG52TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xcbnZJbmRpcmVjdEZyb250ID0gdmVjMyggMC4wICk7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZMaWdodEJhY2sgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2SW5kaXJlY3RCYWNrID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG5mbG9hdCBkb3ROTDtcXG52ZWMzIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRQb2ludERpcmVjdExpZ2h0SXJyYWRpYW5jZSggcG9pbnRMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBzcG90TGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdLCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHRkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2UgPSBQSSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdFxcdHZMaWdodEZyb250ICs9IHNhdHVyYXRlKCBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IHNhdHVyYXRlKCAtZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZJbmRpcmVjdEZyb250ICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkluZGlyZWN0QmFjayArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGJhY2tHZW9tZXRyeSApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19wYXJzX2JlZ2luID0gXCJ1bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XFxudW5pZm9ybSB2ZWMzIGxpZ2h0UHJvYmVbIDkgXTtcXG52ZWMzIHNoR2V0SXJyYWRpYW5jZUF0KCBpbiB2ZWMzIG5vcm1hbCwgaW4gdmVjMyBzaENvZWZmaWNpZW50c1sgOSBdICkge1xcblxcdGZsb2F0IHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XFxuXFx0dmVjMyByZXN1bHQgPSBzaENvZWZmaWNpZW50c1sgMCBdICogMC44ODYyMjc7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAxIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHk7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAyIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHo7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAzIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHg7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA0IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB5O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNSBdICogMi4wICogMC40MjkwNDMgKiB5ICogejtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDYgXSAqICggMC43NDMxMjUgKiB6ICogeiAtIDAuMjQ3NzA4ICk7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA3IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB6O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgOCBdICogMC40MjkwNDMgKiAoIHggKiB4IC0geSAqIHkgKTtcXG5cXHRyZXR1cm4gcmVzdWx0O1xcbn1cXG52ZWMzIGdldExpZ2h0UHJvYmVJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGxpZ2h0UHJvYmVbIDkgXSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSApIHtcXG5cXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggZ2VvbWV0cnkubm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gc2hHZXRJcnJhZGlhbmNlQXQoIHdvcmxkTm9ybWFsLCBsaWdodFByb2JlICk7XFxuXFx0cmV0dXJuIGlycmFkaWFuY2U7XFxufVxcbnZlYzMgZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBhbWJpZW50TGlnaHRDb2xvciApIHtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBhbWJpZW50TGlnaHRDb2xvcjtcXG5cXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRpcnJhZGlhbmNlICo9IFBJO1xcblxcdCNlbmRpZlxcblxcdHJldHVybiBpcnJhZGlhbmNlO1xcbn1cXG4jaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IERpcmVjdGlvbmFsTGlnaHQge1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0aW50IHNoYWRvdztcXG5cXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodHNbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0dm9pZCBnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBvdXQgSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCApIHtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IGRpcmVjdGlvbmFsTGlnaHQuY29sb3I7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuZGlyZWN0aW9uID0gZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb247XFxuXFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IHRydWU7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdHN0cnVjdCBQb2ludExpZ2h0IHtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2U7XFxuXFx0XFx0ZmxvYXQgZGVjYXk7XFxuXFx0XFx0aW50IHNoYWRvdztcXG5cXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0ZmxvYXQgc2hhZG93Q2FtZXJhTmVhcjtcXG5cXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFGYXI7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIFBvaW50TGlnaHQgcG9pbnRMaWdodHNbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldFBvaW50RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBQb2ludExpZ2h0IHBvaW50TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IHBvaW50TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgPSBwb2ludExpZ2h0LmNvbG9yO1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IHB1bmN0dWFsTGlnaHRJbnRlbnNpdHlUb0lycmFkaWFuY2VGYWN0b3IoIGxpZ2h0RGlzdGFuY2UsIHBvaW50TGlnaHQuZGlzdGFuY2UsIHBvaW50TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gKCBkaXJlY3RMaWdodC5jb2xvciAhPSB2ZWMzKCAwLjAgKSApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdHN0cnVjdCBTcG90TGlnaHQge1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZTtcXG5cXHRcXHRmbG9hdCBkZWNheTtcXG5cXHRcXHRmbG9hdCBjb25lQ29zO1xcblxcdFxcdGZsb2F0IHBlbnVtYnJhQ29zO1xcblxcdFxcdGludCBzaGFkb3c7XFxuXFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdH07XFxuXFx0dW5pZm9ybSBTcG90TGlnaHQgc3BvdExpZ2h0c1sgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0dm9pZCBnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBTcG90TGlnaHQgc3BvdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBvdXQgSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCAgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gc3BvdExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0ZGlyZWN0TGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGFuZ2xlQ29zID0gZG90KCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIHNwb3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRpZiAoIGFuZ2xlQ29zID4gc3BvdExpZ2h0LmNvbmVDb3MgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc3BvdEVmZmVjdCA9IHNtb290aHN0ZXAoIHNwb3RMaWdodC5jb25lQ29zLCBzcG90TGlnaHQucGVudW1icmFDb3MsIGFuZ2xlQ29zICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgPSBzcG90TGlnaHQuY29sb3I7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gc3BvdEVmZmVjdCAqIHB1bmN0dWFsTGlnaHRJbnRlbnNpdHlUb0lycmFkaWFuY2VGYWN0b3IoIGxpZ2h0RGlzdGFuY2UsIHNwb3RMaWdodC5kaXN0YW5jZSwgc3BvdExpZ2h0LmRlY2F5ICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IHRydWU7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHZlYzMoIDAuMCApO1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LnZpc2libGUgPSBmYWxzZTtcXG5cXHRcXHR9XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgUmVjdEFyZWFMaWdodCB7XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgaGFsZldpZHRoO1xcblxcdFxcdHZlYzMgaGFsZkhlaWdodDtcXG5cXHR9O1xcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y18xO1xcdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y18yO1xcblxcdHVuaWZvcm0gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0c1sgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgXTtcXG4jZW5kaWZcXG4jaWYgTlVNX0hFTUlfTElHSFRTID4gMFxcblxcdHN0cnVjdCBIZW1pc3BoZXJlTGlnaHQge1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgc2t5Q29sb3I7XFxuXFx0XFx0dmVjMyBncm91bmRDb2xvcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gSGVtaXNwaGVyZUxpZ2h0IGhlbWlzcGhlcmVMaWdodHNbIE5VTV9IRU1JX0xJR0hUUyBdO1xcblxcdHZlYzMgZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gSGVtaXNwaGVyZUxpZ2h0IGhlbWlMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSApIHtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoZW1pTGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHQgPSAwLjUgKiBkb3ROTCArIDAuNTtcXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBtaXgoIGhlbWlMaWdodC5ncm91bmRDb2xvciwgaGVtaUxpZ2h0LnNreUNvbG9yLCBoZW1pRGlmZnVzZVdlaWdodCApO1xcblxcdFxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmV0dXJuIGlycmFkaWFuY2U7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUEhZU0lDQUwgKVxcblxcdHZlYzMgZ2V0TGlnaHRQcm9iZUluZGlyZWN0SXJyYWRpYW5jZSggY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gaW50IG1heE1JUExldmVsICkge1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBnZW9tZXRyeS5ub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdFxcdHZlYzMgcXVlcnlWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogd29ybGROb3JtYWwueCwgd29ybGROb3JtYWwueXogKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlTG9kRVhUKCBlbnZNYXAsIHF1ZXJ5VmVjLCBmbG9hdCggbWF4TUlQTGV2ZWwgKSApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHF1ZXJ5VmVjLCBmbG9hdCggbWF4TUlQTGV2ZWwgKSApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgcXVlcnlWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogd29ybGROb3JtYWwueCwgd29ybGROb3JtYWwueXogKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBxdWVyeVZlYywgMS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdmVjNCggMC4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmV0dXJuIFBJICogZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdH1cXG5cXHRmbG9hdCBnZXRTcGVjdWxhck1JUExldmVsKCBjb25zdCBpbiBmbG9hdCBibGlublNoaW5pbmVzc0V4cG9uZW50LCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XFxuXFx0XFx0ZmxvYXQgbWF4TUlQTGV2ZWxTY2FsYXIgPSBmbG9hdCggbWF4TUlQTGV2ZWwgKTtcXG5cXHRcXHRmbG9hdCBkZXNpcmVkTUlQTGV2ZWwgPSBtYXhNSVBMZXZlbFNjYWxhciArIDAuNzkyNDggLSAwLjUgKiBsb2cyKCBwb3cyKCBibGlublNoaW5pbmVzc0V4cG9uZW50ICkgKyAxLjAgKTtcXG5cXHRcXHRyZXR1cm4gY2xhbXAoIGRlc2lyZWRNSVBMZXZlbCwgMC4wLCBtYXhNSVBMZXZlbFNjYWxhciApO1xcblxcdH1cXG5cXHR2ZWMzIGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBmbG9hdCBibGlublNoaW5pbmVzc0V4cG9uZW50LCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCAtZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCAtZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZWZsZWN0VmVjID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggcmVmbGVjdFZlYywgdmlld01hdHJpeCApO1xcblxcdFxcdGZsb2F0IHNwZWN1bGFyTUlQTGV2ZWwgPSBnZXRTcGVjdWxhck1JUExldmVsKCBibGlublNoaW5pbmVzc0V4cG9uZW50LCBtYXhNSVBMZXZlbCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0XFx0dmVjMyBxdWVyeVJlZmxlY3RWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogcmVmbGVjdFZlYy54LCByZWZsZWN0VmVjLnl6ICk7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZUxvZEVYVCggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5UmVmbGVjdFZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIEJsaW5uRXhwb25lbnRUb0dHWFJvdWdobmVzcyhibGlublNoaW5pbmVzc0V4cG9uZW50ICkpO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0VRVUlSRUMgKVxcblxcdFxcdFxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0XFx0XFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCByZWZsZWN0VmVjLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRcXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggcmVmbGVjdFZlYy56LCByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJETG9kRVhUKCBlbnZNYXAsIHNhbXBsZVVWLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHNhbXBsZVVWLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfU1BIRVJFIClcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwwLjAsMS4wICkgKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRExvZEVYVCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJldHVybiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX3Bob25nX2ZyYWdtZW50ID0gXCJCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5tYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gc3BlY3VsYXI7XFxubWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgPSBzaGluaW5lc3M7XFxubWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aCA9IHNwZWN1bGFyU3RyZW5ndGg7XCI7XG5cbnZhciBsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCA9IFwidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbnN0cnVjdCBCbGlublBob25nTWF0ZXJpYWwge1xcblxcdHZlYzNcXHRkaWZmdXNlQ29sb3I7XFxuXFx0dmVjM1xcdHNwZWN1bGFyQ29sb3I7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclNoaW5pbmVzcztcXG5cXHRmbG9hdFxcdHNwZWN1bGFyU3RyZW5ndGg7XFxufTtcXG52b2lkIFJFX0RpcmVjdF9CbGlublBob25nKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdCNpZmRlZiBUT09OXFxuXFx0XFx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0R3JhZGllbnRJcnJhZGlhbmNlKCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNlbmRpZlxcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0JsaW5uUGhvbmcoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmcoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfQmxpbm5QaG9uZ1xcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmdcXG4jZGVmaW5lIE1hdGVyaWFsX0xpZ2h0UHJvYmVMT0QoIG1hdGVyaWFsIClcXHQoMClcIjtcblxudmFyIGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCA9IFwiUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcXG5tYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyA9IGNsYW1wKCByb3VnaG5lc3NGYWN0b3IsIDAuMDQsIDEuMCApO1xcbiNpZmRlZiBTVEFOREFSRFxcblxcdG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIHZlYzMoIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuI2Vsc2VcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UICogcG93MiggcmVmbGVjdGl2aXR5ICkgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuXFx0bWF0ZXJpYWwuY2xlYXJDb2F0ID0gc2F0dXJhdGUoIGNsZWFyQ29hdCApO1xcdG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyA9IGNsYW1wKCBjbGVhckNvYXRSb3VnaG5lc3MsIDAuMDQsIDEuMCApO1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcInN0cnVjdCBQaHlzaWNhbE1hdGVyaWFsIHtcXG5cXHR2ZWMzXFx0ZGlmZnVzZUNvbG9yO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJSb3VnaG5lc3M7XFxuXFx0dmVjM1xcdHNwZWN1bGFyQ29sb3I7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdGZsb2F0IGNsZWFyQ29hdDtcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRSb3VnaG5lc3M7XFxuXFx0I2VuZGlmXFxufTtcXG4jZGVmaW5lIE1BWElNVU1fU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgMC4xNlxcbiNkZWZpbmUgREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCAwLjA0XFxuZmxvYXQgY2xlYXJDb2F0REhSQXBwcm94KCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5MICkge1xcblxcdHJldHVybiBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICsgKCAxLjAgLSBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICkgKiAoIHBvdyggMS4wIC0gZG90TkwsIDUuMCApICogcG93KCAxLjAgLSByb3VnaG5lc3MsIDIuMCApICk7XFxufVxcbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcXG5cXHR2b2lkIFJFX0RpcmVjdF9SZWN0QXJlYV9QaHlzaWNhbCggY29uc3QgaW4gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRcXHR2ZWMzIG5vcm1hbCA9IGdlb21ldHJ5Lm5vcm1hbDtcXG5cXHRcXHR2ZWMzIHZpZXdEaXIgPSBnZW9tZXRyeS52aWV3RGlyO1xcblxcdFxcdHZlYzMgcG9zaXRpb24gPSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGxpZ2h0UG9zID0gcmVjdEFyZWFMaWdodC5wb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGhhbGZXaWR0aCA9IHJlY3RBcmVhTGlnaHQuaGFsZldpZHRoO1xcblxcdFxcdHZlYzMgaGFsZkhlaWdodCA9IHJlY3RBcmVhTGlnaHQuaGFsZkhlaWdodDtcXG5cXHRcXHR2ZWMzIGxpZ2h0Q29sb3IgPSByZWN0QXJlYUxpZ2h0LmNvbG9yO1xcblxcdFxcdGZsb2F0IHJvdWdobmVzcyA9IG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzO1xcblxcdFxcdHZlYzMgcmVjdENvb3Jkc1sgNCBdO1xcblxcdFxcdHJlY3RDb29yZHNbIDAgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXHRcXHRyZWN0Q29vcmRzWyAxIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMiBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHJlY3RDb29yZHNbIDMgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoICsgaGFsZkhlaWdodDtcXG5cXHRcXHR2ZWMyIHV2ID0gTFRDX1V2KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xcblxcdFxcdHZlYzQgdDEgPSB0ZXh0dXJlMkQoIGx0Y18xLCB1diApO1xcblxcdFxcdHZlYzQgdDIgPSB0ZXh0dXJlMkQoIGx0Y18yLCB1diApO1xcblxcdFxcdG1hdDMgbUludiA9IG1hdDMoXFxuXFx0XFx0XFx0dmVjMyggdDEueCwgMCwgdDEueSApLFxcblxcdFxcdFxcdHZlYzMoICAgIDAsIDEsICAgIDAgKSxcXG5cXHRcXHRcXHR2ZWMzKCB0MS56LCAwLCB0MS53IClcXG5cXHRcXHQpO1xcblxcdFxcdHZlYzMgZnJlc25lbCA9ICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAqIHQyLnggKyAoIHZlYzMoIDEuMCApIC0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciApICogdDIueSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGxpZ2h0Q29sb3IgKiBmcmVzbmVsICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtSW52LCByZWN0Q29vcmRzICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBsaWdodENvbG9yICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtYXQzKCAxLjAgKSwgcmVjdENvb3JkcyApO1xcblxcdH1cXG4jZW5kaWZcXG52b2lkIFJFX0RpcmVjdF9QaHlzaWNhbCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRpcnJhZGlhbmNlICo9IFBJO1xcblxcdCNlbmRpZlxcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRESFIgPSBtYXRlcmlhbC5jbGVhckNvYXQgKiBjbGVhckNvYXRESFJBcHByb3goIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcywgZG90TkwgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGNsZWFyQ29hdERIUiA9IDAuMDtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSAoIDEuMCAtIGNsZWFyQ29hdERIUiApICogaXJyYWRpYW5jZSAqIEJSREZfU3BlY3VsYXJfR0dYKCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSAoIDEuMCAtIGNsZWFyQ29hdERIUiApICogaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIG1hdGVyaWFsLmNsZWFyQ29hdCAqIEJSREZfU3BlY3VsYXJfR0dYKCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIHZlYzMoIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSwgbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdCNpZm5kZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcblxcdCNlbmRpZlxcbn1cXG52b2lkIFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWwoIGNvbnN0IGluIHZlYzMgcmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBjbGVhckNvYXRSYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQpIHtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90TlY7XFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gbWF0ZXJpYWwuY2xlYXJDb2F0ICogY2xlYXJDb2F0REhSQXBwcm94KCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MsIGRvdE5MICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRESFIgPSAwLjA7XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgY2xlYXJDb2F0SW52ID0gMS4wIC0gY2xlYXJDb2F0REhSO1xcblxcdCNpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHR2ZWMzIHNpbmdsZVNjYXR0ZXJpbmcgPSB2ZWMzKCAwLjAgKTtcXG5cXHRcXHR2ZWMzIG11bHRpU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xcblxcdFxcdHZlYzMgY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlID0gaXJyYWRpYW5jZSAqIFJFQ0lQUk9DQUxfUEk7XFxuXFx0XFx0QlJERl9TcGVjdWxhcl9NdWx0aXNjYXR0ZXJpbmdfRW52aXJvbm1lbnQoIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcywgc2luZ2xlU2NhdHRlcmluZywgbXVsdGlTY2F0dGVyaW5nICk7XFxuXFx0XFx0dmVjMyBkaWZmdXNlID0gbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogKCAxLjAgLSAoIHNpbmdsZVNjYXR0ZXJpbmcgKyBtdWx0aVNjYXR0ZXJpbmcgKSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gY2xlYXJDb2F0SW52ICogcmFkaWFuY2UgKiBzaW5nbGVTY2F0dGVyaW5nO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBtdWx0aVNjYXR0ZXJpbmcgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGRpZmZ1c2UgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IGNsZWFyQ29hdEludiAqIHJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IGNsZWFyQ29hdFJhZGlhbmNlICogbWF0ZXJpYWwuY2xlYXJDb2F0ICogQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGdlb21ldHJ5LCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfRGlyZWN0X1JlY3RBcmVhXFx0XFx0UkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0U3BlY3VsYXJcXHRcXHRSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsXFxuI2RlZmluZSBNYXRlcmlhbF9CbGlublNoaW5pbmVzc0V4cG9uZW50KCBtYXRlcmlhbCApICAgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApXFxuI2RlZmluZSBNYXRlcmlhbF9DbGVhckNvYXRfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSAgIEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzIClcXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBhbWJpZW50T2NjbHVzaW9uLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBwb3coIGRvdE5WICsgYW1iaWVudE9jY2x1c2lvbiwgZXhwMiggLSAxNi4wICogcm91Z2huZXNzIC0gMS4wICkgKSAtIDEuMCArIGFtYmllbnRPY2NsdXNpb24gKTtcXG59XCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfYmVnaW4gPSBcIlxcbkdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnk7XFxuZ2VvbWV0cnkucG9zaXRpb24gPSAtIHZWaWV3UG9zaXRpb247XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5JbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0O1xcbiNpZiAoIE5VTV9QT0lOVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHRQb2ludExpZ2h0IHBvaW50TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cG9pbnRMaWdodCA9IHBvaW50TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIHBvaW50TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggcG9pbnRMaWdodC5zaGFkb3csIGRpcmVjdExpZ2h0LnZpc2libGUgKSApID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmICggTlVNX1NQT1RfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0U3BvdExpZ2h0IHNwb3RMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBzcG90TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggc3BvdExpZ2h0LnNoYWRvdywgZGlyZWN0TGlnaHQudmlzaWJsZSApICkgPyBnZXRTaGFkb3coIHNwb3RTaGFkb3dNYXBbIGkgXSwgc3BvdExpZ2h0LnNoYWRvd01hcFNpemUsIHNwb3RMaWdodC5zaGFkb3dCaWFzLCBzcG90TGlnaHQuc2hhZG93UmFkaXVzLCB2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiAoIE5VTV9ESVJfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggZGlyZWN0aW9uYWxMaWdodCwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdywgZGlyZWN0TGlnaHQudmlzaWJsZSApICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmICggTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0X1JlY3RBcmVhIClcXG5cXHRSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9SRUNUX0FSRUFfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHJlY3RBcmVhTGlnaHQgPSByZWN0QXJlYUxpZ2h0c1sgaSBdO1xcblxcdFxcdFJFX0RpcmVjdF9SZWN0QXJlYSggcmVjdEFyZWFMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdGlycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGdlb21ldHJ5ICk7XFxuXFx0I2lmICggTlVNX0hFTUlfTElHSFRTID4gMCApXFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRcXHRpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdHZlYzMgcmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIGNsZWFyQ29hdFJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfbWFwcyA9IFwiI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0I2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdFxcdHZlYzMgbGlnaHRNYXBJcnJhZGlhbmNlID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApLnh5eiAqIGxpZ2h0TWFwSW50ZW5zaXR5O1xcblxcdFxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdFxcdGxpZ2h0TWFwSXJyYWRpYW5jZSAqPSBQSTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRpcnJhZGlhbmNlICs9IGxpZ2h0TWFwSXJyYWRpYW5jZTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0aXJyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSW5kaXJlY3RJcnJhZGlhbmNlKCBnZW9tZXRyeSwgbWF4TWlwTGV2ZWwgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdHJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBnZW9tZXRyeSwgTWF0ZXJpYWxfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSwgbWF4TWlwTGV2ZWwgKTtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0Y2xlYXJDb2F0UmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGdlb21ldHJ5LCBNYXRlcmlhbF9DbGVhckNvYXRfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSwgbWF4TWlwTGV2ZWwgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9lbmQgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdFJFX0luZGlyZWN0RGlmZnVzZSggaXJyYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHRSRV9JbmRpcmVjdFNwZWN1bGFyKCByYWRpYW5jZSwgaXJyYWRpYW5jZSwgY2xlYXJDb2F0UmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGICkgJiYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGX0VYVCApXFxuXFx0Z2xfRnJhZ0RlcHRoRVhUID0gbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUYgKSAmJiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUZfRVhUIClcXG5cXHR1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XFxuXFx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcdFxcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0dkZyYWdEZXB0aCA9IDEuMCArIGdsX1Bvc2l0aW9uLnc7XFxuXFx0I2Vsc2VcXG5cXHRcXHRnbF9Qb3NpdGlvbi56ID0gbG9nMiggbWF4KCBFUFNJTE9OLCBnbF9Qb3NpdGlvbi53ICsgMS4wICkgKSAqIGxvZ0RlcHRoQnVmRkMgLSAxLjA7XFxuXFx0XFx0Z2xfUG9zaXRpb24ueiAqPSBnbF9Qb3NpdGlvbi53O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHZlYzQgdGV4ZWxDb2xvciA9IHRleHR1cmUyRCggbWFwLCB2VXYgKTtcXG5cXHR0ZXhlbENvbG9yID0gbWFwVGV4ZWxUb0xpbmVhciggdGV4ZWxDb2xvciApO1xcblxcdGRpZmZ1c2VDb2xvciAqPSB0ZXhlbENvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgbWFwX3BhcnRpY2xlX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHZlYzIgdXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggZ2xfUG9pbnRDb29yZC54LCAxLjAgLSBnbF9Qb2ludENvb3JkLnksIDEgKSApLnh5O1xcblxcdHZlYzQgbWFwVGV4ZWwgPSB0ZXh0dXJlMkQoIG1hcCwgdXYgKTtcXG5cXHRkaWZmdXNlQ29sb3IgKj0gbWFwVGV4ZWxUb0xpbmVhciggbWFwVGV4ZWwgKTtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtZXRhbG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IG1ldGFsbmVzc0ZhY3RvciA9IG1ldGFsbmVzcztcXG4jaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHZlYzQgdGV4ZWxNZXRhbG5lc3MgPSB0ZXh0dXJlMkQoIG1ldGFsbmVzc01hcCwgdlV2ICk7XFxuXFx0bWV0YWxuZXNzRmFjdG9yICo9IHRleGVsTWV0YWxuZXNzLmI7XFxuI2VuZGlmXCI7XG5cbnZhciBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtZXRhbG5lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaG5vcm1hbF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwwIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDEgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMiAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwzIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG4jZW5kaWZcIjtcblxudmFyIG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcdCNpZm5kZWYgVVNFX01PUlBITk9STUFMU1xcblxcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA4IF07XFxuXFx0I2Vsc2VcXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGh0YXJnZXRfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQwIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMCBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQxIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQyIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMiBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQzIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMyBdO1xcblxcdCNpZm5kZWYgVVNFX01PUlBITk9STUFMU1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQ0IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQ1IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNSBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQ2IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNiBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQ3IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNyBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gXCIjaWZkZWYgRkxBVF9TSEFERURcXG5cXHR2ZWMzIGZkeCA9IHZlYzMoIGRGZHgoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeCggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIGZkeSA9IHZlYzMoIGRGZHkoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeSggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIGZkeCwgZmR5ICkgKTtcXG4jZWxzZVxcblxcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2ZWMzIHRhbmdlbnQgPSBub3JtYWxpemUoIHZUYW5nZW50ICk7XFxuXFx0XFx0dmVjMyBiaXRhbmdlbnQgPSBub3JtYWxpemUoIHZCaXRhbmdlbnQgKTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dGFuZ2VudCA9IHRhbmdlbnQgKiAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0XFx0XFx0Yml0YW5nZW50ID0gYml0YW5nZW50ICogKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0I2lmZGVmIE9CSkVDVFNQQUNFX05PUk1BTE1BUFxcblxcdFxcdG5vcm1hbCA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0XFx0I2lmZGVmIEZMSVBfU0lERURcXG5cXHRcXHRcXHRub3JtYWwgPSAtIG5vcm1hbDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0bm9ybWFsID0gbm9ybWFsICogKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRcXHRtYXQzIHZUQk4gPSBtYXQzKCB0YW5nZW50LCBiaXRhbmdlbnQsIG5vcm1hbCApO1xcblxcdFxcdFxcdHZlYzMgbWFwTiA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0XFx0XFx0bWFwTi54eSA9IG5vcm1hbFNjYWxlICogbWFwTi54eTtcXG5cXHRcXHRcXHRub3JtYWwgPSBub3JtYWxpemUoIHZUQk4gKiBtYXBOICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLXZWaWV3UG9zaXRpb24sIG5vcm1hbCApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbGlmIGRlZmluZWQoIFVTRV9CVU1QTUFQIClcXG5cXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBkSGR4eV9md2QoKSApO1xcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xcblxcdHVuaWZvcm0gdmVjMiBub3JtYWxTY2FsZTtcXG5cXHQjaWZkZWYgT0JKRUNUU1BBQ0VfTk9STUFMTUFQXFxuXFx0XFx0dW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgcGVydHVyYk5vcm1hbDJBcmIoIHZlYzMgZXllX3BvcywgdmVjMyBzdXJmX25vcm0gKSB7XFxuXFx0XFx0XFx0dmVjMyBxMCA9IHZlYzMoIGRGZHgoIGV5ZV9wb3MueCApLCBkRmR4KCBleWVfcG9zLnkgKSwgZEZkeCggZXllX3Bvcy56ICkgKTtcXG5cXHRcXHRcXHR2ZWMzIHExID0gdmVjMyggZEZkeSggZXllX3Bvcy54ICksIGRGZHkoIGV5ZV9wb3MueSApLCBkRmR5KCBleWVfcG9zLnogKSApO1xcblxcdFxcdFxcdHZlYzIgc3QwID0gZEZkeCggdlV2LnN0ICk7XFxuXFx0XFx0XFx0dmVjMiBzdDEgPSBkRmR5KCB2VXYuc3QgKTtcXG5cXHRcXHRcXHRmbG9hdCBzY2FsZSA9IHNpZ24oIHN0MS50ICogc3QwLnMgLSBzdDAudCAqIHN0MS5zICk7XFxuXFx0XFx0XFx0dmVjMyBTID0gbm9ybWFsaXplKCAoIHEwICogc3QxLnQgLSBxMSAqIHN0MC50ICkgKiBzY2FsZSApO1xcblxcdFxcdFxcdHZlYzMgVCA9IG5vcm1hbGl6ZSggKCAtIHEwICogc3QxLnMgKyBxMSAqIHN0MC5zICkgKiBzY2FsZSApO1xcblxcdFxcdFxcdHZlYzMgTiA9IG5vcm1hbGl6ZSggc3VyZl9ub3JtICk7XFxuXFx0XFx0XFx0bWF0MyB0c24gPSBtYXQzKCBTLCBULCBOICk7XFxuXFx0XFx0XFx0dmVjMyBtYXBOID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRcXHRcXHRtYXBOLnh5ICo9IG5vcm1hbFNjYWxlO1xcblxcdFxcdFxcdG1hcE4ueHkgKj0gKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdFxcdFxcdHJldHVybiBub3JtYWxpemUoIHRzbiAqIG1hcE4gKTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBwYWNraW5nID0gXCJ2ZWMzIHBhY2tOb3JtYWxUb1JHQiggY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggbm9ybWFsICkgKiAwLjUgKyAwLjU7XFxufVxcbnZlYzMgdW5wYWNrUkdCVG9Ob3JtYWwoIGNvbnN0IGluIHZlYzMgcmdiICkge1xcblxcdHJldHVybiAyLjAgKiByZ2IueHl6IC0gMS4wO1xcbn1cXG5jb25zdCBmbG9hdCBQYWNrVXBzY2FsZSA9IDI1Ni4gLyAyNTUuO2NvbnN0IGZsb2F0IFVucGFja0Rvd25zY2FsZSA9IDI1NS4gLyAyNTYuO1xcbmNvbnN0IHZlYzMgUGFja0ZhY3RvcnMgPSB2ZWMzKCAyNTYuICogMjU2LiAqIDI1Ni4sIDI1Ni4gKiAyNTYuLCAgMjU2LiApO1xcbmNvbnN0IHZlYzQgVW5wYWNrRmFjdG9ycyA9IFVucGFja0Rvd25zY2FsZSAvIHZlYzQoIFBhY2tGYWN0b3JzLCAxLiApO1xcbmNvbnN0IGZsb2F0IFNoaWZ0UmlnaHQ4ID0gMS4gLyAyNTYuO1xcbnZlYzQgcGFja0RlcHRoVG9SR0JBKCBjb25zdCBpbiBmbG9hdCB2ICkge1xcblxcdHZlYzQgciA9IHZlYzQoIGZyYWN0KCB2ICogUGFja0ZhY3RvcnMgKSwgdiApO1xcblxcdHIueXp3IC09IHIueHl6ICogU2hpZnRSaWdodDg7XFx0cmV0dXJuIHIgKiBQYWNrVXBzY2FsZTtcXG59XFxuZmxvYXQgdW5wYWNrUkdCQVRvRGVwdGgoIGNvbnN0IGluIHZlYzQgdiApIHtcXG5cXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzICk7XFxufVxcbmZsb2F0IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCB2aWV3WiArIG5lYXIgKSAvICggbmVhciAtIGZhciApO1xcbn1cXG5mbG9hdCBvcnRob2dyYXBoaWNEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGxpbmVhckNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuIGxpbmVhckNsaXBaICogKCBuZWFyIC0gZmFyICkgLSBuZWFyO1xcbn1cXG5mbG9hdCB2aWV3WlRvUGVyc3BlY3RpdmVEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCggbmVhciArIHZpZXdaICkgKiBmYXIgKSAvICgoIGZhciAtIG5lYXIgKSAqIHZpZXdaICk7XFxufVxcbmZsb2F0IHBlcnNwZWN0aXZlRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBpbnZDbGlwWiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIG5lYXIgKiBmYXIgKSAvICggKCBmYXIgLSBuZWFyICkgKiBpbnZDbGlwWiAtIGZhciApO1xcbn1cIjtcblxudmFyIHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQgPSBcIiNpZmRlZiBQUkVNVUxUSVBMSUVEX0FMUEhBXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiAqPSBnbF9GcmFnQ29sb3IuYTtcXG4jZW5kaWZcIjtcblxudmFyIHByb2plY3RfdmVydGV4ID0gXCJ2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIjtcblxudmFyIGRpdGhlcmluZ19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIERJVEhFUklORyApXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IGRpdGhlcmluZyggZ2xfRnJhZ0NvbG9yLnJnYiApO1xcbiNlbmRpZlwiO1xuXG52YXIgZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBESVRIRVJJTkcgKVxcblxcdHZlYzMgZGl0aGVyaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdFxcdGZsb2F0IGdyaWRfcG9zaXRpb24gPSByYW5kKCBnbF9GcmFnQ29vcmQueHkgKTtcXG5cXHRcXHR2ZWMzIGRpdGhlcl9zaGlmdF9SR0IgPSB2ZWMzKCAwLjI1IC8gMjU1LjAsIC0wLjI1IC8gMjU1LjAsIDAuMjUgLyAyNTUuMCApO1xcblxcdFxcdGRpdGhlcl9zaGlmdF9SR0IgPSBtaXgoIDIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIC0yLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCBncmlkX3Bvc2l0aW9uICk7XFxuXFx0XFx0cmV0dXJuIGNvbG9yICsgZGl0aGVyX3NoaWZ0X1JHQjtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciByb3VnaG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IHJvdWdobmVzc0ZhY3RvciA9IHJvdWdobmVzcztcXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHZlYzQgdGV4ZWxSb3VnaG5lc3MgPSB0ZXh0dXJlMkQoIHJvdWdobmVzc01hcCwgdlV2ICk7XFxuXFx0cm91Z2huZXNzRmFjdG9yICo9IHRleGVsUm91Z2huZXNzLmc7XFxuI2VuZGlmXCI7XG5cbnZhciByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCByb3VnaG5lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlyZWN0aW9uYWxTaGFkb3dNYXBbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BvdFNoYWRvd01hcFsgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZTcG90U2hhZG93Q29vcmRbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHBvaW50U2hhZG93TWFwWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgdGV4dHVyZTJEQ29tcGFyZSggc2FtcGxlcjJEIGRlcHRocywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcXG5cXHRcXHRyZXR1cm4gc3RlcCggY29tcGFyZSwgdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggZGVwdGhzLCB1diApICkgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgdGV4dHVyZTJEU2hhZG93TGVycCggc2FtcGxlcjJEIGRlcHRocywgdmVjMiBzaXplLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xcblxcdFxcdGNvbnN0IHZlYzIgb2Zmc2V0ID0gdmVjMiggMC4wLCAxLjAgKTtcXG5cXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2l6ZTtcXG5cXHRcXHR2ZWMyIGNlbnRyb2lkVVYgPSBmbG9vciggdXYgKiBzaXplICsgMC41ICkgLyBzaXplO1xcblxcdFxcdGZsb2F0IGxiID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnh4LCBjb21wYXJlICk7XFxuXFx0XFx0ZmxvYXQgbHQgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueHksIGNvbXBhcmUgKTtcXG5cXHRcXHRmbG9hdCByYiA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC55eCwgY29tcGFyZSApO1xcblxcdFxcdGZsb2F0IHJ0ID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnl5LCBjb21wYXJlICk7XFxuXFx0XFx0dmVjMiBmID0gZnJhY3QoIHV2ICogc2l6ZSArIDAuNSApO1xcblxcdFxcdGZsb2F0IGEgPSBtaXgoIGxiLCBsdCwgZi55ICk7XFxuXFx0XFx0ZmxvYXQgYiA9IG1peCggcmIsIHJ0LCBmLnkgKTtcXG5cXHRcXHRmbG9hdCBjID0gbWl4KCBhLCBiLCBmLnggKTtcXG5cXHRcXHRyZXR1cm4gYztcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCApIHtcXG5cXHRcXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0XFx0c2hhZG93Q29vcmQueHl6IC89IHNoYWRvd0Nvb3JkLnc7XFxuXFx0XFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzO1xcblxcdFxcdGJ2ZWM0IGluRnJ1c3R1bVZlYyA9IGJ2ZWM0ICggc2hhZG93Q29vcmQueCA+PSAwLjAsIHNoYWRvd0Nvb3JkLnggPD0gMS4wLCBzaGFkb3dDb29yZC55ID49IDAuMCwgc2hhZG93Q29vcmQueSA8PSAxLjAgKTtcXG5cXHRcXHRib29sIGluRnJ1c3R1bSA9IGFsbCggaW5GcnVzdHVtVmVjICk7XFxuXFx0XFx0YnZlYzIgZnJ1c3R1bVRlc3RWZWMgPSBidmVjMiggaW5GcnVzdHVtLCBzaGFkb3dDb29yZC56IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgZnJ1c3R1bVRlc3QgPSBhbGwoIGZydXN0dW1UZXN0VmVjICk7XFxuXFx0XFx0aWYgKCBmcnVzdHVtVGVzdCApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgxID0gKyB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR4MiA9IGR4MCAvIDIuMDtcXG5cXHRcXHRcXHRmbG9hdCBkeTIgPSBkeTAgLyAyLjA7XFxuXFx0XFx0XFx0ZmxvYXQgZHgzID0gZHgxIC8gMi4wO1xcblxcdFxcdFxcdGZsb2F0IGR5MyA9IGR5MSAvIDIuMDtcXG5cXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MywgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gMTcuMCApO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgxID0gKyB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MSApLCBzaGFkb3dDb29yZC56IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHNoYWRvdyA9IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIHNoYWRvdztcXG5cXHR9XFxuXFx0dmVjMiBjdWJlVG9VViggdmVjMyB2LCBmbG9hdCB0ZXhlbFNpemVZICkge1xcblxcdFxcdHZlYzMgYWJzViA9IGFicyggdiApO1xcblxcdFxcdGZsb2F0IHNjYWxlVG9DdWJlID0gMS4wIC8gbWF4KCBhYnNWLngsIG1heCggYWJzVi55LCBhYnNWLnogKSApO1xcblxcdFxcdGFic1YgKj0gc2NhbGVUb0N1YmU7XFxuXFx0XFx0diAqPSBzY2FsZVRvQ3ViZSAqICggMS4wIC0gMi4wICogdGV4ZWxTaXplWSApO1xcblxcdFxcdHZlYzIgcGxhbmFyID0gdi54eTtcXG5cXHRcXHRmbG9hdCBhbG1vc3RBVGV4ZWwgPSAxLjUgKiB0ZXhlbFNpemVZO1xcblxcdFxcdGZsb2F0IGFsbW9zdE9uZSA9IDEuMCAtIGFsbW9zdEFUZXhlbDtcXG5cXHRcXHRpZiAoIGFic1YueiA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0aWYgKCB2LnogPiAwLjAgKVxcblxcdFxcdFxcdFxcdHBsYW5hci54ID0gNC4wIC0gdi54O1xcblxcdFxcdH0gZWxzZSBpZiAoIGFic1YueCA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc2lnblggPSBzaWduKCB2LnggKTtcXG5cXHRcXHRcXHRwbGFuYXIueCA9IHYueiAqIHNpZ25YICsgMi4wICogc2lnblg7XFxuXFx0XFx0fSBlbHNlIGlmICggYWJzVi55ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRmbG9hdCBzaWduWSA9IHNpZ24oIHYueSApO1xcblxcdFxcdFxcdHBsYW5hci54ID0gdi54ICsgMi4wICogc2lnblkgKyAyLjA7XFxuXFx0XFx0XFx0cGxhbmFyLnkgPSB2LnogKiBzaWduWSAtIDIuMDtcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIHZlYzIoIDAuMTI1LCAwLjI1ICkgKiBwbGFuYXIgKyB2ZWMyKCAwLjM3NSwgMC43NSApO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRQb2ludFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQsIGZsb2F0IHNoYWRvd0NhbWVyYU5lYXIsIGZsb2F0IHNoYWRvd0NhbWVyYUZhciApIHtcXG5cXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gKCBzaGFkb3dNYXBTaXplICogdmVjMiggNC4wLCAyLjAgKSApO1xcblxcdFxcdHZlYzMgbGlnaHRUb1Bvc2l0aW9uID0gc2hhZG93Q29vcmQueHl6O1xcblxcdFxcdGZsb2F0IGRwID0gKCBsZW5ndGgoIGxpZ2h0VG9Qb3NpdGlvbiApIC0gc2hhZG93Q2FtZXJhTmVhciApIC8gKCBzaGFkb3dDYW1lcmFGYXIgLSBzaGFkb3dDYW1lcmFOZWFyICk7XFx0XFx0ZHAgKz0gc2hhZG93QmlhcztcXG5cXHRcXHR2ZWMzIGJkM0QgPSBub3JtYWxpemUoIGxpZ2h0VG9Qb3NpdGlvbiApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKSB8fCBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApXFxuXFx0XFx0XFx0dmVjMiBvZmZzZXQgPSB2ZWMyKCAtIDEsIDEgKSAqIHNoYWRvd1JhZGl1cyAqIHRleGVsU2l6ZS55O1xcblxcdFxcdFxcdHJldHVybiAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh4LCB0ZXhlbFNpemUueSApLCBkcCApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgc3BvdFNoYWRvd01hdHJpeFsgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZTcG90U2hhZG93Q29vcmRbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBwb2ludFNoYWRvd01hdHJpeFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgc2hhZG93bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gPSBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZTcG90U2hhZG93Q29vcmRbIGkgXSA9IHNwb3RTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0gPSBwb2ludFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQgPSBcImZsb2F0IGdldFNoYWRvd01hc2soKSB7XFxuXFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGJvb2woIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93ICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGJvb2woIHNwb3RMaWdodC5zaGFkb3cgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRQb2ludExpZ2h0IHBvaW50TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cG9pbnRMaWdodCA9IHBvaW50TGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGJvb2woIHBvaW50TGlnaHQuc2hhZG93ICkgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0LnNoYWRvd0JpYXMsIHBvaW50TGlnaHQuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNlbmRpZlxcblxcdHJldHVybiBzaGFkb3c7XFxufVwiO1xuXG52YXIgc2tpbmJhc2VfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0bWF0NCBib25lTWF0WCA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC54ICk7XFxuXFx0bWF0NCBib25lTWF0WSA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC55ICk7XFxuXFx0bWF0NCBib25lTWF0WiA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC56ICk7XFxuXFx0bWF0NCBib25lTWF0VyA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC53ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubmluZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcXG5cXHQjaWZkZWYgQk9ORV9URVhUVVJFXFxuXFx0XFx0dW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgYm9uZVRleHR1cmU7XFxuXFx0XFx0dW5pZm9ybSBpbnQgYm9uZVRleHR1cmVTaXplO1xcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRcXHRmbG9hdCBqID0gaSAqIDQuMDtcXG5cXHRcXHRcXHRmbG9hdCB4ID0gbW9kKCBqLCBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCB5ID0gZmxvb3IoIGogLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeCA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeSA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHR5ID0gZHkgKiAoIHkgKyAwLjUgKTtcXG5cXHRcXHRcXHR2ZWM0IHYxID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAwLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MiA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMS41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjMgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDIuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHY0ID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAzLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gbWF0NCggdjEsIHYyLCB2MywgdjQgKTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIG1hdDQgYm9uZU1hdHJpY2VzWyBNQVhfQk9ORVMgXTtcXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gYm9uZU1hdHJpY2VzWyBpbnQoaSkgXTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBza2lubmluZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHR2ZWM0IHNraW5WZXJ0ZXggPSBiaW5kTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcblxcdHZlYzQgc2tpbm5lZCA9IHZlYzQoIDAuMCApO1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogc2tpbldlaWdodC54O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFkgKiBza2luVmVydGV4ICogc2tpbldlaWdodC55O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFogKiBza2luVmVydGV4ICogc2tpbldlaWdodC56O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogc2tpbldlaWdodC53O1xcblxcdHRyYW5zZm9ybWVkID0gKCBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5uZWQgKS54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubm9ybWFsX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgc2tpbk1hdHJpeCA9IG1hdDQoIDAuMCApO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC54ICogYm9uZU1hdFg7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnkgKiBib25lTWF0WTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueiAqIGJvbmVNYXRaO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC53ICogYm9uZU1hdFc7XFxuXFx0c2tpbk1hdHJpeCAgPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBiaW5kTWF0cml4O1xcblxcdG9iamVjdE5vcm1hbCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3ROb3JtYWwsIDAuMCApICkueHl6O1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdG9iamVjdFRhbmdlbnQgPSB2ZWM0KCBza2luTWF0cml4ICogdmVjNCggb2JqZWN0VGFuZ2VudCwgMC4wICkgKS54eXo7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBzcGVjdWxhcm1hcF9mcmFnbWVudCA9IFwiZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7XFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcXG4jZWxzZVxcblxcdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XFxuI2VuZGlmXCI7XG5cbnZhciBzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciB0b25lbWFwcGluZ19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFRPTkVfTUFQUElORyApXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IHRvbmVNYXBwaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXCI7XG5cbnZhciB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZuZGVmIHNhdHVyYXRlXFxuXFx0I2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNlbmRpZlxcbnVuaWZvcm0gZmxvYXQgdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG51bmlmb3JtIGZsb2F0IHRvbmVNYXBwaW5nV2hpdGVQb2ludDtcXG52ZWMzIExpbmVhclRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdHJldHVybiB0b25lTWFwcGluZ0V4cG9zdXJlICogY29sb3I7XFxufVxcbnZlYzMgUmVpbmhhcmRUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggY29sb3IgLyAoIHZlYzMoIDEuMCApICsgY29sb3IgKSApO1xcbn1cXG4jZGVmaW5lIFVuY2hhcnRlZDJIZWxwZXIoIHggKSBtYXgoICggKCB4ICogKCAwLjE1ICogeCArIDAuMTAgKiAwLjUwICkgKyAwLjIwICogMC4wMiApIC8gKCB4ICogKCAwLjE1ICogeCArIDAuNTAgKSArIDAuMjAgKiAwLjMwICkgKSAtIDAuMDIgLyAwLjMwLCB2ZWMzKCAwLjAgKSApXFxudmVjMyBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIFVuY2hhcnRlZDJIZWxwZXIoIGNvbG9yICkgLyBVbmNoYXJ0ZWQySGVscGVyKCB2ZWMzKCB0b25lTWFwcGluZ1doaXRlUG9pbnQgKSApICk7XFxufVxcbnZlYzMgT3B0aW1pemVkQ2luZW9uVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRjb2xvciA9IG1heCggdmVjMyggMC4wICksIGNvbG9yIC0gMC4wMDQgKTtcXG5cXHRyZXR1cm4gcG93KCAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDAuNSApICkgLyAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDEuNyApICsgMC4wNiApLCB2ZWMzKCAyLjIgKSApO1xcbn1cXG52ZWMzIEFDRVNGaWxtaWNUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggKCBjb2xvciAqICggMi41MSAqIGNvbG9yICsgMC4wMyApICkgLyAoIGNvbG9yICogKCAyLjQzICogY29sb3IgKyAwLjU5ICkgKyAwLjE0ICkgKTtcXG59XCI7XG5cbnZhciB1dl9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApIHx8IGRlZmluZWQoIFVTRV9ST1VHSE5FU1NNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTUVUQUxORVNTTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcbiNlbmRpZlwiO1xuXG52YXIgdXZfcGFyc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX1NQRUNVTEFSTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQICkgfHwgZGVmaW5lZCggVVNFX0VNSVNTSVZFTUFQICkgfHwgZGVmaW5lZCggVVNFX1JPVUdITkVTU01BUCApIHx8IGRlZmluZWQoIFVTRV9NRVRBTE5FU1NNQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuXFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbiNlbmRpZlwiO1xuXG52YXIgdXZfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApIHx8IGRlZmluZWQoIFVTRV9ST1VHSE5FU1NNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTUVUQUxORVNTTUFQIClcXG5cXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3BhcnNfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHRhdHRyaWJ1dGUgdmVjMiB1djI7XFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuI2VuZGlmXCI7XG5cbnZhciB1djJfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2VXYyID0gdXYyO1xcbiNlbmRpZlwiO1xuXG52YXIgd29ybGRwb3NfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIERJU1RBTkNFICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKVxcblxcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbiNlbmRpZlwiO1xuXG52YXIgYmFja2dyb3VuZF9mcmFnID0gXCJ1bmlmb3JtIHNhbXBsZXIyRCB0MkQ7XFxudmFyeWluZyB2ZWMyIHZVdjtcXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRCggdDJELCB2VXYgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIGJhY2tncm91bmRfdmVydCA9IFwidmFyeWluZyB2ZWMyIHZVdjtcXG51bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxudm9pZCBtYWluKCkge1xcblxcdHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuXFx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbi54eSwgMS4wLCAxLjAgKTtcXG59XCI7XG5cbnZhciBjdWJlX2ZyYWcgPSBcInVuaWZvcm0gc2FtcGxlckN1YmUgdEN1YmU7XFxudW5pZm9ybSBmbG9hdCB0RmxpcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGREaXJlY3Rpb24ueCwgdldvcmxkRGlyZWN0aW9uLnl6ICkgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xcblxcdGdsX0ZyYWdDb2xvci5hICo9IG9wYWNpdHk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgY3ViZV92ZXJ0ID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7XFxufVwiO1xuXG52YXIgZGVwdGhfZnJhZyA9IFwiI2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdHVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAxLjAgKTtcXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0ZGlmZnVzZUNvbG9yLmEgPSBvcGFjaXR5O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB2ZWMzKCAxLjAgLSBnbF9GcmFnQ29vcmQueiApLCBvcGFjaXR5ICk7XFxuXFx0I2VsaWYgREVQVEhfUEFDS0lORyA9PSAzMjAxXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBnbF9GcmFnQ29vcmQueiApO1xcblxcdCNlbmRpZlxcbn1cIjtcblxudmFyIGRlcHRoX3ZlcnQgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG59XCI7XG5cbnZhciBkaXN0YW5jZVJHQkFfZnJhZyA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnVuaWZvcm0gdmVjMyByZWZlcmVuY2VQb3NpdGlvbjtcXG51bmlmb3JtIGZsb2F0IG5lYXJEaXN0YW5jZTtcXG51bmlmb3JtIGZsb2F0IGZhckRpc3RhbmNlO1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluICgpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRmbG9hdCBkaXN0ID0gbGVuZ3RoKCB2V29ybGRQb3NpdGlvbiAtIHJlZmVyZW5jZVBvc2l0aW9uICk7XFxuXFx0ZGlzdCA9ICggZGlzdCAtIG5lYXJEaXN0YW5jZSApIC8gKCBmYXJEaXN0YW5jZSAtIG5lYXJEaXN0YW5jZSApO1xcblxcdGRpc3QgPSBzYXR1cmF0ZSggZGlzdCApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHBhY2tEZXB0aFRvUkdCQSggZGlzdCApO1xcbn1cIjtcblxudmFyIGRpc3RhbmNlUkdCQV92ZXJ0ID0gXCIjZGVmaW5lIERJU1RBTkNFXFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHRcXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxufVwiO1xuXG52YXIgZXF1aXJlY3RfZnJhZyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZERpcmVjdGlvbiApO1xcblxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCBkaXJlY3Rpb24ueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdHNhbXBsZVVWLnggPSBhdGFuKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIGVxdWlyZWN0X3ZlcnQgPSBcInZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG59XCI7XG5cbnZhciBsaW5lZGFzaGVkX2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIGZsb2F0IGRhc2hTaXplO1xcbnVuaWZvcm0gZmxvYXQgdG90YWxTaXplO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0aWYgKCBtb2QoIHZMaW5lRGlzdGFuY2UsIHRvdGFsU2l6ZSApID4gZGFzaFNpemUgKSB7XFxuXFx0XFx0ZGlzY2FyZDtcXG5cXHR9XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgbGluZWRhc2hlZF92ZXJ0ID0gXCJ1bmlmb3JtIGZsb2F0IHNjYWxlO1xcbmF0dHJpYnV0ZSBmbG9hdCBsaW5lRGlzdGFuY2U7XFxudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0dkxpbmVEaXN0YW5jZSA9IHNjYWxlICogbGluZURpc3RhbmNlO1xcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG52YXIgbWVzaGJhc2ljX2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSB2ZWMzKCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hiYXNpY192ZXJ0ID0gXCIjaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIG1lc2hsYW1iZXJ0X2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbnZhcnlpbmcgdmVjMyB2SW5kaXJlY3RGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuXFx0dmFyeWluZyB2ZWMzIHZJbmRpcmVjdEJhY2s7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gKCBnbF9Gcm9udEZhY2luZyApID8gdkluZGlyZWN0RnJvbnQgOiB2SW5kaXJlY3RCYWNrO1xcblxcdCNlbHNlXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHZJbmRpcmVjdEZyb250O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxsaWdodG1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gQlJERl9EaWZmdXNlX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9ICggZ2xfRnJvbnRGYWNpbmcgKSA/IHZMaWdodEZyb250IDogdkxpZ2h0QmFjaztcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSB2TGlnaHRGcm9udDtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICo9IEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBkaWZmdXNlQ29sb3IucmdiICkgKiBnZXRTaGFkb3dNYXNrKCk7XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbnZhciBtZXNobGFtYmVydF92ZXJ0ID0gXCIjZGVmaW5lIExBTUJFUlRcXG52YXJ5aW5nIHZlYzMgdkxpZ2h0RnJvbnQ7XFxudmFyeWluZyB2ZWMzIHZJbmRpcmVjdEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG5cXHR2YXJ5aW5nIHZlYzMgdkluZGlyZWN0QmFjaztcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19sYW1iZXJ0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbnZhciBtZXNobWF0Y2FwX2ZyYWcgPSBcIiNkZWZpbmUgTUFUQ0FQXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gc2FtcGxlcjJEIG1hdGNhcDtcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHR2ZWMzIHZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5cXHR2ZWMzIHggPSBub3JtYWxpemUoIHZlYzMoIHZpZXdEaXIueiwgMC4wLCAtIHZpZXdEaXIueCApICk7XFxuXFx0dmVjMyB5ID0gY3Jvc3MoIHZpZXdEaXIsIHggKTtcXG5cXHR2ZWMyIHV2ID0gdmVjMiggZG90KCB4LCBub3JtYWwgKSwgZG90KCB5LCBub3JtYWwgKSApICogMC40OTUgKyAwLjU7XFxuXFx0I2lmZGVmIFVTRV9NQVRDQVBcXG5cXHRcXHR2ZWM0IG1hdGNhcENvbG9yID0gdGV4dHVyZTJEKCBtYXRjYXAsIHV2ICk7XFxuXFx0XFx0bWF0Y2FwQ29sb3IgPSBtYXRjYXBUZXhlbFRvTGluZWFyKCBtYXRjYXBDb2xvciApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjNCBtYXRjYXBDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2IgKiBtYXRjYXBDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2htYXRjYXBfdmVydCA9IFwiI2RlZmluZSBNQVRDQVBcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0XFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG59XCI7XG5cbnZhciBtZXNocGhvbmdfZnJhZyA9IFwiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3Bob25nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgbWVzaHBob25nX3ZlcnQgPSBcIiNkZWZpbmUgUEhPTkdcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIG1lc2hwaHlzaWNhbF9mcmFnID0gXCIjZGVmaW5lIFBIWVNJQ0FMXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgcm91Z2huZXNzO1xcbnVuaWZvcm0gZmxvYXQgbWV0YWxuZXNzO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIFNUQU5EQVJEXFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhckNvYXQ7XFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhckNvYXRSb3VnaG5lc3M7XFxuI2VuZGlmXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hwaHlzaWNhbF92ZXJ0ID0gXCIjZGVmaW5lIFBIWVNJQ0FMXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWRUYW5nZW50ICk7XFxuXFx0XFx0dkJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIG5vcm1hbF9mcmFnID0gXCIjZGVmaW5lIE5PUk1BTFxcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8ICggZGVmaW5lZCggVVNFX05PUk1BTE1BUCApICYmICEgZGVmaW5lZCggT0JKRUNUU1BBQ0VfTk9STUFMTUFQICkgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrTm9ybWFsVG9SR0IoIG5vcm1hbCApLCBvcGFjaXR5ICk7XFxufVwiO1xuXG52YXIgbm9ybWFsX3ZlcnQgPSBcIiNkZWZpbmUgTk9STUFMXFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCAoIGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSAmJiAhIGRlZmluZWQoIE9CSkVDVFNQQUNFX05PUk1BTE1BUCApIClcXG5cXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZUYW5nZW50O1xcblxcdFxcdHZhcnlpbmcgdmVjMyB2Qml0YW5nZW50O1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWRUYW5nZW50ICk7XFxuXFx0XFx0dkJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8ICggZGVmaW5lZCggVVNFX05PUk1BTE1BUCApICYmICEgZGVmaW5lZCggT0JKRUNUU1BBQ0VfTk9STUFMTUFQICkgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cIjtcblxudmFyIHBvaW50c19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgcG9pbnRzX3ZlcnQgPSBcInVuaWZvcm0gZmxvYXQgc2l6ZTtcXG51bmlmb3JtIGZsb2F0IHNjYWxlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9pbnRTaXplID0gc2l6ZTtcXG5cXHQjaWZkZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9ICggcHJvamVjdGlvbk1hdHJpeFsgMiBdWyAzIF0gPT0gLSAxLjAgKTtcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBnbF9Qb2ludFNpemUgKj0gKCBzY2FsZSAvIC0gbXZQb3NpdGlvbi56ICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIHNoYWRvd19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgY29sb3I7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIGNvbG9yLCBvcGFjaXR5ICogKCAxLjAgLSBnZXRTaGFkb3dNYXNrKCkgKSApO1xcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgc2hhZG93X3ZlcnQgPSBcIiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbnZhciBzcHJpdGVfZnJhZyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgc3ByaXRlX3ZlcnQgPSBcInVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxudW5pZm9ybSB2ZWMyIGNlbnRlcjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xcblxcdHZlYzIgc2NhbGU7XFxuXFx0c2NhbGUueCA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDAgXS54LCBtb2RlbE1hdHJpeFsgMCBdLnksIG1vZGVsTWF0cml4WyAwIF0ueiApICk7XFxuXFx0c2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54LCBtb2RlbE1hdHJpeFsgMSBdLnksIG1vZGVsTWF0cml4WyAxIF0ueiApICk7XFxuXFx0I2lmbmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Ym9vbCBpc1BlcnNwZWN0aXZlID0gKCBwcm9qZWN0aW9uTWF0cml4WyAyIF1bIDMgXSA9PSAtIDEuMCApO1xcblxcdFxcdGlmICggaXNQZXJzcGVjdGl2ZSApIHNjYWxlICo9IC0gbXZQb3NpdGlvbi56O1xcblxcdCNlbmRpZlxcblxcdHZlYzIgYWxpZ25lZFBvc2l0aW9uID0gKCBwb3NpdGlvbi54eSAtICggY2VudGVyIC0gdmVjMiggMC41ICkgKSApICogc2NhbGU7XFxuXFx0dmVjMiByb3RhdGVkUG9zaXRpb247XFxuXFx0cm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG5cXHRtdlBvc2l0aW9uLnh5ICs9IHJvdGF0ZWRQb3NpdGlvbjtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG52YXIgU2hhZGVyQ2h1bmsgPSB7XG5cdGFscGhhbWFwX2ZyYWdtZW50OiBhbHBoYW1hcF9mcmFnbWVudCxcblx0YWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCxcblx0YWxwaGF0ZXN0X2ZyYWdtZW50OiBhbHBoYXRlc3RfZnJhZ21lbnQsXG5cdGFvbWFwX2ZyYWdtZW50OiBhb21hcF9mcmFnbWVudCxcblx0YW9tYXBfcGFyc19mcmFnbWVudDogYW9tYXBfcGFyc19mcmFnbWVudCxcblx0YmVnaW5fdmVydGV4OiBiZWdpbl92ZXJ0ZXgsXG5cdGJlZ2lubm9ybWFsX3ZlcnRleDogYmVnaW5ub3JtYWxfdmVydGV4LFxuXHRic2RmczogYnNkZnMsXG5cdGJ1bXBtYXBfcGFyc19mcmFnbWVudDogYnVtcG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCxcblx0Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleDogY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCxcblx0Y29sb3JfZnJhZ21lbnQ6IGNvbG9yX2ZyYWdtZW50LFxuXHRjb2xvcl9wYXJzX2ZyYWdtZW50OiBjb2xvcl9wYXJzX2ZyYWdtZW50LFxuXHRjb2xvcl9wYXJzX3ZlcnRleDogY29sb3JfcGFyc192ZXJ0ZXgsXG5cdGNvbG9yX3ZlcnRleDogY29sb3JfdmVydGV4LFxuXHRjb21tb246IGNvbW1vbixcblx0Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50OiBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQsXG5cdGRlZmF1bHRub3JtYWxfdmVydGV4OiBkZWZhdWx0bm9ybWFsX3ZlcnRleCxcblx0ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg6IGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgsXG5cdGVtaXNzaXZlbWFwX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9mcmFnbWVudCxcblx0ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudDogZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCxcblx0ZW5jb2RpbmdzX2ZyYWdtZW50OiBlbmNvZGluZ3NfZnJhZ21lbnQsXG5cdGVuY29kaW5nc19wYXJzX2ZyYWdtZW50OiBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX2ZyYWdtZW50OiBlbnZtYXBfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3BhcnNfdmVydGV4OiBlbnZtYXBfcGFyc192ZXJ0ZXgsXG5cdGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3ZlcnRleDogZW52bWFwX3ZlcnRleCxcblx0Zm9nX3ZlcnRleDogZm9nX3ZlcnRleCxcblx0Zm9nX3BhcnNfdmVydGV4OiBmb2dfcGFyc192ZXJ0ZXgsXG5cdGZvZ19mcmFnbWVudDogZm9nX2ZyYWdtZW50LFxuXHRmb2dfcGFyc19mcmFnbWVudDogZm9nX3BhcnNfZnJhZ21lbnQsXG5cdGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ6IGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX2ZyYWdtZW50OiBsaWdodG1hcF9mcmFnbWVudCxcblx0bGlnaHRtYXBfcGFyc19mcmFnbWVudDogbGlnaHRtYXBfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX2xhbWJlcnRfdmVydGV4OiBsaWdodHNfbGFtYmVydF92ZXJ0ZXgsXG5cdGxpZ2h0c19wYXJzX2JlZ2luOiBsaWdodHNfcGFyc19iZWdpbixcblx0bGlnaHRzX3Bob25nX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfZnJhZ21lbnQsXG5cdGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQsXG5cdGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX2ZyYWdtZW50X2JlZ2luOiBsaWdodHNfZnJhZ21lbnRfYmVnaW4sXG5cdGxpZ2h0c19mcmFnbWVudF9tYXBzOiBsaWdodHNfZnJhZ21lbnRfbWFwcyxcblx0bGlnaHRzX2ZyYWdtZW50X2VuZDogbGlnaHRzX2ZyYWdtZW50X2VuZCxcblx0bG9nZGVwdGhidWZfZnJhZ21lbnQ6IGxvZ2RlcHRoYnVmX2ZyYWdtZW50LFxuXHRsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFxuXHRsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleDogbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXG5cdGxvZ2RlcHRoYnVmX3ZlcnRleDogbG9nZGVwdGhidWZfdmVydGV4LFxuXHRtYXBfZnJhZ21lbnQ6IG1hcF9mcmFnbWVudCxcblx0bWFwX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRtYXBfcGFydGljbGVfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9mcmFnbWVudCxcblx0bWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50LFxuXHRtZXRhbG5lc3NtYXBfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9mcmFnbWVudCxcblx0bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50LFxuXHRtb3JwaG5vcm1hbF92ZXJ0ZXg6IG1vcnBobm9ybWFsX3ZlcnRleCxcblx0bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg6IG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LFxuXHRtb3JwaHRhcmdldF92ZXJ0ZXg6IG1vcnBodGFyZ2V0X3ZlcnRleCxcblx0bm9ybWFsX2ZyYWdtZW50X2JlZ2luOiBub3JtYWxfZnJhZ21lbnRfYmVnaW4sXG5cdG5vcm1hbF9mcmFnbWVudF9tYXBzOiBub3JtYWxfZnJhZ21lbnRfbWFwcyxcblx0bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ6IG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRwYWNraW5nOiBwYWNraW5nLFxuXHRwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50OiBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50LFxuXHRwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsXG5cdGRpdGhlcmluZ19mcmFnbWVudDogZGl0aGVyaW5nX2ZyYWdtZW50LFxuXHRkaXRoZXJpbmdfcGFyc19mcmFnbWVudDogZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LFxuXHRyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDogcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsXG5cdHNoYWRvd21hcF92ZXJ0ZXg6IHNoYWRvd21hcF92ZXJ0ZXgsXG5cdHNoYWRvd21hc2tfcGFyc19mcmFnbWVudDogc2hhZG93bWFza19wYXJzX2ZyYWdtZW50LFxuXHRza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCxcblx0c2tpbm5pbmdfcGFyc192ZXJ0ZXg6IHNraW5uaW5nX3BhcnNfdmVydGV4LFxuXHRza2lubmluZ192ZXJ0ZXg6IHNraW5uaW5nX3ZlcnRleCxcblx0c2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LFxuXHRzcGVjdWxhcm1hcF9mcmFnbWVudDogc3BlY3VsYXJtYXBfZnJhZ21lbnQsXG5cdHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ6IHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsXG5cdHRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDogdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc19mcmFnbWVudDogdXZfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc192ZXJ0ZXg6IHV2X3BhcnNfdmVydGV4LFxuXHR1dl92ZXJ0ZXg6IHV2X3ZlcnRleCxcblx0dXYyX3BhcnNfZnJhZ21lbnQ6IHV2Ml9wYXJzX2ZyYWdtZW50LFxuXHR1djJfcGFyc192ZXJ0ZXg6IHV2Ml9wYXJzX3ZlcnRleCxcblx0dXYyX3ZlcnRleDogdXYyX3ZlcnRleCxcblx0d29ybGRwb3NfdmVydGV4OiB3b3JsZHBvc192ZXJ0ZXgsXG5cblx0YmFja2dyb3VuZF9mcmFnOiBiYWNrZ3JvdW5kX2ZyYWcsXG5cdGJhY2tncm91bmRfdmVydDogYmFja2dyb3VuZF92ZXJ0LFxuXHRjdWJlX2ZyYWc6IGN1YmVfZnJhZyxcblx0Y3ViZV92ZXJ0OiBjdWJlX3ZlcnQsXG5cdGRlcHRoX2ZyYWc6IGRlcHRoX2ZyYWcsXG5cdGRlcHRoX3ZlcnQ6IGRlcHRoX3ZlcnQsXG5cdGRpc3RhbmNlUkdCQV9mcmFnOiBkaXN0YW5jZVJHQkFfZnJhZyxcblx0ZGlzdGFuY2VSR0JBX3ZlcnQ6IGRpc3RhbmNlUkdCQV92ZXJ0LFxuXHRlcXVpcmVjdF9mcmFnOiBlcXVpcmVjdF9mcmFnLFxuXHRlcXVpcmVjdF92ZXJ0OiBlcXVpcmVjdF92ZXJ0LFxuXHRsaW5lZGFzaGVkX2ZyYWc6IGxpbmVkYXNoZWRfZnJhZyxcblx0bGluZWRhc2hlZF92ZXJ0OiBsaW5lZGFzaGVkX3ZlcnQsXG5cdG1lc2hiYXNpY19mcmFnOiBtZXNoYmFzaWNfZnJhZyxcblx0bWVzaGJhc2ljX3ZlcnQ6IG1lc2hiYXNpY192ZXJ0LFxuXHRtZXNobGFtYmVydF9mcmFnOiBtZXNobGFtYmVydF9mcmFnLFxuXHRtZXNobGFtYmVydF92ZXJ0OiBtZXNobGFtYmVydF92ZXJ0LFxuXHRtZXNobWF0Y2FwX2ZyYWc6IG1lc2htYXRjYXBfZnJhZyxcblx0bWVzaG1hdGNhcF92ZXJ0OiBtZXNobWF0Y2FwX3ZlcnQsXG5cdG1lc2hwaG9uZ19mcmFnOiBtZXNocGhvbmdfZnJhZyxcblx0bWVzaHBob25nX3ZlcnQ6IG1lc2hwaG9uZ192ZXJ0LFxuXHRtZXNocGh5c2ljYWxfZnJhZzogbWVzaHBoeXNpY2FsX2ZyYWcsXG5cdG1lc2hwaHlzaWNhbF92ZXJ0OiBtZXNocGh5c2ljYWxfdmVydCxcblx0bm9ybWFsX2ZyYWc6IG5vcm1hbF9mcmFnLFxuXHRub3JtYWxfdmVydDogbm9ybWFsX3ZlcnQsXG5cdHBvaW50c19mcmFnOiBwb2ludHNfZnJhZyxcblx0cG9pbnRzX3ZlcnQ6IHBvaW50c192ZXJ0LFxuXHRzaGFkb3dfZnJhZzogc2hhZG93X2ZyYWcsXG5cdHNoYWRvd192ZXJ0OiBzaGFkb3dfdmVydCxcblx0c3ByaXRlX2ZyYWc6IHNwcml0ZV9mcmFnLFxuXHRzcHJpdGVfdmVydDogc3ByaXRlX3ZlcnRcbn07XG5cbi8qKlxuICogVW5pZm9ybXMgbGlicmFyeSBmb3Igc2hhcmVkIHdlYmdsIHNoYWRlcnNcbiAqL1xuXG52YXIgVW5pZm9ybXNMaWIgPSB7XG5cblx0Y29tbW9uOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZWVlZWVlICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXG5cdH0sXG5cblx0c3BlY3VsYXJtYXA6IHtcblxuXHRcdHNwZWN1bGFyTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cblx0fSxcblxuXHRlbnZtYXA6IHtcblxuXHRcdGVudk1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGZsaXBFbnZNYXA6IHsgdmFsdWU6IC0gMSB9LFxuXHRcdHJlZmxlY3Rpdml0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0cmVmcmFjdGlvblJhdGlvOiB7IHZhbHVlOiAwLjk4IH0sXG5cdFx0bWF4TWlwTGV2ZWw6IHsgdmFsdWU6IDAgfVxuXG5cdH0sXG5cblx0YW9tYXA6IHtcblxuXHRcdGFvTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YW9NYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bGlnaHRtYXA6IHtcblxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0ZW1pc3NpdmVtYXA6IHtcblxuXHRcdGVtaXNzaXZlTWFwOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdGJ1bXBtYXA6IHtcblxuXHRcdGJ1bXBNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRidW1wU2NhbGU6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bm9ybWFsbWFwOiB7XG5cblx0XHRub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRub3JtYWxTY2FsZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDEsIDEgKSB9XG5cblx0fSxcblxuXHRkaXNwbGFjZW1lbnRtYXA6IHtcblxuXHRcdGRpc3BsYWNlbWVudE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0ZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRyb3VnaG5lc3NtYXA6IHtcblxuXHRcdHJvdWdobmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRtZXRhbG5lc3NtYXA6IHtcblxuXHRcdG1ldGFsbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRncmFkaWVudG1hcDoge1xuXG5cdFx0Z3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Zm9nOiB7XG5cblx0XHRmb2dEZW5zaXR5OiB7IHZhbHVlOiAwLjAwMDI1IH0sXG5cdFx0Zm9nTmVhcjogeyB2YWx1ZTogMSB9LFxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxuXHRcdGZvZ0NvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfVxuXG5cdH0sXG5cblx0bGlnaHRzOiB7XG5cblx0XHRhbWJpZW50TGlnaHRDb2xvcjogeyB2YWx1ZTogW10gfSxcblxuXHRcdGxpZ2h0UHJvYmU6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRkaXJlY3Rpb25hbExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGRpcmVjdGlvbjoge30sXG5cdFx0XHRjb2xvcjoge30sXG5cblx0XHRcdHNoYWRvdzoge30sXG5cdFx0XHRzaGFkb3dCaWFzOiB7fSxcblx0XHRcdHNoYWRvd1JhZGl1czoge30sXG5cdFx0XHRzaGFkb3dNYXBTaXplOiB7fVxuXHRcdH0gfSxcblxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0c3BvdExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRpcmVjdGlvbjoge30sXG5cdFx0XHRkaXN0YW5jZToge30sXG5cdFx0XHRjb25lQ29zOiB7fSxcblx0XHRcdHBlbnVtYnJhQ29zOiB7fSxcblx0XHRcdGRlY2F5OiB7fSxcblxuXHRcdFx0c2hhZG93OiB7fSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9XG5cdFx0fSB9LFxuXG5cdFx0c3BvdFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSxcblx0XHRzcG90U2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0cG9pbnRMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRjb2xvcjoge30sXG5cdFx0XHRwb3NpdGlvbjoge30sXG5cdFx0XHRkZWNheToge30sXG5cdFx0XHRkaXN0YW5jZToge30sXG5cblx0XHRcdHNoYWRvdzoge30sXG5cdFx0XHRzaGFkb3dCaWFzOiB7fSxcblx0XHRcdHNoYWRvd1JhZGl1czoge30sXG5cdFx0XHRzaGFkb3dNYXBTaXplOiB7fSxcblx0XHRcdHNoYWRvd0NhbWVyYU5lYXI6IHt9LFxuXHRcdFx0c2hhZG93Q2FtZXJhRmFyOiB7fVxuXHRcdH0gfSxcblxuXHRcdHBvaW50U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHBvaW50U2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0aGVtaXNwaGVyZUxpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGRpcmVjdGlvbjoge30sXG5cdFx0XHRza3lDb2xvcjoge30sXG5cdFx0XHRncm91bmRDb2xvcjoge31cblx0XHR9IH0sXG5cblx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogUmVjdEFyZWFMaWdodCBCUkRGIGRhdGEgbmVlZHMgdG8gYmUgbW92ZWQgZnJvbSBleGFtcGxlIHRvIG1haW4gc3JjXG5cdFx0cmVjdEFyZWFMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRjb2xvcjoge30sXG5cdFx0XHRwb3NpdGlvbjoge30sXG5cdFx0XHR3aWR0aDoge30sXG5cdFx0XHRoZWlnaHQ6IHt9XG5cdFx0fSB9XG5cblx0fSxcblxuXHRwb2ludHM6IHtcblxuXHRcdGRpZmZ1c2U6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhlZWVlZWUgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNpemU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNjYWxlOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRtYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9XG5cblx0fSxcblxuXHRzcHJpdGU6IHtcblxuXHRcdGRpZmZ1c2U6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhlZWVlZWUgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdGNlbnRlcjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSxcblx0XHRyb3RhdGlvbjogeyB2YWx1ZTogMC4wIH0sXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0dXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfVxuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKi9cblxudmFyIFNoYWRlckxpYiA9IHtcblxuXHRiYXNpYzoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZ1xuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hiYXNpY19mcmFnXG5cblx0fSxcblxuXHRsYW1iZXJ0OiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfZnJhZ1xuXG5cdH0sXG5cblx0cGhvbmc6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ncmFkaWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdFx0XHRzcGVjdWxhcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweDExMTExMSApIH0sXG5cdFx0XHRcdHNoaW5pbmVzczogeyB2YWx1ZTogMzAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBob25nX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ19mcmFnXG5cblx0fSxcblxuXHRzdGFuZGFyZDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5yb3VnaG5lc3NtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5tZXRhbG5lc3NtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdFx0cm91Z2huZXNzOiB7IHZhbHVlOiAwLjUgfSxcblx0XHRcdFx0bWV0YWxuZXNzOiB7IHZhbHVlOiAwLjUgfSxcblx0XHRcdFx0ZW52TWFwSW50ZW5zaXR5OiB7IHZhbHVlOiAxIH0gLy8gdGVtcG9yYXJ5XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWdcblxuXHR9LFxuXG5cdG1hdGNhcDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdG1hdGNhcDogeyB2YWx1ZTogbnVsbCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobWF0Y2FwX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfZnJhZ1xuXG5cdH0sXG5cblx0cG9pbnRzOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIucG9pbnRzLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsucG9pbnRzX2ZyYWdcblxuXHR9LFxuXG5cdGRhc2hlZDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0c2NhbGU6IHsgdmFsdWU6IDEgfSxcblx0XHRcdFx0ZGFzaFNpemU6IHsgdmFsdWU6IDEgfSxcblx0XHRcdFx0dG90YWxTaXplOiB7IHZhbHVlOiAyIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmxpbmVkYXNoZWRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubGluZWRhc2hlZF9mcmFnXG5cblx0fSxcblxuXHRkZXB0aDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfZnJhZ1xuXG5cdH0sXG5cblx0bm9ybWFsOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdHtcblx0XHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm5vcm1hbF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5ub3JtYWxfZnJhZ1xuXG5cdH0sXG5cblx0c3ByaXRlOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuc3ByaXRlLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5zcHJpdGVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuc3ByaXRlX2ZyYWdcblxuXHR9LFxuXG5cdGJhY2tncm91bmQ6IHtcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0dDJEOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5iYWNrZ3JvdW5kX2ZyYWdcblxuXHR9LFxuXHQvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vXHRDdWJlIG1hcCBzaGFkZXJcblx0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHRjdWJlOiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dEN1YmU6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRGbGlwOiB7IHZhbHVlOiAtIDEgfSxcblx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX2ZyYWdcblxuXHR9LFxuXG5cdGVxdWlyZWN0OiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfZnJhZ1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VSR0JBOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRyZWZlcmVuY2VQb3NpdGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjMoKSB9LFxuXHRcdFx0XHRuZWFyRGlzdGFuY2U6IHsgdmFsdWU6IDEgfSxcblx0XHRcdFx0ZmFyRGlzdGFuY2U6IHsgdmFsdWU6IDEwMDAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZGlzdGFuY2VSR0JBX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV9mcmFnXG5cblx0fSxcblxuXHRzaGFkb3c6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdGNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAgKSB9LFxuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fSxcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5zaGFkb3dfZnJhZ1xuXG5cdH1cblxufTtcblxuU2hhZGVyTGliLnBoeXNpY2FsID0ge1xuXG5cdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0U2hhZGVyTGliLnN0YW5kYXJkLnVuaWZvcm1zLFxuXHRcdHtcblx0XHRcdGNsZWFyQ29hdDogeyB2YWx1ZTogMCB9LFxuXHRcdFx0Y2xlYXJDb2F0Um91Z2huZXNzOiB7IHZhbHVlOiAwIH1cblx0XHR9XG5cdF0gKSxcblxuXHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LFxuXHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWdcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQW5pbWF0aW9uKCkge1xuXG5cdHZhciBjb250ZXh0ID0gbnVsbDtcblx0dmFyIGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cdHZhciBhbmltYXRpb25Mb29wID0gbnVsbDtcblxuXHRmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lLCBmcmFtZSApIHtcblxuXHRcdGlmICggaXNBbmltYXRpbmcgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0YW5pbWF0aW9uTG9vcCggdGltZSwgZnJhbWUgKTtcblxuXHRcdGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRzdGFydDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIGlzQW5pbWF0aW5nID09PSB0cnVlICkgcmV0dXJuO1xuXHRcdFx0aWYgKCBhbmltYXRpb25Mb29wID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRjb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZSggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IHRydWU7XG5cblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdHNldEFuaW1hdGlvbkxvb3A6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdGFuaW1hdGlvbkxvb3AgPSBjYWxsYmFjaztcblxuXHRcdH0sXG5cblx0XHRzZXRDb250ZXh0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb250ZXh0ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xBdHRyaWJ1dGVzKCBnbCApIHtcblxuXHR2YXIgYnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlQnVmZmVyKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0dmFyIHVzYWdlID0gYXR0cmlidXRlLmR5bmFtaWMgPyAzNTA0OCA6IDM1MDQ0O1xuXG5cdFx0dmFyIGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7XG5cdFx0Z2wuYnVmZmVyRGF0YSggYnVmZmVyVHlwZSwgYXJyYXksIHVzYWdlICk7XG5cblx0XHRhdHRyaWJ1dGUub25VcGxvYWRDYWxsYmFjaygpO1xuXG5cdFx0dmFyIHR5cGUgPSA1MTI2O1xuXG5cdFx0aWYgKCBhcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjY7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xBdHRyaWJ1dGVzOiBVbnN1cHBvcnRlZCBkYXRhIGJ1ZmZlciBmb3JtYXQ6IEZsb2F0NjRBcnJheS4nICk7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMztcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjI7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNTtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjA7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTIxO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGJ1ZmZlcjogYnVmZmVyLFxuXHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdGJ5dGVzUGVyRWxlbWVudDogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHR2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUJ1ZmZlciggYnVmZmVyLCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0dmFyIHVwZGF0ZVJhbmdlID0gYXR0cmlidXRlLnVwZGF0ZVJhbmdlO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5keW5hbWljID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuYnVmZmVyRGF0YSggYnVmZmVyVHlwZSwgYXJyYXksIDM1MDQ0ICk7XG5cblx0XHR9IGVsc2UgaWYgKCB1cGRhdGVSYW5nZS5jb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHQvLyBOb3QgdXNpbmcgdXBkYXRlIHJhbmdlc1xuXG5cdFx0XHRnbC5idWZmZXJTdWJEYXRhKCBidWZmZXJUeXBlLCAwLCBhcnJheSApO1xuXG5cdFx0fSBlbHNlIGlmICggdXBkYXRlUmFuZ2UuY291bnQgPT09IDAgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTE9iamVjdHMudXBkYXRlQnVmZmVyOiBkeW5hbWljIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSBtYXJrZWQgYXMgbmVlZHNVcGRhdGUgYnV0IHVwZGF0ZVJhbmdlLmNvdW50IGlzIDAsIGVuc3VyZSB5b3UgYXJlIHVzaW5nIHNldCBtZXRob2RzIG9yIHVwZGF0aW5nIG1hbnVhbGx5LicgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIHVwZGF0ZVJhbmdlLm9mZnNldCAqIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0XHRhcnJheS5zdWJhcnJheSggdXBkYXRlUmFuZ2Uub2Zmc2V0LCB1cGRhdGVSYW5nZS5vZmZzZXQgKyB1cGRhdGVSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdHVwZGF0ZVJhbmdlLmNvdW50ID0gLSAxOyAvLyByZXNldCByYW5nZVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGdldCggYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0cmV0dXJuIGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHR2YXIgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSApIHtcblxuXHRcdFx0Z2wuZGVsZXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciApO1xuXG5cdFx0XHRidWZmZXJzLmRlbGV0ZSggYXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggYXR0cmlidXRlLCBidWZmZXJUeXBlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0dmFyIGRhdGEgPSBidWZmZXJzLmdldCggYXR0cmlidXRlICk7XG5cblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YnVmZmVycy5zZXQoIGF0dHJpYnV0ZSwgY3JlYXRlQnVmZmVyKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSApO1xuXG5cdFx0fSBlbHNlIGlmICggZGF0YS52ZXJzaW9uIDwgYXR0cmlidXRlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlciggZGF0YS5idWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApO1xuXG5cdFx0XHRkYXRhLnZlcnNpb24gPSBhdHRyaWJ1dGUudmVyc2lvbjtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZ2V0LFxuXHRcdHJlbW92ZTogcmVtb3ZlLFxuXHRcdHVwZGF0ZTogdXBkYXRlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFBsYW5lR2VvbWV0cnlcblxuZnVuY3Rpb24gUGxhbmVHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblBsYW5lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5QbGFuZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYW5lR2VvbWV0cnk7XG5cbi8vIFBsYW5lQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUGxhbmVCdWZmZXJHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXG5cdH07XG5cblx0d2lkdGggPSB3aWR0aCB8fCAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblxuXHR2YXIgd2lkdGhfaGFsZiA9IHdpZHRoIC8gMjtcblx0dmFyIGhlaWdodF9oYWxmID0gaGVpZ2h0IC8gMjtcblxuXHR2YXIgZ3JpZFggPSBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICkgfHwgMTtcblx0dmFyIGdyaWRZID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCAxO1xuXG5cdHZhciBncmlkWDEgPSBncmlkWCArIDE7XG5cdHZhciBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0dmFyIHNlZ21lbnRfd2lkdGggPSB3aWR0aCAvIGdyaWRYO1xuXHR2YXIgc2VnbWVudF9oZWlnaHQgPSBoZWlnaHQgLyBncmlkWTtcblxuXHR2YXIgaXgsIGl5O1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdHZhciB5ID0gaXkgKiBzZWdtZW50X2hlaWdodCAtIGhlaWdodF9oYWxmO1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7XG5cblx0XHRcdHZhciB4ID0gaXggKiBzZWdtZW50X3dpZHRoIC0gd2lkdGhfaGFsZjtcblxuXHRcdFx0dmVydGljZXMucHVzaCggeCwgLSB5LCAwICk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0dXZzLnB1c2goIDEgLSAoIGl5IC8gZ3JpZFkgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSArKyApIHtcblxuXHRcdGZvciAoIGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7XG5cblx0XHRcdHZhciBhID0gaXggKyBncmlkWDEgKiBpeTtcblx0XHRcdHZhciBiID0gaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0dmFyIGMgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdHZhciBkID0gKCBpeCArIDEgKSArIGdyaWRYMSAqIGl5O1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQmFja2dyb3VuZCggcmVuZGVyZXIsIHN0YXRlLCBvYmplY3RzLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0dmFyIGNsZWFyQ29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdHZhciBjbGVhckFscGhhID0gMDtcblxuXHR2YXIgcGxhbmVNZXNoO1xuXHR2YXIgYm94TWVzaDtcblx0Ly8gU3RvcmUgdGhlIGN1cnJlbnQgYmFja2dyb3VuZCB0ZXh0dXJlIGFuZCBpdHMgYHZlcnNpb25gXG5cdC8vIHNvIHdlIGNhbiByZWNvbXBpbGUgdGhlIG1hdGVyaWFsIGFjY29yZGluZ2x5LlxuXHR2YXIgY3VycmVudEJhY2tncm91bmQgPSBudWxsO1xuXHR2YXIgY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDtcblxuXHRmdW5jdGlvbiByZW5kZXIoIHJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIGZvcmNlQ2xlYXIgKSB7XG5cblx0XHR2YXIgYmFja2dyb3VuZCA9IHNjZW5lLmJhY2tncm91bmQ7XG5cblx0XHQvLyBJZ25vcmUgYmFja2dyb3VuZCBpbiBBUlxuXHRcdC8vIFRPRE86IFJlY29uc2lkZXIgdGhpcy5cblxuXHRcdHZhciB2ciA9IHJlbmRlcmVyLnZyO1xuXHRcdHZhciBzZXNzaW9uID0gdnIuZ2V0U2Vzc2lvbiAmJiB2ci5nZXRTZXNzaW9uKCk7XG5cblx0XHRpZiAoIHNlc3Npb24gJiYgc2Vzc2lvbi5lbnZpcm9ubWVudEJsZW5kTW9kZSA9PT0gJ2FkZGl0aXZlJyApIHtcblxuXHRcdFx0YmFja2dyb3VuZCA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJhY2tncm91bmQgPT09IG51bGwgKSB7XG5cblx0XHRcdHNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7XG5cdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IG51bGw7XG5cdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSAwO1xuXG5cdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRcdHNldENsZWFyKCBiYWNrZ3JvdW5kLCAxICk7XG5cdFx0XHRmb3JjZUNsZWFyID0gdHJ1ZTtcblx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDtcblx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IDA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlcmVyLmF1dG9DbGVhciB8fCBmb3JjZUNsZWFyICkge1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhciggcmVuZGVyZXIuYXV0b0NsZWFyQ29sb3IsIHJlbmRlcmVyLmF1dG9DbGVhckRlcHRoLCByZW5kZXJlci5hdXRvQ2xlYXJTdGVuY2lsICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJhY2tncm91bmQgJiYgKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgfHwgYmFja2dyb3VuZC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApICkge1xuXG5cdFx0XHRpZiAoIGJveE1lc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRib3hNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IEJveEJ1ZmZlckdlb21ldHJ5KCAxLCAxLCAxICksXG5cdFx0XHRcdFx0bmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnQmFja2dyb3VuZEN1YmVNYXRlcmlhbCcsXG5cdFx0XHRcdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmN1YmUudW5pZm9ybXMgKSxcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmN1YmUudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5jdWJlLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRcdFx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRmb2c6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cdFx0XHRcdGJveE1lc2guZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCAndXYnICk7XG5cblx0XHRcdFx0Ym94TWVzaC5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHlQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBlbmFibGUgY29kZSBpbmplY3Rpb24gZm9yIG5vbi1idWlsdC1pbiBtYXRlcmlhbFxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGJveE1lc2gubWF0ZXJpYWwsICdtYXAnLCB7XG5cblx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMudEN1YmUudmFsdWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKCBib3hNZXNoICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHRleHR1cmUgPSBiYWNrZ3JvdW5kLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID8gYmFja2dyb3VuZC50ZXh0dXJlIDogYmFja2dyb3VuZDtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMudEN1YmUudmFsdWUgPSB0ZXh0dXJlO1xuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy50RmxpcC52YWx1ZSA9ICggYmFja2dyb3VuZC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApID8gMSA6IC0gMTtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZCB8fFxuXHRcdFx0ICAgICBjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbiApIHtcblxuXHRcdFx0XHRib3hNZXNoLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdFxuXHRcdFx0cmVuZGVyTGlzdC51bnNoaWZ0KCBib3hNZXNoLCBib3hNZXNoLmdlb21ldHJ5LCBib3hNZXNoLm1hdGVyaWFsLCAwLCAwLCBudWxsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHBsYW5lTWVzaCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHBsYW5lTWVzaCA9IG5ldyBNZXNoKFxuXHRcdFx0XHRcdG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KCAyLCAyICksXG5cdFx0XHRcdFx0bmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnQmFja2dyb3VuZE1hdGVyaWFsJyxcblx0XHRcdFx0XHRcdHVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBTaGFkZXJMaWIuYmFja2dyb3VuZC51bmlmb3JtcyApLFxuXHRcdFx0XHRcdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZC52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmQuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRcdFx0XHRzaWRlOiBGcm9udFNpZGUsXG5cdFx0XHRcdFx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRmb2c6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0cGxhbmVNZXNoLmdlb21ldHJ5LnJlbW92ZUF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcblxuXHRcdFx0XHQvLyBlbmFibGUgY29kZSBpbmplY3Rpb24gZm9yIG5vbi1idWlsdC1pbiBtYXRlcmlhbFxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHBsYW5lTWVzaC5tYXRlcmlhbCwgJ21hcCcsIHtcblxuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy50MkQudmFsdWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKCBwbGFuZU1lc2ggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudDJELnZhbHVlID0gYmFja2dyb3VuZDtcblxuXHRcdFx0aWYgKCBiYWNrZ3JvdW5kLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0YmFja2dyb3VuZC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggYmFja2dyb3VuZC5tYXRyaXggKTtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZCB8fFxuXHRcdFx0XHQgICBjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IGJhY2tncm91bmQudmVyc2lvbiApIHtcblxuXHRcdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gYmFja2dyb3VuZC52ZXJzaW9uO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0Ly8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3Rcblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdCggcGxhbmVNZXNoLCBwbGFuZU1lc2guZ2VvbWV0cnksIHBsYW5lTWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDbGVhciggY29sb3IsIGFscGhhICkge1xuXG5cdFx0c3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhciggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiwgYWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0Q2xlYXJDb2xvcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2xlYXJDb2xvcjtcblxuXHRcdH0sXG5cdFx0c2V0Q2xlYXJDb2xvcjogZnVuY3Rpb24gKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHRcdGNsZWFyQ29sb3Iuc2V0KCBjb2xvciApO1xuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhICE9PSB1bmRlZmluZWQgPyBhbHBoYSA6IDE7XG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSxcblx0XHRnZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjbGVhckFscGhhO1xuXG5cdFx0fSxcblx0XHRzZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoIGFscGhhICkge1xuXG5cdFx0XHRjbGVhckFscGhhID0gYWxwaGE7XG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSxcblx0XHRyZW5kZXI6IHJlbmRlclxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQnVmZmVyUmVuZGVyZXIoIGdsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIG1vZGU7XG5cblx0ZnVuY3Rpb24gc2V0TW9kZSggdmFsdWUgKSB7XG5cblx0XHRtb2RlID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Z2wuZHJhd0FycmF5cyggbW9kZSwgc3RhcnQsIGNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBnZW9tZXRyeSwgc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBnbDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRleHRlbnNpb25bIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/ICdkcmF3QXJyYXlzSW5zdGFuY2VkJyA6ICdkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUnIF0oIG1vZGUsIHN0YXJ0LCBjb3VudCwgZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgKTtcblxuXHR9XG5cblx0Ly9cblxuXHR0aGlzLnNldE1vZGUgPSBzZXRNb2RlO1xuXHR0aGlzLnJlbmRlciA9IHJlbmRlcjtcblx0dGhpcy5yZW5kZXJJbnN0YW5jZXMgPSByZW5kZXJJbnN0YW5jZXM7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQ2FwYWJpbGl0aWVzKCBnbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycyApIHtcblxuXHR2YXIgbWF4QW5pc290cm9weTtcblxuXHRmdW5jdGlvbiBnZXRNYXhBbmlzb3Ryb3B5KCkge1xuXG5cdFx0aWYgKCBtYXhBbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSByZXR1cm4gbWF4QW5pc290cm9weTtcblxuXHRcdHZhciBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTtcblxuXHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRtYXhBbmlzb3Ryb3B5ID0gZ2wuZ2V0UGFyYW1ldGVyKCBleHRlbnNpb24uTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtYXhBbmlzb3Ryb3B5ID0gMDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXhBbmlzb3Ryb3B5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApIHtcblxuXHRcdGlmICggcHJlY2lzaW9uID09PSAnaGlnaHAnICkge1xuXG5cdFx0XHRpZiAoIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzMsIDM2MzM4ICkucHJlY2lzaW9uID4gMCAmJlxuXHRcdFx0ICAgICBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIDM1NjMyLCAzNjMzOCApLnByZWNpc2lvbiA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuICdoaWdocCc7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJlY2lzaW9uID0gJ21lZGl1bXAnO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwcmVjaXNpb24gPT09ICdtZWRpdW1wJyApIHtcblxuXHRcdFx0aWYgKCBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIDM1NjMzLCAzNjMzNyApLnByZWNpc2lvbiA+IDAgJiZcblx0XHRcdCAgICAgZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMiwgMzYzMzcgKS5wcmVjaXNpb24gPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiAnbWVkaXVtcCc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiAnbG93cCc7XG5cblx0fVxuXG5cdHZhciBpc1dlYkdMMiA9IHR5cGVvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ICE9PSAndW5kZWZpbmVkJyAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG5cblx0dmFyIHByZWNpc2lvbiA9IHBhcmFtZXRlcnMucHJlY2lzaW9uICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZWNpc2lvbiA6ICdoaWdocCc7XG5cdHZhciBtYXhQcmVjaXNpb24gPSBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApO1xuXG5cdGlmICggbWF4UHJlY2lzaW9uICE9PSBwcmVjaXNpb24gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOicsIHByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgbWF4UHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7XG5cdFx0cHJlY2lzaW9uID0gbWF4UHJlY2lzaW9uO1xuXG5cdH1cblxuXHR2YXIgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9PT0gdHJ1ZTtcblxuXHR2YXIgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM0OTMwICk7XG5cdHZhciBtYXhWZXJ0ZXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzU2NjAgKTtcblx0dmFyIG1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCAzMzc5ICk7XG5cdHZhciBtYXhDdWJlbWFwU2l6ZSA9IGdsLmdldFBhcmFtZXRlciggMzQwNzYgKTtcblxuXHR2YXIgbWF4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MjEgKTtcblx0dmFyIG1heFZlcnRleFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0NyApO1xuXHR2YXIgbWF4VmFyeWluZ3MgPSBnbC5nZXRQYXJhbWV0ZXIoIDM2MzQ4ICk7XG5cdHZhciBtYXhGcmFnbWVudFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0OSApO1xuXG5cdHZhciB2ZXJ0ZXhUZXh0dXJlcyA9IG1heFZlcnRleFRleHR1cmVzID4gMDtcblx0dmFyIGZsb2F0RnJhZ21lbnRUZXh0dXJlcyA9IGlzV2ViR0wyIHx8ICEhIGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cdHZhciBmbG9hdFZlcnRleFRleHR1cmVzID0gdmVydGV4VGV4dHVyZXMgJiYgZmxvYXRGcmFnbWVudFRleHR1cmVzO1xuXG5cdHZhciBtYXhTYW1wbGVzID0gaXNXZWJHTDIgPyBnbC5nZXRQYXJhbWV0ZXIoIDM2MTgzICkgOiAwO1xuXG5cdHJldHVybiB7XG5cblx0XHRpc1dlYkdMMjogaXNXZWJHTDIsXG5cblx0XHRnZXRNYXhBbmlzb3Ryb3B5OiBnZXRNYXhBbmlzb3Ryb3B5LFxuXHRcdGdldE1heFByZWNpc2lvbjogZ2V0TWF4UHJlY2lzaW9uLFxuXG5cdFx0cHJlY2lzaW9uOiBwcmVjaXNpb24sXG5cdFx0bG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcixcblxuXHRcdG1heFRleHR1cmVzOiBtYXhUZXh0dXJlcyxcblx0XHRtYXhWZXJ0ZXhUZXh0dXJlczogbWF4VmVydGV4VGV4dHVyZXMsXG5cdFx0bWF4VGV4dHVyZVNpemU6IG1heFRleHR1cmVTaXplLFxuXHRcdG1heEN1YmVtYXBTaXplOiBtYXhDdWJlbWFwU2l6ZSxcblxuXHRcdG1heEF0dHJpYnV0ZXM6IG1heEF0dHJpYnV0ZXMsXG5cdFx0bWF4VmVydGV4VW5pZm9ybXM6IG1heFZlcnRleFVuaWZvcm1zLFxuXHRcdG1heFZhcnlpbmdzOiBtYXhWYXJ5aW5ncyxcblx0XHRtYXhGcmFnbWVudFVuaWZvcm1zOiBtYXhGcmFnbWVudFVuaWZvcm1zLFxuXG5cdFx0dmVydGV4VGV4dHVyZXM6IHZlcnRleFRleHR1cmVzLFxuXHRcdGZsb2F0RnJhZ21lbnRUZXh0dXJlczogZmxvYXRGcmFnbWVudFRleHR1cmVzLFxuXHRcdGZsb2F0VmVydGV4VGV4dHVyZXM6IGZsb2F0VmVydGV4VGV4dHVyZXMsXG5cblx0XHRtYXhTYW1wbGVzOiBtYXhTYW1wbGVzXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTENsaXBwaW5nKCkge1xuXG5cdHZhciBzY29wZSA9IHRoaXMsXG5cblx0XHRnbG9iYWxTdGF0ZSA9IG51bGwsXG5cdFx0bnVtR2xvYmFsUGxhbmVzID0gMCxcblx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLFxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZSxcblxuXHRcdHBsYW5lID0gbmV3IFBsYW5lKCksXG5cdFx0dmlld05vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCksXG5cblx0XHR1bmlmb3JtID0geyB2YWx1ZTogbnVsbCwgbmVlZHNVcGRhdGU6IGZhbHNlIH07XG5cblx0dGhpcy51bmlmb3JtID0gdW5pZm9ybTtcblx0dGhpcy5udW1QbGFuZXMgPSAwO1xuXHR0aGlzLm51bUludGVyc2VjdGlvbiA9IDA7XG5cblx0dGhpcy5pbml0ID0gZnVuY3Rpb24gKCBwbGFuZXMsIGVuYWJsZUxvY2FsQ2xpcHBpbmcsIGNhbWVyYSApIHtcblxuXHRcdHZhciBlbmFibGVkID1cblx0XHRcdHBsYW5lcy5sZW5ndGggIT09IDAgfHxcblx0XHRcdGVuYWJsZUxvY2FsQ2xpcHBpbmcgfHxcblx0XHRcdC8vIGVuYWJsZSBzdGF0ZSBvZiBwcmV2aW91cyBmcmFtZSAtIHRoZSBjbGlwcGluZyBjb2RlIGhhcyB0b1xuXHRcdFx0Ly8gcnVuIGFub3RoZXIgZnJhbWUgaW4gb3JkZXIgdG8gcmVzZXQgdGhlIHN0YXRlOlxuXHRcdFx0bnVtR2xvYmFsUGxhbmVzICE9PSAwIHx8XG5cdFx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZDtcblxuXHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZW5hYmxlTG9jYWxDbGlwcGluZztcblxuXHRcdGdsb2JhbFN0YXRlID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIDAgKTtcblx0XHRudW1HbG9iYWxQbGFuZXMgPSBwbGFuZXMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIGVuYWJsZWQ7XG5cblx0fTtcblxuXHR0aGlzLmJlZ2luU2hhZG93cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSB0cnVlO1xuXHRcdHByb2plY3RQbGFuZXMoIG51bGwgKTtcblxuXHR9O1xuXG5cdHRoaXMuZW5kU2hhZG93cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZTtcblx0XHRyZXNldEdsb2JhbFN0YXRlKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldFN0YXRlID0gZnVuY3Rpb24gKCBwbGFuZXMsIGNsaXBJbnRlcnNlY3Rpb24sIGNsaXBTaGFkb3dzLCBjYW1lcmEsIGNhY2hlLCBmcm9tQ2FjaGUgKSB7XG5cblx0XHRpZiAoICEgbG9jYWxDbGlwcGluZ0VuYWJsZWQgfHwgcGxhbmVzID09PSBudWxsIHx8IHBsYW5lcy5sZW5ndGggPT09IDAgfHwgcmVuZGVyaW5nU2hhZG93cyAmJiAhIGNsaXBTaGFkb3dzICkge1xuXG5cdFx0XHQvLyB0aGVyZSdzIG5vIGxvY2FsIGNsaXBwaW5nXG5cblx0XHRcdGlmICggcmVuZGVyaW5nU2hhZG93cyApIHtcblxuXHRcdFx0XHQvLyB0aGVyZSdzIG5vIGdsb2JhbCBjbGlwcGluZ1xuXG5cdFx0XHRcdHByb2plY3RQbGFuZXMoIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXNldEdsb2JhbFN0YXRlKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBuR2xvYmFsID0gcmVuZGVyaW5nU2hhZG93cyA/IDAgOiBudW1HbG9iYWxQbGFuZXMsXG5cdFx0XHRcdGxHbG9iYWwgPSBuR2xvYmFsICogNCxcblxuXHRcdFx0XHRkc3RBcnJheSA9IGNhY2hlLmNsaXBwaW5nU3RhdGUgfHwgbnVsbDtcblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGRzdEFycmF5OyAvLyBlbnN1cmUgdW5pcXVlIHN0YXRlXG5cblx0XHRcdGRzdEFycmF5ID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGxHbG9iYWwsIGZyb21DYWNoZSApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IGxHbG9iYWw7ICsrIGkgKSB7XG5cblx0XHRcdFx0ZHN0QXJyYXlbIGkgXSA9IGdsb2JhbFN0YXRlWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FjaGUuY2xpcHBpbmdTdGF0ZSA9IGRzdEFycmF5O1xuXHRcdFx0dGhpcy5udW1JbnRlcnNlY3Rpb24gPSBjbGlwSW50ZXJzZWN0aW9uID8gdGhpcy5udW1QbGFuZXMgOiAwO1xuXHRcdFx0dGhpcy5udW1QbGFuZXMgKz0gbkdsb2JhbDtcblxuXHRcdH1cblxuXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVzZXRHbG9iYWxTdGF0ZSgpIHtcblxuXHRcdGlmICggdW5pZm9ybS52YWx1ZSAhPT0gZ2xvYmFsU3RhdGUgKSB7XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBnbG9iYWxTdGF0ZTtcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSBudW1HbG9iYWxQbGFuZXMgPiAwO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubnVtUGxhbmVzID0gbnVtR2xvYmFsUGxhbmVzO1xuXHRcdHNjb3BlLm51bUludGVyc2VjdGlvbiA9IDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCBkc3RPZmZzZXQsIHNraXBUcmFuc2Zvcm0gKSB7XG5cblx0XHR2YXIgblBsYW5lcyA9IHBsYW5lcyAhPT0gbnVsbCA/IHBsYW5lcy5sZW5ndGggOiAwLFxuXHRcdFx0ZHN0QXJyYXkgPSBudWxsO1xuXG5cdFx0aWYgKCBuUGxhbmVzICE9PSAwICkge1xuXG5cdFx0XHRkc3RBcnJheSA9IHVuaWZvcm0udmFsdWU7XG5cblx0XHRcdGlmICggc2tpcFRyYW5zZm9ybSAhPT0gdHJ1ZSB8fCBkc3RBcnJheSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR2YXIgZmxhdFNpemUgPSBkc3RPZmZzZXQgKyBuUGxhbmVzICogNCxcblx0XHRcdFx0XHR2aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdFx0XHR2aWV3Tm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGlmICggZHN0QXJyYXkgPT09IG51bGwgfHwgZHN0QXJyYXkubGVuZ3RoIDwgZmxhdFNpemUgKSB7XG5cblx0XHRcdFx0XHRkc3RBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIGZsYXRTaXplICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaTQgPSBkc3RPZmZzZXQ7IGkgIT09IG5QbGFuZXM7ICsrIGksIGk0ICs9IDQgKSB7XG5cblx0XHRcdFx0XHRwbGFuZS5jb3B5KCBwbGFuZXNbIGkgXSApLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCwgdmlld05vcm1hbE1hdHJpeCApO1xuXG5cdFx0XHRcdFx0cGxhbmUubm9ybWFsLnRvQXJyYXkoIGRzdEFycmF5LCBpNCApO1xuXHRcdFx0XHRcdGRzdEFycmF5WyBpNCArIDMgXSA9IHBsYW5lLmNvbnN0YW50O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7XG5cdFx0XHR1bmlmb3JtLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm51bVBsYW5lcyA9IG5QbGFuZXM7XG5cblx0XHRyZXR1cm4gZHN0QXJyYXk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEV4dGVuc2lvbnMoIGdsICkge1xuXG5cdHZhciBleHRlbnNpb25zID0ge307XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbnNbIG5hbWUgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBleHRlbnNpb25zWyBuYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdFx0c3dpdGNoICggbmFtZSApIHtcblxuXHRcdFx0XHRjYXNlICdXRUJHTF9kZXB0aF90ZXh0dXJlJzpcblx0XHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZXB0aF90ZXh0dXJlJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9kZXB0aF90ZXh0dXJlJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9XRUJHTF9kZXB0aF90ZXh0dXJlJyApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Yyc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnTU9aX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnOlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCBuYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIG5hbWUgKyAnIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRleHRlbnNpb25zWyBuYW1lIF0gPSBleHRlbnNpb247XG5cblx0XHRcdHJldHVybiBleHRlbnNpb247XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xHZW9tZXRyaWVzKCBnbCwgYXR0cmlidXRlcywgaW5mbyApIHtcblxuXHR2YXIgZ2VvbWV0cmllcyA9IHt9O1xuXHR2YXIgd2lyZWZyYW1lQXR0cmlidXRlcyA9IHt9O1xuXG5cdGZ1bmN0aW9uIG9uR2VvbWV0cnlEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IGV2ZW50LnRhcmdldDtcblx0XHR2YXIgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0aWYgKCBidWZmZXJnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGJ1ZmZlcmdlb21ldHJ5LmluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBidWZmZXJnZW9tZXRyeS5hdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggYnVmZmVyZ2VvbWV0cnkuYXR0cmlidXRlc1sgbmFtZSBdICk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7XG5cblx0XHRkZWxldGUgZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdHZhciBhdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzWyBidWZmZXJnZW9tZXRyeS5pZCBdO1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBhdHRyaWJ1dGUgKTtcblx0XHRcdGRlbGV0ZSB3aXJlZnJhbWVBdHRyaWJ1dGVzWyBidWZmZXJnZW9tZXRyeS5pZCBdO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGluZm8ubWVtb3J5Lmdlb21ldHJpZXMgLS07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldCggb2JqZWN0LCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIGJ1ZmZlcmdlb21ldHJ5ICkgcmV0dXJuIGJ1ZmZlcmdlb21ldHJ5O1xuXG5cdFx0Z2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkdlb21ldHJ5RGlzcG9zZSApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJ5O1xuXG5cdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5fYnVmZmVyR2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRnZW9tZXRyeS5fYnVmZmVyR2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKS5zZXRGcm9tT2JqZWN0KCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJpZXNbIGdlb21ldHJ5LmlkIF0gPSBidWZmZXJnZW9tZXRyeTtcblxuXHRcdGluZm8ubWVtb3J5Lmdlb21ldHJpZXMgKys7XG5cblx0XHRyZXR1cm4gYnVmZmVyZ2VvbWV0cnk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHR2YXIgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBpbmRleCwgMzQ5NjMgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBuYW1lIGluIGdlb21ldHJ5QXR0cmlidXRlcyApIHtcblxuXHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIGdlb21ldHJ5QXR0cmlidXRlc1sgbmFtZSBdLCAzNDk2MiApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbW9ycGggdGFyZ2V0c1xuXG5cdFx0dmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGZvciAoIHZhciBuYW1lIGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIGFycmF5WyBpIF0sIDM0OTYyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBpbmRpY2VzID0gW107XG5cblx0XHR2YXIgZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdHZhciBnZW9tZXRyeVBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHR2YXIgdmVyc2lvbiA9IDA7XG5cblx0XHRpZiAoIGdlb21ldHJ5SW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdHZhciBhcnJheSA9IGdlb21ldHJ5SW5kZXguYXJyYXk7XG5cdFx0XHR2ZXJzaW9uID0gZ2VvbWV0cnlJbmRleC52ZXJzaW9uO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0dmFyIGEgPSBhcnJheVsgaSArIDAgXTtcblx0XHRcdFx0dmFyIGIgPSBhcnJheVsgaSArIDEgXTtcblx0XHRcdFx0dmFyIGMgPSBhcnJheVsgaSArIDIgXTtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gZ2VvbWV0cnlQb3NpdGlvbi5hcnJheTtcblx0XHRcdHZlcnNpb24gPSBnZW9tZXRyeVBvc2l0aW9uLnZlcnNpb247XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9ICggYXJyYXkubGVuZ3RoIC8gMyApIC0gMTsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHR2YXIgYSA9IGkgKyAwO1xuXHRcdFx0XHR2YXIgYiA9IGkgKyAxO1xuXHRcdFx0XHR2YXIgYyA9IGkgKyAyO1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgYXR0cmlidXRlID0gbmV3ICggYXJyYXlNYXgoIGluZGljZXMgKSA+IDY1NTM1ID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGljZXMsIDEgKTtcblx0XHRhdHRyaWJ1dGUudmVyc2lvbiA9IHZlcnNpb247XG5cblx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggYXR0cmlidXRlLCAzNDk2MyApO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBwcmV2aW91c0F0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIHByZXZpb3VzQXR0cmlidXRlICkgYXR0cmlidXRlcy5yZW1vdmUoIHByZXZpb3VzQXR0cmlidXRlICk7XG5cblx0XHQvL1xuXG5cdFx0d2lyZWZyYW1lQXR0cmlidXRlc1sgZ2VvbWV0cnkuaWQgXSA9IGF0dHJpYnV0ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBjdXJyZW50QXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggY3VycmVudEF0dHJpYnV0ZSApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5SW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeUluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdC8vIGlmIHRoZSBhdHRyaWJ1dGUgaXMgb2Jzb2xldGUsIGNyZWF0ZSBhIG5ldyBvbmVcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRBdHRyaWJ1dGUudmVyc2lvbiA8IGdlb21ldHJ5SW5kZXgudmVyc2lvbiApIHtcblxuXHRcdFx0XHRcdHVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB3aXJlZnJhbWVBdHRyaWJ1dGVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBnZXQsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cblx0XHRnZXRXaXJlZnJhbWVBdHRyaWJ1dGU6IGdldFdpcmVmcmFtZUF0dHJpYnV0ZVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyKCBnbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICkge1xuXG5cdHZhciBtb2RlO1xuXG5cdGZ1bmN0aW9uIHNldE1vZGUoIHZhbHVlICkge1xuXG5cdFx0bW9kZSA9IHZhbHVlO1xuXG5cdH1cblxuXHR2YXIgdHlwZSwgYnl0ZXNQZXJFbGVtZW50O1xuXG5cdGZ1bmN0aW9uIHNldEluZGV4KCB2YWx1ZSApIHtcblxuXHRcdHR5cGUgPSB2YWx1ZS50eXBlO1xuXHRcdGJ5dGVzUGVyRWxlbWVudCA9IHZhbHVlLmJ5dGVzUGVyRWxlbWVudDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3RWxlbWVudHMoIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlckluc3RhbmNlcyggZ2VvbWV0cnksIHN0YXJ0LCBjb3VudCApIHtcblxuXHRcdHZhciBleHRlbnNpb247XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZ2w7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRleHRlbnNpb25bIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/ICdkcmF3RWxlbWVudHNJbnN0YW5jZWQnIDogJ2RyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFJyBdKCBtb2RlLCBjb3VudCwgdHlwZSwgc3RhcnQgKiBieXRlc1BlckVsZW1lbnQsIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ICk7XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5zZXRNb2RlID0gc2V0TW9kZTtcblx0dGhpcy5zZXRJbmRleCA9IHNldEluZGV4O1xuXHR0aGlzLnJlbmRlciA9IHJlbmRlcjtcblx0dGhpcy5yZW5kZXJJbnN0YW5jZXMgPSByZW5kZXJJbnN0YW5jZXM7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMSW5mbyggZ2wgKSB7XG5cblx0dmFyIG1lbW9yeSA9IHtcblx0XHRnZW9tZXRyaWVzOiAwLFxuXHRcdHRleHR1cmVzOiAwXG5cdH07XG5cblx0dmFyIHJlbmRlciA9IHtcblx0XHRmcmFtZTogMCxcblx0XHRjYWxsczogMCxcblx0XHR0cmlhbmdsZXM6IDAsXG5cdFx0cG9pbnRzOiAwLFxuXHRcdGxpbmVzOiAwXG5cdH07XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBjb3VudCwgbW9kZSwgaW5zdGFuY2VDb3VudCApIHtcblxuXHRcdGluc3RhbmNlQ291bnQgPSBpbnN0YW5jZUNvdW50IHx8IDE7XG5cblx0XHRyZW5kZXIuY2FsbHMgKys7XG5cblx0XHRzd2l0Y2ggKCBtb2RlICkge1xuXG5cdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdHJlbmRlci50cmlhbmdsZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAzICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDU6XG5cdFx0XHRjYXNlIDY6XG5cdFx0XHRcdHJlbmRlci50cmlhbmdsZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLSAyICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdHJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAvIDIgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC0gMSApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqIGNvdW50O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRyZW5kZXIucG9pbnRzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEluZm86IFVua25vd24gZHJhdyBtb2RlOicsIG1vZGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0cmVuZGVyLmZyYW1lICsrO1xuXHRcdHJlbmRlci5jYWxscyA9IDA7XG5cdFx0cmVuZGVyLnRyaWFuZ2xlcyA9IDA7XG5cdFx0cmVuZGVyLnBvaW50cyA9IDA7XG5cdFx0cmVuZGVyLmxpbmVzID0gMDtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRtZW1vcnk6IG1lbW9yeSxcblx0XHRyZW5kZXI6IHJlbmRlcixcblx0XHRwcm9ncmFtczogbnVsbCxcblx0XHRhdXRvUmVzZXQ6IHRydWUsXG5cdFx0cmVzZXQ6IHJlc2V0LFxuXHRcdHVwZGF0ZTogdXBkYXRlXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIGFic051bWVyaWNhbFNvcnQoIGEsIGIgKSB7XG5cblx0cmV0dXJuIE1hdGguYWJzKCBiWyAxIF0gKSAtIE1hdGguYWJzKCBhWyAxIF0gKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTE1vcnBodGFyZ2V0cyggZ2wgKSB7XG5cblx0dmFyIGluZmx1ZW5jZXNMaXN0ID0ge307XG5cdHZhciBtb3JwaEluZmx1ZW5jZXMgPSBuZXcgRmxvYXQzMkFycmF5KCA4ICk7XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcHJvZ3JhbSApIHtcblxuXHRcdHZhciBvYmplY3RJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRcdHZhciBsZW5ndGggPSBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aDtcblxuXHRcdHZhciBpbmZsdWVuY2VzID0gaW5mbHVlbmNlc0xpc3RbIGdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIGluZmx1ZW5jZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gaW5pdGlhbGlzZSBsaXN0XG5cblx0XHRcdGluZmx1ZW5jZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGluZmx1ZW5jZXNbIGkgXSA9IFsgaSwgMCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGluZmx1ZW5jZXNMaXN0WyBnZW9tZXRyeS5pZCBdID0gaW5mbHVlbmNlcztcblxuXHRcdH1cblxuXHRcdHZhciBtb3JwaFRhcmdldHMgPSBtYXRlcmlhbC5tb3JwaFRhcmdldHMgJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdHZhciBtb3JwaE5vcm1hbHMgPSBtYXRlcmlhbC5tb3JwaE5vcm1hbHMgJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdC8vIFJlbW92ZSBjdXJyZW50IG1vcnBoQXR0cmlidXRlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaW5mbHVlbmNlID0gaW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGluZmx1ZW5jZVsgMSBdICE9PSAwICkge1xuXG5cdFx0XHRcdGlmICggbW9ycGhUYXJnZXRzICkgZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCAnbW9ycGhUYXJnZXQnICsgaSApO1xuXHRcdFx0XHRpZiAoIG1vcnBoTm9ybWFscyApIGdlb21ldHJ5LnJlbW92ZUF0dHJpYnV0ZSggJ21vcnBoTm9ybWFsJyArIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQ29sbGVjdCBpbmZsdWVuY2VzXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpbmZsdWVuY2UgPSBpbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdGluZmx1ZW5jZVsgMCBdID0gaTtcblx0XHRcdGluZmx1ZW5jZVsgMSBdID0gb2JqZWN0SW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0fVxuXG5cdFx0aW5mbHVlbmNlcy5zb3J0KCBhYnNOdW1lcmljYWxTb3J0ICk7XG5cblx0XHQvLyBBZGQgbW9ycGhBdHRyaWJ1dGVzXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA4OyBpICsrICkge1xuXG5cdFx0XHR2YXIgaW5mbHVlbmNlID0gaW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGluZmx1ZW5jZSApIHtcblxuXHRcdFx0XHR2YXIgaW5kZXggPSBpbmZsdWVuY2VbIDAgXTtcblx0XHRcdFx0dmFyIHZhbHVlID0gaW5mbHVlbmNlWyAxIF07XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRcdGlmICggbW9ycGhUYXJnZXRzICkgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnbW9ycGhUYXJnZXQnICsgaSwgbW9ycGhUYXJnZXRzWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0aWYgKCBtb3JwaE5vcm1hbHMgKSBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdtb3JwaE5vcm1hbCcgKyBpLCBtb3JwaE5vcm1hbHNbIGluZGV4IF0gKTtcblxuXHRcdFx0XHRcdG1vcnBoSW5mbHVlbmNlc1sgaSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdG1vcnBoSW5mbHVlbmNlc1sgaSBdID0gMDtcblxuXHRcdH1cblxuXHRcdHByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnLCBtb3JwaEluZmx1ZW5jZXMgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHVwZGF0ZTogdXBkYXRlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xPYmplY3RzKCBnZW9tZXRyaWVzLCBpbmZvICkge1xuXG5cdHZhciB1cGRhdGVMaXN0ID0ge307XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHR2YXIgZnJhbWUgPSBpbmZvLnJlbmRlci5mcmFtZTtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblx0XHR2YXIgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzLmdldCggb2JqZWN0LCBnZW9tZXRyeSApO1xuXG5cdFx0Ly8gVXBkYXRlIG9uY2UgcGVyIGZyYW1lXG5cblx0XHRpZiAoIHVwZGF0ZUxpc3RbIGJ1ZmZlcmdlb21ldHJ5LmlkIF0gIT09IGZyYW1lICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0YnVmZmVyZ2VvbWV0cnkudXBkYXRlRnJvbU9iamVjdCggb2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cmllcy51cGRhdGUoIGJ1ZmZlcmdlb21ldHJ5ICk7XG5cblx0XHRcdHVwZGF0ZUxpc3RbIGJ1ZmZlcmdlb21ldHJ5LmlkIF0gPSBmcmFtZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHVwZGF0ZUxpc3QgPSB7fTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2VcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDdWJlVGV4dHVyZSggaW1hZ2VzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdGltYWdlcyA9IGltYWdlcyAhPT0gdW5kZWZpbmVkID8gaW1hZ2VzIDogW107XG5cdG1hcHBpbmcgPSBtYXBwaW5nICE9PSB1bmRlZmluZWQgPyBtYXBwaW5nIDogQ3ViZVJlZmxlY3Rpb25NYXBwaW5nO1xuXHRmb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IFJHQkZvcm1hdDtcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApO1xuXG5cdHRoaXMuZmxpcFkgPSBmYWxzZTtcblxufVxuXG5DdWJlVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuQ3ViZVRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3ViZVRleHR1cmU7XG5cbkN1YmVUZXh0dXJlLnByb3RvdHlwZS5pc0N1YmVUZXh0dXJlID0gdHJ1ZTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBDdWJlVGV4dHVyZS5wcm90b3R5cGUsICdpbWFnZXMnLCB7XG5cblx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbWFnZTtcblxuXHR9LFxuXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuaW1hZ2UgPSB2YWx1ZTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIFRha2FoaXJvIGh0dHBzOi8vZ2l0aHViLmNvbS90YWthaGlyb3hcbiAqL1xuXG5mdW5jdGlvbiBEYXRhVGV4dHVyZTJEQXJyYXkoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCApO1xuXG5cdHRoaXMuaW1hZ2UgPSB7IGRhdGE6IGRhdGEsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIGRlcHRoOiBkZXB0aCB9O1xuXG5cdHRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblx0dGhpcy5taW5GaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXG5cdHRoaXMud3JhcFIgPSBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cdHRoaXMuZmxpcFkgPSBmYWxzZTtcblxufVxuXG5EYXRhVGV4dHVyZTJEQXJyYXkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkRhdGFUZXh0dXJlMkRBcnJheS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEYXRhVGV4dHVyZTJEQXJyYXk7XG5EYXRhVGV4dHVyZTJEQXJyYXkucHJvdG90eXBlLmlzRGF0YVRleHR1cmUyREFycmF5ID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIEFydHVyIFRyemVzaW9rXG4gKi9cblxuZnVuY3Rpb24gRGF0YVRleHR1cmUzRCggZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggKSB7XG5cblx0Ly8gV2UncmUgZ29pbmcgdG8gYWRkIC5zZXRYWFgoKSBtZXRob2RzIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgbGF0ZXIuXG5cdC8vIFVzZXJzIGNhbiBzdGlsbCBzZXQgaW4gRGF0YVRleHR1cmUzRCBkaXJlY3RseS5cblx0Ly9cblx0Ly9cdHZhciB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGFUZXh0dXJlM0QoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XG5cdC8vIFx0dGV4dHVyZS5hbmlzb3Ryb3B5ID0gMTY7XG5cdC8vXG5cdC8vIFNlZSAjMTQ4MzlcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIG51bGwgKTtcblxuXHR0aGlzLmltYWdlID0geyBkYXRhOiBkYXRhLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBkZXB0aDogZGVwdGggfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cbn1cblxuRGF0YVRleHR1cmUzRC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuRGF0YVRleHR1cmUzRC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEYXRhVGV4dHVyZTNEO1xuRGF0YVRleHR1cmUzRC5wcm90b3R5cGUuaXNEYXRhVGV4dHVyZTNEID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIHRzY2h3XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqXG4gKiBVbmlmb3JtcyBvZiBhIHByb2dyYW0uXG4gKiBUaG9zZSBmb3JtIGEgdHJlZSBzdHJ1Y3R1cmUgd2l0aCBhIHNwZWNpYWwgdG9wLWxldmVsIGNvbnRhaW5lciBmb3IgdGhlIHJvb3QsXG4gKiB3aGljaCB5b3UgZ2V0IGJ5IGNhbGxpbmcgJ25ldyBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSApJy5cbiAqXG4gKlxuICogUHJvcGVydGllcyBvZiBpbm5lciBub2RlcyBpbmNsdWRpbmcgdGhlIHRvcC1sZXZlbCBjb250YWluZXI6XG4gKlxuICogLnNlcSAtIGFycmF5IG9mIG5lc3RlZCB1bmlmb3Jtc1xuICogLm1hcCAtIG5lc3RlZCB1bmlmb3JtcyBieSBuYW1lXG4gKlxuICpcbiAqIE1ldGhvZHMgb2YgYWxsIG5vZGVzIGV4Y2VwdCB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcbiAqXG4gKiAuc2V0VmFsdWUoIGdsLCB2YWx1ZSwgW3RleHR1cmVzXSApXG4gKlxuICogXHRcdHVwbG9hZHMgYSB1bmlmb3JtIHZhbHVlKHMpXG4gKiAgXHR0aGUgJ3RleHR1cmVzJyBwYXJhbWV0ZXIgaXMgbmVlZGVkIGZvciBzYW1wbGVyIHVuaWZvcm1zXG4gKlxuICpcbiAqIFN0YXRpYyBtZXRob2RzIG9mIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyICh0ZXh0dXJlcyBmYWN0b3JpemF0aW9ucyk6XG4gKlxuICogLnVwbG9hZCggZ2wsIHNlcSwgdmFsdWVzLCB0ZXh0dXJlcyApXG4gKlxuICogXHRcdHNldHMgdW5pZm9ybXMgaW4gJ3NlcScgdG8gJ3ZhbHVlc1tpZF0udmFsdWUnXG4gKlxuICogLnNlcVdpdGhWYWx1ZSggc2VxLCB2YWx1ZXMgKSA6IGZpbHRlcmVkU2VxXG4gKlxuICogXHRcdGZpbHRlcnMgJ3NlcScgZW50cmllcyB3aXRoIGNvcnJlc3BvbmRpbmcgZW50cnkgaW4gdmFsdWVzXG4gKlxuICpcbiAqIE1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHRleHR1cmVzIGZhY3Rvcml6YXRpb25zKTpcbiAqXG4gKiAuc2V0VmFsdWUoIGdsLCBuYW1lLCB2YWx1ZSwgdGV4dHVyZXMgKVxuICpcbiAqIFx0XHRzZXRzIHVuaWZvcm0gd2l0aCAgbmFtZSAnbmFtZScgdG8gJ3ZhbHVlJ1xuICpcbiAqIC5zZXRPcHRpb25hbCggZ2wsIG9iaiwgcHJvcCApXG4gKlxuICogXHRcdGxpa2UgLnNldCBmb3IgYW4gb3B0aW9uYWwgcHJvcGVydHkgb2YgdGhlIG9iamVjdFxuICpcbiAqL1xuXG52YXIgZW1wdHlUZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcbnZhciBlbXB0eVRleHR1cmUyZEFycmF5ID0gbmV3IERhdGFUZXh0dXJlMkRBcnJheSgpO1xudmFyIGVtcHR5VGV4dHVyZTNkID0gbmV3IERhdGFUZXh0dXJlM0QoKTtcbnZhciBlbXB0eUN1YmVUZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCk7XG5cbi8vIC0tLSBVdGlsaXRpZXMgLS0tXG5cbi8vIEFycmF5IENhY2hlcyAocHJvdmlkZSB0eXBlZCBhcnJheXMgZm9yIHRlbXBvcmFyeSBieSBzaXplKVxuXG52YXIgYXJyYXlDYWNoZUYzMiA9IFtdO1xudmFyIGFycmF5Q2FjaGVJMzIgPSBbXTtcblxuLy8gRmxvYXQzMkFycmF5IGNhY2hlcyB1c2VkIGZvciB1cGxvYWRpbmcgTWF0cml4IHVuaWZvcm1zXG5cbnZhciBtYXQ0YXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCAxNiApO1xudmFyIG1hdDNhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDkgKTtcbnZhciBtYXQyYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCA0ICk7XG5cbi8vIEZsYXR0ZW5pbmcgZm9yIGFycmF5cyBvZiB2ZWN0b3JzIGFuZCBtYXRyaWNlc1xuXG5mdW5jdGlvbiBmbGF0dGVuKCBhcnJheSwgbkJsb2NrcywgYmxvY2tTaXplICkge1xuXG5cdHZhciBmaXJzdEVsZW0gPSBhcnJheVsgMCBdO1xuXG5cdGlmICggZmlyc3RFbGVtIDw9IDAgfHwgZmlyc3RFbGVtID4gMCApIHJldHVybiBhcnJheTtcblx0Ly8gdW5vcHRpbWl6ZWQ6ICEgaXNOYU4oIGZpcnN0RWxlbSApXG5cdC8vIHNlZSBodHRwOi8vamFja3NvbmR1bnN0YW4uY29tL2FydGljbGVzLzk4M1xuXG5cdHZhciBuID0gbkJsb2NrcyAqIGJsb2NrU2l6ZSxcblx0XHRyID0gYXJyYXlDYWNoZUYzMlsgbiBdO1xuXG5cdGlmICggciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0ciA9IG5ldyBGbG9hdDMyQXJyYXkoIG4gKTtcblx0XHRhcnJheUNhY2hlRjMyWyBuIF0gPSByO1xuXG5cdH1cblxuXHRpZiAoIG5CbG9ja3MgIT09IDAgKSB7XG5cblx0XHRmaXJzdEVsZW0udG9BcnJheSggciwgMCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAxLCBvZmZzZXQgPSAwOyBpICE9PSBuQmxvY2tzOyArKyBpICkge1xuXG5cdFx0XHRvZmZzZXQgKz0gYmxvY2tTaXplO1xuXHRcdFx0YXJyYXlbIGkgXS50b0FycmF5KCByLCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHI7XG5cbn1cblxuZnVuY3Rpb24gYXJyYXlzRXF1YWwoIGEsIGIgKSB7XG5cblx0aWYgKCBhLmxlbmd0aCAhPT0gYi5sZW5ndGggKSByZXR1cm4gZmFsc2U7XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0aWYgKCBhWyBpIF0gIT09IGJbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuZnVuY3Rpb24gY29weUFycmF5KCBhLCBiICkge1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGIubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGFbIGkgXSA9IGJbIGkgXTtcblxuXHR9XG5cbn1cblxuLy8gVGV4dHVyZSB1bml0IGFsbG9jYXRpb25cblxuZnVuY3Rpb24gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKSB7XG5cblx0dmFyIHIgPSBhcnJheUNhY2hlSTMyWyBuIF07XG5cblx0aWYgKCByID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyID0gbmV3IEludDMyQXJyYXkoIG4gKTtcblx0XHRhcnJheUNhY2hlSTMyWyBuIF0gPSByO1xuXG5cdH1cblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG47ICsrIGkgKVxuXHRcdHJbIGkgXSA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRyZXR1cm4gcjtcblxufVxuXG4vLyAtLS0gU2V0dGVycyAtLS1cblxuLy8gTm90ZTogRGVmaW5pbmcgdGhlc2UgbWV0aG9kcyBleHRlcm5hbGx5LCBiZWNhdXNlIHRoZXkgY29tZSBpbiBhIGJ1bmNoXG4vLyBhbmQgdGhpcyB3YXkgdGhlaXIgbmFtZXMgbWluaWZ5LlxuXG4vLyBTaW5nbGUgc2NhbGFyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFmKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNhY2hlWyAwIF0gPSB2O1xuXG59XG5cbi8vIFNpbmdsZSBmbG9hdCB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyZiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtMmYoIHRoaXMuYWRkciwgdi54LCB2LnkgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtMmZ2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM2YoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblxuXHRcdH1cblxuXHR9IGVsc2UgaWYgKCB2LnIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi5yIHx8IGNhY2hlWyAxIF0gIT09IHYuZyB8fCBjYWNoZVsgMiBdICE9PSB2LmIgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LnIsIHYuZywgdi5iICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2LnI7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi5nO1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuYjtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0zZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0ZiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiB8fCBjYWNoZVsgMyBdICE9PSB2LncgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm00ZiggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56LCB2LncgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXHRcdFx0Y2FjaGVbIDMgXSA9IHYudztcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgbWF0cml4IChmcm9tIGZsYXQgYXJyYXkgb3IgTWF0cml4TilcblxuZnVuY3Rpb24gc2V0VmFsdWVNMiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDJhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQyYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTMoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQzYXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0M2FycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU00KCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0NGFycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDRhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuLy8gU2luZ2xlIHRleHR1cmUgKDJEIC8gQ3ViZSlcblxuZnVuY3Rpb24gc2V0VmFsdWVUMSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNhZmVTZXRUZXh0dXJlMkQoIHYgfHwgZW1wdHlUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUMkRBcnJheTEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkRBcnJheSggdiB8fCBlbXB0eVRleHR1cmUyZEFycmF5LCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUM0QxKCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCB2IHx8IGVtcHR5VGV4dHVyZTNkLCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUNiggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNhZmVTZXRUZXh0dXJlQ3ViZSggdiB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuLy8gSW50ZWdlciAvIEJvb2xlYW4gdmVjdG9ycyBvciBhcnJheXMgdGhlcmVvZiAoYWx3YXlzIGZsYXQgYXJyYXlzKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxaSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gPT09IHYgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyaSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0yaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzaSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0zaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm00aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciB0aGUgc2luZ3VsYXIgY2FzZVxuXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZjsgLy8gRkxPQVRcblx0XHRjYXNlIDB4OGI1MDogcmV0dXJuIHNldFZhbHVlVjJmOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2Y7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZjsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVhOiByZXR1cm4gc2V0VmFsdWVNMjsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTM7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00OyAvLyBfTUFUNFxuXG5cdFx0Y2FzZSAweDhiNWU6IGNhc2UgMHg4ZDY2OiByZXR1cm4gc2V0VmFsdWVUMTsgLy8gU0FNUExFUl8yRCwgU0FNUExFUl9FWFRFUk5BTF9PRVNcblx0XHRjYXNlIDB4OGI1ZjogcmV0dXJuIHNldFZhbHVlVDNEMTsgLy8gU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4YjYwOiByZXR1cm4gc2V0VmFsdWVUNjsgLy8gU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhEQzE6IHJldHVybiBzZXRWYWx1ZVQyREFycmF5MTsgLy8gU0FNUExFUl8yRF9BUlJBWVxuXG5cdFx0Y2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpOyAvLyBfVkVDNFxuXG5cdH1cblxufVxuXG4vLyBBcnJheSBvZiBzY2FsYXJzXG5mdW5jdGlvbiBzZXRWYWx1ZVYxZkFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMWZ2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG4vLyBJbnRlZ2VyIC8gQm9vbGVhbiB2ZWN0b3JzIG9yIGFycmF5cyB0aGVyZW9mIChhbHdheXMgZmxhdCBhcnJheXMpXG5mdW5jdGlvbiBzZXRWYWx1ZVYxaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMml2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtM2l2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtNGl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5cbi8vIEFycmF5IG9mIHZlY3RvcnMgKGZsYXQgb3IgZnJvbSBUSFJFRSBjbGFzc2VzKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyZkFycmF5KCBnbCwgdiApIHtcblxuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMiApO1xuXG5cdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNmQXJyYXkoIGdsLCB2ICkge1xuXG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAzICk7XG5cblx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGZBcnJheSggZ2wsIHYgKSB7XG5cblx0dmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDQgKTtcblxuXHRnbC51bmlmb3JtNGZ2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxufVxuXG4vLyBBcnJheSBvZiBtYXRyaWNlcyAoZmxhdCBvciBmcm9tIFRIUkVFIGNsYXNlcylcblxuZnVuY3Rpb24gc2V0VmFsdWVNMkFycmF5KCBnbCwgdiApIHtcblxuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0zQXJyYXkoIGdsLCB2ICkge1xuXG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA5ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTRBcnJheSggZ2wsIHYgKSB7XG5cblx0dmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDE2ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIHRleHR1cmVzICgyRCAvIEN1YmUpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVDFBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdHZhciBuID0gdi5sZW5ndGg7XG5cblx0dmFyIHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dGV4dHVyZXMuc2FmZVNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2QXJyYXkoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHR2YXIgbiA9IHYubGVuZ3RoO1xuXG5cdHZhciB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNhZmVTZXRUZXh0dXJlQ3ViZSggdlsgaSBdIHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuLy8gSGVscGVyIHRvIHBpY2sgdGhlIHJpZ2h0IHNldHRlciBmb3IgYSBwdXJlIChib3R0b20tbGV2ZWwpIGFycmF5XG5cbmZ1bmN0aW9uIGdldFB1cmVBcnJheVNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZkFycmF5OyAvLyBGTE9BVFxuXHRcdGNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmZBcnJheTsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1MTogcmV0dXJuIHNldFZhbHVlVjNmQXJyYXk7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZkFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWE6IHJldHVybiBzZXRWYWx1ZU0yQXJyYXk7IC8vIF9NQVQyXG5cdFx0Y2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZU0zQXJyYXk7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00QXJyYXk7IC8vIF9NQVQ0XG5cblx0XHRjYXNlIDB4OGI1ZTogcmV0dXJuIHNldFZhbHVlVDFBcnJheTsgLy8gU0FNUExFUl8yRFxuXHRcdGNhc2UgMHg4YjYwOiByZXR1cm4gc2V0VmFsdWVUNkFycmF5OyAvLyBTQU1QTEVSX0NVQkVcblxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlVjFpQXJyYXk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2lBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZVY0aUFycmF5OyAvLyBfVkVDNFxuXG5cdH1cblxufVxuXG4vLyAtLS0gVW5pZm9ybSBDbGFzc2VzIC0tLVxuXG5mdW5jdGlvbiBTaW5nbGVVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIHtcblxuXHR0aGlzLmlkID0gaWQ7XG5cdHRoaXMuYWRkciA9IGFkZHI7XG5cdHRoaXMuY2FjaGUgPSBbXTtcblx0dGhpcy5zZXRWYWx1ZSA9IGdldFNpbmd1bGFyU2V0dGVyKCBhY3RpdmVJbmZvLnR5cGUgKTtcblxuXHQvLyB0aGlzLnBhdGggPSBhY3RpdmVJbmZvLm5hbWU7IC8vIERFQlVHXG5cbn1cblxuZnVuY3Rpb24gUHVyZUFycmF5VW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7XG5cblx0dGhpcy5pZCA9IGlkO1xuXHR0aGlzLmFkZHIgPSBhZGRyO1xuXHR0aGlzLmNhY2hlID0gW107XG5cdHRoaXMuc2l6ZSA9IGFjdGl2ZUluZm8uc2l6ZTtcblx0dGhpcy5zZXRWYWx1ZSA9IGdldFB1cmVBcnJheVNldHRlciggYWN0aXZlSW5mby50eXBlICk7XG5cblx0Ly8gdGhpcy5wYXRoID0gYWN0aXZlSW5mby5uYW1lOyAvLyBERUJVR1xuXG59XG5cblB1cmVBcnJheVVuaWZvcm0ucHJvdG90eXBlLnVwZGF0ZUNhY2hlID0gZnVuY3Rpb24gKCBkYXRhICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBkYXRhIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICYmIGNhY2hlLmxlbmd0aCAhPT0gZGF0YS5sZW5ndGggKSB7XG5cblx0XHR0aGlzLmNhY2hlID0gbmV3IEZsb2F0MzJBcnJheSggZGF0YS5sZW5ndGggKTtcblxuXHR9XG5cblx0Y29weUFycmF5KCBjYWNoZSwgZGF0YSApO1xuXG59O1xuXG5mdW5jdGlvbiBTdHJ1Y3R1cmVkVW5pZm9ybSggaWQgKSB7XG5cblx0dGhpcy5pZCA9IGlkO1xuXG5cdHRoaXMuc2VxID0gW107XG5cdHRoaXMubWFwID0ge307XG5cbn1cblxuU3RydWN0dXJlZFVuaWZvcm0ucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKCBnbCwgdmFsdWUsIHRleHR1cmVzICkge1xuXG5cdHZhciBzZXEgPSB0aGlzLnNlcTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dmFyIHUgPSBzZXFbIGkgXTtcblx0XHR1LnNldFZhbHVlKCBnbCwgdmFsdWVbIHUuaWQgXSwgdGV4dHVyZXMgKTtcblxuXHR9XG5cbn07XG5cbi8vIC0tLSBUb3AtbGV2ZWwgLS0tXG5cbi8vIFBhcnNlciAtIGJ1aWxkcyB1cCB0aGUgcHJvcGVydHkgdHJlZSBmcm9tIHRoZSBwYXRoIHN0cmluZ3NcblxudmFyIFJlUGF0aFBhcnQgPSAvKFtcXHdcXGRfXSspKFxcXSk/KFxcW3xcXC4pPy9nO1xuXG4vLyBleHRyYWN0c1xuLy8gXHQtIHRoZSBpZGVudGlmaWVyIChtZW1iZXIgbmFtZSBvciBhcnJheSBpbmRleClcbi8vICAtIGZvbGxvd2VkIGJ5IGFuIG9wdGlvbmFsIHJpZ2h0IGJyYWNrZXQgKGZvdW5kIHdoZW4gYXJyYXkgaW5kZXgpXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCBsZWZ0IGJyYWNrZXQgb3IgZG90ICh0eXBlIG9mIHN1YnNjcmlwdClcbi8vXG4vLyBOb3RlOiBUaGVzZSBwb3J0aW9ucyBjYW4gYmUgcmVhZCBpbiBhIG5vbi1vdmVybGFwcGluZyBmYXNoaW9uIGFuZFxuLy8gYWxsb3cgc3RyYWlnaHRmb3J3YXJkIHBhcnNpbmcgb2YgdGhlIGhpZXJhcmNoeSB0aGF0IFdlYkdMIGVuY29kZXNcbi8vIGluIHRoZSB1bmlmb3JtIG5hbWVzLlxuXG5mdW5jdGlvbiBhZGRVbmlmb3JtKCBjb250YWluZXIsIHVuaWZvcm1PYmplY3QgKSB7XG5cblx0Y29udGFpbmVyLnNlcS5wdXNoKCB1bmlmb3JtT2JqZWN0ICk7XG5cdGNvbnRhaW5lci5tYXBbIHVuaWZvcm1PYmplY3QuaWQgXSA9IHVuaWZvcm1PYmplY3Q7XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VVbmlmb3JtKCBhY3RpdmVJbmZvLCBhZGRyLCBjb250YWluZXIgKSB7XG5cblx0dmFyIHBhdGggPSBhY3RpdmVJbmZvLm5hbWUsXG5cdFx0cGF0aExlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG5cdC8vIHJlc2V0IFJlZ0V4cCBvYmplY3QsIGJlY2F1c2Ugb2YgdGhlIGVhcmx5IGV4aXQgb2YgYSBwcmV2aW91cyBydW5cblx0UmVQYXRoUGFydC5sYXN0SW5kZXggPSAwO1xuXG5cdHdoaWxlICggdHJ1ZSApIHtcblxuXHRcdHZhciBtYXRjaCA9IFJlUGF0aFBhcnQuZXhlYyggcGF0aCApLFxuXHRcdFx0bWF0Y2hFbmQgPSBSZVBhdGhQYXJ0Lmxhc3RJbmRleCxcblxuXHRcdFx0aWQgPSBtYXRjaFsgMSBdLFxuXHRcdFx0aWRJc0luZGV4ID0gbWF0Y2hbIDIgXSA9PT0gJ10nLFxuXHRcdFx0c3Vic2NyaXB0ID0gbWF0Y2hbIDMgXTtcblxuXHRcdGlmICggaWRJc0luZGV4ICkgaWQgPSBpZCB8IDA7IC8vIGNvbnZlcnQgdG8gaW50ZWdlclxuXG5cdFx0aWYgKCBzdWJzY3JpcHQgPT09IHVuZGVmaW5lZCB8fCBzdWJzY3JpcHQgPT09ICdbJyAmJiBtYXRjaEVuZCArIDIgPT09IHBhdGhMZW5ndGggKSB7XG5cblx0XHRcdC8vIGJhcmUgbmFtZSBvciBcInB1cmVcIiBib3R0b20tbGV2ZWwgYXJyYXkgXCJbMF1cIiBzdWZmaXhcblxuXHRcdFx0YWRkVW5pZm9ybSggY29udGFpbmVyLCBzdWJzY3JpcHQgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdG5ldyBTaW5nbGVVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIDpcblx0XHRcdFx0bmV3IFB1cmVBcnJheVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBzdGVwIGludG8gaW5uZXIgbm9kZSAvIGNyZWF0ZSBpdCBpbiBjYXNlIGl0IGRvZXNuJ3QgZXhpc3RcblxuXHRcdFx0dmFyIG1hcCA9IGNvbnRhaW5lci5tYXAsIG5leHQgPSBtYXBbIGlkIF07XG5cblx0XHRcdGlmICggbmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5leHQgPSBuZXcgU3RydWN0dXJlZFVuaWZvcm0oIGlkICk7XG5cdFx0XHRcdGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgbmV4dCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5lciA9IG5leHQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIFJvb3QgQ29udGFpbmVyXG5cbmZ1bmN0aW9uIFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICkge1xuXG5cdHRoaXMuc2VxID0gW107XG5cdHRoaXMubWFwID0ge307XG5cblx0dmFyIG4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCAzNTcxOCApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IG47ICsrIGkgKSB7XG5cblx0XHR2YXIgaW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0oIHByb2dyYW0sIGkgKSxcblx0XHRcdGFkZHIgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sIGluZm8ubmFtZSApO1xuXG5cdFx0cGFyc2VVbmlmb3JtKCBpbmZvLCBhZGRyLCB0aGlzICk7XG5cblx0fVxuXG59XG5cbldlYkdMVW5pZm9ybXMucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKCBnbCwgbmFtZSwgdmFsdWUsIHRleHR1cmVzICkge1xuXG5cdHZhciB1ID0gdGhpcy5tYXBbIG5hbWUgXTtcblxuXHRpZiAoIHUgIT09IHVuZGVmaW5lZCApIHUuc2V0VmFsdWUoIGdsLCB2YWx1ZSwgdGV4dHVyZXMgKTtcblxufTtcblxuV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0T3B0aW9uYWwgPSBmdW5jdGlvbiAoIGdsLCBvYmplY3QsIG5hbWUgKSB7XG5cblx0dmFyIHYgPSBvYmplY3RbIG5hbWUgXTtcblxuXHRpZiAoIHYgIT09IHVuZGVmaW5lZCApIHRoaXMuc2V0VmFsdWUoIGdsLCBuYW1lLCB2ICk7XG5cbn07XG5cblxuLy8gU3RhdGljIGludGVyZmFjZVxuXG5XZWJHTFVuaWZvcm1zLnVwbG9hZCA9IGZ1bmN0aW9uICggZ2wsIHNlcSwgdmFsdWVzLCB0ZXh0dXJlcyApIHtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dmFyIHUgPSBzZXFbIGkgXSxcblx0XHRcdHYgPSB2YWx1ZXNbIHUuaWQgXTtcblxuXHRcdGlmICggdi5uZWVkc1VwZGF0ZSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIG5vdGU6IGFsd2F5cyB1cGRhdGluZyB3aGVuIC5uZWVkc1VwZGF0ZSBpcyB1bmRlZmluZWRcblx0XHRcdHUuc2V0VmFsdWUoIGdsLCB2LnZhbHVlLCB0ZXh0dXJlcyApO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuV2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUgPSBmdW5jdGlvbiAoIHNlcSwgdmFsdWVzICkge1xuXG5cdHZhciByID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHZhciB1ID0gc2VxWyBpIF07XG5cdFx0aWYgKCB1LmlkIGluIHZhbHVlcyApIHIucHVzaCggdSApO1xuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMU2hhZGVyKCBnbCwgdHlwZSwgc3RyaW5nICkge1xuXG5cdHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoIHR5cGUgKTtcblxuXHRnbC5zaGFkZXJTb3VyY2UoIHNoYWRlciwgc3RyaW5nICk7XG5cdGdsLmNvbXBpbGVTaGFkZXIoIHNoYWRlciApO1xuXG5cdHJldHVybiBzaGFkZXI7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBwcm9ncmFtSWRDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGFkZExpbmVOdW1iZXJzKCBzdHJpbmcgKSB7XG5cblx0dmFyIGxpbmVzID0gc3RyaW5nLnNwbGl0KCAnXFxuJyApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGxpbmVzWyBpIF0gPSAoIGkgKyAxICkgKyAnOiAnICsgbGluZXNbIGkgXTtcblxuXHR9XG5cblx0cmV0dXJuIGxpbmVzLmpvaW4oICdcXG4nICk7XG5cbn1cblxuZnVuY3Rpb24gZ2V0RW5jb2RpbmdDb21wb25lbnRzKCBlbmNvZGluZyApIHtcblxuXHRzd2l0Y2ggKCBlbmNvZGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnTGluZWFyJywgJyggdmFsdWUgKScgXTtcblx0XHRjYXNlIHNSR0JFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdzUkdCJywgJyggdmFsdWUgKScgXTtcblx0XHRjYXNlIFJHQkVFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdSR0JFJywgJyggdmFsdWUgKScgXTtcblx0XHRjYXNlIFJHQk03RW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnUkdCTScsICcoIHZhbHVlLCA3LjAgKScgXTtcblx0XHRjYXNlIFJHQk0xNkVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ1JHQk0nLCAnKCB2YWx1ZSwgMTYuMCApJyBdO1xuXHRcdGNhc2UgUkdCREVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ1JHQkQnLCAnKCB2YWx1ZSwgMjU2LjAgKScgXTtcblx0XHRjYXNlIEdhbW1hRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnR2FtbWEnLCAnKCB2YWx1ZSwgZmxvYXQoIEdBTU1BX0ZBQ1RPUiApICknIF07XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IG5ldyBFcnJvciggJ3Vuc3VwcG9ydGVkIGVuY29kaW5nOiAnICsgZW5jb2RpbmcgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gZ2V0U2hhZGVyRXJyb3JzKCBnbCwgc2hhZGVyLCB0eXBlICkge1xuXG5cdHZhciBzdGF0dXMgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoIHNoYWRlciwgMzU3MTMgKTtcblx0dmFyIGxvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIHNoYWRlciApLnRyaW0oKTtcblxuXHRpZiAoIHN0YXR1cyAmJiBsb2cgPT09ICcnICkgcmV0dXJuICcnO1xuXG5cdC8vIC0tZW5hYmxlLXByaXZpbGVnZWQtd2ViZ2wtZXh0ZW5zaW9uXG5cdC8vIGNvbnNvbGUubG9nKCAnKionICsgdHlwZSArICcqKicsIGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2RlYnVnX3NoYWRlcnMnICkuZ2V0VHJhbnNsYXRlZFNoYWRlclNvdXJjZSggc2hhZGVyICkgKTtcblxuXHR2YXIgc291cmNlID0gZ2wuZ2V0U2hhZGVyU291cmNlKCBzaGFkZXIgKTtcblxuXHRyZXR1cm4gJ1RIUkVFLldlYkdMU2hhZGVyOiBnbC5nZXRTaGFkZXJJbmZvTG9nKCkgJyArIHR5cGUgKyAnXFxuJyArIGxvZyArIGFkZExpbmVOdW1iZXJzKCBzb3VyY2UgKTtcblxufVxuXG5mdW5jdGlvbiBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgZW5jb2RpbmcgKSB7XG5cblx0dmFyIGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICk7XG5cdHJldHVybiAndmVjNCAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjNCB2YWx1ZSApIHsgcmV0dXJuICcgKyBjb21wb25lbnRzWyAwIF0gKyAnVG9MaW5lYXInICsgY29tcG9uZW50c1sgMSBdICsgJzsgfSc7XG5cbn1cblxuZnVuY3Rpb24gZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCBmdW5jdGlvbk5hbWUsIGVuY29kaW5nICkge1xuXG5cdHZhciBjb21wb25lbnRzID0gZ2V0RW5jb2RpbmdDb21wb25lbnRzKCBlbmNvZGluZyApO1xuXHRyZXR1cm4gJ3ZlYzQgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzQgdmFsdWUgKSB7IHJldHVybiBMaW5lYXJUbycgKyBjb21wb25lbnRzWyAwIF0gKyBjb21wb25lbnRzWyAxIF0gKyAnOyB9JztcblxufVxuXG5mdW5jdGlvbiBnZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCBmdW5jdGlvbk5hbWUsIHRvbmVNYXBwaW5nICkge1xuXG5cdHZhciB0b25lTWFwcGluZ05hbWU7XG5cblx0c3dpdGNoICggdG9uZU1hcHBpbmcgKSB7XG5cblx0XHRjYXNlIExpbmVhclRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ0xpbmVhcic7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgUmVpbmhhcmRUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdSZWluaGFyZCc7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgVW5jaGFydGVkMlRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1VuY2hhcnRlZDInO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIENpbmVvblRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ09wdGltaXplZENpbmVvbic7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ0FDRVNGaWxtaWMnO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAndW5zdXBwb3J0ZWQgdG9uZU1hcHBpbmc6ICcgKyB0b25lTWFwcGluZyApO1xuXG5cdH1cblxuXHRyZXR1cm4gJ3ZlYzMgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzMgY29sb3IgKSB7IHJldHVybiAnICsgdG9uZU1hcHBpbmdOYW1lICsgJ1RvbmVNYXBwaW5nKCBjb2xvciApOyB9JztcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUV4dGVuc2lvbnMoIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMsIHJlbmRlcmVyRXh0ZW5zaW9ucyApIHtcblxuXHRleHRlbnNpb25zID0gZXh0ZW5zaW9ucyB8fCB7fTtcblxuXHR2YXIgY2h1bmtzID0gW1xuXHRcdCggZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyB8fCBwYXJhbWV0ZXJzLmVudk1hcEN1YmVVViB8fCBwYXJhbWV0ZXJzLmJ1bXBNYXAgfHwgKCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiAhIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKSB8fCBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nICkgPyAnI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGUnIDogJycsXG5cdFx0KCBleHRlbnNpb25zLmZyYWdEZXB0aCB8fCBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSAmJiByZW5kZXJlckV4dGVuc2lvbnMuZ2V0KCAnRVhUX2ZyYWdfZGVwdGgnICkgPyAnI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZScgOiAnJyxcblx0XHQoIGV4dGVuc2lvbnMuZHJhd0J1ZmZlcnMgKSAmJiByZW5kZXJlckV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfZHJhd19idWZmZXJzJyApID8gJyNleHRlbnNpb24gR0xfRVhUX2RyYXdfYnVmZmVycyA6IHJlcXVpcmUnIDogJycsXG5cdFx0KCBleHRlbnNpb25zLnNoYWRlclRleHR1cmVMT0QgfHwgcGFyYW1ldGVycy5lbnZNYXAgKSAmJiByZW5kZXJlckV4dGVuc2lvbnMuZ2V0KCAnRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCcgKSA/ICcjZXh0ZW5zaW9uIEdMX0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QgOiBlbmFibGUnIDogJydcblx0XTtcblxuXHRyZXR1cm4gY2h1bmtzLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURlZmluZXMoIGRlZmluZXMgKSB7XG5cblx0dmFyIGNodW5rcyA9IFtdO1xuXG5cdGZvciAoIHZhciBuYW1lIGluIGRlZmluZXMgKSB7XG5cblx0XHR2YXIgdmFsdWUgPSBkZWZpbmVzWyBuYW1lIF07XG5cblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIGNvbnRpbnVlO1xuXG5cdFx0Y2h1bmtzLnB1c2goICcjZGVmaW5lICcgKyBuYW1lICsgJyAnICsgdmFsdWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIGNodW5rcy5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGZldGNoQXR0cmlidXRlTG9jYXRpb25zKCBnbCwgcHJvZ3JhbSApIHtcblxuXHR2YXIgYXR0cmlidXRlcyA9IHt9O1xuXG5cdHZhciBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MjEgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBuOyBpICsrICkge1xuXG5cdFx0dmFyIGluZm8gPSBnbC5nZXRBY3RpdmVBdHRyaWIoIHByb2dyYW0sIGkgKTtcblx0XHR2YXIgbmFtZSA9IGluZm8ubmFtZTtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBBQ1RJVkUgVkVSVEVYIEFUVFJJQlVURTonLCBuYW1lLCBpICk7XG5cblx0XHRhdHRyaWJ1dGVzWyBuYW1lIF0gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgbmFtZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYXR0cmlidXRlcztcblxufVxuXG5mdW5jdGlvbiBmaWx0ZXJFbXB0eUxpbmUoIHN0cmluZyApIHtcblxuXHRyZXR1cm4gc3RyaW5nICE9PSAnJztcblxufVxuXG5mdW5jdGlvbiByZXBsYWNlTGlnaHROdW1zKCBzdHJpbmcsIHBhcmFtZXRlcnMgKSB7XG5cblx0cmV0dXJuIHN0cmluZ1xuXHRcdC5yZXBsYWNlKCAvTlVNX0RJUl9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1EaXJMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUkVDVF9BUkVBX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVJlY3RBcmVhTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9QT0lOVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fSEVNSV9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1IZW1pTGlnaHRzICk7XG5cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCBzdHJpbmcsIHBhcmFtZXRlcnMgKSB7XG5cblx0cmV0dXJuIHN0cmluZ1xuXHRcdC5yZXBsYWNlKCAvTlVNX0NMSVBQSU5HX1BMQU5FUy9nLCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzIClcblx0XHQucmVwbGFjZSggL1VOSU9OX0NMSVBQSU5HX1BMQU5FUy9nLCAoIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgLSBwYXJhbWV0ZXJzLm51bUNsaXBJbnRlcnNlY3Rpb24gKSApO1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlSW5jbHVkZXMoIHN0cmluZyApIHtcblxuXHR2YXIgcGF0dGVybiA9IC9eWyBcXHRdKiNpbmNsdWRlICs8KFtcXHdcXGQuL10rKT4vZ207XG5cblx0ZnVuY3Rpb24gcmVwbGFjZSggbWF0Y2gsIGluY2x1ZGUgKSB7XG5cblx0XHR2YXIgcmVwbGFjZSA9IFNoYWRlckNodW5rWyBpbmNsdWRlIF07XG5cblx0XHRpZiAoIHJlcGxhY2UgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnQ2FuIG5vdCByZXNvbHZlICNpbmNsdWRlIDwnICsgaW5jbHVkZSArICc+JyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBhcnNlSW5jbHVkZXMoIHJlcGxhY2UgKTtcblxuXHR9XG5cblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBwYXR0ZXJuLCByZXBsYWNlICk7XG5cbn1cblxuZnVuY3Rpb24gdW5yb2xsTG9vcHMoIHN0cmluZyApIHtcblxuXHR2YXIgcGF0dGVybiA9IC8jcHJhZ21hIHVucm9sbF9sb29wW1xcc10rP2ZvciBcXCggaW50IGkgXFw9IChcXGQrKVxcOyBpIDwgKFxcZCspXFw7IGkgXFwrXFwrIFxcKSBcXHsoW1xcc1xcU10rPykoPz1cXH0pXFx9L2c7XG5cblx0ZnVuY3Rpb24gcmVwbGFjZSggbWF0Y2gsIHN0YXJ0LCBlbmQsIHNuaXBwZXQgKSB7XG5cblx0XHR2YXIgdW5yb2xsID0gJyc7XG5cblx0XHRmb3IgKCB2YXIgaSA9IHBhcnNlSW50KCBzdGFydCApOyBpIDwgcGFyc2VJbnQoIGVuZCApOyBpICsrICkge1xuXG5cdFx0XHR1bnJvbGwgKz0gc25pcHBldC5yZXBsYWNlKCAvXFxbIGkgXFxdL2csICdbICcgKyBpICsgJyBdJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVucm9sbDtcblxuXHR9XG5cblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBwYXR0ZXJuLCByZXBsYWNlICk7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xQcm9ncmFtKCByZW5kZXJlciwgZXh0ZW5zaW9ucywgY29kZSwgbWF0ZXJpYWwsIHNoYWRlciwgcGFyYW1ldGVycywgY2FwYWJpbGl0aWVzICkge1xuXG5cdHZhciBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKTtcblxuXHR2YXIgZGVmaW5lcyA9IG1hdGVyaWFsLmRlZmluZXM7XG5cblx0dmFyIHZlcnRleFNoYWRlciA9IHNoYWRlci52ZXJ0ZXhTaGFkZXI7XG5cdHZhciBmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlcjtcblxuXHR2YXIgc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9CQVNJQyc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNoYWRvd01hcCApIHtcblxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNvZnRTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRl9TT0ZUJztcblxuXHR9XG5cblx0dmFyIGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cdHZhciBlbnZNYXBNb2RlRGVmaW5lID0gJ0VOVk1BUF9NT0RFX1JFRkxFQ1RJT04nO1xuXHR2YXIgZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggbWF0ZXJpYWwuZW52TWFwLm1hcHBpbmcgKSB7XG5cblx0XHRcdGNhc2UgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFX1VWJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6XG5cdFx0XHRjYXNlIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0VRVUlSRUMnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9TUEhFUkUnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHRcdHN3aXRjaCAoIG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0c3dpdGNoICggbWF0ZXJpYWwuY29tYmluZSApIHtcblxuXHRcdFx0Y2FzZSBNdWx0aXBseU9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTUlYJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgQWRkT3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfQUREJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHZhciBnYW1tYUZhY3RvckRlZmluZSA9ICggcmVuZGVyZXIuZ2FtbWFGYWN0b3IgPiAwICkgPyByZW5kZXJlci5nYW1tYUZhY3RvciA6IDEuMDtcblxuXHQvLyBjb25zb2xlLmxvZyggJ2J1aWxkaW5nIG5ldyBwcm9ncmFtICcgKTtcblxuXHQvL1xuXG5cdHZhciBjdXN0b21FeHRlbnNpb25zID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gJycgOiBnZW5lcmF0ZUV4dGVuc2lvbnMoIG1hdGVyaWFsLmV4dGVuc2lvbnMsIHBhcmFtZXRlcnMsIGV4dGVuc2lvbnMgKTtcblxuXHR2YXIgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApO1xuXG5cdC8vXG5cblx0dmFyIHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cblx0dmFyIHByZWZpeFZlcnRleCwgcHJlZml4RnJhZ21lbnQ7XG5cblx0aWYgKCBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4VmVydGV4Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeFZlcnRleCArPSAnXFxuJztcblxuXHRcdH1cblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRpZiAoIHByZWZpeEZyYWdtZW50Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeEZyYWdtZW50ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdCdwcmVjaXNpb24gJyArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgJyBmbG9hdDsnLFxuXHRcdFx0J3ByZWNpc2lvbiAnICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAnIGludDsnLFxuXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgc2hhZGVyLm5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXMsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyA/ICcjZGVmaW5lIFZFUlRFWF9URVhUVVJFUycgOiAnJyxcblxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcblxuXHRcdFx0JyNkZWZpbmUgTUFYX0JPTkVTICcgKyBwYXJhbWV0ZXJzLm1heEJvbmVzLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyApID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgT0JKRUNUU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgJiYgcGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVVNFX0RJU1BMQUNFTUVOVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzID8gJyNkZWZpbmUgVVNFX1RBTkdFTlQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleENvbG9ycyA/ICcjZGVmaW5lIFVTRV9DT0xPUicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNraW5uaW5nID8gJyNkZWZpbmUgVVNFX1NLSU5OSU5HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy51c2VWZXJ0ZXhUZXh0dXJlID8gJyNkZWZpbmUgQk9ORV9URVhUVVJFJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyA/ICcjZGVmaW5lIFVTRV9NT1JQSFRBUkdFVFMnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1vcnBoTm9ybWFscyAmJiBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID09PSBmYWxzZSA/ICcjZGVmaW5lIFVTRV9NT1JQSE5PUk1BTFMnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5mbGlwU2lkZWQgPyAnI2RlZmluZSBGTElQX1NJREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSBVU0VfU0hBRE9XTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgJyArIHNoYWRvd01hcFR5cGVEZWZpbmUgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gPyAnI2RlZmluZSBVU0VfU0laRUFUVEVOVUFUSU9OJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUYnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgJiYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5nZXQoICdFWFRfZnJhZ19kZXB0aCcgKSApID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGX0VYVCcgOiAnJyxcblxuXHRcdFx0J3VuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjsnLFxuXG5cdFx0XHQnYXR0cmlidXRlIHZlYzMgcG9zaXRpb247Jyxcblx0XHRcdCdhdHRyaWJ1dGUgdmVjMyBub3JtYWw7Jyxcblx0XHRcdCdhdHRyaWJ1dGUgdmVjMiB1djsnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9UQU5HRU5UJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzQgdGFuZ2VudDsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfQ09MT1InLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQwOycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDE7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MjsnLFxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQzOycsXG5cblx0XHRcdCdcdCNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTJyxcblxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDA7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwxOycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMjsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDM7JyxcblxuXHRcdFx0J1x0I2Vsc2UnLFxuXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NDsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDU7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ2OycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NzsnLFxuXG5cdFx0XHQnXHQjZW5kaWYnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfU0tJTk5JTkcnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luSW5kZXg7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXG5cdFx0XHQncHJlY2lzaW9uICcgKyBwYXJhbWV0ZXJzLnByZWNpc2lvbiArICcgZmxvYXQ7Jyxcblx0XHRcdCdwcmVjaXNpb24gJyArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgJyBpbnQ7JyxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHNoYWRlci5uYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhVGVzdCA/ICcjZGVmaW5lIEFMUEhBVEVTVCAnICsgcGFyYW1ldGVycy5hbHBoYVRlc3QgKyAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0ICUgMSA/ICcnIDogJy4wJyApIDogJycsIC8vIGFkZCAnLjAnIGlmIGludGVnZXJcblxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyApID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1hdGNhcCA/ICcjZGVmaW5lIFVTRV9NQVRDQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBUeXBlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBCbGVuZGluZ0RlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcCA/ICcjZGVmaW5lIFVTRV9MSUdIVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKSA/ICcjZGVmaW5lIE9CSkVDVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzID8gJyNkZWZpbmUgVVNFX1RBTkdFTlQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleENvbG9ycyA/ICcjZGVmaW5lIFVTRV9DT0xPUicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5ncmFkaWVudE1hcCA/ICcjZGVmaW5lIFVTRV9HUkFESUVOVE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5mbGlwU2lkZWQgPyAnI2RlZmluZSBGTElQX1NJREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSBVU0VfU0hBRE9XTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgJyArIHNoYWRvd01hcFR5cGVEZWZpbmUgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgPyAnI2RlZmluZSBQUkVNVUxUSVBMSUVEX0FMUEhBJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID8gJyNkZWZpbmUgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUUycgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2ZyYWdfZGVwdGgnICkgKSA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFQnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCcgKSApID8gJyNkZWZpbmUgVEVYVFVSRV9MT0RfRVhUJyA6ICcnLFxuXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247JyxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyAnI2RlZmluZSBUT05FX01BUFBJTkcnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/IFNoYWRlckNodW5rWyAndG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCcgXSA6ICcnLCAvLyB0aGlzIGNvZGUgaXMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgdGhlIHRvbmVNYXBwaW5nKCkgZnVuY3Rpb24gZGVmaW5lZCBiZWxvd1xuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBnZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCAndG9uZU1hcHBpbmcnLCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICkgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kaXRoZXJpbmcgPyAnI2RlZmluZSBESVRIRVJJTkcnIDogJycsXG5cblx0XHRcdCggcGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLm1hcEVuY29kaW5nIHx8IHBhcmFtZXRlcnMubWF0Y2FwRW5jb2RpbmcgfHwgcGFyYW1ldGVycy5lbnZNYXBFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwRW5jb2RpbmcgKSA/XG5cdFx0XHRcdFNoYWRlckNodW5rWyAnZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQnIF0gOiAnJywgLy8gdGhpcyBjb2RlIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IHRoZSB2YXJpb3VzIGVuY29kaW5nL2RlY29kaW5nIGZ1bmN0aW9uIGRlZmluZWQgYmVsb3dcblx0XHRcdHBhcmFtZXRlcnMubWFwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oICdtYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5tYXBFbmNvZGluZyApIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1hdGNhcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCAnbWF0Y2FwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMubWF0Y2FwRW5jb2RpbmcgKSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ2Vudk1hcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLmVudk1hcEVuY29kaW5nICkgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ2VtaXNzaXZlTWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBFbmNvZGluZyApIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nID8gZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCAnbGluZWFyVG9PdXRwdXRUZXhlbCcsIHBhcmFtZXRlcnMub3V0cHV0RW5jb2RpbmcgKSA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRlcHRoUGFja2luZyA/ICcjZGVmaW5lIERFUFRIX1BBQ0tJTkcgJyArIG1hdGVyaWFsLmRlcHRoUGFja2luZyA6ICcnLFxuXG5cdFx0XHQnXFxuJ1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0fVxuXG5cdHZlcnRleFNoYWRlciA9IHBhcnNlSW5jbHVkZXMoIHZlcnRleFNoYWRlciApO1xuXHR2ZXJ0ZXhTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblxuXHRmcmFnbWVudFNoYWRlciA9IHBhcnNlSW5jbHVkZXMoIGZyYWdtZW50U2hhZGVyICk7XG5cdGZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMoIGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0dmVydGV4U2hhZGVyID0gdW5yb2xsTG9vcHMoIHZlcnRleFNoYWRlciApO1xuXHRmcmFnbWVudFNoYWRlciA9IHVucm9sbExvb3BzKCBmcmFnbWVudFNoYWRlciApO1xuXG5cdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICYmICEgbWF0ZXJpYWwuaXNSYXdTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdHZhciBpc0dMU0wzU2hhZGVyTWF0ZXJpYWwgPSBmYWxzZTtcblxuXHRcdHZhciB2ZXJzaW9uUmVnZXggPSAvXlxccyojdmVyc2lvblxccyszMDBcXHMrZXNcXHMqXFxuLztcblxuXHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJlxuXHRcdFx0dmVydGV4U2hhZGVyLm1hdGNoKCB2ZXJzaW9uUmVnZXggKSAhPT0gbnVsbCAmJlxuXHRcdFx0ZnJhZ21lbnRTaGFkZXIubWF0Y2goIHZlcnNpb25SZWdleCApICE9PSBudWxsICkge1xuXG5cdFx0XHRpc0dMU0wzU2hhZGVyTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXIgPSB2ZXJ0ZXhTaGFkZXIucmVwbGFjZSggdmVyc2lvblJlZ2V4LCAnJyApO1xuXHRcdFx0ZnJhZ21lbnRTaGFkZXIgPSBmcmFnbWVudFNoYWRlci5yZXBsYWNlKCB2ZXJzaW9uUmVnZXgsICcnICk7XG5cblx0XHR9XG5cblx0XHQvLyBHTFNMIDMuMCBjb252ZXJzaW9uXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXHRcdFx0JyN2ZXJzaW9uIDMwMCBlc1xcbicsXG5cdFx0XHQnI2RlZmluZSBhdHRyaWJ1dGUgaW4nLFxuXHRcdFx0JyNkZWZpbmUgdmFyeWluZyBvdXQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEIHRleHR1cmUnXG5cdFx0XS5qb2luKCAnXFxuJyApICsgJ1xcbicgKyBwcmVmaXhWZXJ0ZXg7XG5cblx0XHRwcmVmaXhGcmFnbWVudCA9IFtcblx0XHRcdCcjdmVyc2lvbiAzMDAgZXNcXG4nLFxuXHRcdFx0JyNkZWZpbmUgdmFyeWluZyBpbicsXG5cdFx0XHRpc0dMU0wzU2hhZGVyTWF0ZXJpYWwgPyAnJyA6ICdvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3I7Jyxcblx0XHRcdGlzR0xTTDNTaGFkZXJNYXRlcmlhbCA/ICcnIDogJyNkZWZpbmUgZ2xfRnJhZ0NvbG9yIHBjX2ZyYWdDb2xvcicsXG5cdFx0XHQnI2RlZmluZSBnbF9GcmFnRGVwdGhFWFQgZ2xfRnJhZ0RlcHRoJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlIHRleHR1cmUnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvaiB0ZXh0dXJlUHJvaicsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRMb2RFWFQgdGV4dHVyZUxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qTG9kRVhUIHRleHR1cmVQcm9qTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlTG9kRVhUIHRleHR1cmVMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJER3JhZEVYVCB0ZXh0dXJlR3JhZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qR3JhZEVYVCB0ZXh0dXJlUHJvakdyYWQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmVHcmFkRVhUIHRleHR1cmVHcmFkJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4RnJhZ21lbnQ7XG5cblx0fVxuXG5cdHZhciB2ZXJ0ZXhHbHNsID0gcHJlZml4VmVydGV4ICsgdmVydGV4U2hhZGVyO1xuXHR2YXIgZnJhZ21lbnRHbHNsID0gcHJlZml4RnJhZ21lbnQgKyBmcmFnbWVudFNoYWRlcjtcblxuXHQvLyBjb25zb2xlLmxvZyggJypWRVJURVgqJywgdmVydGV4R2xzbCApO1xuXHQvLyBjb25zb2xlLmxvZyggJypGUkFHTUVOVConLCBmcmFnbWVudEdsc2wgKTtcblxuXHR2YXIgZ2xWZXJ0ZXhTaGFkZXIgPSBXZWJHTFNoYWRlciggZ2wsIDM1NjMzLCB2ZXJ0ZXhHbHNsICk7XG5cdHZhciBnbEZyYWdtZW50U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCAzNTYzMiwgZnJhZ21lbnRHbHNsICk7XG5cblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW0sIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBGb3JjZSBhIHBhcnRpY3VsYXIgYXR0cmlidXRlIHRvIGluZGV4IDAuXG5cblx0aWYgKCBtYXRlcmlhbC5pbmRleDBBdHRyaWJ1dGVOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsIG1hdGVyaWFsLmluZGV4MEF0dHJpYnV0ZU5hbWUgKTtcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdC8vIHByb2dyYW1zIHdpdGggbW9ycGhUYXJnZXRzIGRpc3BsYWNlIHBvc2l0aW9uIG91dCBvZiBhdHRyaWJ1dGUgMFxuXHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgMCwgJ3Bvc2l0aW9uJyApO1xuXG5cdH1cblxuXHRnbC5saW5rUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdC8vIGNoZWNrIGZvciBsaW5rIGVycm9yc1xuXHRpZiAoIHJlbmRlcmVyLmRlYnVnLmNoZWNrU2hhZGVyRXJyb3JzICkge1xuXG5cdFx0dmFyIHByb2dyYW1Mb2cgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyggcHJvZ3JhbSApLnRyaW0oKTtcblx0XHR2YXIgdmVydGV4TG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xWZXJ0ZXhTaGFkZXIgKS50cmltKCk7XG5cdFx0dmFyIGZyYWdtZW50TG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xGcmFnbWVudFNoYWRlciApLnRyaW0oKTtcblxuXHRcdHZhciBydW5uYWJsZSA9IHRydWU7XG5cdFx0dmFyIGhhdmVEaWFnbm9zdGljcyA9IHRydWU7XG5cblx0XHRpZiAoIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRydW5uYWJsZSA9IGZhbHNlO1xuXG5cdFx0XHR2YXIgdmVydGV4RXJyb3JzID0gZ2V0U2hhZGVyRXJyb3JzKCBnbCwgZ2xWZXJ0ZXhTaGFkZXIsICd2ZXJ0ZXgnICk7XG5cdFx0XHR2YXIgZnJhZ21lbnRFcnJvcnMgPSBnZXRTaGFkZXJFcnJvcnMoIGdsLCBnbEZyYWdtZW50U2hhZGVyLCAnZnJhZ21lbnQnICk7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFByb2dyYW06IHNoYWRlciBlcnJvcjogJywgZ2wuZ2V0RXJyb3IoKSwgJzM1NzE1JywgZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MTUgKSwgJ2dsLmdldFByb2dyYW1JbmZvTG9nJywgcHJvZ3JhbUxvZywgdmVydGV4RXJyb3JzLCBmcmFnbWVudEVycm9ycyApO1xuXG5cdFx0fSBlbHNlIGlmICggcHJvZ3JhbUxvZyAhPT0gJycgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coKScsIHByb2dyYW1Mb2cgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHZlcnRleExvZyA9PT0gJycgfHwgZnJhZ21lbnRMb2cgPT09ICcnICkge1xuXG5cdFx0XHRoYXZlRGlhZ25vc3RpY3MgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggaGF2ZURpYWdub3N0aWNzICkge1xuXG5cdFx0XHR0aGlzLmRpYWdub3N0aWNzID0ge1xuXG5cdFx0XHRcdHJ1bm5hYmxlOiBydW5uYWJsZSxcblx0XHRcdFx0bWF0ZXJpYWw6IG1hdGVyaWFsLFxuXG5cdFx0XHRcdHByb2dyYW1Mb2c6IHByb2dyYW1Mb2csXG5cblx0XHRcdFx0dmVydGV4U2hhZGVyOiB7XG5cblx0XHRcdFx0XHRsb2c6IHZlcnRleExvZyxcblx0XHRcdFx0XHRwcmVmaXg6IHByZWZpeFZlcnRleFxuXG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHtcblxuXHRcdFx0XHRcdGxvZzogZnJhZ21lbnRMb2csXG5cdFx0XHRcdFx0cHJlZml4OiBwcmVmaXhGcmFnbWVudFxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gY2xlYW4gdXBcblxuXHRnbC5kZWxldGVTaGFkZXIoIGdsVmVydGV4U2hhZGVyICk7XG5cdGdsLmRlbGV0ZVNoYWRlciggZ2xGcmFnbWVudFNoYWRlciApO1xuXG5cdC8vIHNldCB1cCBjYWNoaW5nIGZvciB1bmlmb3JtIGxvY2F0aW9uc1xuXG5cdHZhciBjYWNoZWRVbmlmb3JtcztcblxuXHR0aGlzLmdldFVuaWZvcm1zID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCBjYWNoZWRVbmlmb3JtcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjYWNoZWRVbmlmb3JtcyA9IG5ldyBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlZFVuaWZvcm1zO1xuXG5cdH07XG5cblx0Ly8gc2V0IHVwIGNhY2hpbmcgZm9yIGF0dHJpYnV0ZSBsb2NhdGlvbnNcblxuXHR2YXIgY2FjaGVkQXR0cmlidXRlcztcblxuXHR0aGlzLmdldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y2FjaGVkQXR0cmlidXRlcyA9IGZldGNoQXR0cmlidXRlTG9jYXRpb25zKCBnbCwgcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlZEF0dHJpYnV0ZXM7XG5cblx0fTtcblxuXHQvLyBmcmVlIHJlc291cmNlXG5cblx0dGhpcy5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Z2wuZGVsZXRlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXHRcdHRoaXMucHJvZ3JhbSA9IHVuZGVmaW5lZDtcblxuXHR9O1xuXG5cdC8vXG5cblx0dGhpcy5uYW1lID0gc2hhZGVyLm5hbWU7XG5cdHRoaXMuaWQgPSBwcm9ncmFtSWRDb3VudCArKztcblx0dGhpcy5jb2RlID0gY29kZTtcblx0dGhpcy51c2VkVGltZXMgPSAxO1xuXHR0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuXHR0aGlzLnZlcnRleFNoYWRlciA9IGdsVmVydGV4U2hhZGVyO1xuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gZ2xGcmFnbWVudFNoYWRlcjtcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xQcm9ncmFtcyggcmVuZGVyZXIsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHtcblxuXHR2YXIgcHJvZ3JhbXMgPSBbXTtcblxuXHR2YXIgc2hhZGVySURzID0ge1xuXHRcdE1lc2hEZXB0aE1hdGVyaWFsOiAnZGVwdGgnLFxuXHRcdE1lc2hEaXN0YW5jZU1hdGVyaWFsOiAnZGlzdGFuY2VSR0JBJyxcblx0XHRNZXNoTm9ybWFsTWF0ZXJpYWw6ICdub3JtYWwnLFxuXHRcdE1lc2hCYXNpY01hdGVyaWFsOiAnYmFzaWMnLFxuXHRcdE1lc2hMYW1iZXJ0TWF0ZXJpYWw6ICdsYW1iZXJ0Jyxcblx0XHRNZXNoUGhvbmdNYXRlcmlhbDogJ3Bob25nJyxcblx0XHRNZXNoVG9vbk1hdGVyaWFsOiAncGhvbmcnLFxuXHRcdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hNYXRjYXBNYXRlcmlhbDogJ21hdGNhcCcsXG5cdFx0TGluZUJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsXG5cdFx0TGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJyxcblx0XHRQb2ludHNNYXRlcmlhbDogJ3BvaW50cycsXG5cdFx0U2hhZG93TWF0ZXJpYWw6ICdzaGFkb3cnLFxuXHRcdFNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJ1xuXHR9O1xuXG5cdHZhciBwYXJhbWV0ZXJOYW1lcyA9IFtcblx0XHRcInByZWNpc2lvblwiLCBcInN1cHBvcnRzVmVydGV4VGV4dHVyZXNcIiwgXCJtYXBcIiwgXCJtYXBFbmNvZGluZ1wiLCBcIm1hdGNhcFwiLCBcIm1hdGNhcEVuY29kaW5nXCIsIFwiZW52TWFwXCIsIFwiZW52TWFwTW9kZVwiLCBcImVudk1hcEVuY29kaW5nXCIsXG5cdFx0XCJsaWdodE1hcFwiLCBcImFvTWFwXCIsIFwiZW1pc3NpdmVNYXBcIiwgXCJlbWlzc2l2ZU1hcEVuY29kaW5nXCIsIFwiYnVtcE1hcFwiLCBcIm5vcm1hbE1hcFwiLCBcIm9iamVjdFNwYWNlTm9ybWFsTWFwXCIsIFwiZGlzcGxhY2VtZW50TWFwXCIsIFwic3BlY3VsYXJNYXBcIixcblx0XHRcInJvdWdobmVzc01hcFwiLCBcIm1ldGFsbmVzc01hcFwiLCBcImdyYWRpZW50TWFwXCIsXG5cdFx0XCJhbHBoYU1hcFwiLCBcImNvbWJpbmVcIiwgXCJ2ZXJ0ZXhDb2xvcnNcIiwgXCJ2ZXJ0ZXhUYW5nZW50c1wiLCBcImZvZ1wiLCBcInVzZUZvZ1wiLCBcImZvZ0V4cFwiLFxuXHRcdFwiZmxhdFNoYWRpbmdcIiwgXCJzaXplQXR0ZW51YXRpb25cIiwgXCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyXCIsIFwic2tpbm5pbmdcIixcblx0XHRcIm1heEJvbmVzXCIsIFwidXNlVmVydGV4VGV4dHVyZVwiLCBcIm1vcnBoVGFyZ2V0c1wiLCBcIm1vcnBoTm9ybWFsc1wiLFxuXHRcdFwibWF4TW9ycGhUYXJnZXRzXCIsIFwibWF4TW9ycGhOb3JtYWxzXCIsIFwicHJlbXVsdGlwbGllZEFscGhhXCIsXG5cdFx0XCJudW1EaXJMaWdodHNcIiwgXCJudW1Qb2ludExpZ2h0c1wiLCBcIm51bVNwb3RMaWdodHNcIiwgXCJudW1IZW1pTGlnaHRzXCIsIFwibnVtUmVjdEFyZWFMaWdodHNcIixcblx0XHRcInNoYWRvd01hcEVuYWJsZWRcIiwgXCJzaGFkb3dNYXBUeXBlXCIsIFwidG9uZU1hcHBpbmdcIiwgJ3BoeXNpY2FsbHlDb3JyZWN0TGlnaHRzJyxcblx0XHRcImFscGhhVGVzdFwiLCBcImRvdWJsZVNpZGVkXCIsIFwiZmxpcFNpZGVkXCIsIFwibnVtQ2xpcHBpbmdQbGFuZXNcIiwgXCJudW1DbGlwSW50ZXJzZWN0aW9uXCIsIFwiZGVwdGhQYWNraW5nXCIsIFwiZGl0aGVyaW5nXCJcblx0XTtcblxuXG5cdGZ1bmN0aW9uIGFsbG9jYXRlQm9uZXMoIG9iamVjdCApIHtcblxuXHRcdHZhciBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjtcblx0XHR2YXIgYm9uZXMgPSBza2VsZXRvbi5ib25lcztcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXMgKSB7XG5cblx0XHRcdHJldHVybiAxMDI0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gZGVmYXVsdCBmb3Igd2hlbiBvYmplY3QgaXMgbm90IHNwZWNpZmllZFxuXHRcdFx0Ly8gKCBmb3IgZXhhbXBsZSB3aGVuIHByZWJ1aWxkaW5nIHNoYWRlciB0byBiZSB1c2VkIHdpdGggbXVsdGlwbGUgb2JqZWN0cyApXG5cdFx0XHQvL1xuXHRcdFx0Ly8gIC0gbGVhdmUgc29tZSBleHRyYSBzcGFjZSBmb3Igb3RoZXIgdW5pZm9ybXNcblx0XHRcdC8vICAtIGxpbWl0IGhlcmUgaXMgQU5HTEUncyAyNTQgbWF4IHVuaWZvcm0gdmVjdG9yc1xuXHRcdFx0Ly8gICAgKHVwIHRvIDU0IHNob3VsZCBiZSBzYWZlKVxuXG5cdFx0XHR2YXIgblZlcnRleFVuaWZvcm1zID0gY2FwYWJpbGl0aWVzLm1heFZlcnRleFVuaWZvcm1zO1xuXHRcdFx0dmFyIG5WZXJ0ZXhNYXRyaWNlcyA9IE1hdGguZmxvb3IoICggblZlcnRleFVuaWZvcm1zIC0gMjAgKSAvIDQgKTtcblxuXHRcdFx0dmFyIG1heEJvbmVzID0gTWF0aC5taW4oIG5WZXJ0ZXhNYXRyaWNlcywgYm9uZXMubGVuZ3RoICk7XG5cblx0XHRcdGlmICggbWF4Qm9uZXMgPCBib25lcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogU2tlbGV0b24gaGFzICcgKyBib25lcy5sZW5ndGggKyAnIGJvbmVzLiBUaGlzIEdQVSBzdXBwb3J0cyAnICsgbWF4Qm9uZXMgKyAnLicgKTtcblx0XHRcdFx0cmV0dXJuIDA7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1heEJvbmVzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXAsIGdhbW1hT3ZlcnJpZGVMaW5lYXIgKSB7XG5cblx0XHR2YXIgZW5jb2Rpbmc7XG5cblx0XHRpZiAoICEgbWFwICkge1xuXG5cdFx0XHRlbmNvZGluZyA9IExpbmVhckVuY29kaW5nO1xuXG5cdFx0fSBlbHNlIGlmICggbWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZW5jb2RpbmcgPSBtYXAuZW5jb2Rpbmc7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLldlYkdMUHJvZ3JhbXMuZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcDogZG9uJ3QgdXNlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC5cIiApO1xuXHRcdFx0ZW5jb2RpbmcgPSBtYXAudGV4dHVyZS5lbmNvZGluZztcblxuXHRcdH1cblxuXHRcdC8vIGFkZCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgV2ViR0xSZW5kZXJlci5nYW1tYUlucHV0L2dhbW1hT3V0cHV0IHBhcmFtZXRlciwgc2hvdWxkIHByb2JhYmx5IGJlIHJlbW92ZWQgYXQgc29tZSBwb2ludC5cblx0XHRpZiAoIGVuY29kaW5nID09PSBMaW5lYXJFbmNvZGluZyAmJiBnYW1tYU92ZXJyaWRlTGluZWFyICkge1xuXG5cdFx0XHRlbmNvZGluZyA9IEdhbW1hRW5jb2Rpbmc7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2Rpbmc7XG5cblx0fVxuXG5cdHRoaXMuZ2V0UGFyYW1ldGVycyA9IGZ1bmN0aW9uICggbWF0ZXJpYWwsIGxpZ2h0cywgc2hhZG93cywgZm9nLCBuQ2xpcFBsYW5lcywgbkNsaXBJbnRlcnNlY3Rpb24sIG9iamVjdCApIHtcblxuXHRcdHZhciBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdO1xuXG5cdFx0Ly8gaGV1cmlzdGljcyB0byBjcmVhdGUgc2hhZGVyIHBhcmFtZXRlcnMgYWNjb3JkaW5nIHRvIGxpZ2h0cyBpbiB0aGUgc2NlbmVcblx0XHQvLyAobm90IHRvIGJsb3cgb3ZlciBtYXhMaWdodHMgYnVkZ2V0KVxuXG5cdFx0dmFyIG1heEJvbmVzID0gb2JqZWN0LmlzU2tpbm5lZE1lc2ggPyBhbGxvY2F0ZUJvbmVzKCBvYmplY3QgKSA6IDA7XG5cdFx0dmFyIHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5wcmVjaXNpb247XG5cblx0XHRpZiAoIG1hdGVyaWFsLnByZWNpc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0cHJlY2lzaW9uID0gY2FwYWJpbGl0aWVzLmdldE1heFByZWNpc2lvbiggbWF0ZXJpYWwucHJlY2lzaW9uICk7XG5cblx0XHRcdGlmICggcHJlY2lzaW9uICE9PSBtYXRlcmlhbC5wcmVjaXNpb24gKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtLmdldFBhcmFtZXRlcnM6JywgbWF0ZXJpYWwucHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBwcmVjaXNpb24sICdpbnN0ZWFkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHRcdHZhciBwYXJhbWV0ZXJzID0ge1xuXG5cdFx0XHRzaGFkZXJJRDogc2hhZGVySUQsXG5cblx0XHRcdHByZWNpc2lvbjogcHJlY2lzaW9uLFxuXHRcdFx0c3VwcG9ydHNWZXJ0ZXhUZXh0dXJlczogY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzLFxuXHRcdFx0b3V0cHV0RW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoICggISBjdXJyZW50UmVuZGVyVGFyZ2V0ICkgPyBudWxsIDogY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLCByZW5kZXJlci5nYW1tYU91dHB1dCApLFxuXHRcdFx0bWFwOiAhISBtYXRlcmlhbC5tYXAsXG5cdFx0XHRtYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwubWFwLCByZW5kZXJlci5nYW1tYUlucHV0ICksXG5cdFx0XHRtYXRjYXA6ICEhIG1hdGVyaWFsLm1hdGNhcCxcblx0XHRcdG1hdGNhcEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXRlcmlhbC5tYXRjYXAsIHJlbmRlcmVyLmdhbW1hSW5wdXQgKSxcblx0XHRcdGVudk1hcDogISEgbWF0ZXJpYWwuZW52TWFwLFxuXHRcdFx0ZW52TWFwTW9kZTogbWF0ZXJpYWwuZW52TWFwICYmIG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nLFxuXHRcdFx0ZW52TWFwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoIG1hdGVyaWFsLmVudk1hcCwgcmVuZGVyZXIuZ2FtbWFJbnB1dCApLFxuXHRcdFx0ZW52TWFwQ3ViZVVWOiAoICEhIG1hdGVyaWFsLmVudk1hcCApICYmICggKCBtYXRlcmlhbC5lbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgKSB8fCAoIG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nID09PSBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZyApICksXG5cdFx0XHRsaWdodE1hcDogISEgbWF0ZXJpYWwubGlnaHRNYXAsXG5cdFx0XHRhb01hcDogISEgbWF0ZXJpYWwuYW9NYXAsXG5cdFx0XHRlbWlzc2l2ZU1hcDogISEgbWF0ZXJpYWwuZW1pc3NpdmVNYXAsXG5cdFx0XHRlbWlzc2l2ZU1hcEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCwgcmVuZGVyZXIuZ2FtbWFJbnB1dCApLFxuXHRcdFx0YnVtcE1hcDogISEgbWF0ZXJpYWwuYnVtcE1hcCxcblx0XHRcdG5vcm1hbE1hcDogISEgbWF0ZXJpYWwubm9ybWFsTWFwLFxuXHRcdFx0b2JqZWN0U3BhY2VOb3JtYWxNYXA6IG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPT09IE9iamVjdFNwYWNlTm9ybWFsTWFwLFxuXHRcdFx0ZGlzcGxhY2VtZW50TWFwOiAhISBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAsXG5cdFx0XHRyb3VnaG5lc3NNYXA6ICEhIG1hdGVyaWFsLnJvdWdobmVzc01hcCxcblx0XHRcdG1ldGFsbmVzc01hcDogISEgbWF0ZXJpYWwubWV0YWxuZXNzTWFwLFxuXHRcdFx0c3BlY3VsYXJNYXA6ICEhIG1hdGVyaWFsLnNwZWN1bGFyTWFwLFxuXHRcdFx0YWxwaGFNYXA6ICEhIG1hdGVyaWFsLmFscGhhTWFwLFxuXG5cdFx0XHRncmFkaWVudE1hcDogISEgbWF0ZXJpYWwuZ3JhZGllbnRNYXAsXG5cblx0XHRcdGNvbWJpbmU6IG1hdGVyaWFsLmNvbWJpbmUsXG5cblx0XHRcdHZlcnRleFRhbmdlbnRzOiAoIG1hdGVyaWFsLm5vcm1hbE1hcCAmJiBtYXRlcmlhbC52ZXJ0ZXhUYW5nZW50cyApLFxuXHRcdFx0dmVydGV4Q29sb3JzOiBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMsXG5cblx0XHRcdGZvZzogISEgZm9nLFxuXHRcdFx0dXNlRm9nOiBtYXRlcmlhbC5mb2csXG5cdFx0XHRmb2dFeHA6ICggZm9nICYmIGZvZy5pc0ZvZ0V4cDIgKSxcblxuXHRcdFx0ZmxhdFNoYWRpbmc6IG1hdGVyaWFsLmZsYXRTaGFkaW5nLFxuXG5cdFx0XHRzaXplQXR0ZW51YXRpb246IG1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbixcblx0XHRcdGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6IGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXG5cdFx0XHRza2lubmluZzogbWF0ZXJpYWwuc2tpbm5pbmcgJiYgbWF4Qm9uZXMgPiAwLFxuXHRcdFx0bWF4Qm9uZXM6IG1heEJvbmVzLFxuXHRcdFx0dXNlVmVydGV4VGV4dHVyZTogY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXMsXG5cblx0XHRcdG1vcnBoVGFyZ2V0czogbWF0ZXJpYWwubW9ycGhUYXJnZXRzLFxuXHRcdFx0bW9ycGhOb3JtYWxzOiBtYXRlcmlhbC5tb3JwaE5vcm1hbHMsXG5cdFx0XHRtYXhNb3JwaFRhcmdldHM6IHJlbmRlcmVyLm1heE1vcnBoVGFyZ2V0cyxcblx0XHRcdG1heE1vcnBoTm9ybWFsczogcmVuZGVyZXIubWF4TW9ycGhOb3JtYWxzLFxuXG5cdFx0XHRudW1EaXJMaWdodHM6IGxpZ2h0cy5kaXJlY3Rpb25hbC5sZW5ndGgsXG5cdFx0XHRudW1Qb2ludExpZ2h0czogbGlnaHRzLnBvaW50Lmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodHM6IGxpZ2h0cy5zcG90Lmxlbmd0aCxcblx0XHRcdG51bVJlY3RBcmVhTGlnaHRzOiBsaWdodHMucmVjdEFyZWEubGVuZ3RoLFxuXHRcdFx0bnVtSGVtaUxpZ2h0czogbGlnaHRzLmhlbWkubGVuZ3RoLFxuXG5cdFx0XHRudW1DbGlwcGluZ1BsYW5lczogbkNsaXBQbGFuZXMsXG5cdFx0XHRudW1DbGlwSW50ZXJzZWN0aW9uOiBuQ2xpcEludGVyc2VjdGlvbixcblxuXHRcdFx0ZGl0aGVyaW5nOiBtYXRlcmlhbC5kaXRoZXJpbmcsXG5cblx0XHRcdHNoYWRvd01hcEVuYWJsZWQ6IHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkICYmIG9iamVjdC5yZWNlaXZlU2hhZG93ICYmIHNoYWRvd3MubGVuZ3RoID4gMCxcblx0XHRcdHNoYWRvd01hcFR5cGU6IHJlbmRlcmVyLnNoYWRvd01hcC50eXBlLFxuXG5cdFx0XHR0b25lTWFwcGluZzogcmVuZGVyZXIudG9uZU1hcHBpbmcsXG5cdFx0XHRwaHlzaWNhbGx5Q29ycmVjdExpZ2h0czogcmVuZGVyZXIucGh5c2ljYWxseUNvcnJlY3RMaWdodHMsXG5cblx0XHRcdHByZW11bHRpcGxpZWRBbHBoYTogbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhLFxuXG5cdFx0XHRhbHBoYVRlc3Q6IG1hdGVyaWFsLmFscGhhVGVzdCxcblx0XHRcdGRvdWJsZVNpZGVkOiBtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlLFxuXHRcdFx0ZmxpcFNpZGVkOiBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSxcblxuXHRcdFx0ZGVwdGhQYWNraW5nOiAoIG1hdGVyaWFsLmRlcHRoUGFja2luZyAhPT0gdW5kZWZpbmVkICkgPyBtYXRlcmlhbC5kZXB0aFBhY2tpbmcgOiBmYWxzZVxuXG5cdFx0fTtcblxuXHRcdHJldHVybiBwYXJhbWV0ZXJzO1xuXG5cdH07XG5cblx0dGhpcy5nZXRQcm9ncmFtQ29kZSA9IGZ1bmN0aW9uICggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSBbXTtcblxuXHRcdGlmICggcGFyYW1ldGVycy5zaGFkZXJJRCApIHtcblxuXHRcdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaGFkZXJJRCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIgKTtcblx0XHRcdGFycmF5LnB1c2goIG1hdGVyaWFsLnZlcnRleFNoYWRlciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBuYW1lIGluIG1hdGVyaWFsLmRlZmluZXMgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbmFtZSApO1xuXHRcdFx0XHRhcnJheS5wdXNoKCBtYXRlcmlhbC5kZWZpbmVzWyBuYW1lIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgcGFyYW1ldGVyTmFtZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzWyBwYXJhbWV0ZXJOYW1lc1sgaSBdIF0gKTtcblxuXHRcdH1cblxuXHRcdGFycmF5LnB1c2goIG1hdGVyaWFsLm9uQmVmb3JlQ29tcGlsZS50b1N0cmluZygpICk7XG5cblx0XHRhcnJheS5wdXNoKCByZW5kZXJlci5nYW1tYU91dHB1dCApO1xuXG5cdFx0YXJyYXkucHVzaCggcmVuZGVyZXIuZ2FtbWFGYWN0b3IgKTtcblxuXHRcdHJldHVybiBhcnJheS5qb2luKCk7XG5cblx0fTtcblxuXHR0aGlzLmFjcXVpcmVQcm9ncmFtID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgc2hhZGVyLCBwYXJhbWV0ZXJzLCBjb2RlICkge1xuXG5cdFx0dmFyIHByb2dyYW07XG5cblx0XHQvLyBDaGVjayBpZiBjb2RlIGhhcyBiZWVuIGFscmVhZHkgY29tcGlsZWRcblx0XHRmb3IgKCB2YXIgcCA9IDAsIHBsID0gcHJvZ3JhbXMubGVuZ3RoOyBwIDwgcGw7IHAgKysgKSB7XG5cblx0XHRcdHZhciBwcm9ncmFtSW5mbyA9IHByb2dyYW1zWyBwIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbUluZm8uY29kZSA9PT0gY29kZSApIHtcblxuXHRcdFx0XHRwcm9ncmFtID0gcHJvZ3JhbUluZm87XG5cdFx0XHRcdCsrIHByb2dyYW0udXNlZFRpbWVzO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHByb2dyYW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbSA9IG5ldyBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBleHRlbnNpb25zLCBjb2RlLCBtYXRlcmlhbCwgc2hhZGVyLCBwYXJhbWV0ZXJzLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRcdHByb2dyYW1zLnB1c2goIHByb2dyYW0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdH07XG5cblx0dGhpcy5yZWxlYXNlUHJvZ3JhbSA9IGZ1bmN0aW9uICggcHJvZ3JhbSApIHtcblxuXHRcdGlmICggLS0gcHJvZ3JhbS51c2VkVGltZXMgPT09IDAgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBmcm9tIHVub3JkZXJlZCBzZXRcblx0XHRcdHZhciBpID0gcHJvZ3JhbXMuaW5kZXhPZiggcHJvZ3JhbSApO1xuXHRcdFx0cHJvZ3JhbXNbIGkgXSA9IHByb2dyYW1zWyBwcm9ncmFtcy5sZW5ndGggLSAxIF07XG5cdFx0XHRwcm9ncmFtcy5wb3AoKTtcblxuXHRcdFx0Ly8gRnJlZSBXZWJHTCByZXNvdXJjZXNcblx0XHRcdHByb2dyYW0uZGVzdHJveSgpO1xuXG5cdFx0fVxuXG5cdH07XG5cblx0Ly8gRXhwb3NlZCBmb3IgcmVzb3VyY2UgbW9uaXRvcmluZyAmIGVycm9yIGZlZWRiYWNrIHZpYSByZW5kZXJlci5pbmZvOlxuXHR0aGlzLnByb2dyYW1zID0gcHJvZ3JhbXM7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIGZvcmRhY2lvdXMgLyBmb3JkYWNpb3VzLmdpdGh1Yi5pb1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMUHJvcGVydGllcygpIHtcblxuXHR2YXIgcHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gZ2V0KCBvYmplY3QgKSB7XG5cblx0XHR2YXIgbWFwID0gcHJvcGVydGllcy5nZXQoIG9iamVjdCApO1xuXG5cdFx0aWYgKCBtYXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bWFwID0ge307XG5cdFx0XHRwcm9wZXJ0aWVzLnNldCggb2JqZWN0LCBtYXAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbW92ZSggb2JqZWN0ICkge1xuXG5cdFx0cHJvcGVydGllcy5kZWxldGUoIG9iamVjdCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwga2V5LCB2YWx1ZSApIHtcblxuXHRcdHByb3BlcnRpZXMuZ2V0KCBvYmplY3QgKVsga2V5IF0gPSB2YWx1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHByb3BlcnRpZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdHJlbW92ZTogcmVtb3ZlLFxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gcGFpbnRlclNvcnRTdGFibGUoIGEsIGIgKSB7XG5cblx0aWYgKCBhLmdyb3VwT3JkZXIgIT09IGIuZ3JvdXBPcmRlciApIHtcblxuXHRcdHJldHVybiBhLmdyb3VwT3JkZXIgLSBiLmdyb3VwT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHtcblxuXHRcdHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcblxuXHR9IGVsc2UgaWYgKCBhLnByb2dyYW0gIT09IGIucHJvZ3JhbSApIHtcblxuXHRcdHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG5cblx0fSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHtcblxuXHRcdHJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBhLnogLSBiLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYi56IC0gYS56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkge1xuXG5cdHZhciByZW5kZXJJdGVtcyA9IFtdO1xuXHR2YXIgcmVuZGVySXRlbXNJbmRleCA9IDA7XG5cblx0dmFyIG9wYXF1ZSA9IFtdO1xuXHR2YXIgdHJhbnNwYXJlbnQgPSBbXTtcblxuXHR2YXIgZGVmYXVsdFByb2dyYW0gPSB7IGlkOiAtIDEgfTtcblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXG5cdFx0cmVuZGVySXRlbXNJbmRleCA9IDA7XG5cblx0XHRvcGFxdWUubGVuZ3RoID0gMDtcblx0XHR0cmFuc3BhcmVudC5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXROZXh0UmVuZGVySXRlbSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwICkge1xuXG5cdFx0dmFyIHJlbmRlckl0ZW0gPSByZW5kZXJJdGVtc1sgcmVuZGVySXRlbXNJbmRleCBdO1xuXG5cdFx0aWYgKCByZW5kZXJJdGVtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlckl0ZW0gPSB7XG5cdFx0XHRcdGlkOiBvYmplY3QuaWQsXG5cdFx0XHRcdG9iamVjdDogb2JqZWN0LFxuXHRcdFx0XHRnZW9tZXRyeTogZ2VvbWV0cnksXG5cdFx0XHRcdG1hdGVyaWFsOiBtYXRlcmlhbCxcblx0XHRcdFx0cHJvZ3JhbTogbWF0ZXJpYWwucHJvZ3JhbSB8fCBkZWZhdWx0UHJvZ3JhbSxcblx0XHRcdFx0Z3JvdXBPcmRlcjogZ3JvdXBPcmRlcixcblx0XHRcdFx0cmVuZGVyT3JkZXI6IG9iamVjdC5yZW5kZXJPcmRlcixcblx0XHRcdFx0ejogeixcblx0XHRcdFx0Z3JvdXA6IGdyb3VwXG5cdFx0XHR9O1xuXG5cdFx0XHRyZW5kZXJJdGVtc1sgcmVuZGVySXRlbXNJbmRleCBdID0gcmVuZGVySXRlbTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlckl0ZW0uaWQgPSBvYmplY3QuaWQ7XG5cdFx0XHRyZW5kZXJJdGVtLm9iamVjdCA9IG9iamVjdDtcblx0XHRcdHJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0XHRcdHJlbmRlckl0ZW0ubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblx0XHRcdHJlbmRlckl0ZW0ucHJvZ3JhbSA9IG1hdGVyaWFsLnByb2dyYW0gfHwgZGVmYXVsdFByb2dyYW07XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwT3JkZXIgPSBncm91cE9yZGVyO1xuXHRcdFx0cmVuZGVySXRlbS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblx0XHRcdHJlbmRlckl0ZW0ueiA9IHo7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gZ3JvdXA7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJJdGVtc0luZGV4ICsrO1xuXG5cdFx0cmV0dXJuIHJlbmRlckl0ZW07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdHZhciByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApO1xuXG5cdFx0KCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSA/IHRyYW5zcGFyZW50IDogb3BhcXVlICkucHVzaCggcmVuZGVySXRlbSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1bnNoaWZ0KCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7XG5cblx0XHR2YXIgcmVuZGVySXRlbSA9IGdldE5leHRSZW5kZXJJdGVtKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKTtcblxuXHRcdCggbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgPyB0cmFuc3BhcmVudCA6IG9wYXF1ZSApLnVuc2hpZnQoIHJlbmRlckl0ZW0gKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc29ydCgpIHtcblxuXHRcdGlmICggb3BhcXVlLmxlbmd0aCA+IDEgKSBvcGFxdWUuc29ydCggcGFpbnRlclNvcnRTdGFibGUgKTtcblx0XHRpZiAoIHRyYW5zcGFyZW50Lmxlbmd0aCA+IDEgKSB0cmFuc3BhcmVudC5zb3J0KCByZXZlcnNlUGFpbnRlclNvcnRTdGFibGUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRvcGFxdWU6IG9wYXF1ZSxcblx0XHR0cmFuc3BhcmVudDogdHJhbnNwYXJlbnQsXG5cblx0XHRpbml0OiBpbml0LFxuXHRcdHB1c2g6IHB1c2gsXG5cdFx0dW5zaGlmdDogdW5zaGlmdCxcblxuXHRcdHNvcnQ6IHNvcnRcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlckxpc3RzKCkge1xuXG5cdHZhciBsaXN0cyA9IHt9O1xuXG5cdGZ1bmN0aW9uIG9uU2NlbmVEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciBzY2VuZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHNjZW5lLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25TY2VuZURpc3Bvc2UgKTtcblxuXHRcdGRlbGV0ZSBsaXN0c1sgc2NlbmUuaWQgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0KCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0dmFyIGNhbWVyYXMgPSBsaXN0c1sgc2NlbmUuaWQgXTtcblx0XHR2YXIgbGlzdDtcblx0XHRpZiAoIGNhbWVyYXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdGxpc3RzWyBzY2VuZS5pZCBdID0ge307XG5cdFx0XHRsaXN0c1sgc2NlbmUuaWQgXVsgY2FtZXJhLmlkIF0gPSBsaXN0O1xuXG5cdFx0XHRzY2VuZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uU2NlbmVEaXNwb3NlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsaXN0ID0gY2FtZXJhc1sgY2FtZXJhLmlkIF07XG5cdFx0XHRpZiAoIGxpc3QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRsaXN0ID0gbmV3IFdlYkdMUmVuZGVyTGlzdCgpO1xuXHRcdFx0XHRjYW1lcmFzWyBjYW1lcmEuaWQgXSA9IGxpc3Q7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBsaXN0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0bGlzdHMgPSB7fTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFVuaWZvcm1zQ2FjaGUoKSB7XG5cblx0dmFyIGxpZ2h0cyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHRcdGlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxpZ2h0c1sgbGlnaHQuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdW5pZm9ybXM7XG5cblx0XHRcdHN3aXRjaCAoIGxpZ2h0LnR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cblx0XHRcdFx0XHRcdHNoYWRvdzogZmFsc2UsXG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU3BvdExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IDAsXG5cdFx0XHRcdFx0XHRjb25lQ29zOiAwLFxuXHRcdFx0XHRcdFx0cGVudW1icmFDb3M6IDAsXG5cdFx0XHRcdFx0XHRkZWNheTogMCxcblxuXHRcdFx0XHRcdFx0c2hhZG93OiBmYWxzZSxcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQb2ludExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IDAsXG5cdFx0XHRcdFx0XHRkZWNheTogMCxcblxuXHRcdFx0XHRcdFx0c2hhZG93OiBmYWxzZSxcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpLFxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhTmVhcjogMSxcblx0XHRcdFx0XHRcdHNoYWRvd0NhbWVyYUZhcjogMTAwMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnSGVtaXNwaGVyZUxpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdHNreUNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGdyb3VuZENvbG9yOiBuZXcgQ29sb3IoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUmVjdEFyZWFMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGhhbGZXaWR0aDogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGhhbGZIZWlnaHQ6IG5ldyBWZWN0b3IzKClcblx0XHRcdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBzZXQgUmVjdEFyZWFMaWdodCBzaGFkb3cgdW5pZm9ybXNcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxpZ2h0c1sgbGlnaHQuaWQgXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRyZXR1cm4gdW5pZm9ybXM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG52YXIgbmV4dFZlcnNpb24gPSAwO1xuXG5mdW5jdGlvbiBXZWJHTExpZ2h0cygpIHtcblxuXHR2YXIgY2FjaGUgPSBuZXcgVW5pZm9ybXNDYWNoZSgpO1xuXG5cdHZhciBzdGF0ZSA9IHtcblxuXHRcdHZlcnNpb246IDAsXG5cblx0XHRoYXNoOiB7XG5cdFx0XHRkaXJlY3Rpb25hbExlbmd0aDogLSAxLFxuXHRcdFx0cG9pbnRMZW5ndGg6IC0gMSxcblx0XHRcdHNwb3RMZW5ndGg6IC0gMSxcblx0XHRcdHJlY3RBcmVhTGVuZ3RoOiAtIDEsXG5cdFx0XHRoZW1pTGVuZ3RoOiAtIDEsXG5cdFx0XHRzaGFkb3dzTGVuZ3RoOiAtIDEsXG5cdFx0fSxcblxuXHRcdGFtYmllbnQ6IFsgMCwgMCwgMCBdLFxuXHRcdHByb2JlOiBbXSxcblx0XHRkaXJlY3Rpb25hbDogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXA6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiBbXSxcblx0XHRzcG90OiBbXSxcblx0XHRzcG90U2hhZG93TWFwOiBbXSxcblx0XHRzcG90U2hhZG93TWF0cml4OiBbXSxcblx0XHRyZWN0QXJlYTogW10sXG5cdFx0cG9pbnQ6IFtdLFxuXHRcdHBvaW50U2hhZG93TWFwOiBbXSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXG5cdFx0aGVtaTogW11cblxuXHR9O1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSBzdGF0ZS5wcm9iZS5wdXNoKCBuZXcgVmVjdG9yMygpICk7XG5cblx0dmFyIHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbWF0cml4NCA9IG5ldyBNYXRyaXg0KCk7XG5cdHZhciBtYXRyaXg0MiA9IG5ldyBNYXRyaXg0KCk7XG5cblx0ZnVuY3Rpb24gc2V0dXAoIGxpZ2h0cywgc2hhZG93cywgY2FtZXJhICkge1xuXG5cdFx0dmFyIHIgPSAwLCBnID0gMCwgYiA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkgc3RhdGUucHJvYmVbIGkgXS5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdHZhciBkaXJlY3Rpb25hbExlbmd0aCA9IDA7XG5cdFx0dmFyIHBvaW50TGVuZ3RoID0gMDtcblx0XHR2YXIgc3BvdExlbmd0aCA9IDA7XG5cdFx0dmFyIHJlY3RBcmVhTGVuZ3RoID0gMDtcblx0XHR2YXIgaGVtaUxlbmd0aCA9IDA7XG5cblx0XHR2YXIgdmlld01hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGxpZ2h0ID0gbGlnaHRzWyBpIF07XG5cblx0XHRcdHZhciBjb2xvciA9IGxpZ2h0LmNvbG9yO1xuXHRcdFx0dmFyIGludGVuc2l0eSA9IGxpZ2h0LmludGVuc2l0eTtcblx0XHRcdHZhciBkaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXG5cdFx0XHR2YXIgc2hhZG93TWFwID0gKCBsaWdodC5zaGFkb3cgJiYgbGlnaHQuc2hhZG93Lm1hcCApID8gbGlnaHQuc2hhZG93Lm1hcC50ZXh0dXJlIDogbnVsbDtcblxuXHRcdFx0aWYgKCBsaWdodC5pc0FtYmllbnRMaWdodCApIHtcblxuXHRcdFx0XHRyICs9IGNvbG9yLnIgKiBpbnRlbnNpdHk7XG5cdFx0XHRcdGcgKz0gY29sb3IuZyAqIGludGVuc2l0eTtcblx0XHRcdFx0YiArPSBjb2xvci5iICogaW50ZW5zaXR5O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0xpZ2h0UHJvYmUgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgOTsgaiArKyApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnByb2JlWyBqIF0uYWRkU2NhbGVkVmVjdG9yKCBsaWdodC5zaC5jb2VmZmljaWVudHNbIGogXSwgaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0RpcmVjdGlvbmFsTGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBkaXJlY3Rpb25hbExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRkaXJlY3Rpb25hbExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNTcG90TGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc3ViKCB2ZWN0b3IzICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb25lQ29zID0gTWF0aC5jb3MoIGxpZ2h0LmFuZ2xlICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBlbnVtYnJhQ29zID0gTWF0aC5jb3MoIGxpZ2h0LmFuZ2xlICogKCAxIC0gbGlnaHQucGVudW1icmEgKSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9IGxpZ2h0LmRlY2F5O1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcFsgc3BvdExlbmd0aCBdID0gc2hhZG93TWFwO1xuXHRcdFx0XHRzdGF0ZS5zcG90U2hhZG93TWF0cml4WyBzcG90TGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXHRcdFx0XHRzdGF0ZS5zcG90WyBzcG90TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRzcG90TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1JlY3RBcmVhTGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdC8vIChhKSBpbnRlbnNpdHkgaXMgdGhlIHRvdGFsIHZpc2libGUgbGlnaHQgZW1pdHRlZFxuXHRcdFx0XHQvL3VuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSAvICggbGlnaHQud2lkdGggKiBsaWdodC5oZWlnaHQgKiBNYXRoLlBJICkgKTtcblxuXHRcdFx0XHQvLyAoYikgaW50ZW5zaXR5IGlzIHRoZSBicmlnaHRuZXNzIG9mIHRoZSBsaWdodFxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBjb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdC8vIGV4dHJhY3QgbG9jYWwgcm90YXRpb24gb2YgbGlnaHQgdG8gZGVyaXZlIHdpZHRoL2hlaWdodCBoYWxmIHZlY3RvcnNcblx0XHRcdFx0bWF0cml4NDIuaWRlbnRpdHkoKTtcblx0XHRcdFx0bWF0cml4NC5jb3B5KCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHRtYXRyaXg0LnByZW11bHRpcGx5KCB2aWV3TWF0cml4ICk7XG5cdFx0XHRcdG1hdHJpeDQyLmV4dHJhY3RSb3RhdGlvbiggbWF0cml4NCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZXaWR0aC5zZXQoIGxpZ2h0LndpZHRoICogMC41LCAwLjAsIDAuMCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LnNldCggMC4wLCBsaWdodC5oZWlnaHQgKiAwLjUsIDAuMCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZXaWR0aC5hcHBseU1hdHJpeDQoIG1hdHJpeDQyICk7XG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApO1xuXG5cdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IGRpc3RhbmNlP1xuXHRcdFx0XHQvLyB1bmlmb3Jtcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuXG5cdFx0XHRcdHN0YXRlLnJlY3RBcmVhWyByZWN0QXJlYUxlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0cmVjdEFyZWFMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzUG9pbnRMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlzdGFuY2UgPSBsaWdodC5kaXN0YW5jZTtcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3cgPSBsaWdodC5jYXN0U2hhZG93O1xuXG5cdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdHZhciBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7XG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1cztcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dNYXBTaXplID0gc2hhZG93Lm1hcFNpemU7XG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93Q2FtZXJhTmVhciA9IHNoYWRvdy5jYW1lcmEubmVhcjtcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dDYW1lcmFGYXIgPSBzaGFkb3cuY2FtZXJhLmZhcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUucG9pbnRTaGFkb3dNYXBbIHBvaW50TGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4WyBwb2ludExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblx0XHRcdFx0c3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIHZpZXdNYXRyaXggKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNreUNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5ncm91bmRDb2xvci5jb3B5KCBsaWdodC5ncm91bmRDb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRzdGF0ZS5oZW1pWyBoZW1pTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRoZW1pTGVuZ3RoICsrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hbWJpZW50WyAwIF0gPSByO1xuXHRcdHN0YXRlLmFtYmllbnRbIDEgXSA9IGc7XG5cdFx0c3RhdGUuYW1iaWVudFsgMiBdID0gYjtcblxuXHRcdHZhciBoYXNoID0gc3RhdGUuaGFzaDtcblxuXHRcdGlmICggaGFzaC5kaXJlY3Rpb25hbExlbmd0aCAhPT0gZGlyZWN0aW9uYWxMZW5ndGggfHxcblx0XHRcdGhhc2gucG9pbnRMZW5ndGggIT09IHBvaW50TGVuZ3RoIHx8XG5cdFx0XHRoYXNoLnNwb3RMZW5ndGggIT09IHNwb3RMZW5ndGggfHxcblx0XHRcdGhhc2gucmVjdEFyZWFMZW5ndGggIT09IHJlY3RBcmVhTGVuZ3RoIHx8XG5cdFx0XHRoYXNoLmhlbWlMZW5ndGggIT09IGhlbWlMZW5ndGggfHxcblx0XHRcdGhhc2guc2hhZG93c0xlbmd0aCAhPT0gc2hhZG93cy5sZW5ndGggKSB7XG5cblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsLmxlbmd0aCA9IGRpcmVjdGlvbmFsTGVuZ3RoO1xuXHRcdFx0c3RhdGUuc3BvdC5sZW5ndGggPSBzcG90TGVuZ3RoO1xuXHRcdFx0c3RhdGUucmVjdEFyZWEubGVuZ3RoID0gcmVjdEFyZWFMZW5ndGg7XG5cdFx0XHRzdGF0ZS5wb2ludC5sZW5ndGggPSBwb2ludExlbmd0aDtcblx0XHRcdHN0YXRlLmhlbWkubGVuZ3RoID0gaGVtaUxlbmd0aDtcblxuXHRcdFx0aGFzaC5kaXJlY3Rpb25hbExlbmd0aCA9IGRpcmVjdGlvbmFsTGVuZ3RoO1xuXHRcdFx0aGFzaC5wb2ludExlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdFx0aGFzaC5zcG90TGVuZ3RoID0gc3BvdExlbmd0aDtcblx0XHRcdGhhc2gucmVjdEFyZWFMZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcblx0XHRcdGhhc2guaGVtaUxlbmd0aCA9IGhlbWlMZW5ndGg7XG5cdFx0XHRoYXNoLnNoYWRvd3NMZW5ndGggPSBzaGFkb3dzLmxlbmd0aDtcblxuXHRcdFx0c3RhdGUudmVyc2lvbiA9IG5leHRWZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHNldHVwOiBzZXR1cCxcblx0XHRzdGF0ZTogc3RhdGVcblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZSgpIHtcblxuXHR2YXIgbGlnaHRzID0gbmV3IFdlYkdMTGlnaHRzKCk7XG5cblx0dmFyIGxpZ2h0c0FycmF5ID0gW107XG5cdHZhciBzaGFkb3dzQXJyYXkgPSBbXTtcblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXG5cdFx0bGlnaHRzQXJyYXkubGVuZ3RoID0gMDtcblx0XHRzaGFkb3dzQXJyYXkubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaExpZ2h0KCBsaWdodCApIHtcblxuXHRcdGxpZ2h0c0FycmF5LnB1c2goIGxpZ2h0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2hTaGFkb3coIHNoYWRvd0xpZ2h0ICkge1xuXG5cdFx0c2hhZG93c0FycmF5LnB1c2goIHNoYWRvd0xpZ2h0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwTGlnaHRzKCBjYW1lcmEgKSB7XG5cblx0XHRsaWdodHMuc2V0dXAoIGxpZ2h0c0FycmF5LCBzaGFkb3dzQXJyYXksIGNhbWVyYSApO1xuXG5cdH1cblxuXHR2YXIgc3RhdGUgPSB7XG5cdFx0bGlnaHRzQXJyYXk6IGxpZ2h0c0FycmF5LFxuXHRcdHNoYWRvd3NBcnJheTogc2hhZG93c0FycmF5LFxuXG5cdFx0bGlnaHRzOiBsaWdodHNcblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXQsXG5cdFx0c3RhdGU6IHN0YXRlLFxuXHRcdHNldHVwTGlnaHRzOiBzZXR1cExpZ2h0cyxcblxuXHRcdHB1c2hMaWdodDogcHVzaExpZ2h0LFxuXHRcdHB1c2hTaGFkb3c6IHB1c2hTaGFkb3dcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlcygpIHtcblxuXHR2YXIgcmVuZGVyU3RhdGVzID0ge307XG5cblx0ZnVuY3Rpb24gb25TY2VuZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIHNjZW5lID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0c2NlbmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblNjZW5lRGlzcG9zZSApO1xuXG5cdFx0ZGVsZXRlIHJlbmRlclN0YXRlc1sgc2NlbmUuaWQgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0KCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0dmFyIHJlbmRlclN0YXRlO1xuXG5cdFx0aWYgKCByZW5kZXJTdGF0ZXNbIHNjZW5lLmlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmVuZGVyU3RhdGUgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZSgpO1xuXHRcdFx0cmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdID0ge307XG5cdFx0XHRyZW5kZXJTdGF0ZXNbIHNjZW5lLmlkIF1bIGNhbWVyYS5pZCBdID0gcmVuZGVyU3RhdGU7XG5cblx0XHRcdHNjZW5lLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25TY2VuZURpc3Bvc2UgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggcmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdWyBjYW1lcmEuaWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoKTtcblx0XHRcdFx0cmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdWyBjYW1lcmEuaWQgXSA9IHJlbmRlclN0YXRlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdWyBjYW1lcmEuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlbmRlclN0YXRlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cmVuZGVyU3RhdGVzID0ge307XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cHM6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXG4gKlxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hEZXB0aE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaERlcHRoTWF0ZXJpYWwnO1xuXG5cdHRoaXMuZGVwdGhQYWNraW5nID0gQmFzaWNEZXB0aFBhY2tpbmc7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHR0aGlzLmZvZyA9IGZhbHNlO1xuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoRGVwdGhNYXRlcmlhbDtcblxuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaERlcHRoTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVwdGhQYWNraW5nID0gc291cmNlLmRlcHRoUGFja2luZztcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICpcbiAqICByZWZlcmVuY2VQb3NpdGlvbjogPGZsb2F0PixcbiAqICBuZWFyRGlzdGFuY2U6IDxmbG9hdD4sXG4gKiAgZmFyRGlzdGFuY2U6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+XG4gKlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hEaXN0YW5jZU1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaERpc3RhbmNlTWF0ZXJpYWwnO1xuXG5cdHRoaXMucmVmZXJlbmNlUG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLm5lYXJEaXN0YW5jZSA9IDE7XG5cdHRoaXMuZmFyRGlzdGFuY2UgPSAxMDAwO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHR0aGlzLmZvZyA9IGZhbHNlO1xuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoRGlzdGFuY2VNYXRlcmlhbDtcblxuTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMucmVmZXJlbmNlUG9zaXRpb24uY29weSggc291cmNlLnJlZmVyZW5jZVBvc2l0aW9uICk7XG5cdHRoaXMubmVhckRpc3RhbmNlID0gc291cmNlLm5lYXJEaXN0YW5jZTtcblx0dGhpcy5mYXJEaXN0YW5jZSA9IHNvdXJjZS5mYXJEaXN0YW5jZTtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRvd01hcCggX3JlbmRlcmVyLCBfb2JqZWN0cywgbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0dmFyIF9mcnVzdHVtID0gbmV3IEZydXN0dW0oKSxcblx0XHRfcHJvalNjcmVlbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCksXG5cblx0XHRfc2hhZG93TWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCksXG5cdFx0X21heFNoYWRvd01hcFNpemUgPSBuZXcgVmVjdG9yMiggbWF4VGV4dHVyZVNpemUsIG1heFRleHR1cmVTaXplICksXG5cblx0XHRfbG9va1RhcmdldCA9IG5ldyBWZWN0b3IzKCksXG5cdFx0X2xpZ2h0UG9zaXRpb25Xb3JsZCA9IG5ldyBWZWN0b3IzKCksXG5cblx0XHRfTW9ycGhpbmdGbGFnID0gMSxcblx0XHRfU2tpbm5pbmdGbGFnID0gMixcblxuXHRcdF9OdW1iZXJPZk1hdGVyaWFsVmFyaWFudHMgPSAoIF9Nb3JwaGluZ0ZsYWcgfCBfU2tpbm5pbmdGbGFnICkgKyAxLFxuXG5cdFx0X2RlcHRoTWF0ZXJpYWxzID0gbmV3IEFycmF5KCBfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzICksXG5cdFx0X2Rpc3RhbmNlTWF0ZXJpYWxzID0gbmV3IEFycmF5KCBfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzICksXG5cblx0XHRfbWF0ZXJpYWxDYWNoZSA9IHt9O1xuXG5cdHZhciBzaGFkb3dTaWRlID0geyAwOiBCYWNrU2lkZSwgMTogRnJvbnRTaWRlLCAyOiBEb3VibGVTaWRlIH07XG5cblx0dmFyIGN1YmVEaXJlY3Rpb25zID0gW1xuXHRcdG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcblx0XHRuZXcgVmVjdG9yMyggMCwgMCwgLSAxICksIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAtIDEsIDAgKVxuXHRdO1xuXG5cdHZhciBjdWJlVXBzID0gW1xuXHRcdG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksXG5cdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKVxuXHRdO1xuXG5cdHZhciBjdWJlMkRWaWV3UG9ydHMgPSBbXG5cdFx0bmV3IFZlY3RvcjQoKSwgbmV3IFZlY3RvcjQoKSwgbmV3IFZlY3RvcjQoKSxcblx0XHRuZXcgVmVjdG9yNCgpLCBuZXcgVmVjdG9yNCgpLCBuZXcgVmVjdG9yNCgpXG5cdF07XG5cblx0Ly8gaW5pdFxuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gX051bWJlck9mTWF0ZXJpYWxWYXJpYW50czsgKysgaSApIHtcblxuXHRcdHZhciB1c2VNb3JwaGluZyA9ICggaSAmIF9Nb3JwaGluZ0ZsYWcgKSAhPT0gMDtcblx0XHR2YXIgdXNlU2tpbm5pbmcgPSAoIGkgJiBfU2tpbm5pbmdGbGFnICkgIT09IDA7XG5cblx0XHR2YXIgZGVwdGhNYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCgge1xuXG5cdFx0XHRkZXB0aFBhY2tpbmc6IFJHQkFEZXB0aFBhY2tpbmcsXG5cblx0XHRcdG1vcnBoVGFyZ2V0czogdXNlTW9ycGhpbmcsXG5cdFx0XHRza2lubmluZzogdXNlU2tpbm5pbmdcblxuXHRcdH0gKTtcblxuXHRcdF9kZXB0aE1hdGVyaWFsc1sgaSBdID0gZGVwdGhNYXRlcmlhbDtcblxuXHRcdC8vXG5cblx0XHR2YXIgZGlzdGFuY2VNYXRlcmlhbCA9IG5ldyBNZXNoRGlzdGFuY2VNYXRlcmlhbCgge1xuXG5cdFx0XHRtb3JwaFRhcmdldHM6IHVzZU1vcnBoaW5nLFxuXHRcdFx0c2tpbm5pbmc6IHVzZVNraW5uaW5nXG5cblx0XHR9ICk7XG5cblx0XHRfZGlzdGFuY2VNYXRlcmlhbHNbIGkgXSA9IGRpc3RhbmNlTWF0ZXJpYWw7XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlO1xuXHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy50eXBlID0gUENGU2hhZG93TWFwO1xuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBsaWdodHMsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXHRcdGlmICggc2NvcGUuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgJiYgc2NvcGUubmVlZHNVcGRhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0aWYgKCBsaWdodHMubGVuZ3RoID09PSAwICkgcmV0dXJuO1xuXG5cdFx0dmFyIGN1cnJlbnRSZW5kZXJUYXJnZXQgPSBfcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0dmFyIGFjdGl2ZUN1YmVGYWNlID0gX3JlbmRlcmVyLmdldEFjdGl2ZUN1YmVGYWNlKCk7XG5cdFx0dmFyIGFjdGl2ZU1pcG1hcExldmVsID0gX3JlbmRlcmVyLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7XG5cblx0XHR2YXIgX3N0YXRlID0gX3JlbmRlcmVyLnN0YXRlO1xuXG5cdFx0Ly8gU2V0IEdMIHN0YXRlIGZvciBkZXB0aCBtYXAuXG5cdFx0X3N0YXRlLnNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7XG5cdFx0X3N0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDEsIDEsIDEsIDEgKTtcblx0XHRfc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KCB0cnVlICk7XG5cdFx0X3N0YXRlLnNldFNjaXNzb3JUZXN0KCBmYWxzZSApO1xuXG5cdFx0Ly8gcmVuZGVyIGRlcHRoIG1hcFxuXG5cdFx0dmFyIGZhY2VDb3VudDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBsaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBsaWdodCA9IGxpZ2h0c1sgaSBdO1xuXHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblx0XHRcdHZhciBpc1BvaW50TGlnaHQgPSBsaWdodCAmJiBsaWdodC5pc1BvaW50TGlnaHQ7XG5cblx0XHRcdGlmICggc2hhZG93ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xTaGFkb3dNYXA6JywgbGlnaHQsICdoYXMgbm8gc2hhZG93LicgKTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHNoYWRvd0NhbWVyYSA9IHNoYWRvdy5jYW1lcmE7XG5cblx0XHRcdF9zaGFkb3dNYXBTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7XG5cdFx0XHRfc2hhZG93TWFwU2l6ZS5taW4oIF9tYXhTaGFkb3dNYXBTaXplICk7XG5cblx0XHRcdGlmICggaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdHZhciB2cFdpZHRoID0gX3NoYWRvd01hcFNpemUueDtcblx0XHRcdFx0dmFyIHZwSGVpZ2h0ID0gX3NoYWRvd01hcFNpemUueTtcblxuXHRcdFx0XHQvLyBUaGVzZSB2aWV3cG9ydHMgbWFwIGEgY3ViZS1tYXAgb250byBhIDJEIHRleHR1cmUgd2l0aCB0aGVcblx0XHRcdFx0Ly8gZm9sbG93aW5nIG9yaWVudGF0aW9uOlxuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyAgeHpYWlxuXHRcdFx0XHQvLyAgIHkgWVxuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyBYIC0gUG9zaXRpdmUgeCBkaXJlY3Rpb25cblx0XHRcdFx0Ly8geCAtIE5lZ2F0aXZlIHggZGlyZWN0aW9uXG5cdFx0XHRcdC8vIFkgLSBQb3NpdGl2ZSB5IGRpcmVjdGlvblxuXHRcdFx0XHQvLyB5IC0gTmVnYXRpdmUgeSBkaXJlY3Rpb25cblx0XHRcdFx0Ly8gWiAtIFBvc2l0aXZlIHogZGlyZWN0aW9uXG5cdFx0XHRcdC8vIHogLSBOZWdhdGl2ZSB6IGRpcmVjdGlvblxuXG5cdFx0XHRcdC8vIHBvc2l0aXZlIFhcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyAwIF0uc2V0KCB2cFdpZHRoICogMiwgdnBIZWlnaHQsIHZwV2lkdGgsIHZwSGVpZ2h0ICk7XG5cdFx0XHRcdC8vIG5lZ2F0aXZlIFhcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyAxIF0uc2V0KCAwLCB2cEhlaWdodCwgdnBXaWR0aCwgdnBIZWlnaHQgKTtcblx0XHRcdFx0Ly8gcG9zaXRpdmUgWlxuXHRcdFx0XHRjdWJlMkRWaWV3UG9ydHNbIDIgXS5zZXQoIHZwV2lkdGggKiAzLCB2cEhlaWdodCwgdnBXaWR0aCwgdnBIZWlnaHQgKTtcblx0XHRcdFx0Ly8gbmVnYXRpdmUgWlxuXHRcdFx0XHRjdWJlMkRWaWV3UG9ydHNbIDMgXS5zZXQoIHZwV2lkdGgsIHZwSGVpZ2h0LCB2cFdpZHRoLCB2cEhlaWdodCApO1xuXHRcdFx0XHQvLyBwb3NpdGl2ZSBZXG5cdFx0XHRcdGN1YmUyRFZpZXdQb3J0c1sgNCBdLnNldCggdnBXaWR0aCAqIDMsIDAsIHZwV2lkdGgsIHZwSGVpZ2h0ICk7XG5cdFx0XHRcdC8vIG5lZ2F0aXZlIFlcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyA1IF0uc2V0KCB2cFdpZHRoLCAwLCB2cFdpZHRoLCB2cEhlaWdodCApO1xuXG5cdFx0XHRcdF9zaGFkb3dNYXBTaXplLnggKj0gNC4wO1xuXHRcdFx0XHRfc2hhZG93TWFwU2l6ZS55ICo9IDIuMDtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNoYWRvdy5tYXAgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIHBhcnMgPSB7IG1pbkZpbHRlcjogTmVhcmVzdEZpbHRlciwgbWFnRmlsdGVyOiBOZWFyZXN0RmlsdGVyLCBmb3JtYXQ6IFJHQkFGb3JtYXQgfTtcblxuXHRcdFx0XHRzaGFkb3cubWFwID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBfc2hhZG93TWFwU2l6ZS54LCBfc2hhZG93TWFwU2l6ZS55LCBwYXJzICk7XG5cdFx0XHRcdHNoYWRvdy5tYXAudGV4dHVyZS5uYW1lID0gbGlnaHQubmFtZSArIFwiLnNoYWRvd01hcFwiO1xuXG5cdFx0XHRcdHNoYWRvd0NhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzaGFkb3cuaXNTcG90TGlnaHRTaGFkb3cgKSB7XG5cblx0XHRcdFx0c2hhZG93LnVwZGF0ZSggbGlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2hhZG93TWFwID0gc2hhZG93Lm1hcDtcblx0XHRcdHZhciBzaGFkb3dNYXRyaXggPSBzaGFkb3cubWF0cml4O1xuXG5cdFx0XHRfbGlnaHRQb3NpdGlvbldvcmxkLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdHNoYWRvd0NhbWVyYS5wb3NpdGlvbi5jb3B5KCBfbGlnaHRQb3NpdGlvbldvcmxkICk7XG5cblx0XHRcdGlmICggaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGZhY2VDb3VudCA9IDY7XG5cblx0XHRcdFx0Ly8gZm9yIHBvaW50IGxpZ2h0cyB3ZSBzZXQgdGhlIHNoYWRvdyBtYXRyaXggdG8gYmUgYSB0cmFuc2xhdGlvbi1vbmx5IG1hdHJpeFxuXHRcdFx0XHQvLyBlcXVhbCB0byBpbnZlcnNlIG9mIHRoZSBsaWdodCdzIHBvc2l0aW9uXG5cblx0XHRcdFx0c2hhZG93TWF0cml4Lm1ha2VUcmFuc2xhdGlvbiggLSBfbGlnaHRQb3NpdGlvbldvcmxkLngsIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC55LCAtIF9saWdodFBvc2l0aW9uV29ybGQueiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZhY2VDb3VudCA9IDE7XG5cblx0XHRcdFx0X2xvb2tUYXJnZXQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0c2hhZG93Q2FtZXJhLmxvb2tBdCggX2xvb2tUYXJnZXQgKTtcblx0XHRcdFx0c2hhZG93Q2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRcdFx0Ly8gY29tcHV0ZSBzaGFkb3cgbWF0cml4XG5cblx0XHRcdFx0c2hhZG93TWF0cml4LnNldChcblx0XHRcdFx0XHQwLjUsIDAuMCwgMC4wLCAwLjUsXG5cdFx0XHRcdFx0MC4wLCAwLjUsIDAuMCwgMC41LFxuXHRcdFx0XHRcdDAuMCwgMC4wLCAwLjUsIDAuNSxcblx0XHRcdFx0XHQwLjAsIDAuMCwgMC4wLCAxLjBcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRcdHNoYWRvd01hdHJpeC5tdWx0aXBseSggc2hhZG93Q2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvd01hcCApO1xuXHRcdFx0X3JlbmRlcmVyLmNsZWFyKCk7XG5cblx0XHRcdC8vIHJlbmRlciBzaGFkb3cgbWFwIGZvciBlYWNoIGN1YmUgZmFjZSAoaWYgb21uaS1kaXJlY3Rpb25hbCkgb3Jcblx0XHRcdC8vIHJ1biBhIHNpbmdsZSBwYXNzIGlmIG5vdFxuXG5cdFx0XHRmb3IgKCB2YXIgZmFjZSA9IDA7IGZhY2UgPCBmYWNlQ291bnQ7IGZhY2UgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBpc1BvaW50TGlnaHQgKSB7XG5cblx0XHRcdFx0XHRfbG9va1RhcmdldC5jb3B5KCBzaGFkb3dDYW1lcmEucG9zaXRpb24gKTtcblx0XHRcdFx0XHRfbG9va1RhcmdldC5hZGQoIGN1YmVEaXJlY3Rpb25zWyBmYWNlIF0gKTtcblx0XHRcdFx0XHRzaGFkb3dDYW1lcmEudXAuY29weSggY3ViZVVwc1sgZmFjZSBdICk7XG5cdFx0XHRcdFx0c2hhZG93Q2FtZXJhLmxvb2tBdCggX2xvb2tUYXJnZXQgKTtcblx0XHRcdFx0XHRzaGFkb3dDYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0XHRcdHZhciB2cERpbWVuc2lvbnMgPSBjdWJlMkRWaWV3UG9ydHNbIGZhY2UgXTtcblx0XHRcdFx0XHRfc3RhdGUudmlld3BvcnQoIHZwRGltZW5zaW9ucyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyB1cGRhdGUgY2FtZXJhIG1hdHJpY2VzIGFuZCBmcnVzdHVtXG5cblx0XHRcdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRcdFx0X2ZydXN0dW0uc2V0RnJvbU1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHQvLyBzZXQgb2JqZWN0IG1hdHJpY2VzICYgZnJ1c3R1bSBjdWxsaW5nXG5cblx0XHRcdFx0cmVuZGVyT2JqZWN0KCBzY2VuZSwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGlzUG9pbnRMaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzY29wZS5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgYWN0aXZlQ3ViZUZhY2UsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIG1hdGVyaWFsLCBpc1BvaW50TGlnaHQsIGxpZ2h0UG9zaXRpb25Xb3JsZCwgc2hhZG93Q2FtZXJhTmVhciwgc2hhZG93Q2FtZXJhRmFyICkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0dmFyIHJlc3VsdCA9IG51bGw7XG5cblx0XHR2YXIgbWF0ZXJpYWxWYXJpYW50cyA9IF9kZXB0aE1hdGVyaWFscztcblx0XHR2YXIgY3VzdG9tTWF0ZXJpYWwgPSBvYmplY3QuY3VzdG9tRGVwdGhNYXRlcmlhbDtcblxuXHRcdGlmICggaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRtYXRlcmlhbFZhcmlhbnRzID0gX2Rpc3RhbmNlTWF0ZXJpYWxzO1xuXHRcdFx0Y3VzdG9tTWF0ZXJpYWwgPSBvYmplY3QuY3VzdG9tRGlzdGFuY2VNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdGlmICggISBjdXN0b21NYXRlcmlhbCApIHtcblxuXHRcdFx0dmFyIHVzZU1vcnBoaW5nID0gZmFsc2U7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdHVzZU1vcnBoaW5nID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24ubGVuZ3RoID4gMDtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0dXNlTW9ycGhpbmcgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHMgJiYgZ2VvbWV0cnkubW9ycGhUYXJnZXRzLmxlbmd0aCA+IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggJiYgbWF0ZXJpYWwuc2tpbm5pbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZG93TWFwOiBUSFJFRS5Ta2lubmVkTWVzaCB3aXRoIG1hdGVyaWFsLnNraW5uaW5nIHNldCB0byBmYWxzZTonLCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdXNlU2tpbm5pbmcgPSBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbC5za2lubmluZztcblxuXHRcdFx0dmFyIHZhcmlhbnRJbmRleCA9IDA7XG5cblx0XHRcdGlmICggdXNlTW9ycGhpbmcgKSB2YXJpYW50SW5kZXggfD0gX01vcnBoaW5nRmxhZztcblx0XHRcdGlmICggdXNlU2tpbm5pbmcgKSB2YXJpYW50SW5kZXggfD0gX1NraW5uaW5nRmxhZztcblxuXHRcdFx0cmVzdWx0ID0gbWF0ZXJpYWxWYXJpYW50c1sgdmFyaWFudEluZGV4IF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXN1bHQgPSBjdXN0b21NYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdGlmICggX3JlbmRlcmVyLmxvY2FsQ2xpcHBpbmdFbmFibGVkICYmXG5cdFx0XHRcdG1hdGVyaWFsLmNsaXBTaGFkb3dzID09PSB0cnVlICYmXG5cdFx0XHRcdG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLmxlbmd0aCAhPT0gMCApIHtcblxuXHRcdFx0Ly8gaW4gdGhpcyBjYXNlIHdlIG5lZWQgYSB1bmlxdWUgbWF0ZXJpYWwgaW5zdGFuY2UgcmVmbGVjdGluZyB0aGVcblx0XHRcdC8vIGFwcHJvcHJpYXRlIHN0YXRlXG5cblx0XHRcdHZhciBrZXlBID0gcmVzdWx0LnV1aWQsIGtleUIgPSBtYXRlcmlhbC51dWlkO1xuXG5cdFx0XHR2YXIgbWF0ZXJpYWxzRm9yVmFyaWFudCA9IF9tYXRlcmlhbENhY2hlWyBrZXlBIF07XG5cblx0XHRcdGlmICggbWF0ZXJpYWxzRm9yVmFyaWFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsc0ZvclZhcmlhbnQgPSB7fTtcblx0XHRcdFx0X21hdGVyaWFsQ2FjaGVbIGtleUEgXSA9IG1hdGVyaWFsc0ZvclZhcmlhbnQ7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGNhY2hlZE1hdGVyaWFsID0gbWF0ZXJpYWxzRm9yVmFyaWFudFsga2V5QiBdO1xuXG5cdFx0XHRpZiAoIGNhY2hlZE1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y2FjaGVkTWF0ZXJpYWwgPSByZXN1bHQuY2xvbmUoKTtcblx0XHRcdFx0bWF0ZXJpYWxzRm9yVmFyaWFudFsga2V5QiBdID0gY2FjaGVkTWF0ZXJpYWw7XG5cblx0XHRcdH1cblxuXHRcdFx0cmVzdWx0ID0gY2FjaGVkTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHRyZXN1bHQudmlzaWJsZSA9IG1hdGVyaWFsLnZpc2libGU7XG5cdFx0cmVzdWx0LndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZTtcblxuXHRcdHJlc3VsdC5zaWRlID0gKCBtYXRlcmlhbC5zaGFkb3dTaWRlICE9IG51bGwgKSA/IG1hdGVyaWFsLnNoYWRvd1NpZGUgOiBzaGFkb3dTaWRlWyBtYXRlcmlhbC5zaWRlIF07XG5cblx0XHRyZXN1bHQuY2xpcFNoYWRvd3MgPSBtYXRlcmlhbC5jbGlwU2hhZG93cztcblx0XHRyZXN1bHQuY2xpcHBpbmdQbGFuZXMgPSBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcztcblx0XHRyZXN1bHQuY2xpcEludGVyc2VjdGlvbiA9IG1hdGVyaWFsLmNsaXBJbnRlcnNlY3Rpb247XG5cblx0XHRyZXN1bHQud2lyZWZyYW1lTGluZXdpZHRoID0gbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdHJlc3VsdC5saW5ld2lkdGggPSBtYXRlcmlhbC5saW5ld2lkdGg7XG5cblx0XHRpZiAoIGlzUG9pbnRMaWdodCAmJiByZXN1bHQuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVzdWx0LnJlZmVyZW5jZVBvc2l0aW9uLmNvcHkoIGxpZ2h0UG9zaXRpb25Xb3JsZCApO1xuXHRcdFx0cmVzdWx0Lm5lYXJEaXN0YW5jZSA9IHNoYWRvd0NhbWVyYU5lYXI7XG5cdFx0XHRyZXN1bHQuZmFyRGlzdGFuY2UgPSBzaGFkb3dDYW1lcmFGYXI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGlzUG9pbnRMaWdodCApIHtcblxuXHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0dmFyIHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSAmJiAoIG9iamVjdC5pc01lc2ggfHwgb2JqZWN0LmlzTGluZSB8fCBvYmplY3QuaXNQb2ludHMgKSApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyAmJiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSApIHtcblxuXHRcdFx0XHRvYmplY3QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdHZhciBnZW9tZXRyeSA9IF9vYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdHZhciBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGsgPSAwLCBrbCA9IGdyb3Vwcy5sZW5ndGg7IGsgPCBrbDsgayArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBrIF07XG5cdFx0XHRcdFx0XHR2YXIgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGlmICggZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGRlcHRoTWF0ZXJpYWwgPSBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIGdyb3VwTWF0ZXJpYWwsIGlzUG9pbnRMaWdodCwgX2xpZ2h0UG9zaXRpb25Xb3JsZCwgc2hhZG93Q2FtZXJhLm5lYXIsIHNoYWRvd0NhbWVyYS5mYXIgKTtcblx0XHRcdFx0XHRcdFx0X3JlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggc2hhZG93Q2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdHZhciBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBtYXRlcmlhbCwgaXNQb2ludExpZ2h0LCBfbGlnaHRQb3NpdGlvbldvcmxkLCBzaGFkb3dDYW1lcmEubmVhciwgc2hhZG93Q2FtZXJhLmZhciApO1xuXHRcdFx0XHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIHNoYWRvd0NhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG9iamVjdCwgbnVsbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgaXNQb2ludExpZ2h0ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFN0YXRlKCBnbCwgZXh0ZW5zaW9ucywgdXRpbHMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRmdW5jdGlvbiBDb2xvckJ1ZmZlcigpIHtcblxuXHRcdHZhciBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdHZhciBjb2xvciA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0dmFyIGN1cnJlbnRDb2xvck1hc2sgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50Q29sb3JDbGVhciA9IG5ldyBWZWN0b3I0KCAwLCAwLCAwLCAwICk7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIGNvbG9yTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRDb2xvck1hc2sgIT09IGNvbG9yTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLmNvbG9yTWFzayggY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IGNvbG9yTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIHIsIGcsIGIsIGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHIgKj0gYTsgZyAqPSBhOyBiICo9IGE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbG9yLnNldCggciwgZywgYiwgYSApO1xuXG5cdFx0XHRcdGlmICggY3VycmVudENvbG9yQ2xlYXIuZXF1YWxzKCBjb2xvciApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyQ29sb3IoIHIsIGcsIGIsIGEgKTtcblx0XHRcdFx0XHRjdXJyZW50Q29sb3JDbGVhci5jb3B5KCBjb2xvciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudENvbG9yQ2xlYXIuc2V0KCAtIDEsIDAsIDAsIDAgKTsgLy8gc2V0IHRvIGludmFsaWQgc3RhdGVcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gRGVwdGhCdWZmZXIoKSB7XG5cblx0XHR2YXIgbG9ja2VkID0gZmFsc2U7XG5cblx0XHR2YXIgY3VycmVudERlcHRoTWFzayA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnREZXB0aEZ1bmMgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50RGVwdGhDbGVhciA9IG51bGw7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRUZXN0OiBmdW5jdGlvbiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0XHRcdGVuYWJsZSggMjkyOSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRkaXNhYmxlKCAyOTI5ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIGRlcHRoTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aE1hc2sgIT09IGRlcHRoTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLmRlcHRoTWFzayggZGVwdGhNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudERlcHRoTWFzayA9IGRlcHRoTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldEZ1bmM6IGZ1bmN0aW9uICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoRnVuYyAhPT0gZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIE5ldmVyRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxMiApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgQWx3YXlzRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxOSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTGVzc0RlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTMgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIExlc3NFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIEVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNCApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgR3JlYXRlckVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxOCApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgR3JlYXRlckRlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTYgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIE5vdEVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNyApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IGRlcHRoRnVuYztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIGRlcHRoICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoQ2xlYXIgIT09IGRlcHRoICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJEZXB0aCggZGVwdGggKTtcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IGRlcHRoO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50RGVwdGhNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gU3RlbmNpbEJ1ZmZlcigpIHtcblxuXHRcdHZhciBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdHZhciBjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoIHN0ZW5jaWxUZXN0ICkge1xuXG5cdFx0XHRcdFx0ZW5hYmxlKCAyOTYwICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGRpc2FibGUoIDI5NjAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uICggc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbE1hc2sgIT09IHN0ZW5jaWxNYXNrICYmICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbE1hc2soIHN0ZW5jaWxNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxNYXNrID0gc3RlbmNpbE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRGdW5jOiBmdW5jdGlvbiAoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsRnVuYyAhPT0gc3RlbmNpbEZ1bmMgfHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFJlZiBcdCE9PSBzdGVuY2lsUmVmIFx0fHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrICE9PSBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxGdW5jKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKTtcblxuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuYyA9IHN0ZW5jaWxGdW5jO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsUmVmID0gc3RlbmNpbFJlZjtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gc3RlbmNpbE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRPcDogZnVuY3Rpb24gKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbEZhaWxcdCAhPT0gc3RlbmNpbEZhaWwgXHR8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWkZhaWwgIT09IHN0ZW5jaWxaRmFpbCB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWlBhc3MgIT09IHN0ZW5jaWxaUGFzcyApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxPcCggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBzdGVuY2lsRmFpbDtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gc3RlbmNpbFpGYWlsO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBzdGVuY2lsWlBhc3M7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCBzdGVuY2lsICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxDbGVhciAhPT0gc3RlbmNpbCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyU3RlbmNpbCggc3RlbmNpbCApO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBzdGVuY2lsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHQvL1xuXG5cdHZhciBjb2xvckJ1ZmZlciA9IG5ldyBDb2xvckJ1ZmZlcigpO1xuXHR2YXIgZGVwdGhCdWZmZXIgPSBuZXcgRGVwdGhCdWZmZXIoKTtcblx0dmFyIHN0ZW5jaWxCdWZmZXIgPSBuZXcgU3RlbmNpbEJ1ZmZlcigpO1xuXG5cdHZhciBtYXhWZXJ0ZXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDkyMSApO1xuXHR2YXIgbmV3QXR0cmlidXRlcyA9IG5ldyBVaW50OEFycmF5KCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzICk7XG5cdHZhciBlbmFibGVkQXR0cmlidXRlcyA9IG5ldyBVaW50OEFycmF5KCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzICk7XG5cdHZhciBhdHRyaWJ1dGVEaXZpc29ycyA9IG5ldyBVaW50OEFycmF5KCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzICk7XG5cblx0dmFyIGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHR2YXIgY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID0gbnVsbDtcblxuXHR2YXIgY3VycmVudFByb2dyYW0gPSBudWxsO1xuXG5cdHZhciBjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXHR2YXIgY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XG5cblx0dmFyIGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsO1xuXHR2YXIgY3VycmVudEN1bGxGYWNlID0gbnVsbDtcblxuXHR2YXIgY3VycmVudExpbmVXaWR0aCA9IG51bGw7XG5cblx0dmFyIGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gbnVsbDtcblx0dmFyIGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSBudWxsO1xuXG5cdHZhciBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzU2NjEgKTtcblxuXHR2YXIgbGluZVdpZHRoQXZhaWxhYmxlID0gZmFsc2U7XG5cdHZhciB2ZXJzaW9uID0gMDtcblx0dmFyIGdsVmVyc2lvbiA9IGdsLmdldFBhcmFtZXRlciggNzkzOCApO1xuXG5cdGlmICggZ2xWZXJzaW9uLmluZGV4T2YoICdXZWJHTCcgKSAhPT0gLSAxICkge1xuXG5cdFx0dmVyc2lvbiA9IHBhcnNlRmxvYXQoIC9eV2ViR0xcXCAoWzAtOV0pLy5leGVjKCBnbFZlcnNpb24gKVsgMSBdICk7XG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDEuMCApO1xuXG5cdH0gZWxzZSBpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnT3BlbkdMIEVTJyApICE9PSAtIDEgKSB7XG5cblx0XHR2ZXJzaW9uID0gcGFyc2VGbG9hdCggL15PcGVuR0xcXCBFU1xcIChbMC05XSkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTtcblx0XHRsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMi4wICk7XG5cblx0fVxuXG5cdHZhciBjdXJyZW50VGV4dHVyZVNsb3QgPSBudWxsO1xuXHR2YXIgY3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHR2YXIgY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHR2YXIgY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVUZXh0dXJlKCB0eXBlLCB0YXJnZXQsIGNvdW50ICkge1xuXG5cdFx0dmFyIGRhdGEgPSBuZXcgVWludDhBcnJheSggNCApOyAvLyA0IGlzIHJlcXVpcmVkIHRvIG1hdGNoIGRlZmF1bHQgdW5wYWNrIGFsaWdubWVudCBvZiA0LlxuXHRcdHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0Z2wuYmluZFRleHR1cmUoIHR5cGUsIHRleHR1cmUgKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKCB0eXBlLCAxMDI0MSwgOTcyOCApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIDEwMjQwLCA5NzI4ICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UyRCggdGFyZ2V0ICsgaSwgMCwgNjQwOCwgMSwgMSwgMCwgNjQwOCwgNTEyMSwgZGF0YSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdHZhciBlbXB0eVRleHR1cmVzID0ge307XG5cdGVtcHR5VGV4dHVyZXNbIDM1NTMgXSA9IGNyZWF0ZVRleHR1cmUoIDM1NTMsIDM1NTMsIDEgKTtcblx0ZW1wdHlUZXh0dXJlc1sgMzQwNjcgXSA9IGNyZWF0ZVRleHR1cmUoIDM0MDY3LCAzNDA2OSwgNiApO1xuXG5cdC8vIGluaXRcblxuXHRjb2xvckJ1ZmZlci5zZXRDbGVhciggMCwgMCwgMCwgMSApO1xuXHRkZXB0aEJ1ZmZlci5zZXRDbGVhciggMSApO1xuXHRzdGVuY2lsQnVmZmVyLnNldENsZWFyKCAwICk7XG5cblx0ZW5hYmxlKCAyOTI5ICk7XG5cdGRlcHRoQnVmZmVyLnNldEZ1bmMoIExlc3NFcXVhbERlcHRoICk7XG5cblx0c2V0RmxpcFNpZGVkKCBmYWxzZSApO1xuXHRzZXRDdWxsRmFjZSggQ3VsbEZhY2VCYWNrICk7XG5cdGVuYWJsZSggMjg4NCApO1xuXG5cdHNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBpbml0QXR0cmlidXRlcygpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG5ld0F0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0bmV3QXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBhdHRyaWJ1dGUsIDAgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggYXR0cmlidXRlLCBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdFx0bmV3QXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPSAxO1xuXG5cdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPT09IDAgKSB7XG5cblx0XHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KCBhdHRyaWJ1dGUgKTtcblx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9IDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSAhPT0gbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0dmFyIGV4dGVuc2lvbiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/IGdsIDogZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0XHRleHRlbnNpb25bIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/ICd2ZXJ0ZXhBdHRyaWJEaXZpc29yJyA6ICd2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUnIF0oIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApO1xuXHRcdFx0YXR0cmlidXRlRGl2aXNvcnNbIGF0dHJpYnV0ZSBdID0gbWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBlbmFibGVkQXR0cmlidXRlcy5sZW5ndGg7IGkgIT09IGw7ICsrIGkgKSB7XG5cblx0XHRcdGlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSAhPT0gbmV3QXR0cmlidXRlc1sgaSBdICkge1xuXG5cdFx0XHRcdGdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSggaSApO1xuXHRcdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBlbmFibGUoIGlkICkge1xuXG5cdFx0aWYgKCBlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdICE9PSB0cnVlICkge1xuXG5cdFx0XHRnbC5lbmFibGUoIGlkICk7XG5cdFx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzYWJsZSggaWQgKSB7XG5cblx0XHRpZiAoIGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gIT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC5kaXNhYmxlKCBpZCApO1xuXHRcdFx0ZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMoKSB7XG5cblx0XHRpZiAoIGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cyA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID0gW107XG5cblx0XHRcdGlmICggZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHxcblx0XHRcdCAgICAgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fFxuXHRcdFx0ICAgICBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyApIHx8XG5cdFx0XHQgICAgIGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnICkgKSB7XG5cblx0XHRcdFx0dmFyIGZvcm1hdHMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM0NDY3ICk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZm9ybWF0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMucHVzaCggZm9ybWF0c1sgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1c2VQcm9ncmFtKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCBjdXJyZW50UHJvZ3JhbSAhPT0gcHJvZ3JhbSApIHtcblxuXHRcdFx0Z2wudXNlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdFx0XHRjdXJyZW50UHJvZ3JhbSA9IHByb2dyYW07XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRCbGVuZGluZyggYmxlbmRpbmcsIGJsZW5kRXF1YXRpb24sIGJsZW5kU3JjLCBibGVuZERzdCwgYmxlbmRFcXVhdGlvbkFscGhhLCBibGVuZFNyY0FscGhhLCBibGVuZERzdEFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRpZiAoIGJsZW5kaW5nID09PSBOb0JsZW5kaW5nICkge1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgKSB7XG5cblx0XHRcdFx0ZGlzYWJsZSggMzA0MiApO1xuXHRcdFx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAhIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgKSB7XG5cblx0XHRcdGVuYWJsZSggMzA0MiApO1xuXHRcdFx0Y3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJsZW5kaW5nICE9PSBDdXN0b21CbGVuZGluZyApIHtcblxuXHRcdFx0aWYgKCBibGVuZGluZyAhPT0gY3VycmVudEJsZW5kaW5nIHx8IHByZW11bHRpcGxpZWRBbHBoYSAhPT0gY3VycmVudFByZW11bHRpcGxlZEFscGhhICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudEJsZW5kRXF1YXRpb24gIT09IEFkZEVxdWF0aW9uIHx8IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgIT09IEFkZEVxdWF0aW9uICkge1xuXG5cdFx0XHRcdFx0Z2wuYmxlbmRFcXVhdGlvbiggMzI3NzQgKTtcblxuXHRcdFx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gQWRkRXF1YXRpb247XG5cdFx0XHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IEFkZEVxdWF0aW9uO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIGJsZW5kaW5nICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vcm1hbEJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggMSwgNzcxLCAxLCA3NzEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgQWRkaXRpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCAxLCAxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCAwLCAwLCA3NjksIDc3MSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBNdWx0aXBseUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggMCwgNzY4LCAwLCA3NzAgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggYmxlbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCA3NzAsIDc3MSwgMSwgNzcxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEFkZGl0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggNzcwLCAxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggMCwgNzY5ICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIE11bHRpcGx5QmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggMCwgNzY4ICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZERzdCA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXG5cdFx0XHRcdGN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xuXHRcdFx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBwcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY3VzdG9tIGJsZW5kaW5nXG5cblx0XHRibGVuZEVxdWF0aW9uQWxwaGEgPSBibGVuZEVxdWF0aW9uQWxwaGEgfHwgYmxlbmRFcXVhdGlvbjtcblx0XHRibGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYSB8fCBibGVuZFNyYztcblx0XHRibGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYSB8fCBibGVuZERzdDtcblxuXHRcdGlmICggYmxlbmRFcXVhdGlvbiAhPT0gY3VycmVudEJsZW5kRXF1YXRpb24gfHwgYmxlbmRFcXVhdGlvbkFscGhhICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoIHV0aWxzLmNvbnZlcnQoIGJsZW5kRXF1YXRpb24gKSwgdXRpbHMuY29udmVydCggYmxlbmRFcXVhdGlvbkFscGhhICkgKTtcblxuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBibGVuZEVxdWF0aW9uO1xuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRTcmMgIT09IGN1cnJlbnRCbGVuZFNyYyB8fCBibGVuZERzdCAhPT0gY3VycmVudEJsZW5kRHN0IHx8IGJsZW5kU3JjQWxwaGEgIT09IGN1cnJlbnRCbGVuZFNyY0FscGhhIHx8IGJsZW5kRHN0QWxwaGEgIT09IGN1cnJlbnRCbGVuZERzdEFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggdXRpbHMuY29udmVydCggYmxlbmRTcmMgKSwgdXRpbHMuY29udmVydCggYmxlbmREc3QgKSwgdXRpbHMuY29udmVydCggYmxlbmRTcmNBbHBoYSApLCB1dGlscy5jb252ZXJ0KCBibGVuZERzdEFscGhhICkgKTtcblxuXHRcdFx0Y3VycmVudEJsZW5kU3JjID0gYmxlbmRTcmM7XG5cdFx0XHRjdXJyZW50QmxlbmREc3QgPSBibGVuZERzdDtcblx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYTtcblx0XHRcdGN1cnJlbnRCbGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYTtcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xuXHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IG51bGw7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldE1hdGVyaWFsKCBtYXRlcmlhbCwgZnJvbnRGYWNlQ1cgKSB7XG5cblx0XHRtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlXG5cdFx0XHQ/IGRpc2FibGUoIDI4ODQgKVxuXHRcdFx0OiBlbmFibGUoIDI4ODQgKTtcblxuXHRcdHZhciBmbGlwU2lkZWQgPSAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICk7XG5cdFx0aWYgKCBmcm9udEZhY2VDVyApIGZsaXBTaWRlZCA9ICEgZmxpcFNpZGVkO1xuXG5cdFx0c2V0RmxpcFNpZGVkKCBmbGlwU2lkZWQgKTtcblxuXHRcdCggbWF0ZXJpYWwuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nICYmIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSBmYWxzZSApXG5cdFx0XHQ/IHNldEJsZW5kaW5nKCBOb0JsZW5kaW5nIClcblx0XHRcdDogc2V0QmxlbmRpbmcoIG1hdGVyaWFsLmJsZW5kaW5nLCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uLCBtYXRlcmlhbC5ibGVuZFNyYywgbWF0ZXJpYWwuYmxlbmREc3QsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb25BbHBoYSwgbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSwgbWF0ZXJpYWwuYmxlbmREc3RBbHBoYSwgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhICk7XG5cblx0XHRkZXB0aEJ1ZmZlci5zZXRGdW5jKCBtYXRlcmlhbC5kZXB0aEZ1bmMgKTtcblx0XHRkZXB0aEJ1ZmZlci5zZXRUZXN0KCBtYXRlcmlhbC5kZXB0aFRlc3QgKTtcblx0XHRkZXB0aEJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5kZXB0aFdyaXRlICk7XG5cdFx0Y29sb3JCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuY29sb3JXcml0ZSApO1xuXG5cdFx0dmFyIHN0ZW5jaWxXcml0ZSA9IG1hdGVyaWFsLnN0ZW5jaWxXcml0ZTtcblx0XHRzdGVuY2lsQnVmZmVyLnNldFRlc3QoIHN0ZW5jaWxXcml0ZSApO1xuXHRcdGlmICggc3RlbmNpbFdyaXRlICkge1xuXG5cdFx0XHRzdGVuY2lsQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLnN0ZW5jaWxGdW5jLCBtYXRlcmlhbC5zdGVuY2lsUmVmLCBtYXRlcmlhbC5zdGVuY2lsTWFzayApO1xuXHRcdFx0c3RlbmNpbEJ1ZmZlci5zZXRPcCggbWF0ZXJpYWwuc3RlbmNpbEZhaWwsIG1hdGVyaWFsLnN0ZW5jaWxaRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpQYXNzICk7XG5cblx0XHR9XG5cblx0XHRzZXRQb2x5Z29uT2Zmc2V0KCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0LCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0RmFjdG9yLCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0VW5pdHMgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApIHtcblxuXHRcdGlmICggY3VycmVudEZsaXBTaWRlZCAhPT0gZmxpcFNpZGVkICkge1xuXG5cdFx0XHRpZiAoIGZsaXBTaWRlZCApIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIDIzMDQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIDIzMDUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50RmxpcFNpZGVkID0gZmxpcFNpZGVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDdWxsRmFjZSggY3VsbEZhY2UgKSB7XG5cblx0XHRpZiAoIGN1bGxGYWNlICE9PSBDdWxsRmFjZU5vbmUgKSB7XG5cblx0XHRcdGVuYWJsZSggMjg4NCApO1xuXG5cdFx0XHRpZiAoIGN1bGxGYWNlICE9PSBjdXJyZW50Q3VsbEZhY2UgKSB7XG5cblx0XHRcdFx0aWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VCYWNrICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMjkgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VGcm9udCApIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCAxMDI4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCAxMDMyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCAyODg0ICk7XG5cblx0XHR9XG5cblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBjdWxsRmFjZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TGluZVdpZHRoKCB3aWR0aCApIHtcblxuXHRcdGlmICggd2lkdGggIT09IGN1cnJlbnRMaW5lV2lkdGggKSB7XG5cblx0XHRcdGlmICggbGluZVdpZHRoQXZhaWxhYmxlICkgZ2wubGluZVdpZHRoKCB3aWR0aCApO1xuXG5cdFx0XHRjdXJyZW50TGluZVdpZHRoID0gd2lkdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFBvbHlnb25PZmZzZXQoIHBvbHlnb25PZmZzZXQsIGZhY3RvciwgdW5pdHMgKSB7XG5cblx0XHRpZiAoIHBvbHlnb25PZmZzZXQgKSB7XG5cblx0XHRcdGVuYWJsZSggMzI4MjMgKTtcblxuXHRcdFx0aWYgKCBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciAhPT0gZmFjdG9yIHx8IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgIT09IHVuaXRzICkge1xuXG5cdFx0XHRcdGdsLnBvbHlnb25PZmZzZXQoIGZhY3RvciwgdW5pdHMgKTtcblxuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IGZhY3Rvcjtcblx0XHRcdFx0Y3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IHVuaXRzO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCAzMjgyMyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRTY2lzc29yVGVzdCggc2Npc3NvclRlc3QgKSB7XG5cblx0XHRpZiAoIHNjaXNzb3JUZXN0ICkge1xuXG5cdFx0XHRlbmFibGUoIDMwODkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDMwODkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gdGV4dHVyZVxuXG5cdGZ1bmN0aW9uIGFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApIHtcblxuXHRcdGlmICggd2ViZ2xTbG90ID09PSB1bmRlZmluZWQgKSB3ZWJnbFNsb3QgPSAzMzk4NCArIG1heFRleHR1cmVzIC0gMTtcblxuXHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ICE9PSB3ZWJnbFNsb3QgKSB7XG5cblx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApO1xuXHRcdFx0Y3VycmVudFRleHR1cmVTbG90ID0gd2ViZ2xTbG90O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBiaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRUZXh0dXJlU2xvdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0YWN0aXZlVGV4dHVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJvdW5kVGV4dHVyZSA9IHsgdHlwZTogdW5kZWZpbmVkLCB0ZXh0dXJlOiB1bmRlZmluZWQgfTtcblx0XHRcdGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXSA9IGJvdW5kVGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdGlmICggYm91bmRUZXh0dXJlLnR5cGUgIT09IHdlYmdsVHlwZSB8fCBib3VuZFRleHR1cmUudGV4dHVyZSAhPT0gd2ViZ2xUZXh0dXJlICkge1xuXG5cdFx0XHRnbC5iaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgfHwgZW1wdHlUZXh0dXJlc1sgd2ViZ2xUeXBlIF0gKTtcblxuXHRcdFx0Ym91bmRUZXh0dXJlLnR5cGUgPSB3ZWJnbFR5cGU7XG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHdlYmdsVGV4dHVyZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY29tcHJlc3NlZFRleEltYWdlMkQoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhJbWFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UzRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNjaXNzb3IoIHNjaXNzb3IgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRTY2lzc29yLmVxdWFscyggc2Npc3NvciApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuc2Npc3Nvciggc2Npc3Nvci54LCBzY2lzc29yLnksIHNjaXNzb3Iueiwgc2Npc3Nvci53ICk7XG5cdFx0XHRjdXJyZW50U2Npc3Nvci5jb3B5KCBzY2lzc29yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHZpZXdwb3J0KCB2aWV3cG9ydCApIHtcblxuXHRcdGlmICggY3VycmVudFZpZXdwb3J0LmVxdWFscyggdmlld3BvcnQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLnZpZXdwb3J0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC56LCB2aWV3cG9ydC53ICk7XG5cdFx0XHRjdXJyZW50Vmlld3BvcnQuY29weSggdmlld3BvcnQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiByZXNldCgpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGVuYWJsZWRBdHRyaWJ1dGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgaSBdID09PSAxICkge1xuXG5cdFx0XHRcdGdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSggaSApO1xuXHRcdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZW5hYmxlZENhcGFiaWxpdGllcyA9IHt9O1xuXG5cdFx0Y29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID0gbnVsbDtcblxuXHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdFx0Y3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHRcdGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cblx0XHRjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdFx0Y29sb3JCdWZmZXIucmVzZXQoKTtcblx0XHRkZXB0aEJ1ZmZlci5yZXNldCgpO1xuXHRcdHN0ZW5jaWxCdWZmZXIucmVzZXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGJ1ZmZlcnM6IHtcblx0XHRcdGNvbG9yOiBjb2xvckJ1ZmZlcixcblx0XHRcdGRlcHRoOiBkZXB0aEJ1ZmZlcixcblx0XHRcdHN0ZW5jaWw6IHN0ZW5jaWxCdWZmZXJcblx0XHR9LFxuXG5cdFx0aW5pdEF0dHJpYnV0ZXM6IGluaXRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3I6IGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IsXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXM6IGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZTogZW5hYmxlLFxuXHRcdGRpc2FibGU6IGRpc2FibGUsXG5cdFx0Z2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzOiBnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMsXG5cblx0XHR1c2VQcm9ncmFtOiB1c2VQcm9ncmFtLFxuXG5cdFx0c2V0QmxlbmRpbmc6IHNldEJsZW5kaW5nLFxuXHRcdHNldE1hdGVyaWFsOiBzZXRNYXRlcmlhbCxcblxuXHRcdHNldEZsaXBTaWRlZDogc2V0RmxpcFNpZGVkLFxuXHRcdHNldEN1bGxGYWNlOiBzZXRDdWxsRmFjZSxcblxuXHRcdHNldExpbmVXaWR0aDogc2V0TGluZVdpZHRoLFxuXHRcdHNldFBvbHlnb25PZmZzZXQ6IHNldFBvbHlnb25PZmZzZXQsXG5cblx0XHRzZXRTY2lzc29yVGVzdDogc2V0U2Npc3NvclRlc3QsXG5cblx0XHRhY3RpdmVUZXh0dXJlOiBhY3RpdmVUZXh0dXJlLFxuXHRcdGJpbmRUZXh0dXJlOiBiaW5kVGV4dHVyZSxcblx0XHRjb21wcmVzc2VkVGV4SW1hZ2UyRDogY29tcHJlc3NlZFRleEltYWdlMkQsXG5cdFx0dGV4SW1hZ2UyRDogdGV4SW1hZ2UyRCxcblx0XHR0ZXhJbWFnZTNEOiB0ZXhJbWFnZTNELFxuXG5cdFx0c2Npc3Nvcjogc2Npc3Nvcixcblx0XHR2aWV3cG9ydDogdmlld3BvcnQsXG5cblx0XHRyZXNldDogcmVzZXRcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICkge1xuXG5cdHZhciBfdmlkZW9UZXh0dXJlcyA9IHt9O1xuXHR2YXIgX2NhbnZhcztcblxuXHQvL1xuXG5cdHZhciB1c2VPZmZzY3JlZW5DYW52YXMgPSB0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJztcblxuXHRmdW5jdGlvbiBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHQvLyBVc2UgT2Zmc2NyZWVuQ2FudmFzIHdoZW4gYXZhaWxhYmxlLiBTcGVjaWFsbHkgbmVlZGVkIGluIHdlYiB3b3JrZXJzXG5cblx0XHRyZXR1cm4gdXNlT2Zmc2NyZWVuQ2FudmFzID9cblx0XHRcdG5ldyBPZmZzY3JlZW5DYW52YXMoIHdpZHRoLCBoZWlnaHQgKSA6XG5cdFx0XHRkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzaXplSW1hZ2UoIGltYWdlLCBuZWVkc1Bvd2VyT2ZUd28sIG5lZWRzTmV3Q2FudmFzLCBtYXhTaXplICkge1xuXG5cdFx0dmFyIHNjYWxlID0gMTtcblxuXHRcdC8vIGhhbmRsZSBjYXNlIGlmIHRleHR1cmUgZXhjZWVkcyBtYXggc2l6ZVxuXG5cdFx0aWYgKCBpbWFnZS53aWR0aCA+IG1heFNpemUgfHwgaW1hZ2UuaGVpZ2h0ID4gbWF4U2l6ZSApIHtcblxuXHRcdFx0c2NhbGUgPSBtYXhTaXplIC8gTWF0aC5tYXgoIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdC8vIG9ubHkgcGVyZm9ybSByZXNpemUgaWYgbmVjZXNzYXJ5XG5cblx0XHRpZiAoIHNjYWxlIDwgMSB8fCBuZWVkc1Bvd2VyT2ZUd28gPT09IHRydWUgKSB7XG5cblx0XHRcdC8vIG9ubHkgcGVyZm9ybSByZXNpemUgZm9yIGNlcnRhaW4gaW1hZ2UgdHlwZXNcblxuXHRcdFx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxuXHRcdFx0XHQoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHx8XG5cdFx0XHRcdCggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkgKSB7XG5cblx0XHRcdFx0dmFyIGZsb29yID0gbmVlZHNQb3dlck9mVHdvID8gX01hdGguZmxvb3JQb3dlck9mVHdvIDogTWF0aC5mbG9vcjtcblxuXHRcdFx0XHR2YXIgd2lkdGggPSBmbG9vciggc2NhbGUgKiBpbWFnZS53aWR0aCApO1xuXHRcdFx0XHR2YXIgaGVpZ2h0ID0gZmxvb3IoIHNjYWxlICogaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0aWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gY3JlYXRlQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdFx0Ly8gY3ViZSB0ZXh0dXJlcyBjYW4ndCByZXVzZSB0aGUgc2FtZSBjYW52YXNcblxuXHRcdFx0XHR2YXIgY2FudmFzID0gbmVlZHNOZXdDYW52YXMgPyBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKSA6IF9jYW52YXM7XG5cblx0XHRcdFx0Y2FudmFzLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRcdFx0dmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXHRcdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGhhcyBiZWVuIHJlc2l6ZWQgZnJvbSAoJyArIGltYWdlLndpZHRoICsgJ3gnICsgaW1hZ2UuaGVpZ2h0ICsgJykgdG8gKCcgKyB3aWR0aCArICd4JyArIGhlaWdodCArICcpLicgKTtcblxuXHRcdFx0XHRyZXR1cm4gY2FudmFzO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggJ2RhdGEnIGluIGltYWdlICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogSW1hZ2UgaW4gRGF0YVRleHR1cmUgaXMgdG9vIGJpZyAoJyArIGltYWdlLndpZHRoICsgJ3gnICsgaW1hZ2UuaGVpZ2h0ICsgJykuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNQb3dlck9mVHdvKCBpbWFnZSApIHtcblxuXHRcdHJldHVybiBfTWF0aC5pc1Bvd2VyT2ZUd28oIGltYWdlLndpZHRoICkgJiYgX01hdGguaXNQb3dlck9mVHdvKCBpbWFnZS5oZWlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApIHtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0cmV0dXJuICggdGV4dHVyZS53cmFwUyAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyB8fCB0ZXh0dXJlLndyYXBUICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nICkgfHxcblx0XHRcdCggdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlciApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdHJldHVybiB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyAmJiBzdXBwb3J0c01pcHMgJiZcblx0XHRcdHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXI7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQsIHRleHR1cmUsIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRfZ2wuZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCApO1xuXG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdC8vIE5vdGU6IE1hdGgubG9nKCB4ICkgKiBNYXRoLkxPRzJFIHVzZWQgaW5zdGVhZCBvZiBNYXRoLmxvZzIoIHggKSB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFMTFcblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gTWF0aC5sb2coIE1hdGgubWF4KCB3aWR0aCwgaGVpZ2h0ICkgKSAqIE1hdGguTE9HMkU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEludGVybmFsRm9ybWF0KCBnbEZvcm1hdCwgZ2xUeXBlICkge1xuXG5cdFx0aWYgKCAhIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHJldHVybiBnbEZvcm1hdDtcblxuXHRcdHZhciBpbnRlcm5hbEZvcm1hdCA9IGdsRm9ybWF0O1xuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gNjQwMyApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjYgKSBpbnRlcm5hbEZvcm1hdCA9IDMzMzI2O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMzEgKSBpbnRlcm5hbEZvcm1hdCA9IDMzMzI1O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjEgKSBpbnRlcm5hbEZvcm1hdCA9IDMzMzIxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gNjQwNyApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjYgKSBpbnRlcm5hbEZvcm1hdCA9IDM0ODM3O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMzEgKSBpbnRlcm5hbEZvcm1hdCA9IDM0ODQzO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjEgKSBpbnRlcm5hbEZvcm1hdCA9IDMyODQ5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gNjQwOCApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjYgKSBpbnRlcm5hbEZvcm1hdCA9IDM0ODM2O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMzEgKSBpbnRlcm5hbEZvcm1hdCA9IDM0ODQyO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjEgKSBpbnRlcm5hbEZvcm1hdCA9IDMyODU2O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpbnRlcm5hbEZvcm1hdCA9PT0gMzMzMjUgfHwgaW50ZXJuYWxGb3JtYXQgPT09IDMzMzI2IHx8XG5cdFx0XHRpbnRlcm5hbEZvcm1hdCA9PT0gMzQ4NDIgfHwgaW50ZXJuYWxGb3JtYXQgPT09IDM0ODM2ICkge1xuXG5cdFx0XHRleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICk7XG5cblx0XHR9IGVsc2UgaWYgKCBpbnRlcm5hbEZvcm1hdCA9PT0gMzQ4NDMgfHwgaW50ZXJuYWxGb3JtYXQgPT09IDM0ODM3ICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBGbG9hdGluZyBwb2ludCB0ZXh0dXJlcyB3aXRoIFJHQiBmb3JtYXQgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSBSR0JBIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVybmFsRm9ybWF0O1xuXG5cdH1cblxuXHQvLyBGYWxsYmFjayBmaWx0ZXJzIGZvciBub24tcG93ZXItb2YtMiB0ZXh0dXJlc1xuXG5cdGZ1bmN0aW9uIGZpbHRlckZhbGxiYWNrKCBmICkge1xuXG5cdFx0aWYgKCBmID09PSBOZWFyZXN0RmlsdGVyIHx8IGYgPT09IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIHx8IGYgPT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgKSB7XG5cblx0XHRcdHJldHVybiA5NzI4O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIDk3Mjk7XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gb25UZXh0dXJlRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHR2YXIgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRkZWFsbG9jYXRlVGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkge1xuXG5cdFx0XHRkZWxldGUgX3ZpZGVvVGV4dHVyZXNbIHRleHR1cmUuaWQgXTtcblxuXHRcdH1cblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvblJlbmRlclRhcmdldERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHJlbmRlclRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyAtLTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBkZWFsbG9jYXRlVGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdHByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXG5cdFx0aWYgKCAhIHJlbmRlclRhcmdldCApIHJldHVybjtcblxuXHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApO1xuXG5cdFx0fVxuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHZhciB0ZXh0dXJlVW5pdHMgPSAwO1xuXG5cdGZ1bmN0aW9uIHJlc2V0VGV4dHVyZVVuaXRzKCkge1xuXG5cdFx0dGV4dHVyZVVuaXRzID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWxsb2NhdGVUZXh0dXJlVW5pdCgpIHtcblxuXHRcdHZhciB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0cztcblxuXHRcdGlmICggdGV4dHVyZVVuaXQgPj0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVzICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFRleHR1cmVzOiBUcnlpbmcgdG8gdXNlICcgKyB0ZXh0dXJlVW5pdCArICcgdGV4dHVyZSB1bml0cyB3aGlsZSB0aGlzIEdQVSBzdXBwb3J0cyBvbmx5ICcgKyBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVVbml0cyArPSAxO1xuXG5cdFx0cmV0dXJuIHRleHR1cmVVbml0O1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS52ZXJzaW9uID4gMCAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbiApIHtcblxuXHRcdFx0dmFyIGltYWdlID0gdGV4dHVyZS5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIHVuZGVmaW5lZCcgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGUnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZTJEQXJyYXkoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDM1ODY2LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlM0QoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDMyODc5LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSA2ICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdFx0aW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQwLCB0ZXh0dXJlLmZsaXBZICk7XG5cblx0XHRcdFx0dmFyIGlzQ29tcHJlc3NlZCA9ICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKTtcblx0XHRcdFx0dmFyIGlzRGF0YVRleHR1cmUgPSAoIHRleHR1cmUuaW1hZ2VbIDAgXSAmJiB0ZXh0dXJlLmltYWdlWyAwIF0uaXNEYXRhVGV4dHVyZSApO1xuXG5cdFx0XHRcdHZhciBjdWJlSW1hZ2UgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIGlzQ29tcHJlc3NlZCAmJiAhIGlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdGN1YmVJbWFnZVsgaSBdID0gcmVzaXplSW1hZ2UoIHRleHR1cmUuaW1hZ2VbIGkgXSwgZmFsc2UsIHRydWUsIGNhcGFiaWxpdGllcy5tYXhDdWJlbWFwU2l6ZSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSBpc0RhdGFUZXh0dXJlID8gdGV4dHVyZS5pbWFnZVsgaSBdLmltYWdlIDogdGV4dHVyZS5pbWFnZVsgaSBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgaW1hZ2UgPSBjdWJlSW1hZ2VbIDAgXSxcblx0XHRcdFx0XHRzdXBwb3J0c01pcHMgPSBpc1Bvd2VyT2ZUd28oIGltYWdlICkgfHwgY2FwYWJpbGl0aWVzLmlzV2ViR0wyLFxuXHRcdFx0XHRcdGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQgKSxcblx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKSxcblx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIGdsRm9ybWF0LCBnbFR5cGUgKTtcblxuXHRcdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggMzQwNjcsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoICEgaXNDb21wcmVzc2VkICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR2YXIgbWlwbWFwLCBtaXBtYXBzID0gY3ViZUltYWdlWyBpIF0ubWlwbWFwcztcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IG1pcG1hcHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdGV4dHVyZS5mb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdGV4dHVyZS5mb3JtYXQgIT09IFJHQkZvcm1hdCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggc3RhdGUuZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKCkuaW5kZXhPZiggZ2xGb3JtYXQgKSA+IC0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleEltYWdlMkQoIDM0MDY5ICsgaSwgaiwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnNldFRleHR1cmVDdWJlKCknICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgaiwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICEgaXNDb21wcmVzc2VkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSApIHtcblxuXHRcdFx0XHRcdC8vIFdlIGFzc3VtZSBpbWFnZXMgZm9yIGN1YmUgbWFwIGhhdmUgdGhlIHNhbWUgc2l6ZS5cblx0XHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggMzQwNjcsIHRleHR1cmUsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlRHluYW1pYyggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdHZhciBleHRlbnNpb247XG5cblx0XHRpZiAoIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MiwgdXRpbHMuY29udmVydCggdGV4dHVyZS53cmFwUyApICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQzLCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLndyYXBUICkgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlVHlwZSA9PT0gMzI4NzkgfHwgdGV4dHVyZVR5cGUgPT09IDM1ODY2ICkge1xuXG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMzI4ODIsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmUud3JhcFIgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDAsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmUubWFnRmlsdGVyICkgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDEsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmUubWluRmlsdGVyICkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDIsIDMzMDcxICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQzLCAzMzA3MSApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVUeXBlID09PSAzMjg3OSB8fCB0ZXh0dXJlVHlwZSA9PT0gMzU4NjYgKSB7XG5cblx0XHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAzMjg4MiwgMzMwNzEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmUud3JhcFMgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgfHwgdGV4dHVyZS53cmFwVCAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGlzIG5vdCBwb3dlciBvZiB0d28uIFRleHR1cmUud3JhcFMgYW5kIFRleHR1cmUud3JhcFQgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQwLCBmaWx0ZXJGYWxsYmFjayggdGV4dHVyZS5tYWdGaWx0ZXIgKSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MSwgZmlsdGVyRmFsbGJhY2soIHRleHR1cmUubWluRmlsdGVyICkgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgJiYgZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICkgPT09IG51bGwgKSByZXR1cm47XG5cdFx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gSGFsZkZsb2F0VHlwZSAmJiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApICkgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdGlmICggdGV4dHVyZS5hbmlzb3Ryb3B5ID4gMSB8fCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgKSB7XG5cblx0XHRcdFx0X2dsLnRleFBhcmFtZXRlcmYoIHRleHR1cmVUeXBlLCBleHRlbnNpb24uVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIE1hdGgubWluKCB0ZXh0dXJlLmFuaXNvdHJvcHksIGNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCkgKSApO1xuXHRcdFx0XHRwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgPSB0ZXh0dXJlLmFuaXNvdHJvcHk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9IHRydWU7XG5cblx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0dmFyIHRleHR1cmVUeXBlID0gMzU1MztcblxuXHRcdGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlMkRBcnJheSApIHRleHR1cmVUeXBlID0gMzU4NjY7XG5cdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUzRCApIHRleHR1cmVUeXBlID0gMzI4Nzk7XG5cblx0XHRpbml0VGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUgKTtcblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDAsIHRleHR1cmUuZmxpcFkgKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQxLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMzMTcsIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cblx0XHR2YXIgbmVlZHNQb3dlck9mVHdvID0gdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApICYmIGlzUG93ZXJPZlR3byggdGV4dHVyZS5pbWFnZSApID09PSBmYWxzZTtcblx0XHR2YXIgaW1hZ2UgPSByZXNpemVJbWFnZSggdGV4dHVyZS5pbWFnZSwgbmVlZHNQb3dlck9mVHdvLCBmYWxzZSwgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICk7XG5cblx0XHR2YXIgc3VwcG9ydHNNaXBzID0gaXNQb3dlck9mVHdvKCBpbWFnZSApIHx8IGNhcGFiaWxpdGllcy5pc1dlYkdMMixcblx0XHRcdGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQgKSxcblx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApLFxuXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCBnbEZvcm1hdCwgZ2xUeXBlICk7XG5cblx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0dmFyIG1pcG1hcCwgbWlwbWFwcyA9IHRleHR1cmUubWlwbWFwcztcblxuXHRcdGlmICggdGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0Ly8gcG9wdWxhdGUgZGVwdGggdGV4dHVyZSB3aXRoIGR1bW15IGRhdGFcblxuXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDY0MDI7XG5cblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0aWYgKCAhIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHRocm93IG5ldyBFcnJvciggJ0Zsb2F0IERlcHRoIFRleHR1cmUgb25seSBzdXBwb3J0ZWQgaW4gV2ViR0wyLjAnICk7XG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzNjAxMjtcblxuXHRcdFx0fSBlbHNlIGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRcdC8vIFdlYkdMIDIuMCByZXF1aXJlcyBzaWduZWQgaW50ZXJuYWxmb3JtYXQgZm9yIGdsVGV4SW1hZ2UyRFxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzMxODk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgJiYgZ2xJbnRlcm5hbEZvcm1hdCA9PT0gNjQwMiApIHtcblxuXHRcdFx0XHQvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmVcblx0XHRcdFx0Ly8gREVQVEhfQ09NUE9ORU5UIGFuZCB0eXBlIGlzIG5vdCBVTlNJR05FRF9TSE9SVCBvciBVTlNJR05FRF9JTlRcblx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRcdGlmICggdGV4dHVyZS50eXBlICE9PSBVbnNpZ25lZFNob3J0VHlwZSAmJiB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkSW50VHlwZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFVzZSBVbnNpZ25lZFNob3J0VHlwZSBvciBVbnNpZ25lZEludFR5cGUgZm9yIERlcHRoRm9ybWF0IERlcHRoVGV4dHVyZS4nICk7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTtcblx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVwdGggc3RlbmNpbCB0ZXh0dXJlcyBuZWVkIHRoZSBERVBUSF9TVEVOQ0lMIGludGVybmFsIGZvcm1hdFxuXHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDM0MDQxO1xuXG5cdFx0XHRcdC8vIFRoZSBlcnJvciBJTlZBTElEX09QRVJBVElPTiBpcyBnZW5lcmF0ZWQgYnkgdGV4SW1hZ2UyRCBpZiBmb3JtYXQgYW5kIGludGVybmFsZm9ybWF0IGFyZVxuXHRcdFx0XHQvLyBERVBUSF9TVEVOQ0lMIGFuZCB0eXBlIGlzIG5vdCBVTlNJR05FRF9JTlRfMjRfOF9XRUJHTC5cblx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRcdGlmICggdGV4dHVyZS50eXBlICE9PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRJbnQyNDhUeXBlIGZvciBEZXB0aFN0ZW5jaWxGb3JtYXQgRGVwdGhUZXh0dXJlLicgKTtcblxuXHRcdFx0XHRcdHRleHR1cmUudHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTtcblx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzU1MywgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxuXHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHQvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHNcblxuXHRcdFx0aWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgJiYgc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoIC0gMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICYmIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JGb3JtYXQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHN0YXRlLmdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cygpLmluZGV4T2YoIGdsRm9ybWF0ICkgPiAtIDEgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUyREFycmF5ICkge1xuXG5cdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCAzNTg2NiwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlM0QgKSB7XG5cblx0XHRcdHN0YXRlLnRleEltYWdlM0QoIDMyODc5LCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyByZWd1bGFyIFRleHR1cmUgKGltYWdlLCB2aWRlbywgY2FudmFzKVxuXG5cdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxuXHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHQvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHNcblxuXHRcdFx0aWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgJiYgc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7XG5cblx0XHRcdGdlbmVyYXRlTWlwbWFwKCAzNTUzLCB0ZXh0dXJlLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0XHRpZiAoIHRleHR1cmUub25VcGRhdGUgKSB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdC8vIFJlbmRlciB0YXJnZXRzXG5cblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgdGFyZ2V0IHRleHR1cmUgYW5kIGJpbmQgaXQgdG8gY29ycmVjdCBmcmFtZWJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggZnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCApIHtcblxuXHRcdHZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLmZvcm1hdCApO1xuXHRcdHZhciBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCByZW5kZXJUYXJnZXQudGV4dHVyZS50eXBlICk7XG5cdFx0dmFyIGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApO1xuXHRcdHN0YXRlLnRleEltYWdlMkQoIHRleHR1cmVUYXJnZXQsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQsIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCAwICk7XG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgaW50ZXJuYWwgZGVwdGgvc3RlbmNpbCBidWZmZXJzIGFuZCBiaW5kIHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCwgaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCAzNjE2MSwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiAhIHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyICkge1xuXG5cdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGUgKSB7XG5cblx0XHRcdFx0dmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgMzMxODksIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCAzNjE2MSwgMzMxODksIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggMzYxNjAsIDM2MDk2LCAzNjE2MSwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSB7XG5cblx0XHRcdGlmICggaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdFx0XHR2YXIgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIDM2MTYxLCBzYW1wbGVzLCAzNTA1NiwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIDM2MTYxLCAzNDA0MSwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIDM2MTYwLCAzMzMwNiwgMzYxNjEsIHJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggcmVuZGVyVGFyZ2V0LnRleHR1cmUuZm9ybWF0ICk7XG5cdFx0XHR2YXIgZ2xUeXBlID0gdXRpbHMuY29udmVydCggcmVuZGVyVGFyZ2V0LnRleHR1cmUudHlwZSApO1xuXHRcdFx0dmFyIGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApO1xuXG5cdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGUgKSB7XG5cblx0XHRcdFx0dmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIDM2MTYxLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIFNldHVwIHJlc291cmNlcyBmb3IgYSBEZXB0aCBUZXh0dXJlIGZvciBhIEZCTyAobmVlZHMgYW4gZXh0ZW5zaW9uKVxuXHRmdW5jdGlvbiBzZXR1cERlcHRoVGV4dHVyZSggZnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciBpc0N1YmUgPSAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKTtcblx0XHRpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ0RlcHRoIFRleHR1cmUgd2l0aCBjdWJlIHJlbmRlciB0YXJnZXRzIGlzIG5vdCBzdXBwb3J0ZWQnICk7XG5cblx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdGlmICggISAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgJiYgcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRGVwdGhUZXh0dXJlJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBsb2FkIGFuIGVtcHR5IGRlcHRoIHRleHR1cmUgd2l0aCBmcmFtZWJ1ZmZlciBzaXplXG5cdFx0aWYgKCAhIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmUgfHxcblx0XHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCAhPT0gcmVuZGVyVGFyZ2V0LndpZHRoIHx8XG5cdFx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ICE9PSByZW5kZXJUYXJnZXQuaGVpZ2h0ICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRzZXRUZXh0dXJlMkQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdHZhciB3ZWJnbERlcHRoVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmU7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHtcblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgMzYwOTYsIDM1NTMsIHdlYmdsRGVwdGhUZXh0dXJlLCAwICk7XG5cblx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkge1xuXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIDM2MTYwLCAzMzMwNiwgMzU1Mywgd2ViZ2xEZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Vua25vd24gZGVwdGhUZXh0dXJlIGZvcm1hdCcgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gU2V0dXAgR0wgcmVzb3VyY2VzIGZvciBhIG5vbi10ZXh0dXJlIGRlcHRoIGJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHZhciBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSA9PT0gdHJ1ZSApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ3RhcmdldC5kZXB0aFRleHR1cmUgbm90IHN1cHBvcnRlZCBpbiBDdWJlIHJlbmRlciB0YXJnZXRzJyApO1xuXG5cdFx0XHRzZXR1cERlcHRoVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gKTtcblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRcdHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIFNldCB1cCBHTCByZXNvdXJjZXMgZm9yIHRoZSByZW5kZXIgdGFyZ2V0XG5cdGZ1bmN0aW9uIHNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHR2YXIgaXNDdWJlID0gKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPT09IHRydWUgKTtcblx0XHR2YXIgaXNNdWx0aXNhbXBsZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCA9PT0gdHJ1ZSApO1xuXHRcdHZhciBzdXBwb3J0c01pcHMgPSBpc1Bvd2VyT2ZUd28oIHJlbmRlclRhcmdldCApIHx8IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblxuXHRcdC8vIFNldHVwIGZyYW1lYnVmZmVyXG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdGlmICggaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cblx0XHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggMzYxNjEsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyICk7XG5cdFx0XHRcdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggcmVuZGVyVGFyZ2V0LnRleHR1cmUuZm9ybWF0ICk7XG5cdFx0XHRcdFx0dmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGUgKTtcblx0XHRcdFx0XHR2YXIgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCBnbEZvcm1hdCwgZ2xUeXBlICk7XG5cdFx0XHRcdFx0dmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIDM2MTYwLCAzNjA2NCwgMzYxNjEsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyICk7XG5cdFx0XHRcdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCBudWxsICk7XG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyLCByZW5kZXJUYXJnZXQsIHRydWUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBudWxsICk7XG5cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCBjYW4gb25seSBiZSB1c2VkIHdpdGggV2ViR0wyLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGNvbG9yIGJ1ZmZlclxuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCAzNDA2NywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIDM2MDY0LCAzNDA2OSArIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCAzNDA2NywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgbnVsbCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIDM1NTMsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggMzU1MywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIDM2MDY0LCAzNTUzICk7XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCByZW5kZXJUYXJnZXQudGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7XG5cblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM1NTMsIHJlbmRlclRhcmdldC50ZXh0dXJlLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU2V0dXAgZGVwdGggYW5kIHN0ZW5jaWwgYnVmZmVyc1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cdFx0dmFyIHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byggcmVuZGVyVGFyZ2V0ICkgfHwgY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkge1xuXG5cdFx0XHR2YXIgdGFyZ2V0ID0gcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID8gMzQwNjcgOiAzNTUzO1xuXHRcdFx0dmFyIHdlYmdsVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX193ZWJnbFRleHR1cmU7XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0YXJnZXQsIHdlYmdsVGV4dHVyZSApO1xuXHRcdFx0Z2VuZXJhdGVNaXBtYXAoIHRhcmdldCwgdGV4dHVyZSwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGFyZ2V0LCBudWxsICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MDA4LCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjAwOSwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHR2YXIgd2lkdGggPSByZW5kZXJUYXJnZXQud2lkdGg7XG5cdFx0XHRcdHZhciBoZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xuXHRcdFx0XHR2YXIgbWFzayA9IDE2Mzg0O1xuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkgbWFzayB8PSAyNTY7XG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSBtYXNrIHw9IDEwMjQ7XG5cblx0XHRcdFx0X2dsLmJsaXRGcmFtZWJ1ZmZlciggMCwgMCwgd2lkdGgsIGhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgbWFzaywgOTcyOCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFdlYkdMMi4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICYmIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgKSA/XG5cdFx0XHRNYXRoLm1pbiggY2FwYWJpbGl0aWVzLm1heFNhbXBsZXMsIHJlbmRlclRhcmdldC5zYW1wbGVzICkgOiAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHR2YXIgaWQgPSB0ZXh0dXJlLmlkO1xuXHRcdHZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0Ly8gQ2hlY2sgdGhlIGxhc3QgZnJhbWUgd2UgdXBkYXRlZCB0aGUgVmlkZW9UZXh0dXJlXG5cblx0XHRpZiAoIF92aWRlb1RleHR1cmVzWyBpZCBdICE9PSBmcmFtZSApIHtcblxuXHRcdFx0X3ZpZGVvVGV4dHVyZXNbIGlkIF0gPSBmcmFtZTtcblx0XHRcdHRleHR1cmUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cblx0dmFyIHdhcm5lZFRleHR1cmUyRCA9IGZhbHNlO1xuXHR2YXIgd2FybmVkVGV4dHVyZUN1YmUgPSBmYWxzZTtcblxuXHRmdW5jdGlvbiBzYWZlU2V0VGV4dHVyZTJEKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB3YXJuZWRUZXh0dXJlMkQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5XZWJHTFRleHR1cmVzLnNhZmVTZXRUZXh0dXJlMkQ6IGRvbid0IHVzZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIgKTtcblx0XHRcdFx0d2FybmVkVGV4dHVyZTJEID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlID0gdGV4dHVyZS50ZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0c2V0VGV4dHVyZTJEKCB0ZXh0dXJlLCBzbG90ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNhZmVTZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGlmICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICkge1xuXG5cdFx0XHRpZiAoIHdhcm5lZFRleHR1cmVDdWJlID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuV2ViR0xUZXh0dXJlcy5zYWZlU2V0VGV4dHVyZUN1YmU6IGRvbid0IHVzZSBjdWJlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC5cIiApO1xuXHRcdFx0XHR3YXJuZWRUZXh0dXJlQ3ViZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZSA9IHRleHR1cmUudGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdC8vIGN1cnJlbnRseSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgaXMgYSBUZXh0dXJlIGFuZCBOT1QgYSBDdWJlVGV4dHVyZVxuXHRcdC8vIFRPRE86IHVuaWZ5IHRoZXNlIGNvZGUgcGF0aHNcblx0XHRpZiAoICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzQ3ViZVRleHR1cmUgKSB8fFxuXHRcdFx0KCBBcnJheS5pc0FycmF5KCB0ZXh0dXJlLmltYWdlICkgJiYgdGV4dHVyZS5pbWFnZS5sZW5ndGggPT09IDYgKSApIHtcblxuXHRcdFx0Ly8gQ29tcHJlc3NlZFRleHR1cmUgY2FuIGhhdmUgQXJyYXkgaW4gaW1hZ2UgOi9cblxuXHRcdFx0Ly8gdGhpcyBmdW5jdGlvbiBhbG9uZSBzaG91bGQgdGFrZSBjYXJlIG9mIGN1YmUgdGV4dHVyZXNcblx0XHRcdHNldFRleHR1cmVDdWJlKCB0ZXh0dXJlLCBzbG90ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBhc3N1bWVkOiB0ZXh0dXJlIHByb3BlcnR5IG9mIFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0Q3ViZVxuXHRcdFx0c2V0VGV4dHVyZUN1YmVEeW5hbWljKCB0ZXh0dXJlLCBzbG90ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5hbGxvY2F0ZVRleHR1cmVVbml0ID0gYWxsb2NhdGVUZXh0dXJlVW5pdDtcblx0dGhpcy5yZXNldFRleHR1cmVVbml0cyA9IHJlc2V0VGV4dHVyZVVuaXRzO1xuXG5cdHRoaXMuc2V0VGV4dHVyZTJEID0gc2V0VGV4dHVyZTJEO1xuXHR0aGlzLnNldFRleHR1cmUyREFycmF5ID0gc2V0VGV4dHVyZTJEQXJyYXk7XG5cdHRoaXMuc2V0VGV4dHVyZTNEID0gc2V0VGV4dHVyZTNEO1xuXHR0aGlzLnNldFRleHR1cmVDdWJlID0gc2V0VGV4dHVyZUN1YmU7XG5cdHRoaXMuc2V0VGV4dHVyZUN1YmVEeW5hbWljID0gc2V0VGV4dHVyZUN1YmVEeW5hbWljO1xuXHR0aGlzLnNldHVwUmVuZGVyVGFyZ2V0ID0gc2V0dXBSZW5kZXJUYXJnZXQ7XG5cdHRoaXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwID0gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwO1xuXHR0aGlzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0ID0gdXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQ7XG5cblx0dGhpcy5zYWZlU2V0VGV4dHVyZTJEID0gc2FmZVNldFRleHR1cmUyRDtcblx0dGhpcy5zYWZlU2V0VGV4dHVyZUN1YmUgPSBzYWZlU2V0VGV4dHVyZUN1YmU7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIHRoZXNwaXRlIC8gaHR0cDovL3d3dy50d2l0dGVyLmNvbS90aGVzcGl0ZVxuICovXG5cbmZ1bmN0aW9uIFdlYkdMVXRpbHMoIGdsLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0ZnVuY3Rpb24gY29udmVydCggcCApIHtcblxuXHRcdHZhciBleHRlbnNpb247XG5cblx0XHRpZiAoIHAgPT09IFJlcGVhdFdyYXBwaW5nICkgcmV0dXJuIDEwNDk3O1xuXHRcdGlmICggcCA9PT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyApIHJldHVybiAzMzA3MTtcblx0XHRpZiAoIHAgPT09IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcgKSByZXR1cm4gMzM2NDg7XG5cblx0XHRpZiAoIHAgPT09IE5lYXJlc3RGaWx0ZXIgKSByZXR1cm4gOTcyODtcblx0XHRpZiAoIHAgPT09IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyICkgcmV0dXJuIDk5ODQ7XG5cdFx0aWYgKCBwID09PSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyICkgcmV0dXJuIDk5ODY7XG5cblx0XHRpZiAoIHAgPT09IExpbmVhckZpbHRlciApIHJldHVybiA5NzI5O1xuXHRcdGlmICggcCA9PT0gTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciApIHJldHVybiA5OTg1O1xuXHRcdGlmICggcCA9PT0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyICkgcmV0dXJuIDk5ODc7XG5cblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkQnl0ZVR5cGUgKSByZXR1cm4gNTEyMTtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSApIHJldHVybiAzMjgxOTtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSApIHJldHVybiAzMjgyMDtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ1NjVUeXBlICkgcmV0dXJuIDMzNjM1O1xuXG5cdFx0aWYgKCBwID09PSBCeXRlVHlwZSApIHJldHVybiA1MTIwO1xuXHRcdGlmICggcCA9PT0gU2hvcnRUeXBlICkgcmV0dXJuIDUxMjI7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHJldHVybiA1MTIzO1xuXHRcdGlmICggcCA9PT0gSW50VHlwZSApIHJldHVybiA1MTI0O1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnRUeXBlICkgcmV0dXJuIDUxMjU7XG5cdFx0aWYgKCBwID09PSBGbG9hdFR5cGUgKSByZXR1cm4gNTEyNjtcblxuXHRcdGlmICggcCA9PT0gSGFsZkZsb2F0VHlwZSApIHtcblxuXHRcdFx0aWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSByZXR1cm4gNTEzMTtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHJldHVybiBleHRlbnNpb24uSEFMRl9GTE9BVF9PRVM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IEFscGhhRm9ybWF0ICkgcmV0dXJuIDY0MDY7XG5cdFx0aWYgKCBwID09PSBSR0JGb3JtYXQgKSByZXR1cm4gNjQwNztcblx0XHRpZiAoIHAgPT09IFJHQkFGb3JtYXQgKSByZXR1cm4gNjQwODtcblx0XHRpZiAoIHAgPT09IEx1bWluYW5jZUZvcm1hdCApIHJldHVybiA2NDA5O1xuXHRcdGlmICggcCA9PT0gTHVtaW5hbmNlQWxwaGFGb3JtYXQgKSByZXR1cm4gNjQxMDtcblx0XHRpZiAoIHAgPT09IERlcHRoRm9ybWF0ICkgcmV0dXJuIDY0MDI7XG5cdFx0aWYgKCBwID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSByZXR1cm4gMzQwNDE7XG5cdFx0aWYgKCBwID09PSBSZWRGb3JtYXQgKSByZXR1cm4gNjQwMztcblxuXHRcdGlmICggcCA9PT0gQWRkRXF1YXRpb24gKSByZXR1cm4gMzI3NzQ7XG5cdFx0aWYgKCBwID09PSBTdWJ0cmFjdEVxdWF0aW9uICkgcmV0dXJuIDMyNzc4O1xuXHRcdGlmICggcCA9PT0gUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gKSByZXR1cm4gMzI3Nzk7XG5cblx0XHRpZiAoIHAgPT09IFplcm9GYWN0b3IgKSByZXR1cm4gMDtcblx0XHRpZiAoIHAgPT09IE9uZUZhY3RvciApIHJldHVybiAxO1xuXHRcdGlmICggcCA9PT0gU3JjQ29sb3JGYWN0b3IgKSByZXR1cm4gNzY4O1xuXHRcdGlmICggcCA9PT0gT25lTWludXNTcmNDb2xvckZhY3RvciApIHJldHVybiA3Njk7XG5cdFx0aWYgKCBwID09PSBTcmNBbHBoYUZhY3RvciApIHJldHVybiA3NzA7XG5cdFx0aWYgKCBwID09PSBPbmVNaW51c1NyY0FscGhhRmFjdG9yICkgcmV0dXJuIDc3MTtcblx0XHRpZiAoIHAgPT09IERzdEFscGhhRmFjdG9yICkgcmV0dXJuIDc3Mjtcblx0XHRpZiAoIHAgPT09IE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgKSByZXR1cm4gNzczO1xuXG5cdFx0aWYgKCBwID09PSBEc3RDb2xvckZhY3RvciApIHJldHVybiA3NzQ7XG5cdFx0aWYgKCBwID09PSBPbmVNaW51c0RzdENvbG9yRmFjdG9yICkgcmV0dXJuIDc3NTtcblx0XHRpZiAoIHAgPT09IFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgKSByZXR1cm4gNzc2O1xuXG5cdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JfRVRDMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNHg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ184eDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ184eDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzEweDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IE1pbkVxdWF0aW9uIHx8IHAgPT09IE1heEVxdWF0aW9uICkge1xuXG5cdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IE1pbkVxdWF0aW9uICkgcmV0dXJuIDMyNzc1O1xuXHRcdFx0XHRpZiAoIHAgPT09IE1heEVxdWF0aW9uICkgcmV0dXJuIDMyNzc2O1xuXG5cdFx0XHR9XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBNaW5FcXVhdGlvbiApIHJldHVybiBleHRlbnNpb24uTUlOX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBNYXhFcXVhdGlvbiApIHJldHVybiBleHRlbnNpb24uTUFYX0VYVDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkgcmV0dXJuIDM0MDQyO1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgcmV0dXJuIGV4dGVuc2lvbi5VTlNJR05FRF9JTlRfMjRfOF9XRUJHTDtcblxuXHRcdH1cblxuXHRcdHJldHVybiAwO1xuXG5cdH1cblxuXHRyZXR1cm4geyBjb252ZXJ0OiBjb252ZXJ0IH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEdyb3VwKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnR3JvdXAnO1xuXG59XG5cbkdyb3VwLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEdyb3VwLFxuXG5cdGlzR3JvdXA6IHRydWVcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQXJyYXlDYW1lcmEoIGFycmF5ICkge1xuXG5cdFBlcnNwZWN0aXZlQ2FtZXJhLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmNhbWVyYXMgPSBhcnJheSB8fCBbXTtcblxufVxuXG5BcnJheUNhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBQZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBBcnJheUNhbWVyYSxcblxuXHRpc0FycmF5Q2FtZXJhOiB0cnVlXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGpzYW50ZWxsIC8gaHR0cHM6Ly93d3cuanNhbnRlbGwuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgY2FtZXJhTFBvcyA9IG5ldyBWZWN0b3IzKCk7XG52YXIgY2FtZXJhUlBvcyA9IG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogQXNzdW1lcyAyIGNhbWVyYXMgdGhhdCBhcmUgcGFyYWxsZWwgYW5kIHNoYXJlIGFuIFgtYXhpcywgYW5kIHRoYXRcbiAqIHRoZSBjYW1lcmFzJyBwcm9qZWN0aW9uIGFuZCB3b3JsZCBtYXRyaWNlcyBoYXZlIGFscmVhZHkgYmVlbiBzZXQuXG4gKiBBbmQgdGhhdCBuZWFyIGFuZCBmYXIgcGxhbmVzIGFyZSBpZGVudGljYWwgZm9yIGJvdGggY2FtZXJhcy5cbiAqIFZpc3VhbGl6YXRpb24gb2YgdGhpcyB0ZWNobmlxdWU6IGh0dHBzOi8vY29tcHV0ZXJncmFwaGljcy5zdGFja2V4Y2hhbmdlLmNvbS9hLzQ3NjVcbiAqL1xuZnVuY3Rpb24gc2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhLCBjYW1lcmFMLCBjYW1lcmFSICkge1xuXG5cdGNhbWVyYUxQb3Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmFMLm1hdHJpeFdvcmxkICk7XG5cdGNhbWVyYVJQb3Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmFSLm1hdHJpeFdvcmxkICk7XG5cblx0dmFyIGlwZCA9IGNhbWVyYUxQb3MuZGlzdGFuY2VUbyggY2FtZXJhUlBvcyApO1xuXG5cdHZhciBwcm9qTCA9IGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblx0dmFyIHByb2pSID0gY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xuXG5cdC8vIFZSIHN5c3RlbXMgd2lsbCBoYXZlIGlkZW50aWNhbCBmYXIgYW5kIG5lYXIgcGxhbmVzLCBhbmRcblx0Ly8gbW9zdCBsaWtlbHkgaWRlbnRpY2FsIHRvcCBhbmQgYm90dG9tIGZydXN0dW0gZXh0ZW50cy5cblx0Ly8gVXNlIHRoZSBsZWZ0IGNhbWVyYSBmb3IgdGhlc2UgdmFsdWVzLlxuXHR2YXIgbmVhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSAtIDEgKTtcblx0dmFyIGZhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSArIDEgKTtcblx0dmFyIHRvcEZvdiA9ICggcHJvakxbIDkgXSArIDEgKSAvIHByb2pMWyA1IF07XG5cdHZhciBib3R0b21Gb3YgPSAoIHByb2pMWyA5IF0gLSAxICkgLyBwcm9qTFsgNSBdO1xuXG5cdHZhciBsZWZ0Rm92ID0gKCBwcm9qTFsgOCBdIC0gMSApIC8gcHJvakxbIDAgXTtcblx0dmFyIHJpZ2h0Rm92ID0gKCBwcm9qUlsgOCBdICsgMSApIC8gcHJvalJbIDAgXTtcblx0dmFyIGxlZnQgPSBuZWFyICogbGVmdEZvdjtcblx0dmFyIHJpZ2h0ID0gbmVhciAqIHJpZ2h0Rm92O1xuXG5cdC8vIENhbGN1bGF0ZSB0aGUgbmV3IGNhbWVyYSdzIHBvc2l0aW9uIG9mZnNldCBmcm9tIHRoZVxuXHQvLyBsZWZ0IGNhbWVyYS4geE9mZnNldCBzaG91bGQgYmUgcm91Z2hseSBoYWxmIGBpcGRgLlxuXHR2YXIgek9mZnNldCA9IGlwZCAvICggLSBsZWZ0Rm92ICsgcmlnaHRGb3YgKTtcblx0dmFyIHhPZmZzZXQgPSB6T2Zmc2V0ICogLSBsZWZ0Rm92O1xuXG5cdC8vIFRPRE86IEJldHRlciB3YXkgdG8gYXBwbHkgdGhpcyBvZmZzZXQ/XG5cdGNhbWVyYUwubWF0cml4V29ybGQuZGVjb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0Y2FtZXJhLnRyYW5zbGF0ZVgoIHhPZmZzZXQgKTtcblx0Y2FtZXJhLnRyYW5zbGF0ZVooIHpPZmZzZXQgKTtcblx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdC8vIEZpbmQgdGhlIHVuaW9uIG9mIHRoZSBmcnVzdHVtIHZhbHVlcyBvZiB0aGUgY2FtZXJhcyBhbmQgc2NhbGVcblx0Ly8gdGhlIHZhbHVlcyBzbyB0aGF0IHRoZSBuZWFyIHBsYW5lJ3MgcG9zaXRpb24gZG9lcyBub3QgY2hhbmdlIGluIHdvcmxkIHNwYWNlLFxuXHQvLyBhbHRob3VnaCBtdXN0IG5vdyBiZSByZWxhdGl2ZSB0byB0aGUgbmV3IHVuaW9uIGNhbWVyYS5cblx0dmFyIG5lYXIyID0gbmVhciArIHpPZmZzZXQ7XG5cdHZhciBmYXIyID0gZmFyICsgek9mZnNldDtcblx0dmFyIGxlZnQyID0gbGVmdCAtIHhPZmZzZXQ7XG5cdHZhciByaWdodDIgPSByaWdodCArICggaXBkIC0geE9mZnNldCApO1xuXHR2YXIgdG9wMiA9IHRvcEZvdiAqIGZhciAvIGZhcjIgKiBuZWFyMjtcblx0dmFyIGJvdHRvbTIgPSBib3R0b21Gb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cblx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0MiwgcmlnaHQyLCB0b3AyLCBib3R0b20yLCBuZWFyMiwgZmFyMiApO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJWUk1hbmFnZXIoIHJlbmRlcmVyICkge1xuXG5cdHZhciByZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0O1xuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHZhciBkZXZpY2UgPSBudWxsO1xuXHR2YXIgZnJhbWVEYXRhID0gbnVsbDtcblxuXHR2YXIgcG9zZVRhcmdldCA9IG51bGw7XG5cblx0dmFyIGNvbnRyb2xsZXJzID0gW107XG5cdHZhciBzdGFuZGluZ01hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdHZhciBzdGFuZGluZ01hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdHZhciBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gMS4wO1xuXG5cdHZhciByZWZlcmVuY2VTcGFjZVR5cGUgPSAnbG9jYWwtZmxvb3InO1xuXG5cdGlmICggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ1ZSRnJhbWVEYXRhJyBpbiB3aW5kb3cgKSB7XG5cblx0XHRmcmFtZURhdGEgPSBuZXcgd2luZG93LlZSRnJhbWVEYXRhKCk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJywgb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlLCBmYWxzZSApO1xuXG5cdH1cblxuXHR2YXIgbWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblx0dmFyIHRlbXBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblx0dmFyIHRlbXBQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0Y2FtZXJhTC52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cdGNhbWVyYUwubGF5ZXJzLmVuYWJsZSggMSApO1xuXG5cdHZhciBjYW1lcmFSID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdGNhbWVyYVIudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXHRjYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTtcblxuXHR2YXIgY2FtZXJhVlIgPSBuZXcgQXJyYXlDYW1lcmEoIFsgY2FtZXJhTCwgY2FtZXJhUiBdICk7XG5cdGNhbWVyYVZSLmxheWVycy5lbmFibGUoIDEgKTtcblx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMiApO1xuXG5cdC8vXG5cblx0ZnVuY3Rpb24gaXNQcmVzZW50aW5nKCkge1xuXG5cdFx0cmV0dXJuIGRldmljZSAhPT0gbnVsbCAmJiBkZXZpY2UuaXNQcmVzZW50aW5nID09PSB0cnVlO1xuXG5cdH1cblxuXHR2YXIgY3VycmVudFNpemUgPSBuZXcgVmVjdG9yMigpLCBjdXJyZW50UGl4ZWxSYXRpbztcblxuXHRmdW5jdGlvbiBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UoKSB7XG5cblx0XHRpZiAoIGlzUHJlc2VudGluZygpICkge1xuXG5cdFx0XHR2YXIgZXllUGFyYW1ldGVycyA9IGRldmljZS5nZXRFeWVQYXJhbWV0ZXJzKCAnbGVmdCcgKTtcblx0XHRcdHJlbmRlcldpZHRoID0gMiAqIGV5ZVBhcmFtZXRlcnMucmVuZGVyV2lkdGggKiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yO1xuXHRcdFx0cmVuZGVySGVpZ2h0ID0gZXllUGFyYW1ldGVycy5yZW5kZXJIZWlnaHQgKiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yO1xuXG5cdFx0XHRjdXJyZW50UGl4ZWxSYXRpbyA9IHJlbmRlcmVyLmdldFBpeGVsUmF0aW8oKTtcblx0XHRcdHJlbmRlcmVyLmdldFNpemUoIGN1cnJlbnRTaXplICk7XG5cblx0XHRcdHJlbmRlcmVyLnNldERyYXdpbmdCdWZmZXJTaXplKCByZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0LCAxICk7XG5cblx0XHRcdGNhbWVyYUwudmlld3BvcnQuc2V0KCAwLCAwLCByZW5kZXJXaWR0aCAvIDIsIHJlbmRlckhlaWdodCApO1xuXHRcdFx0Y2FtZXJhUi52aWV3cG9ydC5zZXQoIHJlbmRlcldpZHRoIC8gMiwgMCwgcmVuZGVyV2lkdGggLyAyLCByZW5kZXJIZWlnaHQgKTtcblxuXHRcdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3Nlc3Npb25zdGFydCcgfSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldERyYXdpbmdCdWZmZXJTaXplKCBjdXJyZW50U2l6ZS53aWR0aCwgY3VycmVudFNpemUuaGVpZ2h0LCBjdXJyZW50UGl4ZWxSYXRpbyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3Nlc3Npb25lbmQnIH0gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgdHJpZ2dlcnMgPSBbXTtcblxuXHRmdW5jdGlvbiBmaW5kR2FtZXBhZCggaWQgKSB7XG5cblx0XHR2YXIgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMgJiYgbmF2aWdhdG9yLmdldEdhbWVwYWRzKCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGogPSAwLCBsID0gZ2FtZXBhZHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGdhbWVwYWQgPSBnYW1lcGFkc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGdhbWVwYWQgJiYgKCBnYW1lcGFkLmlkID09PSAnRGF5ZHJlYW0gQ29udHJvbGxlcicgfHxcblx0XHRcdFx0Z2FtZXBhZC5pZCA9PT0gJ0dlYXIgVlIgQ29udHJvbGxlcicgfHwgZ2FtZXBhZC5pZCA9PT0gJ09jdWx1cyBHbyBDb250cm9sbGVyJyB8fFxuXHRcdFx0XHRnYW1lcGFkLmlkID09PSAnT3BlblZSIEdhbWVwYWQnIHx8IGdhbWVwYWQuaWQuc3RhcnRzV2l0aCggJ09jdWx1cyBUb3VjaCcgKSB8fFxuXHRcdFx0XHRnYW1lcGFkLmlkLnN0YXJ0c1dpdGgoICdIVEMgVml2ZSBGb2N1cycgKSB8fFxuXHRcdFx0XHRnYW1lcGFkLmlkLnN0YXJ0c1dpdGgoICdTcGF0aWFsIENvbnRyb2xsZXInICkgKSApIHtcblxuXHRcdFx0XHRpZiAoIGogPT09IGlkICkgcmV0dXJuIGdhbWVwYWQ7XG5cblx0XHRcdFx0aiArKztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVDb250cm9sbGVycygpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaSBdO1xuXG5cdFx0XHR2YXIgZ2FtZXBhZCA9IGZpbmRHYW1lcGFkKCBpICk7XG5cblx0XHRcdGlmICggZ2FtZXBhZCAhPT0gdW5kZWZpbmVkICYmIGdhbWVwYWQucG9zZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggZ2FtZXBhZC5wb3NlID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRcdC8vIFBvc2VcblxuXHRcdFx0XHR2YXIgcG9zZSA9IGdhbWVwYWQucG9zZTtcblxuXHRcdFx0XHRpZiAoIHBvc2UuaGFzUG9zaXRpb24gPT09IGZhbHNlICkgY29udHJvbGxlci5wb3NpdGlvbi5zZXQoIDAuMiwgLSAwLjYsIC0gMC4wNSApO1xuXG5cdFx0XHRcdGlmICggcG9zZS5wb3NpdGlvbiAhPT0gbnVsbCApIGNvbnRyb2xsZXIucG9zaXRpb24uZnJvbUFycmF5KCBwb3NlLnBvc2l0aW9uICk7XG5cdFx0XHRcdGlmICggcG9zZS5vcmllbnRhdGlvbiAhPT0gbnVsbCApIGNvbnRyb2xsZXIucXVhdGVybmlvbi5mcm9tQXJyYXkoIHBvc2Uub3JpZW50YXRpb24gKTtcblx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXguY29tcG9zZSggY29udHJvbGxlci5wb3NpdGlvbiwgY29udHJvbGxlci5xdWF0ZXJuaW9uLCBjb250cm9sbGVyLnNjYWxlICk7XG5cdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LnByZW11bHRpcGx5KCBzdGFuZGluZ01hdHJpeCApO1xuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5kZWNvbXBvc2UoIGNvbnRyb2xsZXIucG9zaXRpb24sIGNvbnRyb2xsZXIucXVhdGVybmlvbiwgY29udHJvbGxlci5zY2FsZSApO1xuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJcblxuXHRcdFx0XHR2YXIgYnV0dG9uSWQgPSBnYW1lcGFkLmlkID09PSAnRGF5ZHJlYW0gQ29udHJvbGxlcicgPyAwIDogMTtcblxuXHRcdFx0XHRpZiAoIHRyaWdnZXJzWyBpIF0gPT09IHVuZGVmaW5lZCApIHRyaWdnZXJzWyBpIF0gPSBmYWxzZTtcblxuXHRcdFx0XHRpZiAoIHRyaWdnZXJzWyBpIF0gIT09IGdhbWVwYWQuYnV0dG9uc1sgYnV0dG9uSWQgXS5wcmVzc2VkICkge1xuXG5cdFx0XHRcdFx0dHJpZ2dlcnNbIGkgXSA9IGdhbWVwYWQuYnV0dG9uc1sgYnV0dG9uSWQgXS5wcmVzc2VkO1xuXG5cdFx0XHRcdFx0aWYgKCB0cmlnZ2Vyc1sgaSBdID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3NlbGVjdHN0YXJ0JyB9ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3NlbGVjdGVuZCcgfSApO1xuXHRcdFx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZWxlY3QnIH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29udHJvbGxlci52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlVmlld3BvcnRGcm9tQm91bmRzKCB2aWV3cG9ydCwgYm91bmRzICkge1xuXG5cdFx0aWYgKCBib3VuZHMgIT09IG51bGwgJiYgYm91bmRzLmxlbmd0aCA9PT0gNCApIHtcblxuXHRcdFx0dmlld3BvcnQuc2V0KCBib3VuZHNbIDAgXSAqIHJlbmRlcldpZHRoLCBib3VuZHNbIDEgXSAqIHJlbmRlckhlaWdodCwgYm91bmRzWyAyIF0gKiByZW5kZXJXaWR0aCwgYm91bmRzWyAzIF0gKiByZW5kZXJIZWlnaHQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHR0aGlzLmdldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoIGlkICkge1xuXG5cdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaWQgXTtcblxuXHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb250cm9sbGVyID0gbmV3IEdyb3VwKCk7XG5cdFx0XHRjb250cm9sbGVyLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHRjb250cm9sbGVyc1sgaWQgXSA9IGNvbnRyb2xsZXI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udHJvbGxlcjtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0RGV2aWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIGRldmljZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RGV2aWNlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIGRldmljZSA9IHZhbHVlO1xuXG5cdFx0YW5pbWF0aW9uLnNldENvbnRleHQoIHZhbHVlICk7XG5cblx0fTtcblxuXHR0aGlzLnNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlO1xuXG5cdH07XG5cblx0dGhpcy5zZXRSZWZlcmVuY2VTcGFjZVR5cGUgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0cmVmZXJlbmNlU3BhY2VUeXBlID0gdmFsdWU7XG5cblx0fTtcblxuXHR0aGlzLnNldFBvc2VUYXJnZXQgPSBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSBwb3NlVGFyZ2V0ID0gb2JqZWN0O1xuXG5cdH07XG5cblx0dGhpcy5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdHZhciB1c2VySGVpZ2h0ID0gcmVmZXJlbmNlU3BhY2VUeXBlID09PSAnbG9jYWwtZmxvb3InID8gMS42IDogMDtcblxuXHRcdGlmICggaXNQcmVzZW50aW5nKCkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjYW1lcmEucG9zaXRpb24uc2V0KCAwLCB1c2VySGVpZ2h0LCAwICk7XG5cdFx0XHRjYW1lcmEucm90YXRpb24uc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdHJldHVybiBjYW1lcmE7XG5cblx0XHR9XG5cblx0XHRkZXZpY2UuZGVwdGhOZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0ZGV2aWNlLmRlcHRoRmFyID0gY2FtZXJhLmZhcjtcblxuXHRcdGRldmljZS5nZXRGcmFtZURhdGEoIGZyYW1lRGF0YSApO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggcmVmZXJlbmNlU3BhY2VUeXBlID09PSAnbG9jYWwtZmxvb3InICkge1xuXG5cdFx0XHR2YXIgc3RhZ2VQYXJhbWV0ZXJzID0gZGV2aWNlLnN0YWdlUGFyYW1ldGVycztcblxuXHRcdFx0aWYgKCBzdGFnZVBhcmFtZXRlcnMgKSB7XG5cblx0XHRcdFx0c3RhbmRpbmdNYXRyaXguZnJvbUFycmF5KCBzdGFnZVBhcmFtZXRlcnMuc2l0dGluZ1RvU3RhbmRpbmdUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGFuZGluZ01hdHJpeC5tYWtlVHJhbnNsYXRpb24oIDAsIHVzZXJIZWlnaHQsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cblx0XHR2YXIgcG9zZSA9IGZyYW1lRGF0YS5wb3NlO1xuXHRcdHZhciBwb3NlT2JqZWN0ID0gcG9zZVRhcmdldCAhPT0gbnVsbCA/IHBvc2VUYXJnZXQgOiBjYW1lcmE7XG5cblx0XHQvLyBXZSB3YW50IHRvIG1hbmlwdWxhdGUgcG9zZU9iamVjdCBieSBpdHMgcG9zaXRpb24gYW5kIHF1YXRlcm5pb24gY29tcG9uZW50cyBzaW5jZSB1c2VycyBtYXkgcmVseSBvbiB0aGVtLlxuXHRcdHBvc2VPYmplY3QubWF0cml4LmNvcHkoIHN0YW5kaW5nTWF0cml4ICk7XG5cdFx0cG9zZU9iamVjdC5tYXRyaXguZGVjb21wb3NlKCBwb3NlT2JqZWN0LnBvc2l0aW9uLCBwb3NlT2JqZWN0LnF1YXRlcm5pb24sIHBvc2VPYmplY3Quc2NhbGUgKTtcblxuXHRcdGlmICggcG9zZS5vcmllbnRhdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGVtcFF1YXRlcm5pb24uZnJvbUFycmF5KCBwb3NlLm9yaWVudGF0aW9uICk7XG5cdFx0XHRwb3NlT2JqZWN0LnF1YXRlcm5pb24ubXVsdGlwbHkoIHRlbXBRdWF0ZXJuaW9uICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHBvc2UucG9zaXRpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHRlbXBRdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggc3RhbmRpbmdNYXRyaXggKTtcblx0XHRcdHRlbXBQb3NpdGlvbi5mcm9tQXJyYXkoIHBvc2UucG9zaXRpb24gKTtcblx0XHRcdHRlbXBQb3NpdGlvbi5hcHBseVF1YXRlcm5pb24oIHRlbXBRdWF0ZXJuaW9uICk7XG5cdFx0XHRwb3NlT2JqZWN0LnBvc2l0aW9uLmFkZCggdGVtcFBvc2l0aW9uICk7XG5cblx0XHR9XG5cblx0XHRwb3NlT2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHQvL1xuXG5cdFx0Y2FtZXJhTC5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0Y2FtZXJhUi5uZWFyID0gY2FtZXJhLm5lYXI7XG5cblx0XHRjYW1lcmFMLmZhciA9IGNhbWVyYS5mYXI7XG5cdFx0Y2FtZXJhUi5mYXIgPSBjYW1lcmEuZmFyO1xuXG5cdFx0Y2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UuZnJvbUFycmF5KCBmcmFtZURhdGEubGVmdFZpZXdNYXRyaXggKTtcblx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZS5mcm9tQXJyYXkoIGZyYW1lRGF0YS5yaWdodFZpZXdNYXRyaXggKTtcblxuXHRcdC8vIFRPRE8gKG1yZG9vYikgRG91YmxlIGNoZWNrIHRoaXMgY29kZVxuXG5cdFx0c3RhbmRpbmdNYXRyaXhJbnZlcnNlLmdldEludmVyc2UoIHN0YW5kaW5nTWF0cml4ICk7XG5cblx0XHRpZiAoIHJlZmVyZW5jZVNwYWNlVHlwZSA9PT0gJ2xvY2FsLWZsb29yJyApIHtcblxuXHRcdFx0Y2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkoIHN0YW5kaW5nTWF0cml4SW52ZXJzZSApO1xuXHRcdFx0Y2FtZXJhUi5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkoIHN0YW5kaW5nTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHBhcmVudCA9IHBvc2VPYmplY3QucGFyZW50O1xuXG5cdFx0aWYgKCBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdG1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKCBwYXJlbnQubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Y2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkoIG1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdFx0Y2FtZXJhUi5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkoIG1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZW52TWFwIGFuZCBNaXJyb3IgbmVlZHMgY2FtZXJhLm1hdHJpeFdvcmxkXG5cblx0XHRjYW1lcmFMLm1hdHJpeFdvcmxkLmdldEludmVyc2UoIGNhbWVyYUwubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0Y2FtZXJhUi5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKCBjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0Y2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggZnJhbWVEYXRhLmxlZnRQcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0Y2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggZnJhbWVEYXRhLnJpZ2h0UHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0c2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhVlIsIGNhbWVyYUwsIGNhbWVyYVIgKTtcblxuXHRcdC8vXG5cblx0XHR2YXIgbGF5ZXJzID0gZGV2aWNlLmdldExheWVycygpO1xuXG5cdFx0aWYgKCBsYXllcnMubGVuZ3RoICkge1xuXG5cdFx0XHR2YXIgbGF5ZXIgPSBsYXllcnNbIDAgXTtcblxuXHRcdFx0dXBkYXRlVmlld3BvcnRGcm9tQm91bmRzKCBjYW1lcmFMLnZpZXdwb3J0LCBsYXllci5sZWZ0Qm91bmRzICk7XG5cdFx0XHR1cGRhdGVWaWV3cG9ydEZyb21Cb3VuZHMoIGNhbWVyYVIudmlld3BvcnQsIGxheWVyLnJpZ2h0Qm91bmRzICk7XG5cblx0XHR9XG5cblx0XHR1cGRhdGVDb250cm9sbGVycygpO1xuXG5cdFx0cmV0dXJuIGNhbWVyYVZSO1xuXG5cdH07XG5cblx0dGhpcy5nZXRTdGFuZGluZ01hdHJpeCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBzdGFuZGluZ01hdHJpeDtcblxuXHR9O1xuXG5cdHRoaXMuaXNQcmVzZW50aW5nID0gaXNQcmVzZW50aW5nO1xuXG5cdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0dmFyIGFuaW1hdGlvbiA9IG5ldyBXZWJHTEFuaW1hdGlvbigpO1xuXG5cdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTtcblxuXHRcdGlmICggaXNQcmVzZW50aW5nKCkgKSBhbmltYXRpb24uc3RhcnQoKTtcblxuXHR9O1xuXG5cdHRoaXMuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGlzUHJlc2VudGluZygpICkgZGV2aWNlLnN1Ym1pdEZyYW1lKCk7XG5cblx0fTtcblxuXHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UgKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdC8vIERFUFJFQ0FURURcblxuXHR0aGlzLnNldEZyYW1lT2ZSZWZlcmVuY2VUeXBlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViVlJNYW5hZ2VyOiBzZXRGcmFtZU9mUmVmZXJlbmNlVHlwZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJyApO1xuXG5cdH07XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggV2ViVlJNYW5hZ2VyLnByb3RvdHlwZSwgRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViWFJNYW5hZ2VyKCByZW5kZXJlciwgZ2wgKSB7XG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHR2YXIgc2Vzc2lvbiA9IG51bGw7XG5cblx0dmFyIHJlZmVyZW5jZVNwYWNlID0gbnVsbDtcblx0dmFyIHJlZmVyZW5jZVNwYWNlVHlwZSA9ICdsb2NhbC1mbG9vcic7XG5cblx0dmFyIHBvc2UgPSBudWxsO1xuXG5cdHZhciBjb250cm9sbGVycyA9IFtdO1xuXHR2YXIgaW5wdXRTb3VyY2VzID0gW107XG5cblx0ZnVuY3Rpb24gaXNQcmVzZW50aW5nKCkge1xuXG5cdFx0cmV0dXJuIHNlc3Npb24gIT09IG51bGwgJiYgcmVmZXJlbmNlU3BhY2UgIT09IG51bGw7XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIGNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0Y2FtZXJhTC5sYXllcnMuZW5hYmxlKCAxICk7XG5cdGNhbWVyYUwudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdHZhciBjYW1lcmFSID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdGNhbWVyYVIubGF5ZXJzLmVuYWJsZSggMiApO1xuXHRjYW1lcmFSLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHR2YXIgY2FtZXJhVlIgPSBuZXcgQXJyYXlDYW1lcmEoIFsgY2FtZXJhTCwgY2FtZXJhUiBdICk7XG5cdGNhbWVyYVZSLmxheWVycy5lbmFibGUoIDEgKTtcblx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMiApO1xuXG5cdC8vXG5cblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0dGhpcy5nZXRDb250cm9sbGVyID0gZnVuY3Rpb24gKCBpZCApIHtcblxuXHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGlkIF07XG5cblx0XHRpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29udHJvbGxlciA9IG5ldyBHcm91cCgpO1xuXHRcdFx0Y29udHJvbGxlci5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0Y29udHJvbGxlcnNbIGlkIF0gPSBjb250cm9sbGVyO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnRyb2xsZXI7XG5cblx0fTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIG9uU2Vzc2lvbkV2ZW50KCBldmVudCApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBpbnB1dFNvdXJjZXNbIGkgXSA9PT0gZXZlbnQuaW5wdXRTb3VyY2UgKSB7XG5cblx0XHRcdFx0Y29udHJvbGxlcnNbIGkgXS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6IGV2ZW50LnR5cGUgfSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uU2Vzc2lvbkVuZCgpIHtcblxuXHRcdHJlbmRlcmVyLnNldEZyYW1lYnVmZmVyKCBudWxsICk7XG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKSApOyAvLyBIYWNrICMxNTgzMFxuXHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uZW5kJyB9ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUmVxdWVzdFJlZmVyZW5jZVNwYWNlKCB2YWx1ZSApIHtcblxuXHRcdHJlZmVyZW5jZVNwYWNlID0gdmFsdWU7XG5cblx0XHRhbmltYXRpb24uc2V0Q29udGV4dCggc2Vzc2lvbiApO1xuXHRcdGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2Vzc2lvbnN0YXJ0JyB9ICk7XG5cblx0fVxuXG5cdHRoaXMuc2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0fTtcblxuXHR0aGlzLnNldFJlZmVyZW5jZVNwYWNlVHlwZSA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZWZlcmVuY2VTcGFjZVR5cGUgPSB2YWx1ZTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBzZXNzaW9uO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTZXNzaW9uID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHNlc3Npb24gPSB2YWx1ZTtcblxuXHRcdGlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdHN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdGVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdlbmQnLCBvblNlc3Npb25FbmQgKTtcblxuXHRcdFx0c2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSggeyBiYXNlTGF5ZXI6IG5ldyBYUldlYkdMTGF5ZXIoIHNlc3Npb24sIGdsICkgfSApO1xuXG5cdFx0XHRzZXNzaW9uLnJlcXVlc3RSZWZlcmVuY2VTcGFjZSggcmVmZXJlbmNlU3BhY2VUeXBlICkudGhlbiggb25SZXF1ZXN0UmVmZXJlbmNlU3BhY2UgKTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0aW5wdXRTb3VyY2VzID0gc2Vzc2lvbi5pbnB1dFNvdXJjZXM7XG5cblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2lucHV0c291cmNlc2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpbnB1dFNvdXJjZXMgPSBzZXNzaW9uLmlucHV0U291cmNlcztcblx0XHRcdFx0Y29uc29sZS5sb2coIGlucHV0U291cmNlcyApO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGkgXTtcblx0XHRcdFx0XHRjb250cm9sbGVyLnVzZXJEYXRhLmlucHV0U291cmNlID0gaW5wdXRTb3VyY2VzWyBpIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHRmdW5jdGlvbiB1cGRhdGVDYW1lcmEoIGNhbWVyYSwgcGFyZW50ICkge1xuXG5cdFx0aWYgKCBwYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggcGFyZW50Lm1hdHJpeFdvcmxkLCBjYW1lcmEubWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdH1cblxuXHR0aGlzLmdldENhbWVyYSA9IGZ1bmN0aW9uICggY2FtZXJhICkge1xuXG5cdFx0aWYgKCBpc1ByZXNlbnRpbmcoKSApIHtcblxuXHRcdFx0dmFyIHBhcmVudCA9IGNhbWVyYS5wYXJlbnQ7XG5cdFx0XHR2YXIgY2FtZXJhcyA9IGNhbWVyYVZSLmNhbWVyYXM7XG5cblx0XHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhVlIsIHBhcmVudCApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjYW1lcmFzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR1cGRhdGVDYW1lcmEoIGNhbWVyYXNbIGkgXSwgcGFyZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gdXBkYXRlIGNhbWVyYSBhbmQgaXRzIGNoaWxkcmVuXG5cblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmFWUi5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSBjYW1lcmEuY2hpbGRyZW47XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y2hpbGRyZW5bIGkgXS51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYVZSLCBjYW1lcmFMLCBjYW1lcmFSICk7XG5cblx0XHRcdHJldHVybiBjYW1lcmFWUjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjYW1lcmE7XG5cblx0fTtcblxuXHR0aGlzLmlzUHJlc2VudGluZyA9IGlzUHJlc2VudGluZztcblxuXHQvLyBBbmltYXRpb24gTG9vcFxuXG5cdHZhciBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0cG9zZSA9IGZyYW1lLmdldFZpZXdlclBvc2UoIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRpZiAoIHBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdHZhciB2aWV3cyA9IHBvc2Uudmlld3M7XG5cdFx0XHR2YXIgYmFzZUxheWVyID0gc2Vzc2lvbi5yZW5kZXJTdGF0ZS5iYXNlTGF5ZXI7XG5cblx0XHRcdHJlbmRlcmVyLnNldEZyYW1lYnVmZmVyKCBiYXNlTGF5ZXIuZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdmlld3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciB2aWV3ID0gdmlld3NbIGkgXTtcblx0XHRcdFx0dmFyIHZpZXdwb3J0ID0gYmFzZUxheWVyLmdldFZpZXdwb3J0KCB2aWV3ICk7XG5cdFx0XHRcdHZhciB2aWV3TWF0cml4ID0gdmlldy50cmFuc2Zvcm0uaW52ZXJzZS5tYXRyaXg7XG5cblx0XHRcdFx0dmFyIGNhbWVyYSA9IGNhbWVyYVZSLmNhbWVyYXNbIGkgXTtcblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5mcm9tQXJyYXkoIHZpZXdNYXRyaXggKS5nZXRJbnZlcnNlKCBjYW1lcmEubWF0cml4ICk7XG5cdFx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggdmlldy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRcdGNhbWVyYS52aWV3cG9ydC5zZXQoIHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQgKTtcblxuXHRcdFx0XHRpZiAoIGkgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRjYW1lcmFWUi5tYXRyaXguY29weSggY2FtZXJhLm1hdHJpeCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaSBdO1xuXG5cdFx0XHR2YXIgaW5wdXRTb3VyY2UgPSBpbnB1dFNvdXJjZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBpbnB1dFNvdXJjZSApIHtcblxuXHRcdFx0XHR2YXIgaW5wdXRQb3NlID0gZnJhbWUuZ2V0UG9zZSggaW5wdXRTb3VyY2UudGFyZ2V0UmF5U3BhY2UsIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRcdFx0aWYgKCBpbnB1dFBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5mcm9tQXJyYXkoIGlucHV0UG9zZS50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXguZGVjb21wb3NlKCBjb250cm9sbGVyLnBvc2l0aW9uLCBjb250cm9sbGVyLnJvdGF0aW9uLCBjb250cm9sbGVyLnNjYWxlICk7XG5cdFx0XHRcdFx0Y29udHJvbGxlci52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7XG5cblx0fVxuXG5cdHZhciBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0fTtcblxuXHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTtcblxuXHQvLyBERVBSRUNBVEVEXG5cblx0dGhpcy5nZXRTdGFuZGluZ01hdHJpeCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlhSTWFuYWdlcjogZ2V0U3RhbmRpbmdNYXRyaXgoKSBpcyBubyBsb25nZXIgbmVlZGVkLicgKTtcblx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0RGV2aWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViWFJNYW5hZ2VyOiBnZXREZXZpY2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLicgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RGV2aWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViWFJNYW5hZ2VyOiBzZXREZXZpY2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLicgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RnJhbWVPZlJlZmVyZW5jZVR5cGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IHNldEZyYW1lT2ZSZWZlcmVuY2VUeXBlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4nICk7XG5cblx0fTtcblxuXHR0aGlzLnN1Ym1pdEZyYW1lID0gZnVuY3Rpb24gKCkge307XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggV2ViWFJNYW5hZ2VyLnByb3RvdHlwZSwgRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApO1xuXG4vKipcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFJlbmRlcmVyKCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcicsIFJFVklTSU9OICk7XG5cblx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XG5cblx0dmFyIF9jYW52YXMgPSBwYXJhbWV0ZXJzLmNhbnZhcyAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jYW52YXMgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKSxcblx0XHRfY29udGV4dCA9IHBhcmFtZXRlcnMuY29udGV4dCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jb250ZXh0IDogbnVsbCxcblxuXHRcdF9hbHBoYSA9IHBhcmFtZXRlcnMuYWxwaGEgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYWxwaGEgOiBmYWxzZSxcblx0XHRfZGVwdGggPSBwYXJhbWV0ZXJzLmRlcHRoICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmRlcHRoIDogdHJ1ZSxcblx0XHRfc3RlbmNpbCA9IHBhcmFtZXRlcnMuc3RlbmNpbCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5zdGVuY2lsIDogdHJ1ZSxcblx0XHRfYW50aWFsaWFzID0gcGFyYW1ldGVycy5hbnRpYWxpYXMgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYW50aWFsaWFzIDogZmFsc2UsXG5cdFx0X3ByZW11bHRpcGxpZWRBbHBoYSA9IHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA6IHRydWUsXG5cdFx0X3ByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IHBhcmFtZXRlcnMucHJlc2VydmVEcmF3aW5nQnVmZmVyICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciA6IGZhbHNlLFxuXHRcdF9wb3dlclByZWZlcmVuY2UgPSBwYXJhbWV0ZXJzLnBvd2VyUHJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wb3dlclByZWZlcmVuY2UgOiAnZGVmYXVsdCcsXG5cdFx0X2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBwYXJhbWV0ZXJzLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCA6IGZhbHNlO1xuXG5cdHZhciBjdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7XG5cdHZhciBjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xuXG5cdC8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5cblx0dGhpcy5kb21FbGVtZW50ID0gX2NhbnZhcztcblxuXHQvLyBEZWJ1ZyBjb25maWd1cmF0aW9uIGNvbnRhaW5lclxuXHR0aGlzLmRlYnVnID0ge1xuXG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlcyBlcnJvciBjaGVja2luZyBhbmQgcmVwb3J0aW5nIHdoZW4gc2hhZGVyIHByb2dyYW1zIGFyZSBiZWluZyBjb21waWxlZFxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdGNoZWNrU2hhZGVyRXJyb3JzOiB0cnVlXG5cdH07XG5cblx0Ly8gY2xlYXJpbmdcblxuXHR0aGlzLmF1dG9DbGVhciA9IHRydWU7XG5cdHRoaXMuYXV0b0NsZWFyQ29sb3IgPSB0cnVlO1xuXHR0aGlzLmF1dG9DbGVhckRlcHRoID0gdHJ1ZTtcblx0dGhpcy5hdXRvQ2xlYXJTdGVuY2lsID0gdHJ1ZTtcblxuXHQvLyBzY2VuZSBncmFwaFxuXG5cdHRoaXMuc29ydE9iamVjdHMgPSB0cnVlO1xuXG5cdC8vIHVzZXItZGVmaW5lZCBjbGlwcGluZ1xuXG5cdHRoaXMuY2xpcHBpbmdQbGFuZXMgPSBbXTtcblx0dGhpcy5sb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5cdC8vIHBoeXNpY2FsbHkgYmFzZWQgc2hhZGluZ1xuXG5cdHRoaXMuZ2FtbWFGYWN0b3IgPSAyLjA7XHQvLyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0dGhpcy5nYW1tYUlucHV0ID0gZmFsc2U7XG5cdHRoaXMuZ2FtbWFPdXRwdXQgPSBmYWxzZTtcblxuXHQvLyBwaHlzaWNhbCBsaWdodHNcblxuXHR0aGlzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID0gZmFsc2U7XG5cblx0Ly8gdG9uZSBtYXBwaW5nXG5cblx0dGhpcy50b25lTWFwcGluZyA9IExpbmVhclRvbmVNYXBwaW5nO1xuXHR0aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgPSAxLjA7XG5cdHRoaXMudG9uZU1hcHBpbmdXaGl0ZVBvaW50ID0gMS4wO1xuXG5cdC8vIG1vcnBoc1xuXG5cdHRoaXMubWF4TW9ycGhUYXJnZXRzID0gODtcblx0dGhpcy5tYXhNb3JwaE5vcm1hbHMgPSA0O1xuXG5cdC8vIGludGVybmFsIHByb3BlcnRpZXNcblxuXHR2YXIgX3RoaXMgPSB0aGlzLFxuXG5cdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZSxcblxuXHRcdC8vIGludGVybmFsIHN0YXRlIGNhY2hlXG5cblx0XHRfZnJhbWVidWZmZXIgPSBudWxsLFxuXG5cdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IDAsXG5cdFx0X2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IDAsXG5cdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSBudWxsLFxuXHRcdF9jdXJyZW50RnJhbWVidWZmZXIgPSBudWxsLFxuXHRcdF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMSxcblxuXHRcdC8vIGdlb21ldHJ5IGFuZCBwcm9ncmFtIGNhY2hpbmdcblxuXHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtID0ge1xuXHRcdFx0Z2VvbWV0cnk6IG51bGwsXG5cdFx0XHRwcm9ncmFtOiBudWxsLFxuXHRcdFx0d2lyZWZyYW1lOiBmYWxzZVxuXHRcdH0sXG5cblx0XHRfY3VycmVudENhbWVyYSA9IG51bGwsXG5cdFx0X2N1cnJlbnRBcnJheUNhbWVyYSA9IG51bGwsXG5cblx0XHRfY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKSxcblx0XHRfY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpLFxuXHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSBudWxsLFxuXG5cdFx0Ly9cblxuXHRcdF93aWR0aCA9IF9jYW52YXMud2lkdGgsXG5cdFx0X2hlaWdodCA9IF9jYW52YXMuaGVpZ2h0LFxuXG5cdFx0X3BpeGVsUmF0aW8gPSAxLFxuXG5cdFx0X3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApLFxuXHRcdF9zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApLFxuXHRcdF9zY2lzc29yVGVzdCA9IGZhbHNlLFxuXG5cdFx0Ly8gZnJ1c3R1bVxuXG5cdFx0X2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpLFxuXG5cdFx0Ly8gY2xpcHBpbmdcblxuXHRcdF9jbGlwcGluZyA9IG5ldyBXZWJHTENsaXBwaW5nKCksXG5cdFx0X2NsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLFxuXHRcdF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLFxuXG5cdFx0Ly8gY2FtZXJhIG1hdHJpY2VzIGNhY2hlXG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCksXG5cblx0XHRfdmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0ZnVuY3Rpb24gZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpIHtcblxuXHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCA/IF9waXhlbFJhdGlvIDogMTtcblxuXHR9XG5cblx0Ly8gaW5pdGlhbGl6ZVxuXG5cdHZhciBfZ2w7XG5cblx0dHJ5IHtcblxuXHRcdHZhciBjb250ZXh0QXR0cmlidXRlcyA9IHtcblx0XHRcdGFscGhhOiBfYWxwaGEsXG5cdFx0XHRkZXB0aDogX2RlcHRoLFxuXHRcdFx0c3RlbmNpbDogX3N0ZW5jaWwsXG5cdFx0XHRhbnRpYWxpYXM6IF9hbnRpYWxpYXMsXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGE6IF9wcmVtdWx0aXBsaWVkQWxwaGEsXG5cdFx0XHRwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IF9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIsXG5cdFx0XHRwb3dlclByZWZlcmVuY2U6IF9wb3dlclByZWZlcmVuY2UsXG5cdFx0XHRmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0OiBfZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCxcblx0XHRcdHhyQ29tcGF0aWJsZTogdHJ1ZVxuXHRcdH07XG5cblx0XHQvLyBldmVudCBsaXN0ZW5lcnMgbXVzdCBiZSByZWdpc3RlcmVkIGJlZm9yZSBXZWJHTCBjb250ZXh0IGlzIGNyZWF0ZWQsIHNlZSAjMTI3NTNcblxuXHRcdF9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdF9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UgKTtcblxuXHRcdF9nbCA9IF9jb250ZXh0IHx8IF9jYW52YXMuZ2V0Q29udGV4dCggJ3dlYmdsJywgY29udGV4dEF0dHJpYnV0ZXMgKSB8fCBfY2FudmFzLmdldENvbnRleHQoICdleHBlcmltZW50YWwtd2ViZ2wnLCBjb250ZXh0QXR0cmlidXRlcyApO1xuXG5cdFx0aWYgKCBfZ2wgPT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggX2NhbnZhcy5nZXRDb250ZXh0KCAnd2ViZ2wnICkgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dCB3aXRoIHlvdXIgc2VsZWN0ZWQgYXR0cmlidXRlcy4nICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFNvbWUgZXhwZXJpbWVudGFsLXdlYmdsIGltcGxlbWVudGF0aW9ucyBkbyBub3QgaGF2ZSBnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXRcblxuXHRcdGlmICggX2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHJldHVybiB7ICdyYW5nZU1pbic6IDEsICdyYW5nZU1heCc6IDEsICdwcmVjaXNpb24nOiAxIH07XG5cblx0XHRcdH07XG5cblx0XHR9XG5cblx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBlcnJvci5tZXNzYWdlICk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cblx0fVxuXG5cdHZhciBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMsIHN0YXRlLCBpbmZvO1xuXHR2YXIgcHJvcGVydGllcywgdGV4dHVyZXMsIGF0dHJpYnV0ZXMsIGdlb21ldHJpZXMsIG9iamVjdHM7XG5cdHZhciBwcm9ncmFtQ2FjaGUsIHJlbmRlckxpc3RzLCByZW5kZXJTdGF0ZXM7XG5cblx0dmFyIGJhY2tncm91bmQsIG1vcnBodGFyZ2V0cywgYnVmZmVyUmVuZGVyZXIsIGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblxuXHR2YXIgdXRpbHM7XG5cblx0ZnVuY3Rpb24gaW5pdEdMQ29udGV4dCgpIHtcblxuXHRcdGV4dGVuc2lvbnMgPSBuZXcgV2ViR0xFeHRlbnNpb25zKCBfZ2wgKTtcblxuXHRcdGNhcGFiaWxpdGllcyA9IG5ldyBXZWJHTENhcGFiaWxpdGllcyggX2dsLCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRpZiAoICEgY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRleHRlbnNpb25zLmdldCggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cdFx0XHRleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicgKTtcblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfZWxlbWVudF9pbmRleF91aW50JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICk7XG5cblx0XHR1dGlscyA9IG5ldyBXZWJHTFV0aWxzKCBfZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0c3RhdGUgPSBuZXcgV2ViR0xTdGF0ZSggX2dsLCBleHRlbnNpb25zLCB1dGlscywgY2FwYWJpbGl0aWVzICk7XG5cdFx0c3RhdGUuc2Npc3NvciggX2N1cnJlbnRTY2lzc29yLmNvcHkoIF9zY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkuZmxvb3IoKSApO1xuXHRcdHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCkgKTtcblxuXHRcdGluZm8gPSBuZXcgV2ViR0xJbmZvKCBfZ2wgKTtcblx0XHRwcm9wZXJ0aWVzID0gbmV3IFdlYkdMUHJvcGVydGllcygpO1xuXHRcdHRleHR1cmVzID0gbmV3IFdlYkdMVGV4dHVyZXMoIF9nbCwgZXh0ZW5zaW9ucywgc3RhdGUsIHByb3BlcnRpZXMsIGNhcGFiaWxpdGllcywgdXRpbHMsIGluZm8gKTtcblx0XHRhdHRyaWJ1dGVzID0gbmV3IFdlYkdMQXR0cmlidXRlcyggX2dsICk7XG5cdFx0Z2VvbWV0cmllcyA9IG5ldyBXZWJHTEdlb21ldHJpZXMoIF9nbCwgYXR0cmlidXRlcywgaW5mbyApO1xuXHRcdG9iamVjdHMgPSBuZXcgV2ViR0xPYmplY3RzKCBnZW9tZXRyaWVzLCBpbmZvICk7XG5cdFx0bW9ycGh0YXJnZXRzID0gbmV3IFdlYkdMTW9ycGh0YXJnZXRzKCBfZ2wgKTtcblx0XHRwcm9ncmFtQ2FjaGUgPSBuZXcgV2ViR0xQcm9ncmFtcyggX3RoaXMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApO1xuXHRcdHJlbmRlckxpc3RzID0gbmV3IFdlYkdMUmVuZGVyTGlzdHMoKTtcblx0XHRyZW5kZXJTdGF0ZXMgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZXMoKTtcblxuXHRcdGJhY2tncm91bmQgPSBuZXcgV2ViR0xCYWNrZ3JvdW5kKCBfdGhpcywgc3RhdGUsIG9iamVjdHMsIF9wcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdGJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMQnVmZmVyUmVuZGVyZXIoIF9nbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICk7XG5cdFx0aW5kZXhlZEJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyKCBfZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0aW5mby5wcm9ncmFtcyA9IHByb2dyYW1DYWNoZS5wcm9ncmFtcztcblxuXHRcdF90aGlzLmNhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcztcblx0XHRfdGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcblx0XHRfdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcblx0XHRfdGhpcy5yZW5kZXJMaXN0cyA9IHJlbmRlckxpc3RzO1xuXHRcdF90aGlzLnN0YXRlID0gc3RhdGU7XG5cdFx0X3RoaXMuaW5mbyA9IGluZm87XG5cblx0fVxuXG5cdGluaXRHTENvbnRleHQoKTtcblxuXHQvLyB2clxuXG5cdHZhciB2ciA9ICggdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgJ3hyJyBpbiBuYXZpZ2F0b3IgJiYgJ3N1cHBvcnRzU2Vzc2lvbicgaW4gbmF2aWdhdG9yLnhyICkgPyBuZXcgV2ViWFJNYW5hZ2VyKCBfdGhpcywgX2dsICkgOiBuZXcgV2ViVlJNYW5hZ2VyKCBfdGhpcyApO1xuXG5cdHRoaXMudnIgPSB2cjtcblxuXHQvLyBzaGFkb3cgbWFwXG5cblx0dmFyIHNoYWRvd01hcCA9IG5ldyBXZWJHTFNoYWRvd01hcCggX3RoaXMsIG9iamVjdHMsIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApO1xuXG5cdHRoaXMuc2hhZG93TWFwID0gc2hhZG93TWFwO1xuXG5cdC8vIEFQSVxuXG5cdHRoaXMuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfZ2w7XG5cblx0fTtcblxuXHR0aGlzLmdldENvbnRleHRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9nbC5nZXRDb250ZXh0QXR0cmlidXRlcygpO1xuXG5cdH07XG5cblx0dGhpcy5mb3JjZUNvbnRleHRMb3NzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApO1xuXHRcdGlmICggZXh0ZW5zaW9uICkgZXh0ZW5zaW9uLmxvc2VDb250ZXh0KCk7XG5cblx0fTtcblxuXHR0aGlzLmZvcmNlQ29udGV4dFJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0aWYgKCBleHRlbnNpb24gKSBleHRlbnNpb24ucmVzdG9yZUNvbnRleHQoKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfcGl4ZWxSYXRpbztcblxuXHR9O1xuXG5cdHRoaXMuc2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRfcGl4ZWxSYXRpbyA9IHZhbHVlO1xuXG5cdFx0dGhpcy5zZXRTaXplKCBfd2lkdGgsIF9oZWlnaHQsIGZhbHNlICk7XG5cblx0fTtcblxuXHR0aGlzLmdldFNpemUgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dlYkdMUmVuZGVyZXI6IC5nZXRzaXplKCkgbm93IHJlcXVpcmVzIGEgVmVjdG9yMiBhcyBhbiBhcmd1bWVudCcgKTtcblxuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCBfd2lkdGgsIF9oZWlnaHQgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2l6ZSA9IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCwgdXBkYXRlU3R5bGUgKSB7XG5cblx0XHRpZiAoIHZyLmlzUHJlc2VudGluZygpICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDYW5cXCd0IGNoYW5nZSBzaXplIHdoaWxlIFZSIGRldmljZSBpcyBwcmVzZW50aW5nLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRfY2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiBfcGl4ZWxSYXRpbyApO1xuXHRcdF9jYW52YXMuaGVpZ2h0ID0gTWF0aC5mbG9vciggaGVpZ2h0ICogX3BpeGVsUmF0aW8gKTtcblxuXHRcdGlmICggdXBkYXRlU3R5bGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHRfY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuXHRcdFx0X2NhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH07XG5cblx0dGhpcy5nZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnV2ViR0xSZW5kZXJlcjogLmdldGRyYXdpbmdCdWZmZXJTaXplKCkgbm93IHJlcXVpcmVzIGEgVmVjdG9yMiBhcyBhbiBhcmd1bWVudCcgKTtcblxuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCBfd2lkdGggKiBfcGl4ZWxSYXRpbywgX2hlaWdodCAqIF9waXhlbFJhdGlvICkuZmxvb3IoKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RHJhd2luZ0J1ZmZlclNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHBpeGVsUmF0aW8gKSB7XG5cblx0XHRfd2lkdGggPSB3aWR0aDtcblx0XHRfaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0X3BpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuXG5cdFx0X2NhbnZhcy53aWR0aCA9IE1hdGguZmxvb3IoIHdpZHRoICogcGl4ZWxSYXRpbyApO1xuXHRcdF9jYW52YXMuaGVpZ2h0ID0gTWF0aC5mbG9vciggaGVpZ2h0ICogcGl4ZWxSYXRpbyApO1xuXG5cdFx0dGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRDdXJyZW50Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dlYkdMUmVuZGVyZXI6IC5nZXRDdXJyZW50Vmlld3BvcnQoKSBub3cgcmVxdWlyZXMgYSBWZWN0b3I0IGFzIGFuIGFyZ3VtZW50JyApO1xuXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBfY3VycmVudFZpZXdwb3J0ICk7XG5cblx0fTtcblxuXHR0aGlzLmdldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF92aWV3cG9ydCApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRWaWV3cG9ydCA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggeC5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdF92aWV3cG9ydC5zZXQoIHgueCwgeC55LCB4LnosIHgudyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3ZpZXdwb3J0LnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkuZmxvb3IoKSApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRTY2lzc29yID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF9zY2lzc29yICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFNjaXNzb3IgPSBmdW5jdGlvbiAoIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRpZiAoIHguaXNWZWN0b3I0ICkge1xuXG5cdFx0XHRfc2Npc3Nvci5zZXQoIHgueCwgeC55LCB4LnosIHgudyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3NjaXNzb3Iuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpICk7XG5cblx0fTtcblxuXHR0aGlzLmdldFNjaXNzb3JUZXN0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9zY2lzc29yVGVzdDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7XG5cblx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdCggX3NjaXNzb3JUZXN0ID0gYm9vbGVhbiApO1xuXG5cdH07XG5cblx0Ly8gQ2xlYXJpbmdcblxuXHR0aGlzLmdldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gYmFja2dyb3VuZC5nZXRDbGVhckNvbG9yKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRiYWNrZ3JvdW5kLnNldENsZWFyQ29sb3IuYXBwbHkoIGJhY2tncm91bmQsIGFyZ3VtZW50cyApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRDbGVhckFscGhhID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIGJhY2tncm91bmQuZ2V0Q2xlYXJBbHBoYSgpO1xuXG5cdH07XG5cblx0dGhpcy5zZXRDbGVhckFscGhhID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0YmFja2dyb3VuZC5zZXRDbGVhckFscGhhLmFwcGx5KCBiYWNrZ3JvdW5kLCBhcmd1bWVudHMgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHtcblxuXHRcdHZhciBiaXRzID0gMDtcblxuXHRcdGlmICggY29sb3IgPT09IHVuZGVmaW5lZCB8fCBjb2xvciApIGJpdHMgfD0gMTYzODQ7XG5cdFx0aWYgKCBkZXB0aCA9PT0gdW5kZWZpbmVkIHx8IGRlcHRoICkgYml0cyB8PSAyNTY7XG5cdFx0aWYgKCBzdGVuY2lsID09PSB1bmRlZmluZWQgfHwgc3RlbmNpbCApIGJpdHMgfD0gMTAyNDtcblxuXHRcdF9nbC5jbGVhciggYml0cyApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jbGVhciggdHJ1ZSwgZmFsc2UsIGZhbHNlICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyRGVwdGggPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNsZWFyKCBmYWxzZSwgdHJ1ZSwgZmFsc2UgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXJTdGVuY2lsID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jbGVhciggZmFsc2UsIGZhbHNlLCB0cnVlICk7XG5cblx0fTtcblxuXHQvL1xuXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdF9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdF9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UgKTtcblxuXHRcdHJlbmRlckxpc3RzLmRpc3Bvc2UoKTtcblx0XHRyZW5kZXJTdGF0ZXMuZGlzcG9zZSgpO1xuXHRcdHByb3BlcnRpZXMuZGlzcG9zZSgpO1xuXHRcdG9iamVjdHMuZGlzcG9zZSgpO1xuXG5cdFx0dnIuZGlzcG9zZSgpO1xuXG5cdFx0YW5pbWF0aW9uLnN0b3AoKTtcblxuXHR9O1xuXG5cdC8vIEV2ZW50c1xuXG5cdGZ1bmN0aW9uIG9uQ29udGV4dExvc3QoIGV2ZW50ICkge1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBMb3N0LicgKTtcblxuXHRcdF9pc0NvbnRleHRMb3N0ID0gdHJ1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Db250ZXh0UmVzdG9yZSggLyogZXZlbnQgKi8gKSB7XG5cblx0XHRjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgUmVzdG9yZWQuJyApO1xuXG5cdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZTtcblxuXHRcdGluaXRHTENvbnRleHQoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25NYXRlcmlhbERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIG1hdGVyaWFsID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0bWF0ZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHQvLyBCdWZmZXIgZGVhbGxvY2F0aW9uXG5cblx0ZnVuY3Rpb24gZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApIHtcblxuXHRcdHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2UoIG1hdGVyaWFsICk7XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblxuXHRmdW5jdGlvbiByZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlKCBtYXRlcmlhbCApIHtcblxuXHRcdHZhciBwcm9ncmFtSW5mbyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLnByb2dyYW07XG5cblx0XHRtYXRlcmlhbC5wcm9ncmFtID0gdW5kZWZpbmVkO1xuXG5cdFx0aWYgKCBwcm9ncmFtSW5mbyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwcm9ncmFtQ2FjaGUucmVsZWFzZVByb2dyYW0oIHByb2dyYW1JbmZvICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIEJ1ZmZlciByZW5kZXJpbmdcblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3RJbW1lZGlhdGUoIG9iamVjdCwgcHJvZ3JhbSApIHtcblxuXHRcdG9iamVjdC5yZW5kZXIoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJJbW1lZGlhdGUoIG9iamVjdCwgcHJvZ3JhbSApO1xuXG5cdFx0fSApO1xuXG5cdH1cblxuXHR0aGlzLnJlbmRlckJ1ZmZlckltbWVkaWF0ZSA9IGZ1bmN0aW9uICggb2JqZWN0LCBwcm9ncmFtICkge1xuXG5cdFx0c3RhdGUuaW5pdEF0dHJpYnV0ZXMoKTtcblxuXHRcdHZhciBidWZmZXJzID0gcHJvcGVydGllcy5nZXQoIG9iamVjdCApO1xuXG5cdFx0aWYgKCBvYmplY3QuaGFzUG9zaXRpb25zICYmICEgYnVmZmVycy5wb3NpdGlvbiApIGJ1ZmZlcnMucG9zaXRpb24gPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzTm9ybWFscyAmJiAhIGJ1ZmZlcnMubm9ybWFsICkgYnVmZmVycy5ub3JtYWwgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzVXZzICYmICEgYnVmZmVycy51diApIGJ1ZmZlcnMudXYgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzQ29sb3JzICYmICEgYnVmZmVycy5jb2xvciApIGJ1ZmZlcnMuY29sb3IgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHR2YXIgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGlmICggb2JqZWN0Lmhhc1Bvc2l0aW9ucyApIHtcblxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXJzLnBvc2l0aW9uICk7XG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSggMzQ5NjIsIG9iamVjdC5wb3NpdGlvbkFycmF5LCAzNTA0OCApO1xuXG5cdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGVzLnBvc2l0aW9uICk7XG5cdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMucG9zaXRpb24sIDMsIDUxMjYsIGZhbHNlLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5oYXNOb3JtYWxzICkge1xuXG5cdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjIsIGJ1ZmZlcnMubm9ybWFsICk7XG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSggMzQ5NjIsIG9iamVjdC5ub3JtYWxBcnJheSwgMzUwNDggKTtcblxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlcy5ub3JtYWwgKTtcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlcy5ub3JtYWwsIDMsIDUxMjYsIGZhbHNlLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5oYXNVdnMgKSB7XG5cblx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVycy51diApO1xuXHRcdFx0X2dsLmJ1ZmZlckRhdGEoIDM0OTYyLCBvYmplY3QudXZBcnJheSwgMzUwNDggKTtcblxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlcy51diApO1xuXHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGVzLnV2LCAyLCA1MTI2LCBmYWxzZSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaGFzQ29sb3JzICkge1xuXG5cdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjIsIGJ1ZmZlcnMuY29sb3IgKTtcblx0XHRcdF9nbC5idWZmZXJEYXRhKCAzNDk2Miwgb2JqZWN0LmNvbG9yQXJyYXksIDM1MDQ4ICk7XG5cblx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZXMuY29sb3IgKTtcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlcy5jb2xvciwgMywgNTEyNiwgZmFsc2UsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7XG5cblx0XHRfZ2wuZHJhd0FycmF5cyggNCwgMCwgb2JqZWN0LmNvdW50ICk7XG5cblx0XHRvYmplY3QuY291bnQgPSAwO1xuXG5cdH07XG5cblx0dGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QgPSBmdW5jdGlvbiAoIGNhbWVyYSwgZm9nLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKSB7XG5cblx0XHR2YXIgZnJvbnRGYWNlQ1cgPSAoIG9iamVjdC5pc01lc2ggJiYgb2JqZWN0Lm1hdHJpeFdvcmxkLmRldGVybWluYW50KCkgPCAwICk7XG5cblx0XHRzdGF0ZS5zZXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZyb250RmFjZUNXICk7XG5cblx0XHR2YXIgcHJvZ3JhbSA9IHNldFByb2dyYW0oIGNhbWVyYSwgZm9nLCBtYXRlcmlhbCwgb2JqZWN0ICk7XG5cblx0XHR2YXIgdXBkYXRlQnVmZmVycyA9IGZhbHNlO1xuXG5cdFx0aWYgKCBfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5nZW9tZXRyeSAhPT0gZ2VvbWV0cnkuaWQgfHxcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLnByb2dyYW0gIT09IHByb2dyYW0uaWQgfHxcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLndpcmVmcmFtZSAhPT0gKCBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUgKSApIHtcblxuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0uZ2VvbWV0cnkgPSBnZW9tZXRyeS5pZDtcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLnByb2dyYW0gPSBwcm9ncmFtLmlkO1xuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ud2lyZWZyYW1lID0gbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlO1xuXHRcdFx0dXBkYXRlQnVmZmVycyA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXMgKSB7XG5cblx0XHRcdG1vcnBodGFyZ2V0cy51cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBwcm9ncmFtICk7XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlcnMgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0dmFyIHJhbmdlRmFjdG9yID0gMTtcblxuXHRcdGlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkge1xuXG5cdFx0XHRpbmRleCA9IGdlb21ldHJpZXMuZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApO1xuXHRcdFx0cmFuZ2VGYWN0b3IgPSAyO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZTtcblx0XHR2YXIgcmVuZGVyZXIgPSBidWZmZXJSZW5kZXJlcjtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMuZ2V0KCBpbmRleCApO1xuXG5cdFx0XHRyZW5kZXJlciA9IGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblx0XHRcdHJlbmRlcmVyLnNldEluZGV4KCBhdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdXBkYXRlQnVmZmVycyApIHtcblxuXHRcdFx0c2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnkgKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjMsIGF0dHJpYnV0ZS5idWZmZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHZhciBkYXRhQ291bnQgPSBJbmZpbml0eTtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGFDb3VudCA9IGluZGV4LmNvdW50O1xuXG5cdFx0fSBlbHNlIGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0ZGF0YUNvdW50ID0gcG9zaXRpb24uY291bnQ7XG5cblx0XHR9XG5cblx0XHR2YXIgcmFuZ2VTdGFydCA9IGdlb21ldHJ5LmRyYXdSYW5nZS5zdGFydCAqIHJhbmdlRmFjdG9yO1xuXHRcdHZhciByYW5nZUNvdW50ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLmNvdW50ICogcmFuZ2VGYWN0b3I7XG5cblx0XHR2YXIgZ3JvdXBTdGFydCA9IGdyb3VwICE9PSBudWxsID8gZ3JvdXAuc3RhcnQgKiByYW5nZUZhY3RvciA6IDA7XG5cdFx0dmFyIGdyb3VwQ291bnQgPSBncm91cCAhPT0gbnVsbCA/IGdyb3VwLmNvdW50ICogcmFuZ2VGYWN0b3IgOiBJbmZpbml0eTtcblxuXHRcdHZhciBkcmF3U3RhcnQgPSBNYXRoLm1heCggcmFuZ2VTdGFydCwgZ3JvdXBTdGFydCApO1xuXHRcdHZhciBkcmF3RW5kID0gTWF0aC5taW4oIGRhdGFDb3VudCwgcmFuZ2VTdGFydCArIHJhbmdlQ291bnQsIGdyb3VwU3RhcnQgKyBncm91cENvdW50ICkgLSAxO1xuXG5cdFx0dmFyIGRyYXdDb3VudCA9IE1hdGgubWF4KCAwLCBkcmF3RW5kIC0gZHJhd1N0YXJ0ICsgMSApO1xuXG5cdFx0aWYgKCBkcmF3Q291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBvYmplY3QuaXNNZXNoICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRzdGF0ZS5zZXRMaW5lV2lkdGgoIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApO1xuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAxICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3dpdGNoICggb2JqZWN0LmRyYXdNb2RlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSBUcmlhbmdsZXNEcmF3TW9kZTpcblx0XHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDQgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBUcmlhbmdsZVN0cmlwRHJhd01vZGU6XG5cdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCA1ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgVHJpYW5nbGVGYW5EcmF3TW9kZTpcblx0XHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDYgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lICkge1xuXG5cdFx0XHR2YXIgbGluZVdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xuXG5cdFx0XHRpZiAoIGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkICkgbGluZVdpZHRoID0gMTsgLy8gTm90IHVzaW5nIExpbmUqTWF0ZXJpYWxcblxuXHRcdFx0c3RhdGUuc2V0TGluZVdpZHRoKCBsaW5lV2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgKTtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNMaW5lU2VnbWVudHMgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lTG9vcCApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAyICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMyApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNQb2ludHMgKSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDAgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1Nwcml0ZSApIHtcblxuXHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggNCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID4gMCApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoIGdlb21ldHJ5LCBkcmF3U3RhcnQsIGRyYXdDb3VudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXIoIGRyYXdTdGFydCwgZHJhd0NvdW50ICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHRmdW5jdGlvbiBzZXR1cFZlcnRleEF0dHJpYnV0ZXMoIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSApIHtcblxuXHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSAmJiAhIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0aWYgKCBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICkgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIuc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuaW5pdEF0dHJpYnV0ZXMoKTtcblxuXHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHR2YXIgbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzID0gbWF0ZXJpYWwuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcztcblxuXHRcdGZvciAoIHZhciBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgcHJvZ3JhbUF0dHJpYnV0ZSA9IHByb2dyYW1BdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZSA+PSAwICkge1xuXG5cdFx0XHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZSA9IGdlb21ldHJ5QXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHZhciBub3JtYWxpemVkID0gZ2VvbWV0cnlBdHRyaWJ1dGUubm9ybWFsaXplZDtcblx0XHRcdFx0XHR2YXIgc2l6ZSA9IGdlb21ldHJ5QXR0cmlidXRlLml0ZW1TaXplO1xuXG5cdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0Ly8gVE9ETyBBdHRyaWJ1dGUgbWF5IG5vdCBiZSBhdmFpbGFibGUgb24gY29udGV4dCByZXN0b3JlXG5cblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRcdFx0XHR2YXIgYnVmZmVyID0gYXR0cmlidXRlLmJ1ZmZlcjtcblx0XHRcdFx0XHR2YXIgdHlwZSA9IGF0dHJpYnV0ZS50eXBlO1xuXHRcdFx0XHRcdHZhciBieXRlc1BlckVsZW1lbnQgPSBhdHRyaWJ1dGUuYnl0ZXNQZXJFbGVtZW50O1xuXG5cdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgZGF0YSA9IGdlb21ldHJ5QXR0cmlidXRlLmRhdGE7XG5cdFx0XHRcdFx0XHR2YXIgc3RyaWRlID0gZGF0YS5zdHJpZGU7XG5cdFx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gZ2VvbWV0cnlBdHRyaWJ1dGUub2Zmc2V0O1xuXG5cdFx0XHRcdFx0XHRpZiAoIGRhdGEgJiYgZGF0YS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUsIGRhdGEubWVzaFBlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID0gZGF0YS5tZXNoUGVyQXR0cmlidXRlICogZGF0YS5jb3VudDtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUgKiBieXRlc1BlckVsZW1lbnQsIG9mZnNldCAqIGJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlLCBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVyICk7XG5cdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZSwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgMCwgMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzWyBuYW1lIF07XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIHZhbHVlLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjJmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjNmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjRmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWIxZnYoIHByb2dyYW1BdHRyaWJ1dGUsIHZhbHVlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7XG5cblx0fVxuXG5cdC8vIENvbXBpbGVcblxuXHR0aGlzLmNvbXBpbGUgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLmluaXQoKTtcblxuXHRcdHNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEgKTtcblxuXHRcdHNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QubWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmplY3QubWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG9iamVjdC5tYXRlcmlhbC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGluaXRNYXRlcmlhbCggb2JqZWN0Lm1hdGVyaWFsWyBpIF0sIHNjZW5lLmZvZywgb2JqZWN0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGluaXRNYXRlcmlhbCggb2JqZWN0Lm1hdGVyaWFsLCBzY2VuZS5mb2csIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0Ly8gQW5pbWF0aW9uIExvb3BcblxuXHR2YXIgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lICkge1xuXG5cdFx0aWYgKCB2ci5pc1ByZXNlbnRpbmcoKSApIHJldHVybjtcblx0XHRpZiAoIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayApIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayggdGltZSApO1xuXG5cdH1cblxuXHR2YXIgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7XG5cdGFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0aWYgKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyApIGFuaW1hdGlvbi5zZXRDb250ZXh0KCB3aW5kb3cgKTtcblxuXHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0dnIuc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTtcblxuXHRcdGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdH07XG5cblx0Ly8gUmVuZGVyaW5nXG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0LCBmb3JjZUNsZWFyO1xuXG5cdFx0aWYgKCBhcmd1bWVudHNbIDIgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcigpOiB0aGUgcmVuZGVyVGFyZ2V0IGFyZ3VtZW50IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuc2V0UmVuZGVyVGFyZ2V0KCkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZW5kZXJUYXJnZXQgPSBhcmd1bWVudHNbIDIgXTtcblxuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzWyAzIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZW5kZXIoKTogdGhlIGZvcmNlQ2xlYXIgYXJndW1lbnQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5jbGVhcigpIGluc3RlYWQuJyApO1xuXHRcdFx0Zm9yY2VDbGVhciA9IGFyZ3VtZW50c1sgMyBdO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAhICggY2FtZXJhICYmIGNhbWVyYS5pc0NhbWVyYSApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZW5kZXI6IGNhbWVyYSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuQ2FtZXJhLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggX2lzQ29udGV4dExvc3QgKSByZXR1cm47XG5cblx0XHQvLyByZXNldCBjYWNoaW5nIGZvciB0aGlzIGZyYW1lXG5cblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5nZW9tZXRyeSA9IG51bGw7XG5cdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ucHJvZ3JhbSA9IG51bGw7XG5cdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gLSAxO1xuXHRcdF9jdXJyZW50Q2FtZXJhID0gbnVsbDtcblxuXHRcdC8vIHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0aWYgKCBzY2VuZS5hdXRvVXBkYXRlID09PSB0cnVlICkgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdC8vIHVwZGF0ZSBjYW1lcmEgbWF0cmljZXMgYW5kIGZydXN0dW1cblxuXHRcdGlmICggY2FtZXJhLnBhcmVudCA9PT0gbnVsbCApIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0aWYgKCB2ci5lbmFibGVkICkge1xuXG5cdFx0XHRjYW1lcmEgPSB2ci5nZXRDYW1lcmEoIGNhbWVyYSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBjYW1lcmEgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuaW5pdCgpO1xuXG5cdFx0c2NlbmUub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCByZW5kZXJUYXJnZXQgfHwgX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdF9wcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0X2ZydXN0dW0uc2V0RnJvbU1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQ7XG5cdFx0X2NsaXBwaW5nRW5hYmxlZCA9IF9jbGlwcGluZy5pbml0KCB0aGlzLmNsaXBwaW5nUGxhbmVzLCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQsIGNhbWVyYSApO1xuXG5cdFx0Y3VycmVudFJlbmRlckxpc3QgPSByZW5kZXJMaXN0cy5nZXQoIHNjZW5lLCBjYW1lcmEgKTtcblx0XHRjdXJyZW50UmVuZGVyTGlzdC5pbml0KCk7XG5cblx0XHRwcm9qZWN0T2JqZWN0KCBzY2VuZSwgY2FtZXJhLCAwLCBfdGhpcy5zb3J0T2JqZWN0cyApO1xuXG5cdFx0aWYgKCBfdGhpcy5zb3J0T2JqZWN0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y3VycmVudFJlbmRlckxpc3Quc29ydCgpO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCApIF9jbGlwcGluZy5iZWdpblNoYWRvd3MoKTtcblxuXHRcdHZhciBzaGFkb3dzQXJyYXkgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUuc2hhZG93c0FycmF5O1xuXG5cdFx0c2hhZG93TWFwLnJlbmRlciggc2hhZG93c0FycmF5LCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHMoIGNhbWVyYSApO1xuXG5cdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkICkgX2NsaXBwaW5nLmVuZFNoYWRvd3MoKTtcblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuaW5mby5hdXRvUmVzZXQgKSB0aGlzLmluZm8ucmVzZXQoKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRiYWNrZ3JvdW5kLnJlbmRlciggY3VycmVudFJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIGZvcmNlQ2xlYXIgKTtcblxuXHRcdC8vIHJlbmRlciBzY2VuZVxuXG5cdFx0dmFyIG9wYXF1ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC5vcGFxdWU7XG5cdFx0dmFyIHRyYW5zcGFyZW50T2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zcGFyZW50O1xuXG5cdFx0aWYgKCBzY2VuZS5vdmVycmlkZU1hdGVyaWFsICkge1xuXG5cdFx0XHR2YXIgb3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWw7XG5cblx0XHRcdGlmICggb3BhcXVlT2JqZWN0cy5sZW5ndGggKSByZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsICk7XG5cdFx0XHRpZiAoIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggKSByZW5kZXJPYmplY3RzKCB0cmFuc3BhcmVudE9iamVjdHMsIHNjZW5lLCBjYW1lcmEsIG92ZXJyaWRlTWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIG9wYXF1ZSBwYXNzIChmcm9udC10by1iYWNrIG9yZGVyKVxuXG5cdFx0XHRpZiAoIG9wYXF1ZU9iamVjdHMubGVuZ3RoICkgcmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0XHQvLyB0cmFuc3BhcmVudCBwYXNzIChiYWNrLXRvLWZyb250IG9yZGVyKVxuXG5cdFx0XHRpZiAoIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggKSByZW5kZXJPYmplY3RzKCB0cmFuc3BhcmVudE9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRzY2VuZS5vbkFmdGVyUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgIT09IG51bGwgKSB7XG5cblx0XHRcdC8vIEdlbmVyYXRlIG1pcG1hcCBpZiB3ZSdyZSB1c2luZyBhbnkga2luZCBvZiBtaXBtYXAgZmlsdGVyaW5nXG5cblx0XHRcdHRleHR1cmVzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0Ly8gcmVzb2x2ZSBtdWx0aXNhbXBsZSByZW5kZXJidWZmZXJzIHRvIGEgc2luZ2xlLXNhbXBsZSB0ZXh0dXJlIGlmIG5lY2Vzc2FyeVxuXG5cdFx0XHR0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSBkZXB0aCBidWZmZXIgd3JpdGluZyBpcyBlbmFibGVkIHNvIGl0IGNhbiBiZSBjbGVhcmVkIG9uIG5leHQgcmVuZGVyXG5cblx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTtcblx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldE1hc2soIHRydWUgKTtcblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldE1hc2soIHRydWUgKTtcblxuXHRcdHN0YXRlLnNldFBvbHlnb25PZmZzZXQoIGZhbHNlICk7XG5cblx0XHRpZiAoIHZyLmVuYWJsZWQgKSB7XG5cblx0XHRcdHZyLnN1Ym1pdEZyYW1lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBfZ2wuZmluaXNoKCk7XG5cblx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcblxuXHR9O1xuXG5cdGZ1bmN0aW9uIHByb2plY3RPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBncm91cE9yZGVyLCBzb3J0T2JqZWN0cyApIHtcblxuXHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0dmFyIHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNHcm91cCApIHtcblxuXHRcdFx0XHRncm91cE9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMT0QgKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIG9iamVjdC51cGRhdGUoIGNhbWVyYSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRcdGlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzU3ByaXRlKCBvYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yMy56LCBudWxsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgKSB7XG5cblx0XHRcdFx0aWYgKCBzb3J0T2JqZWN0cyApIHtcblxuXHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkIClcblx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgbnVsbCwgb2JqZWN0Lm1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yMy56LCBudWxsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggfHwgb2JqZWN0LmlzTGluZSB8fCBvYmplY3QuaXNQb2ludHMgKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5za2VsZXRvbi51cGRhdGUoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAhIG9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNPYmplY3QoIG9iamVjdCApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBzb3J0T2JqZWN0cyApIHtcblxuXHRcdFx0XHRcdFx0X3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQgKVxuXHRcdFx0XHRcdFx0XHQuYXBwbHlNYXRyaXg0KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIG9iamVjdCApO1xuXHRcdFx0XHRcdHZhciBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0XHRcdHZhciBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgZ3JvdXBNYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yMy56LCBudWxsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRwcm9qZWN0T2JqZWN0KCBjaGlsZHJlblsgaSBdLCBjYW1lcmEsIGdyb3VwT3JkZXIsIHNvcnRPYmplY3RzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdHMoIHJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIG92ZXJyaWRlTWF0ZXJpYWwgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSByZW5kZXJMaXN0Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciByZW5kZXJJdGVtID0gcmVuZGVyTGlzdFsgaSBdO1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gcmVuZGVySXRlbS5vYmplY3Q7XG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSByZW5kZXJJdGVtLmdlb21ldHJ5O1xuXHRcdFx0dmFyIG1hdGVyaWFsID0gb3ZlcnJpZGVNYXRlcmlhbCA9PT0gdW5kZWZpbmVkID8gcmVuZGVySXRlbS5tYXRlcmlhbCA6IG92ZXJyaWRlTWF0ZXJpYWw7XG5cdFx0XHR2YXIgZ3JvdXAgPSByZW5kZXJJdGVtLmdyb3VwO1xuXG5cdFx0XHRpZiAoIGNhbWVyYS5pc0FycmF5Q2FtZXJhICkge1xuXG5cdFx0XHRcdF9jdXJyZW50QXJyYXlDYW1lcmEgPSBjYW1lcmE7XG5cblx0XHRcdFx0dmFyIGNhbWVyYXMgPSBjYW1lcmEuY2FtZXJhcztcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gY2FtZXJhcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjYW1lcmEyID0gY2FtZXJhc1sgaiBdO1xuXG5cdFx0XHRcdFx0aWYgKCBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYTIubGF5ZXJzICkgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0LmNvcHkoIGNhbWVyYTIudmlld3BvcnQgKSApO1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHMoIGNhbWVyYTIgKTtcblxuXHRcdFx0XHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEyLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9jdXJyZW50QXJyYXlDYW1lcmEgPSBudWxsO1xuXG5cdFx0XHRcdHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKSB7XG5cblx0XHRvYmplY3Qub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUsIF9jdXJyZW50QXJyYXlDYW1lcmEgfHwgY2FtZXJhICk7XG5cblx0XHRvYmplY3QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXHRcdG9iamVjdC5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCBvYmplY3QubW9kZWxWaWV3TWF0cml4ICk7XG5cblx0XHRpZiAoIG9iamVjdC5pc0ltbWVkaWF0ZVJlbmRlck9iamVjdCApIHtcblxuXHRcdFx0c3RhdGUuc2V0TWF0ZXJpYWwoIG1hdGVyaWFsICk7XG5cblx0XHRcdHZhciBwcm9ncmFtID0gc2V0UHJvZ3JhbSggY2FtZXJhLCBzY2VuZS5mb2csIG1hdGVyaWFsLCBvYmplY3QgKTtcblxuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0uZ2VvbWV0cnkgPSBudWxsO1xuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ucHJvZ3JhbSA9IG51bGw7XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHRcdFx0cmVuZGVyT2JqZWN0SW1tZWRpYXRlKCBvYmplY3QsIHByb2dyYW0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBzY2VuZS5mb2csIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0fVxuXG5cdFx0b2JqZWN0Lm9uQWZ0ZXJSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUsIF9jdXJyZW50QXJyYXlDYW1lcmEgfHwgY2FtZXJhICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZvZywgb2JqZWN0ICkge1xuXG5cdFx0dmFyIG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdFx0dmFyIGxpZ2h0cyA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5saWdodHM7XG5cdFx0dmFyIHNoYWRvd3NBcnJheSA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5zaGFkb3dzQXJyYXk7XG5cblx0XHR2YXIgbGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzLnN0YXRlLnZlcnNpb247XG5cblx0XHR2YXIgcGFyYW1ldGVycyA9IHByb2dyYW1DYWNoZS5nZXRQYXJhbWV0ZXJzKFxuXHRcdFx0bWF0ZXJpYWwsIGxpZ2h0cy5zdGF0ZSwgc2hhZG93c0FycmF5LCBmb2csIF9jbGlwcGluZy5udW1QbGFuZXMsIF9jbGlwcGluZy5udW1JbnRlcnNlY3Rpb24sIG9iamVjdCApO1xuXG5cdFx0dmFyIGNvZGUgPSBwcm9ncmFtQ2FjaGUuZ2V0UHJvZ3JhbUNvZGUoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICk7XG5cblx0XHR2YXIgcHJvZ3JhbSA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtO1xuXHRcdHZhciBwcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdGlmICggcHJvZ3JhbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBuZXcgbWF0ZXJpYWxcblx0XHRcdG1hdGVyaWFsLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHByb2dyYW0uY29kZSAhPT0gY29kZSApIHtcblxuXHRcdFx0Ly8gY2hhbmdlZCBnbHNsIG9yIHBhcmFtZXRlcnNcblx0XHRcdHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2UoIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uICE9PSBsaWdodHNTdGF0ZVZlcnNpb24gKSB7XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gPSBsaWdodHNTdGF0ZVZlcnNpb247XG5cblx0XHRcdHByb2dyYW1DaGFuZ2UgPSBmYWxzZTtcblxuXHRcdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMuc2hhZGVySUQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gc2FtZSBnbHNsIGFuZCB1bmlmb3JtIGxpc3Rcblx0XHRcdHJldHVybjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIG9ubHkgcmVidWlsZCB1bmlmb3JtIGxpc3Rcblx0XHRcdHByb2dyYW1DaGFuZ2UgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggcHJvZ3JhbUNoYW5nZSApIHtcblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRcdHZhciBzaGFkZXIgPSBTaGFkZXJMaWJbIHBhcmFtZXRlcnMuc2hhZGVySUQgXTtcblxuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1hdGVyaWFsLnR5cGUsXG5cdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIHNoYWRlci51bmlmb3JtcyApLFxuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjogc2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciA9IHtcblx0XHRcdFx0XHRuYW1lOiBtYXRlcmlhbC50eXBlLFxuXHRcdFx0XHRcdHVuaWZvcm1zOiBtYXRlcmlhbC51bmlmb3Jtcyxcblx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IG1hdGVyaWFsLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXJcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUoIG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIsIF90aGlzICk7XG5cblx0XHRcdC8vIENvbXB1dGluZyBjb2RlIGFnYWluIGFzIG9uQmVmb3JlQ29tcGlsZSBtYXkgaGF2ZSBjaGFuZ2VkIHRoZSBzaGFkZXJzXG5cdFx0XHRjb2RlID0gcHJvZ3JhbUNhY2hlLmdldFByb2dyYW1Db2RlKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApO1xuXG5cdFx0XHRwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKCBtYXRlcmlhbCwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciwgcGFyYW1ldGVycywgY29kZSApO1xuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0XHRtYXRlcmlhbC5wcm9ncmFtID0gcHJvZ3JhbTtcblxuXHRcdH1cblxuXHRcdHZhciBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IF90aGlzLm1heE1vcnBoVGFyZ2V0czsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIHByb2dyYW1BdHRyaWJ1dGVzWyAnbW9ycGhUYXJnZXQnICsgaSBdID49IDAgKSB7XG5cblx0XHRcdFx0XHRtYXRlcmlhbC5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1vcnBoTm9ybWFscyApIHtcblxuXHRcdFx0bWF0ZXJpYWwubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgX3RoaXMubWF4TW9ycGhOb3JtYWxzOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZXNbICdtb3JwaE5vcm1hbCcgKyBpIF0gPj0gMCApIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIudW5pZm9ybXM7XG5cblx0XHRpZiAoICEgbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJlxuXHRcdFx0ISBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsIHx8XG5cdFx0XHRtYXRlcmlhbC5jbGlwcGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzID0gX2NsaXBwaW5nLm51bVBsYW5lcztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gPSBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uO1xuXHRcdFx0dW5pZm9ybXMuY2xpcHBpbmdQbGFuZXMgPSBfY2xpcHBpbmcudW5pZm9ybTtcblxuXHRcdH1cblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5mb2cgPSBmb2c7XG5cblx0XHQvLyBzdG9yZSB0aGUgbGlnaHQgc2V0dXAgaXQgd2FzIGNyZWF0ZWQgZm9yXG5cblx0XHRtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzU3RhdGVWZXJzaW9uO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5saWdodHMgKSB7XG5cblx0XHRcdC8vIHdpcmUgdXAgdGhlIG1hdGVyaWFsIHRvIHRoaXMgcmVuZGVyZXIncyBsaWdodGluZyBzdGF0ZVxuXG5cdFx0XHR1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5hbWJpZW50O1xuXHRcdFx0dW5pZm9ybXMubGlnaHRQcm9iZS52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wcm9iZTtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsO1xuXHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90O1xuXHRcdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWE7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludDtcblx0XHRcdHVuaWZvcm1zLmhlbWlzcGhlcmVMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuaGVtaTtcblxuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeDtcblx0XHRcdHVuaWZvcm1zLnNwb3RTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdFNoYWRvd01hcDtcblx0XHRcdHVuaWZvcm1zLnNwb3RTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdFNoYWRvd01hdHJpeDtcblx0XHRcdHVuaWZvcm1zLnBvaW50U2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93TWFwO1xuXHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXRyaXg7XG5cdFx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogYWRkIGFyZWEgbGlnaHRzIHNoYWRvdyBpbmZvIHRvIHVuaWZvcm1zXG5cblx0XHR9XG5cblx0XHR2YXIgcHJvZ1VuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW0uZ2V0VW5pZm9ybXMoKSxcblx0XHRcdHVuaWZvcm1zTGlzdCA9XG5cdFx0XHRcdFdlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlKCBwcm9nVW5pZm9ybXMuc2VxLCB1bmlmb3JtcyApO1xuXG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9IHVuaWZvcm1zTGlzdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0UHJvZ3JhbSggY2FtZXJhLCBmb2csIG1hdGVyaWFsLCBvYmplY3QgKSB7XG5cblx0XHR0ZXh0dXJlcy5yZXNldFRleHR1cmVVbml0cygpO1xuXG5cdFx0dmFyIG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXHRcdHZhciBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXG5cdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkICkge1xuXG5cdFx0XHRpZiAoIF9sb2NhbENsaXBwaW5nRW5hYmxlZCB8fCBjYW1lcmEgIT09IF9jdXJyZW50Q2FtZXJhICkge1xuXG5cdFx0XHRcdHZhciB1c2VDYWNoZSA9XG5cdFx0XHRcdFx0Y2FtZXJhID09PSBfY3VycmVudENhbWVyYSAmJlxuXHRcdFx0XHRcdG1hdGVyaWFsLmlkID09PSBfY3VycmVudE1hdGVyaWFsSWQ7XG5cblx0XHRcdFx0Ly8gd2UgbWlnaHQgd2FudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCBzb21lIENsaXBwaW5nR3JvdXBcblx0XHRcdFx0Ly8gb2JqZWN0IGluc3RlYWQgb2YgdGhlIG1hdGVyaWFsLCBvbmNlIGl0IGJlY29tZXMgZmVhc2libGVcblx0XHRcdFx0Ly8gKCM4NDY1LCAjODM3OSlcblx0XHRcdFx0X2NsaXBwaW5nLnNldFN0YXRlKFxuXHRcdFx0XHRcdG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLCBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uLCBtYXRlcmlhbC5jbGlwU2hhZG93cyxcblx0XHRcdFx0XHRjYW1lcmEsIG1hdGVyaWFsUHJvcGVydGllcywgdXNlQ2FjaGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmZvZyAmJiBtYXRlcmlhbFByb3BlcnRpZXMuZm9nICE9PSBmb2cgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5saWdodHMgJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiAhPT0gbGlnaHRzLnN0YXRlLnZlcnNpb24gKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHQoIG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyAhPT0gX2NsaXBwaW5nLm51bVBsYW5lcyB8fFxuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uICE9PSBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uICkgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRpbml0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmb2csIG9iamVjdCApO1xuXHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHZhciByZWZyZXNoUHJvZ3JhbSA9IGZhbHNlO1xuXHRcdHZhciByZWZyZXNoTWF0ZXJpYWwgPSBmYWxzZTtcblx0XHR2YXIgcmVmcmVzaExpZ2h0cyA9IGZhbHNlO1xuXG5cdFx0dmFyIHByb2dyYW0gPSBtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbSxcblx0XHRcdHBfdW5pZm9ybXMgPSBwcm9ncmFtLmdldFVuaWZvcm1zKCksXG5cdFx0XHRtX3VuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlci51bmlmb3JtcztcblxuXHRcdGlmICggc3RhdGUudXNlUHJvZ3JhbSggcHJvZ3JhbS5wcm9ncmFtICkgKSB7XG5cblx0XHRcdHJlZnJlc2hQcm9ncmFtID0gdHJ1ZTtcblx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XG5cdFx0XHRyZWZyZXNoTGlnaHRzID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuaWQgIT09IF9jdXJyZW50TWF0ZXJpYWxJZCApIHtcblxuXHRcdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gbWF0ZXJpYWwuaWQ7XG5cblx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlZnJlc2hQcm9ncmFtIHx8IF9jdXJyZW50Q2FtZXJhICE9PSBjYW1lcmEgKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3Byb2plY3Rpb25NYXRyaXgnLCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2xvZ0RlcHRoQnVmRkMnLFxuXHRcdFx0XHRcdDIuMCAvICggTWF0aC5sb2coIGNhbWVyYS5mYXIgKyAxLjAgKSAvIE1hdGguTE4yICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIF9jdXJyZW50Q2FtZXJhICE9PSBjYW1lcmEgKSB7XG5cblx0XHRcdFx0X2N1cnJlbnRDYW1lcmEgPSBjYW1lcmE7XG5cblx0XHRcdFx0Ly8gbGlnaHRpbmcgdW5pZm9ybXMgZGVwZW5kIG9uIHRoZSBjYW1lcmEgc28gZW5mb3JjZSBhbiB1cGRhdGVcblx0XHRcdFx0Ly8gbm93LCBpbiBjYXNlIHRoaXMgbWF0ZXJpYWwgc3VwcG9ydHMgbGlnaHRzIC0gb3IgbGF0ZXIsIHdoZW5cblx0XHRcdFx0Ly8gdGhlIG5leHQgbWF0ZXJpYWwgdGhhdCBkb2VzIGdldHMgYWN0aXZhdGVkOlxuXG5cdFx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XHRcdC8vIHNldCB0byB0cnVlIG9uIG1hdGVyaWFsIGNoYW5nZVxuXHRcdFx0XHRyZWZyZXNoTGlnaHRzID0gdHJ1ZTtcdFx0Ly8gcmVtYWlucyBzZXQgdW50aWwgdXBkYXRlIGRvbmVcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBsb2FkIG1hdGVyaWFsIHNwZWNpZmljIHVuaWZvcm1zXG5cdFx0XHQvLyAoc2hhZGVyIG1hdGVyaWFsIGFsc28gZ2V0cyB0aGVtIGZvciB0aGUgc2FrZSBvZiBnZW5lcmljaXR5KVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmVudk1hcCApIHtcblxuXHRcdFx0XHR2YXIgdUNhbVBvcyA9IHBfdW5pZm9ybXMubWFwLmNhbWVyYVBvc2l0aW9uO1xuXG5cdFx0XHRcdGlmICggdUNhbVBvcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dUNhbVBvcy5zZXRWYWx1ZSggX2dsLFxuXHRcdFx0XHRcdFx0X3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoTGFtYmVydE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLnNraW5uaW5nICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3ZpZXdNYXRyaXgnLCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHNraW5uaW5nIHVuaWZvcm1zIG11c3QgYmUgc2V0IGV2ZW4gaWYgbWF0ZXJpYWwgZGlkbid0IGNoYW5nZVxuXHRcdC8vIGF1dG8tc2V0dGluZyBvZiB0ZXh0dXJlIHVuaXQgZm9yIGJvbmUgdGV4dHVyZSBtdXN0IGdvIGJlZm9yZSBvdGhlciB0ZXh0dXJlc1xuXHRcdC8vIG5vdCBzdXJlIHdoeSwgYnV0IG90aGVyd2lzZSB3ZWlyZCB0aGluZ3MgaGFwcGVuXG5cblx0XHRpZiAoIG1hdGVyaWFsLnNraW5uaW5nICkge1xuXG5cdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JpbmRNYXRyaXgnICk7XG5cdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JpbmRNYXRyaXhJbnZlcnNlJyApO1xuXG5cdFx0XHR2YXIgc2tlbGV0b24gPSBvYmplY3Quc2tlbGV0b247XG5cblx0XHRcdGlmICggc2tlbGV0b24gKSB7XG5cblx0XHRcdFx0dmFyIGJvbmVzID0gc2tlbGV0b24uYm9uZXM7XG5cblx0XHRcdFx0aWYgKCBjYXBhYmlsaXRpZXMuZmxvYXRWZXJ0ZXhUZXh0dXJlcyApIHtcblxuXHRcdFx0XHRcdGlmICggc2tlbGV0b24uYm9uZVRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbGF5b3V0ICgxIG1hdHJpeCA9IDQgcGl4ZWxzKVxuXHRcdFx0XHRcdFx0Ly8gICAgICBSR0JBIFJHQkEgUkdCQSBSR0JBICg9PiBjb2x1bW4xLCBjb2x1bW4yLCBjb2x1bW4zLCBjb2x1bW40KVxuXHRcdFx0XHRcdFx0Ly8gIHdpdGggIDh4OCAgcGl4ZWwgdGV4dHVyZSBtYXggICAxNiBib25lcyAqIDQgcGl4ZWxzID0gICg4ICogOClcblx0XHRcdFx0XHRcdC8vICAgICAgIDE2eDE2IHBpeGVsIHRleHR1cmUgbWF4ICAgNjQgYm9uZXMgKiA0IHBpeGVscyA9ICgxNiAqIDE2KVxuXHRcdFx0XHRcdFx0Ly8gICAgICAgMzJ4MzIgcGl4ZWwgdGV4dHVyZSBtYXggIDI1NiBib25lcyAqIDQgcGl4ZWxzID0gKDMyICogMzIpXG5cdFx0XHRcdFx0XHQvLyAgICAgICA2NHg2NCBwaXhlbCB0ZXh0dXJlIG1heCAxMDI0IGJvbmVzICogNCBwaXhlbHMgPSAoNjQgKiA2NClcblxuXG5cdFx0XHRcdFx0XHR2YXIgc2l6ZSA9IE1hdGguc3FydCggYm9uZXMubGVuZ3RoICogNCApOyAvLyA0IHBpeGVscyBuZWVkZWQgZm9yIDEgbWF0cml4XG5cdFx0XHRcdFx0XHRzaXplID0gX01hdGguY2VpbFBvd2VyT2ZUd28oIHNpemUgKTtcblx0XHRcdFx0XHRcdHNpemUgPSBNYXRoLm1heCggc2l6ZSwgNCApO1xuXG5cdFx0XHRcdFx0XHR2YXIgYm9uZU1hdHJpY2VzID0gbmV3IEZsb2F0MzJBcnJheSggc2l6ZSAqIHNpemUgKiA0ICk7IC8vIDQgZmxvYXRzIHBlciBSR0JBIHBpeGVsXG5cdFx0XHRcdFx0XHRib25lTWF0cmljZXMuc2V0KCBza2VsZXRvbi5ib25lTWF0cmljZXMgKTsgLy8gY29weSBjdXJyZW50IHZhbHVlc1xuXG5cdFx0XHRcdFx0XHR2YXIgYm9uZVRleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoIGJvbmVNYXRyaWNlcywgc2l6ZSwgc2l6ZSwgUkdCQUZvcm1hdCwgRmxvYXRUeXBlICk7XG5cdFx0XHRcdFx0XHRib25lVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdHNrZWxldG9uLmJvbmVNYXRyaWNlcyA9IGJvbmVNYXRyaWNlcztcblx0XHRcdFx0XHRcdHNrZWxldG9uLmJvbmVUZXh0dXJlID0gYm9uZVRleHR1cmU7XG5cdFx0XHRcdFx0XHRza2VsZXRvbi5ib25lVGV4dHVyZVNpemUgPSBzaXplO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnYm9uZVRleHR1cmUnLCBza2VsZXRvbi5ib25lVGV4dHVyZSwgdGV4dHVyZXMgKTtcblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZVNpemUnLCBza2VsZXRvbi5ib25lVGV4dHVyZVNpemUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBza2VsZXRvbiwgJ2JvbmVNYXRyaWNlcycgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcmVmcmVzaE1hdGVyaWFsICkge1xuXG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd0b25lTWFwcGluZ0V4cG9zdXJlJywgX3RoaXMudG9uZU1hcHBpbmdFeHBvc3VyZSApO1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdXaGl0ZVBvaW50JywgX3RoaXMudG9uZU1hcHBpbmdXaGl0ZVBvaW50ICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwubGlnaHRzICkge1xuXG5cdFx0XHRcdC8vIHRoZSBjdXJyZW50IG1hdGVyaWFsIHJlcXVpcmVzIGxpZ2h0aW5nIGluZm9cblxuXHRcdFx0XHQvLyBub3RlOiBhbGwgbGlnaHRpbmcgdW5pZm9ybXMgYXJlIGFsd2F5cyBzZXQgY29ycmVjdGx5XG5cdFx0XHRcdC8vIHRoZXkgc2ltcGx5IHJlZmVyZW5jZSB0aGUgcmVuZGVyZXIncyBzdGF0ZSBmb3IgdGhlaXJcblx0XHRcdFx0Ly8gdmFsdWVzXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIHVzZSB0aGUgY3VycmVudCBtYXRlcmlhbCdzIC5uZWVkc1VwZGF0ZSBmbGFncyB0byBzZXRcblx0XHRcdFx0Ly8gdGhlIEdMIHN0YXRlIHdoZW4gcmVxdWlyZWRcblxuXHRcdFx0XHRtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggbV91bmlmb3JtcywgcmVmcmVzaExpZ2h0cyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlZnJlc2ggdW5pZm9ybXMgY29tbW9uIHRvIHNldmVyYWwgbWF0ZXJpYWxzXG5cblx0XHRcdGlmICggZm9nICYmIG1hdGVyaWFsLmZvZyApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNGb2coIG1fdW5pZm9ybXMsIGZvZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zVG9vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUGhvbmcoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hNYXRjYXBNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hEZXB0aE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGVwdGgoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNOb3JtYWwoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTGluZUJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTGluZSggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzTGluZURhc2hlZE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGFzaCggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzUG9pbnRzTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUG9pbnRzKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU2hhZG93TWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0bV91bmlmb3Jtcy5jb2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdFx0XHRtX3VuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlY3RBcmVhTGlnaHQgVGV4dHVyZVxuXHRcdFx0Ly8gVE9ETyAobXJkb29iKTogRmluZCBhIG5pY2VyIGltcGxlbWVudGF0aW9uXG5cblx0XHRcdGlmICggbV91bmlmb3Jtcy5sdGNfMSAhPT0gdW5kZWZpbmVkICkgbV91bmlmb3Jtcy5sdGNfMS52YWx1ZSA9IFVuaWZvcm1zTGliLkxUQ18xO1xuXHRcdFx0aWYgKCBtX3VuaWZvcm1zLmx0Y18yICE9PSB1bmRlZmluZWQgKSBtX3VuaWZvcm1zLmx0Y18yLnZhbHVlID0gVW5pZm9ybXNMaWIuTFRDXzI7XG5cblx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZCggX2dsLCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0LCBtX3VuaWZvcm1zLCB0ZXh0dXJlcyApO1xuXHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU3ByaXRlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2NlbnRlcicsIG9iamVjdC5jZW50ZXIgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbW1vbiBtYXRyaWNlc1xuXG5cdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbW9kZWxWaWV3TWF0cml4Jywgb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ25vcm1hbE1hdHJpeCcsIG9iamVjdC5ub3JtYWxNYXRyaXggKTtcblx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdtb2RlbE1hdHJpeCcsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fVxuXG5cdC8vIFVuaWZvcm1zIChyZWZyZXNoIHVuaWZvcm1zIG9iamVjdHMpXG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdGlmICggbWF0ZXJpYWwuY29sb3IgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVudk1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwO1xuXG5cdFx0XHQvLyBkb24ndCBmbGlwIEN1YmVUZXh0dXJlIGVudk1hcHMsIGZsaXAgZXZlcnl0aGluZyBlbHNlOlxuXHRcdFx0Ly8gIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSB3aWxsIGJlIGZsaXBwZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHQvLyAgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgd2lsbCBiZSBmbGlwcGVkIGJlY2F1c2UgaXQncyBhIFRleHR1cmUgYW5kIE5PVCBhIEN1YmVUZXh0dXJlXG5cdFx0XHQvLyB0aGlzIGNoZWNrIG11c3QgYmUgaGFuZGxlZCBkaWZmZXJlbnRseSwgb3IgcmVtb3ZlZCBlbnRpcmVseSwgaWYgV2ViR0xSZW5kZXJUYXJnZXRDdWJlIHVzZXMgYSBDdWJlVGV4dHVyZSBpbiB0aGUgZnV0dXJlXG5cdFx0XHR1bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwLmlzQ3ViZVRleHR1cmUgPyAtIDEgOiAxO1xuXG5cdFx0XHR1bmlmb3Jtcy5yZWZsZWN0aXZpdHkudmFsdWUgPSBtYXRlcmlhbC5yZWZsZWN0aXZpdHk7XG5cdFx0XHR1bmlmb3Jtcy5yZWZyYWN0aW9uUmF0aW8udmFsdWUgPSBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHRcdHVuaWZvcm1zLm1heE1pcExldmVsLnZhbHVlID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsLmVudk1hcCApLl9fbWF4TWlwTGV2ZWw7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmxpZ2h0TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5saWdodE1hcC52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwO1xuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYW9NYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFvTWFwLnZhbHVlID0gbWF0ZXJpYWwuYW9NYXA7XG5cdFx0XHR1bmlmb3Jtcy5hb01hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzXG5cdFx0Ly8gMS4gY29sb3IgbWFwXG5cdFx0Ly8gMi4gc3BlY3VsYXIgbWFwXG5cdFx0Ly8gMy4gbm9ybWFsIG1hcFxuXHRcdC8vIDQuIGJ1bXAgbWFwXG5cdFx0Ly8gNS4gYWxwaGEgbWFwXG5cdFx0Ly8gNi4gZW1pc3NpdmUgbWFwXG5cblx0XHR2YXIgdXZTY2FsZU1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5zcGVjdWxhck1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5idW1wTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubWV0YWxuZXNzTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2U2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdGlmICggdXZTY2FsZU1hcC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdHV2U2NhbGVNYXAgPSB1dlNjYWxlTWFwLnRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1dlNjYWxlTWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dXZTY2FsZU1hcC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1dlNjYWxlTWFwLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNMaW5lKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rhc2goIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRhc2hTaXplLnZhbHVlID0gbWF0ZXJpYWwuZGFzaFNpemU7XG5cdFx0dW5pZm9ybXMudG90YWxTaXplLnZhbHVlID0gbWF0ZXJpYWwuZGFzaFNpemUgKyBtYXRlcmlhbC5nYXBTaXplO1xuXHRcdHVuaWZvcm1zLnNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuc2NhbGU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1BvaW50cyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnNpemUudmFsdWUgPSBtYXRlcmlhbC5zaXplICogX3BpeGVsUmF0aW87XG5cdFx0dW5pZm9ybXMuc2NhbGUudmFsdWUgPSBfaGVpZ2h0ICogMC41O1xuXG5cdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwubWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwubWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm1hcC5tYXRyaXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnJvdGF0aW9uLnZhbHVlID0gbWF0ZXJpYWwucm90YXRpb247XG5cdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwubWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwubWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm1hcC5tYXRyaXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRm9nKCB1bmlmb3JtcywgZm9nICkge1xuXG5cdFx0dW5pZm9ybXMuZm9nQ29sb3IudmFsdWUuY29weSggZm9nLmNvbG9yICk7XG5cblx0XHRpZiAoIGZvZy5pc0ZvZyApIHtcblxuXHRcdFx0dW5pZm9ybXMuZm9nTmVhci52YWx1ZSA9IGZvZy5uZWFyO1xuXHRcdFx0dW5pZm9ybXMuZm9nRmFyLnZhbHVlID0gZm9nLmZhcjtcblxuXHRcdH0gZWxzZSBpZiAoIGZvZy5pc0ZvZ0V4cDIgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmZvZ0RlbnNpdHkudmFsdWUgPSBmb2cuZGVuc2l0eTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTGFtYmVydCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUGhvbmcoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLnNwZWN1bGFyLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnNwZWN1bGFyICk7XG5cdFx0dW5pZm9ybXMuc2hpbmluZXNzLnZhbHVlID0gTWF0aC5tYXgoIG1hdGVyaWFsLnNoaW5pbmVzcywgMWUtNCApOyAvLyB0byBwcmV2ZW50IHBvdyggMC4wLCAwLjAgKVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zVG9vbiggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0cmVmcmVzaFVuaWZvcm1zUGhvbmcoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5ncmFkaWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZ3JhZGllbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5ncmFkaWVudE1hcDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLnJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnJvdWdobmVzcztcblx0XHR1bmlmb3Jtcy5tZXRhbG5lc3MudmFsdWUgPSBtYXRlcmlhbC5tZXRhbG5lc3M7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnJvdWdobmVzc01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMucm91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1ldGFsbmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzc01hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVudk1hcCApIHtcblxuXHRcdFx0Ly91bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXA7IC8vIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uXG5cdFx0XHR1bmlmb3Jtcy5lbnZNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRyZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR1bmlmb3Jtcy5yZWZsZWN0aXZpdHkudmFsdWUgPSBtYXRlcmlhbC5yZWZsZWN0aXZpdHk7IC8vIGFsc28gcGFydCBvZiB1bmlmb3JtcyBjb21tb25cblxuXHRcdHVuaWZvcm1zLmNsZWFyQ29hdC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyQ29hdDtcblx0XHR1bmlmb3Jtcy5jbGVhckNvYXRSb3VnaG5lc3MudmFsdWUgPSBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3M7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc01hdGNhcCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXRjYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1hdGNhcC52YWx1ZSA9IG1hdGVyaWFsLm1hdGNhcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGVwdGgoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0dW5pZm9ybXMucmVmZXJlbmNlUG9zaXRpb24udmFsdWUuY29weSggbWF0ZXJpYWwucmVmZXJlbmNlUG9zaXRpb24gKTtcblx0XHR1bmlmb3Jtcy5uZWFyRGlzdGFuY2UudmFsdWUgPSBtYXRlcmlhbC5uZWFyRGlzdGFuY2U7XG5cdFx0dW5pZm9ybXMuZmFyRGlzdGFuY2UudmFsdWUgPSBtYXRlcmlhbC5mYXJEaXN0YW5jZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTm9ybWFsKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIElmIHVuaWZvcm1zIGFyZSBtYXJrZWQgYXMgY2xlYW4sIHRoZXkgZG9uJ3QgbmVlZCB0byBiZSBsb2FkZWQgdG8gdGhlIEdQVS5cblxuXHRmdW5jdGlvbiBtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggdW5pZm9ybXMsIHZhbHVlICkge1xuXG5cdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5saWdodFByb2JlLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMuc3BvdExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnJlY3RBcmVhTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXG5cdH1cblxuXHQvL1xuXHR0aGlzLnNldEZyYW1lYnVmZmVyID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggX2ZyYW1lYnVmZmVyICE9PSB2YWx1ZSApIF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCB2YWx1ZSApO1xuXG5cdFx0X2ZyYW1lYnVmZmVyID0gdmFsdWU7XG5cblx0fTtcblxuXHR0aGlzLmdldEFjdGl2ZUN1YmVGYWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9jdXJyZW50QWN0aXZlQ3ViZUZhY2U7XG5cblx0fTtcblxuXHR0aGlzLmdldEFjdGl2ZU1pcG1hcExldmVsID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0fTtcblxuXHR0aGlzLmdldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGFjdGl2ZUN1YmVGYWNlLCBhY3RpdmVNaXBtYXBMZXZlbCApIHtcblxuXHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xuXHRcdF9jdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSBhY3RpdmVDdWJlRmFjZTtcblx0XHRfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCAmJiBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmVzLnNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHRcdHZhciBmcmFtZWJ1ZmZlciA9IF9mcmFtZWJ1ZmZlcjtcblx0XHR2YXIgaXNDdWJlID0gZmFsc2U7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0dmFyIF9fd2ViZ2xGcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICkge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyWyBhY3RpdmVDdWJlRmFjZSB8fCAwIF07XG5cdFx0XHRcdGlzQ3ViZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyZW50Vmlld3BvcnQuY29weSggcmVuZGVyVGFyZ2V0LnZpZXdwb3J0ICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggcmVuZGVyVGFyZ2V0LnNjaXNzb3IgKTtcblx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSByZW5kZXJUYXJnZXQuc2Npc3NvclRlc3Q7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdFx0X2N1cnJlbnRTY2lzc29yVGVzdCA9IF9zY2lzc29yVGVzdDtcblxuXHRcdH1cblxuXHRcdGlmICggX2N1cnJlbnRGcmFtZWJ1ZmZlciAhPT0gZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXHRcdFx0X2N1cnJlbnRGcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQgKTtcblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IgKTtcblx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdCggX2N1cnJlbnRTY2lzc29yVGVzdCApO1xuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgMzYwNjQsIDM0MDY5ICsgKCBhY3RpdmVDdWJlRmFjZSB8fCAwICksIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBhY3RpdmVNaXBtYXBMZXZlbCB8fCAwICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHMgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYnVmZmVyLCBhY3RpdmVDdWJlRmFjZUluZGV4ICkge1xuXG5cdFx0aWYgKCAhICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICYmIGFjdGl2ZUN1YmVGYWNlSW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0ZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2VJbmRleCBdO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0dmFyIHJlc3RvcmUgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBmcmFtZWJ1ZmZlciAhPT0gX2N1cnJlbnRGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRyZXN0b3JlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdHZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cdFx0XHRcdHZhciB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRcdHZhciB0ZXh0dXJlVHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmVGb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApICE9PSBfZ2wuZ2V0UGFyYW1ldGVyKCAzNTczOSApICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgZm9ybWF0LicgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGV4dHVyZVR5cGUgIT09IFVuc2lnbmVkQnl0ZVR5cGUgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSAhPT0gX2dsLmdldFBhcmFtZXRlciggMzU3MzggKSAmJiAvLyBJRTExLCBFZGdlIGFuZCBDaHJvbWUgTWFjIDwgNTIgKCM5NTEzKVxuXHRcdFx0XHRcdCEgKCB0ZXh0dXJlVHlwZSA9PT0gRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSApICYmIC8vIENocm9tZSBNYWMgPj0gNTIgYW5kIEZpcmVmb3hcblx0XHRcdFx0XHQhICggdGV4dHVyZVR5cGUgPT09IEhhbGZGbG9hdFR5cGUgJiYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPyBleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICkgOiBleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKSApICkgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFVuc2lnbmVkQnl0ZVR5cGUgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCB0eXBlLicgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggX2dsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoIDM2MTYwICkgPT09IDM2MDUzICkge1xuXG5cdFx0XHRcdFx0Ly8gdGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnQgZW5zdXJlcyB2YWxpZCByZWFkIHJlcXVlc3RzIChubyBvdXQtb2YtYm91bmRzIHBpeGVscywgc2VlICM4NjA0KVxuXG5cdFx0XHRcdFx0aWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHtcblxuXHRcdFx0XHRcdFx0X2dsLnJlYWRQaXhlbHMoIHgsIHksIHdpZHRoLCBoZWlnaHQsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSwgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlYWRQaXhlbHMgZnJvbSByZW5kZXJUYXJnZXQgZmFpbGVkLiBGcmFtZWJ1ZmZlciBub3QgY29tcGxldGUuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBmaW5hbGx5IHtcblxuXHRcdFx0XHRpZiAoIHJlc3RvcmUgKSB7XG5cblx0XHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgX2N1cnJlbnRGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5jb3B5RnJhbWVidWZmZXJUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHBvc2l0aW9uLCB0ZXh0dXJlLCBsZXZlbCApIHtcblxuXHRcdHZhciB3aWR0aCA9IHRleHR1cmUuaW1hZ2Uud2lkdGg7XG5cdFx0dmFyIGhlaWdodCA9IHRleHR1cmUuaW1hZ2UuaGVpZ2h0O1xuXHRcdHZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0ICk7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdF9nbC5jb3B5VGV4SW1hZ2UyRCggMzU1MywgbGV2ZWwgfHwgMCwgZ2xGb3JtYXQsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHdpZHRoLCBoZWlnaHQsIDAgKTtcblxuXHR9O1xuXG5cdHRoaXMuY29weVRleHR1cmVUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHBvc2l0aW9uLCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBsZXZlbCApIHtcblxuXHRcdHZhciB3aWR0aCA9IHNyY1RleHR1cmUuaW1hZ2Uud2lkdGg7XG5cdFx0dmFyIGhlaWdodCA9IHNyY1RleHR1cmUuaW1hZ2UuaGVpZ2h0O1xuXHRcdHZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUuZm9ybWF0ICk7XG5cdFx0dmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUudHlwZSApO1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEKCBkc3RUZXh0dXJlLCAwICk7XG5cblx0XHRpZiAoIHNyY1RleHR1cmUuaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0X2dsLnRleFN1YkltYWdlMkQoIDM1NTMsIGxldmVsIHx8IDAsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHdpZHRoLCBoZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIHNyY1RleHR1cmUuaW1hZ2UuZGF0YSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2dsLnRleFN1YkltYWdlMkQoIDM1NTMsIGxldmVsIHx8IDAsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIGdsRm9ybWF0LCBnbFR5cGUsIHNyY1RleHR1cmUuaW1hZ2UgKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdGlmICggdHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudCggbmV3IEN1c3RvbUV2ZW50KCAnb2JzZXJ2ZScsIHsgZGV0YWlsOiB0aGlzIH0gKSApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRm9nRXhwMiggY29sb3IsIGRlbnNpdHkgKSB7XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggY29sb3IgKTtcblx0dGhpcy5kZW5zaXR5ID0gKCBkZW5zaXR5ICE9PSB1bmRlZmluZWQgKSA/IGRlbnNpdHkgOiAwLjAwMDI1O1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZvZ0V4cDIucHJvdG90eXBlLCB7XG5cblx0aXNGb2dFeHAyOiB0cnVlLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IEZvZ0V4cDIoIHRoaXMuY29sb3IsIHRoaXMuZGVuc2l0eSApO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIC8qIG1ldGEgKi8gKSB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogJ0ZvZ0V4cDInLFxuXHRcdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXG5cdFx0XHRkZW5zaXR5OiB0aGlzLmRlbnNpdHlcblx0XHR9O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZvZyggY29sb3IsIG5lYXIsIGZhciApIHtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXG5cdHRoaXMubmVhciA9ICggbmVhciAhPT0gdW5kZWZpbmVkICkgPyBuZWFyIDogMTtcblx0dGhpcy5mYXIgPSAoIGZhciAhPT0gdW5kZWZpbmVkICkgPyBmYXIgOiAxMDAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZvZy5wcm90b3R5cGUsIHtcblxuXHRpc0ZvZzogdHJ1ZSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBGb2coIHRoaXMuY29sb3IsIHRoaXMubmVhciwgdGhpcy5mYXIgKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCAvKiBtZXRhICovICkge1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6ICdGb2cnLFxuXHRcdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXG5cdFx0XHRuZWFyOiB0aGlzLm5lYXIsXG5cdFx0XHRmYXI6IHRoaXMuZmFyXG5cdFx0fTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnRlcmxlYXZlZEJ1ZmZlciggYXJyYXksIHN0cmlkZSApIHtcblxuXHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cdHRoaXMuc3RyaWRlID0gc3RyaWRlO1xuXHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHN0cmlkZSA6IDA7XG5cblx0dGhpcy5keW5hbWljID0gZmFsc2U7XG5cdHRoaXMudXBkYXRlUmFuZ2UgPSB7IG9mZnNldDogMCwgY291bnQ6IC0gMSB9O1xuXG5cdHRoaXMudmVyc2lvbiA9IDA7XG5cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUsICduZWVkc1VwZGF0ZScsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUsIHtcblxuXHRpc0ludGVybGVhdmVkQnVmZmVyOiB0cnVlLFxuXG5cdG9uVXBsb2FkQ2FsbGJhY2s6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdHNldEFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHRoaXMuc3RyaWRlIDogMDtcblx0XHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldER5bmFtaWM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmR5bmFtaWMgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmFycmF5ID0gbmV3IHNvdXJjZS5hcnJheS5jb25zdHJ1Y3Rvciggc291cmNlLmFycmF5ICk7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLnN0cmlkZSA9IHNvdXJjZS5zdHJpZGU7XG5cdFx0dGhpcy5keW5hbWljID0gc291cmNlLmR5bmFtaWM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlBdDogZnVuY3Rpb24gKCBpbmRleDEsIGF0dHJpYnV0ZSwgaW5kZXgyICkge1xuXG5cdFx0aW5kZXgxICo9IHRoaXMuc3RyaWRlO1xuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuc3RyaWRlO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5zdHJpZGU7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlLCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRvblVwbG9hZDogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKi9cblxuZnVuY3Rpb24gSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGludGVybGVhdmVkQnVmZmVyLCBpdGVtU2l6ZSwgb2Zmc2V0LCBub3JtYWxpemVkICkge1xuXG5cdHRoaXMuZGF0YSA9IGludGVybGVhdmVkQnVmZmVyO1xuXHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cdHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuXG5cdHRoaXMubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQgPT09IHRydWU7XG5cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xuXG5cdGNvdW50OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5jb3VudDtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGFycmF5OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0aXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZTogdHJ1ZSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIGluZGV4LCB4ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCBdID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WTogZnVuY3Rpb24gKCBpbmRleCwgeSApIHtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIGluZGV4LCB6ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFc6IGZ1bmN0aW9uICggaW5kZXgsIHcgKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0WDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF07XG5cblx0fSxcblxuXHRnZXRZOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF07XG5cblx0fSxcblxuXHRnZXRaOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyIF07XG5cblx0fSxcblxuXHRnZXRXOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF07XG5cblx0fSxcblxuXHRzZXRYWTogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ID0gaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WFlaOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWVpXOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgcm90YXRpb246IDxmbG9hdD4sXG4gKiAgc2l6ZUF0dGVudWF0aW9uOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBTcHJpdGVNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwcml0ZU1hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5yb3RhdGlvbiA9IDA7XG5cblx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSB0cnVlO1xuXG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcHJpdGVNYXRlcmlhbDtcblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5pc1Nwcml0ZU1hdGVyaWFsID0gdHJ1ZTtcblxuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5yb3RhdGlvbiA9IHNvdXJjZS5yb3RhdGlvbjtcblxuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHNvdXJjZS5zaXplQXR0ZW51YXRpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxudmFyIGdlb21ldHJ5O1xuXG5mdW5jdGlvbiBTcHJpdGUoIG1hdGVyaWFsICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU3ByaXRlJztcblxuXHRpZiAoIGdlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0dmFyIGZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIFtcblx0XHRcdC0gMC41LCAtIDAuNSwgMCwgMCwgMCxcblx0XHRcdDAuNSwgLSAwLjUsIDAsIDEsIDAsXG5cdFx0XHQwLjUsIDAuNSwgMCwgMSwgMSxcblx0XHRcdC0gMC41LCAwLjUsIDAsIDAsIDFcblx0XHRdICk7XG5cblx0XHR2YXIgaW50ZXJsZWF2ZWRCdWZmZXIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoIGZsb2F0MzJBcnJheSwgNSApO1xuXG5cdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIFsgMCwgMSwgMixcdDAsIDIsIDMgXSApO1xuXHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMywgMCwgZmFsc2UgKSApO1xuXHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMiwgMywgZmFsc2UgKSApO1xuXG5cdH1cblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdHRoaXMubWF0ZXJpYWwgPSAoIG1hdGVyaWFsICE9PSB1bmRlZmluZWQgKSA/IG1hdGVyaWFsIDogbmV3IFNwcml0ZU1hdGVyaWFsKCk7XG5cblx0dGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMiggMC41LCAwLjUgKTtcblxufVxuXG5TcHJpdGUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU3ByaXRlLFxuXG5cdGlzU3ByaXRlOiB0cnVlLFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludGVyc2VjdFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgd29ybGRTY2FsZSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG12UG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIGFsaWduZWRQb3NpdGlvbiA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dmFyIHJvdGF0ZWRQb3NpdGlvbiA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dmFyIHZpZXdXb3JsZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHR2YXIgdkEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2QiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZDID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB1dkEgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkIgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkMgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0ZnVuY3Rpb24gdHJhbnNmb3JtVmVydGV4KCB2ZXJ0ZXhQb3NpdGlvbiwgbXZQb3NpdGlvbiwgY2VudGVyLCBzY2FsZSwgc2luLCBjb3MgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGUgcG9zaXRpb24gaW4gY2FtZXJhIHNwYWNlXG5cdFx0XHRhbGlnbmVkUG9zaXRpb24uc3ViVmVjdG9ycyggdmVydGV4UG9zaXRpb24sIGNlbnRlciApLmFkZFNjYWxhciggMC41ICkubXVsdGlwbHkoIHNjYWxlICk7XG5cblx0XHRcdC8vIHRvIGNoZWNrIGlmIHJvdGF0aW9uIGlzIG5vdCB6ZXJvXG5cdFx0XHRpZiAoIHNpbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJvdGF0ZWRQb3NpdGlvbi54ID0gKCBjb3MgKiBhbGlnbmVkUG9zaXRpb24ueCApIC0gKCBzaW4gKiBhbGlnbmVkUG9zaXRpb24ueSApO1xuXHRcdFx0XHRyb3RhdGVkUG9zaXRpb24ueSA9ICggc2luICogYWxpZ25lZFBvc2l0aW9uLnggKSArICggY29zICogYWxpZ25lZFBvc2l0aW9uLnkgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyb3RhdGVkUG9zaXRpb24uY29weSggYWxpZ25lZFBvc2l0aW9uICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHR2ZXJ0ZXhQb3NpdGlvbi5jb3B5KCBtdlBvc2l0aW9uICk7XG5cdFx0XHR2ZXJ0ZXhQb3NpdGlvbi54ICs9IHJvdGF0ZWRQb3NpdGlvbi54O1xuXHRcdFx0dmVydGV4UG9zaXRpb24ueSArPSByb3RhdGVkUG9zaXRpb24ueTtcblxuXHRcdFx0Ly8gdHJhbnNmb3JtIHRvIHdvcmxkIHNwYWNlXG5cdFx0XHR2ZXJ0ZXhQb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdXb3JsZE1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdFx0d29ybGRTY2FsZS5zZXRGcm9tTWF0cml4U2NhbGUoIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdFx0dmlld1dvcmxkTWF0cml4LmNvcHkoIHJheWNhc3Rlci5fY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCByYXljYXN0ZXIuX2NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdFx0bXZQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubW9kZWxWaWV3TWF0cml4ICk7XG5cblx0XHRcdGlmICggcmF5Y2FzdGVyLl9jYW1lcmEuaXNQZXJzcGVjdGl2ZUNhbWVyYSAmJiB0aGlzLm1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0d29ybGRTY2FsZS5tdWx0aXBseVNjYWxhciggLSBtdlBvc2l0aW9uLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcm90YXRpb24gPSB0aGlzLm1hdGVyaWFsLnJvdGF0aW9uO1xuXHRcdFx0dmFyIHNpbiwgY29zO1xuXHRcdFx0aWYgKCByb3RhdGlvbiAhPT0gMCApIHtcblxuXHRcdFx0XHRjb3MgPSBNYXRoLmNvcyggcm90YXRpb24gKTtcblx0XHRcdFx0c2luID0gTWF0aC5zaW4oIHJvdGF0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGNlbnRlciA9IHRoaXMuY2VudGVyO1xuXG5cdFx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIHZBLnNldCggLSAwLjUsIC0gMC41LCAwICksIG12UG9zaXRpb24sIGNlbnRlciwgd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdHRyYW5zZm9ybVZlcnRleCggdkIuc2V0KCAwLjUsIC0gMC41LCAwICksIG12UG9zaXRpb24sIGNlbnRlciwgd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdHRyYW5zZm9ybVZlcnRleCggdkMuc2V0KCAwLjUsIDAuNSwgMCApLCBtdlBvc2l0aW9uLCBjZW50ZXIsIHdvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cblx0XHRcdHV2QS5zZXQoIDAsIDAgKTtcblx0XHRcdHV2Qi5zZXQoIDEsIDAgKTtcblx0XHRcdHV2Qy5zZXQoIDEsIDEgKTtcblxuXHRcdFx0Ly8gY2hlY2sgZmlyc3QgdHJpYW5nbGVcblx0XHRcdHZhciBpbnRlcnNlY3QgPSByYXljYXN0ZXIucmF5LmludGVyc2VjdFRyaWFuZ2xlKCB2QSwgdkIsIHZDLCBmYWxzZSwgaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdFx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gY2hlY2sgc2Vjb25kIHRyaWFuZ2xlXG5cdFx0XHRcdHRyYW5zZm9ybVZlcnRleCggdkIuc2V0KCAtIDAuNSwgMC41LCAwICksIG12UG9zaXRpb24sIGNlbnRlciwgd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdFx0dXZCLnNldCggMCwgMSApO1xuXG5cdFx0XHRcdGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHZBLCB2QywgdkIsIGZhbHNlLCBpbnRlcnNlY3RQb2ludCApO1xuXHRcdFx0XHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybjtcblxuXHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRwb2ludDogaW50ZXJzZWN0UG9pbnQuY2xvbmUoKSxcblx0XHRcdFx0dXY6IFRyaWFuZ2xlLmdldFVWKCBpbnRlcnNlY3RQb2ludCwgdkEsIHZCLCB2QywgdXZBLCB1dkIsIHV2QywgbmV3IFZlY3RvcjIoKSApLFxuXHRcdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdFx0fSApO1xuXG5cdFx0fTtcblxuXHR9KCkgKSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdGlmICggc291cmNlLmNlbnRlciAhPT0gdW5kZWZpbmVkICkgdGhpcy5jZW50ZXIuY29weSggc291cmNlLmNlbnRlciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTE9EKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTE9EJztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcywge1xuXHRcdGxldmVsczoge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBbXVxuXHRcdH1cblx0fSApO1xuXG5cdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cbn1cblxuTE9ELnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExPRCxcblxuXHRpc0xPRDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgZmFsc2UgKTtcblxuXHRcdHZhciBsZXZlbHMgPSBzb3VyY2UubGV2ZWxzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmFkZExldmVsKCBsZXZlbC5vYmplY3QuY2xvbmUoKSwgbGV2ZWwuZGlzdGFuY2UgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkTGV2ZWw6IGZ1bmN0aW9uICggb2JqZWN0LCBkaXN0YW5jZSApIHtcblxuXHRcdGlmICggZGlzdGFuY2UgPT09IHVuZGVmaW5lZCApIGRpc3RhbmNlID0gMDtcblxuXHRcdGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG5cblx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRmb3IgKCB2YXIgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBsIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGxldmVscy5zcGxpY2UoIGwsIDAsIHsgZGlzdGFuY2U6IGRpc3RhbmNlLCBvYmplY3Q6IG9iamVjdCB9ICk7XG5cblx0XHR0aGlzLmFkZCggb2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldE9iamVjdEZvckRpc3RhbmNlOiBmdW5jdGlvbiAoIGRpc3RhbmNlICkge1xuXG5cdFx0dmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGlmICggZGlzdGFuY2UgPCBsZXZlbHNbIGkgXS5kaXN0YW5jZSApIHtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxldmVsc1sgaSAtIDEgXS5vYmplY3Q7XG5cblx0fSxcblxuXHRyYXljYXN0OiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBtYXRyaXhQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0XHRtYXRyaXhQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggbWF0cml4UG9zaXRpb24gKTtcblxuXHRcdFx0dGhpcy5nZXRPYmplY3RGb3JEaXN0YW5jZSggZGlzdGFuY2UgKS5yYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKTtcblxuXHRcdH07XG5cblx0fSgpICksXG5cblx0dXBkYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCBjYW1lcmEgKSB7XG5cblx0XHRcdHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdFx0aWYgKCBsZXZlbHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0XHR2MS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2Mi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR2YXIgZGlzdGFuY2UgPSB2MS5kaXN0YW5jZVRvKCB2MiApO1xuXG5cdFx0XHRcdGxldmVsc1sgMCBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPj0gbGV2ZWxzWyBpIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0XHRcdGxldmVsc1sgaSAtIDEgXS5vYmplY3QudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0bGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IE9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3QubGV2ZWxzID0gW107XG5cblx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGxldmVsID0gbGV2ZWxzWyBpIF07XG5cblx0XHRcdGRhdGEub2JqZWN0LmxldmVscy5wdXNoKCB7XG5cdFx0XHRcdG9iamVjdDogbGV2ZWwub2JqZWN0LnV1aWQsXG5cdFx0XHRcdGRpc3RhbmNlOiBsZXZlbC5kaXN0YW5jZVxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIGlrZXJyIC8gaHR0cDovL3Zlcm9sZC5jb21cbiAqL1xuXG5mdW5jdGlvbiBTa2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Ta2lubmVkTWVzaCBubyBsb25nZXIgc3VwcG9ydHMgVEhSRUUuR2VvbWV0cnkuIFVzZSBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblxuXHR9XG5cblx0TWVzaC5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2tpbm5lZE1lc2gnO1xuXG5cdHRoaXMuYmluZE1vZGUgPSAnYXR0YWNoZWQnO1xuXHR0aGlzLmJpbmRNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxufVxuXG5Ta2lubmVkTWVzaC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBNZXNoLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNraW5uZWRNZXNoLFxuXG5cdGlzU2tpbm5lZE1lc2g6IHRydWUsXG5cblx0YmluZDogZnVuY3Rpb24gKCBza2VsZXRvbiwgYmluZE1hdHJpeCApIHtcblxuXHRcdHRoaXMuc2tlbGV0b24gPSBza2VsZXRvbjtcblxuXHRcdGlmICggYmluZE1hdHJpeCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdHRoaXMuc2tlbGV0b24uY2FsY3VsYXRlSW52ZXJzZXMoKTtcblxuXHRcdFx0YmluZE1hdHJpeCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJpbmRNYXRyaXguY29weSggYmluZE1hdHJpeCApO1xuXHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggYmluZE1hdHJpeCApO1xuXG5cdH0sXG5cblx0cG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5za2VsZXRvbi5wb3NlKCk7XG5cblx0fSxcblxuXHRub3JtYWxpemVTa2luV2VpZ2h0czogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3I0KCk7XG5cblx0XHR2YXIgc2tpbldlaWdodCA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc2tpbldlaWdodC5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZlY3Rvci54ID0gc2tpbldlaWdodC5nZXRYKCBpICk7XG5cdFx0XHR2ZWN0b3IueSA9IHNraW5XZWlnaHQuZ2V0WSggaSApO1xuXHRcdFx0dmVjdG9yLnogPSBza2luV2VpZ2h0LmdldFooIGkgKTtcblx0XHRcdHZlY3Rvci53ID0gc2tpbldlaWdodC5nZXRXKCBpICk7XG5cblx0XHRcdHZhciBzY2FsZSA9IDEuMCAvIHZlY3Rvci5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHRcdFx0aWYgKCBzY2FsZSAhPT0gSW5maW5pdHkgKSB7XG5cblx0XHRcdFx0dmVjdG9yLm11bHRpcGx5U2NhbGFyKCBzY2FsZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZlY3Rvci5zZXQoIDEsIDAsIDAsIDAgKTsgLy8gZG8gc29tZXRoaW5nIHJlYXNvbmFibGVcblxuXHRcdFx0fVxuXG5cdFx0XHRza2luV2VpZ2h0LnNldFhZWlcoIGksIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnosIHZlY3Rvci53ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHRcdE1lc2gucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0XHRpZiAoIHRoaXMuYmluZE1vZGUgPT09ICdhdHRhY2hlZCcgKSB7XG5cblx0XHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5iaW5kTW9kZSA9PT0gJ2RldGFjaGVkJyApIHtcblxuXHRcdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLmJpbmRNYXRyaXggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNraW5uZWRNZXNoOiBVbnJlY29nbml6ZWQgYmluZE1vZGU6ICcgKyB0aGlzLmJpbmRNb2RlICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWNoYWVsIGd1ZXJyZXJvIC8gaHR0cDovL3JlYWxpdHltZWx0ZG93bi5jb21cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICovXG5cbmZ1bmN0aW9uIFNrZWxldG9uKCBib25lcywgYm9uZUludmVyc2VzICkge1xuXG5cdC8vIGNvcHkgdGhlIGJvbmUgYXJyYXlcblxuXHRib25lcyA9IGJvbmVzIHx8IFtdO1xuXG5cdHRoaXMuYm9uZXMgPSBib25lcy5zbGljZSggMCApO1xuXHR0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIHRoaXMuYm9uZXMubGVuZ3RoICogMTYgKTtcblxuXHQvLyB1c2UgdGhlIHN1cHBsaWVkIGJvbmUgaW52ZXJzZXMgb3IgY2FsY3VsYXRlIHRoZSBpbnZlcnNlc1xuXG5cdGlmICggYm9uZUludmVyc2VzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aGlzLmNhbGN1bGF0ZUludmVyc2VzKCk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggdGhpcy5ib25lcy5sZW5ndGggPT09IGJvbmVJbnZlcnNlcy5sZW5ndGggKSB7XG5cblx0XHRcdHRoaXMuYm9uZUludmVyc2VzID0gYm9uZUludmVyc2VzLnNsaWNlKCAwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbiBib25lSW52ZXJzZXMgaXMgdGhlIHdyb25nIGxlbmd0aC4nICk7XG5cblx0XHRcdHRoaXMuYm9uZUludmVyc2VzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBTa2VsZXRvbi5wcm90b3R5cGUsIHtcblxuXHRjYWxjdWxhdGVJbnZlcnNlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRcdGlmICggdGhpcy5ib25lc1sgaSBdICkge1xuXG5cdFx0XHRcdGludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5ib25lc1sgaSBdLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMucHVzaCggaW52ZXJzZSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0cG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJvbmUsIGksIGlsO1xuXG5cdFx0Ly8gcmVjb3ZlciB0aGUgYmluZC10aW1lIHdvcmxkIG1hdHJpY2VzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgKSB7XG5cblx0XHRcdFx0Ym9uZS5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKCB0aGlzLmJvbmVJbnZlcnNlc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGNvbXB1dGUgdGhlIGxvY2FsIG1hdHJpY2VzLCBwb3NpdGlvbnMsIHJvdGF0aW9ucyBhbmQgc2NhbGVzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgKSB7XG5cblx0XHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0XHRib25lLm1hdHJpeC5nZXRJbnZlcnNlKCBib25lLnBhcmVudC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHRcdGJvbmUubWF0cml4Lm11bHRpcGx5KCBib25lLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmNvcHkoIGJvbmUubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ym9uZS5tYXRyaXguZGVjb21wb3NlKCBib25lLnBvc2l0aW9uLCBib25lLnF1YXRlcm5pb24sIGJvbmUuc2NhbGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXRNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciBpZGVudGl0eU1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0XHR2YXIgYm9uZXMgPSB0aGlzLmJvbmVzO1xuXHRcdFx0dmFyIGJvbmVJbnZlcnNlcyA9IHRoaXMuYm9uZUludmVyc2VzO1xuXHRcdFx0dmFyIGJvbmVNYXRyaWNlcyA9IHRoaXMuYm9uZU1hdHJpY2VzO1xuXHRcdFx0dmFyIGJvbmVUZXh0dXJlID0gdGhpcy5ib25lVGV4dHVyZTtcblxuXHRcdFx0Ly8gZmxhdHRlbiBib25lIG1hdHJpY2VzIHRvIGFycmF5XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHQvLyBjb21wdXRlIHRoZSBvZmZzZXQgYmV0d2VlbiB0aGUgY3VycmVudCBhbmQgdGhlIG9yaWdpbmFsIHRyYW5zZm9ybVxuXG5cdFx0XHRcdHZhciBtYXRyaXggPSBib25lc1sgaSBdID8gYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCA6IGlkZW50aXR5TWF0cml4O1xuXG5cdFx0XHRcdG9mZnNldE1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXgsIGJvbmVJbnZlcnNlc1sgaSBdICk7XG5cdFx0XHRcdG9mZnNldE1hdHJpeC50b0FycmF5KCBib25lTWF0cmljZXMsIGkgKiAxNiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYm9uZVRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRib25lVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgU2tlbGV0b24oIHRoaXMuYm9uZXMsIHRoaXMuYm9uZUludmVyc2VzICk7XG5cblx0fSxcblxuXHRnZXRCb25lQnlOYW1lOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZS5uYW1lID09PSBuYW1lICkge1xuXG5cdFx0XHRcdHJldHVybiBib25lO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXG4gKi9cblxuZnVuY3Rpb24gQm9uZSgpIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0JvbmUnO1xuXG59XG5cbkJvbmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQm9uZSxcblxuXHRpc0JvbmU6IHRydWVcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGxpbmV3aWR0aDogPGZsb2F0PixcbiAqICBsaW5lY2FwOiBcInJvdW5kXCIsXG4gKiAgbGluZWpvaW46IFwicm91bmRcIlxuICogfVxuICovXG5cbmZ1bmN0aW9uIExpbmVCYXNpY01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUJhc2ljTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cblx0dGhpcy5saW5ld2lkdGggPSAxO1xuXHR0aGlzLmxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLmxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaW5lQmFzaWNNYXRlcmlhbDtcblxuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmlzTGluZUJhc2ljTWF0ZXJpYWwgPSB0cnVlO1xuXG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0dGhpcy5saW5ld2lkdGggPSBzb3VyY2UubGluZXdpZHRoO1xuXHR0aGlzLmxpbmVjYXAgPSBzb3VyY2UubGluZWNhcDtcblx0dGhpcy5saW5lam9pbiA9IHNvdXJjZS5saW5lam9pbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCwgbW9kZSApIHtcblxuXHRpZiAoIG1vZGUgPT09IDEgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTGluZTogcGFyYW1ldGVyIFRIUkVFLkxpbmVQaWVjZXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNlIFRIUkVFLkxpbmVTZWdtZW50cyBpbnN0ZWFkLicgKTtcblxuXHR9XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7XG5cbn1cblxuTGluZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lLFxuXG5cdGlzTGluZTogdHJ1ZSxcblxuXHRjb21wdXRlTGluZURpc3RhbmNlczogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBlbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBbIDAgXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0c3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgLSAxICk7XG5cdFx0XHRcdFx0XHRlbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblxuXHRcdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSArPSBzdGFydC5kaXN0YW5jZVRvKCBlbmQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBnZW9tZXRyeS5saW5lRGlzdGFuY2VzO1xuXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIDAgXSA9IDA7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdICs9IHZlcnRpY2VzWyBpIC0gMSBdLmRpc3RhbmNlVG8oIHZlcnRpY2VzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciByYXkgPSBuZXcgUmF5KCk7XG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRcdHZhciBwcmVjaXNpb24gPSByYXljYXN0ZXIubGluZVByZWNpc2lvbjtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdFx0c3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblx0XHRcdHNwaGVyZS5yYWRpdXMgKz0gcHJlY2lzaW9uO1xuXG5cdFx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpbnZlcnNlTWF0cml4LmdldEludmVyc2UoIG1hdHJpeFdvcmxkICk7XG5cdFx0XHRyYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0XHR2YXIgbG9jYWxQcmVjaXNpb24gPSBwcmVjaXNpb24gLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0XHR2YXIgbG9jYWxQcmVjaXNpb25TcSA9IGxvY2FsUHJlY2lzaW9uICogbG9jYWxQcmVjaXNpb247XG5cblx0XHRcdHZhciB2U3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIHZFbmQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIGludGVyU2VnbWVudCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgaW50ZXJSYXkgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIHN0ZXAgPSAoIHRoaXMgJiYgdGhpcy5pc0xpbmVTZWdtZW50cyApID8gMiA6IDE7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdFx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcblxuXHRcdFx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGEgPSBpbmRpY2VzWyBpIF07XG5cdFx0XHRcdFx0XHR2YXIgYiA9IGluZGljZXNbIGkgKyAxIF07XG5cblx0XHRcdFx0XHRcdHZTdGFydC5mcm9tQXJyYXkoIHBvc2l0aW9ucywgYSAqIDMgKTtcblx0XHRcdFx0XHRcdHZFbmQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGIgKiAzICk7XG5cblx0XHRcdFx0XHRcdHZhciBkaXN0U3EgPSByYXkuZGlzdGFuY2VTcVRvU2VnbWVudCggdlN0YXJ0LCB2RW5kLCBpbnRlclJheSwgaW50ZXJTZWdtZW50ICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGlzdFNxID4gbG9jYWxQcmVjaXNpb25TcSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXG5cdFx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOyBpIDwgbDsgaSArPSBzdGVwICkge1xuXG5cdFx0XHRcdFx0XHR2U3RhcnQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIDMgKiBpICk7XG5cdFx0XHRcdFx0XHR2RW5kLmZyb21BcnJheSggcG9zaXRpb25zLCAzICogaSArIDMgKTtcblxuXHRcdFx0XHRcdFx0dmFyIGRpc3RTcSA9IHJheS5kaXN0YW5jZVNxVG9TZWdtZW50KCB2U3RhcnQsIHZFbmQsIGludGVyUmF5LCBpbnRlclNlZ21lbnQgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkaXN0U3EgPiBsb2NhbFByZWNpc2lvblNxICkgY29udGludWU7XG5cblx0XHRcdFx0XHRcdGludGVyUmF5LmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cblxuXHRcdFx0XHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJSYXkgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdFx0XHRcdC8vIFdoYXQgZG8gd2Ugd2FudD8gaW50ZXJzZWN0aW9uIHBvaW50IG9uIHRoZSByYXkgb3Igb24gdGhlIHNlZ21lbnQ/P1xuXHRcdFx0XHRcdFx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcblx0XHRcdFx0XHRcdFx0cG9pbnQ6IGludGVyU2VnbWVudC5jbG9uZSgpLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApLFxuXHRcdFx0XHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRcdFx0ZmFjZUluZGV4OiBudWxsLFxuXHRcdFx0XHRcdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHRcdFx0dmFyIG5iVmVydGljZXMgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbmJWZXJ0aWNlcyAtIDE7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRcdHZhciBkaXN0U3EgPSByYXkuZGlzdGFuY2VTcVRvU2VnbWVudCggdmVydGljZXNbIGkgXSwgdmVydGljZXNbIGkgKyAxIF0sIGludGVyUmF5LCBpbnRlclNlZ21lbnQgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdFNxID4gbG9jYWxQcmVjaXNpb25TcSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0aW50ZXJSYXkuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7IC8vTW92ZSBiYWNrIHRvIHdvcmxkIHNwYWNlIGZvciBkaXN0YW5jZSBjYWxjdWxhdGlvblxuXG5cdFx0XHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJSYXkgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdC8vIHBvaW50OiByYXljYXN0ZXIucmF5LmF0KCBkaXN0YW5jZSApLFxuXHRcdFx0XHRcdFx0cG9pbnQ6IGludGVyU2VnbWVudC5jbG9uZSgpLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApLFxuXHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0XHRcdFx0ZmFjZUluZGV4OiBudWxsLFxuXHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lU2VnbWVudHMnO1xuXG59XG5cbkxpbmVTZWdtZW50cy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaW5lLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExpbmVTZWdtZW50cyxcblxuXHRpc0xpbmVTZWdtZW50czogdHJ1ZSxcblxuXHRjb21wdXRlTGluZURpc3RhbmNlczogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBlbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHRcdFx0XHRzdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXHRcdFx0XHRcdFx0ZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApO1xuXG5cdFx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gPSAoIGkgPT09IDAgKSA/IDAgOiBsaW5lRGlzdGFuY2VzWyBpIC0gMSBdO1xuXHRcdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSArIDEgXSA9IGxpbmVEaXN0YW5jZXNbIGkgXSArIHN0YXJ0LmRpc3RhbmNlVG8oIGVuZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnbGluZURpc3RhbmNlJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGxpbmVEaXN0YW5jZXMsIDEgKSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lU2VnbWVudHMuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKTogQ29tcHV0YXRpb24gb25seSBwb3NzaWJsZSB3aXRoIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5LicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cdFx0XHRcdHZhciBsaW5lRGlzdGFuY2VzID0gZ2VvbWV0cnkubGluZURpc3RhbmNlcztcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7XG5cblx0XHRcdFx0XHRzdGFydC5jb3B5KCB2ZXJ0aWNlc1sgaSBdICk7XG5cdFx0XHRcdFx0ZW5kLmNvcHkoIHZlcnRpY2VzWyBpICsgMSBdICk7XG5cblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gPSAoIGkgPT09IDAgKSA/IDAgOiBsaW5lRGlzdGFuY2VzWyBpIC0gMSBdO1xuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgKyAxIF0gPSBsaW5lRGlzdGFuY2VzWyBpIF0gKyBzdGFydC5kaXN0YW5jZVRvKCBlbmQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSApXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1ncmV0ZXIgLyBodHRwOi8vZ2l0aHViLmNvbS9tZ3JldGVyXG4gKi9cblxuZnVuY3Rpb24gTGluZUxvb3AoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lTG9vcCc7XG5cbn1cblxuTGluZUxvb3AucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGluZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lTG9vcCxcblxuXHRpc0xpbmVMb29wOiB0cnVlLFxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIHNpemU6IDxmbG9hdD4sXG4gKiAgc2l6ZUF0dGVudWF0aW9uOiA8Ym9vbD5cbiAqXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBQb2ludHNNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BvaW50c01hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLnNpemUgPSAxO1xuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuUG9pbnRzTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb2ludHNNYXRlcmlhbDtcblxuUG9pbnRzTWF0ZXJpYWwucHJvdG90eXBlLmlzUG9pbnRzTWF0ZXJpYWwgPSB0cnVlO1xuXG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuc2l6ZSA9IHNvdXJjZS5zaXplO1xuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHNvdXJjZS5zaXplQXR0ZW51YXRpb247XG5cblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2ludHMnO1xuXG5cdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkID8gZ2VvbWV0cnkgOiBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbCA6IG5ldyBQb2ludHNNYXRlcmlhbCggeyBjb2xvcjogTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmIH0gKTtcblxuXHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG59XG5cblBvaW50cy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQb2ludHMsXG5cblx0aXNQb2ludHM6IHRydWUsXG5cblx0cmF5Y2FzdDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW52ZXJzZU1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dmFyIHJheSA9IG5ldyBSYXkoKTtcblx0XHR2YXIgc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdFx0dmFyIG9iamVjdCA9IHRoaXM7XG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdFx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblx0XHRcdHZhciB0aHJlc2hvbGQgPSByYXljYXN0ZXIucGFyYW1zLlBvaW50cy50aHJlc2hvbGQ7XG5cblx0XHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdFx0c3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblx0XHRcdHNwaGVyZS5yYWRpdXMgKz0gdGhyZXNob2xkO1xuXG5cdFx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpbnZlcnNlTWF0cml4LmdldEludmVyc2UoIG1hdHJpeFdvcmxkICk7XG5cdFx0XHRyYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0XHR2YXIgbG9jYWxUaHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0XHR2YXIgbG9jYWxUaHJlc2hvbGRTcSA9IGxvY2FsVGhyZXNob2xkICogbG9jYWxUaHJlc2hvbGQ7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIGludGVyc2VjdFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0ZnVuY3Rpb24gdGVzdFBvaW50KCBwb2ludCwgaW5kZXggKSB7XG5cblx0XHRcdFx0dmFyIHJheVBvaW50RGlzdGFuY2VTcSA9IHJheS5kaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKTtcblxuXHRcdFx0XHRpZiAoIHJheVBvaW50RGlzdGFuY2VTcSA8IGxvY2FsVGhyZXNob2xkU3EgKSB7XG5cblx0XHRcdFx0XHRyYXkuY2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIGludGVyc2VjdFBvaW50ICk7XG5cdFx0XHRcdFx0aW50ZXJzZWN0UG9pbnQuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VUb1JheTogTWF0aC5zcXJ0KCByYXlQb2ludERpc3RhbmNlU3EgKSxcblx0XHRcdFx0XHRcdHBvaW50OiBpbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxuXHRcdFx0XHRcdFx0aW5kZXg6IGluZGV4LFxuXHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRcdG9iamVjdDogb2JqZWN0XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdFx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcblxuXHRcdFx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgYSA9IGluZGljZXNbIGkgXTtcblxuXHRcdFx0XHRcdFx0cG9zaXRpb24uZnJvbUFycmF5KCBwb3NpdGlvbnMsIGEgKiAzICk7XG5cblx0XHRcdFx0XHRcdHRlc3RQb2ludCggcG9zaXRpb24sIGEgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRwb3NpdGlvbi5mcm9tQXJyYXkoIHBvc2l0aW9ucywgaSAqIDMgKTtcblxuXHRcdFx0XHRcdFx0dGVzdFBvaW50KCBwb3NpdGlvbiwgaSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dGVzdFBvaW50KCB2ZXJ0aWNlc1sgaSBdLCBpICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0czogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHR2YXIgbSwgbWwsIG5hbWU7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cdFx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXlzWyAwIF0gXTtcblxuXHRcdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cblx0XHRcdFx0XHRmb3IgKCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0bmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApO1xuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkICYmIG1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qb2ludHMudXBkYXRlTW9ycGhUYXJnZXRzKCkgZG9lcyBub3Qgc3VwcG9ydCBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gVmlkZW9UZXh0dXJlKCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBSR0JGb3JtYXQ7XG5cblx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcblx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1hZ0ZpbHRlciA6IExpbmVhckZpbHRlcjtcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG59XG5cblZpZGVvVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFZpZGVvVGV4dHVyZSxcblxuXHRpc1ZpZGVvVGV4dHVyZTogdHJ1ZSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2aWRlbyA9IHRoaXMuaW1hZ2U7XG5cblx0XHRpZiAoIHZpZGVvLnJlYWR5U3RhdGUgPj0gdmlkZW8uSEFWRV9DVVJSRU5UX0RBVEEgKSB7XG5cblx0XHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gQ29tcHJlc3NlZFRleHR1cmUoIG1pcG1hcHMsIHdpZHRoLCBoZWlnaHQsIGZvcm1hdCwgdHlwZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICk7XG5cblx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXHR0aGlzLm1pcG1hcHMgPSBtaXBtYXBzO1xuXG5cdC8vIG5vIGZsaXBwaW5nIGZvciBjdWJlIHRleHR1cmVzXG5cdC8vIChhbHNvIGZsaXBwaW5nIGRvZXNuJ3Qgd29yayBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlcyApXG5cblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXG5cdC8vIGNhbid0IGdlbmVyYXRlIG1pcG1hcHMgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXNcblx0Ly8gbWlwcyBtdXN0IGJlIGVtYmVkZGVkIGluIEREUyBmaWxlc1xuXG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cbn1cblxuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbXByZXNzZWRUZXh0dXJlO1xuXG5Db21wcmVzc2VkVGV4dHVyZS5wcm90b3R5cGUuaXNDb21wcmVzc2VkVGV4dHVyZSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDYW52YXNUZXh0dXJlKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIGNhbnZhcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbn1cblxuQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDYW52YXNUZXh0dXJlO1xuQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUuaXNDYW52YXNUZXh0dXJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIE1hdHQgRGVzTGF1cmllcnMgLyBAbWF0dGRlc2xcbiAqIEBhdXRob3IgYXRpeCAvIGFydGh1cnNpbGJlci5kZVxuICovXG5cbmZ1bmN0aW9uIERlcHRoVGV4dHVyZSggd2lkdGgsIGhlaWdodCwgdHlwZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgYW5pc290cm9weSwgZm9ybWF0ICkge1xuXG5cdGZvcm1hdCA9IGZvcm1hdCAhPT0gdW5kZWZpbmVkID8gZm9ybWF0IDogRGVwdGhGb3JtYXQ7XG5cblx0aWYgKCBmb3JtYXQgIT09IERlcHRoRm9ybWF0ICYmIGZvcm1hdCAhPT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnRGVwdGhUZXh0dXJlIGZvcm1hdCBtdXN0IGJlIGVpdGhlciBUSFJFRS5EZXB0aEZvcm1hdCBvciBUSFJFRS5EZXB0aFN0ZW5jaWxGb3JtYXQnICk7XG5cblx0fVxuXG5cdGlmICggdHlwZSA9PT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRTaG9ydFR5cGU7XG5cdGlmICggdHlwZSA9PT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkgdHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTtcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIG51bGwsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdHRoaXMuaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHR0aGlzLmdlbmVyYXRlTWlwbWFwc1x0PSBmYWxzZTtcblxufVxuXG5EZXB0aFRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEZXB0aFRleHR1cmU7XG5EZXB0aFRleHR1cmUucHJvdG90eXBlLmlzRGVwdGhUZXh0dXJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBXaXJlZnJhbWVHZW9tZXRyeSggZ2VvbWV0cnkgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdXaXJlZnJhbWVHZW9tZXRyeSc7XG5cblx0Ly8gYnVmZmVyXG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBpLCBqLCBsLCBvLCBvbDtcblx0dmFyIGVkZ2UgPSBbIDAsIDAgXSwgZWRnZXMgPSB7fSwgZSwgZWRnZTEsIGVkZ2UyO1xuXHR2YXIga2V5LCBrZXlzID0gWyAnYScsICdiJywgJ2MnIF07XG5cdHZhciB2ZXJ0ZXg7XG5cblx0Ly8gZGlmZmVyZW50IGxvZ2ljIGZvciBHZW9tZXRyeSBhbmQgQnVmZmVyR2VvbWV0cnlcblxuXHRpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHQvLyBjcmVhdGUgYSBkYXRhIHN0cnVjdHVyZSB0aGF0IGNvbnRhaW5zIGFsbCBlZGdlcyB3aXRob3V0IGR1cGxpY2F0ZXNcblxuXHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRcdGZvciAoIGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRlZGdlMSA9IGZhY2VbIGtleXNbIGogXSBdO1xuXHRcdFx0XHRlZGdlMiA9IGZhY2VbIGtleXNbICggaiArIDEgKSAlIDMgXSBdO1xuXHRcdFx0XHRlZGdlWyAwIF0gPSBNYXRoLm1pbiggZWRnZTEsIGVkZ2UyICk7IC8vIHNvcnRpbmcgcHJldmVudHMgZHVwbGljYXRlc1xuXHRcdFx0XHRlZGdlWyAxIF0gPSBNYXRoLm1heCggZWRnZTEsIGVkZ2UyICk7XG5cblx0XHRcdFx0a2V5ID0gZWRnZVsgMCBdICsgJywnICsgZWRnZVsgMSBdO1xuXG5cdFx0XHRcdGlmICggZWRnZXNbIGtleSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRlZGdlc1sga2V5IF0gPSB7IGluZGV4MTogZWRnZVsgMCBdLCBpbmRleDI6IGVkZ2VbIDEgXSB9O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXNcblxuXHRcdGZvciAoIGtleSBpbiBlZGdlcyApIHtcblxuXHRcdFx0ZSA9IGVkZ2VzWyBrZXkgXTtcblxuXHRcdFx0dmVydGV4ID0gZ2VvbWV0cnkudmVydGljZXNbIGUuaW5kZXgxIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdHZlcnRleCA9IGdlb21ldHJ5LnZlcnRpY2VzWyBlLmluZGV4MiBdO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSBpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgcG9zaXRpb24sIGluZGljZXMsIGdyb3Vwcztcblx0XHR2YXIgZ3JvdXAsIHN0YXJ0LCBjb3VudDtcblx0XHR2YXIgaW5kZXgxLCBpbmRleDI7XG5cblx0XHR2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gaW5kZXhlZCBCdWZmZXJHZW9tZXRyeVxuXG5cdFx0XHRwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRpbmRpY2VzID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRcdGlmICggZ3JvdXBzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRncm91cHMgPSBbIHsgc3RhcnQ6IDAsIGNvdW50OiBpbmRpY2VzLmNvdW50LCBtYXRlcmlhbEluZGV4OiAwIH0gXTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjcmVhdGUgYSBkYXRhIHN0cnVjdHVyZSB0aGF0IGNvbnRhaW5zIGFsbCBlZ2VzIHdpdGhvdXQgZHVwbGljYXRlc1xuXG5cdFx0XHRmb3IgKCBvID0gMCwgb2wgPSBncm91cHMubGVuZ3RoOyBvIDwgb2w7ICsrIG8gKSB7XG5cblx0XHRcdFx0Z3JvdXAgPSBncm91cHNbIG8gXTtcblxuXHRcdFx0XHRzdGFydCA9IGdyb3VwLnN0YXJ0O1xuXHRcdFx0XHRjb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRcdGZvciAoIGkgPSBzdGFydCwgbCA9ICggc3RhcnQgKyBjb3VudCApOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0Zm9yICggaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRlZGdlMSA9IGluZGljZXMuZ2V0WCggaSArIGogKTtcblx0XHRcdFx0XHRcdGVkZ2UyID0gaW5kaWNlcy5nZXRYKCBpICsgKCBqICsgMSApICUgMyApO1xuXHRcdFx0XHRcdFx0ZWRnZVsgMCBdID0gTWF0aC5taW4oIGVkZ2UxLCBlZGdlMiApOyAvLyBzb3J0aW5nIHByZXZlbnRzIGR1cGxpY2F0ZXNcblx0XHRcdFx0XHRcdGVkZ2VbIDEgXSA9IE1hdGgubWF4KCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0XHRcdFx0a2V5ID0gZWRnZVsgMCBdICsgJywnICsgZWRnZVsgMSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGVkZ2VzWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdGVkZ2VzWyBrZXkgXSA9IHsgaW5kZXgxOiBlZGdlWyAwIF0sIGluZGV4MjogZWRnZVsgMSBdIH07XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXNcblxuXHRcdFx0Zm9yICgga2V5IGluIGVkZ2VzICkge1xuXG5cdFx0XHRcdGUgPSBlZGdlc1sga2V5IF07XG5cblx0XHRcdFx0dmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBlLmluZGV4MSApO1xuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0dmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBlLmluZGV4MiApO1xuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5XG5cblx0XHRcdHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSAoIHBvc2l0aW9uLmNvdW50IC8gMyApOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHQvLyB0aHJlZSBlZGdlcyBwZXIgdHJpYW5nbGUsIGFuIGVkZ2UgaXMgcmVwcmVzZW50ZWQgYXMgKGluZGV4MSwgaW5kZXgyKVxuXHRcdFx0XHRcdC8vIGUuZy4gdGhlIGZpcnN0IHRyaWFuZ2xlIGhhcyB0aGUgZm9sbG93aW5nIGVkZ2VzOiAoMCwxKSwoMSwyKSwoMiwwKVxuXG5cdFx0XHRcdFx0aW5kZXgxID0gMyAqIGkgKyBqO1xuXHRcdFx0XHRcdHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgxICk7XG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdFx0aW5kZXgyID0gMyAqIGkgKyAoICggaiArIDEgKSAlIDMgKTtcblx0XHRcdFx0XHR2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MiApO1xuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblxufVxuXG5XaXJlZnJhbWVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbldpcmVmcmFtZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdpcmVmcmFtZUdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHBzOi8vZ2l0aHViLmNvbS96ejg1XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICpcbiAqIFBhcmFtZXRyaWMgU3VyZmFjZXMgR2VvbWV0cnlcbiAqIGJhc2VkIG9uIHRoZSBicmlsbGlhbnQgYXJ0aWNsZSBieSBAcHJpZGVvdXQgaHR0cDovL3ByaWRlb3V0Lm5ldC9ibG9nLz9wPTQ0XG4gKi9cblxuLy8gUGFyYW1ldHJpY0dlb21ldHJ5XG5cbmZ1bmN0aW9uIFBhcmFtZXRyaWNHZW9tZXRyeSggZnVuYywgc2xpY2VzLCBzdGFja3MgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQYXJhbWV0cmljR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRmdW5jOiBmdW5jLFxuXHRcdHNsaWNlczogc2xpY2VzLFxuXHRcdHN0YWNrczogc3RhY2tzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkoIGZ1bmMsIHNsaWNlcywgc3RhY2tzICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuUGFyYW1ldHJpY0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuUGFyYW1ldHJpY0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcmFtZXRyaWNHZW9tZXRyeTtcblxuLy8gUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSggZnVuYywgc2xpY2VzLCBzdGFja3MgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRmdW5jOiBmdW5jLFxuXHRcdHNsaWNlczogc2xpY2VzLFxuXHRcdHN0YWNrczogc3RhY2tzXG5cdH07XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0dmFyIEVQUyA9IDAuMDAwMDE7XG5cblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIHAwID0gbmV3IFZlY3RvcjMoKSwgcDEgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgcHUgPSBuZXcgVmVjdG9yMygpLCBwdiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGksIGo7XG5cblx0aWYgKCBmdW5jLmxlbmd0aCA8IDMgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUGFyYW1ldHJpY0dlb21ldHJ5OiBGdW5jdGlvbiBtdXN0IG5vdyBtb2RpZnkgYSBWZWN0b3IzIGFzIHRoaXJkIHBhcmFtZXRlci4nICk7XG5cblx0fVxuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHR2YXIgc2xpY2VDb3VudCA9IHNsaWNlcyArIDE7XG5cblx0Zm9yICggaSA9IDA7IGkgPD0gc3RhY2tzOyBpICsrICkge1xuXG5cdFx0dmFyIHYgPSBpIC8gc3RhY2tzO1xuXG5cdFx0Zm9yICggaiA9IDA7IGogPD0gc2xpY2VzOyBqICsrICkge1xuXG5cdFx0XHR2YXIgdSA9IGogLyBzbGljZXM7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRmdW5jKCB1LCB2LCBwMCApO1xuXHRcdFx0dmVydGljZXMucHVzaCggcDAueCwgcDAueSwgcDAueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0Ly8gYXBwcm94aW1hdGUgdGFuZ2VudCB2ZWN0b3JzIHZpYSBmaW5pdGUgZGlmZmVyZW5jZXNcblxuXHRcdFx0aWYgKCB1IC0gRVBTID49IDAgKSB7XG5cblx0XHRcdFx0ZnVuYyggdSAtIEVQUywgdiwgcDEgKTtcblx0XHRcdFx0cHUuc3ViVmVjdG9ycyggcDAsIHAxICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZnVuYyggdSArIEVQUywgdiwgcDEgKTtcblx0XHRcdFx0cHUuc3ViVmVjdG9ycyggcDEsIHAwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2IC0gRVBTID49IDAgKSB7XG5cblx0XHRcdFx0ZnVuYyggdSwgdiAtIEVQUywgcDEgKTtcblx0XHRcdFx0cHYuc3ViVmVjdG9ycyggcDAsIHAxICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZnVuYyggdSwgdiArIEVQUywgcDEgKTtcblx0XHRcdFx0cHYuc3ViVmVjdG9ycyggcDEsIHAwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY3Jvc3MgcHJvZHVjdCBvZiB0YW5nZW50IHZlY3RvcnMgcmV0dXJucyBzdXJmYWNlIG5vcm1hbFxuXG5cdFx0XHRub3JtYWwuY3Jvc3NWZWN0b3JzKCBwdSwgcHYgKS5ub3JtYWxpemUoKTtcblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggdSwgdiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0Zm9yICggaSA9IDA7IGkgPCBzdGFja3M7IGkgKysgKSB7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8IHNsaWNlczsgaiArKyApIHtcblxuXHRcdFx0dmFyIGEgPSBpICogc2xpY2VDb3VudCArIGo7XG5cdFx0XHR2YXIgYiA9IGkgKiBzbGljZUNvdW50ICsgaiArIDE7XG5cdFx0XHR2YXIgYyA9ICggaSArIDEgKSAqIHNsaWNlQ291bnQgKyBqICsgMTtcblx0XHRcdHZhciBkID0gKCBpICsgMSApICogc2xpY2VDb3VudCArIGo7XG5cblx0XHRcdC8vIGZhY2VzIG9uZSBhbmQgdHdvXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5QYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5QYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgY2xvY2t3b3JrZ2VlayAvIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG9ja3dvcmtnZWVrXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gUG9seWhlZHJvbkdlb21ldHJ5XG5cbmZ1bmN0aW9uIFBvbHloZWRyb25HZW9tZXRyeSggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUG9seWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0dmVydGljZXM6IHZlcnRpY2VzLFxuXHRcdGluZGljZXM6IGluZGljZXMsXG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbHloZWRyb25HZW9tZXRyeTtcblxuLy8gUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0dmVydGljZXM6IHZlcnRpY2VzLFxuXHRcdGluZGljZXM6IGluZGljZXMsXG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0ZGV0YWlsID0gZGV0YWlsIHx8IDA7XG5cblx0Ly8gZGVmYXVsdCBidWZmZXIgZGF0YVxuXG5cdHZhciB2ZXJ0ZXhCdWZmZXIgPSBbXTtcblx0dmFyIHV2QnVmZmVyID0gW107XG5cblx0Ly8gdGhlIHN1YmRpdmlzaW9uIGNyZWF0ZXMgdGhlIHZlcnRleCBidWZmZXIgZGF0YVxuXG5cdHN1YmRpdmlkZSggZGV0YWlsICk7XG5cblx0Ly8gYWxsIHZlcnRpY2VzIHNob3VsZCBsaWUgb24gYSBjb25jZXB0dWFsIHNwaGVyZSB3aXRoIGEgZ2l2ZW4gcmFkaXVzXG5cblx0YXBwbHlSYWRpdXMoIHJhZGl1cyApO1xuXG5cdC8vIGZpbmFsbHksIGNyZWF0ZSB0aGUgdXYgZGF0YVxuXG5cdGdlbmVyYXRlVVZzKCk7XG5cblx0Ly8gYnVpbGQgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlciwgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlci5zbGljZSgpLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkJ1ZmZlciwgMiApICk7XG5cblx0aWYgKCBkZXRhaWwgPT09IDAgKSB7XG5cblx0XHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7IC8vIGZsYXQgbm9ybWFsc1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTsgLy8gc21vb3RoIG5vcm1hbHNcblxuXHR9XG5cblx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIHN1YmRpdmlkZSggZGV0YWlsICkge1xuXG5cdFx0dmFyIGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBiID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgYyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIGZhY2VzIGFuZCBhcHBseSBhIHN1YmRpdmlzb24gd2l0aCB0aGUgZ2l2ZW4gZGV0YWlsIHZhbHVlXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHQvLyBnZXQgdGhlIHZlcnRpY2VzIG9mIHRoZSBmYWNlXG5cblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAwIF0sIGEgKTtcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAxIF0sIGIgKTtcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAyIF0sIGMgKTtcblxuXHRcdFx0Ly8gcGVyZm9ybSBzdWJkaXZpc2lvblxuXG5cdFx0XHRzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICkge1xuXG5cdFx0dmFyIGNvbHMgPSBNYXRoLnBvdyggMiwgZGV0YWlsICk7XG5cblx0XHQvLyB3ZSB1c2UgdGhpcyBtdWx0aWRpbWVuc2lvbmFsIGFycmF5IGFzIGEgZGF0YSBzdHJ1Y3R1cmUgZm9yIGNyZWF0aW5nIHRoZSBzdWJkaXZpc2lvblxuXG5cdFx0dmFyIHYgPSBbXTtcblxuXHRcdHZhciBpLCBqO1xuXG5cdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgdmVydGljZXMgZm9yIHRoaXMgc3ViZGl2aXNpb25cblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IGNvbHM7IGkgKysgKSB7XG5cblx0XHRcdHZbIGkgXSA9IFtdO1xuXG5cdFx0XHR2YXIgYWogPSBhLmNsb25lKCkubGVycCggYywgaSAvIGNvbHMgKTtcblx0XHRcdHZhciBiaiA9IGIuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXG5cdFx0XHR2YXIgcm93cyA9IGNvbHMgLSBpO1xuXG5cdFx0XHRmb3IgKCBqID0gMDsgaiA8PSByb3dzOyBqICsrICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gMCAmJiBpID09PSBjb2xzICkge1xuXG5cdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhajtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhai5jbG9uZSgpLmxlcnAoIGJqLCBqIC8gcm93cyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgZmFjZXNcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgY29sczsgaSArKyApIHtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPCAyICogKCBjb2xzIC0gaSApIC0gMTsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgayA9IE1hdGguZmxvb3IoIGogLyAyICk7XG5cblx0XHRcdFx0aWYgKCBqICUgMiA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayBdICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpICsgMSBdWyBrIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYXBwbHlSYWRpdXMoIHJhZGl1cyApIHtcblxuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgYnVmZmVyIGFuZCBhcHBseSB0aGUgcmFkaXVzIHRvIGVhY2ggdmVydGV4XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0dmVydGV4LnkgPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF07XG5cdFx0XHR2ZXJ0ZXgueiA9IHZlcnRleEJ1ZmZlclsgaSArIDIgXTtcblxuXHRcdFx0dmVydGV4Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCByYWRpdXMgKTtcblxuXHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMCBdID0gdmVydGV4Lng7XG5cdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0gPSB2ZXJ0ZXgueTtcblx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDIgXSA9IHZlcnRleC56O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdHZlcnRleC55ID0gdmVydGV4QnVmZmVyWyBpICsgMSBdO1xuXHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdHZhciB1ID0gYXppbXV0aCggdmVydGV4ICkgLyAyIC8gTWF0aC5QSSArIDAuNTtcblx0XHRcdHZhciB2ID0gaW5jbGluYXRpb24oIHZlcnRleCApIC8gTWF0aC5QSSArIDAuNTtcblx0XHRcdHV2QnVmZmVyLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHR9XG5cblx0XHRjb3JyZWN0VVZzKCk7XG5cblx0XHRjb3JyZWN0U2VhbSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjb3JyZWN0U2VhbSgpIHtcblxuXHRcdC8vIGhhbmRsZSBjYXNlIHdoZW4gZmFjZSBzdHJhZGRsZXMgdGhlIHNlYW0sIHNlZSAjMzI2OVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdXZCdWZmZXIubGVuZ3RoOyBpICs9IDYgKSB7XG5cblx0XHRcdC8vIHV2IGRhdGEgb2YgYSBzaW5nbGUgZmFjZVxuXG5cdFx0XHR2YXIgeDAgPSB1dkJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdHZhciB4MSA9IHV2QnVmZmVyWyBpICsgMiBdO1xuXHRcdFx0dmFyIHgyID0gdXZCdWZmZXJbIGkgKyA0IF07XG5cblx0XHRcdHZhciBtYXggPSBNYXRoLm1heCggeDAsIHgxLCB4MiApO1xuXHRcdFx0dmFyIG1pbiA9IE1hdGgubWluKCB4MCwgeDEsIHgyICk7XG5cblx0XHRcdC8vIDAuOSBpcyBzb21ld2hhdCBhcmJpdHJhcnlcblxuXHRcdFx0aWYgKCBtYXggPiAwLjkgJiYgbWluIDwgMC4xICkge1xuXG5cdFx0XHRcdGlmICggeDAgPCAwLjIgKSB1dkJ1ZmZlclsgaSArIDAgXSArPSAxO1xuXHRcdFx0XHRpZiAoIHgxIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAyIF0gKz0gMTtcblx0XHRcdFx0aWYgKCB4MiA8IDAuMiApIHV2QnVmZmVyWyBpICsgNCBdICs9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFZlcnRleCggdmVydGV4ICkge1xuXG5cdFx0dmVydGV4QnVmZmVyLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VmVydGV4QnlJbmRleCggaW5kZXgsIHZlcnRleCApIHtcblxuXHRcdHZhciBzdHJpZGUgPSBpbmRleCAqIDM7XG5cblx0XHR2ZXJ0ZXgueCA9IHZlcnRpY2VzWyBzdHJpZGUgKyAwIF07XG5cdFx0dmVydGV4LnkgPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMSBdO1xuXHRcdHZlcnRleC56ID0gdmVydGljZXNbIHN0cmlkZSArIDIgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gY29ycmVjdFVWcygpIHtcblxuXHRcdHZhciBhID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgYiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIGNlbnRyb2lkID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB1dkEgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkIgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkMgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gOSwgaiArPSA2ICkge1xuXG5cdFx0XHRhLnNldCggdmVydGV4QnVmZmVyWyBpICsgMCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0sIHZlcnRleEJ1ZmZlclsgaSArIDIgXSApO1xuXHRcdFx0Yi5zZXQoIHZlcnRleEJ1ZmZlclsgaSArIDMgXSwgdmVydGV4QnVmZmVyWyBpICsgNCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA1IF0gKTtcblx0XHRcdGMuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyA2IF0sIHZlcnRleEJ1ZmZlclsgaSArIDcgXSwgdmVydGV4QnVmZmVyWyBpICsgOCBdICk7XG5cblx0XHRcdHV2QS5zZXQoIHV2QnVmZmVyWyBqICsgMCBdLCB1dkJ1ZmZlclsgaiArIDEgXSApO1xuXHRcdFx0dXZCLnNldCggdXZCdWZmZXJbIGogKyAyIF0sIHV2QnVmZmVyWyBqICsgMyBdICk7XG5cdFx0XHR1dkMuc2V0KCB1dkJ1ZmZlclsgaiArIDQgXSwgdXZCdWZmZXJbIGogKyA1IF0gKTtcblxuXHRcdFx0Y2VudHJvaWQuY29weSggYSApLmFkZCggYiApLmFkZCggYyApLmRpdmlkZVNjYWxhciggMyApO1xuXG5cdFx0XHR2YXIgYXppID0gYXppbXV0aCggY2VudHJvaWQgKTtcblxuXHRcdFx0Y29ycmVjdFVWKCB1dkEsIGogKyAwLCBhLCBhemkgKTtcblx0XHRcdGNvcnJlY3RVViggdXZCLCBqICsgMiwgYiwgYXppICk7XG5cdFx0XHRjb3JyZWN0VVYoIHV2QywgaiArIDQsIGMsIGF6aSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb3JyZWN0VVYoIHV2LCBzdHJpZGUsIHZlY3RvciwgYXppbXV0aCApIHtcblxuXHRcdGlmICggKCBhemltdXRoIDwgMCApICYmICggdXYueCA9PT0gMSApICkge1xuXG5cdFx0XHR1dkJ1ZmZlclsgc3RyaWRlIF0gPSB1di54IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggKCB2ZWN0b3IueCA9PT0gMCApICYmICggdmVjdG9yLnogPT09IDAgKSApIHtcblxuXHRcdFx0dXZCdWZmZXJbIHN0cmlkZSBdID0gYXppbXV0aCAvIDIgLyBNYXRoLlBJICsgMC41O1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBBbmdsZSBhcm91bmQgdGhlIFkgYXhpcywgY291bnRlci1jbG9ja3dpc2Ugd2hlbiBsb29raW5nIGZyb20gYWJvdmUuXG5cblx0ZnVuY3Rpb24gYXppbXV0aCggdmVjdG9yICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYXRhbjIoIHZlY3Rvci56LCAtIHZlY3Rvci54ICk7XG5cblx0fVxuXG5cblx0Ly8gQW5nbGUgYWJvdmUgdGhlIFhaIHBsYW5lLlxuXG5cdGZ1bmN0aW9uIGluY2xpbmF0aW9uKCB2ZWN0b3IgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hdGFuMiggLSB2ZWN0b3IueSwgTWF0aC5zcXJ0KCAoIHZlY3Rvci54ICogdmVjdG9yLnggKSArICggdmVjdG9yLnogKiB2ZWN0b3IueiApICkgKTtcblxuXHR9XG5cbn1cblxuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFRldHJhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gVGV0cmFoZWRyb25HZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuVGV0cmFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRldHJhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV0cmFoZWRyb25HZW9tZXRyeTtcblxuLy8gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MSwgMSwgMSwgXHQtIDEsIC0gMSwgMSwgXHQtIDEsIDEsIC0gMSwgXHQxLCAtIDEsIC0gMVxuXHRdO1xuXG5cdHZhciBpbmRpY2VzID0gW1xuXHRcdDIsIDEsIDAsIFx0MCwgMywgMixcdDEsIDMsIDAsXHQyLCAzLCAxXG5cdF07XG5cblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxufVxuXG5UZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIE9jdGFoZWRyb25HZW9tZXRyeVxuXG5mdW5jdGlvbiBPY3RhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnT2N0YWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT2N0YWhlZHJvbkdlb21ldHJ5O1xuXG4vLyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MSwgMCwgMCwgXHQtIDEsIDAsIDAsXHQwLCAxLCAwLFxuXHRcdDAsIC0gMSwgMCwgXHQwLCAwLCAxLFx0MCwgMCwgLSAxXG5cdF07XG5cblx0dmFyIGluZGljZXMgPSBbXG5cdFx0MCwgMiwgNCxcdDAsIDQsIDMsXHQwLCAzLCA1LFxuXHRcdDAsIDUsIDIsXHQxLCAyLCA1LFx0MSwgNSwgMyxcblx0XHQxLCAzLCA0LFx0MSwgNCwgMlxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxufVxuXG5PY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEljb3NhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gSWNvc2FoZWRyb25HZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdJY29zYWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuSWNvc2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkljb3NhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSWNvc2FoZWRyb25HZW9tZXRyeTtcblxuLy8gSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtcblx0XHQtIDEsIHQsIDAsIFx0MSwgdCwgMCwgXHQtIDEsIC0gdCwgMCwgXHQxLCAtIHQsIDAsXG5cdFx0IDAsIC0gMSwgdCwgXHQwLCAxLCB0LFx0MCwgLSAxLCAtIHQsIFx0MCwgMSwgLSB0LFxuXHRcdCB0LCAwLCAtIDEsIFx0dCwgMCwgMSwgXHQtIHQsIDAsIC0gMSwgXHQtIHQsIDAsIDFcblx0XTtcblxuXHR2YXIgaW5kaWNlcyA9IFtcblx0XHQgMCwgMTEsIDUsIFx0MCwgNSwgMSwgXHQwLCAxLCA3LCBcdDAsIDcsIDEwLCBcdDAsIDEwLCAxMSxcblx0XHQgMSwgNSwgOSwgXHQ1LCAxMSwgNCxcdDExLCAxMCwgMixcdDEwLCA3LCA2LFx0NywgMSwgOCxcblx0XHQgMywgOSwgNCwgXHQzLCA0LCAyLFx0MywgMiwgNixcdDMsIDYsIDgsXHQzLCA4LCA5LFxuXHRcdCA0LCA5LCA1LCBcdDIsIDQsIDExLFx0NiwgMiwgMTAsXHQ4LCA2LCA3LFx0OSwgOCwgMVxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5JY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBBYmUgUGF6b3MgLyBodHRwczovL2hhbW9pZC5jb21cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gRG9kZWNhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gRG9kZWNhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuRG9kZWNhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5Eb2RlY2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEb2RlY2FoZWRyb25HZW9tZXRyeTtcblxuLy8gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdHZhciB0ID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XG5cdHZhciByID0gMSAvIHQ7XG5cblx0dmFyIHZlcnRpY2VzID0gW1xuXG5cdFx0Ly8gKMKxMSwgwrExLCDCsTEpXG5cdFx0LSAxLCAtIDEsIC0gMSxcdC0gMSwgLSAxLCAxLFxuXHRcdC0gMSwgMSwgLSAxLCAtIDEsIDEsIDEsXG5cdFx0MSwgLSAxLCAtIDEsIDEsIC0gMSwgMSxcblx0XHQxLCAxLCAtIDEsIDEsIDEsIDEsXG5cblx0XHQvLyAoMCwgwrExL8+GLCDCsc+GKVxuXHRcdCAwLCAtIHIsIC0gdCwgMCwgLSByLCB0LFxuXHRcdCAwLCByLCAtIHQsIDAsIHIsIHQsXG5cblx0XHQvLyAowrExL8+GLCDCsc+GLCAwKVxuXHRcdC0gciwgLSB0LCAwLCAtIHIsIHQsIDAsXG5cdFx0IHIsIC0gdCwgMCwgciwgdCwgMCxcblxuXHRcdC8vICjCsc+GLCAwLCDCsTEvz4YpXG5cdFx0LSB0LCAwLCAtIHIsIHQsIDAsIC0gcixcblx0XHQtIHQsIDAsIHIsIHQsIDAsIHJcblx0XTtcblxuXHR2YXIgaW5kaWNlcyA9IFtcblx0XHQzLCAxMSwgNywgXHQzLCA3LCAxNSwgXHQzLCAxNSwgMTMsXG5cdFx0NywgMTksIDE3LCBcdDcsIDE3LCA2LCBcdDcsIDYsIDE1LFxuXHRcdDE3LCA0LCA4LCBcdDE3LCA4LCAxMCwgXHQxNywgMTAsIDYsXG5cdFx0OCwgMCwgMTYsIFx0OCwgMTYsIDIsIFx0OCwgMiwgMTAsXG5cdFx0MCwgMTIsIDEsIFx0MCwgMSwgMTgsIFx0MCwgMTgsIDE2LFxuXHRcdDYsIDEwLCAyLCBcdDYsIDIsIDEzLCBcdDYsIDEzLCAxNSxcblx0XHQyLCAxNiwgMTgsIFx0MiwgMTgsIDMsIFx0MiwgMywgMTMsXG5cdFx0MTgsIDEsIDksIFx0MTgsIDksIDExLCBcdDE4LCAxMSwgMyxcblx0XHQ0LCAxNCwgMTIsIFx0NCwgMTIsIDAsIFx0NCwgMCwgOCxcblx0XHQxMSwgOSwgNSwgXHQxMSwgNSwgMTksIFx0MTEsIDE5LCA3LFxuXHRcdDE5LCA1LCAxNCwgXHQxOSwgMTQsIDQsIFx0MTksIDQsIDE3LFxuXHRcdDEsIDEyLCAxNCwgXHQxLCAxNCwgNSwgXHQxLCA1LCA5XG5cdF07XG5cblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdHRoaXMudHlwZSA9ICdEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBvb3Ntb3hpZWNvZGUgLyBodHRwczovL2dpdGh1Yi5jb20vb29zbW94aWVjb2RlXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NVxuICogQGF1dGhvciBtaW5pbmdvbGQgLyBodHRwczovL2dpdGh1Yi5jb20vbWluaW5nb2xkXG4gKiBAYXV0aG9yIGpvbm9icjEgLyBodHRwczovL2dpdGh1Yi5jb20vam9ub2JyMVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKi9cblxuLy8gVHViZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIFR1YmVHZW9tZXRyeSggcGF0aCwgdHVidWxhclNlZ21lbnRzLCByYWRpdXMsIHJhZGlhbFNlZ21lbnRzLCBjbG9zZWQsIHRhcGVyICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVHViZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cGF0aDogcGF0aCxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0Y2xvc2VkOiBjbG9zZWRcblx0fTtcblxuXHRpZiAoIHRhcGVyICE9PSB1bmRlZmluZWQgKSBjb25zb2xlLndhcm4oICdUSFJFRS5UdWJlR2VvbWV0cnk6IHRhcGVyIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdHZhciBidWZmZXJHZW9tZXRyeSA9IG5ldyBUdWJlQnVmZmVyR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkICk7XG5cblx0Ly8gZXhwb3NlIGludGVybmFsc1xuXG5cdHRoaXMudGFuZ2VudHMgPSBidWZmZXJHZW9tZXRyeS50YW5nZW50cztcblx0dGhpcy5ub3JtYWxzID0gYnVmZmVyR2VvbWV0cnkubm9ybWFscztcblx0dGhpcy5iaW5vcm1hbHMgPSBidWZmZXJHZW9tZXRyeS5iaW5vcm1hbHM7XG5cblx0Ly8gY3JlYXRlIGdlb21ldHJ5XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIGJ1ZmZlckdlb21ldHJ5ICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblR1YmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblR1YmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUdWJlR2VvbWV0cnk7XG5cbi8vIFR1YmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUdWJlQnVmZmVyR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVHViZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cGF0aDogcGF0aCxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0Y2xvc2VkOiBjbG9zZWRcblx0fTtcblxuXHR0dWJ1bGFyU2VnbWVudHMgPSB0dWJ1bGFyU2VnbWVudHMgfHwgNjQ7XG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHRyYWRpYWxTZWdtZW50cyA9IHJhZGlhbFNlZ21lbnRzIHx8IDg7XG5cdGNsb3NlZCA9IGNsb3NlZCB8fCBmYWxzZTtcblxuXHR2YXIgZnJhbWVzID0gcGF0aC5jb21wdXRlRnJlbmV0RnJhbWVzKCB0dWJ1bGFyU2VnbWVudHMsIGNsb3NlZCApO1xuXG5cdC8vIGV4cG9zZSBpbnRlcm5hbHNcblxuXHR0aGlzLnRhbmdlbnRzID0gZnJhbWVzLnRhbmdlbnRzO1xuXHR0aGlzLm5vcm1hbHMgPSBmcmFtZXMubm9ybWFscztcblx0dGhpcy5iaW5vcm1hbHMgPSBmcmFtZXMuYmlub3JtYWxzO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciBQID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgaSwgajtcblxuXHQvLyBidWZmZXJcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXG5cdC8vIGNyZWF0ZSBidWZmZXIgZGF0YVxuXG5cdGdlbmVyYXRlQnVmZmVyRGF0YSgpO1xuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHQvLyBmdW5jdGlvbnNcblxuXHRmdW5jdGlvbiBnZW5lcmF0ZUJ1ZmZlckRhdGEoKSB7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Z2VuZXJhdGVTZWdtZW50KCBpICk7XG5cblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgbm90IGNsb3NlZCwgZ2VuZXJhdGUgdGhlIGxhc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzXG5cdFx0Ly8gYXQgdGhlIHJlZ3VsYXIgcG9zaXRpb24gb24gdGhlIGdpdmVuIHBhdGhcblx0XHQvL1xuXHRcdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBjbG9zZWQsIGR1cGxpY2F0ZSB0aGUgZmlyc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzICh1dnMgd2lsbCBkaWZmZXIpXG5cblx0XHRnZW5lcmF0ZVNlZ21lbnQoICggY2xvc2VkID09PSBmYWxzZSApID8gdHVidWxhclNlZ21lbnRzIDogMCApO1xuXG5cdFx0Ly8gdXZzIGFyZSBnZW5lcmF0ZWQgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbi5cblx0XHQvLyB0aGlzIG1ha2VzIGl0IGVhc3kgY29tcHV0ZSBjb3JyZWN0IHZhbHVlcyBmb3IgY2xvc2VkIGdlb21ldHJpZXNcblxuXHRcdGdlbmVyYXRlVVZzKCk7XG5cblx0XHQvLyBmaW5hbGx5IGNyZWF0ZSBmYWNlc1xuXG5cdFx0Z2VuZXJhdGVJbmRpY2VzKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudCggaSApIHtcblxuXHRcdC8vIHdlIHVzZSBnZXRQb2ludEF0IHRvIHNhbXBsZSBldmVubHkgZGlzdHJpYnV0ZWQgcG9pbnRzIGZyb20gdGhlIGdpdmVuIHBhdGhcblxuXHRcdFAgPSBwYXRoLmdldFBvaW50QXQoIGkgLyB0dWJ1bGFyU2VnbWVudHMsIFAgKTtcblxuXHRcdC8vIHJldHJpZXZlIGNvcnJlc3BvbmRpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbFxuXG5cdFx0dmFyIE4gPSBmcmFtZXMubm9ybWFsc1sgaSBdO1xuXHRcdHZhciBCID0gZnJhbWVzLmJpbm9ybWFsc1sgaSBdO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgbm9ybWFscyBhbmQgdmVydGljZXMgZm9yIHRoZSBjdXJyZW50IHNlZ21lbnRcblxuXHRcdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHR2YXIgc2luID0gTWF0aC5zaW4oIHYgKTtcblx0XHRcdHZhciBjb3MgPSAtIE1hdGguY29zKCB2ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWwueCA9ICggY29zICogTi54ICsgc2luICogQi54ICk7XG5cdFx0XHRub3JtYWwueSA9ICggY29zICogTi55ICsgc2luICogQi55ICk7XG5cdFx0XHRub3JtYWwueiA9ICggY29zICogTi56ICsgc2luICogQi56ICk7XG5cdFx0XHRub3JtYWwubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSBQLnggKyByYWRpdXMgKiBub3JtYWwueDtcblx0XHRcdHZlcnRleC55ID0gUC55ICsgcmFkaXVzICogbm9ybWFsLnk7XG5cdFx0XHR2ZXJ0ZXgueiA9IFAueiArIHJhZGl1cyAqIG5vcm1hbC56O1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlSW5kaWNlcygpIHtcblxuXHRcdGZvciAoIGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Zm9yICggaSA9IDE7IGkgPD0gcmFkaWFsU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xuXHRcdFx0XHR2YXIgYiA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgKCBpIC0gMSApO1xuXHRcdFx0XHR2YXIgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdFx0dmFyIGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdFx0dXYueCA9IGkgLyB0dWJ1bGFyU2VnbWVudHM7XG5cdFx0XHRcdHV2LnkgPSBqIC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHViZUJ1ZmZlckdlb21ldHJ5O1xuXG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEucGF0aCA9IHRoaXMucGFyYW1ldGVycy5wYXRoLnRvSlNPTigpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICpcbiAqIGJhc2VkIG9uIGh0dHA6Ly93d3cuYmxhY2twYXduLmNvbS90ZXh0cy9wcXRvcnVzL1xuICovXG5cbi8vIFRvcnVzS25vdEdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRvcnVzS25vdEdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEsIGhlaWdodFNjYWxlICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90R2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR0dWJlOiB0dWJlLFxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRwOiBwLFxuXHRcdHE6IHFcblx0fTtcblxuXHRpZiAoIGhlaWdodFNjYWxlICE9PSB1bmRlZmluZWQgKSBjb25zb2xlLndhcm4oICdUSFJFRS5Ub3J1c0tub3RHZW9tZXRyeTogaGVpZ2h0U2NhbGUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5zY2FsZSggeCwgeSwgeiApIGluc3RlYWQuJyApO1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgdHVidWxhclNlZ21lbnRzLCByYWRpYWxTZWdtZW50cywgcCwgcSApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRvcnVzS25vdEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuVG9ydXNLbm90R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNLbm90R2VvbWV0cnk7XG5cbi8vIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHR1YmU6IHR1YmUsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdHA6IHAsXG5cdFx0cTogcVxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHR0dWJlID0gdHViZSB8fCAwLjQ7XG5cdHR1YnVsYXJTZWdtZW50cyA9IE1hdGguZmxvb3IoIHR1YnVsYXJTZWdtZW50cyApIHx8IDY0O1xuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICkgfHwgODtcblx0cCA9IHAgfHwgMjtcblx0cSA9IHEgfHwgMztcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIGo7XG5cblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBQMSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBQMiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIEIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgVCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBOID0gbmV3IFZlY3RvcjMoKTtcblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyArKyBpICkge1xuXG5cdFx0Ly8gdGhlIHJhZGlhbiBcInVcIiBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlIG9mIHRoZSBjdXJyZW50IHR1YnVsYXIgc2VnZW1lbnRcblxuXHRcdHZhciB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIHAgKiBNYXRoLlBJICogMjtcblxuXHRcdC8vIG5vdyB3ZSBjYWxjdWxhdGUgdHdvIHBvaW50cy4gUDEgaXMgb3VyIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlLCBQMiBpcyBhIGxpdHRsZSBmYXJ0aGVyIGFoZWFkLlxuXHRcdC8vIHRoZXNlIHBvaW50cyBhcmUgdXNlZCB0byBjcmVhdGUgYSBzcGVjaWFsIFwiY29vcmRpbmF0ZSBzcGFjZVwiLCB3aGljaCBpcyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IHZlcnRleCBwb3NpdGlvbnNcblxuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBQMSApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSArIDAuMDEsIHAsIHEsIHJhZGl1cywgUDIgKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBvcnRob25vcm1hbCBiYXNpc1xuXG5cdFx0VC5zdWJWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHROLmFkZFZlY3RvcnMoIFAyLCBQMSApO1xuXHRcdEIuY3Jvc3NWZWN0b3JzKCBULCBOICk7XG5cdFx0Ti5jcm9zc1ZlY3RvcnMoIEIsIFQgKTtcblxuXHRcdC8vIG5vcm1hbGl6ZSBCLCBOLiBUIGNhbiBiZSBpZ25vcmVkLCB3ZSBkb24ndCB1c2UgaXRcblxuXHRcdEIubm9ybWFsaXplKCk7XG5cdFx0Ti5ub3JtYWxpemUoKTtcblxuXHRcdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArKyBqICkge1xuXG5cdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSB2ZXJ0aWNlcy4gdGhleSBhcmUgbm90aGluZyBtb3JlIHRoYW4gYW4gZXh0cnVzaW9uIG9mIHRoZSB0b3J1cyBjdXJ2ZS5cblx0XHRcdC8vIGJlY2F1c2Ugd2UgZXh0cnVkZSBhIHNoYXBlIGluIHRoZSB4eS1wbGFuZSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxjdWxhdGUgYSB6LXZhbHVlLlxuXG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXHRcdFx0dmFyIGN4ID0gLSB0dWJlICogTWF0aC5jb3MoIHYgKTtcblx0XHRcdHZhciBjeSA9IHR1YmUgKiBNYXRoLnNpbiggdiApO1xuXG5cdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXG5cdFx0XHQvLyBmaXJzdCB3ZSBvcmllbnQgdGhlIGV4dHJ1c2lvbiB3aXRoIG91ciBiYXNpcyB2ZWN0b3MsIHRoZW4gd2UgYWRkIGl0IHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZVxuXG5cdFx0XHR2ZXJ0ZXgueCA9IFAxLnggKyAoIGN4ICogTi54ICsgY3kgKiBCLnggKTtcblx0XHRcdHZlcnRleC55ID0gUDEueSArICggY3ggKiBOLnkgKyBjeSAqIEIueSApO1xuXHRcdFx0dmVydGV4LnogPSBQMS56ICsgKCBjeCAqIE4ueiArIGN5ICogQi56ICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsIChQMSBpcyBhbHdheXMgdGhlIGNlbnRlci9vcmlnaW4gb2YgdGhlIGV4dHJ1c2lvbiwgdGh1cyB3ZSBjYW4gdXNlIGl0IHRvIGNhbGN1bGF0ZSB0aGUgbm9ybWFsKVxuXG5cdFx0XHRub3JtYWwuc3ViVmVjdG9ycyggdmVydGV4LCBQMSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRcdHV2cy5wdXNoKCBqIC8gcmFkaWFsU2VnbWVudHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdGZvciAoIGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdHZhciBhID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArICggaSAtIDEgKTtcblx0XHRcdHZhciBiID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyAoIGkgLSAxICk7XG5cdFx0XHR2YXIgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdHZhciBkID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XG5cblx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHQvLyB0aGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlXG5cblx0ZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKCB1LCBwLCBxLCByYWRpdXMsIHBvc2l0aW9uICkge1xuXG5cdFx0dmFyIGN1ID0gTWF0aC5jb3MoIHUgKTtcblx0XHR2YXIgc3UgPSBNYXRoLnNpbiggdSApO1xuXHRcdHZhciBxdU92ZXJQID0gcSAvIHAgKiB1O1xuXHRcdHZhciBjcyA9IE1hdGguY29zKCBxdU92ZXJQICk7XG5cblx0XHRwb3NpdGlvbi54ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIDAuNSAqIGN1O1xuXHRcdHBvc2l0aW9uLnkgPSByYWRpdXMgKiAoIDIgKyBjcyApICogc3UgKiAwLjU7XG5cdFx0cG9zaXRpb24ueiA9IHJhZGl1cyAqIE1hdGguc2luKCBxdU92ZXJQICkgKiAwLjU7XG5cblx0fVxuXG59XG5cblRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNLbm90QnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBvb3Ntb3hpZWNvZGVcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFRvcnVzR2VvbWV0cnlcblxuZnVuY3Rpb24gVG9ydXNHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCByYWRpYWxTZWdtZW50cywgdHVidWxhclNlZ21lbnRzLCBhcmMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUb3J1c0dlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0dHViZTogdHViZSxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0YXJjOiBhcmNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRvcnVzQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgcmFkaWFsU2VnbWVudHMsIHR1YnVsYXJTZWdtZW50cywgYXJjICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuVG9ydXNHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNHZW9tZXRyeTtcblxuLy8gVG9ydXNCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUb3J1c0J1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1RvcnVzQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR0dWJlOiB0dWJlLFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRhcmM6IGFyY1xuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHR0dWJlID0gdHViZSB8fCAwLjQ7XG5cdHJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vciggcmFkaWFsU2VnbWVudHMgKSB8fCA4O1xuXHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKCB0dWJ1bGFyU2VnbWVudHMgKSB8fCA2O1xuXHRhcmMgPSBhcmMgfHwgTWF0aC5QSSAqIDI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGosIGk7XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdSA9IGkgLyB0dWJ1bGFyU2VnbWVudHMgKiBhcmM7XG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLmNvcyggdSApO1xuXHRcdFx0dmVydGV4LnkgPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0dmVydGV4LnogPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0Y2VudGVyLnggPSByYWRpdXMgKiBNYXRoLmNvcyggdSApO1xuXHRcdFx0Y2VudGVyLnkgPSByYWRpdXMgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgY2VudGVyICkubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggaSAvIHR1YnVsYXJTZWdtZW50cyApO1xuXHRcdFx0dXZzLnB1c2goIGogLyByYWRpYWxTZWdtZW50cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0Zm9yICggaiA9IDE7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdC8vIGluZGljZXNcblxuXHRcdFx0dmFyIGEgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpIC0gMTtcblx0XHRcdHZhciBiID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpIC0gMTtcblx0XHRcdHZhciBjID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpO1xuXHRcdFx0dmFyIGQgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuVG9ydXNCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogUG9ydCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvZWFyY3V0ICh2Mi4xLjUpXG4gKi9cblxudmFyIEVhcmN1dCA9IHtcblxuXHR0cmlhbmd1bGF0ZTogZnVuY3Rpb24gKCBkYXRhLCBob2xlSW5kaWNlcywgZGltICkge1xuXG5cdFx0ZGltID0gZGltIHx8IDI7XG5cblx0XHR2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGgsXG5cdFx0XHRvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbIDAgXSAqIGRpbSA6IGRhdGEubGVuZ3RoLFxuXHRcdFx0b3V0ZXJOb2RlID0gbGlua2VkTGlzdCggZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSApLFxuXHRcdFx0dHJpYW5nbGVzID0gW107XG5cblx0XHRpZiAoICEgb3V0ZXJOb2RlIHx8IG91dGVyTm9kZS5uZXh0ID09PSBvdXRlck5vZGUucHJldiApIHJldHVybiB0cmlhbmdsZXM7XG5cblx0XHR2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcblxuXHRcdGlmICggaGFzSG9sZXMgKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICk7XG5cblx0XHQvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcblx0XHRpZiAoIGRhdGEubGVuZ3RoID4gODAgKiBkaW0gKSB7XG5cblx0XHRcdG1pblggPSBtYXhYID0gZGF0YVsgMCBdO1xuXHRcdFx0bWluWSA9IG1heFkgPSBkYXRhWyAxIF07XG5cblx0XHRcdGZvciAoIHZhciBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltICkge1xuXG5cdFx0XHRcdHggPSBkYXRhWyBpIF07XG5cdFx0XHRcdHkgPSBkYXRhWyBpICsgMSBdO1xuXHRcdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0XHRpZiAoIHkgPiBtYXhZICkgbWF4WSA9IHk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb25cblx0XHRcdGludlNpemUgPSBNYXRoLm1heCggbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZICk7XG5cdFx0XHRpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDEgLyBpbnZTaXplIDogMDtcblxuXHRcdH1cblxuXHRcdGVhcmN1dExpbmtlZCggb3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlcztcblxuXHR9XG5cbn07XG5cbi8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxuZnVuY3Rpb24gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UgKSB7XG5cblx0dmFyIGksIGxhc3Q7XG5cblx0aWYgKCBjbG9ja3dpc2UgPT09ICggc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkgPiAwICkgKSB7XG5cblx0XHRmb3IgKCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCBpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSApIGxhc3QgPSBpbnNlcnROb2RlKCBpLCBkYXRhWyBpIF0sIGRhdGFbIGkgKyAxIF0sIGxhc3QgKTtcblxuXHR9XG5cblx0aWYgKCBsYXN0ICYmIGVxdWFscyggbGFzdCwgbGFzdC5uZXh0ICkgKSB7XG5cblx0XHRyZW1vdmVOb2RlKCBsYXN0ICk7XG5cdFx0bGFzdCA9IGxhc3QubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIGxhc3Q7XG5cbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcbmZ1bmN0aW9uIGZpbHRlclBvaW50cyggc3RhcnQsIGVuZCApIHtcblxuXHRpZiAoICEgc3RhcnQgKSByZXR1cm4gc3RhcnQ7XG5cdGlmICggISBlbmQgKSBlbmQgPSBzdGFydDtcblxuXHR2YXIgcCA9IHN0YXJ0LFxuXHRcdGFnYWluO1xuXHRkbyB7XG5cblx0XHRhZ2FpbiA9IGZhbHNlO1xuXG5cdFx0aWYgKCAhIHAuc3RlaW5lciAmJiAoIGVxdWFscyggcCwgcC5uZXh0ICkgfHwgYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA9PT0gMCApICkge1xuXG5cdFx0XHRyZW1vdmVOb2RlKCBwICk7XG5cdFx0XHRwID0gZW5kID0gcC5wcmV2O1xuXHRcdFx0aWYgKCBwID09PSBwLm5leHQgKSBicmVhaztcblx0XHRcdGFnYWluID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHAgPSBwLm5leHQ7XG5cblx0XHR9XG5cblx0fSB3aGlsZSAoIGFnYWluIHx8IHAgIT09IGVuZCApO1xuXG5cdHJldHVybiBlbmQ7XG5cbn1cblxuLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MgKSB7XG5cblx0aWYgKCAhIGVhciApIHJldHVybjtcblxuXHQvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5cdGlmICggISBwYXNzICYmIGludlNpemUgKSBpbmRleEN1cnZlKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHR2YXIgc3RvcCA9IGVhcixcblx0XHRwcmV2LCBuZXh0O1xuXG5cdC8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZVxuXHR3aGlsZSAoIGVhci5wcmV2ICE9PSBlYXIubmV4dCApIHtcblxuXHRcdHByZXYgPSBlYXIucHJldjtcblx0XHRuZXh0ID0gZWFyLm5leHQ7XG5cblx0XHRpZiAoIGludlNpemUgPyBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgOiBpc0VhciggZWFyICkgKSB7XG5cblx0XHRcdC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXG5cdFx0XHR0cmlhbmdsZXMucHVzaCggcHJldi5pIC8gZGltICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggZWFyLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBuZXh0LmkgLyBkaW0gKTtcblxuXHRcdFx0cmVtb3ZlTm9kZSggZWFyICk7XG5cblx0XHRcdC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRleCBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcblx0XHRcdGVhciA9IG5leHQubmV4dDtcblx0XHRcdHN0b3AgPSBuZXh0Lm5leHQ7XG5cblx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0fVxuXG5cdFx0ZWFyID0gbmV4dDtcblxuXHRcdC8vIGlmIHdlIGxvb3BlZCB0aHJvdWdoIHRoZSB3aG9sZSByZW1haW5pbmcgcG9seWdvbiBhbmQgY2FuJ3QgZmluZCBhbnkgbW9yZSBlYXJzXG5cdFx0aWYgKCBlYXIgPT09IHN0b3AgKSB7XG5cblx0XHRcdC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG5cdFx0XHRpZiAoICEgcGFzcyApIHtcblxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGZpbHRlclBvaW50cyggZWFyICksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxICk7XG5cblx0XHRcdFx0Ly8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcblxuXHRcdFx0fSBlbHNlIGlmICggcGFzcyA9PT0gMSApIHtcblxuXHRcdFx0XHRlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKCBlYXIsIHRyaWFuZ2xlcywgZGltICk7XG5cdFx0XHRcdGVhcmN1dExpbmtlZCggZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMiApO1xuXG5cdFx0XHRcdC8vIGFzIGEgbGFzdCByZXNvcnQsIHRyeSBzcGxpdHRpbmcgdGhlIHJlbWFpbmluZyBwb2x5Z29uIGludG8gdHdvXG5cblx0XHRcdH0gZWxzZSBpZiAoIHBhc3MgPT09IDIgKSB7XG5cblx0XHRcdFx0c3BsaXRFYXJjdXQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gY2hlY2sgd2hldGhlciBhIHBvbHlnb24gbm9kZSBmb3JtcyBhIHZhbGlkIGVhciB3aXRoIGFkamFjZW50IG5vZGVzXG5mdW5jdGlvbiBpc0VhciggZWFyICkge1xuXG5cdHZhciBhID0gZWFyLnByZXYsXG5cdFx0YiA9IGVhcixcblx0XHRjID0gZWFyLm5leHQ7XG5cblx0aWYgKCBhcmVhKCBhLCBiLCBjICkgPj0gMCApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuXHQvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxuXHR2YXIgcCA9IGVhci5uZXh0Lm5leHQ7XG5cblx0d2hpbGUgKCBwICE9PSBlYXIucHJldiApIHtcblxuXHRcdGlmICggcG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoIGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHR2YXIgYSA9IGVhci5wcmV2LFxuXHRcdGIgPSBlYXIsXG5cdFx0YyA9IGVhci5uZXh0O1xuXG5cdGlmICggYXJlYSggYSwgYiwgYyApID49IDAgKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cblx0Ly8gdHJpYW5nbGUgYmJveDsgbWluICYgbWF4IGFyZSBjYWxjdWxhdGVkIGxpa2UgdGhpcyBmb3Igc3BlZWRcblx0dmFyIG1pblRYID0gYS54IDwgYi54ID8gKCBhLnggPCBjLnggPyBhLnggOiBjLnggKSA6ICggYi54IDwgYy54ID8gYi54IDogYy54ICksXG5cdFx0bWluVFkgPSBhLnkgPCBiLnkgPyAoIGEueSA8IGMueSA/IGEueSA6IGMueSApIDogKCBiLnkgPCBjLnkgPyBiLnkgOiBjLnkgKSxcblx0XHRtYXhUWCA9IGEueCA+IGIueCA/ICggYS54ID4gYy54ID8gYS54IDogYy54ICkgOiAoIGIueCA+IGMueCA/IGIueCA6IGMueCApLFxuXHRcdG1heFRZID0gYS55ID4gYi55ID8gKCBhLnkgPiBjLnkgPyBhLnkgOiBjLnkgKSA6ICggYi55ID4gYy55ID8gYi55IDogYy55ICk7XG5cblx0Ly8gei1vcmRlciByYW5nZSBmb3IgdGhlIGN1cnJlbnQgdHJpYW5nbGUgYmJveDtcblx0dmFyIG1pblogPSB6T3JkZXIoIG1pblRYLCBtaW5UWSwgbWluWCwgbWluWSwgaW52U2l6ZSApLFxuXHRcdG1heFogPSB6T3JkZXIoIG1heFRYLCBtYXhUWSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdHZhciBwID0gZWFyLnByZXZaLFxuXHRcdG4gPSBlYXIubmV4dFo7XG5cblx0Ly8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgaW4gYm90aCBkaXJlY3Rpb25zXG5cdHdoaWxlICggcCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0XHRpZiAoIG4gIT09IGVhci5wcmV2ICYmIG4gIT09IGVhci5uZXh0ICYmXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIG4ueCwgbi55ICkgJiZcblx0XHRcdGFyZWEoIG4ucHJldiwgbiwgbi5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcblx0XHRuID0gbi5uZXh0WjtcblxuXHR9XG5cblx0Ly8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcblx0d2hpbGUgKCBwICYmIHAueiA+PSBtaW5aICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0fVxuXG5cdC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gaW5jcmVhc2luZyB6LW9yZGVyXG5cdHdoaWxlICggbiAmJiBuLnogPD0gbWF4WiApIHtcblxuXHRcdGlmICggbiAhPT0gZWFyLnByZXYgJiYgbiAhPT0gZWFyLm5leHQgJiZcblx0XHRcdHBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgbi54LCBuLnkgKSAmJlxuXHRcdFx0YXJlYSggbi5wcmV2LCBuLCBuLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xuXHRcdG4gPSBuLm5leHRaO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xuZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggc3RhcnQsIHRyaWFuZ2xlcywgZGltICkge1xuXG5cdHZhciBwID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdHZhciBhID0gcC5wcmV2LFxuXHRcdFx0YiA9IHAubmV4dC5uZXh0O1xuXG5cdFx0aWYgKCAhIGVxdWFscyggYSwgYiApICYmIGludGVyc2VjdHMoIGEsIHAsIHAubmV4dCwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBiLCBhICkgKSB7XG5cblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBhLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBwLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBiLmkgLyBkaW0gKTtcblxuXHRcdFx0Ly8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxuXHRcdFx0cmVtb3ZlTm9kZSggcCApO1xuXHRcdFx0cmVtb3ZlTm9kZSggcC5uZXh0ICk7XG5cblx0XHRcdHAgPSBzdGFydCA9IGI7XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHJldHVybiBwO1xuXG59XG5cbi8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5XG5mdW5jdGlvbiBzcGxpdEVhcmN1dCggc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGxvb2sgZm9yIGEgdmFsaWQgZGlhZ29uYWwgdGhhdCBkaXZpZGVzIHRoZSBwb2x5Z29uIGludG8gdHdvXG5cdHZhciBhID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdHZhciBiID0gYS5uZXh0Lm5leHQ7XG5cdFx0d2hpbGUgKCBiICE9PSBhLnByZXYgKSB7XG5cblx0XHRcdGlmICggYS5pICE9PSBiLmkgJiYgaXNWYWxpZERpYWdvbmFsKCBhLCBiICkgKSB7XG5cblx0XHRcdFx0Ly8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbFxuXHRcdFx0XHR2YXIgYyA9IHNwbGl0UG9seWdvbiggYSwgYiApO1xuXG5cdFx0XHRcdC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG5cdFx0XHRcdGEgPSBmaWx0ZXJQb2ludHMoIGEsIGEubmV4dCApO1xuXHRcdFx0XHRjID0gZmlsdGVyUG9pbnRzKCBjLCBjLm5leHQgKTtcblxuXHRcdFx0XHQvLyBydW4gZWFyY3V0IG9uIGVhY2ggaGFsZlxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cdFx0XHRcdGVhcmN1dExpbmtlZCggYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGIgPSBiLm5leHQ7XG5cblx0XHR9XG5cblx0XHRhID0gYS5uZXh0O1xuXG5cdH0gd2hpbGUgKCBhICE9PSBzdGFydCApO1xuXG59XG5cbi8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKCBkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0gKSB7XG5cblx0dmFyIHF1ZXVlID0gW10sXG5cdFx0aSwgbGVuLCBzdGFydCwgZW5kLCBsaXN0O1xuXG5cdGZvciAoIGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkgKysgKSB7XG5cblx0XHRzdGFydCA9IGhvbGVJbmRpY2VzWyBpIF0gKiBkaW07XG5cdFx0ZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1sgaSArIDEgXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXHRcdGxpc3QgPSBsaW5rZWRMaXN0KCBkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGZhbHNlICk7XG5cdFx0aWYgKCBsaXN0ID09PSBsaXN0Lm5leHQgKSBsaXN0LnN0ZWluZXIgPSB0cnVlO1xuXHRcdHF1ZXVlLnB1c2goIGdldExlZnRtb3N0KCBsaXN0ICkgKTtcblxuXHR9XG5cblx0cXVldWUuc29ydCggY29tcGFyZVggKTtcblxuXHQvLyBwcm9jZXNzIGhvbGVzIGZyb20gbGVmdCB0byByaWdodFxuXHRmb3IgKCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGVsaW1pbmF0ZUhvbGUoIHF1ZXVlWyBpIF0sIG91dGVyTm9kZSApO1xuXHRcdG91dGVyTm9kZSA9IGZpbHRlclBvaW50cyggb3V0ZXJOb2RlLCBvdXRlck5vZGUubmV4dCApO1xuXG5cdH1cblxuXHRyZXR1cm4gb3V0ZXJOb2RlO1xuXG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVYKCBhLCBiICkge1xuXG5cdHJldHVybiBhLnggLSBiLng7XG5cbn1cblxuLy8gZmluZCBhIGJyaWRnZSBiZXR3ZWVuIHZlcnRpY2VzIHRoYXQgY29ubmVjdHMgaG9sZSB3aXRoIGFuIG91dGVyIHJpbmcgYW5kIGFuZCBsaW5rIGl0XG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlKCBob2xlLCBvdXRlck5vZGUgKSB7XG5cblx0b3V0ZXJOb2RlID0gZmluZEhvbGVCcmlkZ2UoIGhvbGUsIG91dGVyTm9kZSApO1xuXHRpZiAoIG91dGVyTm9kZSApIHtcblxuXHRcdHZhciBiID0gc3BsaXRQb2x5Z29uKCBvdXRlck5vZGUsIGhvbGUgKTtcblx0XHRmaWx0ZXJQb2ludHMoIGIsIGIubmV4dCApO1xuXG5cdH1cblxufVxuXG4vLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uXG5mdW5jdGlvbiBmaW5kSG9sZUJyaWRnZSggaG9sZSwgb3V0ZXJOb2RlICkge1xuXG5cdHZhciBwID0gb3V0ZXJOb2RlLFxuXHRcdGh4ID0gaG9sZS54LFxuXHRcdGh5ID0gaG9sZS55LFxuXHRcdHF4ID0gLSBJbmZpbml0eSxcblx0XHRtO1xuXG5cdC8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDtcblx0Ly8gc2VnbWVudCdzIGVuZHBvaW50IHdpdGggbGVzc2VyIHggd2lsbCBiZSBwb3RlbnRpYWwgY29ubmVjdGlvbiBwb2ludFxuXHRkbyB7XG5cblx0XHRpZiAoIGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSAmJiBwLm5leHQueSAhPT0gcC55ICkge1xuXG5cdFx0XHR2YXIgeCA9IHAueCArICggaHkgLSBwLnkgKSAqICggcC5uZXh0LnggLSBwLnggKSAvICggcC5uZXh0LnkgLSBwLnkgKTtcblx0XHRcdGlmICggeCA8PSBoeCAmJiB4ID4gcXggKSB7XG5cblx0XHRcdFx0cXggPSB4O1xuXHRcdFx0XHRpZiAoIHggPT09IGh4ICkge1xuXG5cdFx0XHRcdFx0aWYgKCBoeSA9PT0gcC55ICkgcmV0dXJuIHA7XG5cdFx0XHRcdFx0aWYgKCBoeSA9PT0gcC5uZXh0LnkgKSByZXR1cm4gcC5uZXh0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBvdXRlck5vZGUgKTtcblxuXHRpZiAoICEgbSApIHJldHVybiBudWxsO1xuXG5cdGlmICggaHggPT09IHF4ICkgcmV0dXJuIG0ucHJldjsgLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbG93ZXIgZW5kcG9pbnRcblxuXHQvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBvZiBob2xlIHBvaW50LCBzZWdtZW50IGludGVyc2VjdGlvbiBhbmQgZW5kcG9pbnQ7XG5cdC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xuXHQvLyBvdGhlcndpc2UgY2hvb3NlIHRoZSBwb2ludCBvZiB0aGUgbWluaW11bSBhbmdsZSB3aXRoIHRoZSByYXkgYXMgY29ubmVjdGlvbiBwb2ludFxuXG5cdHZhciBzdG9wID0gbSxcblx0XHRteCA9IG0ueCxcblx0XHRteSA9IG0ueSxcblx0XHR0YW5NaW4gPSBJbmZpbml0eSxcblx0XHR0YW47XG5cblx0cCA9IG0ubmV4dDtcblxuXHR3aGlsZSAoIHAgIT09IHN0b3AgKSB7XG5cblx0XHRpZiAoIGh4ID49IHAueCAmJiBwLnggPj0gbXggJiYgaHggIT09IHAueCAmJlxuXHRcdFx0XHRwb2ludEluVHJpYW5nbGUoIGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55ICkgKSB7XG5cblx0XHRcdHRhbiA9IE1hdGguYWJzKCBoeSAtIHAueSApIC8gKCBoeCAtIHAueCApOyAvLyB0YW5nZW50aWFsXG5cblx0XHRcdGlmICggKCB0YW4gPCB0YW5NaW4gfHwgKCB0YW4gPT09IHRhbk1pbiAmJiBwLnggPiBtLnggKSApICYmIGxvY2FsbHlJbnNpZGUoIHAsIGhvbGUgKSApIHtcblxuXHRcdFx0XHRtID0gcDtcblx0XHRcdFx0dGFuTWluID0gdGFuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH1cblxuXHRyZXR1cm4gbTtcblxufVxuXG4vLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5mdW5jdGlvbiBpbmRleEN1cnZlKCBzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHR2YXIgcCA9IHN0YXJ0O1xuXHRkbyB7XG5cblx0XHRpZiAoIHAueiA9PT0gbnVsbCApIHAueiA9IHpPcmRlciggcC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRwLnByZXZaID0gcC5wcmV2O1xuXHRcdHAubmV4dFogPSBwLm5leHQ7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gc3RhcnQgKTtcblxuXHRwLnByZXZaLm5leHRaID0gbnVsbDtcblx0cC5wcmV2WiA9IG51bGw7XG5cblx0c29ydExpbmtlZCggcCApO1xuXG59XG5cbi8vIFNpbW9uIFRhdGhhbSdzIGxpbmtlZCBsaXN0IG1lcmdlIHNvcnQgYWxnb3JpdGhtXG4vLyBodHRwOi8vd3d3LmNoaWFyay5ncmVlbmVuZC5vcmcudWsvfnNndGF0aGFtL2FsZ29yaXRobXMvbGlzdHNvcnQuaHRtbFxuZnVuY3Rpb24gc29ydExpbmtlZCggbGlzdCApIHtcblxuXHR2YXIgaSwgcCwgcSwgZSwgdGFpbCwgbnVtTWVyZ2VzLCBwU2l6ZSwgcVNpemUsXG5cdFx0aW5TaXplID0gMTtcblxuXHRkbyB7XG5cblx0XHRwID0gbGlzdDtcblx0XHRsaXN0ID0gbnVsbDtcblx0XHR0YWlsID0gbnVsbDtcblx0XHRudW1NZXJnZXMgPSAwO1xuXG5cdFx0d2hpbGUgKCBwICkge1xuXG5cdFx0XHRudW1NZXJnZXMgKys7XG5cdFx0XHRxID0gcDtcblx0XHRcdHBTaXplID0gMDtcblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaW5TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdHBTaXplICsrO1xuXHRcdFx0XHRxID0gcS5uZXh0Wjtcblx0XHRcdFx0aWYgKCAhIHEgKSBicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRxU2l6ZSA9IGluU2l6ZTtcblxuXHRcdFx0d2hpbGUgKCBwU2l6ZSA+IDAgfHwgKCBxU2l6ZSA+IDAgJiYgcSApICkge1xuXG5cdFx0XHRcdGlmICggcFNpemUgIT09IDAgJiYgKCBxU2l6ZSA9PT0gMCB8fCAhIHEgfHwgcC56IDw9IHEueiApICkge1xuXG5cdFx0XHRcdFx0ZSA9IHA7XG5cdFx0XHRcdFx0cCA9IHAubmV4dFo7XG5cdFx0XHRcdFx0cFNpemUgLS07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGUgPSBxO1xuXHRcdFx0XHRcdHEgPSBxLm5leHRaO1xuXHRcdFx0XHRcdHFTaXplIC0tO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhaWwgKSB0YWlsLm5leHRaID0gZTtcblx0XHRcdFx0ZWxzZSBsaXN0ID0gZTtcblxuXHRcdFx0XHRlLnByZXZaID0gdGFpbDtcblx0XHRcdFx0dGFpbCA9IGU7XG5cblx0XHRcdH1cblxuXHRcdFx0cCA9IHE7XG5cblx0XHR9XG5cblx0XHR0YWlsLm5leHRaID0gbnVsbDtcblx0XHRpblNpemUgKj0gMjtcblxuXHR9IHdoaWxlICggbnVtTWVyZ2VzID4gMSApO1xuXG5cdHJldHVybiBsaXN0O1xuXG59XG5cbi8vIHotb3JkZXIgb2YgYSBwb2ludCBnaXZlbiBjb29yZHMgYW5kIGludmVyc2Ugb2YgdGhlIGxvbmdlciBzaWRlIG9mIGRhdGEgYmJveFxuZnVuY3Rpb24gek9yZGVyKCB4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGNvb3JkcyBhcmUgdHJhbnNmb3JtZWQgaW50byBub24tbmVnYXRpdmUgMTUtYml0IGludGVnZXIgcmFuZ2Vcblx0eCA9IDMyNzY3ICogKCB4IC0gbWluWCApICogaW52U2l6ZTtcblx0eSA9IDMyNzY3ICogKCB5IC0gbWluWSApICogaW52U2l6ZTtcblxuXHR4ID0gKCB4IHwgKCB4IDw8IDggKSApICYgMHgwMEZGMDBGRjtcblx0eCA9ICggeCB8ICggeCA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7XG5cdHggPSAoIHggfCAoIHggPDwgMiApICkgJiAweDMzMzMzMzMzO1xuXHR4ID0gKCB4IHwgKCB4IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcblxuXHR5ID0gKCB5IHwgKCB5IDw8IDggKSApICYgMHgwMEZGMDBGRjtcblx0eSA9ICggeSB8ICggeSA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7XG5cdHkgPSAoIHkgfCAoIHkgPDwgMiApICkgJiAweDMzMzMzMzMzO1xuXHR5ID0gKCB5IHwgKCB5IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcblxuXHRyZXR1cm4geCB8ICggeSA8PCAxICk7XG5cbn1cblxuLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xuZnVuY3Rpb24gZ2V0TGVmdG1vc3QoIHN0YXJ0ICkge1xuXG5cdHZhciBwID0gc3RhcnQsXG5cdFx0bGVmdG1vc3QgPSBzdGFydDtcblx0ZG8ge1xuXG5cdFx0aWYgKCBwLnggPCBsZWZ0bW9zdC54IHx8ICggcC54ID09PSBsZWZ0bW9zdC54ICYmIHAueSA8IGxlZnRtb3N0LnkgKSApIGxlZnRtb3N0ID0gcDtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHJldHVybiBsZWZ0bW9zdDtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvaW50IGxpZXMgd2l0aGluIGEgY29udmV4IHRyaWFuZ2xlXG5mdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSApIHtcblxuXHRyZXR1cm4gKCBjeCAtIHB4ICkgKiAoIGF5IC0gcHkgKSAtICggYXggLSBweCApICogKCBjeSAtIHB5ICkgPj0gMCAmJlxuXHRcdCAgICggYXggLSBweCApICogKCBieSAtIHB5ICkgLSAoIGJ4IC0gcHggKSAqICggYXkgLSBweSApID49IDAgJiZcblx0XHQgICAoIGJ4IC0gcHggKSAqICggY3kgLSBweSApIC0gKCBjeCAtIHB4ICkgKiAoIGJ5IC0gcHkgKSA+PSAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKCBhLCBiICkge1xuXG5cdHJldHVybiBhLm5leHQuaSAhPT0gYi5pICYmIGEucHJldi5pICE9PSBiLmkgJiYgISBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApICYmXG5cdFx0ICAgbG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSAmJiBtaWRkbGVJbnNpZGUoIGEsIGIgKTtcblxufVxuXG4vLyBzaWduZWQgYXJlYSBvZiBhIHRyaWFuZ2xlXG5mdW5jdGlvbiBhcmVhKCBwLCBxLCByICkge1xuXG5cdHJldHVybiAoIHEueSAtIHAueSApICogKCByLnggLSBxLnggKSAtICggcS54IC0gcC54ICkgKiAoIHIueSAtIHEueSApO1xuXG59XG5cbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXG5mdW5jdGlvbiBlcXVhbHMoIHAxLCBwMiApIHtcblxuXHRyZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xuXG59XG5cbi8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3RcbmZ1bmN0aW9uIGludGVyc2VjdHMoIHAxLCBxMSwgcDIsIHEyICkge1xuXG5cdGlmICggKCBlcXVhbHMoIHAxLCBwMiApICYmIGVxdWFscyggcTEsIHEyICkgKSB8fFxuXHRcdCggZXF1YWxzKCBwMSwgcTIgKSAmJiBlcXVhbHMoIHAyLCBxMSApICkgKSByZXR1cm4gdHJ1ZTtcblx0cmV0dXJuIGFyZWEoIHAxLCBxMSwgcDIgKSA+IDAgIT09IGFyZWEoIHAxLCBxMSwgcTIgKSA+IDAgJiZcblx0XHQgICBhcmVhKCBwMiwgcTIsIHAxICkgPiAwICE9PSBhcmVhKCBwMiwgcTIsIHExICkgPiAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApIHtcblxuXHR2YXIgcCA9IGE7XG5cdGRvIHtcblxuXHRcdGlmICggcC5pICE9PSBhLmkgJiYgcC5uZXh0LmkgIT09IGEuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmXG5cdFx0XHRcdGludGVyc2VjdHMoIHAsIHAubmV4dCwgYSwgYiApICkgcmV0dXJuIHRydWU7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gYSApO1xuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgbG9jYWxseSBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGFyZWEoIGEucHJldiwgYSwgYS5uZXh0ICkgPCAwID9cblx0XHRhcmVhKCBhLCBiLCBhLm5leHQgKSA+PSAwICYmIGFyZWEoIGEsIGEucHJldiwgYiApID49IDAgOlxuXHRcdGFyZWEoIGEsIGIsIGEucHJldiApIDwgMCB8fCBhcmVhKCBhLCBhLm5leHQsIGIgKSA8IDA7XG5cbn1cblxuLy8gY2hlY2sgaWYgdGhlIG1pZGRsZSBwb2ludCBvZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBtaWRkbGVJbnNpZGUoIGEsIGIgKSB7XG5cblx0dmFyIHAgPSBhLFxuXHRcdGluc2lkZSA9IGZhbHNlLFxuXHRcdHB4ID0gKCBhLnggKyBiLnggKSAvIDIsXG5cdFx0cHkgPSAoIGEueSArIGIueSApIC8gMjtcblx0ZG8ge1xuXG5cdFx0aWYgKCAoICggcC55ID4gcHkgKSAhPT0gKCBwLm5leHQueSA+IHB5ICkgKSAmJiBwLm5leHQueSAhPT0gcC55ICYmXG5cdFx0XHRcdCggcHggPCAoIHAubmV4dC54IC0gcC54ICkgKiAoIHB5IC0gcC55ICkgLyAoIHAubmV4dC55IC0gcC55ICkgKyBwLnggKSApXG5cdFx0XHRpbnNpZGUgPSAhIGluc2lkZTtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBhICk7XG5cblx0cmV0dXJuIGluc2lkZTtcblxufVxuXG4vLyBsaW5rIHR3byBwb2x5Z29uIHZlcnRpY2VzIHdpdGggYSBicmlkZ2U7IGlmIHRoZSB2ZXJ0aWNlcyBiZWxvbmcgdG8gdGhlIHNhbWUgcmluZywgaXQgc3BsaXRzIHBvbHlnb24gaW50byB0d287XG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcbmZ1bmN0aW9uIHNwbGl0UG9seWdvbiggYSwgYiApIHtcblxuXHR2YXIgYTIgPSBuZXcgTm9kZSggYS5pLCBhLngsIGEueSApLFxuXHRcdGIyID0gbmV3IE5vZGUoIGIuaSwgYi54LCBiLnkgKSxcblx0XHRhbiA9IGEubmV4dCxcblx0XHRicCA9IGIucHJldjtcblxuXHRhLm5leHQgPSBiO1xuXHRiLnByZXYgPSBhO1xuXG5cdGEyLm5leHQgPSBhbjtcblx0YW4ucHJldiA9IGEyO1xuXG5cdGIyLm5leHQgPSBhMjtcblx0YTIucHJldiA9IGIyO1xuXG5cdGJwLm5leHQgPSBiMjtcblx0YjIucHJldiA9IGJwO1xuXG5cdHJldHVybiBiMjtcblxufVxuXG4vLyBjcmVhdGUgYSBub2RlIGFuZCBvcHRpb25hbGx5IGxpbmsgaXQgd2l0aCBwcmV2aW91cyBvbmUgKGluIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gaW5zZXJ0Tm9kZSggaSwgeCwgeSwgbGFzdCApIHtcblxuXHR2YXIgcCA9IG5ldyBOb2RlKCBpLCB4LCB5ICk7XG5cblx0aWYgKCAhIGxhc3QgKSB7XG5cblx0XHRwLnByZXYgPSBwO1xuXHRcdHAubmV4dCA9IHA7XG5cblx0fSBlbHNlIHtcblxuXHRcdHAubmV4dCA9IGxhc3QubmV4dDtcblx0XHRwLnByZXYgPSBsYXN0O1xuXHRcdGxhc3QubmV4dC5wcmV2ID0gcDtcblx0XHRsYXN0Lm5leHQgPSBwO1xuXG5cdH1cblxuXHRyZXR1cm4gcDtcblxufVxuXG5mdW5jdGlvbiByZW1vdmVOb2RlKCBwICkge1xuXG5cdHAubmV4dC5wcmV2ID0gcC5wcmV2O1xuXHRwLnByZXYubmV4dCA9IHAubmV4dDtcblxuXHRpZiAoIHAucHJldlogKSBwLnByZXZaLm5leHRaID0gcC5uZXh0Wjtcblx0aWYgKCBwLm5leHRaICkgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7XG5cbn1cblxuZnVuY3Rpb24gTm9kZSggaSwgeCwgeSApIHtcblxuXHQvLyB2ZXJ0ZXggaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXlcblx0dGhpcy5pID0gaTtcblxuXHQvLyB2ZXJ0ZXggY29vcmRpbmF0ZXNcblx0dGhpcy54ID0geDtcblx0dGhpcy55ID0geTtcblxuXHQvLyBwcmV2aW91cyBhbmQgbmV4dCB2ZXJ0ZXggbm9kZXMgaW4gYSBwb2x5Z29uIHJpbmdcblx0dGhpcy5wcmV2ID0gbnVsbDtcblx0dGhpcy5uZXh0ID0gbnVsbDtcblxuXHQvLyB6LW9yZGVyIGN1cnZlIHZhbHVlXG5cdHRoaXMueiA9IG51bGw7XG5cblx0Ly8gcHJldmlvdXMgYW5kIG5leHQgbm9kZXMgaW4gei1vcmRlclxuXHR0aGlzLnByZXZaID0gbnVsbDtcblx0dGhpcy5uZXh0WiA9IG51bGw7XG5cblx0Ly8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcblx0dGhpcy5zdGVpbmVyID0gZmFsc2U7XG5cbn1cblxuZnVuY3Rpb24gc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkge1xuXG5cdHZhciBzdW0gPSAwO1xuXHRmb3IgKCB2YXIgaSA9IHN0YXJ0LCBqID0gZW5kIC0gZGltOyBpIDwgZW5kOyBpICs9IGRpbSApIHtcblxuXHRcdHN1bSArPSAoIGRhdGFbIGogXSAtIGRhdGFbIGkgXSApICogKCBkYXRhWyBpICsgMSBdICsgZGF0YVsgaiArIDEgXSApO1xuXHRcdGogPSBpO1xuXG5cdH1cblxuXHRyZXR1cm4gc3VtO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICovXG5cbnZhciBTaGFwZVV0aWxzID0ge1xuXG5cdC8vIGNhbGN1bGF0ZSBhcmVhIG9mIHRoZSBjb250b3VyIHBvbHlnb25cblxuXHRhcmVhOiBmdW5jdGlvbiAoIGNvbnRvdXIgKSB7XG5cblx0XHR2YXIgbiA9IGNvbnRvdXIubGVuZ3RoO1xuXHRcdHZhciBhID0gMC4wO1xuXG5cdFx0Zm9yICggdmFyIHAgPSBuIC0gMSwgcSA9IDA7IHEgPCBuOyBwID0gcSArKyApIHtcblxuXHRcdFx0YSArPSBjb250b3VyWyBwIF0ueCAqIGNvbnRvdXJbIHEgXS55IC0gY29udG91clsgcSBdLnggKiBjb250b3VyWyBwIF0ueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhICogMC41O1xuXG5cdH0sXG5cblx0aXNDbG9ja1dpc2U6IGZ1bmN0aW9uICggcHRzICkge1xuXG5cdFx0cmV0dXJuIFNoYXBlVXRpbHMuYXJlYSggcHRzICkgPCAwO1xuXG5cdH0sXG5cblx0dHJpYW5ndWxhdGVTaGFwZTogZnVuY3Rpb24gKCBjb250b3VyLCBob2xlcyApIHtcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IFtdOyAvLyBmbGF0IGFycmF5IG9mIHZlcnRpY2VzIGxpa2UgWyB4MCx5MCwgeDEseTEsIHgyLHkyLCAuLi4gXVxuXHRcdHZhciBob2xlSW5kaWNlcyA9IFtdOyAvLyBhcnJheSBvZiBob2xlIGluZGljZXNcblx0XHR2YXIgZmFjZXMgPSBbXTsgLy8gZmluYWwgYXJyYXkgb2YgdmVydGV4IGluZGljZXMgbGlrZSBbIFsgYSxiLGQgXSwgWyBiLGMsZCBdIF1cblxuXHRcdHJlbW92ZUR1cEVuZFB0cyggY29udG91ciApO1xuXHRcdGFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICk7XG5cblx0XHQvL1xuXG5cdFx0dmFyIGhvbGVJbmRleCA9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0aG9sZXMuZm9yRWFjaCggcmVtb3ZlRHVwRW5kUHRzICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGhvbGVJbmRpY2VzLnB1c2goIGhvbGVJbmRleCApO1xuXHRcdFx0aG9sZUluZGV4ICs9IGhvbGVzWyBpIF0ubGVuZ3RoO1xuXHRcdFx0YWRkQ29udG91ciggdmVydGljZXMsIGhvbGVzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgdHJpYW5nbGVzID0gRWFyY3V0LnRyaWFuZ3VsYXRlKCB2ZXJ0aWNlcywgaG9sZUluZGljZXMgKTtcblxuXHRcdC8vXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdGZhY2VzLnB1c2goIHRyaWFuZ2xlcy5zbGljZSggaSwgaSArIDMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhY2VzO1xuXG5cdH1cblxufTtcblxuZnVuY3Rpb24gcmVtb3ZlRHVwRW5kUHRzKCBwb2ludHMgKSB7XG5cblx0dmFyIGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdGlmICggbCA+IDIgJiYgcG9pbnRzWyBsIC0gMSBdLmVxdWFscyggcG9pbnRzWyAwIF0gKSApIHtcblxuXHRcdHBvaW50cy5wb3AoKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gYWRkQ29udG91ciggdmVydGljZXMsIGNvbnRvdXIgKSB7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY29udG91ci5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCBjb250b3VyWyBpIF0ueCApO1xuXHRcdHZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS55ICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICpcbiAqIENyZWF0ZXMgZXh0cnVkZWQgZ2VvbWV0cnkgZnJvbSBhIHBhdGggc2hhcGUuXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqXG4gKiAgY3VydmVTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgb24gdGhlIGN1cnZlc1xuICogIHN0ZXBzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBmb3Igei1zaWRlIGV4dHJ1c2lvbnMgLyB1c2VkIGZvciBzdWJkaXZpZGluZyBzZWdtZW50cyBvZiBleHRydWRlIHNwbGluZSB0b29cbiAqICBkZXB0aDogPGZsb2F0PiwgLy8gRGVwdGggdG8gZXh0cnVkZSB0aGUgc2hhcGVcbiAqXG4gKiAgYmV2ZWxFbmFibGVkOiA8Ym9vbD4sIC8vIHR1cm4gb24gYmV2ZWxcbiAqICBiZXZlbFRoaWNrbmVzczogPGZsb2F0PiwgLy8gaG93IGRlZXAgaW50byB0aGUgb3JpZ2luYWwgc2hhcGUgYmV2ZWwgZ29lc1xuICogIGJldmVsU2l6ZTogPGZsb2F0PiwgLy8gaG93IGZhciBmcm9tIHNoYXBlIG91dGxpbmUgKGluY2x1ZGluZyBiZXZlbE9mZnNldCkgaXMgYmV2ZWxcbiAqICBiZXZlbE9mZnNldDogPGZsb2F0PiwgLy8gaG93IGZhciBmcm9tIHNoYXBlIG91dGxpbmUgZG9lcyBiZXZlbCBzdGFydFxuICogIGJldmVsU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgYmV2ZWwgbGF5ZXJzXG4gKlxuICogIGV4dHJ1ZGVQYXRoOiA8VEhSRUUuQ3VydmU+IC8vIGN1cnZlIHRvIGV4dHJ1ZGUgc2hhcGUgYWxvbmdcbiAqXG4gKiAgVVZHZW5lcmF0b3I6IDxPYmplY3Q+IC8vIG9iamVjdCB0aGF0IHByb3ZpZGVzIFVWIGdlbmVyYXRvciBmdW5jdGlvbnNcbiAqXG4gKiB9XG4gKi9cblxuLy8gRXh0cnVkZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIEV4dHJ1ZGVHZW9tZXRyeSggc2hhcGVzLCBvcHRpb25zICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRXh0cnVkZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0c2hhcGVzOiBzaGFwZXMsXG5cdFx0b3B0aW9uczogb3B0aW9uc1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIG9wdGlvbnMgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRXh0cnVkZUdlb21ldHJ5O1xuXG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXHR2YXIgb3B0aW9ucyA9IHRoaXMucGFyYW1ldGVycy5vcHRpb25zO1xuXG5cdHJldHVybiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApO1xuXG59O1xuXG4vLyBFeHRydWRlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIG9wdGlvbnMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdFeHRydWRlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRvcHRpb25zOiBvcHRpb25zXG5cdH07XG5cblx0c2hhcGVzID0gQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPyBzaGFwZXMgOiBbIHNoYXBlcyBdO1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dmFyIHZlcnRpY2VzQXJyYXkgPSBbXTtcblx0dmFyIHV2QXJyYXkgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXHRcdGFkZFNoYXBlKCBzaGFwZSApO1xuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXNBcnJheSwgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZBcnJheSwgMiApICk7XG5cblx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdC8vIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIGFkZFNoYXBlKCBzaGFwZSApIHtcblxuXHRcdHZhciBwbGFjZWhvbGRlciA9IFtdO1xuXG5cdFx0Ly8gb3B0aW9uc1xuXG5cdFx0dmFyIGN1cnZlU2VnbWVudHMgPSBvcHRpb25zLmN1cnZlU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY3VydmVTZWdtZW50cyA6IDEyO1xuXHRcdHZhciBzdGVwcyA9IG9wdGlvbnMuc3RlcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlcHMgOiAxO1xuXHRcdHZhciBkZXB0aCA9IG9wdGlvbnMuZGVwdGggIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGggOiAxMDA7XG5cblx0XHR2YXIgYmV2ZWxFbmFibGVkID0gb3B0aW9ucy5iZXZlbEVuYWJsZWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxFbmFibGVkIDogdHJ1ZTtcblx0XHR2YXIgYmV2ZWxUaGlja25lc3MgPSBvcHRpb25zLmJldmVsVGhpY2tuZXNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsVGhpY2tuZXNzIDogNjtcblx0XHR2YXIgYmV2ZWxTaXplID0gb3B0aW9ucy5iZXZlbFNpemUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxTaXplIDogYmV2ZWxUaGlja25lc3MgLSAyO1xuXHRcdHZhciBiZXZlbE9mZnNldCA9IG9wdGlvbnMuYmV2ZWxPZmZzZXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxPZmZzZXQgOiAwO1xuXHRcdHZhciBiZXZlbFNlZ21lbnRzID0gb3B0aW9ucy5iZXZlbFNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2VnbWVudHMgOiAzO1xuXG5cdFx0dmFyIGV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aDtcblxuXHRcdHZhciB1dmdlbiA9IG9wdGlvbnMuVVZHZW5lcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuVVZHZW5lcmF0b3IgOiBXb3JsZFVWR2VuZXJhdG9yO1xuXG5cdFx0Ly8gZGVwcmVjYXRlZCBvcHRpb25zXG5cblx0XHRpZiAoIG9wdGlvbnMuYW1vdW50ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogYW1vdW50IGhhcyBiZWVuIHJlbmFtZWQgdG8gZGVwdGguJyApO1xuXHRcdFx0ZGVwdGggPSBvcHRpb25zLmFtb3VudDtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgZXh0cnVkZVB0cywgZXh0cnVkZUJ5UGF0aCA9IGZhbHNlO1xuXHRcdHZhciBzcGxpbmVUdWJlLCBiaW5vcm1hbCwgbm9ybWFsLCBwb3NpdGlvbjI7XG5cblx0XHRpZiAoIGV4dHJ1ZGVQYXRoICkge1xuXG5cdFx0XHRleHRydWRlUHRzID0gZXh0cnVkZVBhdGguZ2V0U3BhY2VkUG9pbnRzKCBzdGVwcyApO1xuXG5cdFx0XHRleHRydWRlQnlQYXRoID0gdHJ1ZTtcblx0XHRcdGJldmVsRW5hYmxlZCA9IGZhbHNlOyAvLyBiZXZlbHMgbm90IHN1cHBvcnRlZCBmb3IgcGF0aCBleHRydXNpb25cblxuXHRcdFx0Ly8gU0VUVVAgVE5CIHZhcmlhYmxlc1xuXG5cdFx0XHQvLyBUT0RPMSAtIGhhdmUgYSAuaXNDbG9zZWQgaW4gc3BsaW5lP1xuXG5cdFx0XHRzcGxpbmVUdWJlID0gZXh0cnVkZVBhdGguY29tcHV0ZUZyZW5ldEZyYW1lcyggc3RlcHMsIGZhbHNlICk7XG5cblx0XHRcdC8vIGNvbnNvbGUubG9nKHNwbGluZVR1YmUsICdzcGxpbmVUdWJlJywgc3BsaW5lVHViZS5ub3JtYWxzLmxlbmd0aCwgJ3N0ZXBzJywgc3RlcHMsICdleHRydWRlUHRzJywgZXh0cnVkZVB0cy5sZW5ndGgpO1xuXG5cdFx0XHRiaW5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0cG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdC8vIFNhZmVndWFyZHMgaWYgYmV2ZWxzIGFyZSBub3QgZW5hYmxlZFxuXG5cdFx0aWYgKCAhIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0YmV2ZWxTZWdtZW50cyA9IDA7XG5cdFx0XHRiZXZlbFRoaWNrbmVzcyA9IDA7XG5cdFx0XHRiZXZlbFNpemUgPSAwO1xuXHRcdFx0YmV2ZWxPZmZzZXQgPSAwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gVmFyaWFibGVzIGluaXRpYWxpemF0aW9uXG5cblx0XHR2YXIgYWhvbGUsIGgsIGhsOyAvLyBsb29waW5nIG9mIGhvbGVzXG5cblx0XHR2YXIgc2hhcGVQb2ludHMgPSBzaGFwZS5leHRyYWN0UG9pbnRzKCBjdXJ2ZVNlZ21lbnRzICk7XG5cblx0XHR2YXIgdmVydGljZXMgPSBzaGFwZVBvaW50cy5zaGFwZTtcblx0XHR2YXIgaG9sZXMgPSBzaGFwZVBvaW50cy5ob2xlcztcblxuXHRcdHZhciByZXZlcnNlID0gISBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCB2ZXJ0aWNlcyApO1xuXG5cdFx0aWYgKCByZXZlcnNlICkge1xuXG5cdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdFx0Ly8gTWF5YmUgd2Ugc2hvdWxkIGFsc28gY2hlY2sgaWYgaG9sZXMgYXJlIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24sIGp1c3QgdG8gYmUgc2FmZSAuLi5cblxuXHRcdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXG5cdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggYWhvbGUgKSApIHtcblxuXHRcdFx0XHRcdGhvbGVzWyBoIF0gPSBhaG9sZS5yZXZlcnNlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblxuXHRcdHZhciBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggdmVydGljZXMsIGhvbGVzICk7XG5cblx0XHQvKiBWZXJ0aWNlcyAqL1xuXG5cdFx0dmFyIGNvbnRvdXIgPSB2ZXJ0aWNlczsgLy8gdmVydGljZXMgaGFzIGFsbCBwb2ludHMgYnV0IGNvbnRvdXIgaGFzIG9ubHkgcG9pbnRzIG9mIGNpcmN1bWZlcmVuY2VcblxuXHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdHZlcnRpY2VzID0gdmVydGljZXMuY29uY2F0KCBhaG9sZSApO1xuXG5cdFx0fVxuXG5cblx0XHRmdW5jdGlvbiBzY2FsZVB0MiggcHQsIHZlYywgc2l6ZSApIHtcblxuXHRcdFx0aWYgKCAhIHZlYyApIGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiB2ZWMgZG9lcyBub3QgZXhpc3RcIiApO1xuXG5cdFx0XHRyZXR1cm4gdmVjLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoIHNpemUgKS5hZGQoIHB0ICk7XG5cblx0XHR9XG5cblx0XHR2YXIgYiwgYnMsIHQsIHosXG5cdFx0XHR2ZXJ0LCB2bGVuID0gdmVydGljZXMubGVuZ3RoLFxuXHRcdFx0ZmFjZSwgZmxlbiA9IGZhY2VzLmxlbmd0aDtcblxuXG5cdFx0Ly8gRmluZCBkaXJlY3Rpb25zIGZvciBwb2ludCBtb3ZlbWVudFxuXG5cblx0XHRmdW5jdGlvbiBnZXRCZXZlbFZlYyggaW5QdCwgaW5QcmV2LCBpbk5leHQgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGVzIGZvciBpblB0IHRoZSBjb3JyZXNwb25kaW5nIHBvaW50IGluUHQnIG9uIGEgbmV3IGNvbnRvdXJcblx0XHRcdC8vICAgc2hpZnRlZCBieSAxIHVuaXQgKGxlbmd0aCBvZiBub3JtYWxpemVkIHZlY3RvcikgdG8gdGhlIGxlZnRcblx0XHRcdC8vIGlmIHdlIHdhbGsgYWxvbmcgY29udG91ciBjbG9ja3dpc2UsIHRoaXMgbmV3IGNvbnRvdXIgaXMgb3V0c2lkZSB0aGUgb2xkIG9uZVxuXHRcdFx0Ly9cblx0XHRcdC8vIGluUHQnIGlzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byBsaW5lcyBwYXJhbGxlbCB0byB0aGUgdHdvXG5cdFx0XHQvLyAgYWRqYWNlbnQgZWRnZXMgb2YgaW5QdCBhdCBhIGRpc3RhbmNlIG9mIDEgdW5pdCBvbiB0aGUgbGVmdCBzaWRlLlxuXG5cdFx0XHR2YXIgdl90cmFuc194LCB2X3RyYW5zX3ksIHNocmlua19ieTsgLy8gcmVzdWx0aW5nIHRyYW5zbGF0aW9uIHZlY3RvciBmb3IgaW5QdFxuXG5cdFx0XHQvLyBnb29kIHJlYWRpbmcgZm9yIGdlb21ldHJ5IGFsZ29yaXRobXMgKGhlcmU6IGxpbmUtbGluZSBpbnRlcnNlY3Rpb24pXG5cdFx0XHQvLyBodHRwOi8vZ2VvbWFsZ29yaXRobXMuY29tL2EwNS1faW50ZXJzZWN0LTEuaHRtbFxuXG5cdFx0XHR2YXIgdl9wcmV2X3ggPSBpblB0LnggLSBpblByZXYueCxcblx0XHRcdFx0dl9wcmV2X3kgPSBpblB0LnkgLSBpblByZXYueTtcblx0XHRcdHZhciB2X25leHRfeCA9IGluTmV4dC54IC0gaW5QdC54LFxuXHRcdFx0XHR2X25leHRfeSA9IGluTmV4dC55IC0gaW5QdC55O1xuXG5cdFx0XHR2YXIgdl9wcmV2X2xlbnNxID0gKCB2X3ByZXZfeCAqIHZfcHJldl94ICsgdl9wcmV2X3kgKiB2X3ByZXZfeSApO1xuXG5cdFx0XHQvLyBjaGVjayBmb3IgY29sbGluZWFyIGVkZ2VzXG5cdFx0XHR2YXIgY29sbGluZWFyMCA9ICggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggY29sbGluZWFyMCApID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0Ly8gbm90IGNvbGxpbmVhclxuXG5cdFx0XHRcdC8vIGxlbmd0aCBvZiB2ZWN0b3JzIGZvciBub3JtYWxpemluZ1xuXG5cdFx0XHRcdHZhciB2X3ByZXZfbGVuID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgKTtcblx0XHRcdFx0dmFyIHZfbmV4dF9sZW4gPSBNYXRoLnNxcnQoIHZfbmV4dF94ICogdl9uZXh0X3ggKyB2X25leHRfeSAqIHZfbmV4dF95ICk7XG5cblx0XHRcdFx0Ly8gc2hpZnQgYWRqYWNlbnQgcG9pbnRzIGJ5IHVuaXQgdmVjdG9ycyB0byB0aGUgbGVmdFxuXG5cdFx0XHRcdHZhciBwdFByZXZTaGlmdF94ID0gKCBpblByZXYueCAtIHZfcHJldl95IC8gdl9wcmV2X2xlbiApO1xuXHRcdFx0XHR2YXIgcHRQcmV2U2hpZnRfeSA9ICggaW5QcmV2LnkgKyB2X3ByZXZfeCAvIHZfcHJldl9sZW4gKTtcblxuXHRcdFx0XHR2YXIgcHROZXh0U2hpZnRfeCA9ICggaW5OZXh0LnggLSB2X25leHRfeSAvIHZfbmV4dF9sZW4gKTtcblx0XHRcdFx0dmFyIHB0TmV4dFNoaWZ0X3kgPSAoIGluTmV4dC55ICsgdl9uZXh0X3ggLyB2X25leHRfbGVuICk7XG5cblx0XHRcdFx0Ly8gc2NhbGluZyBmYWN0b3IgZm9yIHZfcHJldiB0byBpbnRlcnNlY3Rpb24gcG9pbnRcblxuXHRcdFx0XHR2YXIgc2YgPSAoICggcHROZXh0U2hpZnRfeCAtIHB0UHJldlNoaWZ0X3ggKSAqIHZfbmV4dF95IC1cblx0XHRcdFx0XHRcdCggcHROZXh0U2hpZnRfeSAtIHB0UHJldlNoaWZ0X3kgKSAqIHZfbmV4dF94ICkgL1xuXHRcdFx0XHRcdCggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0XHQvLyB2ZWN0b3IgZnJvbSBpblB0IHRvIGludGVyc2VjdGlvbiBwb2ludFxuXG5cdFx0XHRcdHZfdHJhbnNfeCA9ICggcHRQcmV2U2hpZnRfeCArIHZfcHJldl94ICogc2YgLSBpblB0LnggKTtcblx0XHRcdFx0dl90cmFuc195ID0gKCBwdFByZXZTaGlmdF95ICsgdl9wcmV2X3kgKiBzZiAtIGluUHQueSApO1xuXG5cdFx0XHRcdC8vIERvbid0IG5vcm1hbGl6ZSEsIG90aGVyd2lzZSBzaGFycCBjb3JuZXJzIGJlY29tZSB1Z2x5XG5cdFx0XHRcdC8vICBidXQgcHJldmVudCBjcmF6eSBzcGlrZXNcblx0XHRcdFx0dmFyIHZfdHJhbnNfbGVuc3EgPSAoIHZfdHJhbnNfeCAqIHZfdHJhbnNfeCArIHZfdHJhbnNfeSAqIHZfdHJhbnNfeSApO1xuXHRcdFx0XHRpZiAoIHZfdHJhbnNfbGVuc3EgPD0gMiApIHtcblxuXHRcdFx0XHRcdHJldHVybiBuZXcgVmVjdG9yMiggdl90cmFuc194LCB2X3RyYW5zX3kgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c2hyaW5rX2J5ID0gTWF0aC5zcXJ0KCB2X3RyYW5zX2xlbnNxIC8gMiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBoYW5kbGUgc3BlY2lhbCBjYXNlIG9mIGNvbGxpbmVhciBlZGdlc1xuXG5cdFx0XHRcdHZhciBkaXJlY3Rpb25fZXEgPSBmYWxzZTsgLy8gYXNzdW1lczogb3Bwb3NpdGVcblx0XHRcdFx0aWYgKCB2X3ByZXZfeCA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0aWYgKCB2X25leHRfeCA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHZfcHJldl94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB2X25leHRfeCA8IC0gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBNYXRoLnNpZ24oIHZfcHJldl95ICkgPT09IE1hdGguc2lnbiggdl9uZXh0X3kgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGlyZWN0aW9uX2VxICkge1xuXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzZXF1ZW5jZVwiKTtcblx0XHRcdFx0XHR2X3RyYW5zX3ggPSAtIHZfcHJldl95O1xuXHRcdFx0XHRcdHZfdHJhbnNfeSA9IHZfcHJldl94O1xuXHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiV2FybmluZzogbGluZXMgYXJlIGEgc3RyYWlnaHQgc3Bpa2VcIik7XG5cdFx0XHRcdFx0dl90cmFuc194ID0gdl9wcmV2X3g7XG5cdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3k7XG5cdFx0XHRcdFx0c2hyaW5rX2J5ID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgLyAyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMiggdl90cmFuc194IC8gc2hyaW5rX2J5LCB2X3RyYW5zX3kgLyBzaHJpbmtfYnkgKTtcblxuXHRcdH1cblxuXG5cdFx0dmFyIGNvbnRvdXJNb3ZlbWVudHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkgKyssIGogKyssIGsgKysgKSB7XG5cblx0XHRcdGlmICggaiA9PT0gaWwgKSBqID0gMDtcblx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcblxuXHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxuXHRcdFx0Ly8gY29uc29sZS5sb2coJ2ksaixrJywgaSwgaiAsIGspXG5cblx0XHRcdGNvbnRvdXJNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBjb250b3VyWyBpIF0sIGNvbnRvdXJbIGogXSwgY29udG91clsgayBdICk7XG5cblx0XHR9XG5cblx0XHR2YXIgaG9sZXNNb3ZlbWVudHMgPSBbXSxcblx0XHRcdG9uZUhvbGVNb3ZlbWVudHMsIHZlcnRpY2VzTW92ZW1lbnRzID0gY29udG91ck1vdmVtZW50cy5jb25jYXQoKTtcblxuXHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBbXTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoLCBqID0gaWwgLSAxLCBrID0gaSArIDE7IGkgPCBpbDsgaSArKywgaiArKywgayArKyApIHtcblxuXHRcdFx0XHRpZiAoIGogPT09IGlsICkgaiA9IDA7XG5cdFx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcblxuXHRcdFx0XHQvLyAgKGopLS0tKGkpLS0tKGspXG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBhaG9sZVsgaSBdLCBhaG9sZVsgaiBdLCBhaG9sZVsgayBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aG9sZXNNb3ZlbWVudHMucHVzaCggb25lSG9sZU1vdmVtZW50cyApO1xuXHRcdFx0dmVydGljZXNNb3ZlbWVudHMgPSB2ZXJ0aWNlc01vdmVtZW50cy5jb25jYXQoIG9uZUhvbGVNb3ZlbWVudHMgKTtcblxuXHRcdH1cblxuXG5cdFx0Ly8gTG9vcCBiZXZlbFNlZ21lbnRzLCAxIGZvciB0aGUgZnJvbnQsIDEgZm9yIHRoZSBiYWNrXG5cblx0XHRmb3IgKCBiID0gMDsgYiA8IGJldmVsU2VnbWVudHM7IGIgKysgKSB7XG5cblx0XHRcdC8vZm9yICggYiA9IGJldmVsU2VnbWVudHM7IGIgPiAwOyBiIC0tICkge1xuXG5cdFx0XHR0ID0gYiAvIGJldmVsU2VnbWVudHM7XG5cdFx0XHR6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7XG5cdFx0XHRicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKSArIGJldmVsT2Zmc2V0O1xuXG5cdFx0XHQvLyBjb250cmFjdCBzaGFwZVxuXG5cdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZlcnQgPSBzY2FsZVB0MiggY29udG91clsgaSBdLCBjb250b3VyTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIC0geiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBob2xlc01vdmVtZW50c1sgaCBdO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRicyA9IGJldmVsU2l6ZSArIGJldmVsT2Zmc2V0O1xuXG5cdFx0Ly8gQmFjayBmYWNpbmcgdmVydGljZXNcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcblxuXHRcdFx0dmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTtcblxuXHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyB2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIDAgXS55LCBleHRydWRlUHRzWyAwIF0ueCApO1xuXG5cdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcblx0XHRcdFx0Ymlub3JtYWwuY29weSggc3BsaW5lVHViZS5iaW5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnkgKTtcblxuXHRcdFx0XHRwb3NpdGlvbjIuY29weSggZXh0cnVkZVB0c1sgMCBdICkuYWRkKCBub3JtYWwgKS5hZGQoIGJpbm9ybWFsICk7XG5cblx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBBZGQgc3RlcHBlZCB2ZXJ0aWNlcy4uLlxuXHRcdC8vIEluY2x1ZGluZyBmcm9udCBmYWNpbmcgdmVydGljZXNcblxuXHRcdHZhciBzO1xuXG5cdFx0Zm9yICggcyA9IDE7IHMgPD0gc3RlcHM7IHMgKysgKSB7XG5cblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHR2ZXJ0ID0gYmV2ZWxFbmFibGVkID8gc2NhbGVQdDIoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzTW92ZW1lbnRzWyBpIF0sIGJzICkgOiB2ZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoIC8gc3RlcHMgKiBzICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgcyAtIDEgXS55LCBleHRydWRlUHRzWyBzIC0gMSBdLnggKTtcblxuXHRcdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIHMgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcblx0XHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xuXG5cdFx0XHRcdFx0cG9zaXRpb24yLmNvcHkoIGV4dHJ1ZGVQdHNbIHMgXSApLmFkZCggbm9ybWFsICkuYWRkKCBiaW5vcm1hbCApO1xuXG5cdFx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cblx0XHQvLyBBZGQgYmV2ZWwgc2VnbWVudHMgcGxhbmVzXG5cblx0XHQvL2ZvciAoIGIgPSAxOyBiIDw9IGJldmVsU2VnbWVudHM7IGIgKysgKSB7XG5cdFx0Zm9yICggYiA9IGJldmVsU2VnbWVudHMgLSAxOyBiID49IDA7IGIgLS0gKSB7XG5cblx0XHRcdHQgPSBiIC8gYmV2ZWxTZWdtZW50cztcblx0XHRcdHogPSBiZXZlbFRoaWNrbmVzcyAqIE1hdGguY29zKCB0ICogTWF0aC5QSSAvIDIgKTtcblx0XHRcdGJzID0gYmV2ZWxTaXplICogTWF0aC5zaW4oIHQgKiBNYXRoLlBJIC8gMiApICsgYmV2ZWxPZmZzZXQ7XG5cblx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXG5cblx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoICsgeiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBob2xlc01vdmVtZW50c1sgaCBdO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoICsgeiApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzdGVwcyAtIDEgXS55LCBleHRydWRlUHRzWyBzdGVwcyAtIDEgXS54ICsgeiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0LyogRmFjZXMgKi9cblxuXHRcdC8vIFRvcCBhbmQgYm90dG9tIGZhY2VzXG5cblx0XHRidWlsZExpZEZhY2VzKCk7XG5cblx0XHQvLyBTaWRlcyBmYWNlc1xuXG5cdFx0YnVpbGRTaWRlRmFjZXMoKTtcblxuXG5cdFx0Ly8vLy8gIEludGVybmFsIGZ1bmN0aW9uc1xuXG5cdFx0ZnVuY3Rpb24gYnVpbGRMaWRGYWNlcygpIHtcblxuXHRcdFx0dmFyIHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXG5cdFx0XHRpZiAoIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHR2YXIgbGF5ZXIgPSAwOyAvLyBzdGVwcyArIDFcblx0XHRcdFx0dmFyIG9mZnNldCA9IHZsZW4gKiBsYXllcjtcblxuXHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMiBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDAgXSArIG9mZnNldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsYXllciA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7XG5cdFx0XHRcdG9mZnNldCA9IHZsZW4gKiBsYXllcjtcblxuXHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDIgXSArIG9mZnNldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMiBdLCBmYWNlWyAxIF0sIGZhY2VbIDAgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAxIF0gKyB2bGVuICogc3RlcHMsIGZhY2VbIDIgXSArIHZsZW4gKiBzdGVwcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggc3RhcnQsIHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMyAtIHN0YXJ0LCAwICk7XG5cblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgZmFjZXMgZm9yIHRoZSB6LXNpZGVzIG9mIHRoZSBzaGFwZVxuXG5cdFx0ZnVuY3Rpb24gYnVpbGRTaWRlRmFjZXMoKSB7XG5cblx0XHRcdHZhciBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciBsYXllcm9mZnNldCA9IDA7XG5cdFx0XHRzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICk7XG5cdFx0XHRsYXllcm9mZnNldCArPSBjb250b3VyLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXHRcdFx0XHRzaWRld2FsbHMoIGFob2xlLCBsYXllcm9mZnNldCApO1xuXG5cdFx0XHRcdC8vLCB0cnVlXG5cdFx0XHRcdGxheWVyb2Zmc2V0ICs9IGFob2xlLmxlbmd0aDtcblxuXHRcdFx0fVxuXG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBzdGFydCwgdmVydGljZXNBcnJheS5sZW5ndGggLyAzIC0gc3RhcnQsIDEgKTtcblxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2lkZXdhbGxzKCBjb250b3VyLCBsYXllcm9mZnNldCApIHtcblxuXHRcdFx0dmFyIGosIGs7XG5cdFx0XHRpID0gY29udG91ci5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggLS0gaSA+PSAwICkge1xuXG5cdFx0XHRcdGogPSBpO1xuXHRcdFx0XHRrID0gaSAtIDE7XG5cdFx0XHRcdGlmICggayA8IDAgKSBrID0gY29udG91ci5sZW5ndGggLSAxO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2InLCBpLGosIGktMSwgayx2ZXJ0aWNlcy5sZW5ndGgpO1xuXG5cdFx0XHRcdHZhciBzID0gMCxcblx0XHRcdFx0XHRzbCA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7XG5cblx0XHRcdFx0Zm9yICggcyA9IDA7IHMgPCBzbDsgcyArKyApIHtcblxuXHRcdFx0XHRcdHZhciBzbGVuMSA9IHZsZW4gKiBzO1xuXHRcdFx0XHRcdHZhciBzbGVuMiA9IHZsZW4gKiAoIHMgKyAxICk7XG5cblx0XHRcdFx0XHR2YXIgYSA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4xLFxuXHRcdFx0XHRcdFx0YiA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4xLFxuXHRcdFx0XHRcdFx0YyA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4yLFxuXHRcdFx0XHRcdFx0ZCA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4yO1xuXG5cdFx0XHRcdFx0ZjQoIGEsIGIsIGMsIGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHYoIHgsIHksIHogKSB7XG5cblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHggKTtcblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHkgKTtcblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHogKTtcblxuXHRcdH1cblxuXG5cdFx0ZnVuY3Rpb24gZjMoIGEsIGIsIGMgKSB7XG5cblx0XHRcdGFkZFZlcnRleCggYSApO1xuXHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblxuXHRcdFx0dmFyIG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciB1dnMgPSB1dmdlbi5nZW5lcmF0ZVRvcFVWKCBzY29wZSwgdmVydGljZXNBcnJheSwgbmV4dEluZGV4IC0gMywgbmV4dEluZGV4IC0gMiwgbmV4dEluZGV4IC0gMSApO1xuXG5cdFx0XHRhZGRVViggdXZzWyAwIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMiBdICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBmNCggYSwgYiwgYywgZCApIHtcblxuXHRcdFx0YWRkVmVydGV4KCBhICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcblx0XHRcdGFkZFZlcnRleCggZCApO1xuXG5cdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcblx0XHRcdGFkZFZlcnRleCggYyApO1xuXHRcdFx0YWRkVmVydGV4KCBkICk7XG5cblxuXHRcdFx0dmFyIG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciB1dnMgPSB1dmdlbi5nZW5lcmF0ZVNpZGVXYWxsVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSA2LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XG5cblx0XHRcdGFkZFVWKCB1dnNbIDAgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAzIF0gKTtcblxuXHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDMgXSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWRkVmVydGV4KCBpbmRleCApIHtcblxuXHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMCBdICk7XG5cdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAxIF0gKTtcblx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDIgXSApO1xuXG5cdFx0fVxuXG5cblx0XHRmdW5jdGlvbiBhZGRVViggdmVjdG9yMiApIHtcblxuXHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnggKTtcblx0XHRcdHV2QXJyYXkucHVzaCggdmVjdG9yMi55ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFeHRydWRlQnVmZmVyR2VvbWV0cnk7XG5cbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cdHZhciBvcHRpb25zID0gdGhpcy5wYXJhbWV0ZXJzLm9wdGlvbnM7XG5cblx0cmV0dXJuIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICk7XG5cbn07XG5cbi8vXG5cbnZhciBXb3JsZFVWR2VuZXJhdG9yID0ge1xuXG5cdGdlbmVyYXRlVG9wVVY6IGZ1bmN0aW9uICggZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDICkge1xuXG5cdFx0dmFyIGFfeCA9IHZlcnRpY2VzWyBpbmRleEEgKiAzIF07XG5cdFx0dmFyIGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xuXHRcdHZhciBiX3ggPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyBdO1xuXHRcdHZhciBiX3kgPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDEgXTtcblx0XHR2YXIgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHR2YXIgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0bmV3IFZlY3RvcjIoIGFfeCwgYV95ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYl94LCBiX3kgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBjX3gsIGNfeSApXG5cdFx0XTtcblxuXHR9LFxuXG5cdGdlbmVyYXRlU2lkZVdhbGxVVjogZnVuY3Rpb24gKCBnZW9tZXRyeSwgdmVydGljZXMsIGluZGV4QSwgaW5kZXhCLCBpbmRleEMsIGluZGV4RCApIHtcblxuXHRcdHZhciBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdO1xuXHRcdHZhciBhX3kgPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDEgXTtcblx0XHR2YXIgYV96ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAyIF07XG5cdFx0dmFyIGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XG5cdFx0dmFyIGJfeSA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMSBdO1xuXHRcdHZhciBiX3ogPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDIgXTtcblx0XHR2YXIgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHR2YXIgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07XG5cdFx0dmFyIGNfeiA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMiBdO1xuXHRcdHZhciBkX3ggPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyBdO1xuXHRcdHZhciBkX3kgPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDEgXTtcblx0XHR2YXIgZF96ID0gdmVydGljZXNbIGluZGV4RCAqIDMgKyAyIF07XG5cblx0XHRpZiAoIE1hdGguYWJzKCBhX3kgLSBiX3kgKSA8IDAuMDEgKSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY194LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3gsIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3ksIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeSwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY195LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3ksIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH1cblxuXHR9XG59O1xuXG5mdW5jdGlvbiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApIHtcblxuXHQvL1xuXG5cdGRhdGEuc2hhcGVzID0gW107XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGkgXTtcblxuXHRcdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGUudXVpZCApO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZXMudXVpZCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGlmICggb3B0aW9ucy5leHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkgZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aC50b0pTT04oKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufVxuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogVGV4dCA9IDNEIFRleHRcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGZvbnQ6IDxUSFJFRS5Gb250PiwgLy8gZm9udFxuICpcbiAqICBzaXplOiA8ZmxvYXQ+LCAvLyBzaXplIG9mIHRoZSB0ZXh0XG4gKiAgaGVpZ2h0OiA8ZmxvYXQ+LCAvLyB0aGlja25lc3MgdG8gZXh0cnVkZSB0ZXh0XG4gKiAgY3VydmVTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgb24gdGhlIGN1cnZlc1xuICpcbiAqICBiZXZlbEVuYWJsZWQ6IDxib29sPiwgLy8gdHVybiBvbiBiZXZlbFxuICogIGJldmVsVGhpY2tuZXNzOiA8ZmxvYXQ+LCAvLyBob3cgZGVlcCBpbnRvIHRleHQgYmV2ZWwgZ29lc1xuICogIGJldmVsU2l6ZTogPGZsb2F0PiwgLy8gaG93IGZhciBmcm9tIHRleHQgb3V0bGluZSAoaW5jbHVkaW5nIGJldmVsT2Zmc2V0KSBpcyBiZXZlbFxuICogIGJldmVsT2Zmc2V0OiA8ZmxvYXQ+IC8vIGhvdyBmYXIgZnJvbSB0ZXh0IG91dGxpbmUgZG9lcyBiZXZlbCBzdGFydFxuICogfVxuICovXG5cbi8vIFRleHRHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXh0R2VvbWV0cnkoIHRleHQsIHBhcmFtZXRlcnMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXh0R2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR0ZXh0OiB0ZXh0LFxuXHRcdHBhcmFtZXRlcnM6IHBhcmFtZXRlcnNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRleHRCdWZmZXJHZW9tZXRyeSggdGV4dCwgcGFyYW1ldGVycyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRleHRHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRleHRHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0R2VvbWV0cnk7XG5cbi8vIFRleHRCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXh0QnVmZmVyR2VvbWV0cnkoIHRleHQsIHBhcmFtZXRlcnMgKSB7XG5cblx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XG5cblx0dmFyIGZvbnQgPSBwYXJhbWV0ZXJzLmZvbnQ7XG5cblx0aWYgKCAhICggZm9udCAmJiBmb250LmlzRm9udCApICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlRleHRHZW9tZXRyeTogZm9udCBwYXJhbWV0ZXIgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkZvbnQuJyApO1xuXHRcdHJldHVybiBuZXcgR2VvbWV0cnkoKTtcblxuXHR9XG5cblx0dmFyIHNoYXBlcyA9IGZvbnQuZ2VuZXJhdGVTaGFwZXMoIHRleHQsIHBhcmFtZXRlcnMuc2l6ZSApO1xuXG5cdC8vIHRyYW5zbGF0ZSBwYXJhbWV0ZXJzIHRvIEV4dHJ1ZGVHZW9tZXRyeSBBUElcblxuXHRwYXJhbWV0ZXJzLmRlcHRoID0gcGFyYW1ldGVycy5oZWlnaHQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuaGVpZ2h0IDogNTA7XG5cblx0Ly8gZGVmYXVsdHNcblxuXHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxUaGlja25lc3MgPT09IHVuZGVmaW5lZCApIHBhcmFtZXRlcnMuYmV2ZWxUaGlja25lc3MgPSAxMDtcblx0aWYgKCBwYXJhbWV0ZXJzLmJldmVsU2l6ZSA9PT0gdW5kZWZpbmVkICkgcGFyYW1ldGVycy5iZXZlbFNpemUgPSA4O1xuXHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxFbmFibGVkID09PSB1bmRlZmluZWQgKSBwYXJhbWV0ZXJzLmJldmVsRW5hYmxlZCA9IGZhbHNlO1xuXG5cdEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCBzaGFwZXMsIHBhcmFtZXRlcnMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVGV4dEJ1ZmZlckdlb21ldHJ5JztcblxufVxuXG5UZXh0QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuVGV4dEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHRCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFNwaGVyZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIFNwaGVyZUdlb21ldHJ5KCByYWRpdXMsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NwaGVyZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBTcGhlcmVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5TcGhlcmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNwaGVyZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwaGVyZUdlb21ldHJ5O1xuXG4vLyBTcGhlcmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBTcGhlcmVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTcGhlcmVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aCxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXG5cdHdpZHRoU2VnbWVudHMgPSBNYXRoLm1heCggMywgTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApIHx8IDggKTtcblx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLm1heCggMiwgTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCA2ICk7XG5cblx0cGhpU3RhcnQgPSBwaGlTdGFydCAhPT0gdW5kZWZpbmVkID8gcGhpU3RhcnQgOiAwO1xuXHRwaGlMZW5ndGggPSBwaGlMZW5ndGggIT09IHVuZGVmaW5lZCA/IHBoaUxlbmd0aCA6IE1hdGguUEkgKiAyO1xuXG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMDtcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJO1xuXG5cdHZhciB0aGV0YUVuZCA9IE1hdGgubWluKCB0aGV0YVN0YXJ0ICsgdGhldGFMZW5ndGgsIE1hdGguUEkgKTtcblxuXHR2YXIgaXgsIGl5O1xuXG5cdHZhciBpbmRleCA9IDA7XG5cdHZhciBncmlkID0gW107XG5cblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDw9IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcblxuXHRcdHZhciB2ZXJ0aWNlc1JvdyA9IFtdO1xuXG5cdFx0dmFyIHYgPSBpeSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0Ly8gc3BlY2lhbCBjYXNlIGZvciB0aGUgcG9sZXNcblxuXHRcdHZhciB1T2Zmc2V0ID0gMDtcblxuXHRcdGlmICggaXkgPT0gMCAmJiB0aGV0YVN0YXJ0ID09IDAgKSB7XG5cblx0XHRcdHVPZmZzZXQgPSAwLjUgLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0fSBlbHNlIGlmICggaXkgPT0gaGVpZ2h0U2VnbWVudHMgJiYgdGhldGFFbmQgPT0gTWF0aC5QSSApIHtcblxuXHRcdFx0dU9mZnNldCA9IC0gMC41IC8gd2lkdGhTZWdtZW50cztcblxuXHRcdH1cblxuXHRcdGZvciAoIGl4ID0gMDsgaXggPD0gd2lkdGhTZWdtZW50czsgaXggKysgKSB7XG5cblx0XHRcdHZhciB1ID0gaXggLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSAtIHJhZGl1cyAqIE1hdGguY29zKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIE1hdGguc2luKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbC5jb3B5KCB2ZXJ0ZXggKS5ub3JtYWxpemUoKTtcblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggdSArIHVPZmZzZXQsIDEgLSB2ICk7XG5cblx0XHRcdHZlcnRpY2VzUm93LnB1c2goIGluZGV4ICsrICk7XG5cblx0XHR9XG5cblx0XHRncmlkLnB1c2goIHZlcnRpY2VzUm93ICk7XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDwgaGVpZ2h0U2VnbWVudHM7IGl5ICsrICkge1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8IHdpZHRoU2VnbWVudHM7IGl4ICsrICkge1xuXG5cdFx0XHR2YXIgYSA9IGdyaWRbIGl5IF1bIGl4ICsgMSBdO1xuXHRcdFx0dmFyIGIgPSBncmlkWyBpeSBdWyBpeCBdO1xuXHRcdFx0dmFyIGMgPSBncmlkWyBpeSArIDEgXVsgaXggXTtcblx0XHRcdHZhciBkID0gZ3JpZFsgaXkgKyAxIF1bIGl4ICsgMSBdO1xuXG5cdFx0XHRpZiAoIGl5ICE9PSAwIHx8IHRoZXRhU3RhcnQgPiAwICkgaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpZiAoIGl5ICE9PSBoZWlnaHRTZWdtZW50cyAtIDEgfHwgdGhldGFFbmQgPCBNYXRoLlBJICkgaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5TcGhlcmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNwaGVyZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwaGVyZUJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgS2FsZWIgTXVycGh5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFJpbmdHZW9tZXRyeVxuXG5mdW5jdGlvbiBSaW5nR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmluZ0dlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0aW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxuXHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHR0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLFxuXHRcdHBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgUmluZ0J1ZmZlckdlb21ldHJ5KCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIHRoZXRhU2VnbWVudHMsIHBoaVNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblJpbmdHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblJpbmdHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSaW5nR2VvbWV0cnk7XG5cbi8vIFJpbmdCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBSaW5nQnVmZmVyR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmluZ0J1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0aW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxuXHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHR0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLFxuXHRcdHBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdGlubmVyUmFkaXVzID0gaW5uZXJSYWRpdXMgfHwgMC41O1xuXHRvdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIHx8IDE7XG5cblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwO1xuXHR0aGV0YUxlbmd0aCA9IHRoZXRhTGVuZ3RoICE9PSB1bmRlZmluZWQgPyB0aGV0YUxlbmd0aCA6IE1hdGguUEkgKiAyO1xuXG5cdHRoZXRhU2VnbWVudHMgPSB0aGV0YVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCggMywgdGhldGFTZWdtZW50cyApIDogODtcblx0cGhpU2VnbWVudHMgPSBwaGlTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoIDEsIHBoaVNlZ21lbnRzICkgOiAxO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIHNvbWUgaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBzZWdtZW50O1xuXHR2YXIgcmFkaXVzID0gaW5uZXJSYWRpdXM7XG5cdHZhciByYWRpdXNTdGVwID0gKCAoIG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMgKSAvIHBoaVNlZ21lbnRzICk7XG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHR2YXIgaiwgaTtcblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0Zm9yICggaiA9IDA7IGogPD0gcGhpU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8PSB0aGV0YVNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHQvLyB2YWx1ZXMgYXJlIGdlbmVyYXRlIGZyb20gdGhlIGluc2lkZSBvZiB0aGUgcmluZyB0byB0aGUgb3V0c2lkZVxuXG5cdFx0XHRzZWdtZW50ID0gdGhldGFTdGFydCArIGkgLyB0aGV0YVNlZ21lbnRzICogdGhldGFMZW5ndGg7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIE1hdGguY29zKCBzZWdtZW50ICk7XG5cdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguc2luKCBzZWdtZW50ICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1di54ID0gKCB2ZXJ0ZXgueCAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcblx0XHRcdHV2LnkgPSAoIHZlcnRleC55IC8gb3V0ZXJSYWRpdXMgKyAxICkgLyAyO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5jcmVhc2UgdGhlIHJhZGl1cyBmb3IgbmV4dCByb3cgb2YgdmVydGljZXNcblxuXHRcdHJhZGl1cyArPSByYWRpdXNTdGVwO1xuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaiA9IDA7IGogPCBwaGlTZWdtZW50czsgaiArKyApIHtcblxuXHRcdHZhciB0aGV0YVNlZ21lbnRMZXZlbCA9IGogKiAoIHRoZXRhU2VnbWVudHMgKyAxICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IHRoZXRhU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdHNlZ21lbnQgPSBpICsgdGhldGFTZWdtZW50TGV2ZWw7XG5cblx0XHRcdHZhciBhID0gc2VnbWVudDtcblx0XHRcdHZhciBiID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAxO1xuXHRcdFx0dmFyIGMgPSBzZWdtZW50ICsgdGhldGFTZWdtZW50cyArIDI7XG5cdFx0XHR2YXIgZCA9IHNlZ21lbnQgKyAxO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuUmluZ0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuUmluZ0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJpbmdCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NVxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBMYXRoZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIExhdGhlR2VvbWV0cnkoIHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGggKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMYXRoZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cG9pbnRzOiBwb2ludHMsXG5cdFx0c2VnbWVudHM6IHNlZ21lbnRzLFxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgTGF0aGVCdWZmZXJHZW9tZXRyeSggcG9pbnRzLCBzZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkxhdGhlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5MYXRoZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhdGhlR2VvbWV0cnk7XG5cbi8vIExhdGhlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gTGF0aGVCdWZmZXJHZW9tZXRyeSggcG9pbnRzLCBzZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0xhdGhlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRwb2ludHM6IHBvaW50cyxcblx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoXG5cdH07XG5cblx0c2VnbWVudHMgPSBNYXRoLmZsb29yKCBzZWdtZW50cyApIHx8IDEyO1xuXHRwaGlTdGFydCA9IHBoaVN0YXJ0IHx8IDA7XG5cdHBoaUxlbmd0aCA9IHBoaUxlbmd0aCB8fCBNYXRoLlBJICogMjtcblxuXHQvLyBjbGFtcCBwaGlMZW5ndGggc28gaXQncyBpbiByYW5nZSBvZiBbIDAsIDJQSSBdXG5cblx0cGhpTGVuZ3RoID0gX01hdGguY2xhbXAoIHBoaUxlbmd0aCwgMCwgTWF0aC5QSSAqIDIgKTtcblxuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgYmFzZTtcblx0dmFyIGludmVyc2VTZWdtZW50cyA9IDEuMCAvIHNlZ21lbnRzO1xuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcblx0dmFyIGksIGo7XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMgYW5kIHV2c1xuXG5cdGZvciAoIGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0dmFyIHBoaSA9IHBoaVN0YXJ0ICsgaSAqIGludmVyc2VTZWdtZW50cyAqIHBoaUxlbmd0aDtcblxuXHRcdHZhciBzaW4gPSBNYXRoLnNpbiggcGhpICk7XG5cdFx0dmFyIGNvcyA9IE1hdGguY29zKCBwaGkgKTtcblxuXHRcdGZvciAoIGogPSAwOyBqIDw9ICggcG9pbnRzLmxlbmd0aCAtIDEgKTsgaiArKyApIHtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gcG9pbnRzWyBqIF0ueCAqIHNpbjtcblx0XHRcdHZlcnRleC55ID0gcG9pbnRzWyBqIF0ueTtcblx0XHRcdHZlcnRleC56ID0gcG9pbnRzWyBqIF0ueCAqIGNvcztcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1di54ID0gaSAvIHNlZ21lbnRzO1xuXHRcdFx0dXYueSA9IGogLyAoIHBvaW50cy5sZW5ndGggLSAxICk7XG5cblx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gaW5kaWNlc1xuXG5cdGZvciAoIGkgPSAwOyBpIDwgc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8ICggcG9pbnRzLmxlbmd0aCAtIDEgKTsgaiArKyApIHtcblxuXHRcdFx0YmFzZSA9IGogKyBpICogcG9pbnRzLmxlbmd0aDtcblxuXHRcdFx0dmFyIGEgPSBiYXNlO1xuXHRcdFx0dmFyIGIgPSBiYXNlICsgcG9pbnRzLmxlbmd0aDtcblx0XHRcdHZhciBjID0gYmFzZSArIHBvaW50cy5sZW5ndGggKyAxO1xuXHRcdFx0dmFyIGQgPSBiYXNlICsgMTtcblxuXHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0Ly8gZ2VuZXJhdGUgbm9ybWFsc1xuXG5cdHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcblxuXHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgY2xvc2VkLCB3ZSBuZWVkIHRvIGF2ZXJhZ2UgdGhlIG5vcm1hbHMgYWxvbmcgdGhlIHNlYW0uXG5cdC8vIGJlY2F1c2UgdGhlIGNvcnJlc3BvbmRpbmcgdmVydGljZXMgYXJlIGlkZW50aWNhbCAoYnV0IHN0aWxsIGhhdmUgZGlmZmVyZW50IFVWcykuXG5cblx0aWYgKCBwaGlMZW5ndGggPT09IE1hdGguUEkgKiAyICkge1xuXG5cdFx0dmFyIG5vcm1hbHMgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xuXHRcdHZhciBuMSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG4yID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyB0aGlzIGlzIHRoZSBidWZmZXIgb2Zmc2V0IGZvciB0aGUgbGFzdCBsaW5lIG9mIHZlcnRpY2VzXG5cblx0XHRiYXNlID0gc2VnbWVudHMgKiBwb2ludHMubGVuZ3RoICogMztcblxuXHRcdGZvciAoIGkgPSAwLCBqID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKyssIGogKz0gMyApIHtcblxuXHRcdFx0Ly8gc2VsZWN0IHRoZSBub3JtYWwgb2YgdGhlIHZlcnRleCBpbiB0aGUgZmlyc3QgbGluZVxuXG5cdFx0XHRuMS54ID0gbm9ybWFsc1sgaiArIDAgXTtcblx0XHRcdG4xLnkgPSBub3JtYWxzWyBqICsgMSBdO1xuXHRcdFx0bjEueiA9IG5vcm1hbHNbIGogKyAyIF07XG5cblx0XHRcdC8vIHNlbGVjdCB0aGUgbm9ybWFsIG9mIHRoZSB2ZXJ0ZXggaW4gdGhlIGxhc3QgbGluZVxuXG5cdFx0XHRuMi54ID0gbm9ybWFsc1sgYmFzZSArIGogKyAwIF07XG5cdFx0XHRuMi55ID0gbm9ybWFsc1sgYmFzZSArIGogKyAxIF07XG5cdFx0XHRuMi56ID0gbm9ybWFsc1sgYmFzZSArIGogKyAyIF07XG5cblx0XHRcdC8vIGF2ZXJhZ2Ugbm9ybWFsc1xuXG5cdFx0XHRuLmFkZFZlY3RvcnMoIG4xLCBuMiApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHQvLyBhc3NpZ24gdGhlIG5ldyB2YWx1ZXMgdG8gYm90aCBub3JtYWxzXG5cblx0XHRcdG5vcm1hbHNbIGogKyAwIF0gPSBub3JtYWxzWyBiYXNlICsgaiArIDAgXSA9IG4ueDtcblx0XHRcdG5vcm1hbHNbIGogKyAxIF0gPSBub3JtYWxzWyBiYXNlICsgaiArIDEgXSA9IG4ueTtcblx0XHRcdG5vcm1hbHNbIGogKyAyIF0gPSBub3JtYWxzWyBiYXNlICsgaiArIDIgXSA9IG4uejtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuTGF0aGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkxhdGhlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF0aGVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIGpvbm9icjEgLyBodHRwOi8vam9ub2JyMS5jb21cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gU2hhcGVHZW9tZXRyeVxuXG5mdW5jdGlvbiBTaGFwZUdlb21ldHJ5KCBzaGFwZXMsIGN1cnZlU2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFwZUdlb21ldHJ5JztcblxuXHRpZiAoIHR5cGVvZiBjdXJ2ZVNlZ21lbnRzID09PSAnb2JqZWN0JyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlR2VvbWV0cnk6IE9wdGlvbnMgcGFyYW1ldGVyIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0Y3VydmVTZWdtZW50cyA9IGN1cnZlU2VnbWVudHMuY3VydmVTZWdtZW50cztcblxuXHR9XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHNoYXBlczogc2hhcGVzLFxuXHRcdGN1cnZlU2VnbWVudHM6IGN1cnZlU2VnbWVudHNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFNoYXBlQnVmZmVyR2VvbWV0cnkoIHNoYXBlcywgY3VydmVTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblNoYXBlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYXBlR2VvbWV0cnk7XG5cblNoYXBlR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXG5cdHJldHVybiB0b0pTT04kMSggc2hhcGVzLCBkYXRhICk7XG5cbn07XG5cbi8vIFNoYXBlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gU2hhcGVCdWZmZXJHZW9tZXRyeSggc2hhcGVzLCBjdXJ2ZVNlZ21lbnRzICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhcGVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHNoYXBlczogc2hhcGVzLFxuXHRcdGN1cnZlU2VnbWVudHM6IGN1cnZlU2VnbWVudHNcblx0fTtcblxuXHRjdXJ2ZVNlZ21lbnRzID0gY3VydmVTZWdtZW50cyB8fCAxMjtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGdyb3VwU3RhcnQgPSAwO1xuXHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0Ly8gYWxsb3cgc2luZ2xlIGFuZCBhcnJheSB2YWx1ZXMgZm9yIFwic2hhcGVzXCIgcGFyYW1ldGVyXG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRhZGRTaGFwZSggc2hhcGVzICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHNoYXBlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGFkZFNoYXBlKCBzaGFwZXNbIGkgXSApO1xuXG5cdFx0XHR0aGlzLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCBpICk7IC8vIGVuYWJsZXMgTXVsdGlNYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcblx0XHRcdGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblxuXHQvLyBoZWxwZXIgZnVuY3Rpb25zXG5cblx0ZnVuY3Rpb24gYWRkU2hhcGUoIHNoYXBlICkge1xuXG5cdFx0dmFyIGksIGwsIHNoYXBlSG9sZTtcblxuXHRcdHZhciBpbmRleE9mZnNldCA9IHZlcnRpY2VzLmxlbmd0aCAvIDM7XG5cdFx0dmFyIHBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoIGN1cnZlU2VnbWVudHMgKTtcblxuXHRcdHZhciBzaGFwZVZlcnRpY2VzID0gcG9pbnRzLnNoYXBlO1xuXHRcdHZhciBzaGFwZUhvbGVzID0gcG9pbnRzLmhvbGVzO1xuXG5cdFx0Ly8gY2hlY2sgZGlyZWN0aW9uIG9mIHZlcnRpY2VzXG5cblx0XHRpZiAoIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHNoYXBlVmVydGljZXMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRzaGFwZUhvbGUgPSBzaGFwZUhvbGVzWyBpIF07XG5cblx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggc2hhcGVIb2xlICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0c2hhcGVIb2xlc1sgaSBdID0gc2hhcGVIb2xlLnJldmVyc2UoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGZhY2VzID0gU2hhcGVVdGlscy50cmlhbmd1bGF0ZVNoYXBlKCBzaGFwZVZlcnRpY2VzLCBzaGFwZUhvbGVzICk7XG5cblx0XHQvLyBqb2luIHZlcnRpY2VzIG9mIGlubmVyIGFuZCBvdXRlciBwYXRocyB0byBhIHNpbmdsZSBhcnJheVxuXG5cdFx0Zm9yICggaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTtcblx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLmNvbmNhdCggc2hhcGVIb2xlICk7XG5cblx0XHR9XG5cblx0XHQvLyB2ZXJ0aWNlcywgbm9ybWFscywgdXZzXG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IHNoYXBlVmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHNoYXBlVmVydGljZXNbIGkgXTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCAwICk7XG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblx0XHRcdHV2cy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnkgKTsgLy8gd29ybGQgdXZzXG5cblx0XHR9XG5cblx0XHQvLyBpbmNpZGVzXG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0dmFyIGEgPSBmYWNlWyAwIF0gKyBpbmRleE9mZnNldDtcblx0XHRcdHZhciBiID0gZmFjZVsgMSBdICsgaW5kZXhPZmZzZXQ7XG5cdFx0XHR2YXIgYyA9IGZhY2VbIDIgXSArIGluZGV4T2Zmc2V0O1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGMgKTtcblx0XHRcdGdyb3VwQ291bnQgKz0gMztcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNoYXBlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhcGVCdWZmZXJHZW9tZXRyeTtcblxuU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cblx0cmV0dXJuIHRvSlNPTiQxKCBzaGFwZXMsIGRhdGEgKTtcblxufTtcblxuLy9cblxuZnVuY3Rpb24gdG9KU09OJDEoIHNoYXBlcywgZGF0YSApIHtcblxuXHRkYXRhLnNoYXBlcyA9IFtdO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlLnV1aWQgKTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTtcblxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gRWRnZXNHZW9tZXRyeSggZ2VvbWV0cnksIHRocmVzaG9sZEFuZ2xlICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRWRnZXNHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHRocmVzaG9sZEFuZ2xlOiB0aHJlc2hvbGRBbmdsZVxuXHR9O1xuXG5cdHRocmVzaG9sZEFuZ2xlID0gKCB0aHJlc2hvbGRBbmdsZSAhPT0gdW5kZWZpbmVkICkgPyB0aHJlc2hvbGRBbmdsZSA6IDE7XG5cblx0Ly8gYnVmZmVyXG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciB0aHJlc2hvbGREb3QgPSBNYXRoLmNvcyggX01hdGguREVHMlJBRCAqIHRocmVzaG9sZEFuZ2xlICk7XG5cdHZhciBlZGdlID0gWyAwLCAwIF0sIGVkZ2VzID0ge30sIGVkZ2UxLCBlZGdlMjtcblx0dmFyIGtleSwga2V5cyA9IFsgJ2EnLCAnYicsICdjJyBdO1xuXG5cdC8vIHByZXBhcmUgc291cmNlIGdlb21ldHJ5XG5cblx0dmFyIGdlb21ldHJ5MjtcblxuXHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRnZW9tZXRyeTIgPSBuZXcgR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeTIuZnJvbUJ1ZmZlckdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRnZW9tZXRyeTIgPSBnZW9tZXRyeS5jbG9uZSgpO1xuXG5cdH1cblxuXHRnZW9tZXRyeTIubWVyZ2VWZXJ0aWNlcygpO1xuXHRnZW9tZXRyeTIuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0dmFyIHNvdXJjZVZlcnRpY2VzID0gZ2VvbWV0cnkyLnZlcnRpY2VzO1xuXHR2YXIgZmFjZXMgPSBnZW9tZXRyeTIuZmFjZXM7XG5cblx0Ly8gbm93IGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHdoZXJlIGVhY2ggZW50cnkgcmVwcmVzZW50cyBhbiBlZGdlIHdpdGggaXRzIGFkam9pbmluZyBmYWNlc1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRlZGdlMSA9IGZhY2VbIGtleXNbIGogXSBdO1xuXHRcdFx0ZWRnZTIgPSBmYWNlWyBrZXlzWyAoIGogKyAxICkgJSAzIF0gXTtcblx0XHRcdGVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTtcblx0XHRcdGVkZ2VbIDEgXSA9IE1hdGgubWF4KCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0a2V5ID0gZWRnZVsgMCBdICsgJywnICsgZWRnZVsgMSBdO1xuXG5cdFx0XHRpZiAoIGVkZ2VzWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGVkZ2VzWyBrZXkgXSA9IHsgaW5kZXgxOiBlZGdlWyAwIF0sIGluZGV4MjogZWRnZVsgMSBdLCBmYWNlMTogaSwgZmFjZTI6IHVuZGVmaW5lZCB9O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGVkZ2VzWyBrZXkgXS5mYWNlMiA9IGk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXNcblxuXHRmb3IgKCBrZXkgaW4gZWRnZXMgKSB7XG5cblx0XHR2YXIgZSA9IGVkZ2VzWyBrZXkgXTtcblxuXHRcdC8vIGFuIGVkZ2UgaXMgb25seSByZW5kZXJlZCBpZiB0aGUgYW5nbGUgKGluIGRlZ3JlZXMpIGJldHdlZW4gdGhlIGZhY2Ugbm9ybWFscyBvZiB0aGUgYWRqb2luaW5nIGZhY2VzIGV4Y2VlZHMgdGhpcyB2YWx1ZS4gZGVmYXVsdCA9IDEgZGVncmVlLlxuXG5cdFx0aWYgKCBlLmZhY2UyID09PSB1bmRlZmluZWQgfHwgZmFjZXNbIGUuZmFjZTEgXS5ub3JtYWwuZG90KCBmYWNlc1sgZS5mYWNlMiBdLm5vcm1hbCApIDw9IHRocmVzaG9sZERvdCApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHNvdXJjZVZlcnRpY2VzWyBlLmluZGV4MSBdO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHR2ZXJ0ZXggPSBzb3VyY2VWZXJ0aWNlc1sgZS5pbmRleDIgXTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblxufVxuXG5FZGdlc0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuRWRnZXNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFZGdlc0dlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEN5bGluZGVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ3lsaW5kZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1c1RvcDogcmFkaXVzVG9wLFxuXHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IEN5bGluZGVyQnVmZmVyR2VvbWV0cnkoIHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5DeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN5bGluZGVyR2VvbWV0cnk7XG5cbi8vIEN5bGluZGVyQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1c1RvcDogcmFkaXVzVG9wLFxuXHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHJhZGl1c1RvcCA9IHJhZGl1c1RvcCAhPT0gdW5kZWZpbmVkID8gcmFkaXVzVG9wIDogMTtcblx0cmFkaXVzQm90dG9tID0gcmFkaXVzQm90dG9tICE9PSB1bmRlZmluZWQgPyByYWRpdXNCb3R0b20gOiAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblxuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICkgfHwgODtcblx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApIHx8IDE7XG5cblx0b3BlbkVuZGVkID0gb3BlbkVuZGVkICE9PSB1bmRlZmluZWQgPyBvcGVuRW5kZWQgOiBmYWxzZTtcblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwLjA7XG5cdHRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBpbmRleCA9IDA7XG5cdHZhciBpbmRleEFycmF5ID0gW107XG5cdHZhciBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcblx0dmFyIGdyb3VwU3RhcnQgPSAwO1xuXG5cdC8vIGdlbmVyYXRlIGdlb21ldHJ5XG5cblx0Z2VuZXJhdGVUb3JzbygpO1xuXG5cdGlmICggb3BlbkVuZGVkID09PSBmYWxzZSApIHtcblxuXHRcdGlmICggcmFkaXVzVG9wID4gMCApIGdlbmVyYXRlQ2FwKCB0cnVlICk7XG5cdFx0aWYgKCByYWRpdXNCb3R0b20gPiAwICkgZ2VuZXJhdGVDYXAoIGZhbHNlICk7XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVRvcnNvKCkge1xuXG5cdFx0dmFyIHgsIHk7XG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHQvLyB0aGlzIHdpbGwgYmUgdXNlZCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbFxuXHRcdHZhciBzbG9wZSA9ICggcmFkaXVzQm90dG9tIC0gcmFkaXVzVG9wICkgLyBoZWlnaHQ7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCB5ID0gMDsgeSA8PSBoZWlnaHRTZWdtZW50czsgeSArKyApIHtcblxuXHRcdFx0dmFyIGluZGV4Um93ID0gW107XG5cblx0XHRcdHZhciB2ID0geSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgdGhlIHJhZGl1cyBvZiB0aGUgY3VycmVudCByb3dcblxuXHRcdFx0dmFyIHJhZGl1cyA9IHYgKiAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApICsgcmFkaXVzVG9wO1xuXG5cdFx0XHRmb3IgKCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHR2YXIgdSA9IHggLyByYWRpYWxTZWdtZW50cztcblxuXHRcdFx0XHR2YXIgdGhldGEgPSB1ICogdGhldGFMZW5ndGggKyB0aGV0YVN0YXJ0O1xuXG5cdFx0XHRcdHZhciBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xuXHRcdFx0XHR2YXIgY29zVGhldGEgPSBNYXRoLmNvcyggdGhldGEgKTtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IC0gdiAqIGhlaWdodCArIGhhbGZIZWlnaHQ7XG5cdFx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWwuc2V0KCBzaW5UaGV0YSwgc2xvcGUsIGNvc1RoZXRhICkubm9ybWFsaXplKCk7XG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHRcdFx0Ly8gc2F2ZSBpbmRleCBvZiB2ZXJ0ZXggaW4gcmVzcGVjdGl2ZSByb3dcblxuXHRcdFx0XHRpbmRleFJvdy5wdXNoKCBpbmRleCArKyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIG5vdyBzYXZlIHZlcnRpY2VzIG9mIHRoZSByb3cgaW4gb3VyIGluZGV4IGFycmF5XG5cblx0XHRcdGluZGV4QXJyYXkucHVzaCggaW5kZXhSb3cgKTtcblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdGZvciAoIHkgPSAwOyB5IDwgaGVpZ2h0U2VnbWVudHM7IHkgKysgKSB7XG5cblx0XHRcdFx0Ly8gd2UgdXNlIHRoZSBpbmRleCBhcnJheSB0byBhY2Nlc3MgdGhlIGNvcnJlY3QgaW5kaWNlc1xuXG5cdFx0XHRcdHZhciBhID0gaW5kZXhBcnJheVsgeSBdWyB4IF07XG5cdFx0XHRcdHZhciBiID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCBdO1xuXHRcdFx0XHR2YXIgYyA9IGluZGV4QXJyYXlbIHkgKyAxIF1bIHggKyAxIF07XG5cdFx0XHRcdHZhciBkID0gaW5kZXhBcnJheVsgeSBdWyB4ICsgMSBdO1xuXG5cdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHRcdC8vIHVwZGF0ZSBncm91cCBjb3VudGVyXG5cblx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIDAgKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZUNhcCggdG9wICkge1xuXG5cdFx0dmFyIHgsIGNlbnRlckluZGV4U3RhcnQsIGNlbnRlckluZGV4RW5kO1xuXG5cdFx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBncm91cENvdW50ID0gMDtcblxuXHRcdHZhciByYWRpdXMgPSAoIHRvcCA9PT0gdHJ1ZSApID8gcmFkaXVzVG9wIDogcmFkaXVzQm90dG9tO1xuXHRcdHZhciBzaWduID0gKCB0b3AgPT09IHRydWUgKSA/IDEgOiAtIDE7XG5cblx0XHQvLyBzYXZlIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2VudGVyIHZlcnRleFxuXHRcdGNlbnRlckluZGV4U3RhcnQgPSBpbmRleDtcblxuXHRcdC8vIGZpcnN0IHdlIGdlbmVyYXRlIHRoZSBjZW50ZXIgdmVydGV4IGRhdGEgb2YgdGhlIGNhcC5cblx0XHQvLyBiZWNhdXNlIHRoZSBnZW9tZXRyeSBuZWVkcyBvbmUgc2V0IG9mIHV2cyBwZXIgZmFjZSxcblx0XHQvLyB3ZSBtdXN0IGdlbmVyYXRlIGEgY2VudGVyIHZlcnRleCBwZXIgZmFjZS9zZWdtZW50XG5cblx0XHRmb3IgKCB4ID0gMTsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIGhhbGZIZWlnaHQgKiBzaWduLCAwICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIDAuNSwgMC41ICk7XG5cblx0XHRcdC8vIGluY3JlYXNlIGluZGV4XG5cblx0XHRcdGluZGV4ICsrO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGxhc3QgY2VudGVyIHZlcnRleFxuXG5cdFx0Y2VudGVySW5kZXhFbmQgPSBpbmRleDtcblxuXHRcdC8vIG5vdyB3ZSBnZW5lcmF0ZSB0aGUgc3Vycm91bmRpbmcgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggeCA9IDA7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdHZhciB1ID0geCAvIHJhZGlhbFNlZ21lbnRzO1xuXHRcdFx0dmFyIHRoZXRhID0gdSAqIHRoZXRhTGVuZ3RoICsgdGhldGFTdGFydDtcblxuXHRcdFx0dmFyIGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cdFx0XHR2YXIgc2luVGhldGEgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogc2luVGhldGE7XG5cdFx0XHR2ZXJ0ZXgueSA9IGhhbGZIZWlnaHQgKiBzaWduO1xuXHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgc2lnbiwgMCApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1di54ID0gKCBjb3NUaGV0YSAqIDAuNSApICsgMC41O1xuXHRcdFx0dXYueSA9ICggc2luVGhldGEgKiAwLjUgKiBzaWduICkgKyAwLjU7XG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHQvLyBpbmNyZWFzZSBpbmRleFxuXG5cdFx0XHRpbmRleCArKztcblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdHZhciBjID0gY2VudGVySW5kZXhTdGFydCArIHg7XG5cdFx0XHR2YXIgaSA9IGNlbnRlckluZGV4RW5kICsgeDtcblxuXHRcdFx0aWYgKCB0b3AgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Ly8gZmFjZSB0b3BcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCBjICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gZmFjZSBib3R0b21cblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGkgKyAxLCBpLCBjICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z3JvdXBDb3VudCArPSAzO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnRcblxuXHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCB0b3AgPT09IHRydWUgPyAxIDogMiApO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXG5cblx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0fVxuXG59XG5cbkN5bGluZGVyQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5DeWxpbmRlckJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN5bGluZGVyQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxuICovXG5cbi8vIENvbmVHZW9tZXRyeVxuXG5mdW5jdGlvbiBDb25lR2VvbWV0cnkoIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0Q3lsaW5kZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCAwLCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICk7XG5cblx0dGhpcy50eXBlID0gJ0NvbmVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxufVxuXG5Db25lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3lsaW5kZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNvbmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lR2VvbWV0cnk7XG5cbi8vIENvbmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBDb25lQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0Q3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCAwLCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICk7XG5cblx0dGhpcy50eXBlID0gJ0NvbmVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxufVxuXG5Db25lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNvbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBodWdoZXNcbiAqL1xuXG4vLyBDaXJjbGVHZW9tZXRyeVxuXG5mdW5jdGlvbiBDaXJjbGVHZW9tZXRyeSggcmFkaXVzLCBzZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDaXJjbGVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQ2lyY2xlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgc2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuQ2lyY2xlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5DaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaXJjbGVHZW9tZXRyeTtcblxuLy8gQ2lyY2xlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ2lyY2xlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgc2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ2lyY2xlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0c2VnbWVudHMgPSBzZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoIDMsIHNlZ21lbnRzICkgOiA4O1xuXG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMDtcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJICogMjtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIHM7XG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXG5cdC8vIGNlbnRlciBwb2ludFxuXG5cdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cdHV2cy5wdXNoKCAwLjUsIDAuNSApO1xuXG5cdGZvciAoIHMgPSAwLCBpID0gMzsgcyA8PSBzZWdtZW50czsgcyArKywgaSArPSAzICkge1xuXG5cdFx0dmFyIHNlZ21lbnQgPSB0aGV0YVN0YXJ0ICsgcyAvIHNlZ21lbnRzICogdGhldGFMZW5ndGg7XG5cblx0XHQvLyB2ZXJ0ZXhcblxuXHRcdHZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTtcblx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguc2luKCBzZWdtZW50ICk7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHQvLyBub3JtYWxcblxuXHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0Ly8gdXZzXG5cblx0XHR1di54ID0gKCB2ZXJ0aWNlc1sgaSBdIC8gcmFkaXVzICsgMSApIC8gMjtcblx0XHR1di55ID0gKCB2ZXJ0aWNlc1sgaSArIDEgXSAvIHJhZGl1cyArIDEgKSAvIDI7XG5cblx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCAwICk7XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5DaXJjbGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNpcmNsZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENpcmNsZUJ1ZmZlckdlb21ldHJ5O1xuXG5cblxudmFyIEdlb21ldHJpZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdFdpcmVmcmFtZUdlb21ldHJ5OiBXaXJlZnJhbWVHZW9tZXRyeSxcblx0UGFyYW1ldHJpY0dlb21ldHJ5OiBQYXJhbWV0cmljR2VvbWV0cnksXG5cdFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeTogUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LFxuXHRUZXRyYWhlZHJvbkdlb21ldHJ5OiBUZXRyYWhlZHJvbkdlb21ldHJ5LFxuXHRUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRPY3RhaGVkcm9uR2VvbWV0cnk6IE9jdGFoZWRyb25HZW9tZXRyeSxcblx0T2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uR2VvbWV0cnk6IEljb3NhaGVkcm9uR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdERvZGVjYWhlZHJvbkdlb21ldHJ5OiBEb2RlY2FoZWRyb25HZW9tZXRyeSxcblx0RG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRQb2x5aGVkcm9uR2VvbWV0cnk6IFBvbHloZWRyb25HZW9tZXRyeSxcblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdFR1YmVHZW9tZXRyeTogVHViZUdlb21ldHJ5LFxuXHRUdWJlQnVmZmVyR2VvbWV0cnk6IFR1YmVCdWZmZXJHZW9tZXRyeSxcblx0VG9ydXNLbm90R2VvbWV0cnk6IFRvcnVzS25vdEdlb21ldHJ5LFxuXHRUb3J1c0tub3RCdWZmZXJHZW9tZXRyeTogVG9ydXNLbm90QnVmZmVyR2VvbWV0cnksXG5cdFRvcnVzR2VvbWV0cnk6IFRvcnVzR2VvbWV0cnksXG5cdFRvcnVzQnVmZmVyR2VvbWV0cnk6IFRvcnVzQnVmZmVyR2VvbWV0cnksXG5cdFRleHRHZW9tZXRyeTogVGV4dEdlb21ldHJ5LFxuXHRUZXh0QnVmZmVyR2VvbWV0cnk6IFRleHRCdWZmZXJHZW9tZXRyeSxcblx0U3BoZXJlR2VvbWV0cnk6IFNwaGVyZUdlb21ldHJ5LFxuXHRTcGhlcmVCdWZmZXJHZW9tZXRyeTogU3BoZXJlQnVmZmVyR2VvbWV0cnksXG5cdFJpbmdHZW9tZXRyeTogUmluZ0dlb21ldHJ5LFxuXHRSaW5nQnVmZmVyR2VvbWV0cnk6IFJpbmdCdWZmZXJHZW9tZXRyeSxcblx0UGxhbmVHZW9tZXRyeTogUGxhbmVHZW9tZXRyeSxcblx0UGxhbmVCdWZmZXJHZW9tZXRyeTogUGxhbmVCdWZmZXJHZW9tZXRyeSxcblx0TGF0aGVHZW9tZXRyeTogTGF0aGVHZW9tZXRyeSxcblx0TGF0aGVCdWZmZXJHZW9tZXRyeTogTGF0aGVCdWZmZXJHZW9tZXRyeSxcblx0U2hhcGVHZW9tZXRyeTogU2hhcGVHZW9tZXRyeSxcblx0U2hhcGVCdWZmZXJHZW9tZXRyeTogU2hhcGVCdWZmZXJHZW9tZXRyeSxcblx0RXh0cnVkZUdlb21ldHJ5OiBFeHRydWRlR2VvbWV0cnksXG5cdEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LFxuXHRFZGdlc0dlb21ldHJ5OiBFZGdlc0dlb21ldHJ5LFxuXHRDb25lR2VvbWV0cnk6IENvbmVHZW9tZXRyeSxcblx0Q29uZUJ1ZmZlckdlb21ldHJ5OiBDb25lQnVmZmVyR2VvbWV0cnksXG5cdEN5bGluZGVyR2VvbWV0cnk6IEN5bGluZGVyR2VvbWV0cnksXG5cdEN5bGluZGVyQnVmZmVyR2VvbWV0cnk6IEN5bGluZGVyQnVmZmVyR2VvbWV0cnksXG5cdENpcmNsZUdlb21ldHJ5OiBDaXJjbGVHZW9tZXRyeSxcblx0Q2lyY2xlQnVmZmVyR2VvbWV0cnk6IENpcmNsZUJ1ZmZlckdlb21ldHJ5LFxuXHRCb3hHZW9tZXRyeTogQm94R2VvbWV0cnksXG5cdEJveEJ1ZmZlckdlb21ldHJ5OiBCb3hCdWZmZXJHZW9tZXRyeVxufSk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8VEhSRUUuQ29sb3I+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gU2hhZG93TWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFkb3dNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYWRvd01hdGVyaWFsO1xuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuaXNTaGFkb3dNYXRlcmlhbCA9IHRydWU7XG5cblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFJhd1NoYWRlck1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdFNoYWRlck1hdGVyaWFsLmNhbGwoIHRoaXMsIHBhcmFtZXRlcnMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmF3U2hhZGVyTWF0ZXJpYWwnO1xuXG59XG5cblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSApO1xuUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmF3U2hhZGVyTWF0ZXJpYWw7XG5cblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5pc1Jhd1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICByb3VnaG5lc3M6IDxmbG9hdD4sXG4gKiAgbWV0YWxuZXNzOiA8ZmxvYXQ+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgZW1pc3NpdmU6IDxoZXg+LFxuICogIGVtaXNzaXZlSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKiAgZW1pc3NpdmVNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICByb3VnaG5lc3NNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIG1ldGFsbmVzc01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBlbnZNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoU3RhbmRhcmRNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoU3RhbmRhcmRNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXHR0aGlzLnJvdWdobmVzcyA9IDAuNTtcblx0dGhpcy5tZXRhbG5lc3MgPSAwLjU7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuYW9NYXAgPSBudWxsO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHR0aGlzLnJvdWdobmVzc01hcCA9IG51bGw7XG5cblx0dGhpcy5tZXRhbG5lc3NNYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZW52TWFwID0gbnVsbDtcblx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoU3RhbmRhcmRNYXRlcmlhbDtcblxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHR0aGlzLnJvdWdobmVzcyA9IHNvdXJjZS5yb3VnaG5lc3M7XG5cdHRoaXMubWV0YWxuZXNzID0gc291cmNlLm1ldGFsbmVzcztcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0dGhpcy5yb3VnaG5lc3NNYXAgPSBzb3VyY2Uucm91Z2huZXNzTWFwO1xuXG5cdHRoaXMubWV0YWxuZXNzTWFwID0gc291cmNlLm1ldGFsbmVzc01hcDtcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSBzb3VyY2UuZW52TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD5cbiAqICBjbGVhckNvYXQ6IDxmbG9hdD5cbiAqICBjbGVhckNvYXRSb3VnaG5lc3M6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoUGh5c2ljYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5kZWZpbmVzID0geyAnUEhZU0lDQUwnOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoUGh5c2ljYWxNYXRlcmlhbCc7XG5cblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAwLjU7IC8vIG1hcHMgdG8gRjAgPSAwLjA0XG5cblx0dGhpcy5jbGVhckNvYXQgPSAwLjA7XG5cdHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzID0gMC4wO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoUGh5c2ljYWxNYXRlcmlhbDtcblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1BIWVNJQ0FMJzogJycgfTtcblxuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cblx0dGhpcy5jbGVhckNvYXQgPSBzb3VyY2UuY2xlYXJDb2F0O1xuXHR0aGlzLmNsZWFyQ29hdFJvdWdobmVzcyA9IHNvdXJjZS5jbGVhckNvYXRSb3VnaG5lc3M7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgc3BlY3VsYXI6IDxoZXg+LFxuICogIHNoaW5pbmVzczogPGZsb2F0PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaFBob25nTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoUGhvbmdNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXHR0aGlzLnNwZWN1bGFyID0gbmV3IENvbG9yKCAweDExMTExMSApO1xuXHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hQaG9uZ01hdGVyaWFsO1xuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoUGhvbmdNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0dGhpcy5zcGVjdWxhci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXIgKTtcblx0dGhpcy5zaGluaW5lc3MgPSBzb3VyY2Uuc2hpbmluZXNzO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgdGFrYWhpcm94IC8gaHR0cDovL2dpdGh1Yi5jb20vdGFrYWhpcm94XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBncmFkaWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKVxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hUb29uTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWVzaFBob25nTWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1RPT04nOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoVG9vbk1hdGVyaWFsJztcblxuXHR0aGlzLmdyYWRpZW50TWFwID0gbnVsbDtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hUb29uTWF0ZXJpYWw7XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFRvb25NYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmdyYWRpZW50TWFwID0gc291cmNlLmdyYWRpZW50TWFwO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD5cbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcbiAqICBtb3JwaE5vcm1hbHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hOb3JtYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hOb3JtYWxNYXRlcmlhbCc7XG5cblx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHR0aGlzLmZvZyA9IGZhbHNlO1xuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTm9ybWFsTWF0ZXJpYWw7XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSxcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoTGFtYmVydE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaExhbWJlcnRNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hMYW1iZXJ0TWF0ZXJpYWw7XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaExhbWJlcnRNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hdGNhcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoTWF0Y2FwTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XG5cblx0dGhpcy50eXBlID0gJ01lc2hNYXRjYXBNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdHRoaXMubWF0Y2FwID0gbnVsbDtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hNYXRjYXBNYXRlcmlhbDtcblxuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hNYXRjYXBNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLm1hdGNhcCA9IHNvdXJjZS5tYXRjYXA7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBsaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNjYWxlOiA8ZmxvYXQ+LFxuICogIGRhc2hTaXplOiA8ZmxvYXQ+LFxuICogIGdhcFNpemU6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBMaW5lRGFzaGVkTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TGluZUJhc2ljTWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lRGFzaGVkTWF0ZXJpYWwnO1xuXG5cdHRoaXMuc2NhbGUgPSAxO1xuXHR0aGlzLmRhc2hTaXplID0gMztcblx0dGhpcy5nYXBTaXplID0gMTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUgKTtcbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaW5lRGFzaGVkTWF0ZXJpYWw7XG5cbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuaXNMaW5lRGFzaGVkTWF0ZXJpYWwgPSB0cnVlO1xuXG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnNjYWxlID0gc291cmNlLnNjYWxlO1xuXHR0aGlzLmRhc2hTaXplID0gc291cmNlLmRhc2hTaXplO1xuXHR0aGlzLmdhcFNpemUgPSBzb3VyY2UuZ2FwU2l6ZTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuXG5cbnZhciBNYXRlcmlhbHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdFNoYWRvd01hdGVyaWFsOiBTaGFkb3dNYXRlcmlhbCxcblx0U3ByaXRlTWF0ZXJpYWw6IFNwcml0ZU1hdGVyaWFsLFxuXHRSYXdTaGFkZXJNYXRlcmlhbDogUmF3U2hhZGVyTWF0ZXJpYWwsXG5cdFNoYWRlck1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbCxcblx0UG9pbnRzTWF0ZXJpYWw6IFBvaW50c01hdGVyaWFsLFxuXHRNZXNoUGh5c2ljYWxNYXRlcmlhbDogTWVzaFBoeXNpY2FsTWF0ZXJpYWwsXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiBNZXNoU3RhbmRhcmRNYXRlcmlhbCxcblx0TWVzaFBob25nTWF0ZXJpYWw6IE1lc2hQaG9uZ01hdGVyaWFsLFxuXHRNZXNoVG9vbk1hdGVyaWFsOiBNZXNoVG9vbk1hdGVyaWFsLFxuXHRNZXNoTm9ybWFsTWF0ZXJpYWw6IE1lc2hOb3JtYWxNYXRlcmlhbCxcblx0TWVzaExhbWJlcnRNYXRlcmlhbDogTWVzaExhbWJlcnRNYXRlcmlhbCxcblx0TWVzaERlcHRoTWF0ZXJpYWw6IE1lc2hEZXB0aE1hdGVyaWFsLFxuXHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogTWVzaERpc3RhbmNlTWF0ZXJpYWwsXG5cdE1lc2hCYXNpY01hdGVyaWFsOiBNZXNoQmFzaWNNYXRlcmlhbCxcblx0TWVzaE1hdGNhcE1hdGVyaWFsOiBNZXNoTWF0Y2FwTWF0ZXJpYWwsXG5cdExpbmVEYXNoZWRNYXRlcmlhbDogTGluZURhc2hlZE1hdGVyaWFsLFxuXHRMaW5lQmFzaWNNYXRlcmlhbDogTGluZUJhc2ljTWF0ZXJpYWwsXG5cdE1hdGVyaWFsOiBNYXRlcmlhbFxufSk7XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICovXG5cbnZhciBBbmltYXRpb25VdGlscyA9IHtcblxuXHQvLyBzYW1lIGFzIEFycmF5LnByb3RvdHlwZS5zbGljZSwgYnV0IGFsc28gd29ya3Mgb24gdHlwZWQgYXJyYXlzXG5cdGFycmF5U2xpY2U6IGZ1bmN0aW9uICggYXJyYXksIGZyb20sIHRvICkge1xuXG5cdFx0aWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdC8vIGluIGlvczkgYXJyYXkuc3ViYXJyYXkoZnJvbSwgdW5kZWZpbmVkKSB3aWxsIHJldHVybiBlbXB0eSBhcnJheVxuXHRcdFx0Ly8gYnV0IGFycmF5LnN1YmFycmF5KGZyb20pIG9yIGFycmF5LnN1YmFycmF5KGZyb20sIGxlbikgaXMgY29ycmVjdFxuXHRcdFx0cmV0dXJuIG5ldyBhcnJheS5jb25zdHJ1Y3RvciggYXJyYXkuc3ViYXJyYXkoIGZyb20sIHRvICE9PSB1bmRlZmluZWQgPyB0byA6IGFycmF5Lmxlbmd0aCApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXkuc2xpY2UoIGZyb20sIHRvICk7XG5cblx0fSxcblxuXHQvLyBjb252ZXJ0cyBhbiBhcnJheSB0byBhIHNwZWNpZmljIHR5cGVcblx0Y29udmVydEFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCB0eXBlLCBmb3JjZUNsb25lICkge1xuXG5cdFx0aWYgKCAhIGFycmF5IHx8IC8vIGxldCAndW5kZWZpbmVkJyBhbmQgJ251bGwnIHBhc3Ncblx0XHRcdCEgZm9yY2VDbG9uZSAmJiBhcnJheS5jb25zdHJ1Y3RvciA9PT0gdHlwZSApIHJldHVybiBhcnJheTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUuQllURVNfUEVSX0VMRU1FTlQgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IHR5cGUoIGFycmF5ICk7IC8vIGNyZWF0ZSB0eXBlZCBhcnJheVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcnJheSApOyAvLyBjcmVhdGUgQXJyYXlcblxuXHR9LFxuXG5cdGlzVHlwZWRBcnJheTogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRyZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KCBvYmplY3QgKSAmJlxuXHRcdFx0ISAoIG9iamVjdCBpbnN0YW5jZW9mIERhdGFWaWV3ICk7XG5cblx0fSxcblxuXHQvLyByZXR1cm5zIGFuIGFycmF5IGJ5IHdoaWNoIHRpbWVzIGFuZCB2YWx1ZXMgY2FuIGJlIHNvcnRlZFxuXHRnZXRLZXlmcmFtZU9yZGVyOiBmdW5jdGlvbiAoIHRpbWVzICkge1xuXG5cdFx0ZnVuY3Rpb24gY29tcGFyZVRpbWUoIGksIGogKSB7XG5cblx0XHRcdHJldHVybiB0aW1lc1sgaSBdIC0gdGltZXNbIGogXTtcblxuXHRcdH1cblxuXHRcdHZhciBuID0gdGltZXMubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoIG4gKTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG47ICsrIGkgKSByZXN1bHRbIGkgXSA9IGk7XG5cblx0XHRyZXN1bHQuc29ydCggY29tcGFyZVRpbWUgKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyB1c2VzIHRoZSBhcnJheSBwcmV2aW91c2x5IHJldHVybmVkIGJ5ICdnZXRLZXlmcmFtZU9yZGVyJyB0byBzb3J0IGRhdGFcblx0c29ydGVkQXJyYXk6IGZ1bmN0aW9uICggdmFsdWVzLCBzdHJpZGUsIG9yZGVyICkge1xuXG5cdFx0dmFyIG5WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgdmFsdWVzLmNvbnN0cnVjdG9yKCBuVmFsdWVzICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGRzdE9mZnNldCA9IDA7IGRzdE9mZnNldCAhPT0gblZhbHVlczsgKysgaSApIHtcblxuXHRcdFx0dmFyIHNyY09mZnNldCA9IG9yZGVyWyBpIF0gKiBzdHJpZGU7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdHJlc3VsdFsgZHN0T2Zmc2V0ICsrIF0gPSB2YWx1ZXNbIHNyY09mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9LFxuXG5cdC8vIGZ1bmN0aW9uIGZvciBwYXJzaW5nIEFPUyBrZXlmcmFtZSBmb3JtYXRzXG5cdGZsYXR0ZW5KU09OOiBmdW5jdGlvbiAoIGpzb25LZXlzLCB0aW1lcywgdmFsdWVzLCB2YWx1ZVByb3BlcnR5TmFtZSApIHtcblxuXHRcdHZhciBpID0gMSwga2V5ID0ganNvbktleXNbIDAgXTtcblxuXHRcdHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgJiYga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0XHR2YXIgdmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cblx0XHRcdGRvIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoLmFwcGx5KCB2YWx1ZXMsIHZhbHVlICk7IC8vIHB1c2ggYWxsIGVsZW1lbnRzXG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUudG9BcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyAuLi5hc3N1bWUgVEhSRUUuTWF0aC1pc2hcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWUudG9BcnJheSggdmFsdWVzLCB2YWx1ZXMubGVuZ3RoICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHB1c2ggYXMtaXNcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIG9mIGludGVycG9sYW50cyBvdmVyIHBhcmFtZXRyaWMgc2FtcGxlcy5cbiAqXG4gKiBUaGUgcGFyYW1ldGVyIGRvbWFpbiBpcyBvbmUgZGltZW5zaW9uYWwsIHR5cGljYWxseSB0aGUgdGltZSBvciBhIHBhdGhcbiAqIGFsb25nIGEgY3VydmUgZGVmaW5lZCBieSB0aGUgZGF0YS5cbiAqXG4gKiBUaGUgc2FtcGxlIHZhbHVlcyBjYW4gaGF2ZSBhbnkgZGltZW5zaW9uYWxpdHkgYW5kIGRlcml2ZWQgY2xhc3NlcyBtYXlcbiAqIGFwcGx5IHNwZWNpYWwgaW50ZXJwcmV0YXRpb25zIHRvIHRoZSBkYXRhLlxuICpcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgdGhlIGludGVydmFsIHNlZWsgaW4gYSBUZW1wbGF0ZSBNZXRob2QsIGRlZmVycmluZ1xuICogdGhlIGFjdHVhbCBpbnRlcnBvbGF0aW9uIHRvIGRlcml2ZWQgY2xhc3Nlcy5cbiAqXG4gKiBUaW1lIGNvbXBsZXhpdHkgaXMgTygxKSBmb3IgbGluZWFyIGFjY2VzcyBjcm9zc2luZyBhdCBtb3N0IHR3byBwb2ludHNcbiAqIGFuZCBPKGxvZyBOKSBmb3IgcmFuZG9tIGFjY2Vzcywgd2hlcmUgTiBpcyB0aGUgbnVtYmVyIG9mIHBvc2l0aW9ucy5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICpcbiAqIFx0XHRodHRwOi8vd3d3Lm9vZGVzaWduLmNvbS90ZW1wbGF0ZS1tZXRob2QtcGF0dGVybi5odG1sXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdHRoaXMucGFyYW1ldGVyUG9zaXRpb25zID0gcGFyYW1ldGVyUG9zaXRpb25zO1xuXHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cblx0dGhpcy5yZXN1bHRCdWZmZXIgPSByZXN1bHRCdWZmZXIgIT09IHVuZGVmaW5lZCA/XG5cdFx0cmVzdWx0QnVmZmVyIDogbmV3IHNhbXBsZVZhbHVlcy5jb25zdHJ1Y3Rvciggc2FtcGxlU2l6ZSApO1xuXHR0aGlzLnNhbXBsZVZhbHVlcyA9IHNhbXBsZVZhbHVlcztcblx0dGhpcy52YWx1ZVNpemUgPSBzYW1wbGVTaXplO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEludGVycG9sYW50LnByb3RvdHlwZSwge1xuXG5cdGV2YWx1YXRlOiBmdW5jdGlvbiAoIHQgKSB7XG5cblx0XHR2YXIgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdGkxID0gdGhpcy5fY2FjaGVkSW5kZXgsXG5cblx0XHRcdHQxID0gcHBbIGkxIF0sXG5cdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdHZhbGlkYXRlX2ludGVydmFsOiB7XG5cblx0XHRcdHNlZWs6IHtcblxuXHRcdFx0XHR2YXIgcmlnaHQ7XG5cblx0XHRcdFx0bGluZWFyX3NjYW46IHtcblxuXHRcdFx0XHRcdC8vLSBTZWUgaHR0cDovL2pzcGVyZi5jb20vY29tcGFyaXNvbi10by11bmRlZmluZWQvM1xuXHRcdFx0XHRcdC8vLSBzbG93ZXIgY29kZTpcblx0XHRcdFx0XHQvLy1cblx0XHRcdFx0XHQvLy0gXHRcdFx0XHRpZiAoIHQgPj0gdDEgfHwgdDEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRmb3J3YXJkX3NjYW46IGlmICggISAoIHQgPCB0MSApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgZ2l2ZVVwQXQgPSBpMSArIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDAgKSBicmVhayBmb3J3YXJkX3NjYW47XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBhZnRlciBlbmRcblxuXHRcdFx0XHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKCBpMSAtIDEsIHQsIHQwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQwID0gdDE7XG5cdFx0XHRcdFx0XHRcdHQxID0gcHBbICsrIGkxIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgaW5kZXhcblx0XHRcdFx0XHRcdHJpZ2h0ID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXHRcdFx0XHRcdGlmICggdCA8IHQwIHx8IHQwID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhICggdCA+PSB0MCApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBsb29waW5nP1xuXG5cdFx0XHRcdFx0XHR2YXIgdDFnbG9iYWwgPSBwcFsgMSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHQgPCB0MWdsb2JhbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpMSA9IDI7IC8vICsgMSwgdXNpbmcgdGhlIHNjYW4gZm9yIHRoZSBkZXRhaWxzXG5cdFx0XHRcdFx0XHRcdHQwID0gdDFnbG9iYWw7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gbGluZWFyIHJldmVyc2Ugc2NhblxuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgZ2l2ZVVwQXQgPSBpMSAtIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYmVmb3JlIHN0YXJ0XG5cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKCAwLCB0LCB0MSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIGkxID09PSBnaXZlVXBBdCApIGJyZWFrOyAvLyB0aGlzIGxvb3BcblxuXHRcdFx0XHRcdFx0XHR0MSA9IHQwO1xuXHRcdFx0XHRcdFx0XHR0MCA9IHBwWyAtLSBpMSAtIDEgXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHQgPj0gdDAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSBpbmRleFxuXHRcdFx0XHRcdFx0cmlnaHQgPSBpMTtcblx0XHRcdFx0XHRcdGkxID0gMDtcblx0XHRcdFx0XHRcdGJyZWFrIGxpbmVhcl9zY2FuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGhlIGludGVydmFsIGlzIHZhbGlkXG5cblx0XHRcdFx0XHRicmVhayB2YWxpZGF0ZV9pbnRlcnZhbDtcblxuXHRcdFx0XHR9IC8vIGxpbmVhciBzY2FuXG5cblx0XHRcdFx0Ly8gYmluYXJ5IHNlYXJjaFxuXG5cdFx0XHRcdHdoaWxlICggaTEgPCByaWdodCApIHtcblxuXHRcdFx0XHRcdHZhciBtaWQgPSAoIGkxICsgcmlnaHQgKSA+Pj4gMTtcblxuXHRcdFx0XHRcdGlmICggdCA8IHBwWyBtaWQgXSApIHtcblxuXHRcdFx0XHRcdFx0cmlnaHQgPSBtaWQ7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpMSA9IG1pZCArIDE7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHQxID0gcHBbIGkxIF07XG5cdFx0XHRcdHQwID0gcHBbIGkxIC0gMSBdO1xuXG5cdFx0XHRcdC8vIGNoZWNrIGJvdW5kYXJ5IGNhc2VzLCBhZ2FpblxuXG5cdFx0XHRcdGlmICggdDAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5iZWZvcmVTdGFydF8oIDAsIHQsIHQxICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdDEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKCBpMSAtIDEsIHQwLCB0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IC8vIHNlZWtcblxuXHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSBpMTtcblxuXHRcdFx0dGhpcy5pbnRlcnZhbENoYW5nZWRfKCBpMSwgdDAsIHQxICk7XG5cblx0XHR9IC8vIHZhbGlkYXRlX2ludGVydmFsXG5cblx0XHRyZXR1cm4gdGhpcy5pbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKTtcblxuXHR9LFxuXG5cdHNldHRpbmdzOiBudWxsLCAvLyBvcHRpb25hbCwgc3ViY2xhc3Mtc3BlY2lmaWMgc2V0dGluZ3Mgc3RydWN0dXJlXG5cdC8vIE5vdGU6IFRoZSBpbmRpcmVjdGlvbiBhbGxvd3MgY2VudHJhbCBjb250cm9sIG9mIG1hbnkgaW50ZXJwb2xhbnRzLlxuXG5cdC8vIC0tLSBQcm90ZWN0ZWQgaW50ZXJmYWNlXG5cblx0RGVmYXVsdFNldHRpbmdzXzoge30sXG5cblx0Z2V0U2V0dGluZ3NfOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXR0aW5ncyB8fCB0aGlzLkRlZmF1bHRTZXR0aW5nc187XG5cblx0fSxcblxuXHRjb3B5U2FtcGxlVmFsdWVfOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0Ly8gY29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyXG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0b2Zmc2V0ID0gaW5kZXggKiBzdHJpZGU7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPSB2YWx1ZXNbIG9mZnNldCArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyBUZW1wbGF0ZSBtZXRob2RzIGZvciBkZXJpdmVkIGNsYXNzZXM6XG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIC8qIGkxLCB0MCwgdCwgdDEgKi8gKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdjYWxsIHRvIGFic3RyYWN0IG1ldGhvZCcgKTtcblx0XHQvLyBpbXBsZW1lbnRhdGlvbnMgc2hhbGwgcmV0dXJuIHRoaXMucmVzdWx0QnVmZmVyXG5cblx0fSxcblxuXHRpbnRlcnZhbENoYW5nZWRfOiBmdW5jdGlvbiAoIC8qIGkxLCB0MCwgdDEgKi8gKSB7XG5cblx0XHQvLyBlbXB0eVxuXG5cdH1cblxufSApO1xuXG4vLyFcXCBERUNMQVJFIEFMSUFTIEFGVEVSIGFzc2lnbiBwcm90b3R5cGUgIVxuT2JqZWN0LmFzc2lnbiggSW50ZXJwb2xhbnQucHJvdG90eXBlLCB7XG5cblx0Ly8oIDAsIHQsIHQwICksIHJldHVybnMgdGhpcy5yZXN1bHRCdWZmZXJcblx0YmVmb3JlU3RhcnRfOiBJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXyxcblxuXHQvLyggTi0xLCB0Ti0xLCB0ICksIHJldHVybnMgdGhpcy5yZXN1bHRCdWZmZXJcblx0YWZ0ZXJFbmRfOiBJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXyxcblxufSApO1xuXG4vKipcbiAqIEZhc3QgYW5kIHNpbXBsZSBjdWJpYyBzcGxpbmUgaW50ZXJwb2xhbnQuXG4gKlxuICogSXQgd2FzIGRlcml2ZWQgZnJvbSBhIEhlcm1pdGlhbiBjb25zdHJ1Y3Rpb24gc2V0dGluZyB0aGUgZmlyc3QgZGVyaXZhdGl2ZVxuICogYXQgZWFjaCBzYW1wbGUgcG9zaXRpb24gdG8gdGhlIGxpbmVhciBzbG9wZSBiZXR3ZWVuIG5laWdoYm9yaW5nIHBvc2l0aW9uc1xuICogb3ZlciB0aGVpciBwYXJhbWV0ZXIgaW50ZXJ2YWwuXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEN1YmljSW50ZXJwb2xhbnQoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0SW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdHRoaXMuX3dlaWdodFByZXYgPSAtIDA7XG5cdHRoaXMuX29mZnNldFByZXYgPSAtIDA7XG5cdHRoaXMuX3dlaWdodE5leHQgPSAtIDA7XG5cdHRoaXMuX29mZnNldE5leHQgPSAtIDA7XG5cbn1cblxuQ3ViaWNJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcnBvbGFudC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBDdWJpY0ludGVycG9sYW50LFxuXG5cdERlZmF1bHRTZXR0aW5nc186IHtcblxuXHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxuXHRcdGVuZGluZ0VuZDogWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdH0sXG5cblx0aW50ZXJ2YWxDaGFuZ2VkXzogZnVuY3Rpb24gKCBpMSwgdDAsIHQxICkge1xuXG5cdFx0dmFyIHBwID0gdGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHRpUHJldiA9IGkxIC0gMixcblx0XHRcdGlOZXh0ID0gaTEgKyAxLFxuXG5cdFx0XHR0UHJldiA9IHBwWyBpUHJldiBdLFxuXHRcdFx0dE5leHQgPSBwcFsgaU5leHQgXTtcblxuXHRcdGlmICggdFByZXYgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy5nZXRTZXR0aW5nc18oKS5lbmRpbmdTdGFydCApIHtcblxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcblxuXHRcdFx0XHRcdC8vIGYnKHQwKSA9IDBcblx0XHRcdFx0XHRpUHJldiA9IGkxO1xuXHRcdFx0XHRcdHRQcmV2ID0gMiAqIHQwIC0gdDE7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcblx0XHRcdFx0XHRpUHJldiA9IHBwLmxlbmd0aCAtIDI7XG5cdFx0XHRcdFx0dFByZXYgPSB0MCArIHBwWyBpUHJldiBdIC0gcHBbIGlQcmV2ICsgMSBdO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0XHRcdFx0Ly8gZicnKHQwKSA9IDAgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcblx0XHRcdFx0XHR0UHJldiA9IHQxO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHROZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nRW5kICkge1xuXG5cdFx0XHRcdGNhc2UgWmVyb1Nsb3BlRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gZicodE4pID0gMFxuXHRcdFx0XHRcdGlOZXh0ID0gaTE7XG5cdFx0XHRcdFx0dE5leHQgPSAyICogdDEgLSB0MDtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgV3JhcEFyb3VuZEVuZGluZzpcblxuXHRcdFx0XHRcdC8vIHVzZSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjdXJ2ZVxuXHRcdFx0XHRcdGlOZXh0ID0gMTtcblx0XHRcdFx0XHR0TmV4dCA9IHQxICsgcHBbIDEgXSAtIHBwWyAwIF07XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiAvLyBaZXJvQ3VydmF0dXJlRW5kaW5nXG5cblx0XHRcdFx0XHQvLyBmJycodE4pID0gMCwgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXG5cdFx0XHRcdFx0aU5leHQgPSBpMSAtIDE7XG5cdFx0XHRcdFx0dE5leHQgPSB0MDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGhhbGZEdCA9ICggdDEgLSB0MCApICogMC41LFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemU7XG5cblx0XHR0aGlzLl93ZWlnaHRQcmV2ID0gaGFsZkR0IC8gKCB0MCAtIHRQcmV2ICk7XG5cdFx0dGhpcy5fd2VpZ2h0TmV4dCA9IGhhbGZEdCAvICggdE5leHQgLSB0MSApO1xuXHRcdHRoaXMuX29mZnNldFByZXYgPSBpUHJldiAqIHN0cmlkZTtcblx0XHR0aGlzLl9vZmZzZXROZXh0ID0gaU5leHQgKiBzdHJpZGU7XG5cblx0fSxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG8xID0gaTEgKiBzdHJpZGUsXHRcdG8wID0gbzEgLSBzdHJpZGUsXG5cdFx0XHRvUCA9IHRoaXMuX29mZnNldFByZXYsIFx0b04gPSB0aGlzLl9vZmZzZXROZXh0LFxuXHRcdFx0d1AgPSB0aGlzLl93ZWlnaHRQcmV2LFx0d04gPSB0aGlzLl93ZWlnaHROZXh0LFxuXG5cdFx0XHRwID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApLFxuXHRcdFx0cHAgPSBwICogcCxcblx0XHRcdHBwcCA9IHBwICogcDtcblxuXHRcdC8vIGV2YWx1YXRlIHBvbHlub21pYWxzXG5cblx0XHR2YXIgc1AgPSAtIHdQICogcHBwICsgMiAqIHdQICogcHAgLSB3UCAqIHA7XG5cdFx0dmFyIHMwID0gKCAxICsgd1AgKSAqIHBwcCArICggLSAxLjUgLSAyICogd1AgKSAqIHBwICsgKCAtIDAuNSArIHdQICkgKiBwICsgMTtcblx0XHR2YXIgczEgPSAoIC0gMSAtIHdOICkgKiBwcHAgKyAoIDEuNSArIHdOICkgKiBwcCArIDAuNSAqIHA7XG5cdFx0dmFyIHNOID0gd04gKiBwcHAgLSB3TiAqIHBwO1xuXG5cdFx0Ly8gY29tYmluZSBkYXRhIGxpbmVhcmx5XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPVxuXHRcdFx0XHRcdHNQICogdmFsdWVzWyBvUCArIGkgXSArXG5cdFx0XHRcdFx0czAgKiB2YWx1ZXNbIG8wICsgaSBdICtcblx0XHRcdFx0XHRzMSAqIHZhbHVlc1sgbzEgKyBpIF0gK1xuXHRcdFx0XHRcdHNOICogdmFsdWVzWyBvTiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIExpbmVhckludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdEludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxufVxuXG5MaW5lYXJJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcnBvbGFudC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lYXJJbnRlcnBvbGFudCxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG9mZnNldDEgPSBpMSAqIHN0cmlkZSxcblx0XHRcdG9mZnNldDAgPSBvZmZzZXQxIC0gc3RyaWRlLFxuXG5cdFx0XHR3ZWlnaHQxID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApLFxuXHRcdFx0d2VpZ2h0MCA9IDEgLSB3ZWlnaHQxO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID1cblx0XHRcdFx0XHR2YWx1ZXNbIG9mZnNldDAgKyBpIF0gKiB3ZWlnaHQwICtcblx0XHRcdFx0XHR2YWx1ZXNbIG9mZnNldDEgKyBpIF0gKiB3ZWlnaHQxO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogSW50ZXJwb2xhbnQgdGhhdCBldmFsdWF0ZXMgdG8gdGhlIHNhbXBsZSB2YWx1ZSBhdCB0aGUgcG9zaXRpb24gcHJlY2VlZGluZ1xuICogdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gRGlzY3JldGVJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRJbnRlcnBvbGFudC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cbn1cblxuRGlzY3JldGVJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcnBvbGFudC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBEaXNjcmV0ZUludGVycG9sYW50LFxuXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKCBpMSAvKiwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggaTEgLSAxICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgdGltZWQgc2VxdWVuY2Ugb2Yga2V5ZnJhbWVzIGZvciBhIHNwZWNpZmljIHByb3BlcnR5LlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRpZiAoIG5hbWUgPT09IHVuZGVmaW5lZCApIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIG5hbWUgaXMgdW5kZWZpbmVkJyApO1xuXHRpZiAoIHRpbWVzID09PSB1bmRlZmluZWQgfHwgdGltZXMubGVuZ3RoID09PSAwICkgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogbm8ga2V5ZnJhbWVzIGluIHRyYWNrIG5hbWVkICcgKyBuYW1lICk7XG5cblx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0aW1lcywgdGhpcy5UaW1lQnVmZmVyVHlwZSApO1xuXHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdmFsdWVzLCB0aGlzLlZhbHVlQnVmZmVyVHlwZSApO1xuXG5cdHRoaXMuc2V0SW50ZXJwb2xhdGlvbiggaW50ZXJwb2xhdGlvbiB8fCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuLy8gU3RhdGljIG1ldGhvZHNcblxuT2JqZWN0LmFzc2lnbiggS2V5ZnJhbWVUcmFjaywge1xuXG5cdC8vIFNlcmlhbGl6YXRpb24gKGluIHN0YXRpYyBjb250ZXh0LCBiZWNhdXNlIG9mIGNvbnN0cnVjdG9yIGludm9jYXRpb25cblx0Ly8gYW5kIGF1dG9tYXRpYyBpbnZvY2F0aW9uIG9mIC50b0pTT04pOlxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCB0cmFjayApIHtcblxuXHRcdHZhciB0cmFja1R5cGUgPSB0cmFjay5jb25zdHJ1Y3RvcjtcblxuXHRcdHZhciBqc29uO1xuXG5cdFx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgdG9KU09OIG1ldGhvZFxuXHRcdGlmICggdHJhY2tUeXBlLnRvSlNPTiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRqc29uID0gdHJhY2tUeXBlLnRvSlNPTiggdHJhY2sgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSB0aGUgZGF0YSBjYW4gYmUgc2VyaWFsaXplZCBhcy1pc1xuXHRcdFx0anNvbiA9IHtcblxuXHRcdFx0XHQnbmFtZSc6IHRyYWNrLm5hbWUsXG5cdFx0XHRcdCd0aW1lcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdHJhY2sudGltZXMsIEFycmF5ICksXG5cdFx0XHRcdCd2YWx1ZXMnOiBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHRyYWNrLnZhbHVlcywgQXJyYXkgKVxuXG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgaW50ZXJwb2xhdGlvbiA9IHRyYWNrLmdldEludGVycG9sYXRpb24oKTtcblxuXHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0cmFjay5EZWZhdWx0SW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0XHRqc29uLmludGVycG9sYXRpb24gPSBpbnRlcnBvbGF0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRqc29uLnR5cGUgPSB0cmFjay5WYWx1ZVR5cGVOYW1lOyAvLyBtYW5kYXRvcnlcblxuXHRcdHJldHVybiBqc29uO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSwge1xuXG5cdGNvbnN0cnVjdG9yOiBLZXlmcmFtZVRyYWNrLFxuXG5cdFRpbWVCdWZmZXJUeXBlOiBGbG9hdDMyQXJyYXksXG5cblx0VmFsdWVCdWZmZXJUeXBlOiBGbG9hdDMyQXJyYXksXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlTGluZWFyLFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOiBmdW5jdGlvbiAoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgRGlzY3JldGVJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH0sXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiBmdW5jdGlvbiAoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgTGluZWFySW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IEN1YmljSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdHNldEludGVycG9sYXRpb246IGZ1bmN0aW9uICggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdHZhciBmYWN0b3J5TWV0aG9kO1xuXG5cdFx0c3dpdGNoICggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZURpc2NyZXRlOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEludGVycG9sYXRlTGluZWFyOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZVNtb290aDpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoIGZhY3RvcnlNZXRob2QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG1lc3NhZ2UgPSBcInVuc3VwcG9ydGVkIGludGVycG9sYXRpb24gZm9yIFwiICtcblx0XHRcdFx0dGhpcy5WYWx1ZVR5cGVOYW1lICsgXCIga2V5ZnJhbWUgdHJhY2sgbmFtZWQgXCIgKyB0aGlzLm5hbWU7XG5cblx0XHRcdGlmICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIGZhbGwgYmFjayB0byBkZWZhdWx0LCB1bmxlc3MgdGhlIGRlZmF1bHQgaXRzZWxmIGlzIG1lc3NlZCB1cFxuXHRcdFx0XHRpZiAoIGludGVycG9sYXRpb24gIT09IHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnNldEludGVycG9sYXRpb24oIHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtZXNzYWdlICk7IC8vIGZhdGFsLCBpbiB0aGlzIGNhc2VcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazonLCBtZXNzYWdlICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPSBmYWN0b3J5TWV0aG9kO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRJbnRlcnBvbGF0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRzd2l0Y2ggKCB0aGlzLmNyZWF0ZUludGVycG9sYW50ICkge1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGU6XG5cblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlRGlzY3JldGU7XG5cblx0XHRcdGNhc2UgdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6XG5cblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlTGluZWFyO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZVNtb290aDtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGdldFZhbHVlU2l6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aCAvIHRoaXMudGltZXMubGVuZ3RoO1xuXG5cdH0sXG5cblx0Ly8gbW92ZSBhbGwga2V5ZnJhbWVzIGVpdGhlciBmb3J3YXJkcyBvciBiYWNrd2FyZHMgaW4gdGltZVxuXHRzaGlmdDogZnVuY3Rpb24gKCB0aW1lT2Zmc2V0ICkge1xuXG5cdFx0aWYgKCB0aW1lT2Zmc2V0ICE9PSAwLjAgKSB7XG5cblx0XHRcdHZhciB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICs9IHRpbWVPZmZzZXQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gc2NhbGUgYWxsIGtleWZyYW1lIHRpbWVzIGJ5IGEgZmFjdG9yICh1c2VmdWwgZm9yIGZyYW1lIDwtPiBzZWNvbmRzIGNvbnZlcnNpb25zKVxuXHRzY2FsZTogZnVuY3Rpb24gKCB0aW1lU2NhbGUgKSB7XG5cblx0XHRpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkge1xuXG5cdFx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB0aW1lcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dGltZXNbIGkgXSAqPSB0aW1lU2NhbGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gcmVtb3ZlcyBrZXlmcmFtZXMgYmVmb3JlIGFuZCBhZnRlciBhbmltYXRpb24gd2l0aG91dCBjaGFuZ2luZyBhbnkgdmFsdWVzIHdpdGhpbiB0aGUgcmFuZ2UgW3N0YXJ0VGltZSwgZW5kVGltZV0uXG5cdC8vIElNUE9SVEFOVDogV2UgZG8gbm90IHNoaWZ0IGFyb3VuZCBrZXlzIHRvIHRoZSBzdGFydCBvZiB0aGUgdHJhY2sgdGltZSwgYmVjYXVzZSBmb3IgaW50ZXJwb2xhdGVkIGtleXMgdGhpcyB3aWxsIGNoYW5nZSB0aGVpciB2YWx1ZXNcblx0dHJpbTogZnVuY3Rpb24gKCBzdGFydFRpbWUsIGVuZFRpbWUgKSB7XG5cblx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzLFxuXHRcdFx0bktleXMgPSB0aW1lcy5sZW5ndGgsXG5cdFx0XHRmcm9tID0gMCxcblx0XHRcdHRvID0gbktleXMgLSAxO1xuXG5cdFx0d2hpbGUgKCBmcm9tICE9PSBuS2V5cyAmJiB0aW1lc1sgZnJvbSBdIDwgc3RhcnRUaW1lICkge1xuXG5cdFx0XHQrKyBmcm9tO1xuXG5cdFx0fVxuXG5cdFx0d2hpbGUgKCB0byAhPT0gLSAxICYmIHRpbWVzWyB0byBdID4gZW5kVGltZSApIHtcblxuXHRcdFx0LS0gdG87XG5cblx0XHR9XG5cblx0XHQrKyB0bzsgLy8gaW5jbHVzaXZlIC0+IGV4Y2x1c2l2ZSBib3VuZFxuXG5cdFx0aWYgKCBmcm9tICE9PSAwIHx8IHRvICE9PSBuS2V5cyApIHtcblxuXHRcdFx0Ly8gZW1wdHkgdHJhY2tzIGFyZSBmb3JiaWRkZW4sIHNvIGtlZXAgYXQgbGVhc3Qgb25lIGtleWZyYW1lXG5cdFx0XHRpZiAoIGZyb20gPj0gdG8gKSB0byA9IE1hdGgubWF4KCB0bywgMSApLCBmcm9tID0gdG8gLSAxO1xuXG5cdFx0XHR2YXIgc3RyaWRlID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aW1lcywgZnJvbSwgdG8gKTtcblx0XHRcdHRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy52YWx1ZXMsIGZyb20gKiBzdHJpZGUsIHRvICogc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIGVuc3VyZSB3ZSBkbyBub3QgZ2V0IGEgR2FyYmFnZUluR2FyYmFnZU91dCBzaXR1YXRpb24sIG1ha2Ugc3VyZSB0cmFja3MgYXJlIGF0IGxlYXN0IG1pbmltYWxseSB2aWFibGVcblx0dmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2YWxpZCA9IHRydWU7XG5cblx0XHR2YXIgdmFsdWVTaXplID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogSW52YWxpZCB2YWx1ZSBzaXplIGluIHRyYWNrLicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzLFxuXHRcdFx0dmFsdWVzID0gdGhpcy52YWx1ZXMsXG5cblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoO1xuXG5cdFx0aWYgKCBuS2V5cyA9PT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFRyYWNrIGlzIGVtcHR5LicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR2YXIgcHJldlRpbWUgPSBudWxsO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuS2V5czsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnJUaW1lID0gdGltZXNbIGkgXTtcblxuXHRcdFx0aWYgKCB0eXBlb2YgY3VyclRpbWUgPT09ICdudW1iZXInICYmIGlzTmFOKCBjdXJyVGltZSApICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBUaW1lIGlzIG5vdCBhIHZhbGlkIG51bWJlci4nLCB0aGlzLCBpLCBjdXJyVGltZSApO1xuXHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHByZXZUaW1lICE9PSBudWxsICYmIHByZXZUaW1lID4gY3VyclRpbWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IE91dCBvZiBvcmRlciBrZXlzLicsIHRoaXMsIGksIGN1cnJUaW1lLCBwcmV2VGltZSApO1xuXHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRwcmV2VGltZSA9IGN1cnJUaW1lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIHZhbHVlcyApICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHZhbHVlcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmFsdWUgPSB2YWx1ZXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9LFxuXG5cdC8vIHJlbW92ZXMgZXF1aXZhbGVudCBzZXF1ZW50aWFsIGtleXMgYXMgY29tbW9uIGluIG1vcnBoIHRhcmdldCBzZXF1ZW5jZXNcblx0Ly8gKDAsMCwwLDAsMSwxLDEsMCwwLDAsMCwwLDAsMCkgLS0+ICgwLDAsMSwxLDAsMClcblx0b3B0aW1pemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0aW1lcyA9IHRoaXMudGltZXMsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCksXG5cblx0XHRcdHNtb290aEludGVycG9sYXRpb24gPSB0aGlzLmdldEludGVycG9sYXRpb24oKSA9PT0gSW50ZXJwb2xhdGVTbW9vdGgsXG5cblx0XHRcdHdyaXRlSW5kZXggPSAxLFxuXHRcdFx0bGFzdEluZGV4ID0gdGltZXMubGVuZ3RoIC0gMTtcblxuXHRcdGZvciAoIHZhciBpID0gMTsgaSA8IGxhc3RJbmRleDsgKysgaSApIHtcblxuXHRcdFx0dmFyIGtlZXAgPSBmYWxzZTtcblxuXHRcdFx0dmFyIHRpbWUgPSB0aW1lc1sgaSBdO1xuXHRcdFx0dmFyIHRpbWVOZXh0ID0gdGltZXNbIGkgKyAxIF07XG5cblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcblxuXHRcdFx0aWYgKCB0aW1lICE9PSB0aW1lTmV4dCAmJiAoIGkgIT09IDEgfHwgdGltZSAhPT0gdGltZVsgMCBdICkgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHNtb290aEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0XHQvLyByZW1vdmUgdW5uZWNlc3Nhcnkga2V5ZnJhbWVzIHNhbWUgYXMgdGhlaXIgbmVpZ2hib3JzXG5cblx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXG5cdFx0XHRcdFx0XHRvZmZzZXROID0gb2Zmc2V0ICsgc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9IHZhbHVlc1sgb2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB2YWx1ZXNbIG9mZnNldFAgKyBqIF0gfHxcblx0XHRcdFx0XHRcdFx0dmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0TiArIGogXSApIHtcblxuXHRcdFx0XHRcdFx0XHRrZWVwID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0a2VlcCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluLXBsYWNlIGNvbXBhY3Rpb25cblxuXHRcdFx0aWYgKCBrZWVwICkge1xuXG5cdFx0XHRcdGlmICggaSAhPT0gd3JpdGVJbmRleCApIHtcblxuXHRcdFx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0dmFyIHJlYWRPZmZzZXQgPSBpICogc3RyaWRlLFxuXHRcdFx0XHRcdFx0d3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdCsrIHdyaXRlSW5kZXg7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGZsdXNoIGxhc3Qga2V5ZnJhbWUgKGNvbXBhY3Rpb24gbG9va3MgYWhlYWQpXG5cblx0XHRpZiAoIGxhc3RJbmRleCA+IDAgKSB7XG5cblx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgbGFzdEluZGV4IF07XG5cblx0XHRcdGZvciAoIHZhciByZWFkT2Zmc2V0ID0gbGFzdEluZGV4ICogc3RyaWRlLCB3cml0ZU9mZnNldCA9IHdyaXRlSW5kZXggKiBzdHJpZGUsIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0dmFsdWVzWyB3cml0ZU9mZnNldCArIGogXSA9IHZhbHVlc1sgcmVhZE9mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB3cml0ZUluZGV4ICE9PSB0aW1lcy5sZW5ndGggKSB7XG5cblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aW1lcywgMCwgd3JpdGVJbmRleCApO1xuXHRcdFx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB2YWx1ZXMsIDAsIHdyaXRlSW5kZXggKiBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0aW1lcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudGltZXMsIDAgKTtcblx0XHR2YXIgdmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy52YWx1ZXMsIDAgKTtcblxuXHRcdHZhciBUeXBlZEtleWZyYW1lVHJhY2sgPSB0aGlzLmNvbnN0cnVjdG9yO1xuXHRcdHZhciB0cmFjayA9IG5ldyBUeXBlZEtleWZyYW1lVHJhY2soIHRoaXMubmFtZSwgdGltZXMsIHZhbHVlcyApO1xuXG5cdFx0Ly8gSW50ZXJwb2xhbnQgYXJndW1lbnQgdG8gY29uc3RydWN0b3IgaXMgbm90IHNhdmVkLCBzbyBjb3B5IHRoZSBmYWN0b3J5IG1ldGhvZCBkaXJlY3RseS5cblx0XHR0cmFjay5jcmVhdGVJbnRlcnBvbGFudCA9IHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQ7XG5cblx0XHRyZXR1cm4gdHJhY2s7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgVHJhY2sgb2YgQm9vbGVhbiBrZXlmcmFtZSB2YWx1ZXMuXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBCb29sZWFuS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcyApIHtcblxuXHRLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMgKTtcblxufVxuXG5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEJvb2xlYW5LZXlmcmFtZVRyYWNrLFxuXG5cdFZhbHVlVHlwZU5hbWU6ICdib29sJyxcblx0VmFsdWVCdWZmZXJUeXBlOiBBcnJheSxcblxuXHREZWZhdWx0SW50ZXJwb2xhdGlvbjogSW50ZXJwb2xhdGVEaXNjcmV0ZSxcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IHVuZGVmaW5lZCxcblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWRcblxuXHQvLyBOb3RlOiBBY3R1YWxseSB0aGlzIHRyYWNrIGNvdWxkIGhhdmUgYSBvcHRpbWl6ZWQgLyBjb21wcmVzc2VkXG5cdC8vIHJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIHZhbHVlIGFuZCBhIGN1c3RvbSBpbnRlcnBvbGFudCB0aGF0XG5cdC8vIGNvbXB1dGVzIFwiZmlyc3RWYWx1ZSBeIGlzT2RkKCBpbmRleCApXCIuXG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBUcmFjayBvZiBrZXlmcmFtZSB2YWx1ZXMgdGhhdCByZXByZXNlbnQgY29sb3IuXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBDb2xvcktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuQ29sb3JLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ29sb3JLZXlmcmFtZVRyYWNrLFxuXG5cdFZhbHVlVHlwZU5hbWU6ICdjb2xvcidcblxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXG5cblx0Ly8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXG5cblx0Ly8gTm90ZTogVmVyeSBiYXNpYyBpbXBsZW1lbnRhdGlvbiBhbmQgbm90aGluZyBzcGVjaWFsIHlldC5cblx0Ly8gSG93ZXZlciwgdGhpcyBpcyB0aGUgcGxhY2UgZm9yIGNvbG9yIHNwYWNlIHBhcmFtZXRlcml6YXRpb24uXG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBUcmFjayBvZiBudW1lcmljIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gTnVtYmVyS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKTtcblxufVxuXG5OdW1iZXJLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTnVtYmVyS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAnbnVtYmVyJ1xuXG5cdC8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcblxuXHQvLyBEZWZhdWx0SW50ZXJwb2xhdGlvbiBpcyBpbmhlcml0ZWRcblxufSApO1xuXG4vKipcbiAqIFNwaGVyaWNhbCBsaW5lYXIgdW5pdCBxdWF0ZXJuaW9uIGludGVycG9sYW50LlxuICpcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0SW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG59XG5cblF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcnBvbGFudC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQsXG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvZmZzZXQgPSBpMSAqIHN0cmlkZSxcblxuXHRcdFx0YWxwaGEgPSAoIHQgLSB0MCApIC8gKCB0MSAtIHQwICk7XG5cblx0XHRmb3IgKCB2YXIgZW5kID0gb2Zmc2V0ICsgc3RyaWRlOyBvZmZzZXQgIT09IGVuZDsgb2Zmc2V0ICs9IDQgKSB7XG5cblx0XHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KCByZXN1bHQsIDAsIHZhbHVlcywgb2Zmc2V0IC0gc3RyaWRlLCB2YWx1ZXMsIG9mZnNldCwgYWxwaGEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgVHJhY2sgb2YgcXVhdGVybmlvbiBrZXlmcmFtZSB2YWx1ZXMuXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG59XG5cblF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUXVhdGVybmlvbktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ3F1YXRlcm5pb24nLFxuXG5cdC8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcblxuXHREZWZhdWx0SW50ZXJwb2xhdGlvbjogSW50ZXJwb2xhdGVMaW5lYXIsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiBmdW5jdGlvbiAoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IHVuZGVmaW5lZCAvLyBub3QgeWV0IGltcGxlbWVudGVkXG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBUcmFjayB0aGF0IGludGVycG9sYXRlcyBTdHJpbmdzXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBTdHJpbmdLZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG59XG5cblN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTdHJpbmdLZXlmcmFtZVRyYWNrLFxuXG5cdFZhbHVlVHlwZU5hbWU6ICdzdHJpbmcnLFxuXHRWYWx1ZUJ1ZmZlclR5cGU6IEFycmF5LFxuXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZURpc2NyZXRlLFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogdW5kZWZpbmVkLFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDogdW5kZWZpbmVkXG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBUcmFjayBvZiB2ZWN0b3JlZCBrZXlmcmFtZSB2YWx1ZXMuXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBWZWN0b3JLZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG59XG5cblZlY3RvcktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBWZWN0b3JLZXlmcmFtZVRyYWNrLFxuXG5cdFZhbHVlVHlwZU5hbWU6ICd2ZWN0b3InXG5cblx0Ly8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuXG5cdC8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZFxuXG59ICk7XG5cbi8qKlxuICpcbiAqIFJldXNhYmxlIHNldCBvZiBUcmFja3MgdGhhdCByZXByZXNlbnQgYW4gYW5pbWF0aW9uLlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqL1xuXG5mdW5jdGlvbiBBbmltYXRpb25DbGlwKCBuYW1lLCBkdXJhdGlvbiwgdHJhY2tzICkge1xuXG5cdHRoaXMubmFtZSA9IG5hbWU7XG5cdHRoaXMudHJhY2tzID0gdHJhY2tzO1xuXHR0aGlzLmR1cmF0aW9uID0gKCBkdXJhdGlvbiAhPT0gdW5kZWZpbmVkICkgPyBkdXJhdGlvbiA6IC0gMTtcblxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHQvLyB0aGlzIG1lYW5zIGl0IHNob3VsZCBmaWd1cmUgb3V0IGl0cyBkdXJhdGlvbiBieSBzY2FubmluZyB0aGUgdHJhY2tzXG5cdGlmICggdGhpcy5kdXJhdGlvbiA8IDAgKSB7XG5cblx0XHR0aGlzLnJlc2V0RHVyYXRpb24oKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSggdHlwZU5hbWUgKSB7XG5cblx0c3dpdGNoICggdHlwZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblxuXHRcdGNhc2UgJ3NjYWxhcic6XG5cdFx0Y2FzZSAnZG91YmxlJzpcblx0XHRjYXNlICdmbG9hdCc6XG5cdFx0Y2FzZSAnbnVtYmVyJzpcblx0XHRjYXNlICdpbnRlZ2VyJzpcblxuXHRcdFx0cmV0dXJuIE51bWJlcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICd2ZWN0b3InOlxuXHRcdGNhc2UgJ3ZlY3RvcjInOlxuXHRcdGNhc2UgJ3ZlY3RvcjMnOlxuXHRcdGNhc2UgJ3ZlY3RvcjQnOlxuXG5cdFx0XHRyZXR1cm4gVmVjdG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ2NvbG9yJzpcblxuXHRcdFx0cmV0dXJuIENvbG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ3F1YXRlcm5pb24nOlxuXG5cdFx0XHRyZXR1cm4gUXVhdGVybmlvbktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdib29sJzpcblx0XHRjYXNlICdib29sZWFuJzpcblxuXHRcdFx0cmV0dXJuIEJvb2xlYW5LZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAnc3RyaW5nJzpcblxuXHRcdFx0cmV0dXJuIFN0cmluZ0tleWZyYW1lVHJhY2s7XG5cblx0fVxuXG5cdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFVuc3VwcG9ydGVkIHR5cGVOYW1lOiAnICsgdHlwZU5hbWUgKTtcblxufVxuXG5mdW5jdGlvbiBwYXJzZUtleWZyYW1lVHJhY2soIGpzb24gKSB7XG5cblx0aWYgKCBqc29uLnR5cGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIHR5cGUgdW5kZWZpbmVkLCBjYW4gbm90IHBhcnNlJyApO1xuXG5cdH1cblxuXHR2YXIgdHJhY2tUeXBlID0gZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSgganNvbi50eXBlICk7XG5cblx0aWYgKCBqc29uLnRpbWVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR2YXIgdGltZXMgPSBbXSwgdmFsdWVzID0gW107XG5cblx0XHRBbmltYXRpb25VdGlscy5mbGF0dGVuSlNPTigganNvbi5rZXlzLCB0aW1lcywgdmFsdWVzLCAndmFsdWUnICk7XG5cblx0XHRqc29uLnRpbWVzID0gdGltZXM7XG5cdFx0anNvbi52YWx1ZXMgPSB2YWx1ZXM7XG5cblx0fVxuXG5cdC8vIGRlcml2ZWQgY2xhc3NlcyBjYW4gZGVmaW5lIGEgc3RhdGljIHBhcnNlIG1ldGhvZFxuXHRpZiAoIHRyYWNrVHlwZS5wYXJzZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0cmV0dXJuIHRyYWNrVHlwZS5wYXJzZSgganNvbiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBieSBkZWZhdWx0LCB3ZSBhc3N1bWUgYSBjb25zdHJ1Y3RvciBjb21wYXRpYmxlIHdpdGggdGhlIGJhc2Vcblx0XHRyZXR1cm4gbmV3IHRyYWNrVHlwZSgganNvbi5uYW1lLCBqc29uLnRpbWVzLCBqc29uLnZhbHVlcywganNvbi5pbnRlcnBvbGF0aW9uICk7XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkNsaXAsIHtcblxuXHRwYXJzZTogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdLFxuXHRcdFx0anNvblRyYWNrcyA9IGpzb24udHJhY2tzLFxuXHRcdFx0ZnJhbWVUaW1lID0gMS4wIC8gKCBqc29uLmZwcyB8fCAxLjAgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGpzb25UcmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR0cmFja3MucHVzaCggcGFyc2VLZXlmcmFtZVRyYWNrKCBqc29uVHJhY2tzWyBpIF0gKS5zY2FsZSggZnJhbWVUaW1lICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCgganNvbi5uYW1lLCBqc29uLmR1cmF0aW9uLCB0cmFja3MgKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBjbGlwICkge1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdLFxuXHRcdFx0Y2xpcFRyYWNrcyA9IGNsaXAudHJhY2tzO1xuXG5cdFx0dmFyIGpzb24gPSB7XG5cblx0XHRcdCduYW1lJzogY2xpcC5uYW1lLFxuXHRcdFx0J2R1cmF0aW9uJzogY2xpcC5kdXJhdGlvbixcblx0XHRcdCd0cmFja3MnOiB0cmFja3MsXG5cdFx0XHQndXVpZCc6IGNsaXAudXVpZFxuXG5cdFx0fTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGNsaXBUcmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR0cmFja3MucHVzaCggS2V5ZnJhbWVUcmFjay50b0pTT04oIGNsaXBUcmFja3NbIGkgXSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ganNvbjtcblxuXHR9LFxuXG5cdENyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlOiBmdW5jdGlvbiAoIG5hbWUsIG1vcnBoVGFyZ2V0U2VxdWVuY2UsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0dmFyIG51bU1vcnBoVGFyZ2V0cyA9IG1vcnBoVGFyZ2V0U2VxdWVuY2UubGVuZ3RoO1xuXHRcdHZhciB0cmFja3MgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG51bU1vcnBoVGFyZ2V0czsgaSArKyApIHtcblxuXHRcdFx0dmFyIHRpbWVzID0gW107XG5cdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdHRpbWVzLnB1c2goXG5cdFx0XHRcdCggaSArIG51bU1vcnBoVGFyZ2V0cyAtIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyxcblx0XHRcdFx0aSxcblx0XHRcdFx0KCBpICsgMSApICUgbnVtTW9ycGhUYXJnZXRzICk7XG5cblx0XHRcdHZhbHVlcy5wdXNoKCAwLCAxLCAwICk7XG5cblx0XHRcdHZhciBvcmRlciA9IEFuaW1hdGlvblV0aWxzLmdldEtleWZyYW1lT3JkZXIoIHRpbWVzICk7XG5cdFx0XHR0aW1lcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB0aW1lcywgMSwgb3JkZXIgKTtcblx0XHRcdHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB2YWx1ZXMsIDEsIG9yZGVyICk7XG5cblx0XHRcdC8vIGlmIHRoZXJlIGlzIGEga2V5IGF0IHRoZSBmaXJzdCBmcmFtZSwgZHVwbGljYXRlIGl0IGFzIHRoZVxuXHRcdFx0Ly8gbGFzdCBmcmFtZSBhcyB3ZWxsIGZvciBwZXJmZWN0IGxvb3AuXG5cdFx0XHRpZiAoICEgbm9Mb29wICYmIHRpbWVzWyAwIF0gPT09IDAgKSB7XG5cblx0XHRcdFx0dGltZXMucHVzaCggbnVtTW9ycGhUYXJnZXRzICk7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZXNbIDAgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRyYWNrcy5wdXNoKFxuXHRcdFx0XHRuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayhcblx0XHRcdFx0XHQnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1snICsgbW9ycGhUYXJnZXRTZXF1ZW5jZVsgaSBdLm5hbWUgKyAnXScsXG5cdFx0XHRcdFx0dGltZXMsIHZhbHVlc1xuXHRcdFx0XHQpLnNjYWxlKCAxLjAgLyBmcHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKCBuYW1lLCAtIDEsIHRyYWNrcyApO1xuXG5cdH0sXG5cblx0ZmluZEJ5TmFtZTogZnVuY3Rpb24gKCBvYmplY3RPckNsaXBBcnJheSwgbmFtZSApIHtcblxuXHRcdHZhciBjbGlwQXJyYXkgPSBvYmplY3RPckNsaXBBcnJheTtcblxuXHRcdGlmICggISBBcnJheS5pc0FycmF5KCBvYmplY3RPckNsaXBBcnJheSApICkge1xuXG5cdFx0XHR2YXIgbyA9IG9iamVjdE9yQ2xpcEFycmF5O1xuXHRcdFx0Y2xpcEFycmF5ID0gby5nZW9tZXRyeSAmJiBvLmdlb21ldHJ5LmFuaW1hdGlvbnMgfHwgby5hbmltYXRpb25zO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2xpcEFycmF5Lmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBjbGlwQXJyYXlbIGkgXS5uYW1lID09PSBuYW1lICkge1xuXG5cdFx0XHRcdHJldHVybiBjbGlwQXJyYXlbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fSxcblxuXHRDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlczogZnVuY3Rpb24gKCBtb3JwaFRhcmdldHMsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0dmFyIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzID0ge307XG5cblx0XHQvLyB0ZXN0ZWQgd2l0aCBodHRwczovL3JlZ2V4MTAxLmNvbS8gb24gdHJpY2sgc2VxdWVuY2VzXG5cdFx0Ly8gc3VjaCBmbGFtaW5nb19mbHlBXzAwMywgZmxhbWluZ29fcnVuMV8wMDMsIGNyZGVhdGgwMDU5XG5cdFx0dmFyIHBhdHRlcm4gPSAvXihbXFx3LV0qPykoW1xcZF0rKSQvO1xuXG5cdFx0Ly8gc29ydCBtb3JwaCB0YXJnZXQgbmFtZXMgaW50byBhbmltYXRpb24gZ3JvdXBzIGJhc2VkXG5cdFx0Ly8gcGF0dGVybnMgbGlrZSBXYWxrXzAwMSwgV2Fsa18wMDIsIFJ1bl8wMDEsIFJ1bl8wMDJcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGkgXTtcblx0XHRcdHZhciBwYXJ0cyA9IG1vcnBoVGFyZ2V0Lm5hbWUubWF0Y2goIHBhdHRlcm4gKTtcblxuXHRcdFx0aWYgKCBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdHZhciBuYW1lID0gcGFydHNbIDEgXTtcblxuXHRcdFx0XHR2YXIgYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXTtcblx0XHRcdFx0aWYgKCAhIGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF0gPSBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBbXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YW5pbWF0aW9uTW9ycGhUYXJnZXRzLnB1c2goIG1vcnBoVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBjbGlwcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdGNsaXBzLnB1c2goIEFuaW1hdGlvbkNsaXAuQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UoIG5hbWUsIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF0sIGZwcywgbm9Mb29wICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjbGlwcztcblxuXHR9LFxuXG5cdC8vIHBhcnNlIHRoZSBhbmltYXRpb24uaGllcmFyY2h5IGZvcm1hdFxuXHRwYXJzZUFuaW1hdGlvbjogZnVuY3Rpb24gKCBhbmltYXRpb24sIGJvbmVzICkge1xuXG5cdFx0aWYgKCAhIGFuaW1hdGlvbiApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbkNsaXA6IE5vIGFuaW1hdGlvbiBpbiBKU09OTG9hZGVyIGRhdGEuJyApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgYWRkTm9uZW1wdHlUcmFjayA9IGZ1bmN0aW9uICggdHJhY2tUeXBlLCB0cmFja05hbWUsIGFuaW1hdGlvbktleXMsIHByb3BlcnR5TmFtZSwgZGVzdFRyYWNrcyApIHtcblxuXHRcdFx0Ly8gb25seSByZXR1cm4gdHJhY2sgaWYgdGhlcmUgYXJlIGFjdHVhbGx5IGtleXMuXG5cdFx0XHRpZiAoIGFuaW1hdGlvbktleXMubGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHRcdHZhciB0aW1lcyA9IFtdO1xuXHRcdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGFuaW1hdGlvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHByb3BlcnR5TmFtZSApO1xuXG5cdFx0XHRcdC8vIGVtcHR5IGtleXMgYXJlIGZpbHRlcmVkIG91dCwgc28gY2hlY2sgYWdhaW5cblx0XHRcdFx0aWYgKCB0aW1lcy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdFx0XHRkZXN0VHJhY2tzLnB1c2goIG5ldyB0cmFja1R5cGUoIHRyYWNrTmFtZSwgdGltZXMsIHZhbHVlcyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdO1xuXG5cdFx0dmFyIGNsaXBOYW1lID0gYW5pbWF0aW9uLm5hbWUgfHwgJ2RlZmF1bHQnO1xuXHRcdC8vIGF1dG9tYXRpYyBsZW5ndGggZGV0ZXJtaW5hdGlvbiBpbiBBbmltYXRpb25DbGlwLlxuXHRcdHZhciBkdXJhdGlvbiA9IGFuaW1hdGlvbi5sZW5ndGggfHwgLSAxO1xuXHRcdHZhciBmcHMgPSBhbmltYXRpb24uZnBzIHx8IDMwO1xuXG5cdFx0dmFyIGhpZXJhcmNoeVRyYWNrcyA9IGFuaW1hdGlvbi5oaWVyYXJjaHkgfHwgW107XG5cblx0XHRmb3IgKCB2YXIgaCA9IDA7IGggPCBoaWVyYXJjaHlUcmFja3MubGVuZ3RoOyBoICsrICkge1xuXG5cdFx0XHR2YXIgYW5pbWF0aW9uS2V5cyA9IGhpZXJhcmNoeVRyYWNrc1sgaCBdLmtleXM7XG5cblx0XHRcdC8vIHNraXAgZW1wdHkgdHJhY2tzXG5cdFx0XHRpZiAoICEgYW5pbWF0aW9uS2V5cyB8fCBhbmltYXRpb25LZXlzLmxlbmd0aCA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHQvLyBwcm9jZXNzIG1vcnBoIHRhcmdldHNcblx0XHRcdGlmICggYW5pbWF0aW9uS2V5c1sgMCBdLm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHQvLyBmaWd1cmUgb3V0IGFsbCBtb3JwaCB0YXJnZXRzIHVzZWQgaW4gdGhpcyB0cmFja1xuXHRcdFx0XHR2YXIgbW9ycGhUYXJnZXROYW1lcyA9IHt9O1xuXG5cdFx0XHRcdGZvciAoIHZhciBrID0gMDsgayA8IGFuaW1hdGlvbktleXMubGVuZ3RoOyBrICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgbSA9IDA7IG0gPCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRtb3JwaFRhcmdldE5hbWVzWyBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzWyBtIF0gXSA9IC0gMTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBjcmVhdGUgYSB0cmFjayBmb3IgZWFjaCBtb3JwaCB0YXJnZXQgd2l0aCBhbGwgemVyb1xuXHRcdFx0XHQvLyBtb3JwaFRhcmdldEluZmx1ZW5jZXMgZXhjZXB0IGZvciB0aGUga2V5cyBpbiB3aGljaFxuXHRcdFx0XHQvLyB0aGUgbW9ycGhUYXJnZXQgaXMgbmFtZWQuXG5cdFx0XHRcdGZvciAoIHZhciBtb3JwaFRhcmdldE5hbWUgaW4gbW9ycGhUYXJnZXROYW1lcyApIHtcblxuXHRcdFx0XHRcdHZhciB0aW1lcyA9IFtdO1xuXHRcdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBtID0gMDsgbSAhPT0gYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ICsrIG0gKSB7XG5cblx0XHRcdFx0XHRcdHZhciBhbmltYXRpb25LZXkgPSBhbmltYXRpb25LZXlzWyBrIF07XG5cblx0XHRcdFx0XHRcdHRpbWVzLnB1c2goIGFuaW1hdGlvbktleS50aW1lICk7XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggKCBhbmltYXRpb25LZXkubW9ycGhUYXJnZXQgPT09IG1vcnBoVGFyZ2V0TmFtZSApID8gMSA6IDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRyYWNrcy5wdXNoKCBuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayggJy5tb3JwaFRhcmdldEluZmx1ZW5jZVsnICsgbW9ycGhUYXJnZXROYW1lICsgJ10nLCB0aW1lcywgdmFsdWVzICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZHVyYXRpb24gPSBtb3JwaFRhcmdldE5hbWVzLmxlbmd0aCAqICggZnBzIHx8IDEuMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIC4uLmFzc3VtZSBza2VsZXRhbCBhbmltYXRpb25cblxuXHRcdFx0XHR2YXIgYm9uZU5hbWUgPSAnLmJvbmVzWycgKyBib25lc1sgaCBdLm5hbWUgKyAnXSc7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRWZWN0b3JLZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcucG9zaXRpb24nLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdwb3MnLCB0cmFja3MgKTtcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcucXVhdGVybmlvbicsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3JvdCcsIHRyYWNrcyApO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0VmVjdG9yS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnNjYWxlJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAnc2NsJywgdHJhY2tzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdHJhY2tzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgY2xpcCA9IG5ldyBBbmltYXRpb25DbGlwKCBjbGlwTmFtZSwgZHVyYXRpb24sIHRyYWNrcyApO1xuXG5cdFx0cmV0dXJuIGNsaXA7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkNsaXAucHJvdG90eXBlLCB7XG5cblx0cmVzZXREdXJhdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRyYWNrcyA9IHRoaXMudHJhY2tzLCBkdXJhdGlvbiA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB0cmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgdHJhY2sgPSB0aGlzLnRyYWNrc1sgaSBdO1xuXG5cdFx0XHRkdXJhdGlvbiA9IE1hdGgubWF4KCBkdXJhdGlvbiwgdHJhY2sudGltZXNbIHRyYWNrLnRpbWVzLmxlbmd0aCAtIDEgXSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmltOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudHJhY2tzWyBpIF0udHJpbSggMCwgdGhpcy5kdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZhbGlkID0gdHJ1ZTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsaWQgPSB2YWxpZCAmJiB0aGlzLnRyYWNrc1sgaSBdLnZhbGlkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsaWQ7XG5cblx0fSxcblxuXHRvcHRpbWl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRyYWNrc1sgaSBdLm9wdGltaXplKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0cmFja3MgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dHJhY2tzLnB1c2goIHRoaXMudHJhY2tzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKCB0aGlzLm5hbWUsIHRoaXMuZHVyYXRpb24sIHRyYWNrcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIENhY2hlID0ge1xuXG5cdGVuYWJsZWQ6IGZhbHNlLFxuXG5cdGZpbGVzOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uICgga2V5LCBmaWxlICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdBZGRpbmcga2V5OicsIGtleSApO1xuXG5cdFx0dGhpcy5maWxlc1sga2V5IF0gPSBmaWxlO1xuXG5cdH0sXG5cblx0Z2V0OiBmdW5jdGlvbiAoIGtleSApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQ2hlY2tpbmcga2V5OicsIGtleSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsZXNbIGtleSBdO1xuXG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiAoIGtleSApIHtcblxuXHRcdGRlbGV0ZSB0aGlzLmZpbGVzWyBrZXkgXTtcblxuXHR9LFxuXG5cdGNsZWFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmZpbGVzID0ge307XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTG9hZGluZ01hbmFnZXIoIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHZhciBpc0xvYWRpbmcgPSBmYWxzZTtcblx0dmFyIGl0ZW1zTG9hZGVkID0gMDtcblx0dmFyIGl0ZW1zVG90YWwgPSAwO1xuXHR2YXIgdXJsTW9kaWZpZXIgPSB1bmRlZmluZWQ7XG5cblx0Ly8gUmVmZXIgdG8gIzU2ODkgZm9yIHRoZSByZWFzb24gd2h5IHdlIGRvbid0IHNldCAub25TdGFydFxuXHQvLyBpbiB0aGUgY29uc3RydWN0b3JcblxuXHR0aGlzLm9uU3RhcnQgPSB1bmRlZmluZWQ7XG5cdHRoaXMub25Mb2FkID0gb25Mb2FkO1xuXHR0aGlzLm9uUHJvZ3Jlc3MgPSBvblByb2dyZXNzO1xuXHR0aGlzLm9uRXJyb3IgPSBvbkVycm9yO1xuXG5cdHRoaXMuaXRlbVN0YXJ0ID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRpdGVtc1RvdGFsICsrO1xuXG5cdFx0aWYgKCBpc0xvYWRpbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uU3RhcnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5vblN0YXJ0KCB1cmwsIGl0ZW1zTG9hZGVkLCBpdGVtc1RvdGFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlzTG9hZGluZyA9IHRydWU7XG5cblx0fTtcblxuXHR0aGlzLml0ZW1FbmQgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdGl0ZW1zTG9hZGVkICsrO1xuXG5cdFx0aWYgKCBzY29wZS5vblByb2dyZXNzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm9uUHJvZ3Jlc3MoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdH1cblxuXHRcdGlmICggaXRlbXNMb2FkZWQgPT09IGl0ZW1zVG90YWwgKSB7XG5cblx0XHRcdGlzTG9hZGluZyA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLm9uTG9hZCgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLml0ZW1FcnJvciA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0aWYgKCBzY29wZS5vbkVycm9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm9uRXJyb3IoIHVybCApO1xuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5yZXNvbHZlVVJMID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRpZiAoIHVybE1vZGlmaWVyICkge1xuXG5cdFx0XHRyZXR1cm4gdXJsTW9kaWZpZXIoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVybDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0VVJMTW9kaWZpZXIgPSBmdW5jdGlvbiAoIHRyYW5zZm9ybSApIHtcblxuXHRcdHVybE1vZGlmaWVyID0gdHJhbnNmb3JtO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cbn1cblxudmFyIERlZmF1bHRMb2FkaW5nTWFuYWdlciA9IG5ldyBMb2FkaW5nTWFuYWdlcigpO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIGxvYWRpbmcgPSB7fTtcblxuZnVuY3Rpb24gRmlsZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBGaWxlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIHJlcXVlc3QgaXMgZHVwbGljYXRlXG5cblx0XHRpZiAoIGxvYWRpbmdbIHVybCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxvYWRpbmdbIHVybCBdLnB1c2goIHtcblxuXHRcdFx0XHRvbkxvYWQ6IG9uTG9hZCxcblx0XHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcblx0XHRcdFx0b25FcnJvcjogb25FcnJvclxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBkYXRhOiBVUklcblx0XHR2YXIgZGF0YVVyaVJlZ2V4ID0gL15kYXRhOiguKj8pKDtiYXNlNjQpPywoLiopJC87XG5cdFx0dmFyIGRhdGFVcmlSZWdleFJlc3VsdCA9IHVybC5tYXRjaCggZGF0YVVyaVJlZ2V4ICk7XG5cblx0XHQvLyBTYWZhcmkgY2FuIG5vdCBoYW5kbGUgRGF0YSBVUklzIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Qgc28gcHJvY2VzcyBtYW51YWxseVxuXHRcdGlmICggZGF0YVVyaVJlZ2V4UmVzdWx0ICkge1xuXG5cdFx0XHR2YXIgbWltZVR5cGUgPSBkYXRhVXJpUmVnZXhSZXN1bHRbIDEgXTtcblx0XHRcdHZhciBpc0Jhc2U2NCA9ICEhIGRhdGFVcmlSZWdleFJlc3VsdFsgMiBdO1xuXHRcdFx0dmFyIGRhdGEgPSBkYXRhVXJpUmVnZXhSZXN1bHRbIDMgXTtcblxuXHRcdFx0ZGF0YSA9IGRlY29kZVVSSUNvbXBvbmVudCggZGF0YSApO1xuXG5cdFx0XHRpZiAoIGlzQmFzZTY0ICkgZGF0YSA9IGF0b2IoIGRhdGEgKTtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHR2YXIgcmVzcG9uc2U7XG5cdFx0XHRcdHZhciByZXNwb25zZVR5cGUgPSAoIHRoaXMucmVzcG9uc2VUeXBlIHx8ICcnICkudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0XHRzd2l0Y2ggKCByZXNwb25zZVR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdhcnJheWJ1ZmZlcic6XG5cdFx0XHRcdFx0Y2FzZSAnYmxvYic6XG5cblx0XHRcdFx0XHRcdHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoIGRhdGEubGVuZ3RoICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZpZXdbIGkgXSA9IGRhdGEuY2hhckNvZGVBdCggaSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggcmVzcG9uc2VUeXBlID09PSAnYmxvYicgKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgQmxvYiggWyB2aWV3LmJ1ZmZlciBdLCB7IHR5cGU6IG1pbWVUeXBlIH0gKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IHZpZXcuYnVmZmVyO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnZG9jdW1lbnQnOlxuXG5cdFx0XHRcdFx0XHR2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBtaW1lVHlwZSApO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ2pzb24nOlxuXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IEpTT04ucGFyc2UoIGRhdGEgKTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OiAvLyAndGV4dCcgb3Igb3RoZXJcblxuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBkYXRhO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2FpdCBmb3IgbmV4dCBicm93c2VyIHRpY2sgbGlrZSBzdGFuZGFyZCBYTUxIdHRwUmVxdWVzdCBldmVudCBkaXNwYXRjaGluZyBkb2VzXG5cdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCByZXNwb25zZSApO1xuXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHR9LCAwICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0XHQvLyBXYWl0IGZvciBuZXh0IGJyb3dzZXIgdGljayBsaWtlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IGV2ZW50IGRpc3BhdGNoaW5nIGRvZXNcblx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZXJyb3IgKTtcblxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdH0sIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSW5pdGlhbGlzZSBhcnJheSBmb3IgZHVwbGljYXRlIHJlcXVlc3RzXG5cblx0XHRcdGxvYWRpbmdbIHVybCBdID0gW107XG5cblx0XHRcdGxvYWRpbmdbIHVybCBdLnB1c2goIHtcblxuXHRcdFx0XHRvbkxvYWQ6IG9uTG9hZCxcblx0XHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcblx0XHRcdFx0b25FcnJvcjogb25FcnJvclxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cblx0XHRcdHJlcXVlc3Qub3BlbiggJ0dFVCcsIHVybCwgdHJ1ZSApO1xuXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgZnVuY3Rpb24gKCBldmVudCApIHtcblxuXHRcdFx0XHR2YXIgcmVzcG9uc2UgPSB0aGlzLnJlc3BvbnNlO1xuXG5cdFx0XHRcdENhY2hlLmFkZCggdXJsLCByZXNwb25zZSApO1xuXG5cdFx0XHRcdHZhciBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0aWYgKCB0aGlzLnN0YXR1cyA9PT0gMjAwIHx8IHRoaXMuc3RhdHVzID09PSAwICkge1xuXG5cdFx0XHRcdFx0Ly8gU29tZSBicm93c2VycyByZXR1cm4gSFRUUCBTdGF0dXMgMCB3aGVuIHVzaW5nIG5vbi1odHRwIHByb3RvY29sXG5cdFx0XHRcdFx0Ly8gZS5nLiAnZmlsZTovLycgb3IgJ2RhdGE6Ly8nLiBIYW5kbGUgYXMgc3VjY2Vzcy5cblxuXHRcdFx0XHRcdGlmICggdGhpcy5zdGF0dXMgPT09IDAgKSBjb25zb2xlLndhcm4oICdUSFJFRS5GaWxlTG9hZGVyOiBIVFRQIFN0YXR1cyAwIHJlY2VpdmVkLicgKTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkxvYWQgKSBjYWxsYmFjay5vbkxvYWQoIHJlc3BvbnNlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25FcnJvciApIGNhbGxiYWNrLm9uRXJyb3IoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIGZhbHNlICk7XG5cblx0XHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciggJ3Byb2dyZXNzJywgZnVuY3Rpb24gKCBldmVudCApIHtcblxuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25Qcm9ncmVzcyApIGNhbGxiYWNrLm9uUHJvZ3Jlc3MoIGV2ZW50ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBmYWxzZSApO1xuXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkVycm9yICkgY2FsbGJhY2sub25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCBmYWxzZSApO1xuXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdhYm9ydCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkVycm9yICkgY2FsbGJhY2sub25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCBmYWxzZSApO1xuXG5cdFx0XHRpZiAoIHRoaXMucmVzcG9uc2VUeXBlICE9PSB1bmRlZmluZWQgKSByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IHRoaXMucmVzcG9uc2VUeXBlO1xuXHRcdFx0aWYgKCB0aGlzLndpdGhDcmVkZW50aWFscyAhPT0gdW5kZWZpbmVkICkgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcblxuXHRcdFx0aWYgKCByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUgKSByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUoIHRoaXMubWltZVR5cGUgIT09IHVuZGVmaW5lZCA/IHRoaXMubWltZVR5cGUgOiAndGV4dC9wbGFpbicgKTtcblxuXHRcdFx0Zm9yICggdmFyIGhlYWRlciBpbiB0aGlzLnJlcXVlc3RIZWFkZXIgKSB7XG5cblx0XHRcdFx0cmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCBoZWFkZXIsIHRoaXMucmVxdWVzdEhlYWRlclsgaGVhZGVyIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXF1ZXN0LnNlbmQoIG51bGwgKTtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdHJldHVybiByZXF1ZXN0O1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UmVzcG9uc2VUeXBlOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXNwb25zZVR5cGUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFdpdGhDcmVkZW50aWFsczogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMud2l0aENyZWRlbnRpYWxzID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRNaW1lVHlwZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMubWltZVR5cGUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnJlcXVlc3RIZWFkZXIgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBBbmltYXRpb25Mb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggc2NvcGUucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR2YXIgYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjbGlwID0gQW5pbWF0aW9uQ2xpcC5wYXJzZSgganNvblsgaSBdICk7XG5cblx0XHRcdGFuaW1hdGlvbnMucHVzaCggY2xpcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFuaW1hdGlvbnM7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGJsb2NrIGJhc2VkIHRleHR1cmVzIGxvYWRlciAoZGRzLCBwdnIsIC4uLilcbiAqL1xuXG5mdW5jdGlvbiBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxuXHQvLyBvdmVycmlkZSBpbiBzdWIgY2xhc3Nlc1xuXHR0aGlzLl9wYXJzZXIgPSBudWxsO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENvbXByZXNzZWRUZXh0dXJlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGltYWdlcyA9IFtdO1xuXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgQ29tcHJlc3NlZFRleHR1cmUoKTtcblx0XHR0ZXh0dXJlLmltYWdlID0gaW1hZ2VzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmxbIGkgXSwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdFx0dmFyIHRleERhdGFzID0gc2NvcGUuX3BhcnNlciggYnVmZmVyLCB0cnVlICk7XG5cblx0XHRcdFx0aW1hZ2VzWyBpIF0gPSB7XG5cdFx0XHRcdFx0d2lkdGg6IHRleERhdGFzLndpZHRoLFxuXHRcdFx0XHRcdGhlaWdodDogdGV4RGF0YXMuaGVpZ2h0LFxuXHRcdFx0XHRcdGZvcm1hdDogdGV4RGF0YXMuZm9ybWF0LFxuXHRcdFx0XHRcdG1pcG1hcHM6IHRleERhdGFzLm1pcG1hcHNcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRsb2FkZWQgKz0gMTtcblxuXHRcdFx0XHRpZiAoIGxvYWRlZCA9PT0gNiApIHtcblxuXHRcdFx0XHRcdGlmICggdGV4RGF0YXMubWlwbWFwQ291bnQgPT09IDEgKVxuXHRcdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xuXG5cdFx0XHR2YXIgbG9hZGVkID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHVybC5sZW5ndGg7IGkgPCBpbDsgKysgaSApIHtcblxuXHRcdFx0XHRsb2FkVGV4dHVyZSggaSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBjb21wcmVzc2VkIGN1YmVtYXAgdGV4dHVyZSBzdG9yZWQgaW4gYSBzaW5nbGUgRERTIGZpbGVcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdFx0dmFyIHRleERhdGFzID0gc2NvcGUuX3BhcnNlciggYnVmZmVyLCB0cnVlICk7XG5cblx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5pc0N1YmVtYXAgKSB7XG5cblx0XHRcdFx0XHR2YXIgZmFjZXMgPSB0ZXhEYXRhcy5taXBtYXBzLmxlbmd0aCAvIHRleERhdGFzLm1pcG1hcENvdW50O1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGYgPSAwOyBmIDwgZmFjZXM7IGYgKysgKSB7XG5cblx0XHRcdFx0XHRcdGltYWdlc1sgZiBdID0geyBtaXBtYXBzOiBbXSB9O1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0ZXhEYXRhcy5taXBtYXBDb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5taXBtYXBzLnB1c2goIHRleERhdGFzLm1pcG1hcHNbIGYgKiB0ZXhEYXRhcy5taXBtYXBDb3VudCArIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5mb3JtYXQgPSB0ZXhEYXRhcy5mb3JtYXQ7XG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLndpZHRoID0gdGV4RGF0YXMud2lkdGg7XG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLndpZHRoID0gdGV4RGF0YXMud2lkdGg7XG5cdFx0XHRcdFx0dGV4dHVyZS5pbWFnZS5oZWlnaHQgPSB0ZXhEYXRhcy5oZWlnaHQ7XG5cdFx0XHRcdFx0dGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YXMubWlwbWFwcztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBOaWtvcyBNLiAvIGh0dHBzOi8vZ2l0aHViLmNvbS9mb28xMjMvXG4gKlxuICogQWJzdHJhY3QgQmFzZSBjbGFzcyB0byBsb2FkIGdlbmVyaWMgYmluYXJ5IHRleHR1cmVzIGZvcm1hdHMgKHJnYmUsIGhkciwgLi4uKVxuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG5cdC8vIG92ZXJyaWRlIGluIHN1YiBjbGFzc2VzXG5cdHRoaXMuX3BhcnNlciA9IG51bGw7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRGF0YVRleHR1cmVMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSgpO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHR2YXIgdGV4RGF0YSA9IHNjb3BlLl9wYXJzZXIoIGJ1ZmZlciApO1xuXG5cdFx0XHRpZiAoICEgdGV4RGF0YSApIHJldHVybjtcblxuXHRcdFx0aWYgKCB0ZXhEYXRhLmltYWdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IHRleERhdGEuaW1hZ2U7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleERhdGEuZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhLndpZHRoO1xuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGEuaGVpZ2h0O1xuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmRhdGEgPSB0ZXhEYXRhLmRhdGE7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZS53cmFwUyA9IHRleERhdGEud3JhcFMgIT09IHVuZGVmaW5lZCA/IHRleERhdGEud3JhcFMgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXHRcdFx0dGV4dHVyZS53cmFwVCA9IHRleERhdGEud3JhcFQgIT09IHVuZGVmaW5lZCA/IHRleERhdGEud3JhcFQgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0XHR0ZXh0dXJlLm1hZ0ZpbHRlciA9IHRleERhdGEubWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1hZ0ZpbHRlciA6IExpbmVhckZpbHRlcjtcblx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gdGV4RGF0YS5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IHRleERhdGEubWluRmlsdGVyIDogTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyO1xuXG5cdFx0XHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSB0ZXhEYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCA/IHRleERhdGEuYW5pc290cm9weSA6IDE7XG5cblx0XHRcdGlmICggdGV4RGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGEuZm9ybWF0O1xuXG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRleERhdGEudHlwZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUudHlwZSA9IHRleERhdGEudHlwZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleERhdGEubWlwbWFwcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUubWlwbWFwcyA9IHRleERhdGEubWlwbWFwcztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleERhdGEubWlwbWFwQ291bnQgPT09IDEgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlLCB0ZXhEYXRhICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBJbWFnZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBJbWFnZUxvYWRlci5wcm90b3R5cGUsIHtcblxuXHRjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB1cmwgPSAnJztcblxuXHRcdGlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7XG5cblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGNhY2hlZCA9IENhY2hlLmdldCggdXJsICk7XG5cblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdpbWcnICk7XG5cblx0XHRmdW5jdGlvbiBvbkltYWdlTG9hZCgpIHtcblxuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIG9uSW1hZ2VFcnJvciwgZmFsc2UgKTtcblxuXHRcdFx0Q2FjaGUuYWRkKCB1cmwsIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRoaXMgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uSW1hZ2VFcnJvciggZXZlbnQgKSB7XG5cblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7XG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGV2ZW50ICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9XG5cblx0XHRpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApO1xuXHRcdGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIG9uSW1hZ2VFcnJvciwgZmFsc2UgKTtcblxuXHRcdGlmICggdXJsLnN1YnN0ciggMCwgNSApICE9PSAnZGF0YTonICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuY3Jvc3NPcmlnaW4gIT09IHVuZGVmaW5lZCApIGltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5jcm9zc09yaWdpbjtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdGltYWdlLnNyYyA9IHVybDtcblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBDdWJlVGV4dHVyZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBDdWJlVGV4dHVyZUxvYWRlci5wcm90b3R5cGUsIHtcblxuXHRjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmxzLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXG5cdFx0dmFyIGxvYWRlZCA9IDA7XG5cblx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggaSApIHtcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybHNbIGkgXSwgZnVuY3Rpb24gKCBpbWFnZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlc1sgaSBdID0gaW1hZ2U7XG5cblx0XHRcdFx0bG9hZGVkICsrO1xuXG5cdFx0XHRcdGlmICggbG9hZGVkID09PSA2ICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgdW5kZWZpbmVkLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgKysgaSApIHtcblxuXHRcdFx0bG9hZFRleHR1cmUoIGkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH0sXG5cblx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5cbmZ1bmN0aW9uIFRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVGV4dHVyZUxvYWRlci5wcm90b3R5cGUsIHtcblxuXHRjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciB0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblxuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggaW1hZ2UgKSB7XG5cblx0XHRcdHRleHR1cmUuaW1hZ2UgPSBpbWFnZTtcblxuXHRcdFx0Ly8gSlBFR3MgY2FuJ3QgaGF2ZSBhbiBhbHBoYSBjaGFubmVsLCBzbyBtZW1vcnkgY2FuIGJlIHNhdmVkIGJ5IHN0b3JpbmcgdGhlbSBhcyBSR0IuXG5cdFx0XHR2YXIgaXNKUEVHID0gdXJsLnNlYXJjaCggL1xcLmpwZT9nKCR8XFw/KS9pICkgPiAwIHx8IHVybC5zZWFyY2goIC9eZGF0YVxcOmltYWdlXFwvanBlZy8gKSA9PT0gMDtcblxuXHRcdFx0dGV4dHVyZS5mb3JtYXQgPSBpc0pQRUcgPyBSR0JGb3JtYXQgOiBSR0JBRm9ybWF0O1xuXHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0b25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH0sXG5cblx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogRXh0ZW5zaWJsZSBjdXJ2ZSBvYmplY3RcbiAqXG4gKiBTb21lIGNvbW1vbiBvZiBjdXJ2ZSBtZXRob2RzOlxuICogLmdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCApLCAuZ2V0VGFuZ2VudCggdCApXG4gKiAuZ2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSwgLmdldFRhbmdlbnRBdCggdSApXG4gKiAuZ2V0UG9pbnRzKCksIC5nZXRTcGFjZWRQb2ludHMoKVxuICogLmdldExlbmd0aCgpXG4gKiAudXBkYXRlQXJjTGVuZ3RocygpXG4gKlxuICogVGhpcyBmb2xsb3dpbmcgY3VydmVzIGluaGVyaXQgZnJvbSBUSFJFRS5DdXJ2ZTpcbiAqXG4gKiAtLSAyRCBjdXJ2ZXMgLS1cbiAqIFRIUkVFLkFyY0N1cnZlXG4gKiBUSFJFRS5DdWJpY0JlemllckN1cnZlXG4gKiBUSFJFRS5FbGxpcHNlQ3VydmVcbiAqIFRIUkVFLkxpbmVDdXJ2ZVxuICogVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmVcbiAqIFRIUkVFLlNwbGluZUN1cnZlXG4gKlxuICogLS0gM0QgY3VydmVzIC0tXG4gKiBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzXG4gKiBUSFJFRS5DdWJpY0JlemllckN1cnZlM1xuICogVEhSRUUuTGluZUN1cnZlM1xuICogVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmUzXG4gKlxuICogQSBzZXJpZXMgb2YgY3VydmVzIGNhbiBiZSByZXByZXNlbnRlZCBhcyBhIFRIUkVFLkN1cnZlUGF0aC5cbiAqXG4gKiovXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICpcdEFic3RyYWN0IEN1cnZlIGJhc2UgY2xhc3NcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZnVuY3Rpb24gQ3VydmUoKSB7XG5cblx0dGhpcy50eXBlID0gJ0N1cnZlJztcblxuXHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IDIwMDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBDdXJ2ZS5wcm90b3R5cGUsIHtcblxuXHQvLyBWaXJ0dWFsIGJhc2UgY2xhc3MgbWV0aG9kIHRvIG92ZXJ3cml0ZSBhbmQgaW1wbGVtZW50IGluIHN1YmNsYXNzZXNcblx0Ly9cdC0gdCBbMCAuLiAxXVxuXG5cdGdldFBvaW50OiBmdW5jdGlvbiAoIC8qIHQsIG9wdGlvbmFsVGFyZ2V0ICovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmU6IC5nZXRQb2ludCgpIG5vdCBpbXBsZW1lbnRlZC4nICk7XG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fSxcblxuXHQvLyBHZXQgcG9pbnQgYXQgcmVsYXRpdmUgcG9zaXRpb24gaW4gY3VydmUgYWNjb3JkaW5nIHRvIGFyYyBsZW5ndGhcblx0Ly8gLSB1IFswIC4uIDFdXG5cblx0Z2V0UG9pbnRBdDogZnVuY3Rpb24gKCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdHZhciB0ID0gdGhpcy5nZXRVdG9UbWFwcGluZyggdSApO1xuXHRcdHJldHVybiB0aGlzLmdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH0sXG5cblx0Ly8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludCggdCApXG5cblx0Z2V0UG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGlmICggZGl2aXNpb25zID09PSB1bmRlZmluZWQgKSBkaXZpc2lvbnMgPSA1O1xuXG5cdFx0dmFyIHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnQoIGQgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9LFxuXG5cdC8vIEdldCBzZXF1ZW5jZSBvZiBwb2ludHMgdXNpbmcgZ2V0UG9pbnRBdCggdSApXG5cblx0Z2V0U3BhY2VkUG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGlmICggZGl2aXNpb25zID09PSB1bmRlZmluZWQgKSBkaXZpc2lvbnMgPSA1O1xuXG5cdFx0dmFyIHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnRBdCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH0sXG5cblx0Ly8gR2V0IHRvdGFsIGN1cnZlIGFyYyBsZW5ndGhcblxuXHRnZXRMZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBsZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7XG5cdFx0cmV0dXJuIGxlbmd0aHNbIGxlbmd0aHMubGVuZ3RoIC0gMSBdO1xuXG5cdH0sXG5cblx0Ly8gR2V0IGxpc3Qgb2YgY3VtdWxhdGl2ZSBzZWdtZW50IGxlbmd0aHNcblxuXHRnZXRMZW5ndGhzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGlmICggZGl2aXNpb25zID09PSB1bmRlZmluZWQgKSBkaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHRcdGlmICggdGhpcy5jYWNoZUFyY0xlbmd0aHMgJiZcblx0XHRcdCggdGhpcy5jYWNoZUFyY0xlbmd0aHMubGVuZ3RoID09PSBkaXZpc2lvbnMgKyAxICkgJiZcblx0XHRcdCEgdGhpcy5uZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGVBcmNMZW5ndGhzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dmFyIGNhY2hlID0gW107XG5cdFx0dmFyIGN1cnJlbnQsIGxhc3QgPSB0aGlzLmdldFBvaW50KCAwICk7XG5cdFx0dmFyIHAsIHN1bSA9IDA7XG5cblx0XHRjYWNoZS5wdXNoKCAwICk7XG5cblx0XHRmb3IgKCBwID0gMTsgcCA8PSBkaXZpc2lvbnM7IHAgKysgKSB7XG5cblx0XHRcdGN1cnJlbnQgPSB0aGlzLmdldFBvaW50KCBwIC8gZGl2aXNpb25zICk7XG5cdFx0XHRzdW0gKz0gY3VycmVudC5kaXN0YW5jZVRvKCBsYXN0ICk7XG5cdFx0XHRjYWNoZS5wdXNoKCBzdW0gKTtcblx0XHRcdGxhc3QgPSBjdXJyZW50O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYWNoZUFyY0xlbmd0aHMgPSBjYWNoZTtcblxuXHRcdHJldHVybiBjYWNoZTsgLy8geyBzdW1zOiBjYWNoZSwgc3VtOiBzdW0gfTsgU3VtIGlzIGluIHRoZSBsYXN0IGVsZW1lbnQuXG5cblx0fSxcblxuXHR1cGRhdGVBcmNMZW5ndGhzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLmdldExlbmd0aHMoKTtcblxuXHR9LFxuXG5cdC8vIEdpdmVuIHUgKCAwIC4uIDEgKSwgZ2V0IGEgdCB0byBmaW5kIHAuIFRoaXMgZ2l2ZXMgeW91IHBvaW50cyB3aGljaCBhcmUgZXF1aWRpc3RhbnRcblxuXHRnZXRVdG9UbWFwcGluZzogZnVuY3Rpb24gKCB1LCBkaXN0YW5jZSApIHtcblxuXHRcdHZhciBhcmNMZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7XG5cblx0XHR2YXIgaSA9IDAsIGlsID0gYXJjTGVuZ3Rocy5sZW5ndGg7XG5cblx0XHR2YXIgdGFyZ2V0QXJjTGVuZ3RoOyAvLyBUaGUgdGFyZ2V0ZWQgdSBkaXN0YW5jZSB2YWx1ZSB0byBnZXRcblxuXHRcdGlmICggZGlzdGFuY2UgKSB7XG5cblx0XHRcdHRhcmdldEFyY0xlbmd0aCA9IGRpc3RhbmNlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGFyZ2V0QXJjTGVuZ3RoID0gdSAqIGFyY0xlbmd0aHNbIGlsIC0gMSBdO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYmluYXJ5IHNlYXJjaCBmb3IgdGhlIGluZGV4IHdpdGggbGFyZ2VzdCB2YWx1ZSBzbWFsbGVyIHRoYW4gdGFyZ2V0IHUgZGlzdGFuY2VcblxuXHRcdHZhciBsb3cgPSAwLCBoaWdoID0gaWwgLSAxLCBjb21wYXJpc29uO1xuXG5cdFx0d2hpbGUgKCBsb3cgPD0gaGlnaCApIHtcblxuXHRcdFx0aSA9IE1hdGguZmxvb3IoIGxvdyArICggaGlnaCAtIGxvdyApIC8gMiApOyAvLyBsZXNzIGxpa2VseSB0byBvdmVyZmxvdywgdGhvdWdoIHByb2JhYmx5IG5vdCBpc3N1ZSBoZXJlLCBKUyBkb2Vzbid0IHJlYWxseSBoYXZlIGludGVnZXJzLCBhbGwgbnVtYmVycyBhcmUgZmxvYXRzXG5cblx0XHRcdGNvbXBhcmlzb24gPSBhcmNMZW5ndGhzWyBpIF0gLSB0YXJnZXRBcmNMZW5ndGg7XG5cblx0XHRcdGlmICggY29tcGFyaXNvbiA8IDAgKSB7XG5cblx0XHRcdFx0bG93ID0gaSArIDE7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBhcmlzb24gPiAwICkge1xuXG5cdFx0XHRcdGhpZ2ggPSBpIC0gMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRoaWdoID0gaTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Ly8gRE9ORVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpID0gaGlnaDtcblxuXHRcdGlmICggYXJjTGVuZ3Roc1sgaSBdID09PSB0YXJnZXRBcmNMZW5ndGggKSB7XG5cblx0XHRcdHJldHVybiBpIC8gKCBpbCAtIDEgKTtcblxuXHRcdH1cblxuXHRcdC8vIHdlIGNvdWxkIGdldCBmaW5lciBncmFpbiBhdCBsZW5ndGhzLCBvciB1c2Ugc2ltcGxlIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcG9pbnRzXG5cblx0XHR2YXIgbGVuZ3RoQmVmb3JlID0gYXJjTGVuZ3Roc1sgaSBdO1xuXHRcdHZhciBsZW5ndGhBZnRlciA9IGFyY0xlbmd0aHNbIGkgKyAxIF07XG5cblx0XHR2YXIgc2VnbWVudExlbmd0aCA9IGxlbmd0aEFmdGVyIC0gbGVuZ3RoQmVmb3JlO1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIHdoZXJlIHdlIGFyZSBiZXR3ZWVuIHRoZSAnYmVmb3JlJyBhbmQgJ2FmdGVyJyBwb2ludHNcblxuXHRcdHZhciBzZWdtZW50RnJhY3Rpb24gPSAoIHRhcmdldEFyY0xlbmd0aCAtIGxlbmd0aEJlZm9yZSApIC8gc2VnbWVudExlbmd0aDtcblxuXHRcdC8vIGFkZCB0aGF0IGZyYWN0aW9uYWwgYW1vdW50IHRvIHRcblxuXHRcdHZhciB0ID0gKCBpICsgc2VnbWVudEZyYWN0aW9uICkgLyAoIGlsIC0gMSApO1xuXG5cdFx0cmV0dXJuIHQ7XG5cblx0fSxcblxuXHQvLyBSZXR1cm5zIGEgdW5pdCB2ZWN0b3IgdGFuZ2VudCBhdCB0XG5cdC8vIEluIGNhc2UgYW55IHN1YiBjdXJ2ZSBkb2VzIG5vdCBpbXBsZW1lbnQgaXRzIHRhbmdlbnQgZGVyaXZhdGlvbixcblx0Ly8gMiBwb2ludHMgYSBzbWFsbCBkZWx0YSBhcGFydCB3aWxsIGJlIHVzZWQgdG8gZmluZCBpdHMgZ3JhZGllbnRcblx0Ly8gd2hpY2ggc2VlbXMgdG8gZ2l2ZSBhIHJlYXNvbmFibGUgYXBwcm94aW1hdGlvblxuXG5cdGdldFRhbmdlbnQ6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdHZhciBkZWx0YSA9IDAuMDAwMTtcblx0XHR2YXIgdDEgPSB0IC0gZGVsdGE7XG5cdFx0dmFyIHQyID0gdCArIGRlbHRhO1xuXG5cdFx0Ly8gQ2FwcGluZyBpbiBjYXNlIG9mIGRhbmdlclxuXG5cdFx0aWYgKCB0MSA8IDAgKSB0MSA9IDA7XG5cdFx0aWYgKCB0MiA+IDEgKSB0MiA9IDE7XG5cblx0XHR2YXIgcHQxID0gdGhpcy5nZXRQb2ludCggdDEgKTtcblx0XHR2YXIgcHQyID0gdGhpcy5nZXRQb2ludCggdDIgKTtcblxuXHRcdHZhciB2ZWMgPSBwdDIuY2xvbmUoKS5zdWIoIHB0MSApO1xuXHRcdHJldHVybiB2ZWMubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHRnZXRUYW5nZW50QXQ6IGZ1bmN0aW9uICggdSApIHtcblxuXHRcdHZhciB0ID0gdGhpcy5nZXRVdG9UbWFwcGluZyggdSApO1xuXHRcdHJldHVybiB0aGlzLmdldFRhbmdlbnQoIHQgKTtcblxuXHR9LFxuXG5cdGNvbXB1dGVGcmVuZXRGcmFtZXM6IGZ1bmN0aW9uICggc2VnbWVudHMsIGNsb3NlZCApIHtcblxuXHRcdC8vIHNlZSBodHRwOi8vd3d3LmNzLmluZGlhbmEuZWR1L3B1Yi90ZWNocmVwb3J0cy9UUjQyNS5wZGZcblxuXHRcdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIHRhbmdlbnRzID0gW107XG5cdFx0dmFyIG5vcm1hbHMgPSBbXTtcblx0XHR2YXIgYmlub3JtYWxzID0gW107XG5cblx0XHR2YXIgdmVjID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbWF0ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHZhciBpLCB1LCB0aGV0YTtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIHRhbmdlbnQgdmVjdG9ycyBmb3IgZWFjaCBzZWdtZW50IG9uIHRoZSBjdXJ2ZVxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdHUgPSBpIC8gc2VnbWVudHM7XG5cblx0XHRcdHRhbmdlbnRzWyBpIF0gPSB0aGlzLmdldFRhbmdlbnRBdCggdSApO1xuXHRcdFx0dGFuZ2VudHNbIGkgXS5ub3JtYWxpemUoKTtcblxuXHRcdH1cblxuXHRcdC8vIHNlbGVjdCBhbiBpbml0aWFsIG5vcm1hbCB2ZWN0b3IgcGVycGVuZGljdWxhciB0byB0aGUgZmlyc3QgdGFuZ2VudCB2ZWN0b3IsXG5cdFx0Ly8gYW5kIGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlIG1pbmltdW0gdGFuZ2VudCB4eXogY29tcG9uZW50XG5cblx0XHRub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdGJpbm9ybWFsc1sgMCBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbWluID0gTnVtYmVyLk1BWF9WQUxVRTtcblx0XHR2YXIgdHggPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS54ICk7XG5cdFx0dmFyIHR5ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueSApO1xuXHRcdHZhciB0eiA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnogKTtcblxuXHRcdGlmICggdHggPD0gbWluICkge1xuXG5cdFx0XHRtaW4gPSB0eDtcblx0XHRcdG5vcm1hbC5zZXQoIDEsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHkgPD0gbWluICkge1xuXG5cdFx0XHRtaW4gPSB0eTtcblx0XHRcdG5vcm1hbC5zZXQoIDAsIDEsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHogPD0gbWluICkge1xuXG5cdFx0XHRub3JtYWwuc2V0KCAwLCAwLCAxICk7XG5cblx0XHR9XG5cblx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWwgKS5ub3JtYWxpemUoKTtcblxuXHRcdG5vcm1hbHNbIDAgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIHZlYyApO1xuXHRcdGJpbm9ybWFsc1sgMCBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsc1sgMCBdICk7XG5cblxuXHRcdC8vIGNvbXB1dGUgdGhlIHNsb3dseS12YXJ5aW5nIG5vcm1hbCBhbmQgYmlub3JtYWwgdmVjdG9ycyBmb3IgZWFjaCBzZWdtZW50IG9uIHRoZSBjdXJ2ZVxuXG5cdFx0Zm9yICggaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdG5vcm1hbHNbIGkgXSA9IG5vcm1hbHNbIGkgLSAxIF0uY2xvbmUoKTtcblxuXHRcdFx0Ymlub3JtYWxzWyBpIF0gPSBiaW5vcm1hbHNbIGkgLSAxIF0uY2xvbmUoKTtcblxuXHRcdFx0dmVjLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgLSAxIF0sIHRhbmdlbnRzWyBpIF0gKTtcblxuXHRcdFx0aWYgKCB2ZWMubGVuZ3RoKCkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHR2ZWMubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0dGhldGEgPSBNYXRoLmFjb3MoIF9NYXRoLmNsYW1wKCB0YW5nZW50c1sgaSAtIDEgXS5kb3QoIHRhbmdlbnRzWyBpIF0gKSwgLSAxLCAxICkgKTsgLy8gY2xhbXAgZm9yIGZsb2F0aW5nIHB0IGVycm9yc1xuXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB2ZWMsIHRoZXRhICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIF0sIG5vcm1hbHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaWYgdGhlIGN1cnZlIGlzIGNsb3NlZCwgcG9zdHByb2Nlc3MgdGhlIHZlY3RvcnMgc28gdGhlIGZpcnN0IGFuZCBsYXN0IG5vcm1hbCB2ZWN0b3JzIGFyZSB0aGUgc2FtZVxuXG5cdFx0aWYgKCBjbG9zZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoZXRhID0gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggbm9ybWFsc1sgMCBdLmRvdCggbm9ybWFsc1sgc2VnbWVudHMgXSApLCAtIDEsIDEgKSApO1xuXHRcdFx0dGhldGEgLz0gc2VnbWVudHM7XG5cblx0XHRcdGlmICggdGFuZ2VudHNbIDAgXS5kb3QoIHZlYy5jcm9zc1ZlY3RvcnMoIG5vcm1hbHNbIDAgXSwgbm9ybWFsc1sgc2VnbWVudHMgXSApICkgPiAwICkge1xuXG5cdFx0XHRcdHRoZXRhID0gLSB0aGV0YTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHQvLyB0d2lzdCBhIGxpdHRsZS4uLlxuXHRcdFx0XHRub3JtYWxzWyBpIF0uYXBwbHlNYXRyaXg0KCBtYXQubWFrZVJvdGF0aW9uQXhpcyggdGFuZ2VudHNbIGkgXSwgdGhldGEgKiBpICkgKTtcblx0XHRcdFx0Ymlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRhbmdlbnRzOiB0YW5nZW50cyxcblx0XHRcdG5vcm1hbHM6IG5vcm1hbHMsXG5cdFx0XHRiaW5vcm1hbHM6IGJpbm9ybWFsc1xuXHRcdH07XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IHNvdXJjZS5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdDdXJ2ZScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ0N1cnZlLnRvSlNPTidcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0ZGF0YS5hcmNMZW5ndGhEaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucztcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGZyb21KU09OOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IGpzb24uYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbmZ1bmN0aW9uIEVsbGlwc2VDdXJ2ZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdFbGxpcHNlQ3VydmUnO1xuXG5cdHRoaXMuYVggPSBhWCB8fCAwO1xuXHR0aGlzLmFZID0gYVkgfHwgMDtcblxuXHR0aGlzLnhSYWRpdXMgPSB4UmFkaXVzIHx8IDE7XG5cdHRoaXMueVJhZGl1cyA9IHlSYWRpdXMgfHwgMTtcblxuXHR0aGlzLmFTdGFydEFuZ2xlID0gYVN0YXJ0QW5nbGUgfHwgMDtcblx0dGhpcy5hRW5kQW5nbGUgPSBhRW5kQW5nbGUgfHwgMiAqIE1hdGguUEk7XG5cblx0dGhpcy5hQ2xvY2t3aXNlID0gYUNsb2Nrd2lzZSB8fCBmYWxzZTtcblxuXHR0aGlzLmFSb3RhdGlvbiA9IGFSb3RhdGlvbiB8fCAwO1xuXG59XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFbGxpcHNlQ3VydmU7XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuaXNFbGxpcHNlQ3VydmUgPSB0cnVlO1xuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdHZhciB0d29QaSA9IE1hdGguUEkgKiAyO1xuXHR2YXIgZGVsdGFBbmdsZSA9IHRoaXMuYUVuZEFuZ2xlIC0gdGhpcy5hU3RhcnRBbmdsZTtcblx0dmFyIHNhbWVQb2ludHMgPSBNYXRoLmFicyggZGVsdGFBbmdsZSApIDwgTnVtYmVyLkVQU0lMT047XG5cblx0Ly8gZW5zdXJlcyB0aGF0IGRlbHRhQW5nbGUgaXMgMCAuLiAyIFBJXG5cdHdoaWxlICggZGVsdGFBbmdsZSA8IDAgKSBkZWx0YUFuZ2xlICs9IHR3b1BpO1xuXHR3aGlsZSAoIGRlbHRhQW5nbGUgPiB0d29QaSApIGRlbHRhQW5nbGUgLT0gdHdvUGk7XG5cblx0aWYgKCBkZWx0YUFuZ2xlIDwgTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRpZiAoIHNhbWVQb2ludHMgKSB7XG5cblx0XHRcdGRlbHRhQW5nbGUgPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGVsdGFBbmdsZSA9IHR3b1BpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRpZiAoIHRoaXMuYUNsb2Nrd2lzZSA9PT0gdHJ1ZSAmJiAhIHNhbWVQb2ludHMgKSB7XG5cblx0XHRpZiAoIGRlbHRhQW5nbGUgPT09IHR3b1BpICkge1xuXG5cdFx0XHRkZWx0YUFuZ2xlID0gLSB0d29QaTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRlbHRhQW5nbGUgPSBkZWx0YUFuZ2xlIC0gdHdvUGk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHZhciBhbmdsZSA9IHRoaXMuYVN0YXJ0QW5nbGUgKyB0ICogZGVsdGFBbmdsZTtcblx0dmFyIHggPSB0aGlzLmFYICsgdGhpcy54UmFkaXVzICogTWF0aC5jb3MoIGFuZ2xlICk7XG5cdHZhciB5ID0gdGhpcy5hWSArIHRoaXMueVJhZGl1cyAqIE1hdGguc2luKCBhbmdsZSApO1xuXG5cdGlmICggdGhpcy5hUm90YXRpb24gIT09IDAgKSB7XG5cblx0XHR2YXIgY29zID0gTWF0aC5jb3MoIHRoaXMuYVJvdGF0aW9uICk7XG5cdFx0dmFyIHNpbiA9IE1hdGguc2luKCB0aGlzLmFSb3RhdGlvbiApO1xuXG5cdFx0dmFyIHR4ID0geCAtIHRoaXMuYVg7XG5cdFx0dmFyIHR5ID0geSAtIHRoaXMuYVk7XG5cblx0XHQvLyBSb3RhdGUgdGhlIHBvaW50IGFib3V0IHRoZSBjZW50ZXIgb2YgdGhlIGVsbGlwc2UuXG5cdFx0eCA9IHR4ICogY29zIC0gdHkgKiBzaW4gKyB0aGlzLmFYO1xuXHRcdHkgPSB0eCAqIHNpbiArIHR5ICogY29zICsgdGhpcy5hWTtcblxuXHR9XG5cblx0cmV0dXJuIHBvaW50LnNldCggeCwgeSApO1xuXG59O1xuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmFYID0gc291cmNlLmFYO1xuXHR0aGlzLmFZID0gc291cmNlLmFZO1xuXG5cdHRoaXMueFJhZGl1cyA9IHNvdXJjZS54UmFkaXVzO1xuXHR0aGlzLnlSYWRpdXMgPSBzb3VyY2UueVJhZGl1cztcblxuXHR0aGlzLmFTdGFydEFuZ2xlID0gc291cmNlLmFTdGFydEFuZ2xlO1xuXHR0aGlzLmFFbmRBbmdsZSA9IHNvdXJjZS5hRW5kQW5nbGU7XG5cblx0dGhpcy5hQ2xvY2t3aXNlID0gc291cmNlLmFDbG9ja3dpc2U7XG5cblx0dGhpcy5hUm90YXRpb24gPSBzb3VyY2UuYVJvdGF0aW9uO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS5hWCA9IHRoaXMuYVg7XG5cdGRhdGEuYVkgPSB0aGlzLmFZO1xuXG5cdGRhdGEueFJhZGl1cyA9IHRoaXMueFJhZGl1cztcblx0ZGF0YS55UmFkaXVzID0gdGhpcy55UmFkaXVzO1xuXG5cdGRhdGEuYVN0YXJ0QW5nbGUgPSB0aGlzLmFTdGFydEFuZ2xlO1xuXHRkYXRhLmFFbmRBbmdsZSA9IHRoaXMuYUVuZEFuZ2xlO1xuXG5cdGRhdGEuYUNsb2Nrd2lzZSA9IHRoaXMuYUNsb2Nrd2lzZTtcblxuXHRkYXRhLmFSb3RhdGlvbiA9IHRoaXMuYVJvdGF0aW9uO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy5hWCA9IGpzb24uYVg7XG5cdHRoaXMuYVkgPSBqc29uLmFZO1xuXG5cdHRoaXMueFJhZGl1cyA9IGpzb24ueFJhZGl1cztcblx0dGhpcy55UmFkaXVzID0ganNvbi55UmFkaXVzO1xuXG5cdHRoaXMuYVN0YXJ0QW5nbGUgPSBqc29uLmFTdGFydEFuZ2xlO1xuXHR0aGlzLmFFbmRBbmdsZSA9IGpzb24uYUVuZEFuZ2xlO1xuXG5cdHRoaXMuYUNsb2Nrd2lzZSA9IGpzb24uYUNsb2Nrd2lzZTtcblxuXHR0aGlzLmFSb3RhdGlvbiA9IGpzb24uYVJvdGF0aW9uO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBBcmNDdXJ2ZSggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdEVsbGlwc2VDdXJ2ZS5jYWxsKCB0aGlzLCBhWCwgYVksIGFSYWRpdXMsIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcblxuXHR0aGlzLnR5cGUgPSAnQXJjQ3VydmUnO1xuXG59XG5cbkFyY0N1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUgKTtcbkFyY0N1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFyY0N1cnZlO1xuXG5BcmNDdXJ2ZS5wcm90b3R5cGUuaXNBcmNDdXJ2ZSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IGh0dHBzOi8vZ2l0aHViLmNvbS96ejg1XG4gKlxuICogQ2VudHJpcGV0YWwgQ2F0bXVsbFJvbSBDdXJ2ZSAtIHdoaWNoIGlzIHVzZWZ1bCBmb3IgYXZvaWRpbmdcbiAqIGN1c3BzIGFuZCBzZWxmLWludGVyc2VjdGlvbnMgaW4gbm9uLXVuaWZvcm0gY2F0bXVsbCByb20gY3VydmVzLlxuICogaHR0cDovL3d3dy5jZW15dWtzZWwuY29tL3Jlc2VhcmNoL2NhdG11bGxyb21fcGFyYW0vY2F0bXVsbHJvbS5wZGZcbiAqXG4gKiBjdXJ2ZS50eXBlIGFjY2VwdHMgY2VudHJpcGV0YWwoZGVmYXVsdCksIGNob3JkYWwgYW5kIGNhdG11bGxyb21cbiAqIGN1cnZlLnRlbnNpb24gaXMgdXNlZCBmb3IgY2F0bXVsbHJvbSB3aGljaCBkZWZhdWx0cyB0byAwLjVcbiAqL1xuXG5cbi8qXG5CYXNlZCBvbiBhbiBvcHRpbWl6ZWQgYysrIHNvbHV0aW9uIGluXG4gLSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk0ODk3MzYvY2F0bXVsbC1yb20tY3VydmUtd2l0aC1uby1jdXNwcy1hbmQtbm8tc2VsZi1pbnRlcnNlY3Rpb25zL1xuIC0gaHR0cDovL2lkZW9uZS5jb20vTm9FYlZNXG5cblRoaXMgQ3ViaWNQb2x5IGNsYXNzIGNvdWxkIGJlIHVzZWQgZm9yIHJldXNpbmcgc29tZSB2YXJpYWJsZXMgYW5kIGNhbGN1bGF0aW9ucyxcbmJ1dCBmb3IgdGhyZWUuanMgY3VydmUgdXNlLCBpdCBjb3VsZCBiZSBwb3NzaWJsZSBpbmxpbmVkIGFuZCBmbGF0dGVuIGludG8gYSBzaW5nbGUgZnVuY3Rpb24gY2FsbFxud2hpY2ggY2FuIGJlIHBsYWNlZCBpbiBDdXJ2ZVV0aWxzLlxuKi9cblxuZnVuY3Rpb24gQ3ViaWNQb2x5KCkge1xuXG5cdHZhciBjMCA9IDAsIGMxID0gMCwgYzIgPSAwLCBjMyA9IDA7XG5cblx0Lypcblx0ICogQ29tcHV0ZSBjb2VmZmljaWVudHMgZm9yIGEgY3ViaWMgcG9seW5vbWlhbFxuXHQgKiAgIHAocykgPSBjMCArIGMxKnMgKyBjMipzXjIgKyBjMypzXjNcblx0ICogc3VjaCB0aGF0XG5cdCAqICAgcCgwKSA9IHgwLCBwKDEpID0geDFcblx0ICogIGFuZFxuXHQgKiAgIHAnKDApID0gdDAsIHAnKDEpID0gdDEuXG5cdCAqL1xuXHRmdW5jdGlvbiBpbml0KCB4MCwgeDEsIHQwLCB0MSApIHtcblxuXHRcdGMwID0geDA7XG5cdFx0YzEgPSB0MDtcblx0XHRjMiA9IC0gMyAqIHgwICsgMyAqIHgxIC0gMiAqIHQwIC0gdDE7XG5cdFx0YzMgPSAyICogeDAgLSAyICogeDEgKyB0MCArIHQxO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0aW5pdENhdG11bGxSb206IGZ1bmN0aW9uICggeDAsIHgxLCB4MiwgeDMsIHRlbnNpb24gKSB7XG5cblx0XHRcdGluaXQoIHgxLCB4MiwgdGVuc2lvbiAqICggeDIgLSB4MCApLCB0ZW5zaW9uICogKCB4MyAtIHgxICkgKTtcblxuXHRcdH0sXG5cblx0XHRpbml0Tm9udW5pZm9ybUNhdG11bGxSb206IGZ1bmN0aW9uICggeDAsIHgxLCB4MiwgeDMsIGR0MCwgZHQxLCBkdDIgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGUgdGFuZ2VudHMgd2hlbiBwYXJhbWV0ZXJpemVkIGluIFt0MSx0Ml1cblx0XHRcdHZhciB0MSA9ICggeDEgLSB4MCApIC8gZHQwIC0gKCB4MiAtIHgwICkgLyAoIGR0MCArIGR0MSApICsgKCB4MiAtIHgxICkgLyBkdDE7XG5cdFx0XHR2YXIgdDIgPSAoIHgyIC0geDEgKSAvIGR0MSAtICggeDMgLSB4MSApIC8gKCBkdDEgKyBkdDIgKSArICggeDMgLSB4MiApIC8gZHQyO1xuXG5cdFx0XHQvLyByZXNjYWxlIHRhbmdlbnRzIGZvciBwYXJhbWV0cml6YXRpb24gaW4gWzAsMV1cblx0XHRcdHQxICo9IGR0MTtcblx0XHRcdHQyICo9IGR0MTtcblxuXHRcdFx0aW5pdCggeDEsIHgyLCB0MSwgdDIgKTtcblxuXHRcdH0sXG5cblx0XHRjYWxjOiBmdW5jdGlvbiAoIHQgKSB7XG5cblx0XHRcdHZhciB0MiA9IHQgKiB0O1xuXHRcdFx0dmFyIHQzID0gdDIgKiB0O1xuXHRcdFx0cmV0dXJuIGMwICsgYzEgKiB0ICsgYzIgKiB0MiArIGMzICogdDM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vL1xuXG52YXIgdG1wID0gbmV3IFZlY3RvcjMoKTtcbnZhciBweCA9IG5ldyBDdWJpY1BvbHkoKSwgcHkgPSBuZXcgQ3ViaWNQb2x5KCksIHB6ID0gbmV3IEN1YmljUG9seSgpO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tQ3VydmUzKCBwb2ludHMsIGNsb3NlZCwgY3VydmVUeXBlLCB0ZW5zaW9uICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ2F0bXVsbFJvbUN1cnZlMyc7XG5cblx0dGhpcy5wb2ludHMgPSBwb2ludHMgfHwgW107XG5cdHRoaXMuY2xvc2VkID0gY2xvc2VkIHx8IGZhbHNlO1xuXHR0aGlzLmN1cnZlVHlwZSA9IGN1cnZlVHlwZSB8fCAnY2VudHJpcGV0YWwnO1xuXHR0aGlzLnRlbnNpb24gPSB0ZW5zaW9uIHx8IDAuNTtcblxufVxuXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDYXRtdWxsUm9tQ3VydmUzO1xuXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5pc0NhdG11bGxSb21DdXJ2ZTMgPSB0cnVlO1xuXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdHZhciBsID0gcG9pbnRzLmxlbmd0aDtcblxuXHR2YXIgcCA9ICggbCAtICggdGhpcy5jbG9zZWQgPyAwIDogMSApICkgKiB0O1xuXHR2YXIgaW50UG9pbnQgPSBNYXRoLmZsb29yKCBwICk7XG5cdHZhciB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7XG5cblx0aWYgKCB0aGlzLmNsb3NlZCApIHtcblxuXHRcdGludFBvaW50ICs9IGludFBvaW50ID4gMCA/IDAgOiAoIE1hdGguZmxvb3IoIE1hdGguYWJzKCBpbnRQb2ludCApIC8gbCApICsgMSApICogbDtcblxuXHR9IGVsc2UgaWYgKCB3ZWlnaHQgPT09IDAgJiYgaW50UG9pbnQgPT09IGwgLSAxICkge1xuXG5cdFx0aW50UG9pbnQgPSBsIC0gMjtcblx0XHR3ZWlnaHQgPSAxO1xuXG5cdH1cblxuXHR2YXIgcDAsIHAxLCBwMiwgcDM7IC8vIDQgcG9pbnRzXG5cblx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCA+IDAgKSB7XG5cblx0XHRwMCA9IHBvaW50c1sgKCBpbnRQb2ludCAtIDEgKSAlIGwgXTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gZXh0cmFwb2xhdGUgZmlyc3QgcG9pbnRcblx0XHR0bXAuc3ViVmVjdG9ycyggcG9pbnRzWyAwIF0sIHBvaW50c1sgMSBdICkuYWRkKCBwb2ludHNbIDAgXSApO1xuXHRcdHAwID0gdG1wO1xuXG5cdH1cblxuXHRwMSA9IHBvaW50c1sgaW50UG9pbnQgJSBsIF07XG5cdHAyID0gcG9pbnRzWyAoIGludFBvaW50ICsgMSApICUgbCBdO1xuXG5cdGlmICggdGhpcy5jbG9zZWQgfHwgaW50UG9pbnQgKyAyIDwgbCApIHtcblxuXHRcdHAzID0gcG9pbnRzWyAoIGludFBvaW50ICsgMiApICUgbCBdO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBleHRyYXBvbGF0ZSBsYXN0IHBvaW50XG5cdFx0dG1wLnN1YlZlY3RvcnMoIHBvaW50c1sgbCAtIDEgXSwgcG9pbnRzWyBsIC0gMiBdICkuYWRkKCBwb2ludHNbIGwgLSAxIF0gKTtcblx0XHRwMyA9IHRtcDtcblxuXHR9XG5cblx0aWYgKCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2NlbnRyaXBldGFsJyB8fCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnICkge1xuXG5cdFx0Ly8gaW5pdCBDZW50cmlwZXRhbCAvIENob3JkYWwgQ2F0bXVsbC1Sb21cblx0XHR2YXIgcG93ID0gdGhpcy5jdXJ2ZVR5cGUgPT09ICdjaG9yZGFsJyA/IDAuNSA6IDAuMjU7XG5cdFx0dmFyIGR0MCA9IE1hdGgucG93KCBwMC5kaXN0YW5jZVRvU3F1YXJlZCggcDEgKSwgcG93ICk7XG5cdFx0dmFyIGR0MSA9IE1hdGgucG93KCBwMS5kaXN0YW5jZVRvU3F1YXJlZCggcDIgKSwgcG93ICk7XG5cdFx0dmFyIGR0MiA9IE1hdGgucG93KCBwMi5kaXN0YW5jZVRvU3F1YXJlZCggcDMgKSwgcG93ICk7XG5cblx0XHQvLyBzYWZldHkgY2hlY2sgZm9yIHJlcGVhdGVkIHBvaW50c1xuXHRcdGlmICggZHQxIDwgMWUtNCApIGR0MSA9IDEuMDtcblx0XHRpZiAoIGR0MCA8IDFlLTQgKSBkdDAgPSBkdDE7XG5cdFx0aWYgKCBkdDIgPCAxZS00ICkgZHQyID0gZHQxO1xuXG5cdFx0cHguaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC54LCBwMS54LCBwMi54LCBwMy54LCBkdDAsIGR0MSwgZHQyICk7XG5cdFx0cHkuaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC55LCBwMS55LCBwMi55LCBwMy55LCBkdDAsIGR0MSwgZHQyICk7XG5cdFx0cHouaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC56LCBwMS56LCBwMi56LCBwMy56LCBkdDAsIGR0MSwgZHQyICk7XG5cblx0fSBlbHNlIGlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjYXRtdWxscm9tJyApIHtcblxuXHRcdHB4LmluaXRDYXRtdWxsUm9tKCBwMC54LCBwMS54LCBwMi54LCBwMy54LCB0aGlzLnRlbnNpb24gKTtcblx0XHRweS5pbml0Q2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgdGhpcy50ZW5zaW9uICk7XG5cdFx0cHouaW5pdENhdG11bGxSb20oIHAwLnosIHAxLnosIHAyLnosIHAzLnosIHRoaXMudGVuc2lvbiApO1xuXG5cdH1cblxuXHRwb2ludC5zZXQoXG5cdFx0cHguY2FsYyggd2VpZ2h0ICksXG5cdFx0cHkuY2FsYyggd2VpZ2h0ICksXG5cdFx0cHouY2FsYyggd2VpZ2h0IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IHNvdXJjZS5wb2ludHNbIGkgXTtcblxuXHRcdHRoaXMucG9pbnRzLnB1c2goIHBvaW50LmNsb25lKCkgKTtcblxuXHR9XG5cblx0dGhpcy5jbG9zZWQgPSBzb3VyY2UuY2xvc2VkO1xuXHR0aGlzLmN1cnZlVHlwZSA9IHNvdXJjZS5jdXJ2ZVR5cGU7XG5cdHRoaXMudGVuc2lvbiA9IHNvdXJjZS50ZW5zaW9uO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSB0aGlzLnBvaW50c1sgaSBdO1xuXHRcdGRhdGEucG9pbnRzLnB1c2goIHBvaW50LnRvQXJyYXkoKSApO1xuXG5cdH1cblxuXHRkYXRhLmNsb3NlZCA9IHRoaXMuY2xvc2VkO1xuXHRkYXRhLmN1cnZlVHlwZSA9IHRoaXMuY3VydmVUeXBlO1xuXHRkYXRhLnRlbnNpb24gPSB0aGlzLnRlbnNpb247XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0ganNvbi5wb2ludHNbIGkgXTtcblx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggcG9pbnQgKSApO1xuXG5cdH1cblxuXHR0aGlzLmNsb3NlZCA9IGpzb24uY2xvc2VkO1xuXHR0aGlzLmN1cnZlVHlwZSA9IGpzb24uY3VydmVUeXBlO1xuXHR0aGlzLnRlbnNpb24gPSBqc29uLnRlbnNpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICpcbiAqIEJlemllciBDdXJ2ZXMgZm9ybXVsYXMgb2J0YWluZWQgZnJvbVxuICogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Cw6l6aWVyX2N1cnZlXG4gKi9cblxuZnVuY3Rpb24gQ2F0bXVsbFJvbSggdCwgcDAsIHAxLCBwMiwgcDMgKSB7XG5cblx0dmFyIHYwID0gKCBwMiAtIHAwICkgKiAwLjU7XG5cdHZhciB2MSA9ICggcDMgLSBwMSApICogMC41O1xuXHR2YXIgdDIgPSB0ICogdDtcblx0dmFyIHQzID0gdCAqIHQyO1xuXHRyZXR1cm4gKCAyICogcDEgLSAyICogcDIgKyB2MCArIHYxICkgKiB0MyArICggLSAzICogcDEgKyAzICogcDIgLSAyICogdjAgLSB2MSApICogdDIgKyB2MCAqIHQgKyBwMTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMCggdCwgcCApIHtcblxuXHR2YXIgayA9IDEgLSB0O1xuXHRyZXR1cm4gayAqIGsgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAxKCB0LCBwICkge1xuXG5cdHJldHVybiAyICogKCAxIC0gdCApICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDIoIHQsIHAgKSB7XG5cblx0cmV0dXJuIHQgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXIoIHQsIHAwLCBwMSwgcDIgKSB7XG5cblx0cmV0dXJuIFF1YWRyYXRpY0JlemllclAwKCB0LCBwMCApICsgUXVhZHJhdGljQmV6aWVyUDEoIHQsIHAxICkgK1xuXHRcdFF1YWRyYXRpY0JlemllclAyKCB0LCBwMiApO1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDAoIHQsIHAgKSB7XG5cblx0dmFyIGsgPSAxIC0gdDtcblx0cmV0dXJuIGsgKiBrICogayAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMSggdCwgcCApIHtcblxuXHR2YXIgayA9IDEgLSB0O1xuXHRyZXR1cm4gMyAqIGsgKiBrICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMiggdCwgcCApIHtcblxuXHRyZXR1cm4gMyAqICggMSAtIHQgKSAqIHQgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAzKCB0LCBwICkge1xuXG5cdHJldHVybiB0ICogdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyKCB0LCBwMCwgcDEsIHAyLCBwMyApIHtcblxuXHRyZXR1cm4gQ3ViaWNCZXppZXJQMCggdCwgcDAgKSArIEN1YmljQmV6aWVyUDEoIHQsIHAxICkgKyBDdWJpY0JlemllclAyKCB0LCBwMiApICtcblx0XHRDdWJpY0JlemllclAzKCB0LCBwMyApO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyQ3VydmUoIHYwLCB2MSwgdjIsIHYzICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3ViaWNCZXppZXJDdXJ2ZSc7XG5cblx0dGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MyA9IHYzIHx8IG5ldyBWZWN0b3IyKCk7XG5cbn1cblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3ViaWNCZXppZXJDdXJ2ZTtcblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuaXNDdWJpY0JlemllckN1cnZlID0gdHJ1ZTtcblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0dmFyIHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcblxuXHRwb2ludC5zZXQoXG5cdFx0Q3ViaWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLngsIHYzLnggKSxcblx0XHRDdWJpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSwgdjMueSApXG5cdCk7XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblx0dGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblx0ZGF0YS52MyA9IHRoaXMudjMudG9BcnJheSgpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cdHRoaXMudjMuZnJvbUFycmF5KCBqc29uLnYzICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyQ3VydmUzKCB2MCwgdjEsIHYyLCB2MyApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0N1YmljQmV6aWVyQ3VydmUzJztcblxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYzID0gdjMgfHwgbmV3IFZlY3RvcjMoKTtcblxufVxuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmljQmV6aWVyQ3VydmUzO1xuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuaXNDdWJpY0JlemllckN1cnZlMyA9IHRydWU7XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MiwgdjMgPSB0aGlzLnYzO1xuXG5cdHBvaW50LnNldChcblx0XHRDdWJpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCwgdjMueCApLFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55LCB2My55ICksXG5cdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnosIHYxLnosIHYyLnosIHYzLnogKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXHR0aGlzLnYzLmNvcHkoIHNvdXJjZS52MyApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblx0ZGF0YS52MyA9IHRoaXMudjMudG9BcnJheSgpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXHR0aGlzLnYzLmZyb21BcnJheSgganNvbi52MyApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBMaW5lQ3VydmUoIHYxLCB2MiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0xpbmVDdXJ2ZSc7XG5cblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMigpO1xuXG59XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcbkxpbmVDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaW5lQ3VydmU7XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuaXNMaW5lQ3VydmUgPSB0cnVlO1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdGlmICggdCA9PT0gMSApIHtcblxuXHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cG9pbnQuY29weSggdGhpcy52MiApLnN1YiggdGhpcy52MSApO1xuXHRcdHBvaW50Lm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnYxICk7XG5cblx0fVxuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuLy8gTGluZSBjdXJ2ZSBpcyBsaW5lYXIsIHNvIHdlIGNhbiBvdmVyd3JpdGUgZGVmYXVsdCBnZXRQb2ludEF0XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnRBdCA9IGZ1bmN0aW9uICggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0VGFuZ2VudCA9IGZ1bmN0aW9uICggLyogdCAqLyApIHtcblxuXHR2YXIgdGFuZ2VudCA9IHRoaXMudjIuY2xvbmUoKS5zdWIoIHRoaXMudjEgKTtcblxuXHRyZXR1cm4gdGFuZ2VudC5ub3JtYWxpemUoKTtcblxufTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIExpbmVDdXJ2ZTMoIHYxLCB2MiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0xpbmVDdXJ2ZTMnO1xuXG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjMoKTtcblxufVxuXG5MaW5lQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuTGluZUN1cnZlMy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaW5lQ3VydmUzO1xuXG5MaW5lQ3VydmUzLnByb3RvdHlwZS5pc0xpbmVDdXJ2ZTMgPSB0cnVlO1xuXG5MaW5lQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjMoKTtcblxuXHRpZiAoIHQgPT09IDEgKSB7XG5cblx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKS5zdWIoIHRoaXMudjEgKTtcblx0XHRwb2ludC5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy52MSApO1xuXG5cdH1cblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cbi8vIExpbmUgY3VydmUgaXMgbGluZWFyLCBzbyB3ZSBjYW4gb3ZlcndyaXRlIGRlZmF1bHQgZ2V0UG9pbnRBdFxuXG5MaW5lQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludEF0ID0gZnVuY3Rpb24gKCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxufTtcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5MaW5lQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllckN1cnZlKCB2MCwgdjEsIHYyICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUXVhZHJhdGljQmV6aWVyQ3VydmUnO1xuXG5cdHRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IyKCk7XG5cbn1cblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBRdWFkcmF0aWNCZXppZXJDdXJ2ZTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmlzUXVhZHJhdGljQmV6aWVyQ3VydmUgPSB0cnVlO1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0dmFyIHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjI7XG5cblx0cG9pbnQuc2V0KFxuXHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCApLFxuXHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSApXG5cdCk7XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMoIHYwLCB2MSwgdjIgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZTMnO1xuXG5cdHRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFF1YWRyYXRpY0JlemllckN1cnZlMztcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlMyA9IHRydWU7XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjI7XG5cblx0cG9pbnQuc2V0KFxuXHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCApLFxuXHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSApLFxuXHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueiwgdjEueiwgdjIueiApXG5cdCk7XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBTcGxpbmVDdXJ2ZSggcG9pbnRzIC8qIGFycmF5IG9mIFZlY3RvcjIgKi8gKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTcGxpbmVDdXJ2ZSc7XG5cblx0dGhpcy5wb2ludHMgPSBwb2ludHMgfHwgW107XG5cbn1cblxuU3BsaW5lQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcGxpbmVDdXJ2ZTtcblxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmlzU3BsaW5lQ3VydmUgPSB0cnVlO1xuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0dmFyIHBvaW50cyA9IHRoaXMucG9pbnRzO1xuXHR2YXIgcCA9ICggcG9pbnRzLmxlbmd0aCAtIDEgKSAqIHQ7XG5cblx0dmFyIGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHR2YXIgd2VpZ2h0ID0gcCAtIGludFBvaW50O1xuXG5cdHZhciBwMCA9IHBvaW50c1sgaW50UG9pbnQgPT09IDAgPyBpbnRQb2ludCA6IGludFBvaW50IC0gMSBdO1xuXHR2YXIgcDEgPSBwb2ludHNbIGludFBvaW50IF07XG5cdHZhciBwMiA9IHBvaW50c1sgaW50UG9pbnQgPiBwb2ludHMubGVuZ3RoIC0gMiA/IHBvaW50cy5sZW5ndGggLSAxIDogaW50UG9pbnQgKyAxIF07XG5cdHZhciBwMyA9IHBvaW50c1sgaW50UG9pbnQgPiBwb2ludHMubGVuZ3RoIC0gMyA/IHBvaW50cy5sZW5ndGggLSAxIDogaW50UG9pbnQgKyAyIF07XG5cblx0cG9pbnQuc2V0KFxuXHRcdENhdG11bGxSb20oIHdlaWdodCwgcDAueCwgcDEueCwgcDIueCwgcDMueCApLFxuXHRcdENhdG11bGxSb20oIHdlaWdodCwgcDAueSwgcDEueSwgcDIueSwgcDMueSApXG5cdCk7XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gc291cmNlLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0dGhpcy5wb2ludHMucHVzaCggcG9pbnQuY2xvbmUoKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuU3BsaW5lQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IHRoaXMucG9pbnRzWyBpIF07XG5cdFx0ZGF0YS5wb2ludHMucHVzaCggcG9pbnQudG9BcnJheSgpICk7XG5cblx0fVxuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSBqc29uLnBvaW50c1sgaSBdO1xuXHRcdHRoaXMucG9pbnRzLnB1c2goIG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCBwb2ludCApICk7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5cblxudmFyIEN1cnZlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0QXJjQ3VydmU6IEFyY0N1cnZlLFxuXHRDYXRtdWxsUm9tQ3VydmUzOiBDYXRtdWxsUm9tQ3VydmUzLFxuXHRDdWJpY0JlemllckN1cnZlOiBDdWJpY0JlemllckN1cnZlLFxuXHRDdWJpY0JlemllckN1cnZlMzogQ3ViaWNCZXppZXJDdXJ2ZTMsXG5cdEVsbGlwc2VDdXJ2ZTogRWxsaXBzZUN1cnZlLFxuXHRMaW5lQ3VydmU6IExpbmVDdXJ2ZSxcblx0TGluZUN1cnZlMzogTGluZUN1cnZlMyxcblx0UXVhZHJhdGljQmV6aWVyQ3VydmU6IFF1YWRyYXRpY0JlemllckN1cnZlLFxuXHRRdWFkcmF0aWNCZXppZXJDdXJ2ZTM6IFF1YWRyYXRpY0JlemllckN1cnZlMyxcblx0U3BsaW5lQ3VydmU6IFNwbGluZUN1cnZlXG59KTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKlxuICoqL1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXHRDdXJ2ZWQgUGF0aCAtIGEgY3VydmUgcGF0aCBpcyBzaW1wbHkgYSBhcnJheSBvZiBjb25uZWN0ZWRcbiAqICBjdXJ2ZXMsIGJ1dCByZXRhaW5zIHRoZSBhcGkgb2YgYSBjdXJ2ZVxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBDdXJ2ZVBhdGgoKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDdXJ2ZVBhdGgnO1xuXG5cdHRoaXMuY3VydmVzID0gW107XG5cdHRoaXMuYXV0b0Nsb3NlID0gZmFsc2U7IC8vIEF1dG9tYXRpY2FsbHkgY2xvc2VzIHRoZSBwYXRoXG5cbn1cblxuQ3VydmVQYXRoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEN1cnZlUGF0aCxcblxuXHRhZGQ6IGZ1bmN0aW9uICggY3VydmUgKSB7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdH0sXG5cblx0Y2xvc2VQYXRoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBBZGQgYSBsaW5lIGN1cnZlIGlmIHN0YXJ0IGFuZCBlbmQgb2YgbGluZXMgYXJlIG5vdCBjb25uZWN0ZWRcblx0XHR2YXIgc3RhcnRQb2ludCA9IHRoaXMuY3VydmVzWyAwIF0uZ2V0UG9pbnQoIDAgKTtcblx0XHR2YXIgZW5kUG9pbnQgPSB0aGlzLmN1cnZlc1sgdGhpcy5jdXJ2ZXMubGVuZ3RoIC0gMSBdLmdldFBvaW50KCAxICk7XG5cblx0XHRpZiAoICEgc3RhcnRQb2ludC5lcXVhbHMoIGVuZFBvaW50ICkgKSB7XG5cblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIG5ldyBMaW5lQ3VydmUoIGVuZFBvaW50LCBzdGFydFBvaW50ICkgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIFRvIGdldCBhY2N1cmF0ZSBwb2ludCB3aXRoIHJlZmVyZW5jZSB0b1xuXHQvLyBlbnRpcmUgcGF0aCBkaXN0YW5jZSBhdCB0aW1lIHQsXG5cdC8vIGZvbGxvd2luZyBoYXMgdG8gYmUgZG9uZTpcblxuXHQvLyAxLiBMZW5ndGggb2YgZWFjaCBzdWIgcGF0aCBoYXZlIHRvIGJlIGtub3duXG5cdC8vIDIuIExvY2F0ZSBhbmQgaWRlbnRpZnkgdHlwZSBvZiBjdXJ2ZVxuXHQvLyAzLiBHZXQgdCBmb3IgdGhlIGN1cnZlXG5cdC8vIDQuIFJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KHQnKVxuXG5cdGdldFBvaW50OiBmdW5jdGlvbiAoIHQgKSB7XG5cblx0XHR2YXIgZCA9IHQgKiB0aGlzLmdldExlbmd0aCgpO1xuXHRcdHZhciBjdXJ2ZUxlbmd0aHMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXHRcdHZhciBpID0gMDtcblxuXHRcdC8vIFRvIHRoaW5rIGFib3V0IGJvdW5kYXJpZXMgcG9pbnRzLlxuXG5cdFx0d2hpbGUgKCBpIDwgY3VydmVMZW5ndGhzLmxlbmd0aCApIHtcblxuXHRcdFx0aWYgKCBjdXJ2ZUxlbmd0aHNbIGkgXSA+PSBkICkge1xuXG5cdFx0XHRcdHZhciBkaWZmID0gY3VydmVMZW5ndGhzWyBpIF0gLSBkO1xuXHRcdFx0XHR2YXIgY3VydmUgPSB0aGlzLmN1cnZlc1sgaSBdO1xuXG5cdFx0XHRcdHZhciBzZWdtZW50TGVuZ3RoID0gY3VydmUuZ2V0TGVuZ3RoKCk7XG5cdFx0XHRcdHZhciB1ID0gc2VnbWVudExlbmd0aCA9PT0gMCA/IDAgOiAxIC0gZGlmZiAvIHNlZ21lbnRMZW5ndGg7XG5cblx0XHRcdFx0cmV0dXJuIGN1cnZlLmdldFBvaW50QXQoIHUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpICsrO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0XHQvLyBsb29wIHdoZXJlIHN1bSAhPSAwLCBzdW0gPiBkICwgc3VtKzEgPGRcblxuXHR9LFxuXG5cdC8vIFdlIGNhbm5vdCB1c2UgdGhlIGRlZmF1bHQgVEhSRUUuQ3VydmUgZ2V0UG9pbnQoKSB3aXRoIGdldExlbmd0aCgpIGJlY2F1c2UgaW5cblx0Ly8gVEhSRUUuQ3VydmUsIGdldExlbmd0aCgpIGRlcGVuZHMgb24gZ2V0UG9pbnQoKSBidXQgaW4gVEhSRUUuQ3VydmVQYXRoXG5cdC8vIGdldFBvaW50KCkgZGVwZW5kcyBvbiBnZXRMZW5ndGhcblxuXHRnZXRMZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBsZW5zID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuc1sgbGVucy5sZW5ndGggLSAxIF07XG5cblx0fSxcblxuXHQvLyBjYWNoZUxlbmd0aHMgbXVzdCBiZSByZWNhbGN1bGF0ZWQuXG5cdHVwZGF0ZUFyY0xlbmd0aHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuY2FjaGVMZW5ndGhzID0gbnVsbDtcblx0XHR0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXG5cdH0sXG5cblx0Ly8gQ29tcHV0ZSBsZW5ndGhzIGFuZCBjYWNoZSB0aGVtXG5cdC8vIFdlIGNhbm5vdCBvdmVyd3JpdGUgZ2V0TGVuZ3RocygpIGJlY2F1c2UgVXRvVCBtYXBwaW5nIHVzZXMgaXQuXG5cblx0Z2V0Q3VydmVMZW5ndGhzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBXZSB1c2UgY2FjaGUgdmFsdWVzIGlmIGN1cnZlcyBhbmQgY2FjaGUgYXJyYXkgYXJlIHNhbWUgbGVuZ3RoXG5cblx0XHRpZiAoIHRoaXMuY2FjaGVMZW5ndGhzICYmIHRoaXMuY2FjaGVMZW5ndGhzLmxlbmd0aCA9PT0gdGhpcy5jdXJ2ZXMubGVuZ3RoICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZUxlbmd0aHM7XG5cblx0XHR9XG5cblx0XHQvLyBHZXQgbGVuZ3RoIG9mIHN1Yi1jdXJ2ZVxuXHRcdC8vIFB1c2ggc3VtcyBpbnRvIGNhY2hlZCBhcnJheVxuXG5cdFx0dmFyIGxlbmd0aHMgPSBbXSwgc3VtcyA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRzdW1zICs9IHRoaXMuY3VydmVzWyBpIF0uZ2V0TGVuZ3RoKCk7XG5cdFx0XHRsZW5ndGhzLnB1c2goIHN1bXMgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2FjaGVMZW5ndGhzID0gbGVuZ3RocztcblxuXHRcdHJldHVybiBsZW5ndGhzO1xuXG5cdH0sXG5cblx0Z2V0U3BhY2VkUG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGlmICggZGl2aXNpb25zID09PSB1bmRlZmluZWQgKSBkaXZpc2lvbnMgPSA0MDtcblxuXHRcdHZhciBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8PSBkaXZpc2lvbnM7IGkgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50KCBpIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hdXRvQ2xvc2UgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCBwb2ludHNbIDAgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9LFxuXG5cdGdldFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgMTI7XG5cblx0XHR2YXIgcG9pbnRzID0gW10sIGxhc3Q7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGN1cnZlcyA9IHRoaXMuY3VydmVzOyBpIDwgY3VydmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnZlID0gY3VydmVzWyBpIF07XG5cdFx0XHR2YXIgcmVzb2x1dGlvbiA9ICggY3VydmUgJiYgY3VydmUuaXNFbGxpcHNlQ3VydmUgKSA/IGRpdmlzaW9ucyAqIDJcblx0XHRcdFx0OiAoIGN1cnZlICYmICggY3VydmUuaXNMaW5lQ3VydmUgfHwgY3VydmUuaXNMaW5lQ3VydmUzICkgKSA/IDFcblx0XHRcdFx0XHQ6ICggY3VydmUgJiYgY3VydmUuaXNTcGxpbmVDdXJ2ZSApID8gZGl2aXNpb25zICogY3VydmUucG9pbnRzLmxlbmd0aFxuXHRcdFx0XHRcdFx0OiBkaXZpc2lvbnM7XG5cblx0XHRcdHZhciBwdHMgPSBjdXJ2ZS5nZXRQb2ludHMoIHJlc29sdXRpb24gKTtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgcHRzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgcG9pbnQgPSBwdHNbIGogXTtcblxuXHRcdFx0XHRpZiAoIGxhc3QgJiYgbGFzdC5lcXVhbHMoIHBvaW50ICkgKSBjb250aW51ZTsgLy8gZW5zdXJlcyBubyBjb25zZWN1dGl2ZSBwb2ludHMgYXJlIGR1cGxpY2F0ZXNcblxuXHRcdFx0XHRwb2ludHMucHVzaCggcG9pbnQgKTtcblx0XHRcdFx0bGFzdCA9IHBvaW50O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYXV0b0Nsb3NlICYmIHBvaW50cy5sZW5ndGggPiAxICYmICEgcG9pbnRzWyBwb2ludHMubGVuZ3RoIC0gMSBdLmVxdWFscyggcG9pbnRzWyAwIF0gKSApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHBvaW50c1sgMCBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJ2ZSA9IHNvdXJjZS5jdXJ2ZXNbIGkgXTtcblxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hdXRvQ2xvc2UgPSBzb3VyY2UuYXV0b0Nsb3NlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0XHRkYXRhLmF1dG9DbG9zZSA9IHRoaXMuYXV0b0Nsb3NlO1xuXHRcdGRhdGEuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY3VydmUgPSB0aGlzLmN1cnZlc1sgaSBdO1xuXHRcdFx0ZGF0YS5jdXJ2ZXMucHVzaCggY3VydmUudG9KU09OKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0ZnJvbUpTT046IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0XHR0aGlzLmF1dG9DbG9zZSA9IGpzb24uYXV0b0Nsb3NlO1xuXHRcdHRoaXMuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY3VydmUgPSBqc29uLmN1cnZlc1sgaSBdO1xuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggbmV3IEN1cnZlc1sgY3VydmUudHlwZSBdKCkuZnJvbUpTT04oIGN1cnZlICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIENyZWF0ZXMgZnJlZSBmb3JtIDJkIHBhdGggdXNpbmcgc2VyaWVzIG9mIHBvaW50cywgbGluZXMgb3IgY3VydmVzLlxuICoqL1xuXG5mdW5jdGlvbiBQYXRoKCBwb2ludHMgKSB7XG5cblx0Q3VydmVQYXRoLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUGF0aCc7XG5cblx0dGhpcy5jdXJyZW50UG9pbnQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdGlmICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKTtcblxuXHR9XG5cbn1cblxuUGF0aC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDdXJ2ZVBhdGgucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUGF0aCxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdHRoaXMubW92ZVRvKCBwb2ludHNbIDAgXS54LCBwb2ludHNbIDAgXS55ICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDEsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5saW5lVG8oIHBvaW50c1sgaSBdLngsIHBvaW50c1sgaSBdLnkgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdG1vdmVUbzogZnVuY3Rpb24gKCB4LCB5ICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCB4LCB5ICk7IC8vIFRPRE8gY29uc2lkZXIgcmVmZXJlbmNpbmcgdmVjdG9ycyBpbnN0ZWFkIG9mIGNvcHlpbmc/XG5cblx0fSxcblxuXHRsaW5lVG86IGZ1bmN0aW9uICggeCwgeSApIHtcblxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBMaW5lQ3VydmUoIHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksIG5ldyBWZWN0b3IyKCB4LCB5ICkgKTtcblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCB4LCB5ICk7XG5cblx0fSxcblxuXHRxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUHgsIGFDUHksIGFYLCBhWSApIHtcblxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBRdWFkcmF0aWNCZXppZXJDdXJ2ZShcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQeCwgYUNQeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFYLCBhWSApXG5cdFx0KTtcblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIGFYLCBhWSApO1xuXG5cdH0sXG5cblx0YmV6aWVyQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkge1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IEN1YmljQmV6aWVyQ3VydmUoXG5cdFx0XHR0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUDF4LCBhQ1AxeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUDJ4LCBhQ1AyeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFYLCBhWSApXG5cdFx0KTtcblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIGFYLCBhWSApO1xuXG5cdH0sXG5cblx0c3BsaW5lVGhydTogZnVuY3Rpb24gKCBwdHMgLypBcnJheSBvZiBWZWN0b3IqLyApIHtcblxuXHRcdHZhciBucHRzID0gWyB0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpIF0uY29uY2F0KCBwdHMgKTtcblxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBTcGxpbmVDdXJ2ZSggbnB0cyApO1xuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBwdHNbIHB0cy5sZW5ndGggLSAxIF0gKTtcblxuXHR9LFxuXG5cdGFyYzogZnVuY3Rpb24gKCBhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKSB7XG5cblx0XHR2YXIgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xuXHRcdHZhciB5MCA9IHRoaXMuY3VycmVudFBvaW50Lnk7XG5cblx0XHR0aGlzLmFic2FyYyggYVggKyB4MCwgYVkgKyB5MCwgYVJhZGl1cyxcblx0XHRcdGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcblxuXHR9LFxuXG5cdGFic2FyYzogZnVuY3Rpb24gKCBhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKSB7XG5cblx0XHR0aGlzLmFic2VsbGlwc2UoIGFYLCBhWSwgYVJhZGl1cywgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdH0sXG5cblx0ZWxsaXBzZTogZnVuY3Rpb24gKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApIHtcblxuXHRcdHZhciB4MCA9IHRoaXMuY3VycmVudFBvaW50Lng7XG5cdFx0dmFyIHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTtcblxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVggKyB4MCwgYVkgKyB5MCwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICk7XG5cblx0fSxcblxuXHRhYnNlbGxpcHNlOiBmdW5jdGlvbiAoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IEVsbGlwc2VDdXJ2ZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKTtcblxuXHRcdGlmICggdGhpcy5jdXJ2ZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gaWYgYSBwcmV2aW91cyBjdXJ2ZSBpcyBwcmVzZW50LCBhdHRlbXB0IHRvIGpvaW5cblx0XHRcdHZhciBmaXJzdFBvaW50ID0gY3VydmUuZ2V0UG9pbnQoIDAgKTtcblxuXHRcdFx0aWYgKCAhIGZpcnN0UG9pbnQuZXF1YWxzKCB0aGlzLmN1cnJlbnRQb2ludCApICkge1xuXG5cdFx0XHRcdHRoaXMubGluZVRvKCBmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dmFyIGxhc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAxICk7XG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggbGFzdFBvaW50ICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdEN1cnZlUGF0aC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIHNvdXJjZS5jdXJyZW50UG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IEN1cnZlUGF0aC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRcdGRhdGEuY3VycmVudFBvaW50ID0gdGhpcy5jdXJyZW50UG9pbnQudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRmcm9tSlNPTjogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0Q3VydmVQYXRoLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5mcm9tQXJyYXkoIGpzb24uY3VycmVudFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBEZWZpbmVzIGEgMmQgc2hhcGUgcGxhbmUgdXNpbmcgcGF0aHMuXG4gKiovXG5cbi8vIFNURVAgMSBDcmVhdGUgYSBwYXRoLlxuLy8gU1RFUCAyIFR1cm4gcGF0aCBpbnRvIHNoYXBlLlxuLy8gU1RFUCAzIEV4dHJ1ZGVHZW9tZXRyeSB0YWtlcyBpbiBTaGFwZS9TaGFwZXNcbi8vIFNURVAgM2EgLSBFeHRyYWN0IHBvaW50cyBmcm9tIGVhY2ggc2hhcGUsIHR1cm4gdG8gdmVydGljZXNcbi8vIFNURVAgM2IgLSBUcmlhbmd1bGF0ZSBlYWNoIHNoYXBlLCBhZGQgZmFjZXMuXG5cbmZ1bmN0aW9uIFNoYXBlKCBwb2ludHMgKSB7XG5cblx0UGF0aC5jYWxsKCB0aGlzLCBwb2ludHMgKTtcblxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhcGUnO1xuXG5cdHRoaXMuaG9sZXMgPSBbXTtcblxufVxuXG5TaGFwZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBQYXRoLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNoYXBlLFxuXG5cdGdldFBvaW50c0hvbGVzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdHZhciBob2xlc1B0cyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRob2xlc1B0c1sgaSBdID0gdGhpcy5ob2xlc1sgaSBdLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaG9sZXNQdHM7XG5cblx0fSxcblxuXHQvLyBnZXQgcG9pbnRzIG9mIHNoYXBlIGFuZCBob2xlcyAoa2V5cG9pbnRzIGJhc2VkIG9uIHNlZ21lbnRzIHBhcmFtZXRlcilcblxuXHRleHRyYWN0UG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNoYXBlOiB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICksXG5cdFx0XHRob2xlczogdGhpcy5nZXRQb2ludHNIb2xlcyggZGl2aXNpb25zIClcblxuXHRcdH07XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdFBhdGgucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmhvbGVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UuaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGhvbGUgPSBzb3VyY2UuaG9sZXNbIGkgXTtcblxuXHRcdFx0dGhpcy5ob2xlcy5wdXNoKCBob2xlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IFBhdGgucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaG9sZSA9IHRoaXMuaG9sZXNbIGkgXTtcblx0XHRcdGRhdGEuaG9sZXMucHVzaCggaG9sZS50b0pTT04oKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRmcm9tSlNPTjogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0UGF0aC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdFx0dGhpcy51dWlkID0ganNvbi51dWlkO1xuXHRcdHRoaXMuaG9sZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24uaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGhvbGUgPSBqc29uLmhvbGVzWyBpIF07XG5cdFx0XHR0aGlzLmhvbGVzLnB1c2goIG5ldyBQYXRoKCkuZnJvbUpTT04oIGhvbGUgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gTGlnaHQoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaWdodCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggY29sb3IgKTtcblx0dGhpcy5pbnRlbnNpdHkgPSBpbnRlbnNpdHkgIT09IHVuZGVmaW5lZCA/IGludGVuc2l0eSA6IDE7XG5cblx0dGhpcy5yZWNlaXZlU2hhZG93ID0gdW5kZWZpbmVkO1xuXG59XG5cbkxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExpZ2h0LFxuXG5cdGlzTGlnaHQ6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBzb3VyY2UuaW50ZW5zaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7XG5cdFx0ZGF0YS5vYmplY3QuaW50ZW5zaXR5ID0gdGhpcy5pbnRlbnNpdHk7XG5cblx0XHRpZiAoIHRoaXMuZ3JvdW5kQ29sb3IgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0Lmdyb3VuZENvbG9yID0gdGhpcy5ncm91bmRDb2xvci5nZXRIZXgoKTtcblxuXHRcdGlmICggdGhpcy5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGlzdGFuY2UgPSB0aGlzLmRpc3RhbmNlO1xuXHRcdGlmICggdGhpcy5hbmdsZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuYW5nbGUgPSB0aGlzLmFuZ2xlO1xuXHRcdGlmICggdGhpcy5kZWNheSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGVjYXkgPSB0aGlzLmRlY2F5O1xuXHRcdGlmICggdGhpcy5wZW51bWJyYSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QucGVudW1icmEgPSB0aGlzLnBlbnVtYnJhO1xuXG5cdFx0aWYgKCB0aGlzLnNoYWRvdyAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3Quc2hhZG93ID0gdGhpcy5zaGFkb3cudG9KU09OKCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEhlbWlzcGhlcmVMaWdodCggc2t5Q29sb3IsIGdyb3VuZENvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgc2t5Q29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdIZW1pc3BoZXJlTGlnaHQnO1xuXG5cdHRoaXMuY2FzdFNoYWRvdyA9IHVuZGVmaW5lZDtcblxuXHR0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRlZmF1bHRVcCApO1xuXHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdHRoaXMuZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoIGdyb3VuZENvbG9yICk7XG5cbn1cblxuSGVtaXNwaGVyZUxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEhlbWlzcGhlcmVMaWdodCxcblxuXHRpc0hlbWlzcGhlcmVMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5ncm91bmRDb2xvci5jb3B5KCBzb3VyY2UuZ3JvdW5kQ29sb3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTGlnaHRTaGFkb3coIGNhbWVyYSApIHtcblxuXHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHR0aGlzLmJpYXMgPSAwO1xuXHR0aGlzLnJhZGl1cyA9IDE7XG5cblx0dGhpcy5tYXBTaXplID0gbmV3IFZlY3RvcjIoIDUxMiwgNTEyICk7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTGlnaHRTaGFkb3cucHJvdG90eXBlLCB7XG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmNhbWVyYSA9IHNvdXJjZS5jYW1lcmEuY2xvbmUoKTtcblxuXHRcdHRoaXMuYmlhcyA9IHNvdXJjZS5iaWFzO1xuXHRcdHRoaXMucmFkaXVzID0gc291cmNlLnJhZGl1cztcblxuXHRcdHRoaXMubWFwU2l6ZS5jb3B5KCBzb3VyY2UubWFwU2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqZWN0ID0ge307XG5cblx0XHRpZiAoIHRoaXMuYmlhcyAhPT0gMCApIG9iamVjdC5iaWFzID0gdGhpcy5iaWFzO1xuXHRcdGlmICggdGhpcy5yYWRpdXMgIT09IDEgKSBvYmplY3QucmFkaXVzID0gdGhpcy5yYWRpdXM7XG5cdFx0aWYgKCB0aGlzLm1hcFNpemUueCAhPT0gNTEyIHx8IHRoaXMubWFwU2l6ZS55ICE9PSA1MTIgKSBvYmplY3QubWFwU2l6ZSA9IHRoaXMubWFwU2l6ZS50b0FycmF5KCk7XG5cblx0XHRvYmplY3QuY2FtZXJhID0gdGhpcy5jYW1lcmEudG9KU09OKCBmYWxzZSApLm9iamVjdDtcblx0XHRkZWxldGUgb2JqZWN0LmNhbWVyYS5tYXRyaXg7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gU3BvdExpZ2h0U2hhZG93KCkge1xuXG5cdExpZ2h0U2hhZG93LmNhbGwoIHRoaXMsIG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggNTAsIDEsIDAuNSwgNTAwICkgKTtcblxufVxuXG5TcG90TGlnaHRTaGFkb3cucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHRTaGFkb3cucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU3BvdExpZ2h0U2hhZG93LFxuXG5cdGlzU3BvdExpZ2h0U2hhZG93OiB0cnVlLFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCBsaWdodCApIHtcblxuXHRcdHZhciBjYW1lcmEgPSB0aGlzLmNhbWVyYTtcblxuXHRcdHZhciBmb3YgPSBfTWF0aC5SQUQyREVHICogMiAqIGxpZ2h0LmFuZ2xlO1xuXHRcdHZhciBhc3BlY3QgPSB0aGlzLm1hcFNpemUud2lkdGggLyB0aGlzLm1hcFNpemUuaGVpZ2h0O1xuXHRcdHZhciBmYXIgPSBsaWdodC5kaXN0YW5jZSB8fCBjYW1lcmEuZmFyO1xuXG5cdFx0aWYgKCBmb3YgIT09IGNhbWVyYS5mb3YgfHwgYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0IHx8IGZhciAhPT0gY2FtZXJhLmZhciApIHtcblxuXHRcdFx0Y2FtZXJhLmZvdiA9IGZvdjtcblx0XHRcdGNhbWVyYS5hc3BlY3QgPSBhc3BlY3Q7XG5cdFx0XHRjYW1lcmEuZmFyID0gZmFyO1xuXHRcdFx0Y2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIFNwb3RMaWdodCggY29sb3IsIGludGVuc2l0eSwgZGlzdGFuY2UsIGFuZ2xlLCBwZW51bWJyYSwgZGVjYXkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdTcG90TGlnaHQnO1xuXG5cdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuRGVmYXVsdFVwICk7XG5cdHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdwb3dlcicsIHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxuXHRcdFx0Ly8gcmVmOiBlcXVhdGlvbiAoMTcpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZW5zaXR5ICogTWF0aC5QSTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHBvd2VyICkge1xuXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXG5cdFx0XHQvLyByZWY6IGVxdWF0aW9uICgxNykgZnJvbSBodHRwczovL3NlYmxhZ2FyZGUuZmlsZXMud29yZHByZXNzLmNvbS8yMDE1LzA3L2NvdXJzZV9ub3Rlc19tb3ZpbmdfZnJvc3RiaXRlX3RvX3Bicl92MzIucGRmXG5cdFx0XHR0aGlzLmludGVuc2l0eSA9IHBvd2VyIC8gTWF0aC5QSTtcblxuXHRcdH1cblx0fSApO1xuXG5cdHRoaXMuZGlzdGFuY2UgPSAoIGRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSA/IGRpc3RhbmNlIDogMDtcblx0dGhpcy5hbmdsZSA9ICggYW5nbGUgIT09IHVuZGVmaW5lZCApID8gYW5nbGUgOiBNYXRoLlBJIC8gMztcblx0dGhpcy5wZW51bWJyYSA9ICggcGVudW1icmEgIT09IHVuZGVmaW5lZCApID8gcGVudW1icmEgOiAwO1xuXHR0aGlzLmRlY2F5ID0gKCBkZWNheSAhPT0gdW5kZWZpbmVkICkgPyBkZWNheSA6IDE7XHQvLyBmb3IgcGh5c2ljYWxseSBjb3JyZWN0IGxpZ2h0cywgc2hvdWxkIGJlIDIuXG5cblx0dGhpcy5zaGFkb3cgPSBuZXcgU3BvdExpZ2h0U2hhZG93KCk7XG5cbn1cblxuU3BvdExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNwb3RMaWdodCxcblxuXHRpc1Nwb3RMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5kaXN0YW5jZSA9IHNvdXJjZS5kaXN0YW5jZTtcblx0XHR0aGlzLmFuZ2xlID0gc291cmNlLmFuZ2xlO1xuXHRcdHRoaXMucGVudW1icmEgPSBzb3VyY2UucGVudW1icmE7XG5cdFx0dGhpcy5kZWNheSA9IHNvdXJjZS5kZWNheTtcblxuXHRcdHRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5jbG9uZSgpO1xuXG5cdFx0dGhpcy5zaGFkb3cgPSBzb3VyY2Uuc2hhZG93LmNsb25lKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cblxuZnVuY3Rpb24gUG9pbnRMaWdodCggY29sb3IsIGludGVuc2l0eSwgZGlzdGFuY2UsIGRlY2F5ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHR0aGlzLnR5cGUgPSAnUG9pbnRMaWdodCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAncG93ZXInLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdC8vIGludGVuc2l0eSA9IHBvd2VyIHBlciBzb2xpZCBhbmdsZS5cblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE1KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcblx0XHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIDQgKiBNYXRoLlBJO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggcG93ZXIgKSB7XG5cblx0XHRcdC8vIGludGVuc2l0eSA9IHBvd2VyIHBlciBzb2xpZCBhbmdsZS5cblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE1KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcblx0XHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyAoIDQgKiBNYXRoLlBJICk7XG5cblx0XHR9XG5cdH0gKTtcblxuXHR0aGlzLmRpc3RhbmNlID0gKCBkaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgPyBkaXN0YW5jZSA6IDA7XG5cdHRoaXMuZGVjYXkgPSAoIGRlY2F5ICE9PSB1bmRlZmluZWQgKSA/IGRlY2F5IDogMTtcdC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cblxuXHR0aGlzLnNoYWRvdyA9IG5ldyBMaWdodFNoYWRvdyggbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA5MCwgMSwgMC41LCA1MDAgKSApO1xuXG59XG5cblBvaW50TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUG9pbnRMaWdodCxcblxuXHRpc1BvaW50TGlnaHQ6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBzb3VyY2UuZGlzdGFuY2U7XG5cdFx0dGhpcy5kZWNheSA9IHNvdXJjZS5kZWNheTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgYXJvc2UgLyBodHRwOi8vZ2l0aHViLmNvbS9hcm9zZVxuICovXG5cbmZ1bmN0aW9uIE9ydGhvZ3JhcGhpY0NhbWVyYSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7XG5cblx0Q2FtZXJhLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnT3J0aG9ncmFwaGljQ2FtZXJhJztcblxuXHR0aGlzLnpvb20gPSAxO1xuXHR0aGlzLnZpZXcgPSBudWxsO1xuXG5cdHRoaXMubGVmdCA9ICggbGVmdCAhPT0gdW5kZWZpbmVkICkgPyBsZWZ0IDogLSAxO1xuXHR0aGlzLnJpZ2h0ID0gKCByaWdodCAhPT0gdW5kZWZpbmVkICkgPyByaWdodCA6IDE7XG5cdHRoaXMudG9wID0gKCB0b3AgIT09IHVuZGVmaW5lZCApID8gdG9wIDogMTtcblx0dGhpcy5ib3R0b20gPSAoIGJvdHRvbSAhPT0gdW5kZWZpbmVkICkgPyBib3R0b20gOiAtIDE7XG5cblx0dGhpcy5uZWFyID0gKCBuZWFyICE9PSB1bmRlZmluZWQgKSA/IG5lYXIgOiAwLjE7XG5cdHRoaXMuZmFyID0gKCBmYXIgIT09IHVuZGVmaW5lZCApID8gZmFyIDogMjAwMDtcblxuXHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxufVxuXG5PcnRob2dyYXBoaWNDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQ2FtZXJhLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IE9ydGhvZ3JhcGhpY0NhbWVyYSxcblxuXHRpc09ydGhvZ3JhcGhpY0NhbWVyYTogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0Q2FtZXJhLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLmxlZnQgPSBzb3VyY2UubGVmdDtcblx0XHR0aGlzLnJpZ2h0ID0gc291cmNlLnJpZ2h0O1xuXHRcdHRoaXMudG9wID0gc291cmNlLnRvcDtcblx0XHR0aGlzLmJvdHRvbSA9IHNvdXJjZS5ib3R0b207XG5cdFx0dGhpcy5uZWFyID0gc291cmNlLm5lYXI7XG5cdFx0dGhpcy5mYXIgPSBzb3VyY2UuZmFyO1xuXG5cdFx0dGhpcy56b29tID0gc291cmNlLnpvb207XG5cdFx0dGhpcy52aWV3ID0gc291cmNlLnZpZXcgPT09IG51bGwgPyBudWxsIDogT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS52aWV3ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFZpZXdPZmZzZXQ6IGZ1bmN0aW9uICggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldyA9IHtcblx0XHRcdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRcdFx0ZnVsbFdpZHRoOiAxLFxuXHRcdFx0XHRmdWxsSGVpZ2h0OiAxLFxuXHRcdFx0XHRvZmZzZXRYOiAwLFxuXHRcdFx0XHRvZmZzZXRZOiAwLFxuXHRcdFx0XHR3aWR0aDogMSxcblx0XHRcdFx0aGVpZ2h0OiAxXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy52aWV3LmVuYWJsZWQgPSB0cnVlO1xuXHRcdHRoaXMudmlldy5mdWxsV2lkdGggPSBmdWxsV2lkdGg7XG5cdFx0dGhpcy52aWV3LmZ1bGxIZWlnaHQgPSBmdWxsSGVpZ2h0O1xuXHRcdHRoaXMudmlldy5vZmZzZXRYID0geDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WSA9IHk7XG5cdFx0dGhpcy52aWV3LndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy52aWV3LmhlaWdodCA9IGhlaWdodDtcblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH0sXG5cblx0Y2xlYXJWaWV3T2Zmc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3LmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH0sXG5cblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGR4ID0gKCB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0ICkgLyAoIDIgKiB0aGlzLnpvb20gKTtcblx0XHR2YXIgZHkgPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvICggMiAqIHRoaXMuem9vbSApO1xuXHRcdHZhciBjeCA9ICggdGhpcy5yaWdodCArIHRoaXMubGVmdCApIC8gMjtcblx0XHR2YXIgY3kgPSAoIHRoaXMudG9wICsgdGhpcy5ib3R0b20gKSAvIDI7XG5cblx0XHR2YXIgbGVmdCA9IGN4IC0gZHg7XG5cdFx0dmFyIHJpZ2h0ID0gY3ggKyBkeDtcblx0XHR2YXIgdG9wID0gY3kgKyBkeTtcblx0XHR2YXIgYm90dG9tID0gY3kgLSBkeTtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xuXG5cdFx0XHR2YXIgem9vbVcgPSB0aGlzLnpvb20gLyAoIHRoaXMudmlldy53aWR0aCAvIHRoaXMudmlldy5mdWxsV2lkdGggKTtcblx0XHRcdHZhciB6b29tSCA9IHRoaXMuem9vbSAvICggdGhpcy52aWV3LmhlaWdodCAvIHRoaXMudmlldy5mdWxsSGVpZ2h0ICk7XG5cdFx0XHR2YXIgc2NhbGVXID0gKCB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0ICkgLyB0aGlzLnZpZXcud2lkdGg7XG5cdFx0XHR2YXIgc2NhbGVIID0gKCB0aGlzLnRvcCAtIHRoaXMuYm90dG9tICkgLyB0aGlzLnZpZXcuaGVpZ2h0O1xuXG5cdFx0XHRsZWZ0ICs9IHNjYWxlVyAqICggdGhpcy52aWV3Lm9mZnNldFggLyB6b29tVyApO1xuXHRcdFx0cmlnaHQgPSBsZWZ0ICsgc2NhbGVXICogKCB0aGlzLnZpZXcud2lkdGggLyB6b29tVyApO1xuXHRcdFx0dG9wIC09IHNjYWxlSCAqICggdGhpcy52aWV3Lm9mZnNldFkgLyB6b29tSCApO1xuXHRcdFx0Ym90dG9tID0gdG9wIC0gc2NhbGVIICogKCB0aGlzLnZpZXcuaGVpZ2h0IC8gem9vbUggKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIHRoaXMubmVhciwgdGhpcy5mYXIgKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC56b29tID0gdGhpcy56b29tO1xuXHRcdGRhdGEub2JqZWN0LmxlZnQgPSB0aGlzLmxlZnQ7XG5cdFx0ZGF0YS5vYmplY3QucmlnaHQgPSB0aGlzLnJpZ2h0O1xuXHRcdGRhdGEub2JqZWN0LnRvcCA9IHRoaXMudG9wO1xuXHRcdGRhdGEub2JqZWN0LmJvdHRvbSA9IHRoaXMuYm90dG9tO1xuXHRcdGRhdGEub2JqZWN0Lm5lYXIgPSB0aGlzLm5lYXI7XG5cdFx0ZGF0YS5vYmplY3QuZmFyID0gdGhpcy5mYXI7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIGRhdGEub2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy52aWV3ICk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIERpcmVjdGlvbmFsTGlnaHRTaGFkb3coICkge1xuXG5cdExpZ2h0U2hhZG93LmNhbGwoIHRoaXMsIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIC0gNSwgNSwgNSwgLSA1LCAwLjUsIDUwMCApICk7XG5cbn1cblxuRGlyZWN0aW9uYWxMaWdodFNoYWRvdy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodFNoYWRvdy5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBEaXJlY3Rpb25hbExpZ2h0U2hhZG93XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBEaXJlY3Rpb25hbExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHR0aGlzLnR5cGUgPSAnRGlyZWN0aW9uYWxMaWdodCc7XG5cblx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHR0aGlzLnRhcmdldCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdHRoaXMuc2hhZG93ID0gbmV3IERpcmVjdGlvbmFsTGlnaHRTaGFkb3coKTtcblxufVxuXG5EaXJlY3Rpb25hbExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IERpcmVjdGlvbmFsTGlnaHQsXG5cblx0aXNEaXJlY3Rpb25hbExpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBbWJpZW50TGlnaHQoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdBbWJpZW50TGlnaHQnO1xuXG5cdHRoaXMuY2FzdFNoYWRvdyA9IHVuZGVmaW5lZDtcblxufVxuXG5BbWJpZW50TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQW1iaWVudExpZ2h0LFxuXG5cdGlzQW1iaWVudExpZ2h0OiB0cnVlXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFiZWxuYXRpb24gLyBodHRwOi8vZ2l0aHViLmNvbS9hYmVsbmF0aW9uXG4gKi9cblxuZnVuY3Rpb24gUmVjdEFyZWFMaWdodCggY29sb3IsIGludGVuc2l0eSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ1JlY3RBcmVhTGlnaHQnO1xuXG5cdHRoaXMud2lkdGggPSAoIHdpZHRoICE9PSB1bmRlZmluZWQgKSA/IHdpZHRoIDogMTA7XG5cdHRoaXMuaGVpZ2h0ID0gKCBoZWlnaHQgIT09IHVuZGVmaW5lZCApID8gaGVpZ2h0IDogMTA7XG5cbn1cblxuUmVjdEFyZWFMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBSZWN0QXJlYUxpZ2h0LFxuXG5cdGlzUmVjdEFyZWFMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBMaWdodC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LndpZHRoID0gdGhpcy53aWR0aDtcblx0XHRkYXRhLm9iamVjdC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTWF0ZXJpYWxMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cdHRoaXMudGV4dHVyZXMgPSB7fTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBNYXRlcmlhbExvYWRlci5wcm90b3R5cGUsIHtcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciB0ZXh0dXJlcyA9IHRoaXMudGV4dHVyZXM7XG5cblx0XHRmdW5jdGlvbiBnZXRUZXh0dXJlKCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmVzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbExvYWRlcjogVW5kZWZpbmVkIHRleHR1cmUnLCBuYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRleHR1cmVzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHR2YXIgbWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWxzWyBqc29uLnR5cGUgXSgpO1xuXG5cdFx0aWYgKCBqc29uLnV1aWQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnV1aWQgPSBqc29uLnV1aWQ7XG5cdFx0aWYgKCBqc29uLm5hbWUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm5hbWUgPSBqc29uLm5hbWU7XG5cdFx0aWYgKCBqc29uLmNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb2xvci5zZXRIZXgoIGpzb24uY29sb3IgKTtcblx0XHRpZiAoIGpzb24ucm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3VnaG5lc3MgPSBqc29uLnJvdWdobmVzcztcblx0XHRpZiAoIGpzb24ubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tZXRhbG5lc3MgPSBqc29uLm1ldGFsbmVzcztcblx0XHRpZiAoIGpzb24uZW1pc3NpdmUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVtaXNzaXZlLnNldEhleCgganNvbi5lbWlzc2l2ZSApO1xuXHRcdGlmICgganNvbi5zcGVjdWxhciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXIuc2V0SGV4KCBqc29uLnNwZWN1bGFyICk7XG5cdFx0aWYgKCBqc29uLnNoaW5pbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hpbmluZXNzID0ganNvbi5zaGluaW5lc3M7XG5cdFx0aWYgKCBqc29uLmNsZWFyQ29hdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJDb2F0ID0ganNvbi5jbGVhckNvYXQ7XG5cdFx0aWYgKCBqc29uLmNsZWFyQ29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzID0ganNvbi5jbGVhckNvYXRSb3VnaG5lc3M7XG5cdFx0aWYgKCBqc29uLnZlcnRleENvbG9ycyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmVydGV4Q29sb3JzID0ganNvbi52ZXJ0ZXhDb2xvcnM7XG5cdFx0aWYgKCBqc29uLmZvZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZm9nID0ganNvbi5mb2c7XG5cdFx0aWYgKCBqc29uLmZsYXRTaGFkaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mbGF0U2hhZGluZyA9IGpzb24uZmxhdFNoYWRpbmc7XG5cdFx0aWYgKCBqc29uLmJsZW5kaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZGluZyA9IGpzb24uYmxlbmRpbmc7XG5cdFx0aWYgKCBqc29uLmNvbWJpbmUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbWJpbmUgPSBqc29uLmNvbWJpbmU7XG5cdFx0aWYgKCBqc29uLnNpZGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpZGUgPSBqc29uLnNpZGU7XG5cdFx0aWYgKCBqc29uLm9wYWNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm9wYWNpdHkgPSBqc29uLm9wYWNpdHk7XG5cdFx0aWYgKCBqc29uLnRyYW5zcGFyZW50ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50cmFuc3BhcmVudCA9IGpzb24udHJhbnNwYXJlbnQ7XG5cdFx0aWYgKCBqc29uLmFscGhhVGVzdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYWxwaGFUZXN0ID0ganNvbi5hbHBoYVRlc3Q7XG5cdFx0aWYgKCBqc29uLmRlcHRoVGVzdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVwdGhUZXN0ID0ganNvbi5kZXB0aFRlc3Q7XG5cdFx0aWYgKCBqc29uLmRlcHRoV3JpdGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlcHRoV3JpdGUgPSBqc29uLmRlcHRoV3JpdGU7XG5cdFx0aWYgKCBqc29uLmNvbG9yV3JpdGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbG9yV3JpdGUgPSBqc29uLmNvbG9yV3JpdGU7XG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lID0ganNvbi53aXJlZnJhbWU7XG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZUxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoID0ganNvbi53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZUxpbmVjYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmVjYXAgPSBqc29uLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZUxpbmVqb2luICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5lam9pbiA9IGpzb24ud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRpZiAoIGpzb24ucm90YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdGF0aW9uID0ganNvbi5yb3RhdGlvbjtcblxuXHRcdGlmICgganNvbi5saW5ld2lkdGggIT09IDEgKSBtYXRlcmlhbC5saW5ld2lkdGggPSBqc29uLmxpbmV3aWR0aDtcblx0XHRpZiAoIGpzb24uZGFzaFNpemUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRhc2hTaXplID0ganNvbi5kYXNoU2l6ZTtcblx0XHRpZiAoIGpzb24uZ2FwU2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZ2FwU2l6ZSA9IGpzb24uZ2FwU2l6ZTtcblx0XHRpZiAoIGpzb24uc2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNjYWxlID0ganNvbi5zY2FsZTtcblxuXHRcdGlmICgganNvbi5wb2x5Z29uT2Zmc2V0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0ID0ganNvbi5wb2x5Z29uT2Zmc2V0O1xuXHRcdGlmICgganNvbi5wb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0RmFjdG9yID0ganNvbi5wb2x5Z29uT2Zmc2V0RmFjdG9yO1xuXHRcdGlmICgganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyA9IGpzb24ucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0aWYgKCBqc29uLnNraW5uaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5za2lubmluZyA9IGpzb24uc2tpbm5pbmc7XG5cdFx0aWYgKCBqc29uLm1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubW9ycGhUYXJnZXRzID0ganNvbi5tb3JwaFRhcmdldHM7XG5cdFx0aWYgKCBqc29uLm1vcnBoTm9ybWFscyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubW9ycGhOb3JtYWxzID0ganNvbi5tb3JwaE5vcm1hbHM7XG5cdFx0aWYgKCBqc29uLmRpdGhlcmluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGl0aGVyaW5nID0ganNvbi5kaXRoZXJpbmc7XG5cblx0XHRpZiAoIGpzb24udmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmlzaWJsZSA9IGpzb24udmlzaWJsZTtcblx0XHRpZiAoIGpzb24udXNlckRhdGEgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnVzZXJEYXRhID0ganNvbi51c2VyRGF0YTtcblxuXHRcdC8vIFNoYWRlciBNYXRlcmlhbFxuXG5cdFx0aWYgKCBqc29uLnVuaWZvcm1zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBuYW1lIGluIGpzb24udW5pZm9ybXMgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm0gPSBqc29uLnVuaWZvcm1zWyBuYW1lIF07XG5cblx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXSA9IHt9O1xuXG5cdFx0XHRcdHN3aXRjaCAoIHVuaWZvcm0udHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ3QnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IGdldFRleHR1cmUoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnYyc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IENvbG9yKCkuc2V0SGV4KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3YyJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd2Myc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndjQnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3I0KCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ20zJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgTWF0cml4MygpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXG5cdFx0XHRcdFx0Y2FzZSAnbTQnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZWZpbmVzID0ganNvbi5kZWZpbmVzO1xuXHRcdGlmICgganNvbi52ZXJ0ZXhTaGFkZXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnZlcnRleFNoYWRlciA9IGpzb24udmVydGV4U2hhZGVyO1xuXHRcdGlmICgganNvbi5mcmFnbWVudFNoYWRlciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIgPSBqc29uLmZyYWdtZW50U2hhZGVyO1xuXG5cdFx0aWYgKCBqc29uLmV4dGVuc2lvbnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBqc29uLmV4dGVuc2lvbnMgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwuZXh0ZW5zaW9uc1sga2V5IF0gPSBqc29uLmV4dGVuc2lvbnNbIGtleSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBEZXByZWNhdGVkXG5cblx0XHRpZiAoIGpzb24uc2hhZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSBqc29uLnNoYWRpbmcgPT09IDE7IC8vIFRIUkVFLkZsYXRTaGFkaW5nXG5cblx0XHQvLyBmb3IgUG9pbnRzTWF0ZXJpYWxcblxuXHRcdGlmICgganNvbi5zaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplID0ganNvbi5zaXplO1xuXHRcdGlmICgganNvbi5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9IGpzb24uc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0Ly8gbWFwc1xuXG5cdFx0aWYgKCBqc29uLm1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZSgganNvbi5tYXAgKTtcblx0XHRpZiAoIGpzb24ubWF0Y2FwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tYXRjYXAgPSBnZXRUZXh0dXJlKCBqc29uLm1hdGNhcCApO1xuXG5cdFx0aWYgKCBqc29uLmFscGhhTWFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hdGVyaWFsLmFscGhhTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hbHBoYU1hcCApO1xuXHRcdFx0bWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmJ1bXBNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJ1bXBNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmJ1bXBNYXAgKTtcblx0XHRpZiAoIGpzb24uYnVtcFNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5idW1wU2NhbGUgPSBqc29uLmJ1bXBTY2FsZTtcblxuXHRcdGlmICgganNvbi5ub3JtYWxNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm5vcm1hbE1hcCA9IGdldFRleHR1cmUoIGpzb24ubm9ybWFsTWFwICk7XG5cdFx0aWYgKCBqc29uLm5vcm1hbE1hcFR5cGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPSBqc29uLm5vcm1hbE1hcFR5cGU7XG5cdFx0aWYgKCBqc29uLm5vcm1hbFNjYWxlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBub3JtYWxTY2FsZSA9IGpzb24ubm9ybWFsU2NhbGU7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbm9ybWFsU2NhbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gQmxlbmRlciBleHBvcnRlciB1c2VkIHRvIGV4cG9ydCBhIHNjYWxhci4gU2VlICM3NDU5XG5cblx0XHRcdFx0bm9ybWFsU2NhbGUgPSBbIG5vcm1hbFNjYWxlLCBub3JtYWxTY2FsZSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFsLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIG5vcm1hbFNjYWxlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmRpc3BsYWNlbWVudE1hcCApO1xuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGUgPSBqc29uLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRCaWFzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzID0ganNvbi5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0aWYgKCBqc29uLnJvdWdobmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucm91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5yb3VnaG5lc3NNYXAgKTtcblx0XHRpZiAoIGpzb24ubWV0YWxuZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLm1ldGFsbmVzc01hcCApO1xuXG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9IGdldFRleHR1cmUoIGpzb24uZW1pc3NpdmVNYXAgKTtcblx0XHRpZiAoIGpzb24uZW1pc3NpdmVJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0ganNvbi5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdGlmICgganNvbi5zcGVjdWxhck1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFyTWFwICk7XG5cblx0XHRpZiAoIGpzb24uZW52TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbnZNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmVudk1hcCApO1xuXHRcdGlmICgganNvbi5lbnZNYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVudk1hcEludGVuc2l0eSA9IGpzb24uZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLnJlZmxlY3Rpdml0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucmVmbGVjdGl2aXR5ID0ganNvbi5yZWZsZWN0aXZpdHk7XG5cdFx0aWYgKCBqc29uLnJlZnJhY3Rpb25SYXRpbyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvID0ganNvbi5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHRpZiAoIGpzb24ubGlnaHRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmxpZ2h0TWFwID0gZ2V0VGV4dHVyZSgganNvbi5saWdodE1hcCApO1xuXHRcdGlmICgganNvbi5saWdodE1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHkgPSBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLmFvTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hb01hcCA9IGdldFRleHR1cmUoIGpzb24uYW9NYXAgKTtcblx0XHRpZiAoIGpzb24uYW9NYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5ID0ganNvbi5hb01hcEludGVuc2l0eTtcblxuXHRcdGlmICgganNvbi5ncmFkaWVudE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZ3JhZGllbnRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmdyYWRpZW50TWFwICk7XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWw7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRUZXh0dXJlczogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMudGV4dHVyZXMgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIERvbiBNY0N1cmR5IC8gaHR0cHM6Ly93d3cuZG9ubWNjdXJkeS5jb21cbiAqL1xuXG52YXIgTG9hZGVyVXRpbHMgPSB7XG5cblx0ZGVjb2RlVGV4dDogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdGlmICggdHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZSggYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdC8vIEF2b2lkIHRoZSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycmF5KSBzaG9ydGN1dCwgd2hpY2hcblx0XHQvLyB0aHJvd3MgYSBcIm1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIgZXJyb3IgZm9yIGxhcmdlIGFycmF5cy5cblxuXHRcdHZhciBzID0gJyc7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gYXJyYXkubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdC8vIEltcGxpY2l0bHkgYXNzdW1lcyBsaXR0bGUtZW5kaWFuLlxuXHRcdFx0cyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCBhcnJheVsgaSBdICk7XG5cblx0XHR9XG5cblx0XHR0cnkge1xuXG5cdFx0XHQvLyBtZXJnZXMgbXVsdGktYnl0ZSB1dGYtOCBjaGFyYWN0ZXJzLlxuXG5cdFx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KCBlc2NhcGUoIHMgKSApO1xuXG5cdFx0fSBjYXRjaCAoIGUgKSB7IC8vIHNlZSAjMTYzNThcblxuXHRcdFx0cmV0dXJuIHM7XG5cblx0XHR9XG5cblx0fSxcblxuXHRleHRyYWN0VXJsQmFzZTogZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHR2YXIgaW5kZXggPSB1cmwubGFzdEluZGV4T2YoICcvJyApO1xuXG5cdFx0aWYgKCBpbmRleCA9PT0gLSAxICkgcmV0dXJuICcuLyc7XG5cblx0XHRyZXR1cm4gdXJsLnN1YnN0ciggMCwgaW5kZXggKyAxICk7XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICovXG5cbmZ1bmN0aW9uIEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5KCkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknO1xuXHR0aGlzLm1heEluc3RhbmNlZENvdW50ID0gdW5kZWZpbmVkO1xuXG59XG5cbkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LFxuXG5cdGlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnk6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMubWF4SW5zdGFuY2VkQ291bnQgPSBzb3VyY2UubWF4SW5zdGFuY2VkQ291bnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0XHRkYXRhLm1heEluc3RhbmNlZENvdW50ID0gdGhpcy5tYXhJbnN0YW5jZWRDb3VudDtcblxuXHRcdGRhdGEuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA9IHRydWU7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCwgbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRpZiAoIHR5cGVvZiAoIG5vcm1hbGl6ZWQgKSA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRtZXNoUGVyQXR0cmlidXRlID0gbm9ybWFsaXplZDtcblxuXHRcdG5vcm1hbGl6ZWQgPSBmYWxzZTtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6IFRoZSBjb25zdHJ1Y3RvciBub3cgZXhwZWN0cyBub3JtYWxpemVkIGFzIHRoZSB0aGlyZCBhcmd1bWVudC4nICk7XG5cblx0fVxuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBtZXNoUGVyQXR0cmlidXRlIHx8IDE7XG5cbn1cblxuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUsXG5cblx0aXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBzb3VyY2UubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKVx0e1xuXG5cdFx0dmFyIGRhdGEgPSBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0XHRkYXRhLm1lc2hQZXJBdHRyaWJ1dGUgPSB0aGlzLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRkYXRhLmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyR2VvbWV0cnlMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQnVmZmVyR2VvbWV0cnlMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggc2NvcGUucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBqc29uLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgPyBuZXcgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkoKSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0dmFyIGluZGV4ID0ganNvbi5kYXRhLmluZGV4O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgdHlwZWRBcnJheSA9IG5ldyBUWVBFRF9BUlJBWVNbIGluZGV4LnR5cGUgXSggaW5kZXguYXJyYXkgKTtcblx0XHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCB0eXBlZEFycmF5LCAxICkgKTtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGVzID0ganNvbi5kYXRhLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblx0XHRcdHZhciB0eXBlZEFycmF5ID0gbmV3IFRZUEVEX0FSUkFZU1sgYXR0cmlidXRlLnR5cGUgXSggYXR0cmlidXRlLmFycmF5ICk7XG5cdFx0XHR2YXIgYnVmZmVyQXR0cmlidXRlQ29uc3RyID0gYXR0cmlidXRlLmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlID8gSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIDogQnVmZmVyQXR0cmlidXRlO1xuXHRcdFx0dmFyIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBidWZmZXJBdHRyaWJ1dGVDb25zdHIoIHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09IHVuZGVmaW5lZCApIGJ1ZmZlckF0dHJpYnV0ZS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cdFx0XHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoIGtleSwgYnVmZmVyQXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzID0ganNvbi5kYXRhLm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRmb3IgKCB2YXIga2V5IGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHR2YXIgYXR0cmlidXRlQXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleSBdO1xuXG5cdFx0XHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBhdHRyaWJ1dGVBcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVBcnJheVsgaSBdO1xuXHRcdFx0XHRcdHZhciB0eXBlZEFycmF5ID0gbmV3IFRZUEVEX0FSUkFZU1sgYXR0cmlidXRlLnR5cGUgXSggYXR0cmlidXRlLmFycmF5ICk7XG5cblx0XHRcdFx0XHR2YXIgYnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdHlwZWRBcnJheSwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09IHVuZGVmaW5lZCApIGJ1ZmZlckF0dHJpYnV0ZS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cdFx0XHRcdFx0YXJyYXkucHVzaCggYnVmZmVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1sga2V5IF0gPSBhcnJheTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IGpzb24uZGF0YS5ncm91cHMgfHwganNvbi5kYXRhLmRyYXdjYWxscyB8fCBqc29uLmRhdGEub2Zmc2V0cztcblxuXHRcdGlmICggZ3JvdXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGdyb3Vwcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdFx0Z2VvbWV0cnkuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBqc29uLmRhdGEuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlLmNlbnRlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNlbnRlci5mcm9tQXJyYXkoIGJvdW5kaW5nU3BoZXJlLmNlbnRlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSggY2VudGVyLCBib3VuZGluZ1NwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5uYW1lICkgZ2VvbWV0cnkubmFtZSA9IGpzb24ubmFtZTtcblx0XHRpZiAoIGpzb24udXNlckRhdGEgKSBnZW9tZXRyeS51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbnZhciBUWVBFRF9BUlJBWVMgPSB7XG5cdEludDhBcnJheTogSW50OEFycmF5LFxuXHRVaW50OEFycmF5OiBVaW50OEFycmF5LFxuXHQvLyBXb3JrYXJvdW5kIGZvciBJRTExIHByZSBLQjI5Mjk0MzcuIFNlZSAjMTE0NDBcblx0VWludDhDbGFtcGVkQXJyYXk6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OENsYW1wZWRBcnJheSA6IFVpbnQ4QXJyYXksXG5cdEludDE2QXJyYXk6IEludDE2QXJyYXksXG5cdFVpbnQxNkFycmF5OiBVaW50MTZBcnJheSxcblx0SW50MzJBcnJheTogSW50MzJBcnJheSxcblx0VWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxuXHRGbG9hdDMyQXJyYXk6IEZsb2F0MzJBcnJheSxcblx0RmxvYXQ2NEFycmF5OiBGbG9hdDY0QXJyYXlcbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBPYmplY3RMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cdHRoaXMucmVzb3VyY2VQYXRoID0gJyc7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggT2JqZWN0TG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBwYXRoID0gKCB0aGlzLnBhdGggPT09IHVuZGVmaW5lZCApID8gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApIDogdGhpcy5wYXRoO1xuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aDtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHZhciBqc29uID0gbnVsbDtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICE9PSB1bmRlZmluZWQgKSBvbkVycm9yKCBlcnJvciApO1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRTpPYmplY3RMb2FkZXI6IENhblxcJ3QgcGFyc2UgJyArIHVybCArICcuJywgZXJyb3IubWVzc2FnZSApO1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXG5cdFx0XHRpZiAoIG1ldGFkYXRhID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2dlb21ldHJ5JyApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBDYW5cXCd0IGxvYWQgJyArIHVybCApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0c2NvcGUucGFyc2UoIGpzb24sIG9uTG9hZCApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UmVzb3VyY2VQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiwgb25Mb2FkICkge1xuXG5cdFx0dmFyIHNoYXBlcyA9IHRoaXMucGFyc2VTaGFwZSgganNvbi5zaGFwZXMgKTtcblx0XHR2YXIgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xuXG5cdFx0dmFyIGltYWdlcyA9IHRoaXMucGFyc2VJbWFnZXMoIGpzb24uaW1hZ2VzLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSBvbkxvYWQoIG9iamVjdCApO1xuXG5cdFx0fSApO1xuXG5cdFx0dmFyIHRleHR1cmVzID0gdGhpcy5wYXJzZVRleHR1cmVzKCBqc29uLnRleHR1cmVzLCBpbWFnZXMgKTtcblx0XHR2YXIgbWF0ZXJpYWxzID0gdGhpcy5wYXJzZU1hdGVyaWFscygganNvbi5tYXRlcmlhbHMsIHRleHR1cmVzICk7XG5cblx0XHR2YXIgb2JqZWN0ID0gdGhpcy5wYXJzZU9iamVjdCgganNvbi5vYmplY3QsIGdlb21ldHJpZXMsIG1hdGVyaWFscyApO1xuXG5cdFx0aWYgKCBqc29uLmFuaW1hdGlvbnMgKSB7XG5cblx0XHRcdG9iamVjdC5hbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoIGpzb24uYW5pbWF0aW9ucyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmltYWdlcyA9PT0gdW5kZWZpbmVkIHx8IGpzb24uaW1hZ2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIG9uTG9hZCggb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH0sXG5cblx0cGFyc2VTaGFwZTogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dmFyIHNoYXBlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgc2hhcGUgPSBuZXcgU2hhcGUoKS5mcm9tSlNPTigganNvblsgaSBdICk7XG5cblx0XHRcdFx0c2hhcGVzWyBzaGFwZS51dWlkIF0gPSBzaGFwZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNoYXBlcztcblxuXHR9LFxuXG5cdHBhcnNlR2VvbWV0cmllczogZnVuY3Rpb24gKCBqc29uLCBzaGFwZXMgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cmllcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBidWZmZXJHZW9tZXRyeUxvYWRlciA9IG5ldyBCdWZmZXJHZW9tZXRyeUxvYWRlcigpO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGdlb21ldHJ5O1xuXHRcdFx0XHR2YXIgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdQbGFuZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdQbGFuZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGgsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnQm94R2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0JveEJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdDdWJlR2VvbWV0cnknOiAvLyBiYWNrd2FyZHMgY29tcGF0aWJsZVxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS53aWR0aCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXG5cdFx0XHRcdFx0XHRcdGRhdGEuZGVwdGgsXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGhTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXB0aFNlZ21lbnRzXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0NpcmNsZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdDaXJjbGVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5zZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0N5bGluZGVyR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0N5bGluZGVyQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXNUb3AsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzQm90dG9tLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpYWxTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vcGVuRW5kZWQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdDb25lR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0NvbmVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEub3BlbkVuZGVkLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU3BoZXJlR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1NwaGVyZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpTGVuZ3RoLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0RvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdJY29zYWhlZHJvbkdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdPY3RhaGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ09jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVGV0cmFoZWRyb25HZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXRhaWxcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnUmluZ0dlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdSaW5nQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5pbm5lclJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vdXRlclJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaVNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50dWJlLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YnVsYXJTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5hcmNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNLbm90R2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1RvcnVzS25vdEJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YmUsXG5cdFx0XHRcdFx0XHRcdGRhdGEudHVidWxhclNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnAsXG5cdFx0XHRcdFx0XHRcdGRhdGEucVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdUdWJlR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1R1YmVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdC8vIFRoaXMgb25seSB3b3JrcyBmb3IgYnVpbHQtaW4gY3VydmVzIChlLmcuIENhdG11bGxSb21DdXJ2ZTMpLlxuXHRcdFx0XHRcdFx0Ly8gVXNlciBkZWZpbmVkIGN1cnZlcyBvciBpbnN0YW5jZXMgb2YgQ3VydmVQYXRoIHdpbGwgbm90IGJlIGRlc2VyaWFsaXplZC5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRuZXcgQ3VydmVzWyBkYXRhLnBhdGgudHlwZSBdKCkuZnJvbUpTT04oIGRhdGEucGF0aCApLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YnVsYXJTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuY2xvc2VkXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0xhdGhlR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0xhdGhlQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5wb2ludHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuc2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1BvbHloZWRyb25HZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEudmVydGljZXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaW5kaWNlcyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuZGV0YWlsc1xuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdTaGFwZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdTaGFwZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5U2hhcGVzID0gW107XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcblxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5jdXJ2ZVNlZ21lbnRzXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXG5cdFx0XHRcdFx0Y2FzZSAnRXh0cnVkZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdFeHRydWRlQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHR2YXIgZ2VvbWV0cnlTaGFwZXMgPSBbXTtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGRhdGEuc2hhcGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgZGF0YS5zaGFwZXNbIGogXSBdO1xuXG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5U2hhcGVzLnB1c2goIHNoYXBlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGV4dHJ1ZGVQYXRoID0gZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGV4dHJ1ZGVQYXRoICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0ZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gbmV3IEN1cnZlc1sgZXh0cnVkZVBhdGgudHlwZSBdKCkuZnJvbUpTT04oIGV4dHJ1ZGVQYXRoICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5U2hhcGVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLm9wdGlvbnNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnQnVmZmVyR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBidWZmZXJHZW9tZXRyeUxvYWRlci5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0dlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0aWYgKCAnVEhSRUUnIGluIHdpbmRvdyAmJiAnTGVnYWN5SlNPTkxvYWRlcicgaW4gVEhSRUUgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5TG9hZGVyID0gbmV3IFRIUkVFLkxlZ2FjeUpTT05Mb2FkZXIoKTtcblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBnZW9tZXRyeUxvYWRlci5wYXJzZSggZGF0YSwgdGhpcy5yZXNvdXJjZVBhdGggKS5nZW9tZXRyeTtcblxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3RMb2FkZXI6IFlvdSBoYXZlIHRvIGltcG9ydCBMZWdhY3lKU09OTG9hZGVyIGluIG9yZGVyIGxvYWQgZ2VvbWV0cnkgZGF0YSBvZiB0eXBlIFwiR2VvbWV0cnlcIi4nICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuc3VwcG9ydGVkIGdlb21ldHJ5IHR5cGUgXCInICsgZGF0YS50eXBlICsgJ1wiJyApO1xuXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2VvbWV0cnkudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdFx0XHRpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgZ2VvbWV0cnkubmFtZSA9IGRhdGEubmFtZTtcblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ID09PSB0cnVlICYmIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIGdlb21ldHJ5LnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblxuXHRcdFx0XHRnZW9tZXRyaWVzWyBkYXRhLnV1aWQgXSA9IGdlb21ldHJ5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cmllcztcblxuXHR9LFxuXG5cdHBhcnNlTWF0ZXJpYWxzOiBmdW5jdGlvbiAoIGpzb24sIHRleHR1cmVzICkge1xuXG5cdFx0dmFyIGNhY2hlID0ge307IC8vIE11bHRpTWF0ZXJpYWxcblx0XHR2YXIgbWF0ZXJpYWxzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGxvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpO1xuXHRcdFx0bG9hZGVyLnNldFRleHR1cmVzKCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0aWYgKCBkYXRhLnR5cGUgPT09ICdNdWx0aU1hdGVyaWFsJyApIHtcblxuXHRcdFx0XHRcdC8vIERlcHJlY2F0ZWRcblxuXHRcdFx0XHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgZGF0YS5tYXRlcmlhbHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBkYXRhLm1hdGVyaWFsc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGNhY2hlWyBtYXRlcmlhbC51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZVsgbWF0ZXJpYWwudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGFycmF5LnB1c2goIGNhY2hlWyBtYXRlcmlhbC51dWlkIF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1hdGVyaWFsc1sgZGF0YS51dWlkIF0gPSBhcnJheTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBjYWNoZVsgZGF0YS51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Y2FjaGVbIGRhdGEudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtYXRlcmlhbHNbIGRhdGEudXVpZCBdID0gY2FjaGVbIGRhdGEudXVpZCBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGVyaWFscztcblxuXHR9LFxuXG5cdHBhcnNlQW5pbWF0aW9uczogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dmFyIGFuaW1hdGlvbnMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0dmFyIGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdGlmICggZGF0YS51dWlkICE9PSB1bmRlZmluZWQgKSBjbGlwLnV1aWQgPSBkYXRhLnV1aWQ7XG5cblx0XHRcdGFuaW1hdGlvbnMucHVzaCggY2xpcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFuaW1hdGlvbnM7XG5cblx0fSxcblxuXHRwYXJzZUltYWdlczogZnVuY3Rpb24gKCBqc29uLCBvbkxvYWQgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXHRcdHZhciBpbWFnZXMgPSB7fTtcblxuXHRcdGZ1bmN0aW9uIGxvYWRJbWFnZSggdXJsICkge1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHJldHVybiBsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCAmJiBqc29uLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHZhciBtYW5hZ2VyID0gbmV3IExvYWRpbmdNYW5hZ2VyKCBvbkxvYWQgKTtcblxuXHRcdFx0dmFyIGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggbWFuYWdlciApO1xuXHRcdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBqc29uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBpbWFnZSA9IGpzb25bIGkgXTtcblx0XHRcdFx0dmFyIHVybCA9IGltYWdlLnVybDtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xuXG5cdFx0XHRcdFx0Ly8gbG9hZCBhcnJheSBvZiBpbWFnZXMgZS5nIEN1YmVUZXh0dXJlXG5cblx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IHVybC5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGN1cnJlbnRVcmwgPSB1cmxbIGogXTtcblxuXHRcdFx0XHRcdFx0dmFyIHBhdGggPSAvXihcXC9cXC8pfChbYS16XSs6KFxcL1xcLyk/KS9pLnRlc3QoIGN1cnJlbnRVcmwgKSA/IGN1cnJlbnRVcmwgOiBzY29wZS5yZXNvdXJjZVBhdGggKyBjdXJyZW50VXJsO1xuXG5cdFx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXS5wdXNoKCBsb2FkSW1hZ2UoIHBhdGggKSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIHNpbmdsZSBpbWFnZVxuXG5cdFx0XHRcdFx0dmFyIHBhdGggPSAvXihcXC9cXC8pfChbYS16XSs6KFxcL1xcLyk/KS9pLnRlc3QoIGltYWdlLnVybCApID8gaW1hZ2UudXJsIDogc2NvcGUucmVzb3VyY2VQYXRoICsgaW1hZ2UudXJsO1xuXG5cdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBsb2FkSW1hZ2UoIHBhdGggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fSxcblxuXHRwYXJzZVRleHR1cmVzOiBmdW5jdGlvbiAoIGpzb24sIGltYWdlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHBhcnNlQ29uc3RhbnQoIHZhbHVlLCB0eXBlICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSByZXR1cm4gdmFsdWU7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlci5wYXJzZVRleHR1cmU6IENvbnN0YW50IHNob3VsZCBiZSBpbiBudW1lcmljIGZvcm0uJywgdmFsdWUgKTtcblxuXHRcdFx0cmV0dXJuIHR5cGVbIHZhbHVlIF07XG5cblx0XHR9XG5cblx0XHR2YXIgdGV4dHVyZXMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0aWYgKCBkYXRhLmltYWdlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IE5vIFwiaW1hZ2VcIiBzcGVjaWZpZWQgZm9yJywgZGF0YS51dWlkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaW1hZ2VzWyBkYXRhLmltYWdlIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGltYWdlJywgZGF0YS5pbWFnZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdGV4dHVyZTtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGltYWdlc1sgZGF0YS5pbWFnZSBdICkgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCBpbWFnZXNbIGRhdGEuaW1hZ2UgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IFRleHR1cmUoIGltYWdlc1sgZGF0YS5pbWFnZSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdHRleHR1cmUudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdFx0XHRpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5uYW1lID0gZGF0YS5uYW1lO1xuXG5cdFx0XHRcdGlmICggZGF0YS5tYXBwaW5nICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm1hcHBpbmcgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1hcHBpbmcsIFRFWFRVUkVfTUFQUElORyApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5vZmZzZXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUub2Zmc2V0LmZyb21BcnJheSggZGF0YS5vZmZzZXQgKTtcblx0XHRcdFx0aWYgKCBkYXRhLnJlcGVhdCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KCBkYXRhLnJlcGVhdCApO1xuXHRcdFx0XHRpZiAoIGRhdGEuY2VudGVyICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmNlbnRlci5mcm9tQXJyYXkoIGRhdGEuY2VudGVyICk7XG5cdFx0XHRcdGlmICggZGF0YS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5yb3RhdGlvbiA9IGRhdGEucm90YXRpb247XG5cblx0XHRcdFx0aWYgKCBkYXRhLndyYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUud3JhcFMgPSBwYXJzZUNvbnN0YW50KCBkYXRhLndyYXBbIDAgXSwgVEVYVFVSRV9XUkFQUElORyApO1xuXHRcdFx0XHRcdHRleHR1cmUud3JhcFQgPSBwYXJzZUNvbnN0YW50KCBkYXRhLndyYXBbIDEgXSwgVEVYVFVSRV9XUkFQUElORyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRhdGEuZm9ybWF0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmZvcm1hdCA9IGRhdGEuZm9ybWF0O1xuXHRcdFx0XHRpZiAoIGRhdGEudHlwZSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS50eXBlID0gZGF0YS50eXBlO1xuXHRcdFx0XHRpZiAoIGRhdGEuZW5jb2RpbmcgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZW5jb2RpbmcgPSBkYXRhLmVuY29kaW5nO1xuXG5cdFx0XHRcdGlmICggZGF0YS5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWluRmlsdGVyID0gcGFyc2VDb25zdGFudCggZGF0YS5taW5GaWx0ZXIsIFRFWFRVUkVfRklMVEVSICk7XG5cdFx0XHRcdGlmICggZGF0YS5tYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFnRmlsdGVyID0gcGFyc2VDb25zdGFudCggZGF0YS5tYWdGaWx0ZXIsIFRFWFRVUkVfRklMVEVSICk7XG5cdFx0XHRcdGlmICggZGF0YS5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmFuaXNvdHJvcHkgPSBkYXRhLmFuaXNvdHJvcHk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZsaXBZICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmZsaXBZID0gZGF0YS5mbGlwWTtcblxuXHRcdFx0XHRpZiAoIGRhdGEucHJlbXVsdGlwbHlBbHBoYSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhID0gZGF0YS5wcmVtdWx0aXBseUFscGhhO1xuXHRcdFx0XHRpZiAoIGRhdGEudW5wYWNrQWxpZ25tZW50ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnVucGFja0FsaWdubWVudCA9IGRhdGEudW5wYWNrQWxpZ25tZW50O1xuXG5cdFx0XHRcdHRleHR1cmVzWyBkYXRhLnV1aWQgXSA9IHRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlcztcblxuXHR9LFxuXG5cdHBhcnNlT2JqZWN0OiBmdW5jdGlvbiAoIGRhdGEsIGdlb21ldHJpZXMsIG1hdGVyaWFscyApIHtcblxuXHRcdHZhciBvYmplY3Q7XG5cblx0XHRmdW5jdGlvbiBnZXRHZW9tZXRyeSggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBnZW9tZXRyaWVzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBnZW9tZXRyeScsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZ2VvbWV0cmllc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0TWF0ZXJpYWwoIG5hbWUgKSB7XG5cblx0XHRcdGlmICggbmFtZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cblx0XHRcdFx0dmFyIGFycmF5ID0gW107XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbmFtZS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHV1aWQgPSBuYW1lWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsc1sgdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgdXVpZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWxzWyB1dWlkIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGFycmF5O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdGNhc2UgJ1NjZW5lJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU2NlbmUoKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuYmFja2dyb3VuZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBOdW1iZXIuaXNJbnRlZ2VyKCBkYXRhLmJhY2tncm91bmQgKSApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmJhY2tncm91bmQgPSBuZXcgQ29sb3IoIGRhdGEuYmFja2dyb3VuZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRhdGEuZm9nICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2cnICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuZm9nID0gbmV3IEZvZyggZGF0YS5mb2cuY29sb3IsIGRhdGEuZm9nLm5lYXIsIGRhdGEuZm9nLmZhciApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggZGF0YS5mb2cudHlwZSA9PT0gJ0ZvZ0V4cDInICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuZm9nID0gbmV3IEZvZ0V4cDIoIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5kZW5zaXR5ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQZXJzcGVjdGl2ZUNhbWVyYSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBkYXRhLmZvdiwgZGF0YS5hc3BlY3QsIGRhdGEubmVhciwgZGF0YS5mYXIgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuZm9jdXMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5mb2N1cyA9IGRhdGEuZm9jdXM7XG5cdFx0XHRcdGlmICggZGF0YS56b29tICE9PSB1bmRlZmluZWQgKSBvYmplY3Quem9vbSA9IGRhdGEuem9vbTtcblx0XHRcdFx0aWYgKCBkYXRhLmZpbG1HYXVnZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZpbG1HYXVnZSA9IGRhdGEuZmlsbUdhdWdlO1xuXHRcdFx0XHRpZiAoIGRhdGEuZmlsbU9mZnNldCAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZpbG1PZmZzZXQgPSBkYXRhLmZpbG1PZmZzZXQ7XG5cdFx0XHRcdGlmICggZGF0YS52aWV3ICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCBkYXRhLnZpZXcgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnT3J0aG9ncmFwaGljQ2FtZXJhJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCBkYXRhLmxlZnQsIGRhdGEucmlnaHQsIGRhdGEudG9wLCBkYXRhLmJvdHRvbSwgZGF0YS5uZWFyLCBkYXRhLmZhciApO1xuXG5cdFx0XHRcdGlmICggZGF0YS56b29tICE9PSB1bmRlZmluZWQgKSBvYmplY3Quem9vbSA9IGRhdGEuem9vbTtcblx0XHRcdFx0aWYgKCBkYXRhLnZpZXcgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIGRhdGEudmlldyApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdBbWJpZW50TGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBBbWJpZW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0RpcmVjdGlvbmFsTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQb2ludExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUG9pbnRMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEuZGlzdGFuY2UsIGRhdGEuZGVjYXkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUmVjdEFyZWFMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFJlY3RBcmVhTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLndpZHRoLCBkYXRhLmhlaWdodCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdTcG90TGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTcG90TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmFuZ2xlLCBkYXRhLnBlbnVtYnJhLCBkYXRhLmRlY2F5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEhlbWlzcGhlcmVMaWdodCggZGF0YS5jb2xvciwgZGF0YS5ncm91bmRDb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU2tpbm5lZE1lc2gnOlxuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlci5wYXJzZU9iamVjdCgpIGRvZXMgbm90IHN1cHBvcnQgU2tpbm5lZE1lc2ggeWV0LicgKTtcblxuXHRcdFx0Y2FzZSAnTWVzaCc6XG5cblx0XHRcdFx0dmFyIGdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKTtcblx0XHRcdFx0dmFyIG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmJvbmVzICYmIGdlb21ldHJ5LmJvbmVzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRvYmplY3QgPSBuZXcgU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRvYmplY3QgPSBuZXcgTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGF0YS5kcmF3TW9kZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNldERyYXdNb2RlKCBkYXRhLmRyYXdNb2RlICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xPRCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExPRCgpO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaW5lJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZSggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSwgZGF0YS5tb2RlICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpbmVMb29wJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZUxvb3AoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZVNlZ21lbnRzJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZVNlZ21lbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BvaW50Q2xvdWQnOlxuXHRcdFx0Y2FzZSAnUG9pbnRzJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUG9pbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1Nwcml0ZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNwcml0ZSggZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdHcm91cCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEdyb3VwKCk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHR9XG5cblx0XHRvYmplY3QudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSBvYmplY3QubmFtZSA9IGRhdGEubmFtZTtcblxuXHRcdGlmICggZGF0YS5tYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2JqZWN0Lm1hdHJpeC5mcm9tQXJyYXkoIGRhdGEubWF0cml4ICk7XG5cblx0XHRcdGlmICggZGF0YS5tYXRyaXhBdXRvVXBkYXRlICE9PSB1bmRlZmluZWQgKSBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGRhdGEubWF0cml4QXV0b1VwZGF0ZTtcblx0XHRcdGlmICggb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgKSBvYmplY3QubWF0cml4LmRlY29tcG9zZSggb2JqZWN0LnBvc2l0aW9uLCBvYmplY3QucXVhdGVybmlvbiwgb2JqZWN0LnNjYWxlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRhdGEucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5wb3NpdGlvbi5mcm9tQXJyYXkoIGRhdGEucG9zaXRpb24gKTtcblx0XHRcdGlmICggZGF0YS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJvdGF0aW9uLmZyb21BcnJheSggZGF0YS5yb3RhdGlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnF1YXRlcm5pb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5xdWF0ZXJuaW9uLmZyb21BcnJheSggZGF0YS5xdWF0ZXJuaW9uICk7XG5cdFx0XHRpZiAoIGRhdGEuc2NhbGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zY2FsZS5mcm9tQXJyYXkoIGRhdGEuc2NhbGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS5jYXN0U2hhZG93ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuY2FzdFNoYWRvdyA9IGRhdGEuY2FzdFNoYWRvdztcblx0XHRpZiAoIGRhdGEucmVjZWl2ZVNoYWRvdyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSBkYXRhLnJlY2VpdmVTaGFkb3c7XG5cblx0XHRpZiAoIGRhdGEuc2hhZG93ICkge1xuXG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LmJpYXMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cuYmlhcyA9IGRhdGEuc2hhZG93LmJpYXM7XG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LnJhZGl1cyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5yYWRpdXMgPSBkYXRhLnNoYWRvdy5yYWRpdXM7XG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93Lm1hcFNpemUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cubWFwU2l6ZS5mcm9tQXJyYXkoIGRhdGEuc2hhZG93Lm1hcFNpemUgKTtcblx0XHRcdGlmICggZGF0YS5zaGFkb3cuY2FtZXJhICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LmNhbWVyYSA9IHRoaXMucGFyc2VPYmplY3QoIGRhdGEuc2hhZG93LmNhbWVyYSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLnZpc2libGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aXNpYmxlID0gZGF0YS52aXNpYmxlO1xuXHRcdGlmICggZGF0YS5mcnVzdHVtQ3VsbGVkICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGRhdGEuZnJ1c3R1bUN1bGxlZDtcblx0XHRpZiAoIGRhdGEucmVuZGVyT3JkZXIgIT09IHVuZGVmaW5lZCApIG9iamVjdC5yZW5kZXJPcmRlciA9IGRhdGEucmVuZGVyT3JkZXI7XG5cdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBvYmplY3QudXNlckRhdGEgPSBkYXRhLnVzZXJEYXRhO1xuXHRcdGlmICggZGF0YS5sYXllcnMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5sYXllcnMubWFzayA9IGRhdGEubGF5ZXJzO1xuXG5cdFx0aWYgKCBkYXRhLmNoaWxkcmVuICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBjaGlsZHJlbiA9IGRhdGEuY2hpbGRyZW47XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRvYmplY3QuYWRkKCB0aGlzLnBhcnNlT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMgKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEudHlwZSA9PT0gJ0xPRCcgKSB7XG5cblx0XHRcdHZhciBsZXZlbHMgPSBkYXRhLmxldmVscztcblxuXHRcdFx0Zm9yICggdmFyIGwgPSAwOyBsIDwgbGV2ZWxzLmxlbmd0aDsgbCArKyApIHtcblxuXHRcdFx0XHR2YXIgbGV2ZWwgPSBsZXZlbHNbIGwgXTtcblx0XHRcdFx0dmFyIGNoaWxkID0gb2JqZWN0LmdldE9iamVjdEJ5UHJvcGVydHkoICd1dWlkJywgbGV2ZWwub2JqZWN0ICk7XG5cblx0XHRcdFx0aWYgKCBjaGlsZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LmFkZExldmVsKCBjaGlsZCwgbGV2ZWwuZGlzdGFuY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG59ICk7XG5cbnZhciBURVhUVVJFX01BUFBJTkcgPSB7XG5cdFVWTWFwcGluZzogVVZNYXBwaW5nLFxuXHRDdWJlUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVSZWZsZWN0aW9uTWFwcGluZyxcblx0Q3ViZVJlZnJhY3Rpb25NYXBwaW5nOiBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsXG5cdEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyxcblx0RXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLFxuXHRTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzogU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmcmFjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nXG59O1xuXG52YXIgVEVYVFVSRV9XUkFQUElORyA9IHtcblx0UmVwZWF0V3JhcHBpbmc6IFJlcGVhdFdyYXBwaW5nLFxuXHRDbGFtcFRvRWRnZVdyYXBwaW5nOiBDbGFtcFRvRWRnZVdyYXBwaW5nLFxuXHRNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOiBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nXG59O1xuXG52YXIgVEVYVFVSRV9GSUxURVIgPSB7XG5cdE5lYXJlc3RGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyOiBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcixcblx0TmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcjogTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcixcblx0TGluZWFyRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXI6IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdExpbmVhck1pcG1hcExpbmVhckZpbHRlcjogTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyXG59O1xuXG4vKipcbiAqIEBhdXRob3IgdGhlc3BpdGUgLyBodHRwOi8vY2xpY2t0b3JlbGVhc2UuY29tL1xuICovXG5cblxuZnVuY3Rpb24gSW1hZ2VCaXRtYXBMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0aWYgKCB0eXBlb2YgY3JlYXRlSW1hZ2VCaXRtYXAgPT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGNyZWF0ZUltYWdlQml0bWFwKCkgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlQml0bWFwTG9hZGVyOiBmZXRjaCgpIG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdH1cblxuXHR0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyICE9PSB1bmRlZmluZWQgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXHR0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG5cbn1cblxuSW1hZ2VCaXRtYXBMb2FkZXIucHJvdG90eXBlID0ge1xuXG5cdGNvbnN0cnVjdG9yOiBJbWFnZUJpdG1hcExvYWRlcixcblxuXHRzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKCBvcHRpb25zICkge1xuXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB1cmwgPSAnJztcblxuXHRcdGlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7XG5cblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGNhY2hlZCA9IENhY2hlLmdldCggdXJsICk7XG5cblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0ZmV0Y2goIHVybCApLnRoZW4oIGZ1bmN0aW9uICggcmVzICkge1xuXG5cdFx0XHRyZXR1cm4gcmVzLmJsb2IoKTtcblxuXHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIGJsb2IgKSB7XG5cblx0XHRcdGlmICggc2NvcGUub3B0aW9ucyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIFdvcmthcm91bmQgZm9yIEZpcmVGb3guIEl0IGNhdXNlcyBhbiBlcnJvciBpZiB5b3UgcGFzcyBvcHRpb25zLlxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoIGJsb2IgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoIGJsb2IsIHNjb3BlLm9wdGlvbnMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSApLnRoZW4oIGZ1bmN0aW9uICggaW1hZ2VCaXRtYXAgKSB7XG5cblx0XHRcdENhY2hlLmFkZCggdXJsLCBpbWFnZUJpdG1hcCApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggaW1hZ2VCaXRtYXAgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH0gKS5jYXRjaCggZnVuY3Rpb24gKCBlICkge1xuXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9ICk7XG5cblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBtaW5pbWFsIGNsYXNzIGZvciBwcm94aW5nIGZ1bmN0aW9ucyB0byBQYXRoLiBSZXBsYWNlcyBvbGQgXCJleHRyYWN0U3VicGF0aHMoKVwiXG4gKiovXG5cbmZ1bmN0aW9uIFNoYXBlUGF0aCgpIHtcblxuXHR0aGlzLnR5cGUgPSAnU2hhcGVQYXRoJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCk7XG5cblx0dGhpcy5zdWJQYXRocyA9IFtdO1xuXHR0aGlzLmN1cnJlbnRQYXRoID0gbnVsbDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBTaGFwZVBhdGgucHJvdG90eXBlLCB7XG5cblx0bW92ZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoID0gbmV3IFBhdGgoKTtcblx0XHR0aGlzLnN1YlBhdGhzLnB1c2goIHRoaXMuY3VycmVudFBhdGggKTtcblx0XHR0aGlzLmN1cnJlbnRQYXRoLm1vdmVUbyggeCwgeSApO1xuXG5cdH0sXG5cblx0bGluZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLmxpbmVUbyggeCwgeSApO1xuXG5cdH0sXG5cblx0cXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1B4LCBhQ1B5LCBhWCwgYVkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLnF1YWRyYXRpY0N1cnZlVG8oIGFDUHgsIGFDUHksIGFYLCBhWSApO1xuXG5cdH0sXG5cblx0YmV6aWVyQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5iZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICk7XG5cblx0fSxcblxuXHRzcGxpbmVUaHJ1OiBmdW5jdGlvbiAoIHB0cyApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGguc3BsaW5lVGhydSggcHRzICk7XG5cblx0fSxcblxuXHR0b1NoYXBlczogZnVuY3Rpb24gKCBpc0NDVywgbm9Ib2xlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHRvU2hhcGVzTm9Ib2xlcyggaW5TdWJwYXRocyApIHtcblxuXHRcdFx0dmFyIHNoYXBlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBpblN1YnBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHRtcFBhdGggPSBpblN1YnBhdGhzWyBpIF07XG5cblx0XHRcdFx0dmFyIHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XG5cdFx0XHRcdHRtcFNoYXBlLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXG5cdFx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpc1BvaW50SW5zaWRlUG9seWdvbiggaW5QdCwgaW5Qb2x5Z29uICkge1xuXG5cdFx0XHR2YXIgcG9seUxlbiA9IGluUG9seWdvbi5sZW5ndGg7XG5cblx0XHRcdC8vIGluUHQgb24gcG9seWdvbiBjb250b3VyID0+IGltbWVkaWF0ZSBzdWNjZXNzICAgIG9yXG5cdFx0XHQvLyB0b2dnbGluZyBvZiBpbnNpZGUvb3V0c2lkZSBhdCBldmVyeSBzaW5nbGUhIGludGVyc2VjdGlvbiBwb2ludCBvZiBhbiBlZGdlXG5cdFx0XHQvLyAgd2l0aCB0aGUgaG9yaXpvbnRhbCBsaW5lIHRocm91Z2ggaW5QdCwgbGVmdCBvZiBpblB0XG5cdFx0XHQvLyAgbm90IGNvdW50aW5nIGxvd2VyWSBlbmRwb2ludHMgb2YgZWRnZXMgYW5kIHdob2xlIGVkZ2VzIG9uIHRoYXQgbGluZVxuXHRcdFx0dmFyIGluc2lkZSA9IGZhbHNlO1xuXHRcdFx0Zm9yICggdmFyIHAgPSBwb2x5TGVuIC0gMSwgcSA9IDA7IHEgPCBwb2x5TGVuOyBwID0gcSArKyApIHtcblxuXHRcdFx0XHR2YXIgZWRnZUxvd1B0ID0gaW5Qb2x5Z29uWyBwIF07XG5cdFx0XHRcdHZhciBlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBxIF07XG5cblx0XHRcdFx0dmFyIGVkZ2VEeCA9IGVkZ2VIaWdoUHQueCAtIGVkZ2VMb3dQdC54O1xuXHRcdFx0XHR2YXIgZWRnZUR5ID0gZWRnZUhpZ2hQdC55IC0gZWRnZUxvd1B0Lnk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggZWRnZUR5ICkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdC8vIG5vdCBwYXJhbGxlbFxuXHRcdFx0XHRcdGlmICggZWRnZUR5IDwgMCApIHtcblxuXHRcdFx0XHRcdFx0ZWRnZUxvd1B0ID0gaW5Qb2x5Z29uWyBxIF07IGVkZ2VEeCA9IC0gZWRnZUR4O1xuXHRcdFx0XHRcdFx0ZWRnZUhpZ2hQdCA9IGluUG9seWdvblsgcCBdOyBlZGdlRHkgPSAtIGVkZ2VEeTtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoICggaW5QdC55IDwgZWRnZUxvd1B0LnkgKSB8fCAoIGluUHQueSA+IGVkZ2VIaWdoUHQueSApICkgXHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0aWYgKCBpblB0LnkgPT09IGVkZ2VMb3dQdC55ICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGluUHQueCA9PT0gZWRnZUxvd1B0LnggKVx0XHRyZXR1cm5cdHRydWU7XHRcdC8vIGluUHQgaXMgb24gY29udG91ciA/XG5cdFx0XHRcdFx0XHQvLyBjb250aW51ZTtcdFx0XHRcdC8vIG5vIGludGVyc2VjdGlvbiBvciBlZGdlTG93UHQgPT4gZG9lc24ndCBjb3VudCAhISFcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHZhciBwZXJwRWRnZSA9IGVkZ2VEeSAqICggaW5QdC54IC0gZWRnZUxvd1B0LnggKSAtIGVkZ2VEeCAqICggaW5QdC55IC0gZWRnZUxvd1B0LnkgKTtcblx0XHRcdFx0XHRcdGlmICggcGVycEVkZ2UgPT09IDAgKVx0XHRcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xuXHRcdFx0XHRcdFx0aWYgKCBwZXJwRWRnZSA8IDAgKSBcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0aW5zaWRlID0gISBpbnNpZGU7XHRcdC8vIHRydWUgaW50ZXJzZWN0aW9uIGxlZnQgb2YgaW5QdFxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBwYXJhbGxlbCBvciBjb2xsaW5lYXJcblx0XHRcdFx0XHRpZiAoIGluUHQueSAhPT0gZWRnZUxvd1B0LnkgKSBcdFx0Y29udGludWU7XHRcdFx0Ly8gcGFyYWxsZWxcblx0XHRcdFx0XHQvLyBlZGdlIGxpZXMgb24gdGhlIHNhbWUgaG9yaXpvbnRhbCBsaW5lIGFzIGluUHRcblx0XHRcdFx0XHRpZiAoICggKCBlZGdlSGlnaFB0LnggPD0gaW5QdC54ICkgJiYgKCBpblB0LnggPD0gZWRnZUxvd1B0LnggKSApIHx8XG5cdFx0XHRcdFx0XHQgKCAoIGVkZ2VMb3dQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VIaWdoUHQueCApICkgKVx0XHRyZXR1cm5cdHRydWU7XHQvLyBpblB0OiBQb2ludCBvbiBjb250b3VyICFcblx0XHRcdFx0XHQvLyBjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuXHRpbnNpZGU7XG5cblx0XHR9XG5cblx0XHR2YXIgaXNDbG9ja1dpc2UgPSBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlO1xuXG5cdFx0dmFyIHN1YlBhdGhzID0gdGhpcy5zdWJQYXRocztcblx0XHRpZiAoIHN1YlBhdGhzLmxlbmd0aCA9PT0gMCApIHJldHVybiBbXTtcblxuXHRcdGlmICggbm9Ib2xlcyA9PT0gdHJ1ZSApXHRyZXR1cm5cdHRvU2hhcGVzTm9Ib2xlcyggc3ViUGF0aHMgKTtcblxuXG5cdFx0dmFyIHNvbGlkLCB0bXBQYXRoLCB0bXBTaGFwZSwgc2hhcGVzID0gW107XG5cblx0XHRpZiAoIHN1YlBhdGhzLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdFx0dG1wUGF0aCA9IHN1YlBhdGhzWyAwIF07XG5cdFx0XHR0bXBTaGFwZSA9IG5ldyBTaGFwZSgpO1xuXHRcdFx0dG1wU2hhcGUuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XG5cdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcblx0XHRcdHJldHVybiBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHR2YXIgaG9sZXNGaXJzdCA9ICEgaXNDbG9ja1dpc2UoIHN1YlBhdGhzWyAwIF0uZ2V0UG9pbnRzKCkgKTtcblx0XHRob2xlc0ZpcnN0ID0gaXNDQ1cgPyAhIGhvbGVzRmlyc3QgOiBob2xlc0ZpcnN0O1xuXG5cdFx0Ly8gY29uc29sZS5sb2coXCJIb2xlcyBmaXJzdFwiLCBob2xlc0ZpcnN0KTtcblxuXHRcdHZhciBiZXR0ZXJTaGFwZUhvbGVzID0gW107XG5cdFx0dmFyIG5ld1NoYXBlcyA9IFtdO1xuXHRcdHZhciBuZXdTaGFwZUhvbGVzID0gW107XG5cdFx0dmFyIG1haW5JZHggPSAwO1xuXHRcdHZhciB0bXBQb2ludHM7XG5cblx0XHRuZXdTaGFwZXNbIG1haW5JZHggXSA9IHVuZGVmaW5lZDtcblx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0gPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHN1YlBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRtcFBhdGggPSBzdWJQYXRoc1sgaSBdO1xuXHRcdFx0dG1wUG9pbnRzID0gdG1wUGF0aC5nZXRQb2ludHMoKTtcblx0XHRcdHNvbGlkID0gaXNDbG9ja1dpc2UoIHRtcFBvaW50cyApO1xuXHRcdFx0c29saWQgPSBpc0NDVyA/ICEgc29saWQgOiBzb2xpZDtcblxuXHRcdFx0aWYgKCBzb2xpZCApIHtcblxuXHRcdFx0XHRpZiAoICggISBob2xlc0ZpcnN0ICkgJiYgKCBuZXdTaGFwZXNbIG1haW5JZHggXSApIClcdG1haW5JZHggKys7XG5cblx0XHRcdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0gPSB7IHM6IG5ldyBTaGFwZSgpLCBwOiB0bXBQb2ludHMgfTtcblx0XHRcdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0ucy5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblxuXHRcdFx0XHRpZiAoIGhvbGVzRmlyc3QgKVx0bWFpbklkeCArKztcblx0XHRcdFx0bmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdID0gW107XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnY3cnLCBpKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0ucHVzaCggeyBoOiB0bXBQYXRoLCBwOiB0bXBQb2ludHNbIDAgXSB9ICk7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnY2N3JywgaSk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIG9ubHkgSG9sZXM/IC0+IHByb2JhYmx5IGFsbCBTaGFwZXMgd2l0aCB3cm9uZyBvcmllbnRhdGlvblxuXHRcdGlmICggISBuZXdTaGFwZXNbIDAgXSApXHRyZXR1cm5cdHRvU2hhcGVzTm9Ib2xlcyggc3ViUGF0aHMgKTtcblxuXG5cdFx0aWYgKCBuZXdTaGFwZXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0dmFyIGFtYmlndW91cyA9IGZhbHNlO1xuXHRcdFx0dmFyIHRvQ2hhbmdlID0gW107XG5cblx0XHRcdGZvciAoIHZhciBzSWR4ID0gMCwgc0xlbiA9IG5ld1NoYXBlcy5sZW5ndGg7IHNJZHggPCBzTGVuOyBzSWR4ICsrICkge1xuXG5cdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHNJZHggXSA9IFtdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBzSWR4ID0gMCwgc0xlbiA9IG5ld1NoYXBlcy5sZW5ndGg7IHNJZHggPCBzTGVuOyBzSWR4ICsrICkge1xuXG5cdFx0XHRcdHZhciBzaG8gPSBuZXdTaGFwZUhvbGVzWyBzSWR4IF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGhJZHggPSAwOyBoSWR4IDwgc2hvLmxlbmd0aDsgaElkeCArKyApIHtcblxuXHRcdFx0XHRcdHZhciBobyA9IHNob1sgaElkeCBdO1xuXHRcdFx0XHRcdHZhciBob2xlX3VuYXNzaWduZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIHMySWR4ID0gMDsgczJJZHggPCBuZXdTaGFwZXMubGVuZ3RoOyBzMklkeCArKyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBpc1BvaW50SW5zaWRlUG9seWdvbiggaG8ucCwgbmV3U2hhcGVzWyBzMklkeCBdLnAgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHNJZHggIT09IHMySWR4IClcdHRvQ2hhbmdlLnB1c2goIHsgZnJvbXM6IHNJZHgsIHRvczogczJJZHgsIGhvbGU6IGhJZHggfSApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGhvbGVfdW5hc3NpZ25lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGhvbGVfdW5hc3NpZ25lZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHMySWR4IF0ucHVzaCggaG8gKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0YW1iaWd1b3VzID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIGhvbGVfdW5hc3NpZ25lZCApIHtcblxuXHRcdFx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdLnB1c2goIGhvICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhcImFtYmlndW91czogXCIsIGFtYmlndW91cyk7XG5cdFx0XHRpZiAoIHRvQ2hhbmdlLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJ0byBjaGFuZ2U6IFwiLCB0b0NoYW5nZSk7XG5cdFx0XHRcdGlmICggISBhbWJpZ3VvdXMgKVx0bmV3U2hhcGVIb2xlcyA9IGJldHRlclNoYXBlSG9sZXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciB0bXBIb2xlcztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBuZXdTaGFwZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRtcFNoYXBlID0gbmV3U2hhcGVzWyBpIF0ucztcblx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXHRcdFx0dG1wSG9sZXMgPSBuZXdTaGFwZUhvbGVzWyBpIF07XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSB0bXBIb2xlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR0bXBTaGFwZS5ob2xlcy5wdXNoKCB0bXBIb2xlc1sgaiBdLmggKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9jb25zb2xlLmxvZyhcInNoYXBlXCIsIHNoYXBlcyk7XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBGb250KCBkYXRhICkge1xuXG5cdHRoaXMudHlwZSA9ICdGb250JztcblxuXHR0aGlzLmRhdGEgPSBkYXRhO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZvbnQucHJvdG90eXBlLCB7XG5cblx0aXNGb250OiB0cnVlLFxuXG5cdGdlbmVyYXRlU2hhcGVzOiBmdW5jdGlvbiAoIHRleHQsIHNpemUgKSB7XG5cblx0XHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxMDA7XG5cblx0XHR2YXIgc2hhcGVzID0gW107XG5cdFx0dmFyIHBhdGhzID0gY3JlYXRlUGF0aHMoIHRleHQsIHNpemUsIHRoaXMuZGF0YSApO1xuXG5cdFx0Zm9yICggdmFyIHAgPSAwLCBwbCA9IHBhdGhzLmxlbmd0aDsgcCA8IHBsOyBwICsrICkge1xuXG5cdFx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSggc2hhcGVzLCBwYXRoc1sgcCBdLnRvU2hhcGVzKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzaGFwZXM7XG5cblx0fVxuXG59ICk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGhzKCB0ZXh0LCBzaXplLCBkYXRhICkge1xuXG5cdHZhciBjaGFycyA9IEFycmF5LmZyb20gPyBBcnJheS5mcm9tKCB0ZXh0ICkgOiBTdHJpbmcoIHRleHQgKS5zcGxpdCggJycgKTsgLy8gc2VlICMxMzk4OFxuXHR2YXIgc2NhbGUgPSBzaXplIC8gZGF0YS5yZXNvbHV0aW9uO1xuXHR2YXIgbGluZV9oZWlnaHQgPSAoIGRhdGEuYm91bmRpbmdCb3gueU1heCAtIGRhdGEuYm91bmRpbmdCb3gueU1pbiArIGRhdGEudW5kZXJsaW5lVGhpY2tuZXNzICkgKiBzY2FsZTtcblxuXHR2YXIgcGF0aHMgPSBbXTtcblxuXHR2YXIgb2Zmc2V0WCA9IDAsIG9mZnNldFkgPSAwO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdHZhciBjaGFyID0gY2hhcnNbIGkgXTtcblxuXHRcdGlmICggY2hhciA9PT0gJ1xcbicgKSB7XG5cblx0XHRcdG9mZnNldFggPSAwO1xuXHRcdFx0b2Zmc2V0WSAtPSBsaW5lX2hlaWdodDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciByZXQgPSBjcmVhdGVQYXRoKCBjaGFyLCBzY2FsZSwgb2Zmc2V0WCwgb2Zmc2V0WSwgZGF0YSApO1xuXHRcdFx0b2Zmc2V0WCArPSByZXQub2Zmc2V0WDtcblx0XHRcdHBhdGhzLnB1c2goIHJldC5wYXRoICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBwYXRocztcblxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRoKCBjaGFyLCBzY2FsZSwgb2Zmc2V0WCwgb2Zmc2V0WSwgZGF0YSApIHtcblxuXHR2YXIgZ2x5cGggPSBkYXRhLmdseXBoc1sgY2hhciBdIHx8IGRhdGEuZ2x5cGhzWyAnPycgXTtcblxuXHRpZiAoICEgZ2x5cGggKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRm9udDogY2hhcmFjdGVyIFwiJyArIGNoYXIgKyAnXCIgZG9lcyBub3QgZXhpc3RzIGluIGZvbnQgZmFtaWx5ICcgKyBkYXRhLmZhbWlseU5hbWUgKyAnLicgKTtcblxuXHRcdHJldHVybjtcblxuXHR9XG5cblx0dmFyIHBhdGggPSBuZXcgU2hhcGVQYXRoKCk7XG5cblx0dmFyIHgsIHksIGNweCwgY3B5LCBjcHgxLCBjcHkxLCBjcHgyLCBjcHkyO1xuXG5cdGlmICggZ2x5cGgubyApIHtcblxuXHRcdHZhciBvdXRsaW5lID0gZ2x5cGguX2NhY2hlZE91dGxpbmUgfHwgKCBnbHlwaC5fY2FjaGVkT3V0bGluZSA9IGdseXBoLm8uc3BsaXQoICcgJyApICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBvdXRsaW5lLmxlbmd0aDsgaSA8IGw7ICkge1xuXG5cdFx0XHR2YXIgYWN0aW9uID0gb3V0bGluZVsgaSArKyBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBhY3Rpb24gKSB7XG5cblx0XHRcdFx0Y2FzZSAnbSc6IC8vIG1vdmVUb1xuXG5cdFx0XHRcdFx0eCA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHR5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5tb3ZlVG8oIHgsIHkgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2wnOiAvLyBsaW5lVG9cblxuXHRcdFx0XHRcdHggPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0eSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblxuXHRcdFx0XHRcdHBhdGgubGluZVRvKCB4LCB5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdxJzogLy8gcXVhZHJhdGljQ3VydmVUb1xuXG5cdFx0XHRcdFx0Y3B4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRjcHgxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweTEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cblx0XHRcdFx0XHRwYXRoLnF1YWRyYXRpY0N1cnZlVG8oIGNweDEsIGNweTEsIGNweCwgY3B5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdiJzogLy8gYmV6aWVyQ3VydmVUb1xuXG5cdFx0XHRcdFx0Y3B4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRjcHgxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweTEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cdFx0XHRcdFx0Y3B4MiA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHRjcHkyID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5iZXppZXJDdXJ2ZVRvKCBjcHgxLCBjcHkxLCBjcHgyLCBjcHkyLCBjcHgsIGNweSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHsgb2Zmc2V0WDogZ2x5cGguaGEgKiBzY2FsZSwgcGF0aDogcGF0aCB9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBGb250TG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZvbnRMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHZhciBqc29uO1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKCB0ZXh0ICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZvbnRMb2FkZXI6IHR5cGVmYWNlLmpzIHN1cHBvcnQgaXMgYmVpbmcgZGVwcmVjYXRlZC4gVXNlIHR5cGVmYWNlLmpzb24gaW5zdGVhZC4nICk7XG5cdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKCB0ZXh0LnN1YnN0cmluZyggNjUsIHRleHQubGVuZ3RoIC0gMiApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGZvbnQgPSBzY29wZS5wYXJzZSgganNvbiApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggZm9udCApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHJldHVybiBuZXcgRm9udCgganNvbiApO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gTG9hZGVyKCkge31cblxuTG9hZGVyLkhhbmRsZXJzID0ge1xuXG5cdGhhbmRsZXJzOiBbXSxcblxuXHRhZGQ6IGZ1bmN0aW9uICggcmVnZXgsIGxvYWRlciApIHtcblxuXHRcdHRoaXMuaGFuZGxlcnMucHVzaCggcmVnZXgsIGxvYWRlciApO1xuXG5cdH0sXG5cblx0Z2V0OiBmdW5jdGlvbiAoIGZpbGUgKSB7XG5cblx0XHR2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHR2YXIgcmVnZXggPSBoYW5kbGVyc1sgaSBdO1xuXHRcdFx0dmFyIGxvYWRlciA9IGhhbmRsZXJzWyBpICsgMSBdO1xuXG5cdFx0XHRpZiAoIHJlZ2V4LnRlc3QoIGZpbGUgKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbG9hZGVyO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cbn07XG5cbk9iamVjdC5hc3NpZ24oIExvYWRlci5wcm90b3R5cGUsIHtcblxuXHRjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG5cblx0b25Mb2FkU3RhcnQ6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdG9uTG9hZFByb2dyZXNzOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRvbkxvYWRDb21wbGV0ZTogZnVuY3Rpb24gKCkge30sXG5cblx0aW5pdE1hdGVyaWFsczogZnVuY3Rpb24gKCBtYXRlcmlhbHMsIHRleHR1cmVQYXRoLCBjcm9zc09yaWdpbiApIHtcblxuXHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbWF0ZXJpYWxzLmxlbmd0aDsgKysgaSApIHtcblxuXHRcdFx0YXJyYXlbIGkgXSA9IHRoaXMuY3JlYXRlTWF0ZXJpYWwoIG1hdGVyaWFsc1sgaSBdLCB0ZXh0dXJlUGF0aCwgY3Jvc3NPcmlnaW4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdGNyZWF0ZU1hdGVyaWFsOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBCbGVuZGluZ01vZGUgPSB7XG5cdFx0XHROb0JsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdFx0Tm9ybWFsQmxlbmRpbmc6IE5vcm1hbEJsZW5kaW5nLFxuXHRcdFx0QWRkaXRpdmVCbGVuZGluZzogQWRkaXRpdmVCbGVuZGluZyxcblx0XHRcdFN1YnRyYWN0aXZlQmxlbmRpbmc6IFN1YnRyYWN0aXZlQmxlbmRpbmcsXG5cdFx0XHRNdWx0aXBseUJsZW5kaW5nOiBNdWx0aXBseUJsZW5kaW5nLFxuXHRcdFx0Q3VzdG9tQmxlbmRpbmc6IEN1c3RvbUJsZW5kaW5nXG5cdFx0fTtcblxuXHRcdHZhciBjb2xvciA9IG5ldyBDb2xvcigpO1xuXHRcdHZhciB0ZXh0dXJlTG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTtcblx0XHR2YXIgbWF0ZXJpYWxMb2FkZXIgPSBuZXcgTWF0ZXJpYWxMb2FkZXIoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjcmVhdGVNYXRlcmlhbCggbSwgdGV4dHVyZVBhdGgsIGNyb3NzT3JpZ2luICkge1xuXG5cdFx0XHQvLyBjb252ZXJ0IGZyb20gb2xkIG1hdGVyaWFsIGZvcm1hdFxuXG5cdFx0XHR2YXIgdGV4dHVyZXMgPSB7fTtcblxuXHRcdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIHBhdGgsIHJlcGVhdCwgb2Zmc2V0LCB3cmFwLCBhbmlzb3Ryb3B5ICkge1xuXG5cdFx0XHRcdHZhciBmdWxsUGF0aCA9IHRleHR1cmVQYXRoICsgcGF0aDtcblx0XHRcdFx0dmFyIGxvYWRlciA9IExvYWRlci5IYW5kbGVycy5nZXQoIGZ1bGxQYXRoICk7XG5cblx0XHRcdFx0dmFyIHRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCBsb2FkZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlID0gbG9hZGVyLmxvYWQoIGZ1bGxQYXRoICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmVMb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIGNyb3NzT3JpZ2luICk7XG5cdFx0XHRcdFx0dGV4dHVyZSA9IHRleHR1cmVMb2FkZXIubG9hZCggZnVsbFBhdGggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCByZXBlYXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUucmVwZWF0LmZyb21BcnJheSggcmVwZWF0ICk7XG5cblx0XHRcdFx0XHRpZiAoIHJlcGVhdFsgMCBdICE9PSAxICkgdGV4dHVyZS53cmFwUyA9IFJlcGVhdFdyYXBwaW5nO1xuXHRcdFx0XHRcdGlmICggcmVwZWF0WyAxIF0gIT09IDEgKSB0ZXh0dXJlLndyYXBUID0gUmVwZWF0V3JhcHBpbmc7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggb2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLm9mZnNldC5mcm9tQXJyYXkoIG9mZnNldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHdyYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGlmICggd3JhcFsgMCBdID09PSAncmVwZWF0JyApIHRleHR1cmUud3JhcFMgPSBSZXBlYXRXcmFwcGluZztcblx0XHRcdFx0XHRpZiAoIHdyYXBbIDAgXSA9PT0gJ21pcnJvcicgKSB0ZXh0dXJlLndyYXBTID0gTWlycm9yZWRSZXBlYXRXcmFwcGluZztcblxuXHRcdFx0XHRcdGlmICggd3JhcFsgMSBdID09PSAncmVwZWF0JyApIHRleHR1cmUud3JhcFQgPSBSZXBlYXRXcmFwcGluZztcblx0XHRcdFx0XHRpZiAoIHdyYXBbIDEgXSA9PT0gJ21pcnJvcicgKSB0ZXh0dXJlLndyYXBUID0gTWlycm9yZWRSZXBlYXRXcmFwcGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBhbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSBhbmlzb3Ryb3B5O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0XHRcdHRleHR1cmVzWyB1dWlkIF0gPSB0ZXh0dXJlO1xuXG5cdFx0XHRcdHJldHVybiB1dWlkO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdHZhciBqc29uID0ge1xuXHRcdFx0XHR1dWlkOiBfTWF0aC5nZW5lcmF0ZVVVSUQoKSxcblx0XHRcdFx0dHlwZTogJ01lc2hMYW1iZXJ0TWF0ZXJpYWwnXG5cdFx0XHR9O1xuXG5cdFx0XHRmb3IgKCB2YXIgbmFtZSBpbiBtICkge1xuXG5cdFx0XHRcdHZhciB2YWx1ZSA9IG1bIG5hbWUgXTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdFx0Y2FzZSAnRGJnQ29sb3InOlxuXHRcdFx0XHRcdGNhc2UgJ0RiZ0luZGV4Jzpcblx0XHRcdFx0XHRjYXNlICdvcHRpY2FsRGVuc2l0eSc6XG5cdFx0XHRcdFx0Y2FzZSAnaWxsdW1pbmF0aW9uJzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0RiZ05hbWUnOlxuXHRcdFx0XHRcdFx0anNvbi5uYW1lID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdibGVuZGluZyc6XG5cdFx0XHRcdFx0XHRqc29uLmJsZW5kaW5nID0gQmxlbmRpbmdNb2RlWyB2YWx1ZSBdO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sb3JBbWJpZW50Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBBbWJpZW50Jzpcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxvYWRlci5jcmVhdGVNYXRlcmlhbDonLCBuYW1lLCAnaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4nICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xvckRpZmZ1c2UnOlxuXHRcdFx0XHRcdFx0anNvbi5jb2xvciA9IGNvbG9yLmZyb21BcnJheSggdmFsdWUgKS5nZXRIZXgoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbG9yU3BlY3VsYXInOlxuXHRcdFx0XHRcdFx0anNvbi5zcGVjdWxhciA9IGNvbG9yLmZyb21BcnJheSggdmFsdWUgKS5nZXRIZXgoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbG9yRW1pc3NpdmUnOlxuXHRcdFx0XHRcdFx0anNvbi5lbWlzc2l2ZSA9IGNvbG9yLmZyb21BcnJheSggdmFsdWUgKS5nZXRIZXgoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NwZWN1bGFyQ29lZic6XG5cdFx0XHRcdFx0XHRqc29uLnNoaW5pbmVzcyA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2hhZGluZyc6XG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdiYXNpYycgKSBqc29uLnR5cGUgPSAnTWVzaEJhc2ljTWF0ZXJpYWwnO1xuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAncGhvbmcnICkganNvbi50eXBlID0gJ01lc2hQaG9uZ01hdGVyaWFsJztcblx0XHRcdFx0XHRcdGlmICggdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ3N0YW5kYXJkJyApIGpzb24udHlwZSA9ICdNZXNoU3RhbmRhcmRNYXRlcmlhbCc7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBEaWZmdXNlJzpcblx0XHRcdFx0XHRcdGpzb24ubWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcERpZmZ1c2VSZXBlYXQsIG0ubWFwRGlmZnVzZU9mZnNldCwgbS5tYXBEaWZmdXNlV3JhcCwgbS5tYXBEaWZmdXNlQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRGlmZnVzZVJlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRGlmZnVzZU9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRGlmZnVzZVdyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcERpZmZ1c2VBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEVtaXNzaXZlJzpcblx0XHRcdFx0XHRcdGpzb24uZW1pc3NpdmVNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwRW1pc3NpdmVSZXBlYXQsIG0ubWFwRW1pc3NpdmVPZmZzZXQsIG0ubWFwRW1pc3NpdmVXcmFwLCBtLm1hcEVtaXNzaXZlQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRW1pc3NpdmVSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEVtaXNzaXZlT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBFbWlzc2l2ZVdyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEVtaXNzaXZlQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBMaWdodCc6XG5cdFx0XHRcdFx0XHRqc29uLmxpZ2h0TWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcExpZ2h0UmVwZWF0LCBtLm1hcExpZ2h0T2Zmc2V0LCBtLm1hcExpZ2h0V3JhcCwgbS5tYXBMaWdodEFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcExpZ2h0UmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBMaWdodE9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTGlnaHRXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBMaWdodEFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQU8nOlxuXHRcdFx0XHRcdFx0anNvbi5hb01hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBBT1JlcGVhdCwgbS5tYXBBT09mZnNldCwgbS5tYXBBT1dyYXAsIG0ubWFwQU9Bbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBBT1JlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQU9PZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFPV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQU9Bbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXAnOlxuXHRcdFx0XHRcdFx0anNvbi5idW1wTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcEJ1bXBSZXBlYXQsIG0ubWFwQnVtcE9mZnNldCwgbS5tYXBCdW1wV3JhcCwgbS5tYXBCdW1wQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQnVtcFNjYWxlJzpcblx0XHRcdFx0XHRcdGpzb24uYnVtcFNjYWxlID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBCdW1wUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBCdW1wT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBCdW1wV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQnVtcEFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTm9ybWFsJzpcblx0XHRcdFx0XHRcdGpzb24ubm9ybWFsTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcE5vcm1hbFJlcGVhdCwgbS5tYXBOb3JtYWxPZmZzZXQsIG0ubWFwTm9ybWFsV3JhcCwgbS5tYXBOb3JtYWxBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBOb3JtYWxGYWN0b3InOlxuXHRcdFx0XHRcdFx0anNvbi5ub3JtYWxTY2FsZSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTm9ybWFsUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBOb3JtYWxPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcE5vcm1hbFdyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcE5vcm1hbEFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwU3BlY3VsYXInOlxuXHRcdFx0XHRcdFx0anNvbi5zcGVjdWxhck1hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBTcGVjdWxhclJlcGVhdCwgbS5tYXBTcGVjdWxhck9mZnNldCwgbS5tYXBTcGVjdWxhcldyYXAsIG0ubWFwU3BlY3VsYXJBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBTcGVjdWxhclJlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwU3BlY3VsYXJPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcFNwZWN1bGFyV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwU3BlY3VsYXJBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcE1ldGFsbmVzcyc6XG5cdFx0XHRcdFx0XHRqc29uLm1ldGFsbmVzc01hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBNZXRhbG5lc3NSZXBlYXQsIG0ubWFwTWV0YWxuZXNzT2Zmc2V0LCBtLm1hcE1ldGFsbmVzc1dyYXAsIG0ubWFwTWV0YWxuZXNzQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTWV0YWxuZXNzUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBNZXRhbG5lc3NPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcE1ldGFsbmVzc1dyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcE1ldGFsbmVzc0FuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwUm91Z2huZXNzJzpcblx0XHRcdFx0XHRcdGpzb24ucm91Z2huZXNzTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcFJvdWdobmVzc1JlcGVhdCwgbS5tYXBSb3VnaG5lc3NPZmZzZXQsIG0ubWFwUm91Z2huZXNzV3JhcCwgbS5tYXBSb3VnaG5lc3NBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBSb3VnaG5lc3NSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcFJvdWdobmVzc09mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwUm91Z2huZXNzV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwUm91Z2huZXNzQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBBbHBoYSc6XG5cdFx0XHRcdFx0XHRqc29uLmFscGhhTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcEFscGhhUmVwZWF0LCBtLm1hcEFscGhhT2Zmc2V0LCBtLm1hcEFscGhhV3JhcCwgbS5tYXBBbHBoYUFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEFscGhhUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBBbHBoYU9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQWxwaGFXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBBbHBoYUFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZmxpcFNpZGVkJzpcblx0XHRcdFx0XHRcdGpzb24uc2lkZSA9IEJhY2tTaWRlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZG91YmxlU2lkZWQnOlxuXHRcdFx0XHRcdFx0anNvbi5zaWRlID0gRG91YmxlU2lkZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RyYW5zcGFyZW5jeSc6XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Mb2FkZXIuY3JlYXRlTWF0ZXJpYWw6IHRyYW5zcGFyZW5jeSBoYXMgYmVlbiByZW5hbWVkIHRvIG9wYWNpdHknICk7XG5cdFx0XHRcdFx0XHRqc29uLm9wYWNpdHkgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2RlcHRoVGVzdCc6XG5cdFx0XHRcdFx0Y2FzZSAnZGVwdGhXcml0ZSc6XG5cdFx0XHRcdFx0Y2FzZSAnY29sb3JXcml0ZSc6XG5cdFx0XHRcdFx0Y2FzZSAnb3BhY2l0eSc6XG5cdFx0XHRcdFx0Y2FzZSAncmVmbGVjdGl2aXR5Jzpcblx0XHRcdFx0XHRjYXNlICd0cmFuc3BhcmVudCc6XG5cdFx0XHRcdFx0Y2FzZSAndmlzaWJsZSc6XG5cdFx0XHRcdFx0Y2FzZSAnd2lyZWZyYW1lJzpcblx0XHRcdFx0XHRcdGpzb25bIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndmVydGV4Q29sb3JzJzpcblx0XHRcdFx0XHRcdGlmICggdmFsdWUgPT09IHRydWUgKSBqc29uLnZlcnRleENvbG9ycyA9IFZlcnRleENvbG9ycztcblx0XHRcdFx0XHRcdGlmICggdmFsdWUgPT09ICdmYWNlJyApIGpzb24udmVydGV4Q29sb3JzID0gRmFjZUNvbG9ycztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTG9hZGVyLmNyZWF0ZU1hdGVyaWFsOiBVbnN1cHBvcnRlZCcsIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBqc29uLnR5cGUgPT09ICdNZXNoQmFzaWNNYXRlcmlhbCcgKSBkZWxldGUganNvbi5lbWlzc2l2ZTtcblx0XHRcdGlmICgganNvbi50eXBlICE9PSAnTWVzaFBob25nTWF0ZXJpYWwnICkgZGVsZXRlIGpzb24uc3BlY3VsYXI7XG5cblx0XHRcdGlmICgganNvbi5vcGFjaXR5IDwgMSApIGpzb24udHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0XHRtYXRlcmlhbExvYWRlci5zZXRUZXh0dXJlcyggdGV4dHVyZXMgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGVyaWFsTG9hZGVyLnBhcnNlKCBqc29uICk7XG5cblx0XHR9O1xuXG5cdH0gKSgpXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBjb250ZXh0O1xuXG52YXIgQXVkaW9Db250ZXh0ID0ge1xuXG5cdGdldENvbnRleHQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggY29udGV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb250ZXh0ID0gbmV3ICggd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0ICkoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb250ZXh0O1xuXG5cdH0sXG5cblx0c2V0Q29udGV4dDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGNvbnRleHQgPSB2YWx1ZTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBSZWVjZSBBYXJvbiBMZWNyaXZhaW4gLyBodHRwOi8vcmVlY2Vub3Rlcy5jb20vXG4gKi9cblxuZnVuY3Rpb24gQXVkaW9Mb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQXVkaW9Mb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0Ly8gQ3JlYXRlIGEgY29weSBvZiB0aGUgYnVmZmVyLiBUaGUgYGRlY29kZUF1ZGlvRGF0YWAgbWV0aG9kXG5cdFx0XHQvLyBkZXRhY2hlcyB0aGUgYnVmZmVyIHdoZW4gY29tcGxldGUsIHByZXZlbnRpbmcgcmV1c2UuXG5cdFx0XHR2YXIgYnVmZmVyQ29weSA9IGJ1ZmZlci5zbGljZSggMCApO1xuXG5cdFx0XHR2YXIgY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cdFx0XHRjb250ZXh0LmRlY29kZUF1ZGlvRGF0YSggYnVmZmVyQ29weSwgZnVuY3Rpb24gKCBhdWRpb0J1ZmZlciApIHtcblxuXHRcdFx0XHRvbkxvYWQoIGF1ZGlvQnVmZmVyICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBQcmltYXJ5IHJlZmVyZW5jZTpcbiAqICAgaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmXG4gKlxuICogU2Vjb25kYXJ5IHJlZmVyZW5jZTpcbiAqICAgaHR0cHM6Ly93d3cucHBzbG9hbi5vcmcvcHVibGljYXRpb25zL1N0dXBpZFNIMzYucGRmXG4gKi9cblxuLy8gMy1iYW5kIFNIIGRlZmluZWQgYnkgOSBjb2VmZmljaWVudHNcblxuZnVuY3Rpb24gU3BoZXJpY2FsSGFybW9uaWNzMygpIHtcblxuXHR0aGlzLmNvZWZmaWNpZW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHR0aGlzLmNvZWZmaWNpZW50cy5wdXNoKCBuZXcgVmVjdG9yMygpICk7XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIFNwaGVyaWNhbEhhcm1vbmljczMucHJvdG90eXBlLCB7XG5cblx0aXNTcGhlcmljYWxIYXJtb25pY3MzOiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCBjb2VmZmljaWVudHMgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmNvcHkoIGNvZWZmaWNpZW50c1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHplcm86IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uc2V0KCAwLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIGdldCB0aGUgcmFkaWFuY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXG5cdC8vIHRhcmdldCBpcyBhIFZlY3RvcjNcblx0Z2V0QXQ6IGZ1bmN0aW9uICggbm9ybWFsLCB0YXJnZXQgKSB7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxuXG5cdFx0dmFyIHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XG5cblx0XHR2YXIgY29lZmYgPSB0aGlzLmNvZWZmaWNpZW50cztcblxuXHRcdC8vIGJhbmQgMFxuXHRcdHRhcmdldC5jb3B5KCBjb2VmZlsgMCBdICkubXVsdGlwbHlTY2FsYXIoIDAuMjgyMDk1ICk7XG5cblx0XHQvLyBiYW5kIDFcblx0XHR0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyAxIF0sIDAuNDg4NjAzICogeSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZSggY29lZmZbIDIgXSwgMC40ODg2MDMgKiB6ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlKCBjb2VmZlsgMyBdLCAwLjQ4ODYwMyAqIHggKTtcblxuXHRcdC8vIGJhbmQgMlxuXHRcdHRhcmdldC5hZGRTY2FsZSggY29lZmZbIDQgXSwgMS4wOTI1NDggKiAoIHggKiB5ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyA1IF0sIDEuMDkyNTQ4ICogKCB5ICogeiApICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlKCBjb2VmZlsgNiBdLCAwLjMxNTM5MiAqICggMy4wICogeiAqIHogLSAxLjAgKSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZSggY29lZmZbIDcgXSwgMS4wOTI1NDggKiAoIHggKiB6ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyA4IF0sIDAuNTQ2Mjc0ICogKCB4ICogeCAtIHkgKiB5ICkgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fSxcblxuXHQvLyBnZXQgdGhlIGlycmFkaWFuY2UgKHJhZGlhbmNlIGNvbnZvbHZlZCB3aXRoIGNvc2luZSBsb2JlKSBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBub3JtYWxcblx0Ly8gdGFyZ2V0IGlzIGEgVmVjdG9yM1xuXHQvLyBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcblx0Z2V0SXJyYWRpYW5jZUF0OiBmdW5jdGlvbiAoIG5vcm1hbCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGhcblxuXHRcdHZhciB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xuXG5cdFx0dmFyIGNvZWZmID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHQvLyBiYW5kIDBcblx0XHR0YXJnZXQuY29weSggY29lZmZbIDAgXSApLm11bHRpcGx5U2NhbGFyKCAwLjg4NjIyNyApOyAvLyDPgCAqIDAuMjgyMDk1XG5cblx0XHQvLyBiYW5kIDFcblx0XHR0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyAxIF0sIDIuMCAqIDAuNTExNjY0ICogeSApOyAvLyAoIDIgKiDPgCAvIDMgKSAqIDAuNDg4NjAzXG5cdFx0dGFyZ2V0LmFkZFNjYWxlKCBjb2VmZlsgMiBdLCAyLjAgKiAwLjUxMTY2NCAqIHogKTtcblx0XHR0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyAzIF0sIDIuMCAqIDAuNTExNjY0ICogeCApO1xuXG5cdFx0Ly8gYmFuZCAyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlKCBjb2VmZlsgNCBdLCAyLjAgKiAwLjQyOTA0MyAqIHggKiB5ICk7IC8vICggz4AgLyA0ICkgKiAxLjA5MjU0OFxuXHRcdHRhcmdldC5hZGRTY2FsZSggY29lZmZbIDUgXSwgMi4wICogMC40MjkwNDMgKiB5ICogeiApO1xuXHRcdHRhcmdldC5hZGRTY2FsZSggY29lZmZbIDYgXSwgMC43NDMxMjUgKiB6ICogeiAtIDAuMjQ3NzA4ICk7IC8vICggz4AgLyA0ICkgKiAwLjMxNTM5MiAqIDNcblx0XHR0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyA3IF0sIDIuMCAqIDAuNDI5MDQzICogeCAqIHogKTtcblx0XHR0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyA4IF0sIDAuNDI5MDQzICogKCB4ICogeCAtIHkgKiB5ICkgKTsgLy8gKCDPgCAvIDQgKSAqIDAuNTQ2Mjc0XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiAoIHNoICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5hZGQoIHNoLmNvZWZmaWNpZW50c1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cblx0c2NhbGU6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0ubXVsdGlwbHlTY2FsYXIoIHMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCBzaCwgYWxwaGEgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmxlcnAoIHNoLmNvZWZmaWNpZW50c1sgaSBdLCBhbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggc2ggKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRpZiAoICEgdGhpcy5jb2VmZmljaWVudHNbIGkgXS5lcXVhbHMoIHNoLmNvZWZmaWNpZW50c1sgaSBdICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc2ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHNoLmNvZWZmaWNpZW50cyApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdHZhciBjb2VmZmljaWVudHMgPSB0aGlzLmNvZWZmaWNpZW50cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGNvZWZmaWNpZW50c1sgaSBdLmZyb21BcnJheSggYXJyYXksIGkgKiAzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBhcnJheSA9IFtdO1xuXHRcdHZhciBjb2VmZmljaWVudHMgPSB0aGlzLmNvZWZmaWNpZW50cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGNvZWZmaWNpZW50c1sgaSBdLnRvQXJyYXkoIGFycmF5LCBpICogMyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBTcGhlcmljYWxIYXJtb25pY3MzLCB7XG5cblx0Ly8gZXZhbHVhdGUgdGhlIGJhc2lzIGZ1bmN0aW9uc1xuXHQvLyBzaEJhc2lzIGlzIGFuIEFycmF5WyA5IF1cblx0Z2V0QmFzaXNBdDogZnVuY3Rpb24gKCBub3JtYWwsIHNoQmFzaXMgKSB7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxuXG5cdFx0dmFyIHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XG5cblx0XHQvLyBiYW5kIDBcblx0XHRzaEJhc2lzWyAwIF0gPSAwLjI4MjA5NTtcblxuXHRcdC8vIGJhbmQgMVxuXHRcdHNoQmFzaXNbIDEgXSA9IDAuNDg4NjAzICogeTtcblx0XHRzaEJhc2lzWyAyIF0gPSAwLjQ4ODYwMyAqIHo7XG5cdFx0c2hCYXNpc1sgMyBdID0gMC40ODg2MDMgKiB4O1xuXG5cdFx0Ly8gYmFuZCAyXG5cdFx0c2hCYXNpc1sgNCBdID0gMS4wOTI1NDggKiB4ICogeTtcblx0XHRzaEJhc2lzWyA1IF0gPSAxLjA5MjU0OCAqIHkgKiB6O1xuXHRcdHNoQmFzaXNbIDYgXSA9IDAuMzE1MzkyICogKCAzICogeiAqIHogLSAxICk7XG5cdFx0c2hCYXNpc1sgNyBdID0gMS4wOTI1NDggKiB4ICogejtcblx0XHRzaEJhc2lzWyA4IF0gPSAwLjU0NjI3NCAqICggeCAqIHggLSB5ICogeSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIEEgTGlnaHRQcm9iZSBpcyBhIHNvdXJjZSBvZiBpbmRpcmVjdC1kaWZmdXNlIGxpZ2h0XG4gKi9cblxuZnVuY3Rpb24gTGlnaHRQcm9iZSggc2gsIGludGVuc2l0eSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCB1bmRlZmluZWQsIGludGVuc2l0eSApO1xuXG5cdHRoaXMuc2ggPSAoIHNoICE9PSB1bmRlZmluZWQgKSA/IHNoIDogbmV3IFNwaGVyaWNhbEhhcm1vbmljczMoKTtcblxufVxuXG5MaWdodFByb2JlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExpZ2h0UHJvYmUsXG5cblx0aXNMaWdodFByb2JlOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLnNoLmNvcHkoIHNvdXJjZS5zaCApO1xuXHRcdHRoaXMuaW50ZW5zaXR5ID0gc291cmNlLmludGVuc2l0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IExpZ2h0LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0Ly8gZGF0YS5zaCA9IHRoaXMuc2gudG9BcnJheSgpOyAvLyB0b2RvXG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBIZW1pc3BoZXJlTGlnaHRQcm9iZSggc2t5Q29sb3IsIGdyb3VuZENvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0TGlnaHRQcm9iZS5jYWxsKCB0aGlzLCB1bmRlZmluZWQsIGludGVuc2l0eSApO1xuXG5cdHZhciBjb2xvcjEgPSBuZXcgQ29sb3IoKS5zZXQoIHNreUNvbG9yICk7XG5cdHZhciBjb2xvcjIgPSBuZXcgQ29sb3IoKS5zZXQoIGdyb3VuZENvbG9yICk7XG5cblx0dmFyIHNreSA9IG5ldyBWZWN0b3IzKCBjb2xvcjEuciwgY29sb3IxLmcsIGNvbG9yMS5iICk7XG5cdHZhciBncm91bmQgPSBuZXcgVmVjdG9yMyggY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYiApO1xuXG5cdC8vIHdpdGhvdXQgZXh0cmEgZmFjdG9yIG9mIFBJIGluIHRoZSBzaGFkZXIsIHNob3VsZCA9IDEgLyBNYXRoLnNxcnQoIE1hdGguUEkgKTtcblx0dmFyIGMwID0gTWF0aC5zcXJ0KCBNYXRoLlBJICk7XG5cdHZhciBjMSA9IGMwICogTWF0aC5zcXJ0KCAwLjc1ICk7XG5cblx0dGhpcy5zaC5jb2VmZmljaWVudHNbIDAgXS5jb3B5KCBza3kgKS5hZGQoIGdyb3VuZCApLm11bHRpcGx5U2NhbGFyKCBjMCApO1xuXHR0aGlzLnNoLmNvZWZmaWNpZW50c1sgMSBdLmNvcHkoIHNreSApLnN1YiggZ3JvdW5kICkubXVsdGlwbHlTY2FsYXIoIGMxICk7XG5cbn1cblxuSGVtaXNwaGVyZUxpZ2h0UHJvYmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHRQcm9iZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBIZW1pc3BoZXJlTGlnaHRQcm9iZSxcblxuXHRpc0hlbWlzcGhlcmVMaWdodFByb2JlOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgeyAvLyBtb2RpZnlpbmcgY29sb3JzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkXG5cblx0XHRMaWdodFByb2JlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gTGlnaHRQcm9iZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdC8vIGRhdGEuc2ggPSB0aGlzLnNoLnRvQXJyYXkoKTsgLy8gdG9kb1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gQW1iaWVudExpZ2h0UHJvYmUoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0TGlnaHRQcm9iZS5jYWxsKCB0aGlzLCB1bmRlZmluZWQsIGludGVuc2l0eSApO1xuXG5cdHZhciBjb2xvcjEgPSBuZXcgQ29sb3IoKS5zZXQoIGNvbG9yICk7XG5cblx0Ly8gd2l0aG91dCBleHRyYSBmYWN0b3Igb2YgUEkgaW4gdGhlIHNoYWRlciwgd291bGQgYmUgMiAvIE1hdGguc3FydCggTWF0aC5QSSApO1xuXHR0aGlzLnNoLmNvZWZmaWNpZW50c1sgMCBdLnNldCggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApLm11bHRpcGx5U2NhbGFyKCAyICogTWF0aC5zcXJ0KCBNYXRoLlBJICkgKTtcblxufVxuXG5BbWJpZW50TGlnaHRQcm9iZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodFByb2JlLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEFtYmllbnRMaWdodFByb2JlLFxuXG5cdGlzQW1iaWVudExpZ2h0UHJvYmU6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7IC8vIG1vZGlmeWluZyBjb2xvciBub3QgY3VycmVudGx5IHN1cHBvcnRlZFxuXG5cdFx0TGlnaHRQcm9iZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IExpZ2h0UHJvYmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHQvLyBkYXRhLnNoID0gdGhpcy5zaC50b0FycmF5KCk7IC8vIHRvZG9cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gU3RlcmVvQ2FtZXJhKCkge1xuXG5cdHRoaXMudHlwZSA9ICdTdGVyZW9DYW1lcmEnO1xuXG5cdHRoaXMuYXNwZWN0ID0gMTtcblxuXHR0aGlzLmV5ZVNlcCA9IDAuMDY0O1xuXG5cdHRoaXMuY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHR0aGlzLmNhbWVyYUwubGF5ZXJzLmVuYWJsZSggMSApO1xuXHR0aGlzLmNhbWVyYUwubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHR0aGlzLmNhbWVyYVIubGF5ZXJzLmVuYWJsZSggMiApO1xuXHR0aGlzLmNhbWVyYVIubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFN0ZXJlb0NhbWVyYS5wcm90b3R5cGUsIHtcblxuXHR1cGRhdGU6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGluc3RhbmNlLCBmb2N1cywgZm92LCBhc3BlY3QsIG5lYXIsIGZhciwgem9vbSwgZXllU2VwO1xuXG5cdFx0dmFyIGV5ZVJpZ2h0ID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgZXllTGVmdCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCBjYW1lcmEgKSB7XG5cblx0XHRcdHZhciBuZWVkc1VwZGF0ZSA9IGluc3RhbmNlICE9PSB0aGlzIHx8IGZvY3VzICE9PSBjYW1lcmEuZm9jdXMgfHwgZm92ICE9PSBjYW1lcmEuZm92IHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdCB8fCBuZWFyICE9PSBjYW1lcmEubmVhciB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZmFyICE9PSBjYW1lcmEuZmFyIHx8IHpvb20gIT09IGNhbWVyYS56b29tIHx8IGV5ZVNlcCAhPT0gdGhpcy5leWVTZXA7XG5cblx0XHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdFx0aW5zdGFuY2UgPSB0aGlzO1xuXHRcdFx0XHRmb2N1cyA9IGNhbWVyYS5mb2N1cztcblx0XHRcdFx0Zm92ID0gY2FtZXJhLmZvdjtcblx0XHRcdFx0YXNwZWN0ID0gY2FtZXJhLmFzcGVjdCAqIHRoaXMuYXNwZWN0O1xuXHRcdFx0XHRuZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0XHRcdGZhciA9IGNhbWVyYS5mYXI7XG5cdFx0XHRcdHpvb20gPSBjYW1lcmEuem9vbTtcblxuXHRcdFx0XHQvLyBPZmYtYXhpcyBzdGVyZW9zY29waWMgZWZmZWN0IGJhc2VkIG9uXG5cdFx0XHRcdC8vIGh0dHA6Ly9wYXVsYm91cmtlLm5ldC9zdGVyZW9ncmFwaGljcy9zdGVyZW9yZW5kZXIvXG5cblx0XHRcdFx0dmFyIHByb2plY3Rpb25NYXRyaXggPSBjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5jbG9uZSgpO1xuXHRcdFx0XHRleWVTZXAgPSB0aGlzLmV5ZVNlcCAvIDI7XG5cdFx0XHRcdHZhciBleWVTZXBPblByb2plY3Rpb24gPSBleWVTZXAgKiBuZWFyIC8gZm9jdXM7XG5cdFx0XHRcdHZhciB5bWF4ID0gKCBuZWFyICogTWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiBmb3YgKiAwLjUgKSApIC8gem9vbTtcblx0XHRcdFx0dmFyIHhtaW4sIHhtYXg7XG5cblx0XHRcdFx0Ly8gdHJhbnNsYXRlIHhPZmZzZXRcblxuXHRcdFx0XHRleWVMZWZ0LmVsZW1lbnRzWyAxMiBdID0gLSBleWVTZXA7XG5cdFx0XHRcdGV5ZVJpZ2h0LmVsZW1lbnRzWyAxMiBdID0gZXllU2VwO1xuXG5cdFx0XHRcdC8vIGZvciBsZWZ0IGV5ZVxuXG5cdFx0XHRcdHhtaW4gPSAtIHltYXggKiBhc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247XG5cdFx0XHRcdHhtYXggPSB5bWF4ICogYXNwZWN0ICsgZXllU2VwT25Qcm9qZWN0aW9uO1xuXG5cdFx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDAgXSA9IDIgKiBuZWFyIC8gKCB4bWF4IC0geG1pbiApO1xuXHRcdFx0XHRwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA4IF0gPSAoIHhtYXggKyB4bWluICkgLyAoIHhtYXggLSB4bWluICk7XG5cblx0XHRcdFx0dGhpcy5jYW1lcmFMLnByb2plY3Rpb25NYXRyaXguY29weSggcHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHRcdC8vIGZvciByaWdodCBleWVcblxuXHRcdFx0XHR4bWluID0gLSB5bWF4ICogYXNwZWN0IC0gZXllU2VwT25Qcm9qZWN0aW9uO1xuXHRcdFx0XHR4bWF4ID0geW1heCAqIGFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcblxuXHRcdFx0XHRwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogbmVhciAvICggeG1heCAtIHhtaW4gKTtcblx0XHRcdFx0cHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOCBdID0gKCB4bWF4ICsgeG1pbiApIC8gKCB4bWF4IC0geG1pbiApO1xuXG5cdFx0XHRcdHRoaXMuY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIHByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmNhbWVyYUwubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkubXVsdGlwbHkoIGV5ZUxlZnQgKTtcblx0XHRcdHRoaXMuY2FtZXJhUi5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5tdWx0aXBseSggZXllUmlnaHQgKTtcblxuXHRcdH07XG5cblx0fSApKClcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gQ2xvY2soIGF1dG9TdGFydCApIHtcblxuXHR0aGlzLmF1dG9TdGFydCA9ICggYXV0b1N0YXJ0ICE9PSB1bmRlZmluZWQgKSA/IGF1dG9TdGFydCA6IHRydWU7XG5cblx0dGhpcy5zdGFydFRpbWUgPSAwO1xuXHR0aGlzLm9sZFRpbWUgPSAwO1xuXHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblxuXHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBDbG9jay5wcm90b3R5cGUsIHtcblxuXHRzdGFydDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5zdGFydFRpbWUgPSAoIHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ3VuZGVmaW5lZCcgPyBEYXRlIDogcGVyZm9ybWFuY2UgKS5ub3coKTsgLy8gc2VlICMxMDczMlxuXG5cdFx0dGhpcy5vbGRUaW1lID0gdGhpcy5zdGFydFRpbWU7XG5cdFx0dGhpcy5lbGFwc2VkVGltZSA9IDA7XG5cdFx0dGhpcy5ydW5uaW5nID0gdHJ1ZTtcblxuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZ2V0RWxhcHNlZFRpbWUoKTtcblx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblx0XHR0aGlzLmF1dG9TdGFydCA9IGZhbHNlO1xuXG5cdH0sXG5cblx0Z2V0RWxhcHNlZFRpbWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZ2V0RGVsdGEoKTtcblx0XHRyZXR1cm4gdGhpcy5lbGFwc2VkVGltZTtcblxuXHR9LFxuXG5cdGdldERlbHRhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGlmZiA9IDA7XG5cblx0XHRpZiAoIHRoaXMuYXV0b1N0YXJ0ICYmICEgdGhpcy5ydW5uaW5nICkge1xuXG5cdFx0XHR0aGlzLnN0YXJ0KCk7XG5cdFx0XHRyZXR1cm4gMDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ydW5uaW5nICkge1xuXG5cdFx0XHR2YXIgbmV3VGltZSA9ICggdHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/IERhdGUgOiBwZXJmb3JtYW5jZSApLm5vdygpO1xuXG5cdFx0XHRkaWZmID0gKCBuZXdUaW1lIC0gdGhpcy5vbGRUaW1lICkgLyAxMDAwO1xuXHRcdFx0dGhpcy5vbGRUaW1lID0gbmV3VGltZTtcblxuXHRcdFx0dGhpcy5lbGFwc2VkVGltZSArPSBkaWZmO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRpZmY7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBdWRpb0xpc3RlbmVyKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQXVkaW9MaXN0ZW5lcic7XG5cblx0dGhpcy5jb250ZXh0ID0gQXVkaW9Db250ZXh0LmdldENvbnRleHQoKTtcblxuXHR0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuXHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0dGhpcy5maWx0ZXIgPSBudWxsO1xuXG5cdHRoaXMudGltZURlbHRhID0gMDtcblxufVxuXG5BdWRpb0xpc3RlbmVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEF1ZGlvTGlzdGVuZXIsXG5cblx0Z2V0SW5wdXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW47XG5cblx0fSxcblxuXHRyZW1vdmVGaWx0ZXI6IGZ1bmN0aW9uICggKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVyICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcblx0XHRcdHRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXHRcdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXHRcdFx0dGhpcy5maWx0ZXIgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRGaWx0ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcjtcblxuXHR9LFxuXG5cdHNldEZpbHRlcjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmZpbHRlciA9IHZhbHVlO1xuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdHRoaXMuZmlsdGVyLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXN0ZXJWb2x1bWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTtcblxuXHR9LFxuXG5cdHNldE1hc3RlclZvbHVtZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSggdmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIG9yaWVudGF0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgY2xvY2sgPSBuZXcgQ2xvY2soKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRcdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG5cdFx0XHR2YXIgbGlzdGVuZXIgPSB0aGlzLmNvbnRleHQubGlzdGVuZXI7XG5cdFx0XHR2YXIgdXAgPSB0aGlzLnVwO1xuXG5cdFx0XHR0aGlzLnRpbWVEZWx0YSA9IGNsb2NrLmdldERlbHRhKCk7XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKTtcblxuXHRcdFx0b3JpZW50YXRpb24uc2V0KCAwLCAwLCAtIDEgKS5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKTtcblxuXHRcdFx0aWYgKCBsaXN0ZW5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdFx0Ly8gY29kZSBwYXRoIGZvciBDaHJvbWUgKHNlZSAjMTQzOTMpXG5cblx0XHRcdFx0dmFyIGVuZFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLnRpbWVEZWx0YTtcblxuXHRcdFx0XHRsaXN0ZW5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHBvc2l0aW9uLngsIGVuZFRpbWUgKTtcblx0XHRcdFx0bGlzdGVuZXIucG9zaXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBwb3NpdGlvbi55LCBlbmRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggcG9zaXRpb24ueiwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci5mb3J3YXJkWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci5mb3J3YXJkWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueSwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci5mb3J3YXJkWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueiwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci51cFgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLngsIGVuZFRpbWUgKTtcblx0XHRcdFx0bGlzdGVuZXIudXBZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC55LCBlbmRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnVwWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueiwgZW5kVGltZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGxpc3RlbmVyLnNldFBvc2l0aW9uKCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGxpc3RlbmVyLnNldE9yaWVudGF0aW9uKCBvcmllbnRhdGlvbi54LCBvcmllbnRhdGlvbi55LCBvcmllbnRhdGlvbi56LCB1cC54LCB1cC55LCB1cC56ICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSApKClcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFJlZWNlIEFhcm9uIExlY3JpdmFpbiAvIGh0dHA6Ly9yZWVjZW5vdGVzLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBdWRpbyggbGlzdGVuZXIgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdBdWRpbyc7XG5cblx0dGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuXHR0aGlzLmNvbnRleHQgPSBsaXN0ZW5lci5jb250ZXh0O1xuXG5cdHRoaXMuZ2FpbiA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdHRoaXMuZ2Fpbi5jb25uZWN0KCBsaXN0ZW5lci5nZXRJbnB1dCgpICk7XG5cblx0dGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuXG5cdHRoaXMuYnVmZmVyID0gbnVsbDtcblx0dGhpcy5kZXR1bmUgPSAwO1xuXHR0aGlzLmxvb3AgPSBmYWxzZTtcblx0dGhpcy5zdGFydFRpbWUgPSAwO1xuXHR0aGlzLm9mZnNldCA9IDA7XG5cdHRoaXMucGxheWJhY2tSYXRlID0gMTtcblx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSB0cnVlO1xuXHR0aGlzLnNvdXJjZVR5cGUgPSAnZW1wdHknO1xuXG5cdHRoaXMuZmlsdGVycyA9IFtdO1xuXG59XG5cbkF1ZGlvLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEF1ZGlvLFxuXG5cdGdldE91dHB1dDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2FpbjtcblxuXHR9LFxuXG5cdHNldE5vZGVTb3VyY2U6IGZ1bmN0aW9uICggYXVkaW9Ob2RlICkge1xuXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnYXVkaW9Ob2RlJztcblx0XHR0aGlzLnNvdXJjZSA9IGF1ZGlvTm9kZTtcblx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0TWVkaWFFbGVtZW50U291cmNlOiBmdW5jdGlvbiAoIG1lZGlhRWxlbWVudCApIHtcblxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ21lZGlhTm9kZSc7XG5cdFx0dGhpcy5zb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlTWVkaWFFbGVtZW50U291cmNlKCBtZWRpYUVsZW1lbnQgKTtcblx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0QnVmZmVyOiBmdW5jdGlvbiAoIGF1ZGlvQnVmZmVyICkge1xuXG5cdFx0dGhpcy5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnYnVmZmVyJztcblxuXHRcdGlmICggdGhpcy5hdXRvcGxheSApIHRoaXMucGxheSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRwbGF5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogQXVkaW8gaXMgYWxyZWFkeSBwbGF5aW5nLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR2YXIgc291cmNlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuXG5cdFx0c291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuXHRcdHNvdXJjZS5sb29wID0gdGhpcy5sb29wO1xuXHRcdHNvdXJjZS5vbmVuZGVkID0gdGhpcy5vbkVuZGVkLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLnN0YXJ0VGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZTtcblx0XHRzb3VyY2Uuc3RhcnQoIHRoaXMuc3RhcnRUaW1lLCB0aGlzLm9mZnNldCApO1xuXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHR0aGlzLnNldERldHVuZSggdGhpcy5kZXR1bmUgKTtcblx0XHR0aGlzLnNldFBsYXliYWNrUmF0ZSggdGhpcy5wbGF5YmFja1JhdGUgKTtcblxuXHRcdHJldHVybiB0aGlzLmNvbm5lY3QoKTtcblxuXHR9LFxuXG5cdHBhdXNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2Uuc3RvcCgpO1xuXHRcdFx0dGhpcy5zb3VyY2Uub25lbmRlZCA9IG51bGw7XG5cdFx0XHR0aGlzLm9mZnNldCArPSAoIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSAtIHRoaXMuc3RhcnRUaW1lICkgKiB0aGlzLnBsYXliYWNrUmF0ZTtcblx0XHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLnNvdXJjZS5zdG9wKCk7XG5cdFx0dGhpcy5zb3VyY2Uub25lbmRlZCA9IG51bGw7XG5cdFx0dGhpcy5vZmZzZXQgPSAwO1xuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmlsdGVyc1sgaSAtIDEgXS5jb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZmlsdGVyc1sgdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDEgXS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmlsdGVyc1sgaSAtIDEgXS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZmlsdGVyc1sgdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDEgXS5kaXNjb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcnM7XG5cblx0fSxcblxuXHRzZXRGaWx0ZXJzOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCAhIHZhbHVlICkgdmFsdWUgPSBbXTtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuZGlzY29ubmVjdCgpO1xuXHRcdFx0dGhpcy5maWx0ZXJzID0gdmFsdWU7XG5cdFx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZmlsdGVycyA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXREZXR1bmU6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmRldHVuZSA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLnNvdXJjZS5kZXR1bmUgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gb25seSBzZXQgZGV0dW5lIHdoZW4gYXZhaWxhYmxlXG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kZXR1bmUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLmRldHVuZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldERldHVuZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGV0dW5lO1xuXG5cdH0sXG5cblx0Z2V0RmlsdGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRGaWx0ZXJzKClbIDAgXTtcblxuXHR9LFxuXG5cdHNldEZpbHRlcjogZnVuY3Rpb24gKCBmaWx0ZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGaWx0ZXJzKCBmaWx0ZXIgPyBbIGZpbHRlciBdIDogW10gKTtcblxuXHR9LFxuXG5cdHNldFBsYXliYWNrUmF0ZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLnBsYXliYWNrUmF0ZSA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnNldFRhcmdldEF0VGltZSggdGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRQbGF5YmFja1JhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBsYXliYWNrUmF0ZTtcblxuXHR9LFxuXG5cdG9uRW5kZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0fSxcblxuXHRnZXRMb29wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubG9vcDtcblxuXHR9LFxuXG5cdHNldExvb3A6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5sb29wID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5sb29wID0gdGhpcy5sb29wO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRWb2x1bWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTtcblxuXHR9LFxuXG5cdHNldFZvbHVtZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSggdmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBQb3NpdGlvbmFsQXVkaW8oIGxpc3RlbmVyICkge1xuXG5cdEF1ZGlvLmNhbGwoIHRoaXMsIGxpc3RlbmVyICk7XG5cblx0dGhpcy5wYW5uZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlUGFubmVyKCk7XG5cdHRoaXMucGFubmVyLnBhbm5pbmdNb2RlbCA9ICdIUlRGJztcblx0dGhpcy5wYW5uZXIuY29ubmVjdCggdGhpcy5nYWluICk7XG5cbn1cblxuUG9zaXRpb25hbEF1ZGlvLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEF1ZGlvLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBvc2l0aW9uYWxBdWRpbyxcblxuXHRnZXRPdXRwdXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lcjtcblxuXHR9LFxuXG5cdGdldFJlZkRpc3RhbmNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucmVmRGlzdGFuY2U7XG5cblx0fSxcblxuXHRzZXRSZWZEaXN0YW5jZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLnJlZkRpc3RhbmNlID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFJvbGxvZmZGYWN0b3I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yO1xuXG5cdH0sXG5cblx0c2V0Um9sbG9mZkZhY3RvcjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3IgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0RGlzdGFuY2VNb2RlbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWw7XG5cblx0fSxcblxuXHRzZXREaXN0YW5jZU1vZGVsOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIuZGlzdGFuY2VNb2RlbCA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXhEaXN0YW5jZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLm1heERpc3RhbmNlO1xuXG5cdH0sXG5cblx0c2V0TWF4RGlzdGFuY2U6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5tYXhEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXREaXJlY3Rpb25hbENvbmU6IGZ1bmN0aW9uICggY29uZUlubmVyQW5nbGUsIGNvbmVPdXRlckFuZ2xlLCBjb25lT3V0ZXJHYWluICkge1xuXG5cdFx0dGhpcy5wYW5uZXIuY29uZUlubmVyQW5nbGUgPSBjb25lSW5uZXJBbmdsZTtcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJBbmdsZSA9IGNvbmVPdXRlckFuZ2xlO1xuXHRcdHRoaXMucGFubmVyLmNvbmVPdXRlckdhaW4gPSBjb25lT3V0ZXJHYWluO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIG9yaWVudGF0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRcdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG5cdFx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSB0cnVlICYmIHRoaXMuaXNQbGF5aW5nID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApO1xuXG5cdFx0XHRvcmllbnRhdGlvbi5zZXQoIDAsIDAsIDEgKS5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKTtcblxuXHRcdFx0dmFyIHBhbm5lciA9IHRoaXMucGFubmVyO1xuXG5cdFx0XHRpZiAoIHBhbm5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdFx0Ly8gY29kZSBwYXRoIGZvciBDaHJvbWUgYW5kIEZpcmVmb3ggKHNlZSAjMTQzOTMpXG5cblx0XHRcdFx0dmFyIGVuZFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLmxpc3RlbmVyLnRpbWVEZWx0YTtcblxuXHRcdFx0XHRwYW5uZXIucG9zaXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBwb3NpdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRcdHBhbm5lci5wb3NpdGlvblkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHBvc2l0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdFx0cGFubmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggcG9zaXRpb24ueiwgZW5kVGltZSApO1xuXHRcdFx0XHRwYW5uZXIub3JpZW50YXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBvcmllbnRhdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRcdHBhbm5lci5vcmllbnRhdGlvblkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIG9yaWVudGF0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueiwgZW5kVGltZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHBhbm5lci5zZXRQb3NpdGlvbiggcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgcG9zaXRpb24ueiApO1xuXHRcdFx0XHRwYW5uZXIuc2V0T3JpZW50YXRpb24oIG9yaWVudGF0aW9uLngsIG9yaWVudGF0aW9uLnksIG9yaWVudGF0aW9uLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9ICkoKVxuXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF1ZGlvQW5hbHlzZXIoIGF1ZGlvLCBmZnRTaXplICkge1xuXG5cdHRoaXMuYW5hbHlzZXIgPSBhdWRpby5jb250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7XG5cdHRoaXMuYW5hbHlzZXIuZmZ0U2l6ZSA9IGZmdFNpemUgIT09IHVuZGVmaW5lZCA/IGZmdFNpemUgOiAyMDQ4O1xuXG5cdHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KCB0aGlzLmFuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50ICk7XG5cblx0YXVkaW8uZ2V0T3V0cHV0KCkuY29ubmVjdCggdGhpcy5hbmFseXNlciApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEF1ZGlvQW5hbHlzZXIucHJvdG90eXBlLCB7XG5cblx0Z2V0RnJlcXVlbmN5RGF0YTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5hbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YSggdGhpcy5kYXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhO1xuXG5cdH0sXG5cblx0Z2V0QXZlcmFnZUZyZXF1ZW5jeTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZhbHVlID0gMCwgZGF0YSA9IHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhbHVlICs9IGRhdGFbIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZSAvIGRhdGEubGVuZ3RoO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBCdWZmZXJlZCBzY2VuZSBncmFwaCBwcm9wZXJ0eSB0aGF0IGFsbG93cyB3ZWlnaHRlZCBhY2N1bXVsYXRpb24uXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBQcm9wZXJ0eU1peGVyKCBiaW5kaW5nLCB0eXBlTmFtZSwgdmFsdWVTaXplICkge1xuXG5cdHRoaXMuYmluZGluZyA9IGJpbmRpbmc7XG5cdHRoaXMudmFsdWVTaXplID0gdmFsdWVTaXplO1xuXG5cdHZhciBidWZmZXJUeXBlID0gRmxvYXQ2NEFycmF5LFxuXHRcdG1peEZ1bmN0aW9uO1xuXG5cdHN3aXRjaCAoIHR5cGVOYW1lICkge1xuXG5cdFx0Y2FzZSAncXVhdGVybmlvbic6XG5cdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX3NsZXJwO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdzdHJpbmcnOlxuXHRcdGNhc2UgJ2Jvb2wnOlxuXHRcdFx0YnVmZmVyVHlwZSA9IEFycmF5O1xuXHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9zZWxlY3Q7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX2xlcnA7XG5cblx0fVxuXG5cdHRoaXMuYnVmZmVyID0gbmV3IGJ1ZmZlclR5cGUoIHZhbHVlU2l6ZSAqIDQgKTtcblx0Ly8gbGF5b3V0OiBbIGluY29taW5nIHwgYWNjdTAgfCBhY2N1MSB8IG9yaWcgXVxuXHQvL1xuXHQvLyBpbnRlcnBvbGF0b3JzIGNhbiB1c2UgLmJ1ZmZlciBhcyB0aGVpciAucmVzdWx0XG5cdC8vIHRoZSBkYXRhIHRoZW4gZ29lcyB0byAnaW5jb21pbmcnXG5cdC8vXG5cdC8vICdhY2N1MCcgYW5kICdhY2N1MScgYXJlIHVzZWQgZnJhbWUtaW50ZXJsZWF2ZWQgZm9yXG5cdC8vIHRoZSBjdW11bGF0aXZlIHJlc3VsdCBhbmQgYXJlIGNvbXBhcmVkIHRvIGRldGVjdFxuXHQvLyBjaGFuZ2VzXG5cdC8vXG5cdC8vICdvcmlnJyBzdG9yZXMgdGhlIG9yaWdpbmFsIHN0YXRlIG9mIHRoZSBwcm9wZXJ0eVxuXG5cdHRoaXMuX21peEJ1ZmZlclJlZ2lvbiA9IG1peEZ1bmN0aW9uO1xuXG5cdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cblx0dGhpcy51c2VDb3VudCA9IDA7XG5cdHRoaXMucmVmZXJlbmNlQ291bnQgPSAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFByb3BlcnR5TWl4ZXIucHJvdG90eXBlLCB7XG5cblx0Ly8gYWNjdW11bGF0ZSBkYXRhIGluIHRoZSAnaW5jb21pbmcnIHJlZ2lvbiBpbnRvICdhY2N1PGk+J1xuXHRhY2N1bXVsYXRlOiBmdW5jdGlvbiAoIGFjY3VJbmRleCwgd2VpZ2h0ICkge1xuXG5cdFx0Ly8gbm90ZTogaGFwcGlseSBhY2N1bXVsYXRpbmcgbm90aGluZyB3aGVuIHdlaWdodCA9IDAsIHRoZSBjYWxsZXIga25vd3Ncblx0XHQvLyB0aGUgd2VpZ2h0IGFuZCBzaG91bGRuJ3QgaGF2ZSBtYWRlIHRoZSBjYWxsIGluIHRoZSBmaXJzdCBwbGFjZVxuXG5cdFx0dmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGUsXG5cblx0XHRcdGN1cnJlbnRXZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQ7XG5cblx0XHRpZiAoIGN1cnJlbnRXZWlnaHQgPT09IDAgKSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGluY29taW5nICogd2VpZ2h0XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgaSBdID0gYnVmZmVyWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudFdlaWdodCA9IHdlaWdodDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGFjY3VOICsgaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdFx0Y3VycmVudFdlaWdodCArPSB3ZWlnaHQ7XG5cdFx0XHR2YXIgbWl4ID0gd2VpZ2h0IC8gY3VycmVudFdlaWdodDtcblx0XHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbiggYnVmZmVyLCBvZmZzZXQsIDAsIG1peCwgc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSBjdXJyZW50V2VpZ2h0O1xuXG5cdH0sXG5cblx0Ly8gYXBwbHkgdGhlIHN0YXRlIG9mICdhY2N1PGk+JyB0byB0aGUgYmluZGluZyB3aGVuIGFjY3VzIGRpZmZlclxuXHRhcHBseTogZnVuY3Rpb24gKCBhY2N1SW5kZXggKSB7XG5cblx0XHR2YXIgc3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdG9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSxcblxuXHRcdFx0d2VpZ2h0ID0gdGhpcy5jdW11bGF0aXZlV2VpZ2h0LFxuXG5cdFx0XHRiaW5kaW5nID0gdGhpcy5iaW5kaW5nO1xuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcblxuXHRcdGlmICggd2VpZ2h0IDwgMSApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBvcmlnaW5hbCAqICggMSAtIGN1bXVsYXRpdmVXZWlnaHQgKVxuXG5cdFx0XHR2YXIgb3JpZ2luYWxWYWx1ZU9mZnNldCA9IHN0cmlkZSAqIDM7XG5cblx0XHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbihcblx0XHRcdFx0YnVmZmVyLCBvZmZzZXQsIG9yaWdpbmFsVmFsdWVPZmZzZXQsIDEgLSB3ZWlnaHQsIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSBzdHJpZGUsIGUgPSBzdHJpZGUgKyBzdHJpZGU7IGkgIT09IGU7ICsrIGkgKSB7XG5cblx0XHRcdGlmICggYnVmZmVyWyBpIF0gIT09IGJ1ZmZlclsgaSArIHN0cmlkZSBdICkge1xuXG5cdFx0XHRcdC8vIHZhbHVlIGhhcyBjaGFuZ2VkIC0+IHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0XHRcdGJpbmRpbmcuc2V0VmFsdWUoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHQvLyByZW1lbWJlciB0aGUgc3RhdGUgb2YgdGhlIGJvdW5kIHByb3BlcnR5IGFuZCBjb3B5IGl0IHRvIGJvdGggYWNjdXNcblx0c2F2ZU9yaWdpbmFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBiaW5kaW5nID0gdGhpcy5iaW5kaW5nO1xuXG5cdFx0dmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG9yaWdpbmFsVmFsdWVPZmZzZXQgPSBzdHJpZGUgKiAzO1xuXG5cdFx0YmluZGluZy5nZXRWYWx1ZSggYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7XG5cblx0XHQvLyBhY2N1WzAuLjFdIDo9IG9yaWcgLS0gaW5pdGlhbGx5IGRldGVjdCBjaGFuZ2VzIGFnYWluc3QgdGhlIG9yaWdpbmFsXG5cdFx0Zm9yICggdmFyIGkgPSBzdHJpZGUsIGUgPSBvcmlnaW5hbFZhbHVlT2Zmc2V0OyBpICE9PSBlOyArKyBpICkge1xuXG5cdFx0XHRidWZmZXJbIGkgXSA9IGJ1ZmZlclsgb3JpZ2luYWxWYWx1ZU9mZnNldCArICggaSAlIHN0cmlkZSApIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXG5cdH0sXG5cblx0Ly8gYXBwbHkgdGhlIHN0YXRlIHByZXZpb3VzbHkgdGFrZW4gdmlhICdzYXZlT3JpZ2luYWxTdGF0ZScgdG8gdGhlIGJpbmRpbmdcblx0cmVzdG9yZU9yaWdpbmFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gdGhpcy52YWx1ZVNpemUgKiAzO1xuXHRcdHRoaXMuYmluZGluZy5zZXRWYWx1ZSggdGhpcy5idWZmZXIsIG9yaWdpbmFsVmFsdWVPZmZzZXQgKTtcblxuXHR9LFxuXG5cblx0Ly8gbWl4IGZ1bmN0aW9uc1xuXG5cdF9zZWxlY3Q6IGZ1bmN0aW9uICggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCwgc3RyaWRlICkge1xuXG5cdFx0aWYgKCB0ID49IDAuNSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdFx0YnVmZmVyWyBkc3RPZmZzZXQgKyBpIF0gPSBidWZmZXJbIHNyY09mZnNldCArIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0X3NsZXJwOiBmdW5jdGlvbiAoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQgKSB7XG5cblx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIHNyY09mZnNldCwgdCApO1xuXG5cdH0sXG5cblx0X2xlcnA6IGZ1bmN0aW9uICggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCwgc3RyaWRlICkge1xuXG5cdFx0dmFyIHMgPSAxIC0gdDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHR2YXIgaiA9IGRzdE9mZnNldCArIGk7XG5cblx0XHRcdGJ1ZmZlclsgaiBdID0gYnVmZmVyWyBqIF0gKiBzICsgYnVmZmVyWyBzcmNPZmZzZXQgKyBpIF0gKiB0O1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIHJlZmVyZW5jZSB0byBhIHJlYWwgcHJvcGVydHkgaW4gdGhlIHNjZW5lIGdyYXBoLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuLy8gQ2hhcmFjdGVycyBbXS46LyBhcmUgcmVzZXJ2ZWQgZm9yIHRyYWNrIGJpbmRpbmcgc3ludGF4LlxudmFyIFJFU0VSVkVEX0NIQVJTX1JFID0gJ1xcXFxbXFxcXF1cXFxcLjpcXFxcLyc7XG5cbmZ1bmN0aW9uIENvbXBvc2l0ZSggdGFyZ2V0R3JvdXAsIHBhdGgsIG9wdGlvbmFsUGFyc2VkUGF0aCApIHtcblxuXHR2YXIgcGFyc2VkUGF0aCA9IG9wdGlvbmFsUGFyc2VkUGF0aCB8fCBQcm9wZXJ0eUJpbmRpbmcucGFyc2VUcmFja05hbWUoIHBhdGggKTtcblxuXHR0aGlzLl90YXJnZXRHcm91cCA9IHRhcmdldEdyb3VwO1xuXHR0aGlzLl9iaW5kaW5ncyA9IHRhcmdldEdyb3VwLnN1YnNjcmliZV8oIHBhdGgsIHBhcnNlZFBhdGggKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBDb21wb3NpdGUucHJvdG90eXBlLCB7XG5cblx0Z2V0VmFsdWU6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpOyAvLyBiaW5kIGFsbCBiaW5kaW5nXG5cblx0XHR2YXIgZmlyc3RWYWxpZEluZGV4ID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0YmluZGluZyA9IHRoaXMuX2JpbmRpbmdzWyBmaXJzdFZhbGlkSW5kZXggXTtcblxuXHRcdC8vIGFuZCBvbmx5IGNhbGwgLmdldFZhbHVlIG9uIHRoZSBmaXJzdFxuXHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkgYmluZGluZy5nZXRWYWx1ZSggYXJyYXksIG9mZnNldCApO1xuXG5cdH0sXG5cblx0c2V0VmFsdWU6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uc2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uYmluZCgpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dW5iaW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIHZhciBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLnVuYmluZCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5cbmZ1bmN0aW9uIFByb3BlcnR5QmluZGluZyggcm9vdE5vZGUsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0dGhpcy5wYXRoID0gcGF0aDtcblx0dGhpcy5wYXJzZWRQYXRoID0gcGFyc2VkUGF0aCB8fCBQcm9wZXJ0eUJpbmRpbmcucGFyc2VUcmFja05hbWUoIHBhdGggKTtcblxuXHR0aGlzLm5vZGUgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHJvb3ROb2RlLCB0aGlzLnBhcnNlZFBhdGgubm9kZU5hbWUgKSB8fCByb290Tm9kZTtcblxuXHR0aGlzLnJvb3ROb2RlID0gcm9vdE5vZGU7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUHJvcGVydHlCaW5kaW5nLCB7XG5cblx0Q29tcG9zaXRlOiBDb21wb3NpdGUsXG5cblx0Y3JlYXRlOiBmdW5jdGlvbiAoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHRpZiAoICEgKCByb290ICYmIHJvb3QuaXNBbmltYXRpb25PYmplY3RHcm91cCApICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZyggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHQvKipcblx0ICogUmVwbGFjZXMgc3BhY2VzIHdpdGggdW5kZXJzY29yZXMgYW5kIHJlbW92ZXMgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycyBmcm9tXG5cdCAqIG5vZGUgbmFtZXMsIHRvIGVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggcGFyc2VUcmFja05hbWUoKS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9kZSBuYW1lIHRvIGJlIHNhbml0aXplZC5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0c2FuaXRpemVOb2RlTmFtZTogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcmVzZXJ2ZWRSZSA9IG5ldyBSZWdFeHAoICdbJyArIFJFU0VSVkVEX0NIQVJTX1JFICsgJ10nLCAnZycgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzYW5pdGl6ZU5vZGVOYW1lKCBuYW1lICkge1xuXG5cdFx0XHRyZXR1cm4gbmFtZS5yZXBsYWNlKCAvXFxzL2csICdfJyApLnJlcGxhY2UoIHJlc2VydmVkUmUsICcnICk7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdHBhcnNlVHJhY2tOYW1lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBBdHRlbXB0cyB0byBhbGxvdyBub2RlIG5hbWVzIGZyb20gYW55IGxhbmd1YWdlLiBFUzUncyBgXFx3YCByZWdleHAgbWF0Y2hlc1xuXHRcdC8vIG9ubHkgbGF0aW4gY2hhcmFjdGVycywgYW5kIHRoZSB1bmljb2RlIFxccHtMfSBpcyBub3QgeWV0IHN1cHBvcnRlZC4gU29cblx0XHQvLyBpbnN0ZWFkLCB3ZSBleGNsdWRlIHJlc2VydmVkIGNoYXJhY3RlcnMgYW5kIG1hdGNoIGV2ZXJ5dGhpbmcgZWxzZS5cblx0XHR2YXIgd29yZENoYXIgPSAnW14nICsgUkVTRVJWRURfQ0hBUlNfUkUgKyAnXSc7XG5cdFx0dmFyIHdvcmRDaGFyT3JEb3QgPSAnW14nICsgUkVTRVJWRURfQ0hBUlNfUkUucmVwbGFjZSggJ1xcXFwuJywgJycgKSArICddJztcblxuXHRcdC8vIFBhcmVudCBkaXJlY3RvcmllcywgZGVsaW1pdGVkIGJ5ICcvJyBvciAnOicuIEN1cnJlbnRseSB1bnVzZWQsIGJ1dCBtdXN0XG5cdFx0Ly8gYmUgbWF0Y2hlZCB0byBwYXJzZSB0aGUgcmVzdCBvZiB0aGUgdHJhY2sgbmFtZS5cblx0XHR2YXIgZGlyZWN0b3J5UmUgPSAvKCg/OldDK1tcXC86XSkqKS8uc291cmNlLnJlcGxhY2UoICdXQycsIHdvcmRDaGFyICk7XG5cblx0XHQvLyBUYXJnZXQgbm9kZS4gTWF5IGNvbnRhaW4gd29yZCBjaGFyYWN0ZXJzIChhLXpBLVowLTlfKSBhbmQgJy4nIG9yICctJy5cblx0XHR2YXIgbm9kZVJlID0gLyhXQ09EKyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDT0QnLCB3b3JkQ2hhck9yRG90ICk7XG5cblx0XHQvLyBPYmplY3Qgb24gdGFyZ2V0IG5vZGUsIGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkXG5cdFx0Ly8gY2hhcmFjdGVycy4gQWNjZXNzb3IgbWF5IGNvbnRhaW4gYW55IGNoYXJhY3RlciBleGNlcHQgY2xvc2luZyBicmFja2V0LlxuXHRcdHZhciBvYmplY3RSZSA9IC8oPzpcXC4oV0MrKSg/OlxcWyguKylcXF0pPyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDJywgd29yZENoYXIgKTtcblxuXHRcdC8vIFByb3BlcnR5IGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heVxuXHRcdC8vIGNvbnRhaW4gYW55IG5vbi1icmFja2V0IGNoYXJhY3RlcnMuXG5cdFx0dmFyIHByb3BlcnR5UmUgPSAvXFwuKFdDKykoPzpcXFsoLispXFxdKT8vLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCB3b3JkQ2hhciApO1xuXG5cdFx0dmFyIHRyYWNrUmUgPSBuZXcgUmVnRXhwKCAnJ1xuXHRcdFx0KyAnXidcblx0XHRcdCsgZGlyZWN0b3J5UmVcblx0XHRcdCsgbm9kZVJlXG5cdFx0XHQrIG9iamVjdFJlXG5cdFx0XHQrIHByb3BlcnR5UmVcblx0XHRcdCsgJyQnXG5cdFx0KTtcblxuXHRcdHZhciBzdXBwb3J0ZWRPYmplY3ROYW1lcyA9IFsgJ21hdGVyaWFsJywgJ21hdGVyaWFscycsICdib25lcycgXTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBwYXJzZVRyYWNrTmFtZSggdHJhY2tOYW1lICkge1xuXG5cdFx0XHR2YXIgbWF0Y2hlcyA9IHRyYWNrUmUuZXhlYyggdHJhY2tOYW1lICk7XG5cblx0XHRcdGlmICggISBtYXRjaGVzICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Byb3BlcnR5QmluZGluZzogQ2Fubm90IHBhcnNlIHRyYWNrTmFtZTogJyArIHRyYWNrTmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciByZXN1bHRzID0ge1xuXHRcdFx0XHQvLyBkaXJlY3RvcnlOYW1lOiBtYXRjaGVzWyAxIF0sIC8vICh0c2NodykgY3VycmVudGx5IHVudXNlZFxuXHRcdFx0XHRub2RlTmFtZTogbWF0Y2hlc1sgMiBdLFxuXHRcdFx0XHRvYmplY3ROYW1lOiBtYXRjaGVzWyAzIF0sXG5cdFx0XHRcdG9iamVjdEluZGV4OiBtYXRjaGVzWyA0IF0sXG5cdFx0XHRcdHByb3BlcnR5TmFtZTogbWF0Y2hlc1sgNSBdLCAvLyByZXF1aXJlZFxuXHRcdFx0XHRwcm9wZXJ0eUluZGV4OiBtYXRjaGVzWyA2IF1cblx0XHRcdH07XG5cblx0XHRcdHZhciBsYXN0RG90ID0gcmVzdWx0cy5ub2RlTmFtZSAmJiByZXN1bHRzLm5vZGVOYW1lLmxhc3RJbmRleE9mKCAnLicgKTtcblxuXHRcdFx0aWYgKCBsYXN0RG90ICE9PSB1bmRlZmluZWQgJiYgbGFzdERvdCAhPT0gLSAxICkge1xuXG5cdFx0XHRcdHZhciBvYmplY3ROYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIGxhc3REb3QgKyAxICk7XG5cblx0XHRcdFx0Ly8gT2JqZWN0IG5hbWVzIG11c3QgYmUgY2hlY2tlZCBhZ2FpbnN0IGEgd2hpdGVsaXN0LiBPdGhlcndpc2UsIHRoZXJlXG5cdFx0XHRcdC8vIGlzIG5vIHdheSB0byBwYXJzZSAnZm9vLmJhci5iYXonOiAnYmF6JyBtdXN0IGJlIGEgcHJvcGVydHksIGJ1dFxuXHRcdFx0XHQvLyAnYmFyJyBjb3VsZCBiZSB0aGUgb2JqZWN0TmFtZSwgb3IgcGFydCBvZiBhIG5vZGVOYW1lICh3aGljaCBjYW5cblx0XHRcdFx0Ly8gaW5jbHVkZSAnLicgY2hhcmFjdGVycykuXG5cdFx0XHRcdGlmICggc3VwcG9ydGVkT2JqZWN0TmFtZXMuaW5kZXhPZiggb2JqZWN0TmFtZSApICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0XHRyZXN1bHRzLm5vZGVOYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIDAsIGxhc3REb3QgKTtcblx0XHRcdFx0XHRyZXN1bHRzLm9iamVjdE5hbWUgPSBvYmplY3ROYW1lO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlc3VsdHMucHJvcGVydHlOYW1lID09PSBudWxsIHx8IHJlc3VsdHMucHJvcGVydHlOYW1lLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdQcm9wZXJ0eUJpbmRpbmc6IGNhbiBub3QgcGFyc2UgcHJvcGVydHlOYW1lIGZyb20gdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRmaW5kTm9kZTogZnVuY3Rpb24gKCByb290LCBub2RlTmFtZSApIHtcblxuXHRcdGlmICggISBub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gXCJcIiB8fCBub2RlTmFtZSA9PT0gXCJyb290XCIgfHwgbm9kZU5hbWUgPT09IFwiLlwiIHx8IG5vZGVOYW1lID09PSAtIDEgfHwgbm9kZU5hbWUgPT09IHJvb3QubmFtZSB8fCBub2RlTmFtZSA9PT0gcm9vdC51dWlkICkge1xuXG5cdFx0XHRyZXR1cm4gcm9vdDtcblxuXHRcdH1cblxuXHRcdC8vIHNlYXJjaCBpbnRvIHNrZWxldG9uIGJvbmVzLlxuXHRcdGlmICggcm9vdC5za2VsZXRvbiApIHtcblxuXHRcdFx0dmFyIGJvbmUgPSByb290LnNrZWxldG9uLmdldEJvbmVCeU5hbWUoIG5vZGVOYW1lICk7XG5cblx0XHRcdGlmICggYm9uZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBib25lO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBzZWFyY2ggaW50byBub2RlIHN1YnRyZWUuXG5cdFx0aWYgKCByb290LmNoaWxkcmVuICkge1xuXG5cdFx0XHR2YXIgc2VhcmNoTm9kZVN1YnRyZWUgPSBmdW5jdGlvbiAoIGNoaWxkcmVuICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjaGlsZE5vZGUgPSBjaGlsZHJlblsgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCBjaGlsZE5vZGUubmFtZSA9PT0gbm9kZU5hbWUgfHwgY2hpbGROb2RlLnV1aWQgPT09IG5vZGVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gY2hpbGROb2RlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHJlc3VsdCA9IHNlYXJjaE5vZGVTdWJ0cmVlKCBjaGlsZE5vZGUuY2hpbGRyZW4gKTtcblxuXHRcdFx0XHRcdGlmICggcmVzdWx0ICkgcmV0dXJuIHJlc3VsdDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH07XG5cblx0XHRcdHZhciBzdWJUcmVlTm9kZSA9IHNlYXJjaE5vZGVTdWJ0cmVlKCByb290LmNoaWxkcmVuICk7XG5cblx0XHRcdGlmICggc3ViVHJlZU5vZGUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHN1YlRyZWVOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZSwgeyAvLyBwcm90b3R5cGUsIGNvbnRpbnVlZFxuXG5cdC8vIHRoZXNlIGFyZSB1c2VkIHRvIFwiYmluZFwiIGEgbm9uZXhpc3RlbnQgcHJvcGVydHlcblx0X2dldFZhbHVlX3VuYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7fSxcblx0X3NldFZhbHVlX3VuYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRCaW5kaW5nVHlwZToge1xuXHRcdERpcmVjdDogMCxcblx0XHRFbnRpcmVBcnJheTogMSxcblx0XHRBcnJheUVsZW1lbnQ6IDIsXG5cdFx0SGFzRnJvbVRvQXJyYXk6IDNcblx0fSxcblxuXHRWZXJzaW9uaW5nOiB7XG5cdFx0Tm9uZTogMCxcblx0XHROZWVkc1VwZGF0ZTogMSxcblx0XHRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlOiAyXG5cdH0sXG5cblx0R2V0dGVyQnlCaW5kaW5nVHlwZTogW1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfZGlyZWN0KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0YnVmZmVyWyBvZmZzZXQgXSA9IHRoaXMubm9kZVsgdGhpcy5wcm9wZXJ0eU5hbWUgXTtcblxuXHRcdH0sXG5cblx0XHRmdW5jdGlvbiBnZXRWYWx1ZV9hcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdHZhciBzb3VyY2UgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHNvdXJjZS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKysgXSA9IHNvdXJjZVsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfYXJyYXlFbGVtZW50KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0YnVmZmVyWyBvZmZzZXQgXSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF07XG5cblx0XHR9LFxuXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfdG9BcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS50b0FycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdF0sXG5cblx0U2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmc6IFtcblxuXHRcdFtcblx0XHRcdC8vIERpcmVjdFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdF0sIFtcblxuXHRcdFx0Ly8gRW50aXJlQXJyYXlcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHZhciBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR2YXIgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dmFyIGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XSwgW1xuXG5cdFx0XHQvLyBBcnJheUVsZW1lbnRcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlFbGVtZW50KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRdLCBbXG5cblx0XHRcdC8vIEhhc1RvRnJvbUFycmF5XG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2Zyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2Zyb21BcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XVxuXG5cdF0sXG5cblx0Z2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlX3VuYm91bmQoIHRhcmdldEFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTtcblx0XHR0aGlzLmdldFZhbHVlKCB0YXJnZXRBcnJheSwgb2Zmc2V0ICk7XG5cblx0XHQvLyBOb3RlOiBUaGlzIGNsYXNzIHVzZXMgYSBTdGF0ZSBwYXR0ZXJuIG9uIGEgcGVyLW1ldGhvZCBiYXNpczpcblx0XHQvLyAnYmluZCcgc2V0cyAndGhpcy5nZXRWYWx1ZScgLyAnc2V0VmFsdWUnIGFuZCBzaGFkb3dzIHRoZVxuXHRcdC8vIHByb3RvdHlwZSB2ZXJzaW9uIG9mIHRoZXNlIG1ldGhvZHMgd2l0aCBvbmUgdGhhdCByZXByZXNlbnRzXG5cdFx0Ly8gdGhlIGJvdW5kIHN0YXRlLiBXaGVuIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQsIHRoZSBtZXRob2RzXG5cdFx0Ly8gYmVjb21lIG5vLW9wcy5cblxuXHR9LFxuXG5cdHNldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZV91bmJvdW5kKCBzb3VyY2VBcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7XG5cdFx0dGhpcy5zZXRWYWx1ZSggc291cmNlQXJyYXksIG9mZnNldCApO1xuXG5cdH0sXG5cblx0Ly8gY3JlYXRlIGdldHRlciAvIHNldHRlciBwYWlyIGZvciBhIHByb3BlcnR5IGluIHRoZSBzY2VuZSBncmFwaFxuXHRiaW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdGFyZ2V0T2JqZWN0ID0gdGhpcy5ub2RlLFxuXHRcdFx0cGFyc2VkUGF0aCA9IHRoaXMucGFyc2VkUGF0aCxcblxuXHRcdFx0b2JqZWN0TmFtZSA9IHBhcnNlZFBhdGgub2JqZWN0TmFtZSxcblx0XHRcdHByb3BlcnR5TmFtZSA9IHBhcnNlZFBhdGgucHJvcGVydHlOYW1lLFxuXHRcdFx0cHJvcGVydHlJbmRleCA9IHBhcnNlZFBhdGgucHJvcGVydHlJbmRleDtcblxuXHRcdGlmICggISB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdHRhcmdldE9iamVjdCA9IFByb3BlcnR5QmluZGluZy5maW5kTm9kZSggdGhpcy5yb290Tm9kZSwgcGFyc2VkUGF0aC5ub2RlTmFtZSApIHx8IHRoaXMucm9vdE5vZGU7XG5cblx0XHRcdHRoaXMubm9kZSA9IHRhcmdldE9iamVjdDtcblxuXHRcdH1cblxuXHRcdC8vIHNldCBmYWlsIHN0YXRlIHNvIHdlIGNhbiBqdXN0ICdyZXR1cm4nIG9uIGVycm9yXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlX3VuYXZhaWxhYmxlO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmF2YWlsYWJsZTtcblxuXHRcdC8vIGVuc3VyZSB0aGVyZSBpcyBhIHZhbHVlIG5vZGVcblx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0ICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIG5vZGUgZm9yIHRyYWNrOiAnICsgdGhpcy5wYXRoICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3ROYW1lICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0SW5kZXggPSBwYXJzZWRQYXRoLm9iamVjdEluZGV4O1xuXG5cdFx0XHQvLyBzcGVjaWFsIGNhc2VzIHdlcmUgd2UgbmVlZCB0byByZWFjaCBkZWVwZXIgaW50byB0aGUgaGllcmFyY2h5IHRvIGdldCB0aGUgZmFjZSBtYXRlcmlhbHMuLi4uXG5cdFx0XHRzd2l0Y2ggKCBvYmplY3ROYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ21hdGVyaWFscyc6XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWwuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXRlcmlhbHMgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWxzIGFycmF5LicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHM7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdib25lcyc6XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0LnNrZWxldG9uICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gYm9uZXMgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgc2tlbGV0b24uJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gcG90ZW50aWFsIGZ1dHVyZSBvcHRpbWl6YXRpb246IHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlclxuXHRcdFx0XHRcdC8vIGFuZCBjb252ZXJ0IHRoZSBpbnRlZ2VyIHN0cmluZyB0byBhIHRydWUgaW50ZWdlci5cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5za2VsZXRvbi5ib25lcztcblxuXHRcdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0YXJnZXRPYmplY3QubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgaSBdLm5hbWUgPT09IG9iamVjdEluZGV4ICkge1xuXG5cdFx0XHRcdFx0XHRcdG9iamVjdEluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBvYmplY3ROYW1lIG9mIG5vZGUgdW5kZWZpbmVkLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0aWYgKCBvYmplY3RJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBvYmplY3RJbmRleCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gYmluZCB0byBvYmplY3RJbmRleCBvZiBvYmplY3ROYW1lLCBidXQgaXMgdW5kZWZpbmVkLicsIHRoaXMsIHRhcmdldE9iamVjdCApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0WyBvYmplY3RJbmRleCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXNvbHZlIHByb3BlcnR5XG5cdFx0dmFyIG5vZGVQcm9wZXJ0eSA9IHRhcmdldE9iamVjdFsgcHJvcGVydHlOYW1lIF07XG5cblx0XHRpZiAoIG5vZGVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBwYXJzZWRQYXRoLm5vZGVOYW1lO1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIHByb3BlcnR5IGZvciB0cmFjazogJyArIG5vZGVOYW1lICtcblx0XHRcdFx0Jy4nICsgcHJvcGVydHlOYW1lICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJywgdGFyZ2V0T2JqZWN0ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBkZXRlcm1pbmUgdmVyc2lvbmluZyBzY2hlbWVcblx0XHR2YXIgdmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5Ob25lO1xuXG5cdFx0dGhpcy50YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3Q7XG5cblx0XHRpZiAoIHRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSAhPT0gdW5kZWZpbmVkICkgeyAvLyBtYXRlcmlhbFxuXG5cdFx0XHR2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5lZWRzVXBkYXRlO1xuXG5cdFx0fSBlbHNlIGlmICggdGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgIT09IHVuZGVmaW5lZCApIHsgLy8gbm9kZSB0cmFuc2Zvcm1cblxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5NYXRyaXhXb3JsZE5lZWRzVXBkYXRlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZGV0ZXJtaW5lIGhvdyB0aGUgcHJvcGVydHkgZ2V0cyBib3VuZFxuXHRcdHZhciBiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuRGlyZWN0O1xuXG5cdFx0aWYgKCBwcm9wZXJ0eUluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGFjY2VzcyBhIHN1YiBlbGVtZW50IG9mIHRoZSBwcm9wZXJ0eSBhcnJheSAob25seSBwcmltaXRpdmVzIGFyZSBzdXBwb3J0ZWQgcmlnaHQgbm93KVxuXG5cdFx0XHRpZiAoIHByb3BlcnR5TmFtZSA9PT0gXCJtb3JwaFRhcmdldEluZmx1ZW5jZXNcIiApIHtcblxuXHRcdFx0XHQvLyBwb3RlbnRpYWwgb3B0aW1pemF0aW9uLCBza2lwIHRoaXMgaWYgcHJvcGVydHlJbmRleCBpcyBhbHJlYWR5IGFuIGludGVnZXIsIGFuZCBjb252ZXJ0IHRoZSBpbnRlZ2VyIHN0cmluZyB0byBhIHRydWUgaW50ZWdlci5cblxuXHRcdFx0XHQvLyBzdXBwb3J0IHJlc29sdmluZyBtb3JwaFRhcmdldCBuYW1lcyBpbnRvIGluZGljZXMuXG5cdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QuZ2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2F1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkuJywgdGhpcyApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3QuZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QuZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2F1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMubm9kZS5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb25bIGkgXS5uYW1lID09PSBwcm9wZXJ0eUluZGV4ICkge1xuXG5cdFx0XHRcdFx0XHRcdHByb3BlcnR5SW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QuZ2VvbWV0cnkubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2F1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkubW9ycGhUYXJnZXRzLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMubm9kZS5nZW9tZXRyeS5tb3JwaFRhcmdldHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaFRhcmdldHNbIGkgXS5uYW1lID09PSBwcm9wZXJ0eUluZGV4ICkge1xuXG5cdFx0XHRcdFx0XHRcdHByb3BlcnR5SW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuQXJyYXlFbGVtZW50O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cdFx0XHR0aGlzLnByb3BlcnR5SW5kZXggPSBwcm9wZXJ0eUluZGV4O1xuXG5cdFx0fSBlbHNlIGlmICggbm9kZVByb3BlcnR5LmZyb21BcnJheSAhPT0gdW5kZWZpbmVkICYmIG5vZGVQcm9wZXJ0eS50b0FycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG11c3QgdXNlIGNvcHkgZm9yIE9iamVjdDNELkV1bGVyL1F1YXRlcm5pb25cblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkhhc0Zyb21Ub0FycmF5O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cblx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCBub2RlUHJvcGVydHkgKSApIHtcblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkVudGlyZUFycmF5O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcblxuXHRcdH1cblxuXHRcdC8vIHNlbGVjdCBnZXR0ZXIgLyBzZXR0ZXJcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5HZXR0ZXJCeUJpbmRpbmdUeXBlWyBiaW5kaW5nVHlwZSBdO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nWyBiaW5kaW5nVHlwZSBdWyB2ZXJzaW9uaW5nIF07XG5cblx0fSxcblxuXHR1bmJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubm9kZSA9IG51bGw7XG5cblx0XHQvLyBiYWNrIHRvIHRoZSBwcm90b3R5cGUgdmVyc2lvbiBvZiBnZXRWYWx1ZSAvIHNldFZhbHVlXG5cdFx0Ly8gbm90ZTogYXZvaWRpbmcgdG8gbXV0YXRlIHRoZSBzaGFwZSBvZiAndGhpcycgdmlhICdkZWxldGUnXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlX3VuYm91bmQ7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYm91bmQ7XG5cblx0fVxuXG59ICk7XG5cbi8vIVxcIERFQ0xBUkUgQUxJQVMgQUZURVIgYXNzaWduIHByb3RvdHlwZSAhXG5PYmplY3QuYXNzaWduKCBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLCB7XG5cblx0Ly8gaW5pdGlhbCBzdGF0ZSBvZiB0aGVzZSBtZXRob2RzIHRoYXQgY2FsbHMgJ2JpbmQnXG5cdF9nZXRWYWx1ZV91bmJvdW5kOiBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLmdldFZhbHVlLFxuXHRfc2V0VmFsdWVfdW5ib3VuZDogUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5zZXRWYWx1ZSxcblxufSApO1xuXG4vKipcbiAqXG4gKiBBIGdyb3VwIG9mIG9iamVjdHMgdGhhdCByZWNlaXZlcyBhIHNoYXJlZCBhbmltYXRpb24gc3RhdGUuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogIC0gQWRkIG9iamVjdHMgeW91IHdvdWxkIG90aGVyd2lzZSBwYXNzIGFzICdyb290JyB0byB0aGVcbiAqICAgIGNvbnN0cnVjdG9yIG9yIHRoZSAuY2xpcEFjdGlvbiBtZXRob2Qgb2YgQW5pbWF0aW9uTWl4ZXIuXG4gKlxuICogIC0gSW5zdGVhZCBwYXNzIHRoaXMgb2JqZWN0IGFzICdyb290Jy5cbiAqXG4gKiAgLSBZb3UgY2FuIGFsc28gYWRkIGFuZCByZW1vdmUgb2JqZWN0cyBsYXRlciB3aGVuIHRoZSBtaXhlclxuICogICAgaXMgcnVubmluZy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgIE9iamVjdHMgb2YgdGhpcyBjbGFzcyBhcHBlYXIgYXMgb25lIG9iamVjdCB0byB0aGUgbWl4ZXIsXG4gKiAgICBzbyBjYWNoZSBjb250cm9sIG9mIHRoZSBpbmRpdmlkdWFsIG9iamVjdHMgbXVzdCBiZSBkb25lXG4gKiAgICBvbiB0aGUgZ3JvdXAuXG4gKlxuICogTGltaXRhdGlvbjpcbiAqXG4gKiAgLSBUaGUgYW5pbWF0ZWQgcHJvcGVydGllcyBtdXN0IGJlIGNvbXBhdGlibGUgYW1vbmcgdGhlXG4gKiAgICBhbGwgb2JqZWN0cyBpbiB0aGUgZ3JvdXAuXG4gKlxuICogIC0gQSBzaW5nbGUgcHJvcGVydHkgY2FuIGVpdGhlciBiZSBjb250cm9sbGVkIHRocm91Z2ggYVxuICogICAgdGFyZ2V0IGdyb3VwIG9yIGRpcmVjdGx5LCBidXQgbm90IGJvdGguXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbk9iamVjdEdyb3VwKCkge1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdC8vIGNhY2hlZCBvYmplY3RzIGZvbGxvd2VkIGJ5IHRoZSBhY3RpdmUgb25lc1xuXHR0aGlzLl9vYmplY3RzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXG5cdHRoaXMubkNhY2hlZE9iamVjdHNfID0gMDsgLy8gdGhyZXNob2xkXG5cdC8vIG5vdGU6IHJlYWQgYnkgUHJvcGVydHlCaW5kaW5nLkNvbXBvc2l0ZVxuXG5cdHZhciBpbmRpY2VzID0ge307XG5cdHRoaXMuX2luZGljZXNCeVVVSUQgPSBpbmRpY2VzOyAvLyBmb3IgYm9va2tlZXBpbmdcblxuXHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0aW5kaWNlc1sgYXJndW1lbnRzWyBpIF0udXVpZCBdID0gaTtcblxuXHR9XG5cblx0dGhpcy5fcGF0aHMgPSBbXTsgLy8gaW5zaWRlOiBzdHJpbmdcblx0dGhpcy5fcGFyc2VkUGF0aHMgPSBbXTsgLy8gaW5zaWRlOiB7IHdlIGRvbid0IGNhcmUsIGhlcmUgfVxuXHR0aGlzLl9iaW5kaW5ncyA9IFtdOyAvLyBpbnNpZGU6IEFycmF5PCBQcm9wZXJ0eUJpbmRpbmcgPlxuXHR0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGggPSB7fTsgLy8gaW5zaWRlOiBpbmRpY2VzIGluIHRoZXNlIGFycmF5c1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dGhpcy5zdGF0cyA9IHtcblxuXHRcdG9iamVjdHM6IHtcblx0XHRcdGdldCB0b3RhbCgpIHtcblxuXHRcdFx0XHRyZXR1cm4gc2NvcGUuX29iamVjdHMubGVuZ3RoO1xuXG5cdFx0XHR9LFxuXHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLnRvdGFsIC0gc2NvcGUubkNhY2hlZE9iamVjdHNfO1xuXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRnZXQgYmluZGluZ3NQZXJPYmplY3QoKSB7XG5cblx0XHRcdHJldHVybiBzY29wZS5fYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQW5pbWF0aW9uT2JqZWN0R3JvdXAucHJvdG90eXBlLCB7XG5cblx0aXNBbmltYXRpb25PYmplY3RHcm91cDogdHJ1ZSxcblxuXHRhZGQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdG5PYmplY3RzID0gb2JqZWN0cy5sZW5ndGgsXG5cdFx0XHRuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGgsXG5cdFx0XHRrbm93bk9iamVjdCA9IHVuZGVmaW5lZDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkLFxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBpbmRleCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIHVua25vd24gb2JqZWN0IC0+IGFkZCBpdCB0byB0aGUgQUNUSVZFIHJlZ2lvblxuXG5cdFx0XHRcdGluZGV4ID0gbk9iamVjdHMgKys7XG5cdFx0XHRcdGluZGljZXNCeVVVSURbIHV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRvYmplY3RzLnB1c2goIG9iamVjdCApO1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRiaW5kaW5nc1sgaiBdLnB1c2goIG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBpbmRleCA8IG5DYWNoZWRPYmplY3RzICkge1xuXG5cdFx0XHRcdGtub3duT2JqZWN0ID0gb2JqZWN0c1sgaW5kZXggXTtcblxuXHRcdFx0XHQvLyBtb3ZlIGV4aXN0aW5nIG9iamVjdCB0byB0aGUgQUNUSVZFIHJlZ2lvblxuXG5cdFx0XHRcdHZhciBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsXG5cdFx0XHRcdFx0bGFzdENhY2hlZE9iamVjdCA9IG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXTtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0Q2FjaGVkT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRvYmplY3RzWyBpbmRleCBdID0gbGFzdENhY2hlZE9iamVjdDtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBmaXJzdEFjdGl2ZUluZGV4O1xuXHRcdFx0XHRvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBvYmplY3Q7XG5cblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdHZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0bGFzdENhY2hlZCA9IGJpbmRpbmdzRm9yUGF0aFsgZmlyc3RBY3RpdmVJbmRleCBdLFxuXHRcdFx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XG5cblx0XHRcdFx0XHRpZiAoIGJpbmRpbmcgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gc2luY2Ugd2UgZG8gbm90IGJvdGhlciB0byBjcmVhdGUgbmV3IGJpbmRpbmdzXG5cdFx0XHRcdFx0XHQvLyBmb3Igb2JqZWN0cyB0aGF0IGFyZSBjYWNoZWQsIHRoZSBiaW5kaW5nIG1heVxuXHRcdFx0XHRcdFx0Ly8gb3IgbWF5IG5vdCBleGlzdFxuXG5cdFx0XHRcdFx0XHRiaW5kaW5nID0gbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoc1sgaiBdLCBwYXJzZWRQYXRoc1sgaiBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3RzWyBpbmRleCBdICE9PSBrbm93bk9iamVjdCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQW5pbWF0aW9uT2JqZWN0R3JvdXA6IERpZmZlcmVudCBvYmplY3RzIHdpdGggdGhlIHNhbWUgVVVJRCAnICtcblx0XHRcdFx0XHQnZGV0ZWN0ZWQuIENsZWFuIHRoZSBjYWNoZXMgb3IgcmVjcmVhdGUgeW91ciBpbmZyYXN0cnVjdHVyZSB3aGVuIHJlbG9hZGluZyBzY2VuZXMuJyApO1xuXG5cdFx0XHR9IC8vIGVsc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IHdoZXJlIHdlIHdhbnQgaXQgdG8gYmVcblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkLFxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IG5DYWNoZWRPYmplY3RzICkge1xuXG5cdFx0XHRcdC8vIG1vdmUgZXhpc3Rpbmcgb2JqZWN0IGludG8gdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHR2YXIgbGFzdENhY2hlZEluZGV4ID0gbkNhY2hlZE9iamVjdHMgKyssXG5cdFx0XHRcdFx0Zmlyc3RBY3RpdmVPYmplY3QgPSBvYmplY3RzWyBsYXN0Q2FjaGVkSW5kZXggXTtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBmaXJzdEFjdGl2ZU9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGZpcnN0QWN0aXZlT2JqZWN0O1xuXG5cdFx0XHRcdGluZGljZXNCeVVVSURbIHV1aWQgXSA9IGxhc3RDYWNoZWRJbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF0gPSBvYmplY3Q7XG5cblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdHZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0Zmlyc3RBY3RpdmUgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdLFxuXHRcdFx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGZpcnN0QWN0aXZlO1xuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH0sXG5cblx0Ly8gcmVtb3ZlICYgZm9yZ2V0XG5cdHVuY2FjaGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdG5PYmplY3RzID0gb2JqZWN0cy5sZW5ndGgsXG5cdFx0XHRuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dmFyIG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGVsZXRlIGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgY2FjaGVkLCBzaHJpbmsgdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHRcdHZhciBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsXG5cdFx0XHRcdFx0XHRsYXN0Q2FjaGVkT2JqZWN0ID0gb2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdLFxuXHRcdFx0XHRcdFx0bGFzdEluZGV4ID0gLS0gbk9iamVjdHMsXG5cdFx0XHRcdFx0XHRsYXN0T2JqZWN0ID0gb2JqZWN0c1sgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHQvLyBsYXN0IGNhY2hlZCBvYmplY3QgdGFrZXMgdGhpcyBvYmplY3QncyBwbGFjZVxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RDYWNoZWRPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7XG5cblx0XHRcdFx0XHQvLyBsYXN0IG9iamVjdCBnb2VzIHRvIHRoZSBhY3RpdmF0ZWQgc2xvdCBhbmQgcG9wXG5cdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdE9iamVjdC51dWlkIF0gPSBmaXJzdEFjdGl2ZUluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3RPYmplY3Q7XG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sXG5cdFx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdFx0bGFzdCA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3Q7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdCBpcyBhY3RpdmUsIGp1c3Qgc3dhcCB3aXRoIHRoZSBsYXN0IGFuZCBwb3BcblxuXHRcdFx0XHRcdHZhciBsYXN0SW5kZXggPSAtLSBuT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RPYmplY3QgPSBvYmplY3RzWyBsYXN0SW5kZXggXTtcblxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RPYmplY3Q7XG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSAvLyBjYWNoZWQgb3IgYWN0aXZlXG5cblx0XHRcdH0gLy8gaWYgb2JqZWN0IGlzIGtub3duXG5cblx0XHR9IC8vIGZvciBhcmd1bWVudHNcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XG5cblx0fSxcblxuXHQvLyBJbnRlcm5hbCBpbnRlcmZhY2UgdXNlZCBieSBiZWZyaWVuZGVkIFByb3BlcnR5QmluZGluZy5Db21wb3NpdGU6XG5cblx0c3Vic2NyaWJlXzogZnVuY3Rpb24gKCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdFx0Ly8gcmV0dXJucyBhbiBhcnJheSBvZiBiaW5kaW5ncyBmb3IgdGhlIGdpdmVuIHBhdGggdGhhdCBpcyBjaGFuZ2VkXG5cdFx0Ly8gYWNjb3JkaW5nIHRvIHRoZSBjb250YWluZWQgb2JqZWN0cyBpbiB0aGUgZ3JvdXBcblxuXHRcdHZhciBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLFxuXHRcdFx0aW5kZXggPSBpbmRpY2VzQnlQYXRoWyBwYXRoIF0sXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIGJpbmRpbmdzWyBpbmRleCBdO1xuXG5cdFx0dmFyIHBhdGhzID0gdGhpcy5fcGF0aHMsXG5cdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0b2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGJpbmRpbmdzRm9yUGF0aCA9IG5ldyBBcnJheSggbk9iamVjdHMgKTtcblxuXHRcdGluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0aW5kaWNlc0J5UGF0aFsgcGF0aCBdID0gaW5kZXg7XG5cblx0XHRwYXRocy5wdXNoKCBwYXRoICk7XG5cdFx0cGFyc2VkUGF0aHMucHVzaCggcGFyc2VkUGF0aCApO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmdzRm9yUGF0aCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSBuQ2FjaGVkT2JqZWN0cywgbiA9IG9iamVjdHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gb2JqZWN0c1sgaSBdO1xuXHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpIF0gPSBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBiaW5kaW5nc0ZvclBhdGg7XG5cblx0fSxcblxuXHR1bnN1YnNjcmliZV86IGZ1bmN0aW9uICggcGF0aCApIHtcblxuXHRcdC8vIHRlbGxzIHRoZSBncm91cCB0byBmb3JnZXQgYWJvdXQgYSBwcm9wZXJ0eSBwYXRoIGFuZCBubyBsb25nZXJcblx0XHQvLyB1cGRhdGUgdGhlIGFycmF5IHByZXZpb3VzbHkgb2J0YWluZWQgd2l0aCAnc3Vic2NyaWJlXydcblxuXHRcdHZhciBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLFxuXHRcdFx0aW5kZXggPSBpbmRpY2VzQnlQYXRoWyBwYXRoIF07XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NJbmRleCA9IGJpbmRpbmdzLmxlbmd0aCAtIDEsXG5cdFx0XHRcdGxhc3RCaW5kaW5ncyA9IGJpbmRpbmdzWyBsYXN0QmluZGluZ3NJbmRleCBdLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NQYXRoID0gcGF0aFsgbGFzdEJpbmRpbmdzSW5kZXggXTtcblxuXHRcdFx0aW5kaWNlc0J5UGF0aFsgbGFzdEJpbmRpbmdzUGF0aCBdID0gaW5kZXg7XG5cblx0XHRcdGJpbmRpbmdzWyBpbmRleCBdID0gbGFzdEJpbmRpbmdzO1xuXHRcdFx0YmluZGluZ3MucG9wKCk7XG5cblx0XHRcdHBhcnNlZFBhdGhzWyBpbmRleCBdID0gcGFyc2VkUGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXJzZWRQYXRocy5wb3AoKTtcblxuXHRcdFx0cGF0aHNbIGluZGV4IF0gPSBwYXRoc1sgbGFzdEJpbmRpbmdzSW5kZXggXTtcblx0XHRcdHBhdGhzLnBvcCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBY3Rpb24gcHJvdmlkZWQgYnkgQW5pbWF0aW9uTWl4ZXIgZm9yIHNjaGVkdWxpbmcgY2xpcCBwbGF5YmFjayBvbiBzcGVjaWZpY1xuICogb2JqZWN0cy5cbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKlxuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkFjdGlvbiggbWl4ZXIsIGNsaXAsIGxvY2FsUm9vdCApIHtcblxuXHR0aGlzLl9taXhlciA9IG1peGVyO1xuXHR0aGlzLl9jbGlwID0gY2xpcDtcblx0dGhpcy5fbG9jYWxSb290ID0gbG9jYWxSb290IHx8IG51bGw7XG5cblx0dmFyIHRyYWNrcyA9IGNsaXAudHJhY2tzLFxuXHRcdG5UcmFja3MgPSB0cmFja3MubGVuZ3RoLFxuXHRcdGludGVycG9sYW50cyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xuXG5cdHZhciBpbnRlcnBvbGFudFNldHRpbmdzID0ge1xuXHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxuXHRcdGVuZGluZ0VuZDogWmVyb0N1cnZhdHVyZUVuZGluZ1xuXHR9O1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdHZhciBpbnRlcnBvbGFudCA9IHRyYWNrc1sgaSBdLmNyZWF0ZUludGVycG9sYW50KCBudWxsICk7XG5cdFx0aW50ZXJwb2xhbnRzWyBpIF0gPSBpbnRlcnBvbGFudDtcblx0XHRpbnRlcnBvbGFudC5zZXR0aW5ncyA9IGludGVycG9sYW50U2V0dGluZ3M7XG5cblx0fVxuXG5cdHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdHRoaXMuX2ludGVycG9sYW50cyA9IGludGVycG9sYW50czsgLy8gYm91bmQgYnkgdGhlIG1peGVyXG5cblx0Ly8gaW5zaWRlOiBQcm9wZXJ0eU1peGVyIChtYW5hZ2VkIGJ5IHRoZSBtaXhlcilcblx0dGhpcy5fcHJvcGVydHlCaW5kaW5ncyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xuXG5cdHRoaXMuX2NhY2hlSW5kZXggPSBudWxsOyAvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyXG5cdHRoaXMuX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsOyAvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyXG5cblx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cblx0dGhpcy5sb29wID0gTG9vcFJlcGVhdDtcblx0dGhpcy5fbG9vcENvdW50ID0gLSAxO1xuXG5cdC8vIGdsb2JhbCBtaXhlciB0aW1lIHdoZW4gdGhlIGFjdGlvbiBpcyB0byBiZSBzdGFydGVkXG5cdC8vIGl0J3Mgc2V0IGJhY2sgdG8gJ251bGwnIHVwb24gc3RhcnQgb2YgdGhlIGFjdGlvblxuXHR0aGlzLl9zdGFydFRpbWUgPSBudWxsO1xuXG5cdC8vIHNjYWxlZCBsb2NhbCB0aW1lIG9mIHRoZSBhY3Rpb25cblx0Ly8gZ2V0cyBjbGFtcGVkIG9yIHdyYXBwZWQgdG8gMC4uY2xpcC5kdXJhdGlvbiBhY2NvcmRpbmcgdG8gbG9vcFxuXHR0aGlzLnRpbWUgPSAwO1xuXG5cdHRoaXMudGltZVNjYWxlID0gMTtcblx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gMTtcblxuXHR0aGlzLndlaWdodCA9IDE7XG5cdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IDE7XG5cblx0dGhpcy5yZXBldGl0aW9ucyA9IEluZmluaXR5OyAvLyBuby4gb2YgcmVwZXRpdGlvbnMgd2hlbiBsb29waW5nXG5cblx0dGhpcy5wYXVzZWQgPSBmYWxzZTsgLy8gdHJ1ZSAtPiB6ZXJvIGVmZmVjdGl2ZSB0aW1lIHNjYWxlXG5cdHRoaXMuZW5hYmxlZCA9IHRydWU7IC8vIGZhbHNlIC0+IHplcm8gZWZmZWN0aXZlIHdlaWdodFxuXG5cdHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgPSBmYWxzZTsvLyBrZWVwIGZlZWRpbmcgdGhlIGxhc3QgZnJhbWU/XG5cblx0dGhpcy56ZXJvU2xvcGVBdFN0YXJ0ID0gdHJ1ZTsvLyBmb3Igc21vb3RoIGludGVycG9sYXRpb24gdy9vIHNlcGFyYXRlXG5cdHRoaXMuemVyb1Nsb3BlQXRFbmQgPSB0cnVlOy8vIGNsaXBzIGZvciBzdGFydCwgbG9vcCBhbmQgZW5kXG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQW5pbWF0aW9uQWN0aW9uLnByb3RvdHlwZSwge1xuXG5cdC8vIFN0YXRlICYgU2NoZWR1bGluZ1xuXG5cdHBsYXk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuX21peGVyLl9hY3RpdmF0ZUFjdGlvbiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLl9taXhlci5fZGVhY3RpdmF0ZUFjdGlvbiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVzZXQoKTtcblxuXHR9LFxuXG5cdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnBhdXNlZCA9IGZhbHNlO1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0XHR0aGlzLnRpbWUgPSAwOyAvLyByZXN0YXJ0IGNsaXBcblx0XHR0aGlzLl9sb29wQ291bnQgPSAtIDE7Ly8gZm9yZ2V0IHByZXZpb3VzIGxvb3BzXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDsvLyBmb3JnZXQgc2NoZWR1bGluZ1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcEZhZGluZygpLnN0b3BXYXJwaW5nKCk7XG5cblx0fSxcblxuXHRpc1J1bm5pbmc6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmVuYWJsZWQgJiYgISB0aGlzLnBhdXNlZCAmJiB0aGlzLnRpbWVTY2FsZSAhPT0gMCAmJlxuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID09PSBudWxsICYmIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbiggdGhpcyApO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJuIHRydWUgd2hlbiBwbGF5IGhhcyBiZWVuIGNhbGxlZFxuXHRpc1NjaGVkdWxlZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbiggdGhpcyApO1xuXG5cdH0sXG5cblx0c3RhcnRBdDogZnVuY3Rpb24gKCB0aW1lICkge1xuXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gdGltZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0TG9vcDogZnVuY3Rpb24gKCBtb2RlLCByZXBldGl0aW9ucyApIHtcblxuXHRcdHRoaXMubG9vcCA9IG1vZGU7XG5cdFx0dGhpcy5yZXBldGl0aW9ucyA9IHJlcGV0aXRpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBXZWlnaHRcblxuXHQvLyBzZXQgdGhlIHdlaWdodCBzdG9wcGluZyBhbnkgc2NoZWR1bGVkIGZhZGluZ1xuXHQvLyBhbHRob3VnaCAuZW5hYmxlZCA9IGZhbHNlIHlpZWxkcyBhbiBlZmZlY3RpdmUgd2VpZ2h0IG9mIHplcm8sIHRoaXNcblx0Ly8gbWV0aG9kIGRvZXMgKm5vdCogY2hhbmdlIC5lbmFibGVkLCBiZWNhdXNlIGl0IHdvdWxkIGJlIGNvbmZ1c2luZ1xuXHRzZXRFZmZlY3RpdmVXZWlnaHQ6IGZ1bmN0aW9uICggd2VpZ2h0ICkge1xuXG5cdFx0dGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XG5cblx0XHQvLyBub3RlOiBzYW1lIGxvZ2ljIGFzIHdoZW4gdXBkYXRlZCBhdCBydW50aW1lXG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gdGhpcy5lbmFibGVkID8gd2VpZ2h0IDogMDtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BGYWRpbmcoKTtcblxuXHR9LFxuXG5cdC8vIHJldHVybiB0aGUgd2VpZ2h0IGNvbnNpZGVyaW5nIGZhZGluZyBhbmQgLmVuYWJsZWRcblx0Z2V0RWZmZWN0aXZlV2VpZ2h0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlV2VpZ2h0O1xuXG5cdH0sXG5cblx0ZmFkZUluOiBmdW5jdGlvbiAoIGR1cmF0aW9uICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKCBkdXJhdGlvbiwgMCwgMSApO1xuXG5cdH0sXG5cblx0ZmFkZU91dDogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDEsIDAgKTtcblxuXHR9LFxuXG5cdGNyb3NzRmFkZUZyb206IGZ1bmN0aW9uICggZmFkZU91dEFjdGlvbiwgZHVyYXRpb24sIHdhcnAgKSB7XG5cblx0XHRmYWRlT3V0QWN0aW9uLmZhZGVPdXQoIGR1cmF0aW9uICk7XG5cdFx0dGhpcy5mYWRlSW4oIGR1cmF0aW9uICk7XG5cblx0XHRpZiAoIHdhcnAgKSB7XG5cblx0XHRcdHZhciBmYWRlSW5EdXJhdGlvbiA9IHRoaXMuX2NsaXAuZHVyYXRpb24sXG5cdFx0XHRcdGZhZGVPdXREdXJhdGlvbiA9IGZhZGVPdXRBY3Rpb24uX2NsaXAuZHVyYXRpb24sXG5cblx0XHRcdFx0c3RhcnRFbmRSYXRpbyA9IGZhZGVPdXREdXJhdGlvbiAvIGZhZGVJbkR1cmF0aW9uLFxuXHRcdFx0XHRlbmRTdGFydFJhdGlvID0gZmFkZUluRHVyYXRpb24gLyBmYWRlT3V0RHVyYXRpb247XG5cblx0XHRcdGZhZGVPdXRBY3Rpb24ud2FycCggMS4wLCBzdGFydEVuZFJhdGlvLCBkdXJhdGlvbiApO1xuXHRcdFx0dGhpcy53YXJwKCBlbmRTdGFydFJhdGlvLCAxLjAsIGR1cmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNyb3NzRmFkZVRvOiBmdW5jdGlvbiAoIGZhZGVJbkFjdGlvbiwgZHVyYXRpb24sIHdhcnAgKSB7XG5cblx0XHRyZXR1cm4gZmFkZUluQWN0aW9uLmNyb3NzRmFkZUZyb20oIHRoaXMsIGR1cmF0aW9uLCB3YXJwICk7XG5cblx0fSxcblxuXHRzdG9wRmFkaW5nOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgd2VpZ2h0SW50ZXJwb2xhbnQgPSB0aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtcblxuXHRcdGlmICggd2VpZ2h0SW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gbnVsbDtcblx0XHRcdHRoaXMuX21peGVyLl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCggd2VpZ2h0SW50ZXJwb2xhbnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gVGltZSBTY2FsZSBDb250cm9sXG5cblx0Ly8gc2V0IHRoZSB0aW1lIHNjYWxlIHN0b3BwaW5nIGFueSBzY2hlZHVsZWQgd2FycGluZ1xuXHQvLyBhbHRob3VnaCAucGF1c2VkID0gdHJ1ZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHRpbWUgc2NhbGUgb2YgemVybywgdGhpc1xuXHQvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLnBhdXNlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcblx0c2V0RWZmZWN0aXZlVGltZVNjYWxlOiBmdW5jdGlvbiAoIHRpbWVTY2FsZSApIHtcblxuXHRcdHRoaXMudGltZVNjYWxlID0gdGltZVNjYWxlO1xuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRoaXMucGF1c2VkID8gMCA6IHRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fSxcblxuXHQvLyByZXR1cm4gdGhlIHRpbWUgc2NhbGUgY29uc2lkZXJpbmcgd2FycGluZyBhbmQgLnBhdXNlZFxuXHRnZXRFZmZlY3RpdmVUaW1lU2NhbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGU7XG5cblx0fSxcblxuXHRzZXREdXJhdGlvbjogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHRoaXMudGltZVNjYWxlID0gdGhpcy5fY2xpcC5kdXJhdGlvbiAvIGR1cmF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcFdhcnBpbmcoKTtcblxuXHR9LFxuXG5cdHN5bmNXaXRoOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdHRoaXMudGltZSA9IGFjdGlvbi50aW1lO1xuXHRcdHRoaXMudGltZVNjYWxlID0gYWN0aW9uLnRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fSxcblxuXHRoYWx0OiBmdW5jdGlvbiAoIGR1cmF0aW9uICkge1xuXG5cdFx0cmV0dXJuIHRoaXMud2FycCggdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlLCAwLCBkdXJhdGlvbiApO1xuXG5cdH0sXG5cblx0d2FycDogZnVuY3Rpb24gKCBzdGFydFRpbWVTY2FsZSwgZW5kVGltZVNjYWxlLCBkdXJhdGlvbiApIHtcblxuXHRcdHZhciBtaXhlciA9IHRoaXMuX21peGVyLCBub3cgPSBtaXhlci50aW1lLFxuXHRcdFx0aW50ZXJwb2xhbnQgPSB0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCxcblxuXHRcdFx0dGltZVNjYWxlID0gdGhpcy50aW1lU2NhbGU7XG5cblx0XHRpZiAoIGludGVycG9sYW50ID09PSBudWxsICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG1peGVyLl9sZW5kQ29udHJvbEludGVycG9sYW50KCk7XG5cdFx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRpbWVzID0gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zLFxuXHRcdFx0dmFsdWVzID0gaW50ZXJwb2xhbnQuc2FtcGxlVmFsdWVzO1xuXG5cdFx0dGltZXNbIDAgXSA9IG5vdztcblx0XHR0aW1lc1sgMSBdID0gbm93ICsgZHVyYXRpb247XG5cblx0XHR2YWx1ZXNbIDAgXSA9IHN0YXJ0VGltZVNjYWxlIC8gdGltZVNjYWxlO1xuXHRcdHZhbHVlc1sgMSBdID0gZW5kVGltZVNjYWxlIC8gdGltZVNjYWxlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdG9wV2FycGluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRpbWVTY2FsZUludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIHRpbWVTY2FsZUludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHRpbWVTY2FsZUludGVycG9sYW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIE9iamVjdCBBY2Nlc3NvcnNcblxuXHRnZXRNaXhlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX21peGVyO1xuXG5cdH0sXG5cblx0Z2V0Q2xpcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2NsaXA7XG5cblx0fSxcblxuXHRnZXRSb290OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fbG9jYWxSb290IHx8IHRoaXMuX21peGVyLl9yb290O1xuXG5cdH0sXG5cblx0Ly8gSW50ZXJuYVxuXG5cdF91cGRhdGU6IGZ1bmN0aW9uICggdGltZSwgZGVsdGFUaW1lLCB0aW1lRGlyZWN0aW9uLCBhY2N1SW5kZXggKSB7XG5cblx0XHQvLyBjYWxsZWQgYnkgdGhlIG1peGVyXG5cblx0XHRpZiAoICEgdGhpcy5lbmFibGVkICkge1xuXG5cdFx0XHQvLyBjYWxsIC5fdXBkYXRlV2VpZ2h0KCkgdG8gdXBkYXRlIC5fZWZmZWN0aXZlV2VpZ2h0XG5cblx0XHRcdHRoaXMuX3VwZGF0ZVdlaWdodCggdGltZSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHN0YXJ0VGltZSA9IHRoaXMuX3N0YXJ0VGltZTtcblxuXHRcdGlmICggc3RhcnRUaW1lICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBjaGVjayBmb3Igc2NoZWR1bGVkIHN0YXJ0IG9mIGFjdGlvblxuXG5cdFx0XHR2YXIgdGltZVJ1bm5pbmcgPSAoIHRpbWUgLSBzdGFydFRpbWUgKSAqIHRpbWVEaXJlY3Rpb247XG5cdFx0XHRpZiAoIHRpbWVSdW5uaW5nIDwgMCB8fCB0aW1lRGlyZWN0aW9uID09PSAwICkge1xuXG5cdFx0XHRcdHJldHVybjsgLy8geWV0IHRvIGNvbWUgLyBkb24ndCBkZWNpZGUgd2hlbiBkZWx0YSA9IDBcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBzdGFydFxuXG5cdFx0XHR0aGlzLl9zdGFydFRpbWUgPSBudWxsOyAvLyB1bnNjaGVkdWxlXG5cdFx0XHRkZWx0YVRpbWUgPSB0aW1lRGlyZWN0aW9uICogdGltZVJ1bm5pbmc7XG5cblx0XHR9XG5cblx0XHQvLyBhcHBseSB0aW1lIHNjYWxlIGFuZCBhZHZhbmNlIHRpbWVcblxuXHRcdGRlbHRhVGltZSAqPSB0aGlzLl91cGRhdGVUaW1lU2NhbGUoIHRpbWUgKTtcblx0XHR2YXIgY2xpcFRpbWUgPSB0aGlzLl91cGRhdGVUaW1lKCBkZWx0YVRpbWUgKTtcblxuXHRcdC8vIG5vdGU6IF91cGRhdGVUaW1lIG1heSBkaXNhYmxlIHRoZSBhY3Rpb24gcmVzdWx0aW5nIGluXG5cdFx0Ly8gYW4gZWZmZWN0aXZlIHdlaWdodCBvZiAwXG5cblx0XHR2YXIgd2VpZ2h0ID0gdGhpcy5fdXBkYXRlV2VpZ2h0KCB0aW1lICk7XG5cblx0XHRpZiAoIHdlaWdodCA+IDAgKSB7XG5cblx0XHRcdHZhciBpbnRlcnBvbGFudHMgPSB0aGlzLl9pbnRlcnBvbGFudHM7XG5cdFx0XHR2YXIgcHJvcGVydHlNaXhlcnMgPSB0aGlzLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBpbnRlcnBvbGFudHMubGVuZ3RoOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdGludGVycG9sYW50c1sgaiBdLmV2YWx1YXRlKCBjbGlwVGltZSApO1xuXHRcdFx0XHRwcm9wZXJ0eU1peGVyc1sgaiBdLmFjY3VtdWxhdGUoIGFjY3VJbmRleCwgd2VpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdF91cGRhdGVXZWlnaHQ6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHZhciB3ZWlnaHQgPSAwO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgKSB7XG5cblx0XHRcdHdlaWdodCA9IHRoaXMud2VpZ2h0O1xuXHRcdFx0dmFyIGludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0d2VpZ2h0ICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BGYWRpbmcoKTtcblxuXHRcdFx0XHRcdGlmICggaW50ZXJwb2xhbnRWYWx1ZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZmFkZWQgb3V0LCBkaXNhYmxlXG5cdFx0XHRcdFx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHdlaWdodDtcblx0XHRyZXR1cm4gd2VpZ2h0O1xuXG5cdH0sXG5cblx0X3VwZGF0ZVRpbWVTY2FsZTogZnVuY3Rpb24gKCB0aW1lICkge1xuXG5cdFx0dmFyIHRpbWVTY2FsZSA9IDA7XG5cblx0XHRpZiAoICEgdGhpcy5wYXVzZWQgKSB7XG5cblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0XHR2YXIgaW50ZXJwb2xhbnQgPSB0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudDtcblxuXHRcdFx0aWYgKCBpbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHR2YXIgaW50ZXJwb2xhbnRWYWx1ZSA9IGludGVycG9sYW50LmV2YWx1YXRlKCB0aW1lIClbIDAgXTtcblxuXHRcdFx0XHR0aW1lU2NhbGUgKj0gaW50ZXJwb2xhbnRWYWx1ZTtcblxuXHRcdFx0XHRpZiAoIHRpbWUgPiBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnNbIDEgXSApIHtcblxuXHRcdFx0XHRcdHRoaXMuc3RvcFdhcnBpbmcoKTtcblxuXHRcdFx0XHRcdGlmICggdGltZVNjYWxlID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHQvLyBtb3Rpb24gaGFzIGhhbHRlZCwgcGF1c2Vcblx0XHRcdFx0XHRcdHRoaXMucGF1c2VkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIHdhcnAgZG9uZSAtIGFwcGx5IGZpbmFsIHRpbWUgc2NhbGVcblx0XHRcdFx0XHRcdHRoaXMudGltZVNjYWxlID0gdGltZVNjYWxlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gdGltZVNjYWxlO1xuXHRcdHJldHVybiB0aW1lU2NhbGU7XG5cblx0fSxcblxuXHRfdXBkYXRlVGltZTogZnVuY3Rpb24gKCBkZWx0YVRpbWUgKSB7XG5cblx0XHR2YXIgdGltZSA9IHRoaXMudGltZSArIGRlbHRhVGltZTtcblx0XHR2YXIgZHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uO1xuXHRcdHZhciBsb29wID0gdGhpcy5sb29wO1xuXHRcdHZhciBsb29wQ291bnQgPSB0aGlzLl9sb29wQ291bnQ7XG5cblx0XHR2YXIgcGluZ1BvbmcgPSAoIGxvb3AgPT09IExvb3BQaW5nUG9uZyApO1xuXG5cdFx0aWYgKCBkZWx0YVRpbWUgPT09IDAgKSB7XG5cblx0XHRcdGlmICggbG9vcENvdW50ID09PSAtIDEgKSByZXR1cm4gdGltZTtcblxuXHRcdFx0cmV0dXJuICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGxvb3AgPT09IExvb3BPbmNlICkge1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdHRoaXMuX2xvb3BDb3VudCA9IDA7XG5cdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIHRydWUsIHRydWUsIGZhbHNlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aGFuZGxlX3N0b3A6IHtcblxuXHRcdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gZHVyYXRpb247XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHRcdGJyZWFrIGhhbmRsZV9zdG9wO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lIDwgMCA/IC0gMSA6IDFcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgeyAvLyByZXBldGl0aXZlIFJlcGVhdCBvciBQaW5nUG9uZ1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdGlmICggZGVsdGFUaW1lID49IDAgKSB7XG5cblx0XHRcdFx0XHRsb29wQ291bnQgPSAwO1xuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdHJ1ZSwgdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gd2hlbiBsb29waW5nIGluIHJldmVyc2UgZGlyZWN0aW9uLCB0aGUgaW5pdGlhbFxuXHRcdFx0XHRcdC8vIHRyYW5zaXRpb24gdGhyb3VnaCB6ZXJvIGNvdW50cyBhcyBhIHJlcGV0aXRpb24sXG5cdFx0XHRcdFx0Ly8gc28gbGVhdmUgbG9vcENvdW50IGF0IC0xXG5cblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCB0cnVlLCBwaW5nUG9uZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gfHwgdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0Ly8gd3JhcCBhcm91bmRcblxuXHRcdFx0XHR2YXIgbG9vcERlbHRhID0gTWF0aC5mbG9vciggdGltZSAvIGR1cmF0aW9uICk7IC8vIHNpZ25lZFxuXHRcdFx0XHR0aW1lIC09IGR1cmF0aW9uICogbG9vcERlbHRhO1xuXG5cdFx0XHRcdGxvb3BDb3VudCArPSBNYXRoLmFicyggbG9vcERlbHRhICk7XG5cblx0XHRcdFx0dmFyIHBlbmRpbmcgPSB0aGlzLnJlcGV0aXRpb25zIC0gbG9vcENvdW50O1xuXG5cdFx0XHRcdGlmICggcGVuZGluZyA8PSAwICkge1xuXG5cdFx0XHRcdFx0Ly8gaGF2ZSB0byBzdG9wIChzd2l0Y2ggc3RhdGUsIGNsYW1wIHRpbWUsIGZpcmUgZXZlbnQpXG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdFx0ZWxzZSB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdHRpbWUgPSBkZWx0YVRpbWUgPiAwID8gZHVyYXRpb24gOiAwO1xuXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHRcdHRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoIHtcblx0XHRcdFx0XHRcdHR5cGU6ICdmaW5pc2hlZCcsIGFjdGlvbjogdGhpcyxcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lID4gMCA/IDEgOiAtIDFcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGtlZXAgcnVubmluZ1xuXG5cdFx0XHRcdFx0aWYgKCBwZW5kaW5nID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHQvLyBlbnRlcmluZyB0aGUgbGFzdCByb3VuZFxuXG5cdFx0XHRcdFx0XHR2YXIgYXRTdGFydCA9IGRlbHRhVGltZSA8IDA7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBhdFN0YXJ0LCAhIGF0U3RhcnQsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBmYWxzZSwgZmFsc2UsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSBsb29wQ291bnQ7XG5cblx0XHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2xvb3AnLCBhY3Rpb246IHRoaXMsIGxvb3BEZWx0YTogbG9vcERlbHRhXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gaW52ZXJ0IHRpbWUgZm9yIHRoZSBcInBvbmcgcm91bmRcIlxuXG5cdFx0XHRcdHJldHVybiBkdXJhdGlvbiAtIHRpbWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aW1lO1xuXG5cdH0sXG5cblx0X3NldEVuZGluZ3M6IGZ1bmN0aW9uICggYXRTdGFydCwgYXRFbmQsIHBpbmdQb25nICkge1xuXG5cdFx0dmFyIHNldHRpbmdzID0gdGhpcy5faW50ZXJwb2xhbnRTZXR0aW5ncztcblxuXHRcdGlmICggcGluZ1BvbmcgKSB7XG5cblx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gWmVyb1Nsb3BlRW5kaW5nO1xuXHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kID0gWmVyb1Nsb3BlRW5kaW5nO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYXNzdW1pbmcgZm9yIExvb3BPbmNlIGF0U3RhcnQgPT0gYXRFbmQgPT0gdHJ1ZVxuXG5cdFx0XHRpZiAoIGF0U3RhcnQgKSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSB0aGlzLnplcm9TbG9wZUF0U3RhcnQgPyBaZXJvU2xvcGVFbmRpbmcgOiBaZXJvQ3VydmF0dXJlRW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gV3JhcEFyb3VuZEVuZGluZztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGF0RW5kICkge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ0VuZCA9IHRoaXMuemVyb1Nsb3BlQXRFbmQgPyBaZXJvU2xvcGVFbmRpbmcgOiBaZXJvQ3VydmF0dXJlRW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ0VuZCBcdCA9IFdyYXBBcm91bmRFbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdF9zY2hlZHVsZUZhZGluZzogZnVuY3Rpb24gKCBkdXJhdGlvbiwgd2VpZ2h0Tm93LCB3ZWlnaHRUaGVuICkge1xuXG5cdFx0dmFyIG1peGVyID0gdGhpcy5fbWl4ZXIsIG5vdyA9IG1peGVyLnRpbWUsXG5cdFx0XHRpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdHZhciB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdHZhbHVlcyA9IGludGVycG9sYW50LnNhbXBsZVZhbHVlcztcblxuXHRcdHRpbWVzWyAwIF0gPSBub3c7XG5cdFx0dmFsdWVzWyAwIF0gPSB3ZWlnaHROb3c7XG5cdFx0dGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uO1xuXHRcdHZhbHVlc1sgMSBdID0gd2VpZ2h0VGhlbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBQbGF5ZXIgZm9yIEFuaW1hdGlvbkNsaXBzLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gQW5pbWF0aW9uTWl4ZXIoIHJvb3QgKSB7XG5cblx0dGhpcy5fcm9vdCA9IHJvb3Q7XG5cdHRoaXMuX2luaXRNZW1vcnlNYW5hZ2VyKCk7XG5cdHRoaXMuX2FjY3VJbmRleCA9IDA7XG5cblx0dGhpcy50aW1lID0gMDtcblxuXHR0aGlzLnRpbWVTY2FsZSA9IDEuMDtcblxufVxuXG5BbmltYXRpb25NaXhlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQW5pbWF0aW9uTWl4ZXIsXG5cblx0X2JpbmRBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uLCBwcm90b3R5cGVBY3Rpb24gKSB7XG5cblx0XHR2YXIgcm9vdCA9IGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHR0cmFja3MgPSBhY3Rpb24uX2NsaXAudHJhY2tzLFxuXHRcdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXG5cdFx0XHRiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncyxcblx0XHRcdGludGVycG9sYW50cyA9IGFjdGlvbi5faW50ZXJwb2xhbnRzLFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdzQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRpZiAoIGJpbmRpbmdzQnlOYW1lID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJpbmRpbmdzQnlOYW1lID0ge307XG5cdFx0XHRiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSA9IGJpbmRpbmdzQnlOYW1lO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuVHJhY2tzOyArKyBpICkge1xuXG5cdFx0XHR2YXIgdHJhY2sgPSB0cmFja3NbIGkgXSxcblx0XHRcdFx0dHJhY2tOYW1lID0gdHJhY2submFtZSxcblx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzQnlOYW1lWyB0cmFja05hbWUgXTtcblxuXHRcdFx0aWYgKCBiaW5kaW5nICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBleGlzdGluZyBiaW5kaW5nLCBtYWtlIHN1cmUgdGhlIGNhY2hlIGtub3dzXG5cblx0XHRcdFx0XHRpZiAoIGJpbmRpbmcuX2NhY2hlSW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdCsrIGJpbmRpbmcucmVmZXJlbmNlQ291bnQ7XG5cdFx0XHRcdFx0XHR0aGlzLl9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgcGF0aCA9IHByb3RvdHlwZUFjdGlvbiAmJiBwcm90b3R5cGVBY3Rpb24uXG5cdFx0XHRcdFx0X3Byb3BlcnR5QmluZGluZ3NbIGkgXS5iaW5kaW5nLnBhcnNlZFBhdGg7XG5cblx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eU1peGVyKFxuXHRcdFx0XHRcdFByb3BlcnR5QmluZGluZy5jcmVhdGUoIHJvb3QsIHRyYWNrTmFtZSwgcGF0aCApLFxuXHRcdFx0XHRcdHRyYWNrLlZhbHVlVHlwZU5hbWUsIHRyYWNrLmdldFZhbHVlU2l6ZSgpICk7XG5cblx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcblx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0YmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0aW50ZXJwb2xhbnRzWyBpIF0ucmVzdWx0QnVmZmVyID0gYmluZGluZy5idWZmZXI7XG5cblx0XHR9XG5cblx0fSxcblxuXHRfYWN0aXZhdGVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0aWYgKCAhIHRoaXMuX2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSApIHtcblxuXHRcdFx0aWYgKCBhY3Rpb24uX2NhY2hlSW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBhY3Rpb24gaGFzIGJlZW4gZm9yZ290dGVuIGJ5IHRoZSBjYWNoZSwgYnV0IHRoZSB1c2VyXG5cdFx0XHRcdC8vIGFwcGVhcnMgdG8gYmUgc3RpbGwgdXNpbmcgaXQgLT4gcmViaW5kXG5cblx0XHRcdFx0dmFyIHJvb3RVdWlkID0gKCBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290ICkudXVpZCxcblx0XHRcdFx0XHRjbGlwVXVpZCA9IGFjdGlvbi5fY2xpcC51dWlkLFxuXHRcdFx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdFx0XHR0aGlzLl9iaW5kQWN0aW9uKCBhY3Rpb24sXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgJiYgYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWyAwIF0gKTtcblxuXHRcdFx0XHR0aGlzLl9hZGRJbmFjdGl2ZUFjdGlvbiggYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3M7XG5cblx0XHRcdC8vIGluY3JlbWVudCByZWZlcmVuY2UgY291bnRzIC8gc29ydCBvdXQgc3RhdGVcblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR2YXIgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nLnVzZUNvdW50ICsrID09PSAwICkge1xuXG5cdFx0XHRcdFx0dGhpcy5fbGVuZEJpbmRpbmcoIGJpbmRpbmcgKTtcblx0XHRcdFx0XHRiaW5kaW5nLnNhdmVPcmlnaW5hbFN0YXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2xlbmRBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X2RlYWN0aXZhdGVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XG5cblx0XHRcdHZhciBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Ly8gZGVjcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZVxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0XHRpZiAoIC0tIGJpbmRpbmcudXNlQ291bnQgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRiaW5kaW5nLnJlc3RvcmVPcmlnaW5hbFN0YXRlKCk7XG5cdFx0XHRcdFx0dGhpcy5fdGFrZUJhY2tCaW5kaW5nKCBiaW5kaW5nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3Rha2VCYWNrQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VyXG5cblx0X2luaXRNZW1vcnlNYW5hZ2VyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLl9hY3Rpb25zID0gW107IC8vICduQWN0aXZlQWN0aW9ucycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xuXHRcdHRoaXMuX25BY3RpdmVBY3Rpb25zID0gMDtcblxuXHRcdHRoaXMuX2FjdGlvbnNCeUNsaXAgPSB7fTtcblx0XHQvLyBpbnNpZGU6XG5cdFx0Ly8ge1xuXHRcdC8vIFx0a25vd25BY3Rpb25zOiBBcnJheTwgQW5pbWF0aW9uQWN0aW9uID4gLSB1c2VkIGFzIHByb3RvdHlwZXNcblx0XHQvLyBcdGFjdGlvbkJ5Um9vdDogQW5pbWF0aW9uQWN0aW9uIC0gbG9va3VwXG5cdFx0Ly8gfVxuXG5cblx0XHR0aGlzLl9iaW5kaW5ncyA9IFtdOyAvLyAnbkFjdGl2ZUJpbmRpbmdzJyBmb2xsb3dlZCBieSBpbmFjdGl2ZSBvbmVzXG5cdFx0dGhpcy5fbkFjdGl2ZUJpbmRpbmdzID0gMDtcblxuXHRcdHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSA9IHt9OyAvLyBpbnNpZGU6IE1hcDwgbmFtZSwgUHJvcGVydHlNaXhlciA+XG5cblxuXHRcdHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMgPSBbXTsgLy8gc2FtZSBnYW1lIGFzIGFib3ZlXG5cdFx0dGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgPSAwO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRcdGFjdGlvbnM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9hY3Rpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVBY3Rpb25zO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRiaW5kaW5nczoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Y29udHJvbEludGVycG9sYW50czoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2NvbnRyb2xJbnRlcnBvbGFudHMubGVuZ3RoO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHM7XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9LFxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VtZW50IGZvciBBbmltYXRpb25BY3Rpb24gb2JqZWN0c1xuXG5cdF9pc0FjdGl2ZUFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR2YXIgaW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXg7XG5cdFx0cmV0dXJuIGluZGV4ICE9PSBudWxsICYmIGluZGV4IDwgdGhpcy5fbkFjdGl2ZUFjdGlvbnM7XG5cblx0fSxcblxuXHRfYWRkSW5hY3RpdmVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKSB7XG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB7XG5cblx0XHRcdFx0a25vd25BY3Rpb25zOiBbIGFjdGlvbiBdLFxuXHRcdFx0XHRhY3Rpb25CeVJvb3Q6IHt9XG5cblx0XHRcdH07XG5cblx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IDA7XG5cblx0XHRcdGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0gPSBhY3Rpb25zRm9yQ2xpcDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBrbm93bkFjdGlvbnMgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnM7XG5cblx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IGtub3duQWN0aW9ucy5sZW5ndGg7XG5cdFx0XHRrbm93bkFjdGlvbnMucHVzaCggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBhY3Rpb25zLmxlbmd0aDtcblx0XHRhY3Rpb25zLnB1c2goIGFjdGlvbiApO1xuXG5cdFx0YWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdID0gYWN0aW9uO1xuXG5cdH0sXG5cblx0X3JlbW92ZUluYWN0aXZlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdLFxuXHRcdFx0Y2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcblxuXHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdGFjdGlvbnMucG9wKCk7XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXG5cblx0XHR2YXIgY2xpcFV1aWQgPSBhY3Rpb24uX2NsaXAudXVpZCxcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwLFxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLFxuXHRcdFx0a25vd25BY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9ucyxcblxuXHRcdFx0bGFzdEtub3duQWN0aW9uID1cblx0XHRcdFx0a25vd25BY3Rpb25zRm9yQ2xpcFsga25vd25BY3Rpb25zRm9yQ2xpcC5sZW5ndGggLSAxIF0sXG5cblx0XHRcdGJ5Q2xpcENhY2hlSW5kZXggPSBhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXg7XG5cblx0XHRsYXN0S25vd25BY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBieUNsaXBDYWNoZUluZGV4O1xuXHRcdGtub3duQWN0aW9uc0ZvckNsaXBbIGJ5Q2xpcENhY2hlSW5kZXggXSA9IGxhc3RLbm93bkFjdGlvbjtcblx0XHRrbm93bkFjdGlvbnNGb3JDbGlwLnBvcCgpO1xuXG5cdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDtcblxuXG5cdFx0dmFyIGFjdGlvbkJ5Um9vdCA9IGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdCxcblx0XHRcdHJvb3RVdWlkID0gKCBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290ICkudXVpZDtcblxuXHRcdGRlbGV0ZSBhY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRpZiAoIGtub3duQWN0aW9uc0ZvckNsaXAubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApO1xuXG5cdH0sXG5cblx0X3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dmFyIGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRpZiAoIC0tIGJpbmRpbmcucmVmZXJlbmNlQ291bnQgPT09IDAgKSB7XG5cblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdF9sZW5kQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdC8vIFsgYWN0aXZlIGFjdGlvbnMgfCAgaW5hY3RpdmUgYWN0aW9ucyAgXVxuXHRcdC8vIFsgIGFjdGl2ZSBhY3Rpb25zID58IGluYWN0aXZlIGFjdGlvbnMgXVxuXHRcdC8vICAgICAgICAgICAgICAgICBzICAgICAgICBhXG5cdFx0Ly8gICAgICAgICAgICAgICAgICA8LXN3YXAtPlxuXHRcdC8vICAgICAgICAgICAgICAgICBhICAgICAgICBzXG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXG5cblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVBY3Rpb25zICsrLFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0YWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XG5cblx0XHRmaXJzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUFjdGlvbjtcblxuXHR9LFxuXG5cdF90YWtlQmFja0FjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyAgfCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHw8IGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyAgICAgICAgYSAgICAgICAgc1xuXHRcdC8vICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgcyAgICAgICAgYVxuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0cHJldkluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlSW5kZXggPSAtLSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblxuXHRcdFx0bGFzdEFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGZpcnN0SW5hY3RpdmVJbmRleCBdO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGFjdGlvbnNbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYWN0aW9uO1xuXG5cdFx0bGFzdEFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRhY3Rpb25zWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVBY3Rpb247XG5cblx0fSxcblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBmb3IgUHJvcGVydHlNaXhlciBvYmplY3RzXG5cblx0X2FkZEluYWN0aXZlQmluZGluZzogZnVuY3Rpb24gKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdLFxuXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0aWYgKCBiaW5kaW5nQnlOYW1lID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJpbmRpbmdCeU5hbWUgPSB7fTtcblx0XHRcdGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdID0gYmluZGluZztcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBiaW5kaW5ncy5sZW5ndGg7XG5cdFx0YmluZGluZ3MucHVzaCggYmluZGluZyApO1xuXG5cdH0sXG5cblx0X3JlbW92ZUluYWN0aXZlQmluZGluZzogZnVuY3Rpb24gKCBiaW5kaW5nICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRwcm9wQmluZGluZyA9IGJpbmRpbmcuYmluZGluZyxcblx0XHRcdHJvb3RVdWlkID0gcHJvcEJpbmRpbmcucm9vdE5vZGUudXVpZCxcblx0XHRcdHRyYWNrTmFtZSA9IHByb3BCaW5kaW5nLnBhdGgsXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSxcblxuXHRcdFx0bGFzdEluYWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBiaW5kaW5ncy5sZW5ndGggLSAxIF0sXG5cdFx0XHRjYWNoZUluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleDtcblxuXHRcdGxhc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xuXHRcdGJpbmRpbmdzWyBjYWNoZUluZGV4IF0gPSBsYXN0SW5hY3RpdmVCaW5kaW5nO1xuXHRcdGJpbmRpbmdzLnBvcCgpO1xuXG5cdFx0ZGVsZXRlIGJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdO1xuXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggYmluZGluZ0J5TmFtZSApLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0ZGVsZXRlIGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X2xlbmRCaW5kaW5nOiBmdW5jdGlvbiAoIGJpbmRpbmcgKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdHByZXZJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXgsXG5cblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncyArKyxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdGJpbmRpbmdzWyBsYXN0QWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XG5cblx0XHRmaXJzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRiaW5kaW5nc1sgcHJldkluZGV4IF0gPSBmaXJzdEluYWN0aXZlQmluZGluZztcblxuXHR9LFxuXG5cdF90YWtlQmFja0JpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZyApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLFxuXG5cdFx0XHRsYXN0QWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdGxhc3RBY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVCaW5kaW5nO1xuXG5cdH0sXG5cblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBvZiBJbnRlcnBvbGFudHMgZm9yIHdlaWdodCBhbmQgdGltZSBzY2FsZVxuXG5cdF9sZW5kQ29udHJvbEludGVycG9sYW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cyxcblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzICsrLFxuXHRcdFx0aW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG5ldyBMaW5lYXJJbnRlcnBvbGFudChcblx0XHRcdFx0bmV3IEZsb2F0MzJBcnJheSggMiApLCBuZXcgRmxvYXQzMkFycmF5KCAyICksXG5cdFx0XHRcdDEsIHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgKTtcblxuXHRcdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdFx0aW50ZXJwb2xhbnRzWyBsYXN0QWN0aXZlSW5kZXggXSA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVycG9sYW50O1xuXG5cdH0sXG5cblx0X3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50OiBmdW5jdGlvbiAoIGludGVycG9sYW50ICkge1xuXG5cdFx0dmFyIGludGVycG9sYW50cyA9IHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMsXG5cdFx0XHRwcmV2SW5kZXggPSBpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzLFxuXG5cdFx0XHRsYXN0QWN0aXZlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGZpcnN0SW5hY3RpdmVJbmRleCBdO1xuXG5cdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBpbnRlcnBvbGFudDtcblxuXHRcdGxhc3RBY3RpdmVJbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0aW50ZXJwb2xhbnRzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVJbnRlcnBvbGFudDtcblxuXHR9LFxuXG5cdF9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyOiBuZXcgRmxvYXQzMkFycmF5KCAxICksXG5cblx0Ly8gcmV0dXJuIGFuIGFjdGlvbiBmb3IgYSBjbGlwIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gcm9vdCB0YXJnZXRcblx0Ly8gb2JqZWN0ICh0aGlzIG1ldGhvZCBhbGxvY2F0ZXMgYSBsb3Qgb2YgZHluYW1pYyBtZW1vcnkgaW4gY2FzZSBhXG5cdC8vIHByZXZpb3VzbHkgdW5rbm93biBjbGlwL3Jvb3QgY29tYmluYXRpb24gaXMgc3BlY2lmaWVkKVxuXHRjbGlwQWN0aW9uOiBmdW5jdGlvbiAoIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcblxuXHRcdHZhciByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcblxuXHRcdFx0Y2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcCxcblxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwT2JqZWN0ICE9PSBudWxsID8gY2xpcE9iamVjdC51dWlkIDogY2xpcCxcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLFxuXHRcdFx0cHJvdG90eXBlQWN0aW9uID0gbnVsbDtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGV4aXN0aW5nQWN0aW9uID1cblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRcdGlmICggZXhpc3RpbmdBY3Rpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXhpc3RpbmdBY3Rpb247XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gd2Uga25vdyB0aGUgY2xpcCwgc28gd2UgZG9uJ3QgaGF2ZSB0byBwYXJzZSBhbGxcblx0XHRcdC8vIHRoZSBiaW5kaW5ncyBhZ2FpbiBidXQgY2FuIGp1c3QgY29weVxuXHRcdFx0cHJvdG90eXBlQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWyAwIF07XG5cblx0XHRcdC8vIGFsc28sIHRha2UgdGhlIGNsaXAgZnJvbSB0aGUgcHJvdG90eXBlIGFjdGlvblxuXHRcdFx0aWYgKCBjbGlwT2JqZWN0ID09PSBudWxsIClcblx0XHRcdFx0Y2xpcE9iamVjdCA9IHByb3RvdHlwZUFjdGlvbi5fY2xpcDtcblxuXHRcdH1cblxuXHRcdC8vIGNsaXAgbXVzdCBiZSBrbm93biB3aGVuIHNwZWNpZmllZCB2aWEgc3RyaW5nXG5cdFx0aWYgKCBjbGlwT2JqZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyBhbGxvY2F0ZSBhbGwgcmVzb3VyY2VzIHJlcXVpcmVkIHRvIHJ1biBpdFxuXHRcdHZhciBuZXdBY3Rpb24gPSBuZXcgQW5pbWF0aW9uQWN0aW9uKCB0aGlzLCBjbGlwT2JqZWN0LCBvcHRpb25hbFJvb3QgKTtcblxuXHRcdHRoaXMuX2JpbmRBY3Rpb24oIG5ld0FjdGlvbiwgcHJvdG90eXBlQWN0aW9uICk7XG5cblx0XHQvLyBhbmQgbWFrZSB0aGUgYWN0aW9uIGtub3duIHRvIHRoZSBtZW1vcnkgbWFuYWdlclxuXHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBuZXdBY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApO1xuXG5cdFx0cmV0dXJuIG5ld0FjdGlvbjtcblxuXHR9LFxuXG5cdC8vIGdldCBhbiBleGlzdGluZyBhY3Rpb25cblx0ZXhpc3RpbmdBY3Rpb246IGZ1bmN0aW9uICggY2xpcCwgb3B0aW9uYWxSb290ICkge1xuXG5cdFx0dmFyIHJvb3QgPSBvcHRpb25hbFJvb3QgfHwgdGhpcy5fcm9vdCxcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXG5cdFx0XHRjbGlwT2JqZWN0ID0gdHlwZW9mIGNsaXAgPT09ICdzdHJpbmcnID9cblx0XHRcdFx0QW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKCByb290LCBjbGlwICkgOiBjbGlwLFxuXG5cdFx0XHRjbGlwVXVpZCA9IGNsaXBPYmplY3QgPyBjbGlwT2JqZWN0LnV1aWQgOiBjbGlwLFxuXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF0gfHwgbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH0sXG5cblx0Ly8gZGVhY3RpdmF0ZXMgYWxsIHByZXZpb3VzbHkgc2NoZWR1bGVkIGFjdGlvbnNcblx0c3RvcEFsbEFjdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSB0aGlzLl9uQWN0aXZlQmluZGluZ3M7XG5cblx0XHR0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7XG5cdFx0dGhpcy5fbkFjdGl2ZUJpbmRpbmdzID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkFjdGlvbnM7ICsrIGkgKSB7XG5cblx0XHRcdGFjdGlvbnNbIGkgXS5yZXNldCgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuQmluZGluZ3M7ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0udXNlQ291bnQgPSAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBhZHZhbmNlIHRoZSB0aW1lIGFuZCB1cGRhdGUgYXBwbHkgdGhlIGFuaW1hdGlvblxuXHR1cGRhdGU6IGZ1bmN0aW9uICggZGVsdGFUaW1lICkge1xuXG5cdFx0ZGVsdGFUaW1lICo9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblxuXHRcdFx0dGltZSA9IHRoaXMudGltZSArPSBkZWx0YVRpbWUsXG5cdFx0XHR0aW1lRGlyZWN0aW9uID0gTWF0aC5zaWduKCBkZWx0YVRpbWUgKSxcblxuXHRcdFx0YWNjdUluZGV4ID0gdGhpcy5fYWNjdUluZGV4IF49IDE7XG5cblx0XHQvLyBydW4gYWN0aXZlIGFjdGlvbnNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkFjdGlvbnM7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBhY3Rpb24gPSBhY3Rpb25zWyBpIF07XG5cblx0XHRcdGFjdGlvbi5fdXBkYXRlKCB0aW1lLCBkZWx0YVRpbWUsIHRpbWVEaXJlY3Rpb24sIGFjY3VJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkJpbmRpbmdzOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLmFwcGx5KCBhY2N1SW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJuIHRoaXMgbWl4ZXIncyByb290IHRhcmdldCBvYmplY3Rcblx0Z2V0Um9vdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3Jvb3Q7XG5cblx0fSxcblxuXHQvLyBmcmVlIGFsbCByZXNvdXJjZXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIGNsaXBcblx0dW5jYWNoZUNsaXA6IGZ1bmN0aW9uICggY2xpcCApIHtcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGNsaXBVdWlkID0gY2xpcC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5vdGU6IGp1c3QgY2FsbGluZyBfcmVtb3ZlSW5hY3RpdmVBY3Rpb24gd291bGQgbWVzcyB1cCB0aGVcblx0XHRcdC8vIGl0ZXJhdGlvbiBzdGF0ZSBhbmQgYWxzbyByZXF1aXJlIHVwZGF0aW5nIHRoZSBzdGF0ZSB3ZSBjYW5cblx0XHRcdC8vIGp1c3QgdGhyb3cgYXdheVxuXG5cdFx0XHR2YXIgYWN0aW9uc1RvUmVtb3ZlID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhY3Rpb25zVG9SZW1vdmUubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHZhciBhY3Rpb24gPSBhY3Rpb25zVG9SZW1vdmVbIGkgXTtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0XHR2YXIgY2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcblx0XHRcdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXHRcdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xuXG5cdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0XHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRcdFx0YWN0aW9ucy5wb3AoKTtcblxuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgcm9vdCB0YXJnZXQgb2JqZWN0XG5cdHVuY2FjaGVSb290OiBmdW5jdGlvbiAoIHJvb3QgKSB7XG5cblx0XHR2YXIgcm9vdFV1aWQgPSByb290LnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcDtcblxuXHRcdGZvciAoIHZhciBjbGlwVXVpZCBpbiBhY3Rpb25zQnlDbGlwICkge1xuXG5cdFx0XHR2YXIgYWN0aW9uQnlSb290ID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXS5hY3Rpb25CeVJvb3QsXG5cdFx0XHRcdGFjdGlvbiA9IGFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdFx0aWYgKCBhY3Rpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgYmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRpZiAoIGJpbmRpbmdCeU5hbWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIHRyYWNrTmFtZSBpbiBiaW5kaW5nQnlOYW1lICkge1xuXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cdFx0XHRcdGJpbmRpbmcucmVzdG9yZU9yaWdpbmFsU3RhdGUoKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIHJlbW92ZSBhIHRhcmdldGVkIGNsaXAgZnJvbSB0aGUgY2FjaGVcblx0dW5jYWNoZUFjdGlvbjogZnVuY3Rpb24gKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHR2YXIgYWN0aW9uID0gdGhpcy5leGlzdGluZ0FjdGlvbiggY2xpcCwgb3B0aW9uYWxSb290ICk7XG5cblx0XHRpZiAoIGFjdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBVbmlmb3JtKCB2YWx1ZSApIHtcblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Vbmlmb3JtOiBUeXBlIHBhcmFtZXRlciBpcyBubyBsb25nZXIgbmVlZGVkLicgKTtcblx0XHR2YWx1ZSA9IGFyZ3VtZW50c1sgMSBdO1xuXG5cdH1cblxuXHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cbn1cblxuVW5pZm9ybS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyBVbmlmb3JtKCB0aGlzLnZhbHVlLmNsb25lID09PSB1bmRlZmluZWQgPyB0aGlzLnZhbHVlIDogdGhpcy52YWx1ZS5jbG9uZSgpICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKi9cblxuZnVuY3Rpb24gSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIoIGFycmF5LCBzdHJpZGUsIG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0SW50ZXJsZWF2ZWRCdWZmZXIuY2FsbCggdGhpcywgYXJyYXksIHN0cmlkZSApO1xuXG5cdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGUgfHwgMTtcblxufVxuXG5JbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlcixcblxuXHRpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0SW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBzb3VyY2UubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBzdGVwaG9taSAvIGh0dHA6Ly9zdGVwaGFuZWdpbmllci5jb20vXG4gKi9cblxuZnVuY3Rpb24gUmF5Y2FzdGVyKCBvcmlnaW4sIGRpcmVjdGlvbiwgbmVhciwgZmFyICkge1xuXG5cdHRoaXMucmF5ID0gbmV3IFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKTtcblx0Ly8gZGlyZWN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZCAoZm9yIGFjY3VyYXRlIGRpc3RhbmNlIGNhbGN1bGF0aW9ucylcblxuXHR0aGlzLm5lYXIgPSBuZWFyIHx8IDA7XG5cdHRoaXMuZmFyID0gZmFyIHx8IEluZmluaXR5O1xuXG5cdHRoaXMucGFyYW1zID0ge1xuXHRcdE1lc2g6IHt9LFxuXHRcdExpbmU6IHt9LFxuXHRcdExPRDoge30sXG5cdFx0UG9pbnRzOiB7IHRocmVzaG9sZDogMSB9LFxuXHRcdFNwcml0ZToge31cblx0fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcy5wYXJhbXMsIHtcblx0XHRQb2ludENsb3VkOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXljYXN0ZXI6IHBhcmFtcy5Qb2ludENsb3VkIGhhcyBiZWVuIHJlbmFtZWQgdG8gcGFyYW1zLlBvaW50cy4nICk7XG5cdFx0XHRcdHJldHVybiB0aGlzLlBvaW50cztcblxuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xuXG59XG5cbmZ1bmN0aW9uIGFzY1NvcnQoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xuXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdE9iamVjdCggb2JqZWN0LCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApIHtcblxuXHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRvYmplY3QucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XG5cblx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpbnRlcnNlY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdHJ1ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBSYXljYXN0ZXIucHJvdG90eXBlLCB7XG5cblx0bGluZVByZWNpc2lvbjogMSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggb3JpZ2luLCBkaXJlY3Rpb24gKSB7XG5cblx0XHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxuXG5cdFx0dGhpcy5yYXkuc2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNhbWVyYTogZnVuY3Rpb24gKCBjb29yZHMsIGNhbWVyYSApIHtcblxuXHRcdGlmICggKCBjYW1lcmEgJiYgY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSApIHtcblxuXHRcdFx0dGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCBjb29yZHMueCwgY29vcmRzLnksIDAuNSApLnVucHJvamVjdCggY2FtZXJhICkuc3ViKCB0aGlzLnJheS5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblx0XHRcdHRoaXMuX2NhbWVyYSA9IGNhbWVyYTtcblxuXHRcdH0gZWxzZSBpZiAoICggY2FtZXJhICYmIGNhbWVyYS5pc09ydGhvZ3JhcGhpY0NhbWVyYSApICkge1xuXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmFcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLl9jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUmF5Y2FzdGVyOiBVbnN1cHBvcnRlZCBjYW1lcmEgdHlwZS4nICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRpbnRlcnNlY3RPYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0LCByZWN1cnNpdmUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0dmFyIGludGVyc2VjdHMgPSBvcHRpb25hbFRhcmdldCB8fCBbXTtcblxuXHRcdGludGVyc2VjdE9iamVjdCggb2JqZWN0LCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RPYmplY3RzOiBmdW5jdGlvbiAoIG9iamVjdHMsIHJlY3Vyc2l2ZSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHR2YXIgaW50ZXJzZWN0cyA9IG9wdGlvbmFsVGFyZ2V0IHx8IFtdO1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmplY3RzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0czogb2JqZWN0cyBpcyBub3QgYW4gQXJyYXkuJyApO1xuXHRcdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGludGVyc2VjdE9iamVjdCggb2JqZWN0c1sgaSBdLCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdH1cblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogUmVmOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TcGhlcmljYWxfY29vcmRpbmF0ZV9zeXN0ZW1cbiAqXG4gKiBUaGUgcG9sYXIgYW5nbGUgKHBoaSkgaXMgbWVhc3VyZWQgZnJvbSB0aGUgcG9zaXRpdmUgeS1heGlzLiBUaGUgcG9zaXRpdmUgeS1heGlzIGlzIHVwLlxuICogVGhlIGF6aW11dGhhbCBhbmdsZSAodGhldGEpIGlzIG1lYXN1cmVkIGZyb20gdGhlIHBvc2l0aXZlIHotYXhpei5cbiAqL1xuXG5mdW5jdGlvbiBTcGhlcmljYWwoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHR0aGlzLnJhZGl1cyA9ICggcmFkaXVzICE9PSB1bmRlZmluZWQgKSA/IHJhZGl1cyA6IDEuMDtcblx0dGhpcy5waGkgPSAoIHBoaSAhPT0gdW5kZWZpbmVkICkgPyBwaGkgOiAwOyAvLyBwb2xhciBhbmdsZVxuXHR0aGlzLnRoZXRhID0gKCB0aGV0YSAhPT0gdW5kZWZpbmVkICkgPyB0aGV0YSA6IDA7IC8vIGF6aW11dGhhbCBhbmdsZVxuXG5cdHJldHVybiB0aGlzO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFNwaGVyaWNhbC5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggcmFkaXVzLCBwaGksIHRoZXRhICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBwaGk7XG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMucGhpID0gb3RoZXIucGhpO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZSBFUFMgYW5kIFBJLUVQU1xuXHRtYWtlU2FmZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIEVQUyA9IDAuMDAwMDAxO1xuXHRcdHRoaXMucGhpID0gTWF0aC5tYXgoIEVQUywgTWF0aC5taW4oIE1hdGguUEkgLSBFUFMsIHRoaXMucGhpICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTtcblxuXHR9LFxuXG5cdHNldEZyb21DYXJ0ZXNpYW5Db29yZHM6IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KCB4ICogeCArIHkgKiB5ICsgeiAqIHogKTtcblxuXHRcdGlmICggdGhpcy5yYWRpdXMgPT09IDAgKSB7XG5cblx0XHRcdHRoaXMudGhldGEgPSAwO1xuXHRcdFx0dGhpcy5waGkgPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy50aGV0YSA9IE1hdGguYXRhbjIoIHgsIHogKTtcblx0XHRcdHRoaXMucGhpID0gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggeSAvIHRoaXMucmFkaXVzLCAtIDEsIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N5bGluZHJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXG4gKlxuICovXG5cbmZ1bmN0aW9uIEN5bGluZHJpY2FsKCByYWRpdXMsIHRoZXRhLCB5ICkge1xuXG5cdHRoaXMucmFkaXVzID0gKCByYWRpdXMgIT09IHVuZGVmaW5lZCApID8gcmFkaXVzIDogMS4wOyAvLyBkaXN0YW5jZSBmcm9tIHRoZSBvcmlnaW4gdG8gYSBwb2ludCBpbiB0aGUgeC16IHBsYW5lXG5cdHRoaXMudGhldGEgPSAoIHRoZXRhICE9PSB1bmRlZmluZWQgKSA/IHRoZXRhIDogMDsgLy8gY291bnRlcmNsb2Nrd2lzZSBhbmdsZSBpbiB0aGUgeC16IHBsYW5lIG1lYXN1cmVkIGluIHJhZGlhbnMgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzXG5cdHRoaXMueSA9ICggeSAhPT0gdW5kZWZpbmVkICkgPyB5IDogMDsgLy8gaGVpZ2h0IGFib3ZlIHRoZSB4LXogcGxhbmVcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG5PYmplY3QuYXNzaWduKCBDeWxpbmRyaWNhbC5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblx0XHR0aGlzLnkgPSBvdGhlci55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tVmVjdG9yMzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyggdi54LCB2LnksIHYueiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNhcnRlc2lhbkNvb3JkczogZnVuY3Rpb24gKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeiAqIHogKTtcblx0XHR0aGlzLnRoZXRhID0gTWF0aC5hdGFuMiggeCwgeiApO1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gQm94MiggbWluLCBtYXggKSB7XG5cblx0dGhpcy5taW4gPSAoIG1pbiAhPT0gdW5kZWZpbmVkICkgPyBtaW4gOiBuZXcgVmVjdG9yMiggKyBJbmZpbml0eSwgKyBJbmZpbml0eSApO1xuXHR0aGlzLm1heCA9ICggbWF4ICE9PSB1bmRlZmluZWQgKSA/IG1heCA6IG5ldyBWZWN0b3IyKCAtIEluZmluaXR5LCAtIEluZmluaXR5ICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQm94Mi5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBtaW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBtYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBwb2ludHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQ2VudGVyQW5kU2l6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzZXRGcm9tQ2VudGVyQW5kU2l6ZSggY2VudGVyLCBzaXplICkge1xuXG5cdFx0XHR2YXIgaGFsZlNpemUgPSB2MS5jb3B5KCBzaXplICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXHRcdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VFbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5taW4ueCA9IHRoaXMubWluLnkgPSArIEluZmluaXR5O1xuXHRcdHRoaXMubWF4LnggPSB0aGlzLm1heC55ID0gLSBJbmZpbml0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0aXNFbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXNcblxuXHRcdHJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5nZXRDZW50ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAgKSA6IHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLm1pbiwgdGhpcy5tYXggKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0fSxcblxuXHRnZXRTaXplOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fSxcblxuXHRleHBhbmRCeVBvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlWZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0cG9pbnQueSA8IHRoaXMubWluLnkgfHwgcG9pbnQueSA+IHRoaXMubWF4LnkgPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRjb250YWluc0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5taW4ueCA8PSBib3gubWluLnggJiYgYm94Lm1heC54IDw9IHRoaXMubWF4LnggJiZcblx0XHRcdHRoaXMubWluLnkgPD0gYm94Lm1pbi55ICYmIGJveC5tYXgueSA8PSB0aGlzLm1heC55O1xuXG5cdH0sXG5cblx0Z2V0UGFyYW1ldGVyOiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHQvLyBUaGlzIGNhbiBwb3RlbnRpYWxseSBoYXZlIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIGJveFxuXHRcdC8vIGhhcyBhIHNpemUgZGltZW5zaW9uIG9mIDAuXG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZ2V0UGFyYW1ldGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldChcblx0XHRcdCggcG9pbnQueCAtIHRoaXMubWluLnggKSAvICggdGhpcy5tYXgueCAtIHRoaXMubWluLnggKSxcblx0XHRcdCggcG9pbnQueSAtIHRoaXMubWluLnkgKSAvICggdGhpcy5tYXgueSAtIHRoaXMubWluLnkgKVxuXHRcdCk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdC8vIHVzaW5nIDQgc3BsaXR0aW5nIHBsYW5lcyB0byBydWxlIG91dCBpbnRlcnNlY3Rpb25zXG5cblx0XHRyZXR1cm4gYm94Lm1heC54IDwgdGhpcy5taW4ueCB8fCBib3gubWluLnggPiB0aGlzLm1heC54IHx8XG5cdFx0XHRib3gubWF4LnkgPCB0aGlzLm1pbi55IHx8IGJveC5taW4ueSA+IHRoaXMubWF4LnkgPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRjbGFtcFBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuY2xhbXBQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0XHR2YXIgY2xhbXBlZFBvaW50ID0gdjEuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cdFx0XHRyZXR1cm4gY2xhbXBlZFBvaW50LnN1YiggcG9pbnQgKS5sZW5ndGgoKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5tYXgoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5taW4oIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dW5pb246IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWF4KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGQoIG9mZnNldCApO1xuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHMoIHRoaXMubWluICkgJiYgYm94Lm1heC5lcXVhbHMoIHRoaXMubWF4ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbnZhciBfc3RhcnRQLCBfc3RhcnRFbmQ7XG5cbmZ1bmN0aW9uIExpbmUzKCBzdGFydCwgZW5kICkge1xuXG5cdHRoaXMuc3RhcnQgPSAoIHN0YXJ0ICE9PSB1bmRlZmluZWQgKSA/IHN0YXJ0IDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5lbmQgPSAoIGVuZCAhPT0gdW5kZWZpbmVkICkgPyBlbmQgOiBuZXcgVmVjdG9yMygpO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIExpbmUzLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBzdGFydCwgZW5kICkge1xuXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBzdGFydCApO1xuXHRcdHRoaXMuZW5kLmNvcHkoIGVuZCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBsaW5lICkge1xuXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBsaW5lLnN0YXJ0ICk7XG5cdFx0dGhpcy5lbmQuY29weSggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuZ2V0Q2VudGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMuc3RhcnQsIHRoaXMuZW5kICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH0sXG5cblx0ZGVsdGE6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5kZWx0YSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLmVuZCwgdGhpcy5zdGFydCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuZW5kICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUbyggdGhpcy5lbmQgKTtcblxuXHR9LFxuXG5cdGF0OiBmdW5jdGlvbiAoIHQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuYXQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApO1xuXG5cdH0sXG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlcjogZnVuY3Rpb24gKCBwb2ludCwgY2xhbXBUb0xpbmUgKSB7XG5cblx0XHRpZiAoIF9zdGFydFAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X3N0YXJ0UCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRfc3RhcnRFbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0X3N0YXJ0UC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5zdGFydCApO1xuXHRcdF9zdGFydEVuZC5zdWJWZWN0b3JzKCB0aGlzLmVuZCwgdGhpcy5zdGFydCApO1xuXG5cdFx0dmFyIHN0YXJ0RW5kMiA9IF9zdGFydEVuZC5kb3QoIF9zdGFydEVuZCApO1xuXHRcdHZhciBzdGFydEVuZF9zdGFydFAgPSBfc3RhcnRFbmQuZG90KCBfc3RhcnRQICk7XG5cblx0XHR2YXIgdCA9IHN0YXJ0RW5kX3N0YXJ0UCAvIHN0YXJ0RW5kMjtcblxuXHRcdGlmICggY2xhbXBUb0xpbmUgKSB7XG5cblx0XHRcdHQgPSBfTWF0aC5jbGFtcCggdCwgMCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHQ7XG5cblx0fSxcblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50LCBjbGFtcFRvTGluZSwgdGFyZ2V0ICkge1xuXG5cdFx0dmFyIHQgPSB0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIoIHBvaW50LCBjbGFtcFRvTGluZSApO1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5jbG9zZXN0UG9pbnRUb1BvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR0aGlzLnN0YXJ0LmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cdFx0dGhpcy5lbmQuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIGxpbmUgKSB7XG5cblx0XHRyZXR1cm4gbGluZS5zdGFydC5lcXVhbHMoIHRoaXMuc3RhcnQgKSAmJiBsaW5lLmVuZC5lcXVhbHMoIHRoaXMuZW5kICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBJbW1lZGlhdGVSZW5kZXJPYmplY3QoIG1hdGVyaWFsICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCAvKiByZW5kZXJDYWxsYmFjayAqLyApIHt9O1xuXG59XG5cbkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcbkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbW1lZGlhdGVSZW5kZXJPYmplY3Q7XG5cbkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBWZXJ0ZXhOb3JtYWxzSGVscGVyKCBvYmplY3QsIHNpemUsIGhleCwgbGluZXdpZHRoICkge1xuXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdHRoaXMuc2l6ZSA9ICggc2l6ZSAhPT0gdW5kZWZpbmVkICkgPyBzaXplIDogMTtcblxuXHR2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmMDAwMDtcblxuXHR2YXIgd2lkdGggPSAoIGxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICkgPyBsaW5ld2lkdGggOiAxO1xuXG5cdC8vXG5cblx0dmFyIG5Ob3JtYWxzID0gMDtcblxuXHR2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTtcblxuXHRpZiAoIG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRuTm9ybWFscyA9IG9iakdlb21ldHJ5LmZhY2VzLmxlbmd0aCAqIDM7XG5cblx0fSBlbHNlIGlmICggb2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdG5Ob3JtYWxzID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwuY291bnQ7XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBuTm9ybWFscyAqIDIgKiAzLCAzICk7XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBwb3NpdGlvbnMgKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIGxpbmV3aWR0aDogd2lkdGggfSApICk7XG5cblx0Ly9cblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cblZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWZXJ0ZXhOb3JtYWxzSGVscGVyO1xuXG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0dmFyIGtleXMgPSBbICdhJywgJ2InLCAnYycgXTtcblxuXHRcdHRoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCB0aGlzLm9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5vYmplY3QubWF0cml4V29ybGQ7XG5cblx0XHR2YXIgcG9zaXRpb24gPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHQvL1xuXG5cdFx0dmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciB2ZXJ0aWNlcyA9IG9iakdlb21ldHJ5LnZlcnRpY2VzO1xuXG5cdFx0XHR2YXIgZmFjZXMgPSBvYmpHZW9tZXRyeS5mYWNlcztcblxuXHRcdFx0dmFyIGlkeCA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmVydGV4ID0gdmVydGljZXNbIGZhY2VbIGtleXNbIGogXSBdIF07XG5cblx0XHRcdFx0XHR2YXIgbm9ybWFsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzWyBqIF07XG5cblx0XHRcdFx0XHR2MS5jb3B5KCB2ZXJ0ZXggKS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0XHR2Mi5jb3B5KCBub3JtYWwgKS5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCB0aGlzLnNpemUgKS5hZGQoIHYxICk7XG5cblx0XHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHRcdFx0aWR4ID0gaWR4ICsgMTtcblxuXHRcdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2Mi54LCB2Mi55LCB2Mi56ICk7XG5cblx0XHRcdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIG9ialBvcyA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdHZhciBvYmpOb3JtID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRcdHZhciBpZHggPSAwO1xuXG5cdFx0XHQvLyBmb3Igc2ltcGxpY2l0eSwgaWdub3JlIGluZGV4IGFuZCBkcmF3Y2FsbHMsIGFuZCByZW5kZXIgZXZlcnkgbm9ybWFsXG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBvYmpQb3MuY291bnQ7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR2MS5zZXQoIG9ialBvcy5nZXRYKCBqICksIG9ialBvcy5nZXRZKCBqICksIG9ialBvcy5nZXRaKCBqICkgKS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0djIuc2V0KCBvYmpOb3JtLmdldFgoIGogKSwgb2JqTm9ybS5nZXRZKCBqICksIG9iak5vcm0uZ2V0WiggaiApICk7XG5cblx0XHRcdFx0djIuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggdGhpcy5zaXplICkuYWRkKCB2MSApO1xuXG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdFx0aWR4ID0gaWR4ICsgMTtcblxuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjIueCwgdjIueSwgdjIueiApO1xuXG5cdFx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9O1xuXG59KCkgKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIFNwb3RMaWdodEhlbHBlciggbGlnaHQsIGNvbG9yICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IFtcblx0XHQwLCAwLCAwLCBcdDAsIDAsIDEsXG5cdFx0MCwgMCwgMCwgXHQxLCAwLCAxLFxuXHRcdDAsIDAsIDAsXHQtIDEsIDAsIDEsXG5cdFx0MCwgMCwgMCwgXHQwLCAxLCAxLFxuXHRcdDAsIDAsIDAsIFx0MCwgLSAxLCAxXG5cdF07XG5cblx0Zm9yICggdmFyIGkgPSAwLCBqID0gMSwgbCA9IDMyOyBpIDwgbDsgaSArKywgaiArKyApIHtcblxuXHRcdHZhciBwMSA9ICggaSAvIGwgKSAqIE1hdGguUEkgKiAyO1xuXHRcdHZhciBwMiA9ICggaiAvIGwgKSAqIE1hdGguUEkgKiAyO1xuXG5cdFx0cG9zaXRpb25zLnB1c2goXG5cdFx0XHRNYXRoLmNvcyggcDEgKSwgTWF0aC5zaW4oIHAxICksIDEsXG5cdFx0XHRNYXRoLmNvcyggcDIgKSwgTWF0aC5zaW4oIHAyICksIDFcblx0XHQpO1xuXG5cdH1cblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBmb2c6IGZhbHNlIH0gKTtcblxuXHR0aGlzLmNvbmUgPSBuZXcgTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0dGhpcy5hZGQoIHRoaXMuY29uZSApO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwb3RMaWdodEhlbHBlcjtcblxuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuY29uZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdHRoaXMuY29uZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cbn07XG5cblNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHR2YXIgY29uZUxlbmd0aCA9IHRoaXMubGlnaHQuZGlzdGFuY2UgPyB0aGlzLmxpZ2h0LmRpc3RhbmNlIDogMTAwMDtcblx0XHR2YXIgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKCB0aGlzLmxpZ2h0LmFuZ2xlICk7XG5cblx0XHR0aGlzLmNvbmUuc2NhbGUuc2V0KCBjb25lV2lkdGgsIGNvbmVXaWR0aCwgY29uZUxlbmd0aCApO1xuXG5cdFx0dmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblxuXHRcdHRoaXMuY29uZS5sb29rQXQoIHZlY3RvciApO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0XHR9XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgU2VhbiBHcmlmZmluIC8gaHR0cDovL3R3aXR0ZXIuY29tL3NncmlmXG4gKiBAYXV0aG9yIE1pY2hhZWwgR3VlcnJlcm8gLyBodHRwOi8vcmVhbGl0eW1lbHRkb3duLmNvbVxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb25lTGlzdCggb2JqZWN0ICkge1xuXG5cdHZhciBib25lTGlzdCA9IFtdO1xuXG5cdGlmICggb2JqZWN0ICYmIG9iamVjdC5pc0JvbmUgKSB7XG5cblx0XHRib25lTGlzdC5wdXNoKCBvYmplY3QgKTtcblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGJvbmVMaXN0LnB1c2guYXBwbHkoIGJvbmVMaXN0LCBnZXRCb25lTGlzdCggb2JqZWN0LmNoaWxkcmVuWyBpIF0gKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYm9uZUxpc3Q7XG5cbn1cblxuZnVuY3Rpb24gU2tlbGV0b25IZWxwZXIoIG9iamVjdCApIHtcblxuXHR2YXIgYm9uZXMgPSBnZXRCb25lTGlzdCggb2JqZWN0ICk7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBjb2xvcnMgPSBbXTtcblxuXHR2YXIgY29sb3IxID0gbmV3IENvbG9yKCAwLCAwLCAxICk7XG5cdHZhciBjb2xvcjIgPSBuZXcgQ29sb3IoIDAsIDEsIDAgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBib25lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR2YXIgYm9uZSA9IGJvbmVzWyBpIF07XG5cblx0XHRpZiAoIGJvbmUucGFyZW50ICYmIGJvbmUucGFyZW50LmlzQm9uZSApIHtcblxuXHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yMS5yLCBjb2xvcjEuZywgY29sb3IxLmIgKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvcjIuciwgY29sb3IyLmcsIGNvbG9yMi5iICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMsIGRlcHRoVGVzdDogZmFsc2UsIGRlcHRoV3JpdGU6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMucm9vdCA9IG9iamVjdDtcblx0dGhpcy5ib25lcyA9IGJvbmVzO1xuXG5cdHRoaXMubWF0cml4ID0gb2JqZWN0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxufVxuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTa2VsZXRvbkhlbHBlcjtcblxuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBib25lTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0dmFyIG1hdHJpeFdvcmxkSW52ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0dmFyIGJvbmVzID0gdGhpcy5ib25lcztcblxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRtYXRyaXhXb3JsZEludi5nZXRJbnZlcnNlKCB0aGlzLnJvb3QubWF0cml4V29ybGQgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaiA9IDA7IGkgPCBib25lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBib25lID0gYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0Ym9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXhXb3JsZEludiwgYm9uZS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBib25lTWF0cml4ICk7XG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaiwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdGJvbmVNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggbWF0cml4V29ybGRJbnYsIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGJvbmVNYXRyaXggKTtcblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBqICsgMSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdGogKz0gMjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFBvaW50TGlnaHRIZWxwZXIoIGxpZ2h0LCBzcGhlcmVTaXplLCBjb2xvciApIHtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IFNwaGVyZUJ1ZmZlckdlb21ldHJ5KCBzcGhlcmVTaXplLCA0LCAyICk7XG5cdHZhciBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyB3aXJlZnJhbWU6IHRydWUsIGZvZzogZmFsc2UgfSApO1xuXG5cdE1lc2guY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0dGhpcy5tYXRyaXggPSB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG5cblx0Lypcblx0dmFyIGRpc3RhbmNlR2VvbWV0cnkgPSBuZXcgVEhSRUUuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSggMSwgMiApO1xuXHR2YXIgZGlzdGFuY2VNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4Q29sb3IsIGZvZzogZmFsc2UsIHdpcmVmcmFtZTogdHJ1ZSwgb3BhY2l0eTogMC4xLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0dGhpcy5saWdodFNwaGVyZSA9IG5ldyBUSFJFRS5NZXNoKCBidWxiR2VvbWV0cnksIGJ1bGJNYXRlcmlhbCApO1xuXHR0aGlzLmxpZ2h0RGlzdGFuY2UgPSBuZXcgVEhSRUUuTWVzaCggZGlzdGFuY2VHZW9tZXRyeSwgZGlzdGFuY2VNYXRlcmlhbCApO1xuXG5cdHZhciBkID0gbGlnaHQuZGlzdGFuY2U7XG5cblx0aWYgKCBkID09PSAwLjAgKSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2Uuc2NhbGUuc2V0KCBkLCBkLCBkICk7XG5cblx0fVxuXG5cdHRoaXMuYWRkKCB0aGlzLmxpZ2h0RGlzdGFuY2UgKTtcblx0Ki9cblxufVxuXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1lc2gucHJvdG90eXBlICk7XG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50TGlnaHRIZWxwZXI7XG5cblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHR9XG5cblx0Lypcblx0dmFyIGQgPSB0aGlzLmxpZ2h0LmRpc3RhbmNlO1xuXG5cdGlmICggZCA9PT0gMC4wICkge1xuXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSBmYWxzZTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSB0cnVlO1xuXHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcblxuXHR9XG5cdCovXG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogIFRoaXMgaGVscGVyIG11c3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiB0aGUgbGlnaHRcbiAqL1xuXG5mdW5jdGlvbiBSZWN0QXJlYUxpZ2h0SGVscGVyKCBsaWdodCwgY29sb3IgKSB7XG5cblx0dGhpcy50eXBlID0gJ1JlY3RBcmVhTGlnaHRIZWxwZXInO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7IC8vIG9wdGlvbmFsIGhhcmR3aXJlZCBjb2xvciBmb3IgdGhlIGhlbHBlclxuXG5cdHZhciBwb3NpdGlvbnMgPSBbIDEsIDEsIDAsIC0gMSwgMSwgMCwgLSAxLCAtIDEsIDAsIDEsIC0gMSwgMCwgMSwgMSwgMCBdO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSB9ICk7XG5cblx0TGluZS5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHQvL1xuXG5cdHZhciBwb3NpdGlvbnMyID0gWyAxLCAxLCAwLCAtIDEsIDEsIDAsIC0gMSwgLSAxLCAwLCAxLCAxLCAwLCAtIDEsIC0gMSwgMCwgMSwgLSAxLCAwIF07XG5cblx0dmFyIGdlb21ldHJ5MiA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeTIuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zMiwgMyApICk7XG5cdGdlb21ldHJ5Mi5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHR0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5MiwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHNpZGU6IEJhY2tTaWRlLCBmb2c6IGZhbHNlIH0gKSApICk7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICk7XG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlY3RBcmVhTGlnaHRIZWxwZXI7XG5cblJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLnNjYWxlLnNldCggMC41ICogdGhpcy5saWdodC53aWR0aCwgMC41ICogdGhpcy5saWdodC5oZWlnaHQsIDEgKTtcblxuXHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cdFx0dGhpcy5jaGlsZHJlblsgMCBdLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggdGhpcy5saWdodC5pbnRlbnNpdHkgKTtcblxuXHRcdC8vIHByZXZlbnQgaHVlIHNoaWZ0XG5cdFx0dmFyIGMgPSB0aGlzLm1hdGVyaWFsLmNvbG9yO1xuXHRcdHZhciBtYXggPSBNYXRoLm1heCggYy5yLCBjLmcsIGMuYiApO1xuXHRcdGlmICggbWF4ID4gMSApIGMubXVsdGlwbHlTY2FsYXIoIDEgLyBtYXggKTtcblxuXHRcdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLm1hdGVyaWFsLmNvbG9yICk7XG5cblx0fVxuXG59O1xuXG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5jaGlsZHJlblsgMCBdLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gSGVtaXNwaGVyZUxpZ2h0SGVscGVyKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCBzaXplICk7XG5cdGdlb21ldHJ5LnJvdGF0ZVkoIE1hdGguUEkgKiAwLjUgKTtcblxuXHR0aGlzLm1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSB9ICk7XG5cdGlmICggdGhpcy5jb2xvciA9PT0gdW5kZWZpbmVkICkgdGhpcy5tYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBWZXJ0ZXhDb2xvcnM7XG5cblx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cdHZhciBjb2xvcnMgPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvbi5jb3VudCAqIDMgKTtcblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0dGhpcy5hZGQoIG5ldyBNZXNoKCBnZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApICk7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5IZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5IZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGVtaXNwaGVyZUxpZ2h0SGVscGVyO1xuXG5IZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5jaGlsZHJlblsgMCBdLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGNvbG9yMSA9IG5ldyBDb2xvcigpO1xuXHR2YXIgY29sb3IyID0gbmV3IENvbG9yKCk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdHZhciBtZXNoID0gdGhpcy5jaGlsZHJlblsgMCBdO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgY29sb3JzID0gbWVzaC5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdjb2xvcicgKTtcblxuXHRcdFx0Y29sb3IxLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblx0XHRcdGNvbG9yMi5jb3B5KCB0aGlzLmxpZ2h0Lmdyb3VuZENvbG9yICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNvbG9ycy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGNvbG9yID0gKCBpIDwgKCBsIC8gMiApICkgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRcdFx0Y29sb3JzLnNldFhZWiggaSwgY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRtZXNoLmxvb2tBdCggdmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApLm5lZ2F0ZSgpICk7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIExpZ2h0UHJvYmVIZWxwZXIoIGxpZ2h0UHJvYmUsIHNpemUgKSB7XG5cblx0dGhpcy5saWdodFByb2JlID0gbGlnaHRQcm9iZTtcblxuXHR0aGlzLnNpemUgPSBzaXplO1xuXG5cdHZhciBkZWZpbmVzID0ge307XG5cdGRlZmluZXNbICdHQU1NQV9PVVRQVVQnIF0gPSBcIlwiO1xuXG5cdC8vIG1hdGVyaWFsXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0ZGVmaW5lczogZGVmaW5lcyxcblxuXHRcdHVuaWZvcm1zOiB7XG5cblx0XHRcdHNoOiB7IHZhbHVlOiB0aGlzLmxpZ2h0UHJvYmUuc2guY29lZmZpY2llbnRzIH0sIC8vIGJ5IHJlZmVyZW5jZVxuXG5cdFx0XHRpbnRlbnNpdHk6IHsgdmFsdWU6IHRoaXMubGlnaHRQcm9iZS5pbnRlbnNpdHkgfVxuXG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogW1xuXG5cdFx0XHQndmFyeWluZyB2ZWMzIHZOb3JtYWw7JyxcblxuXHRcdFx0J3ZvaWQgbWFpbigpIHsnLFxuXG5cdFx0XHQnXHR2Tm9ybWFsID0gbm9ybWFsaXplKCBub3JtYWxNYXRyaXggKiBub3JtYWwgKTsnLFxuXG5cdFx0XHQnXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7JyxcblxuXHRcdFx0J30nLFxuXG5cdFx0XS5qb2luKCAnXFxuJyApLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFtcblxuXHRcdFx0JyNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NicsXG5cblx0XHRcdCd2ZWMzIGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgbm9ybWFsLCBpbiBtYXQ0IG1hdHJpeCApIHsnLFxuXG5cdFx0XHQnXHQvLyBtYXRyaXggaXMgYXNzdW1lZCB0byBiZSBvcnRob2dvbmFsJyxcblxuXHRcdFx0J1x0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBub3JtYWwsIDAuMCApICogbWF0cml4ICkueHl6ICk7JyxcblxuXHRcdFx0J30nLFxuXG5cdFx0XHQndmVjMyBsaW5lYXJUb091dHB1dCggaW4gdmVjMyBhICkgeycsXG5cblx0XHRcdCdcdCNpZmRlZiBHQU1NQV9PVVRQVVQnLFxuXG5cdFx0XHQnXHRcdHJldHVybiBwb3coIGEsIHZlYzMoIDEuMCAvIGZsb2F0KCBHQU1NQV9GQUNUT1IgKSApICk7JyxcblxuXHRcdFx0J1x0I2Vsc2UnLFxuXG5cdFx0XHQnXHRcdHJldHVybiBhOycsXG5cblx0XHRcdCdcdCNlbmRpZicsXG5cblx0XHRcdCd9JyxcblxuXHRcdFx0Jy8vIHNvdXJjZTogaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmJyxcblx0XHRcdCd2ZWMzIHNoR2V0SXJyYWRpYW5jZUF0KCBpbiB2ZWMzIG5vcm1hbCwgaW4gdmVjMyBzaENvZWZmaWNpZW50c1sgOSBdICkgeycsXG5cblx0XHRcdCdcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGgnLFxuXG5cdFx0XHQnXHRmbG9hdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56OycsXG5cblx0XHRcdCdcdC8vIGJhbmQgMCcsXG5cdFx0XHQnXHR2ZWMzIHJlc3VsdCA9IHNoQ29lZmZpY2llbnRzWyAwIF0gKiAwLjg4NjIyNzsnLFxuXG5cdFx0XHQnXHQvLyBiYW5kIDEnLFxuXHRcdFx0J1x0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAxIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHk7Jyxcblx0XHRcdCdcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMiBdICogMi4wICogMC41MTE2NjQgKiB6OycsXG5cdFx0XHQnXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDMgXSAqIDIuMCAqIDAuNTExNjY0ICogeDsnLFxuXG5cdFx0XHQnXHQvLyBiYW5kIDInLFxuXHRcdFx0J1x0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA0IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB5OycsXG5cdFx0XHQnXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDUgXSAqIDIuMCAqIDAuNDI5MDQzICogeSAqIHo7Jyxcblx0XHRcdCdcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNiBdICogKCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTsnLFxuXHRcdFx0J1x0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA3IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB6OycsXG5cdFx0XHQnXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDggXSAqIDAuNDI5MDQzICogKCB4ICogeCAtIHkgKiB5ICk7JyxcblxuXHRcdFx0J1x0cmV0dXJuIHJlc3VsdDsnLFxuXG5cdFx0XHQnfScsXG5cblx0XHRcdCd1bmlmb3JtIHZlYzMgc2hbIDkgXTsgLy8gc2ggY29lZmZpY2llbnRzJyxcblxuXHRcdFx0J3VuaWZvcm0gZmxvYXQgaW50ZW5zaXR5OyAvLyBsaWdodCBwcm9iZSBpbnRlbnNpdHknLFxuXG5cdFx0XHQndmFyeWluZyB2ZWMzIHZOb3JtYWw7JyxcblxuXHRcdFx0J3ZvaWQgbWFpbigpIHsnLFxuXG5cdFx0XHQnXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggdk5vcm1hbCApOycsXG5cblx0XHRcdCdcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTsnLFxuXG5cdFx0XHQnXHR2ZWMzIGlycmFkaWFuY2UgPSBzaEdldElycmFkaWFuY2VBdCggd29ybGROb3JtYWwsIHNoICk7JyxcblxuXHRcdFx0J1x0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gUkVDSVBST0NBTF9QSSAqIGlycmFkaWFuY2UgKiBpbnRlbnNpdHk7JyxcblxuXHRcdFx0J1x0b3V0Z29pbmdMaWdodCA9IGxpbmVhclRvT3V0cHV0KCBvdXRnb2luZ0xpZ2h0ICk7JyxcblxuXHRcdFx0J1x0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgMS4wICk7JyxcblxuXHRcdFx0J30nXG5cblx0XHRdLmpvaW4oICdcXG4nIClcblxuXHR9ICk7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IFNwaGVyZUJ1ZmZlckdlb21ldHJ5KCAxLCAzMiwgMTYgKTtcblxuXHRNZXNoLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMub25CZWZvcmVSZW5kZXIoKTtcblxufVxuXG5MaWdodFByb2JlSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1lc2gucHJvdG90eXBlICk7XG5MaWdodFByb2JlSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpZ2h0UHJvYmVIZWxwZXI7XG5cbkxpZ2h0UHJvYmVIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5MaWdodFByb2JlSGVscGVyLnByb3RvdHlwZS5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCB0aGlzLmxpZ2h0UHJvYmUucG9zaXRpb24gKTtcblxuXHRcdHRoaXMuc2NhbGUuc2V0KCAxLCAxLCAxICkubXVsdGlwbHlTY2FsYXIoIHRoaXMuc2l6ZSApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5pbnRlbnNpdHkudmFsdWUgPSB0aGlzLmxpZ2h0UHJvYmUuaW50ZW5zaXR5O1xuXG5cdH07XG5cbn0oKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEdyaWRIZWxwZXIoIHNpemUsIGRpdmlzaW9ucywgY29sb3IxLCBjb2xvcjIgKSB7XG5cblx0c2l6ZSA9IHNpemUgfHwgMTA7XG5cdGRpdmlzaW9ucyA9IGRpdmlzaW9ucyB8fCAxMDtcblx0Y29sb3IxID0gbmV3IENvbG9yKCBjb2xvcjEgIT09IHVuZGVmaW5lZCA/IGNvbG9yMSA6IDB4NDQ0NDQ0ICk7XG5cdGNvbG9yMiA9IG5ldyBDb2xvciggY29sb3IyICE9PSB1bmRlZmluZWQgPyBjb2xvcjIgOiAweDg4ODg4OCApO1xuXG5cdHZhciBjZW50ZXIgPSBkaXZpc2lvbnMgLyAyO1xuXHR2YXIgc3RlcCA9IHNpemUgLyBkaXZpc2lvbnM7XG5cdHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdLCBjb2xvcnMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGogPSAwLCBrID0gLSBoYWxmU2l6ZTsgaSA8PSBkaXZpc2lvbnM7IGkgKyssIGsgKz0gc3RlcCApIHtcblxuXHRcdHZlcnRpY2VzLnB1c2goIC0gaGFsZlNpemUsIDAsIGssIGhhbGZTaXplLCAwLCBrICk7XG5cdFx0dmVydGljZXMucHVzaCggaywgMCwgLSBoYWxmU2l6ZSwgaywgMCwgaGFsZlNpemUgKTtcblxuXHRcdHZhciBjb2xvciA9IGkgPT09IGNlbnRlciA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cblx0fVxuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogVmVydGV4Q29sb3JzIH0gKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogR3JpZEhlbHBlcixcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuY29weSggc291cmNlLmdlb21ldHJ5ICk7XG5cdFx0dGhpcy5tYXRlcmlhbC5jb3B5KCBzb3VyY2UubWF0ZXJpYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBIZWN0YXRlIC8gaHR0cDovL3d3dy5naXRodWIuY29tL0hlY3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBQb2xhckdyaWRIZWxwZXIoIHJhZGl1cywgcmFkaWFscywgY2lyY2xlcywgZGl2aXNpb25zLCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTA7XG5cdHJhZGlhbHMgPSByYWRpYWxzIHx8IDE2O1xuXHRjaXJjbGVzID0gY2lyY2xlcyB8fCA4O1xuXHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgNjQ7XG5cdGNvbG9yMSA9IG5ldyBDb2xvciggY29sb3IxICE9PSB1bmRlZmluZWQgPyBjb2xvcjEgOiAweDQ0NDQ0NCApO1xuXHRjb2xvcjIgPSBuZXcgQ29sb3IoIGNvbG9yMiAhPT0gdW5kZWZpbmVkID8gY29sb3IyIDogMHg4ODg4ODggKTtcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIGNvbG9ycyA9IFtdO1xuXG5cdHZhciB4LCB6O1xuXHR2YXIgdiwgaSwgaiwgciwgY29sb3I7XG5cblx0Ly8gY3JlYXRlIHRoZSByYWRpYWxzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gcmFkaWFsczsgaSArKyApIHtcblxuXHRcdHYgPSAoIGkgLyByYWRpYWxzICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHJhZGl1cztcblx0XHR6ID0gTWF0aC5jb3MoIHYgKSAqIHJhZGl1cztcblxuXHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cblx0XHRjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHR9XG5cblx0Ly8gY3JlYXRlIHRoZSBjaXJjbGVzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gY2lyY2xlczsgaSArKyApIHtcblxuXHRcdGNvbG9yID0gKCBpICYgMSApID8gY29sb3IxIDogY29sb3IyO1xuXG5cdFx0ciA9IHJhZGl1cyAtICggcmFkaXVzIC8gY2lyY2xlcyAqIGkgKTtcblxuXHRcdGZvciAoIGogPSAwOyBqIDwgZGl2aXNpb25zOyBqICsrICkge1xuXG5cdFx0XHQvLyBmaXJzdCB2ZXJ0ZXhcblxuXHRcdFx0diA9ICggaiAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHR6ID0gTWF0aC5jb3MoIHYgKSAqIHI7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIDAsIHogKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdC8vIHNlY29uZCB2ZXJ0ZXhcblxuXHRcdFx0diA9ICggKCBqICsgMSApIC8gZGl2aXNpb25zICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHRcdHggPSBNYXRoLnNpbiggdiApICogcjtcblx0XHRcdHogPSBNYXRoLmNvcyggdiApICogcjtcblxuXHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5Qb2xhckdyaWRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuUG9sYXJHcmlkSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbGFyR3JpZEhlbHBlcjtcblxuLyoqXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gUG9zaXRpb25hbEF1ZGlvSGVscGVyKCBhdWRpbywgcmFuZ2UsIGRpdmlzaW9uc0lubmVyQW5nbGUsIGRpdmlzaW9uc091dGVyQW5nbGUgKSB7XG5cblx0dGhpcy5hdWRpbyA9IGF1ZGlvO1xuXHR0aGlzLnJhbmdlID0gcmFuZ2UgfHwgMTtcblx0dGhpcy5kaXZpc2lvbnNJbm5lckFuZ2xlID0gZGl2aXNpb25zSW5uZXJBbmdsZSB8fCAxNjtcblx0dGhpcy5kaXZpc2lvbnNPdXRlckFuZ2xlID0gZGl2aXNpb25zT3V0ZXJBbmdsZSB8fCAyO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHR2YXIgZGl2aXNpb25zID0gdGhpcy5kaXZpc2lvbnNJbm5lckFuZ2xlICsgdGhpcy5kaXZpc2lvbnNPdXRlckFuZ2xlICogMjtcblx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoICggZGl2aXNpb25zICogMyArIDMgKSAqIDMgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdHZhciBtYXRlcmlhbElubmVyQW5nbGUgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4MDBmZjAwIH0gKTtcblx0dmFyIG1hdGVyaWFsT3V0ZXJBbmdsZSA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAgfSApO1xuXG5cdExpbmUuY2FsbCggdGhpcywgZ2VvbWV0cnksIFsgbWF0ZXJpYWxPdXRlckFuZ2xlLCBtYXRlcmlhbElubmVyQW5nbGUgXSApO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuUG9zaXRpb25hbEF1ZGlvSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICk7XG5Qb3NpdGlvbmFsQXVkaW9IZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9zaXRpb25hbEF1ZGlvSGVscGVyO1xuXG5Qb3NpdGlvbmFsQXVkaW9IZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgYXVkaW8gPSB0aGlzLmF1ZGlvO1xuXHR2YXIgcmFuZ2UgPSB0aGlzLnJhbmdlO1xuXHR2YXIgZGl2aXNpb25zSW5uZXJBbmdsZSA9IHRoaXMuZGl2aXNpb25zSW5uZXJBbmdsZTtcblx0dmFyIGRpdmlzaW9uc091dGVyQW5nbGUgPSB0aGlzLmRpdmlzaW9uc091dGVyQW5nbGU7XG5cblx0dmFyIGNvbmVJbm5lckFuZ2xlID0gX01hdGguZGVnVG9SYWQoIGF1ZGlvLnBhbm5lci5jb25lSW5uZXJBbmdsZSApO1xuXHR2YXIgY29uZU91dGVyQW5nbGUgPSBfTWF0aC5kZWdUb1JhZCggYXVkaW8ucGFubmVyLmNvbmVPdXRlckFuZ2xlICk7XG5cblx0dmFyIGhhbGZDb25lSW5uZXJBbmdsZSA9IGNvbmVJbm5lckFuZ2xlIC8gMjtcblx0dmFyIGhhbGZDb25lT3V0ZXJBbmdsZSA9IGNvbmVPdXRlckFuZ2xlIC8gMjtcblxuXHR2YXIgc3RhcnQgPSAwO1xuXHR2YXIgY291bnQgPSAwO1xuXHR2YXIgaSwgc3RyaWRlO1xuXG5cdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0Z2VvbWV0cnkuY2xlYXJHcm91cHMoKTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudCggZnJvbSwgdG8sIGRpdmlzaW9ucywgbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdHZhciBzdGVwID0gKCB0byAtIGZyb20gKSAvIGRpdmlzaW9ucztcblxuXHRcdHBvc2l0aW9uQXR0cmlidXRlLnNldFhZWiggc3RhcnQsIDAsIDAsIDAgKTtcblx0XHRjb3VudCArKztcblxuXHRcdGZvciAoIGkgPSBmcm9tOyBpIDwgdG87IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0c3RyaWRlID0gc3RhcnQgKyBjb3VudDtcblxuXHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUuc2V0WFlaKCBzdHJpZGUsIE1hdGguc2luKCBpICkgKiByYW5nZSwgMCwgTWF0aC5jb3MoIGkgKSAqIHJhbmdlICk7XG5cdFx0XHRwb3NpdGlvbkF0dHJpYnV0ZS5zZXRYWVooIHN0cmlkZSArIDEsIE1hdGguc2luKCBNYXRoLm1pbiggaSArIHN0ZXAsIHRvICkgKSAqIHJhbmdlLCAwLCBNYXRoLmNvcyggTWF0aC5taW4oIGkgKyBzdGVwLCB0byApICkgKiByYW5nZSApO1xuXHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUuc2V0WFlaKCBzdHJpZGUgKyAyLCAwLCAwLCAwICk7XG5cblx0XHRcdGNvdW50ICs9IDM7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5hZGRHcm91cCggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ICk7XG5cblx0XHRzdGFydCArPSBjb3VudDtcblx0XHRjb3VudCA9IDA7XG5cblx0fVxuXG5cdC8vXG5cblx0Z2VuZXJhdGVTZWdtZW50KCAtIGhhbGZDb25lT3V0ZXJBbmdsZSwgLSBoYWxmQ29uZUlubmVyQW5nbGUsIGRpdmlzaW9uc091dGVyQW5nbGUsIDAgKTtcblx0Z2VuZXJhdGVTZWdtZW50KCAtIGhhbGZDb25lSW5uZXJBbmdsZSwgaGFsZkNvbmVJbm5lckFuZ2xlLCBkaXZpc2lvbnNJbm5lckFuZ2xlLCAxICk7XG5cdGdlbmVyYXRlU2VnbWVudCggaGFsZkNvbmVJbm5lckFuZ2xlLCBoYWxmQ29uZU91dGVyQW5nbGUsIGRpdmlzaW9uc091dGVyQW5nbGUsIDAgKTtcblxuXHQvL1xuXG5cdHBvc2l0aW9uQXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRpZiAoIGNvbmVJbm5lckFuZ2xlID09PSBjb25lT3V0ZXJBbmdsZSApIHRoaXMubWF0ZXJpYWxbIDAgXS52aXNpYmxlID0gZmFsc2U7XG5cbn07XG5cblBvc2l0aW9uYWxBdWRpb0hlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5tYXRlcmlhbFsgMCBdLmRpc3Bvc2UoKTtcblx0dGhpcy5tYXRlcmlhbFsgMSBdLmRpc3Bvc2UoKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gRmFjZU5vcm1hbHNIZWxwZXIoIG9iamVjdCwgc2l6ZSwgaGV4LCBsaW5ld2lkdGggKSB7XG5cblx0Ly8gRmFjZU5vcm1hbHNIZWxwZXIgb25seSBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeVxuXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdHRoaXMuc2l6ZSA9ICggc2l6ZSAhPT0gdW5kZWZpbmVkICkgPyBzaXplIDogMTtcblxuXHR2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmZmYwMDtcblxuXHR2YXIgd2lkdGggPSAoIGxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICkgPyBsaW5ld2lkdGggOiAxO1xuXG5cdC8vXG5cblx0dmFyIG5Ob3JtYWxzID0gMDtcblxuXHR2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTtcblxuXHRpZiAoIG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRuTm9ybWFscyA9IG9iakdlb21ldHJ5LmZhY2VzLmxlbmd0aDtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXI6IG9ubHkgVEhSRUUuR2VvbWV0cnkgaXMgc3VwcG9ydGVkLiBVc2UgVEhSRUUuVmVydGV4Tm9ybWFsc0hlbHBlciwgaW5zdGVhZC4nICk7XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBuTm9ybWFscyAqIDIgKiAzLCAzICk7XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBwb3NpdGlvbnMgKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIGxpbmV3aWR0aDogd2lkdGggfSApICk7XG5cblx0Ly9cblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5GYWNlTm9ybWFsc0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5GYWNlTm9ybWFsc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGYWNlTm9ybWFsc0hlbHBlcjtcblxuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHR0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0bm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdGhpcy5vYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkO1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0dmFyIHZlcnRpY2VzID0gb2JqR2VvbWV0cnkudmVydGljZXM7XG5cblx0XHR2YXIgZmFjZXMgPSBvYmpHZW9tZXRyeS5mYWNlcztcblxuXHRcdHZhciBpZHggPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZmFjZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHR2YXIgbm9ybWFsID0gZmFjZS5ub3JtYWw7XG5cblx0XHRcdHYxLmNvcHkoIHZlcnRpY2VzWyBmYWNlLmEgXSApXG5cdFx0XHRcdC5hZGQoIHZlcnRpY2VzWyBmYWNlLmIgXSApXG5cdFx0XHRcdC5hZGQoIHZlcnRpY2VzWyBmYWNlLmMgXSApXG5cdFx0XHRcdC5kaXZpZGVTY2FsYXIoIDMgKVxuXHRcdFx0XHQuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR2Mi5jb3B5KCBub3JtYWwgKS5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCB0aGlzLnNpemUgKS5hZGQoIHYxICk7XG5cblx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2Mi54LCB2Mi55LCB2Mi56ICk7XG5cblx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHR9XG5cblx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fTtcblxufSgpICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBEaXJlY3Rpb25hbExpZ2h0SGVscGVyKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbXG5cdFx0LSBzaXplLCBzaXplLCAwLFxuXHRcdHNpemUsIHNpemUsIDAsXG5cdFx0c2l6ZSwgLSBzaXplLCAwLFxuXHRcdC0gc2l6ZSwgLSBzaXplLCAwLFxuXHRcdC0gc2l6ZSwgc2l6ZSwgMFxuXHRdLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSB9ICk7XG5cblx0dGhpcy5saWdodFBsYW5lID0gbmV3IExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHR0aGlzLmFkZCggdGhpcy5saWdodFBsYW5lICk7XG5cblx0Z2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggWyAwLCAwLCAwLCAwLCAwLCAxIF0sIDMgKSApO1xuXG5cdHRoaXMudGFyZ2V0TGluZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0dGhpcy5hZGQoIHRoaXMudGFyZ2V0TGluZSApO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcbkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGlyZWN0aW9uYWxMaWdodEhlbHBlcjtcblxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmxpZ2h0UGxhbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXHR0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHR0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHYyID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHYzID0gbmV3IFZlY3RvcjMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0djEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0djIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdHYzLnN1YlZlY3RvcnMoIHYyLCB2MSApO1xuXG5cdFx0dGhpcy5saWdodFBsYW5lLmxvb2tBdCggdjIgKTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cdFx0XHR0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXHRcdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudGFyZ2V0TGluZS5sb29rQXQoIHYyICk7XG5cdFx0dGhpcy50YXJnZXRMaW5lLnNjYWxlLnogPSB2My5sZW5ndGgoKTtcblxuXHR9O1xuXG59KCk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICpcdC0gc2hvd3MgZnJ1c3R1bSwgbGluZSBvZiBzaWdodCBhbmQgdXAgb2YgdGhlIGNhbWVyYVxuICpcdC0gc3VpdGFibGUgZm9yIGZhc3QgdXBkYXRlc1xuICogXHQtIGJhc2VkIG9uIGZydXN0dW0gdmlzdWFsaXphdGlvbiBpbiBsaWdodGdsLmpzIHNoYWRvd21hcCBleGFtcGxlXG4gKlx0XHRodHRwOi8vZXZhbncuZ2l0aHViLmNvbS9saWdodGdsLmpzL3Rlc3RzL3NoYWRvd21hcC5odG1sXG4gKi9cblxuZnVuY3Rpb24gQ2FtZXJhSGVscGVyKCBjYW1lcmEgKSB7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYsIHZlcnRleENvbG9yczogRmFjZUNvbG9ycyB9ICk7XG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBjb2xvcnMgPSBbXTtcblxuXHR2YXIgcG9pbnRNYXAgPSB7fTtcblxuXHQvLyBjb2xvcnNcblxuXHR2YXIgY29sb3JGcnVzdHVtID0gbmV3IENvbG9yKCAweGZmYWEwMCApO1xuXHR2YXIgY29sb3JDb25lID0gbmV3IENvbG9yKCAweGZmMDAwMCApO1xuXHR2YXIgY29sb3JVcCA9IG5ldyBDb2xvciggMHgwMGFhZmYgKTtcblx0dmFyIGNvbG9yVGFyZ2V0ID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXHR2YXIgY29sb3JDcm9zcyA9IG5ldyBDb2xvciggMHgzMzMzMzMgKTtcblxuXHQvLyBuZWFyXG5cblx0YWRkTGluZSggJ24xJywgJ24yJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMicsICduNCcsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjQnLCAnbjMnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ24zJywgJ24xJywgY29sb3JGcnVzdHVtICk7XG5cblx0Ly8gZmFyXG5cblx0YWRkTGluZSggJ2YxJywgJ2YyJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICdmMicsICdmNCcsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnZjQnLCAnZjMnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ2YzJywgJ2YxJywgY29sb3JGcnVzdHVtICk7XG5cblx0Ly8gc2lkZXNcblxuXHRhZGRMaW5lKCAnbjEnLCAnZjEnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ24yJywgJ2YyJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMycsICdmMycsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjQnLCAnZjQnLCBjb2xvckZydXN0dW0gKTtcblxuXHQvLyBjb25lXG5cblx0YWRkTGluZSggJ3AnLCAnbjEnLCBjb2xvckNvbmUgKTtcblx0YWRkTGluZSggJ3AnLCAnbjInLCBjb2xvckNvbmUgKTtcblx0YWRkTGluZSggJ3AnLCAnbjMnLCBjb2xvckNvbmUgKTtcblx0YWRkTGluZSggJ3AnLCAnbjQnLCBjb2xvckNvbmUgKTtcblxuXHQvLyB1cFxuXG5cdGFkZExpbmUoICd1MScsICd1MicsIGNvbG9yVXAgKTtcblx0YWRkTGluZSggJ3UyJywgJ3UzJywgY29sb3JVcCApO1xuXHRhZGRMaW5lKCAndTMnLCAndTEnLCBjb2xvclVwICk7XG5cblx0Ly8gdGFyZ2V0XG5cblx0YWRkTGluZSggJ2MnLCAndCcsIGNvbG9yVGFyZ2V0ICk7XG5cdGFkZExpbmUoICdwJywgJ2MnLCBjb2xvckNyb3NzICk7XG5cblx0Ly8gY3Jvc3NcblxuXHRhZGRMaW5lKCAnY24xJywgJ2NuMicsIGNvbG9yQ3Jvc3MgKTtcblx0YWRkTGluZSggJ2NuMycsICdjbjQnLCBjb2xvckNyb3NzICk7XG5cblx0YWRkTGluZSggJ2NmMScsICdjZjInLCBjb2xvckNyb3NzICk7XG5cdGFkZExpbmUoICdjZjMnLCAnY2Y0JywgY29sb3JDcm9zcyApO1xuXG5cdGZ1bmN0aW9uIGFkZExpbmUoIGEsIGIsIGNvbG9yICkge1xuXG5cdFx0YWRkUG9pbnQoIGEsIGNvbG9yICk7XG5cdFx0YWRkUG9pbnQoIGIsIGNvbG9yICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZFBvaW50KCBpZCwgY29sb3IgKSB7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdGlmICggcG9pbnRNYXBbIGlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cG9pbnRNYXBbIGlkIF0gPSBbXTtcblxuXHRcdH1cblxuXHRcdHBvaW50TWFwWyBpZCBdLnB1c2goICggdmVydGljZXMubGVuZ3RoIC8gMyApIC0gMSApO1xuXG5cdH1cblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXHRpZiAoIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXggKSB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0dGhpcy5tYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMucG9pbnRNYXAgPSBwb2ludE1hcDtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cbkNhbWVyYUhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5DYW1lcmFIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2FtZXJhSGVscGVyO1xuXG5DYW1lcmFIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZ2VvbWV0cnksIHBvaW50TWFwO1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgY2FtZXJhID0gbmV3IENhbWVyYSgpO1xuXG5cdGZ1bmN0aW9uIHNldFBvaW50KCBwb2ludCwgeCwgeSwgeiApIHtcblxuXHRcdHZlY3Rvci5zZXQoIHgsIHksIHogKS51bnByb2plY3QoIGNhbWVyYSApO1xuXG5cdFx0dmFyIHBvaW50cyA9IHBvaW50TWFwWyBwb2ludCBdO1xuXG5cdFx0aWYgKCBwb2ludHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggcG9pbnRzWyBpIF0sIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0Z2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdHBvaW50TWFwID0gdGhpcy5wb2ludE1hcDtcblxuXHRcdHZhciB3ID0gMSwgaCA9IDE7XG5cblx0XHQvLyB3ZSBuZWVkIGp1c3QgY2FtZXJhIHByb2plY3Rpb24gbWF0cml4IGludmVyc2Vcblx0XHQvLyB3b3JsZCBtYXRyaXggbXVzdCBiZSBpZGVudGl0eVxuXG5cdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMuY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cblx0XHQvLyBjZW50ZXIgLyB0YXJnZXRcblxuXHRcdHNldFBvaW50KCAnYycsIDAsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndCcsIDAsIDAsIDEgKTtcblxuXHRcdC8vIG5lYXJcblxuXHRcdHNldFBvaW50KCAnbjEnLCAtIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMicsIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMycsIC0gdywgaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduNCcsIHcsIGgsIC0gMSApO1xuXG5cdFx0Ly8gZmFyXG5cblx0XHRzZXRQb2ludCggJ2YxJywgLSB3LCAtIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2YyJywgdywgLSBoLCAxICk7XG5cdFx0c2V0UG9pbnQoICdmMycsIC0gdywgaCwgMSApO1xuXHRcdHNldFBvaW50KCAnZjQnLCB3LCBoLCAxICk7XG5cblx0XHQvLyB1cFxuXG5cdFx0c2V0UG9pbnQoICd1MScsIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndTInLCAtIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndTMnLCAwLCBoICogMiwgLSAxICk7XG5cblx0XHQvLyBjcm9zc1xuXG5cdFx0c2V0UG9pbnQoICdjZjEnLCAtIHcsIDAsIDEgKTtcblx0XHRzZXRQb2ludCggJ2NmMicsIHcsIDAsIDEgKTtcblx0XHRzZXRQb2ludCggJ2NmMycsIDAsIC0gaCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2Y0JywgMCwgaCwgMSApO1xuXG5cdFx0c2V0UG9pbnQoICdjbjEnLCAtIHcsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnY24yJywgdywgMCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjMnLCAwLCAtIGgsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnY240JywgMCwgaCwgLSAxICk7XG5cblx0XHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gQm94SGVscGVyKCBvYmplY3QsIGNvbG9yICkge1xuXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdGlmICggY29sb3IgPT09IHVuZGVmaW5lZCApIGNvbG9yID0gMHhmZmZmMDA7XG5cblx0dmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7XG5cdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KCA4ICogMyApO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5zZXRJbmRleCggbmV3IEJ1ZmZlckF0dHJpYnV0ZSggaW5kaWNlcywgMSApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IgfSApICk7XG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5Cb3hIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQm94SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEhlbHBlcjtcblxuQm94SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgYm94ID0gbmV3IEJveDMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3hIZWxwZXI6IC51cGRhdGUoKSBoYXMgbm8gbG9uZ2VyIGFyZ3VtZW50cy4nICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJveC5zZXRGcm9tT2JqZWN0KCB0aGlzLm9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib3guaXNFbXB0eSgpICkgcmV0dXJuO1xuXG5cdFx0dmFyIG1pbiA9IGJveC5taW47XG5cdFx0dmFyIG1heCA9IGJveC5tYXg7XG5cblx0XHQvKlxuXHRcdCAgNV9fX180XG5cdFx0MS9fX18wL3xcblx0XHR8IDZfX3xfN1xuXHRcdDIvX19fMy9cblxuXHRcdDA6IG1heC54LCBtYXgueSwgbWF4Lnpcblx0XHQxOiBtaW4ueCwgbWF4LnksIG1heC56XG5cdFx0MjogbWluLngsIG1pbi55LCBtYXguelxuXHRcdDM6IG1heC54LCBtaW4ueSwgbWF4Lnpcblx0XHQ0OiBtYXgueCwgbWF4LnksIG1pbi56XG5cdFx0NTogbWluLngsIG1heC55LCBtaW4uelxuXHRcdDY6IG1pbi54LCBtaW4ueSwgbWluLnpcblx0XHQ3OiBtYXgueCwgbWluLnksIG1pbi56XG5cdFx0Ki9cblxuXHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHR2YXIgYXJyYXkgPSBwb3NpdGlvbi5hcnJheTtcblxuXHRcdGFycmF5WyAwIF0gPSBtYXgueDsgYXJyYXlbIDEgXSA9IG1heC55OyBhcnJheVsgMiBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDMgXSA9IG1pbi54OyBhcnJheVsgNCBdID0gbWF4Lnk7IGFycmF5WyA1IF0gPSBtYXguejtcblx0XHRhcnJheVsgNiBdID0gbWluLng7IGFycmF5WyA3IF0gPSBtaW4ueTsgYXJyYXlbIDggXSA9IG1heC56O1xuXHRcdGFycmF5WyA5IF0gPSBtYXgueDsgYXJyYXlbIDEwIF0gPSBtaW4ueTsgYXJyYXlbIDExIF0gPSBtYXguejtcblx0XHRhcnJheVsgMTIgXSA9IG1heC54OyBhcnJheVsgMTMgXSA9IG1heC55OyBhcnJheVsgMTQgXSA9IG1pbi56O1xuXHRcdGFycmF5WyAxNSBdID0gbWluLng7IGFycmF5WyAxNiBdID0gbWF4Lnk7IGFycmF5WyAxNyBdID0gbWluLno7XG5cdFx0YXJyYXlbIDE4IF0gPSBtaW4ueDsgYXJyYXlbIDE5IF0gPSBtaW4ueTsgYXJyYXlbIDIwIF0gPSBtaW4uejtcblx0XHRhcnJheVsgMjEgXSA9IG1heC54OyBhcnJheVsgMjIgXSA9IG1pbi55OyBhcnJheVsgMjMgXSA9IG1pbi56O1xuXG5cdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHR9O1xuXG59ICkoKTtcblxuQm94SGVscGVyLnByb3RvdHlwZS5zZXRGcm9tT2JqZWN0ID0gZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cdHRoaXMudXBkYXRlKCk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJveEhlbHBlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdExpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLm9iamVjdCA9IHNvdXJjZS5vYmplY3Q7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJveEhlbHBlci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIEJveDNIZWxwZXIoIGJveCwgY29sb3IgKSB7XG5cblx0dGhpcy50eXBlID0gJ0JveDNIZWxwZXInO1xuXG5cdHRoaXMuYm94ID0gYm94O1xuXG5cdGNvbG9yID0gY29sb3IgfHwgMHhmZmZmMDA7XG5cblx0dmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IFsgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSBdO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTtcblxuXHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG59XG5cbkJveDNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQm94M0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCb3gzSGVscGVyO1xuXG5Cb3gzSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0dmFyIGJveCA9IHRoaXMuYm94O1xuXG5cdGlmICggYm94LmlzRW1wdHkoKSApIHJldHVybjtcblxuXHRib3guZ2V0Q2VudGVyKCB0aGlzLnBvc2l0aW9uICk7XG5cblx0Ym94LmdldFNpemUoIHRoaXMuc2NhbGUgKTtcblxuXHR0aGlzLnNjYWxlLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBQbGFuZUhlbHBlciggcGxhbmUsIHNpemUsIGhleCApIHtcblxuXHR0aGlzLnR5cGUgPSAnUGxhbmVIZWxwZXInO1xuXG5cdHRoaXMucGxhbmUgPSBwbGFuZTtcblxuXHR0aGlzLnNpemUgPSAoIHNpemUgPT09IHVuZGVmaW5lZCApID8gMSA6IHNpemU7XG5cblx0dmFyIGNvbG9yID0gKCBoZXggIT09IHVuZGVmaW5lZCApID8gaGV4IDogMHhmZmZmMDA7XG5cblx0dmFyIHBvc2l0aW9ucyA9IFsgMSwgLSAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDEsIDAsIDAsIDAgXTtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0TGluZS5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTtcblxuXHQvL1xuXG5cdHZhciBwb3NpdGlvbnMyID0gWyAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxIF07XG5cblx0dmFyIGdlb21ldHJ5MiA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeTIuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zMiwgMyApICk7XG5cdGdlb21ldHJ5Mi5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHR0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5MiwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgb3BhY2l0eTogMC4yLCB0cmFuc3BhcmVudDogdHJ1ZSwgZGVwdGhXcml0ZTogZmFsc2UgfSApICkgKTtcblxufVxuXG5QbGFuZUhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lLnByb3RvdHlwZSApO1xuUGxhbmVIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVIZWxwZXI7XG5cblBsYW5lSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0dmFyIHNjYWxlID0gLSB0aGlzLnBsYW5lLmNvbnN0YW50O1xuXG5cdGlmICggTWF0aC5hYnMoIHNjYWxlICkgPCAxZS04ICkgc2NhbGUgPSAxZS04OyAvLyBzaWduIGRvZXMgbm90IG1hdHRlclxuXG5cdHRoaXMuc2NhbGUuc2V0KCAwLjUgKiB0aGlzLnNpemUsIDAuNSAqIHRoaXMuc2l6ZSwgc2NhbGUgKTtcblxuXHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuc2lkZSA9ICggc2NhbGUgPCAwICkgPyBCYWNrU2lkZSA6IEZyb250U2lkZTsgLy8gcmVuZGVyZXIgZmxpcHMgc2lkZSB3aGVuIGRldGVybWluYW50IDwgMDsgZmxpcHBpbmcgbm90IHdhbnRlZCBoZXJlXG5cblx0dGhpcy5sb29rQXQoIHRoaXMucGxhbmUubm9ybWFsICk7XG5cblx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vZ2l0aHViLmNvbS96ejg1XG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJvdyBmb3IgdmlzdWFsaXppbmcgZGlyZWN0aW9uc1xuICpcbiAqIFBhcmFtZXRlcnM6XG4gKiAgZGlyIC0gVmVjdG9yM1xuICogIG9yaWdpbiAtIFZlY3RvcjNcbiAqICBsZW5ndGggLSBOdW1iZXJcbiAqICBjb2xvciAtIGNvbG9yIGluIGhleCB2YWx1ZVxuICogIGhlYWRMZW5ndGggLSBOdW1iZXJcbiAqICBoZWFkV2lkdGggLSBOdW1iZXJcbiAqL1xuXG52YXIgbGluZUdlb21ldHJ5LCBjb25lR2VvbWV0cnk7XG5cbmZ1bmN0aW9uIEFycm93SGVscGVyKCBkaXIsIG9yaWdpbiwgbGVuZ3RoLCBjb2xvciwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICkge1xuXG5cdC8vIGRpciBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0aWYgKCBkaXIgPT09IHVuZGVmaW5lZCApIGRpciA9IG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7XG5cdGlmICggb3JpZ2luID09PSB1bmRlZmluZWQgKSBvcmlnaW4gPSBuZXcgVmVjdG9yMyggMCwgMCwgMCApO1xuXHRpZiAoIGxlbmd0aCA9PT0gdW5kZWZpbmVkICkgbGVuZ3RoID0gMTtcblx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkgY29sb3IgPSAweGZmZmYwMDtcblx0aWYgKCBoZWFkTGVuZ3RoID09PSB1bmRlZmluZWQgKSBoZWFkTGVuZ3RoID0gMC4yICogbGVuZ3RoO1xuXHRpZiAoIGhlYWRXaWR0aCA9PT0gdW5kZWZpbmVkICkgaGVhZFdpZHRoID0gMC4yICogaGVhZExlbmd0aDtcblxuXHRpZiAoIGxpbmVHZW9tZXRyeSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0bGluZUdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0bGluZUdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMSwgMCBdLCAzICkgKTtcblxuXHRcdGNvbmVHZW9tZXRyeSA9IG5ldyBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5KCAwLCAwLjUsIDEsIDUsIDEgKTtcblx0XHRjb25lR2VvbWV0cnkudHJhbnNsYXRlKCAwLCAtIDAuNSwgMCApO1xuXG5cdH1cblxuXHR0aGlzLnBvc2l0aW9uLmNvcHkoIG9yaWdpbiApO1xuXG5cdHRoaXMubGluZSA9IG5ldyBMaW5lKCBsaW5lR2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IgfSApICk7XG5cdHRoaXMubGluZS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMuYWRkKCB0aGlzLmxpbmUgKTtcblxuXHR0aGlzLmNvbmUgPSBuZXcgTWVzaCggY29uZUdlb21ldHJ5LCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yIH0gKSApO1xuXHR0aGlzLmNvbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmFkZCggdGhpcy5jb25lICk7XG5cblx0dGhpcy5zZXREaXJlY3Rpb24oIGRpciApO1xuXHR0aGlzLnNldExlbmd0aCggbGVuZ3RoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcblxufVxuXG5BcnJvd0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcbkFycm93SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFycm93SGVscGVyO1xuXG5BcnJvd0hlbHBlci5wcm90b3R5cGUuc2V0RGlyZWN0aW9uID0gKCBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGF4aXMgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgcmFkaWFucztcblxuXHRyZXR1cm4gZnVuY3Rpb24gc2V0RGlyZWN0aW9uKCBkaXIgKSB7XG5cblx0XHQvLyBkaXIgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHRpZiAoIGRpci55ID4gMC45OTk5OSApIHtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMCwgMCwgMCwgMSApO1xuXG5cdFx0fSBlbHNlIGlmICggZGlyLnkgPCAtIDAuOTk5OTkgKSB7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5zZXQoIDEsIDAsIDAsIDAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGF4aXMuc2V0KCBkaXIueiwgMCwgLSBkaXIueCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRyYWRpYW5zID0gTWF0aC5hY29zKCBkaXIueSApO1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgcmFkaWFucyApO1xuXG5cdFx0fVxuXG5cdH07XG5cbn0oKSApO1xuXG5BcnJvd0hlbHBlci5wcm90b3R5cGUuc2V0TGVuZ3RoID0gZnVuY3Rpb24gKCBsZW5ndGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApIHtcblxuXHRpZiAoIGhlYWRMZW5ndGggPT09IHVuZGVmaW5lZCApIGhlYWRMZW5ndGggPSAwLjIgKiBsZW5ndGg7XG5cdGlmICggaGVhZFdpZHRoID09PSB1bmRlZmluZWQgKSBoZWFkV2lkdGggPSAwLjIgKiBoZWFkTGVuZ3RoO1xuXG5cdHRoaXMubGluZS5zY2FsZS5zZXQoIDEsIE1hdGgubWF4KCAwLCBsZW5ndGggLSBoZWFkTGVuZ3RoICksIDEgKTtcblx0dGhpcy5saW5lLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdHRoaXMuY29uZS5zY2FsZS5zZXQoIGhlYWRXaWR0aCwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICk7XG5cdHRoaXMuY29uZS5wb3NpdGlvbi55ID0gbGVuZ3RoO1xuXHR0aGlzLmNvbmUudXBkYXRlTWF0cml4KCk7XG5cbn07XG5cbkFycm93SGVscGVyLnByb3RvdHlwZS5zZXRDb2xvciA9IGZ1bmN0aW9uICggY29sb3IgKSB7XG5cblx0dGhpcy5saW5lLm1hdGVyaWFsLmNvbG9yLnNldCggY29sb3IgKTtcblx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldCggY29sb3IgKTtcblxufTtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIGZhbHNlICk7XG5cblx0dGhpcy5saW5lLmNvcHkoIHNvdXJjZS5saW5lICk7XG5cdHRoaXMuY29uZS5jb3B5KCBzb3VyY2UuY29uZSApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5BcnJvd0hlbHBlci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3Igc3JvdWNoZXJheSAvIGh0dHA6Ly9zcm91Y2hlcmF5Lm9yZy9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQXhlc0hlbHBlciggc2l6ZSApIHtcblxuXHRzaXplID0gc2l6ZSB8fCAxO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtcblx0XHQwLCAwLCAwLFx0c2l6ZSwgMCwgMCxcblx0XHQwLCAwLCAwLFx0MCwgc2l6ZSwgMCxcblx0XHQwLCAwLCAwLFx0MCwgMCwgc2l6ZVxuXHRdO1xuXG5cdHZhciBjb2xvcnMgPSBbXG5cdFx0MSwgMCwgMCxcdDEsIDAuNiwgMCxcblx0XHQwLCAxLCAwLFx0MC42LCAxLCAwLFxuXHRcdDAsIDAsIDEsXHQwLCAwLjYsIDFcblx0XTtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IFZlcnRleENvbG9ycyB9ICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG59XG5cbkF4ZXNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQXhlc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBeGVzSGVscGVyO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gRmFjZTQoIGEsIGIsIGMsIGQsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRmFjZTQgaGFzIGJlZW4gcmVtb3ZlZC4gQSBUSFJFRS5GYWNlMyB3aWxsIGJlIGNyZWF0ZWQgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgRmFjZTMoIGEsIGIsIGMsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXggKTtcblxufVxuXG52YXIgTGluZVN0cmlwID0gMDtcblxudmFyIExpbmVQaWVjZXMgPSAxO1xuXG5mdW5jdGlvbiBNZXNoRmFjZU1hdGVyaWFsKCBtYXRlcmlhbHMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWVzaEZhY2VNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBtYXRlcmlhbHM7XG5cbn1cblxuZnVuY3Rpb24gTXVsdGlNYXRlcmlhbCggbWF0ZXJpYWxzICkge1xuXG5cdGlmICggbWF0ZXJpYWxzID09PSB1bmRlZmluZWQgKSBtYXRlcmlhbHMgPSBbXTtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NdWx0aU1hdGVyaWFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBhbiBBcnJheSBpbnN0ZWFkLicgKTtcblx0bWF0ZXJpYWxzLmlzTXVsdGlNYXRlcmlhbCA9IHRydWU7XG5cdG1hdGVyaWFscy5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG5cdG1hdGVyaWFscy5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBtYXRlcmlhbHMuc2xpY2UoKTtcblxuXHR9O1xuXHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG59XG5cbmZ1bmN0aW9uIFBvaW50Q2xvdWQoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Qb2ludENsb3VkIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLicgKTtcblx0cmV0dXJuIG5ldyBQb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG59XG5cbmZ1bmN0aW9uIFBhcnRpY2xlKCBtYXRlcmlhbCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlNwcml0ZS4nICk7XG5cdHJldHVybiBuZXcgU3ByaXRlKCBtYXRlcmlhbCApO1xuXG59XG5cbmZ1bmN0aW9uIFBhcnRpY2xlU3lzdGVtKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGVTeXN0ZW0gaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHMuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cbn1cblxuZnVuY3Rpb24gUG9pbnRDbG91ZE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50c01hdGVyaWFsLicgKTtcblx0cmV0dXJuIG5ldyBQb2ludHNNYXRlcmlhbCggcGFyYW1ldGVycyApO1xuXG59XG5cbmZ1bmN0aW9uIFBhcnRpY2xlQmFzaWNNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZUJhc2ljTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZVN5c3RlbU1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5mdW5jdGlvbiBWZXJ0ZXgoIHgsIHksIHogKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVydGV4IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5WZWN0b3IzIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFZlY3RvcjMoIHgsIHksIHogKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBEeW5hbWljQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSgpLnNldER5bmFtaWMoIHRydWUgKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApLnNldER5bmFtaWMoIHRydWUgKTtcblxufVxuXG5mdW5jdGlvbiBJbnQ4QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDhCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBJbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBVaW50OEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQ4QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDhCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBVaW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDhDbGFtcGVkQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDhDbGFtcGVkQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBJbnQxNkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuSW50MTZCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBJbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDE2QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDE2QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBJbnQzMkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuSW50MzJCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDMyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBGbG9hdDMyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRmxvYXQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBGbG9hdDY0QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRmxvYXQ2NEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBGbG9hdDY0QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG4vL1xuXG5DdXJ2ZS5jcmVhdGUgPSBmdW5jdGlvbiAoIGNvbnN0cnVjdCwgZ2V0UG9pbnQgKSB7XG5cblx0Y29uc29sZS5sb2coICdUSFJFRS5DdXJ2ZS5jcmVhdGUoKSBoYXMgYmVlbiBkZXByZWNhdGVkJyApO1xuXG5cdGNvbnN0cnVjdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblx0Y29uc3RydWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdDtcblx0Y29uc3RydWN0LnByb3RvdHlwZS5nZXRQb2ludCA9IGdldFBvaW50O1xuXG5cdHJldHVybiBjb25zdHJ1Y3Q7XG5cbn07XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIEN1cnZlUGF0aC5wcm90b3R5cGUsIHtcblxuXHRjcmVhdGVQb2ludHNHZW9tZXRyeTogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVQb2ludHNHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLicgKTtcblxuXHRcdC8vIGdlbmVyYXRlIGdlb21ldHJ5IGZyb20gcGF0aCBwb2ludHMgKGZvciBMaW5lIG9yIFBvaW50cyBvYmplY3RzKVxuXG5cdFx0dmFyIHB0cyA9IHRoaXMuZ2V0UG9pbnRzKCBkaXZpc2lvbnMgKTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVHZW9tZXRyeSggcHRzICk7XG5cblx0fSxcblxuXHRjcmVhdGVTcGFjZWRQb2ludHNHZW9tZXRyeTogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVTcGFjZWRQb2ludHNHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLicgKTtcblxuXHRcdC8vIGdlbmVyYXRlIGdlb21ldHJ5IGZyb20gZXF1aWRpc3RhbnQgc2FtcGxpbmcgYWxvbmcgdGhlIHBhdGhcblxuXHRcdHZhciBwdHMgPSB0aGlzLmdldFNwYWNlZFBvaW50cyggZGl2aXNpb25zICk7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoIHB0cyApO1xuXG5cdH0sXG5cblx0Y3JlYXRlR2VvbWV0cnk6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmVQYXRoOiAuY3JlYXRlR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICkgaW5zdGVhZC4nICk7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgcG9pbnQgPSBwb2ludHNbIGkgXTtcblx0XHRcdGdlb21ldHJ5LnZlcnRpY2VzLnB1c2goIG5ldyBWZWN0b3IzKCBwb2ludC54LCBwb2ludC55LCBwb2ludC56IHx8IDAgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdlb21ldHJ5O1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBQYXRoLnByb3RvdHlwZSwge1xuXG5cdGZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGF0aDogLmZyb21Qb2ludHMoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tUG9pbnRzKCkuJyApO1xuXHRcdHRoaXMuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cbmZ1bmN0aW9uIENsb3NlZFNwbGluZUN1cnZlMyggcG9pbnRzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkNsb3NlZFNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTtcblxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XG5cdHRoaXMuY2xvc2VkID0gdHJ1ZTtcblxufVxuXG5DbG9zZWRTcGxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgKTtcblxuLy9cblxuZnVuY3Rpb24gU3BsaW5lQ3VydmUzKCBwb2ludHMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuU3BsaW5lQ3VydmUzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuJyApO1xuXG5cdENhdG11bGxSb21DdXJ2ZTMuY2FsbCggdGhpcywgcG9pbnRzICk7XG5cdHRoaXMudHlwZSA9ICdjYXRtdWxscm9tJztcblxufVxuXG5TcGxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgKTtcblxuLy9cblxuZnVuY3Rpb24gU3BsaW5lKCBwb2ludHMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuU3BsaW5lIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuJyApO1xuXG5cdENhdG11bGxSb21DdXJ2ZTMuY2FsbCggdGhpcywgcG9pbnRzICk7XG5cdHRoaXMudHlwZSA9ICdjYXRtdWxscm9tJztcblxufVxuXG5TcGxpbmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgKTtcblxuT2JqZWN0LmFzc2lnbiggU3BsaW5lLnByb3RvdHlwZSwge1xuXG5cdGluaXRGcm9tQXJyYXk6IGZ1bmN0aW9uICggLyogYSAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcGxpbmU6IC5pbml0RnJvbUFycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0Z2V0Q29udHJvbFBvaW50c0FycmF5OiBmdW5jdGlvbiAoIC8qIG9wdGlvbmFsVGFyZ2V0ICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNwbGluZTogLmdldENvbnRyb2xQb2ludHNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aDogZnVuY3Rpb24gKCAvKiBzYW1wbGluZ0NvZWYgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU3BsaW5lOiAucmVwYXJhbWV0cml6ZUJ5QXJjTGVuZ3RoKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cbmZ1bmN0aW9uIEF4aXNIZWxwZXIoIHNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXhpc0hlbHBlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkF4ZXNIZWxwZXIuJyApO1xuXHRyZXR1cm4gbmV3IEF4ZXNIZWxwZXIoIHNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBCb3VuZGluZ0JveEhlbHBlciggb2JqZWN0LCBjb2xvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3VuZGluZ0JveEhlbHBlciBoYXMgYmVlbiBkZXByZWNhdGVkLiBDcmVhdGluZyBhIFRIUkVFLkJveEhlbHBlciBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKTtcblxufVxuXG5mdW5jdGlvbiBFZGdlc0hlbHBlciggb2JqZWN0LCBoZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRWRnZXNIZWxwZXIgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkVkZ2VzR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgTGluZVNlZ21lbnRzKCBuZXcgRWRnZXNHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9ICkgKTtcblxufVxuXG5HcmlkSGVscGVyLnByb3RvdHlwZS5zZXRDb2xvcnMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdyaWRIZWxwZXI6IHNldENvbG9ycygpIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBhc3MgdGhlbSBpbiB0aGUgY29uc3RydWN0b3IgaW5zdGVhZC4nICk7XG5cbn07XG5cblNrZWxldG9uSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNrZWxldG9uSGVscGVyOiB1cGRhdGUoKSBubyBsb25nZXIgbmVlZHMgdG8gYmUgY2FsbGVkLicgKTtcblxufTtcblxuZnVuY3Rpb24gV2lyZWZyYW1lSGVscGVyKCBvYmplY3QsIGhleCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XaXJlZnJhbWVIZWxwZXIgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLldpcmVmcmFtZUdlb21ldHJ5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IExpbmVTZWdtZW50cyggbmV3IFdpcmVmcmFtZUdlb21ldHJ5KCBvYmplY3QuZ2VvbWV0cnkgKSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBoZXggIT09IHVuZGVmaW5lZCA/IGhleCA6IDB4ZmZmZmZmIH0gKSApO1xuXG59XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIExvYWRlci5wcm90b3R5cGUsIHtcblxuXHRleHRyYWN0VXJsQmFzZTogZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Mb2FkZXI6IC5leHRyYWN0VXJsQmFzZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5Mb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSgpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICk7XG5cblx0fVxuXG59ICk7XG5cbmZ1bmN0aW9uIFhIUkxvYWRlciggbWFuYWdlciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5YSFJMb2FkZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5GaWxlTG9hZGVyLicgKTtcblx0cmV0dXJuIG5ldyBGaWxlTG9hZGVyKCBtYW5hZ2VyICk7XG5cbn1cblxuZnVuY3Rpb24gQmluYXJ5VGV4dHVyZUxvYWRlciggbWFuYWdlciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5CaW5hcnlUZXh0dXJlTG9hZGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuRGF0YVRleHR1cmVMb2FkZXIuJyApO1xuXHRyZXR1cm4gbmV3IERhdGFUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggT2JqZWN0TG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdHNldFRleHR1cmVQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiAuc2V0VGV4dHVyZVBhdGgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRSZXNvdXJjZVBhdGgoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc2V0UmVzb3VyY2VQYXRoKCB2YWx1ZSApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBCb3gyLnByb3RvdHlwZSwge1xuXG5cdGNlbnRlcjogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2VudGVyKCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH0sXG5cdGVtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZW1wdHkoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pc0VtcHR5KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKTtcblxuXHR9LFxuXHRpc0ludGVyc2VjdGlvbkJveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuaXNJbnRlcnNlY3Rpb25Cb3goKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzQm94KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNCb3goIGJveCApO1xuXG5cdH0sXG5cdHNpemU6IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2l6ZSggb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIEJveDMucHJvdG90eXBlLCB7XG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmNlbnRlcigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldENlbnRlcigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fSxcblx0ZW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5lbXB0eSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmlzRW1wdHkoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpO1xuXG5cdH0sXG5cdGlzSW50ZXJzZWN0aW9uQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveCggYm94ICk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25TcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmlzSW50ZXJzZWN0aW9uU3BoZXJlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c1NwaGVyZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHR9LFxuXHRzaXplOiBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLnNpemUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRTaXplKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldFNpemUoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxufSApO1xuXG5MaW5lMy5wcm90b3R5cGUuY2VudGVyID0gZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmNlbnRlcigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldENlbnRlcigpLicgKTtcblx0cmV0dXJuIHRoaXMuZ2V0Q2VudGVyKCBvcHRpb25hbFRhcmdldCApO1xuXG59O1xuXG5PYmplY3QuYXNzaWduKCBfTWF0aCwge1xuXG5cdHJhbmRvbTE2OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRoOiAucmFuZG9tMTYoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgTWF0aC5yYW5kb20oKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gTWF0aC5yYW5kb20oKTtcblxuXHR9LFxuXG5cdG5lYXJlc3RQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0aDogLm5lYXJlc3RQb3dlck9mVHdvKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZmxvb3JQb3dlck9mVHdvKCkuJyApO1xuXHRcdHJldHVybiBfTWF0aC5mbG9vclBvd2VyT2ZUd28oIHZhbHVlICk7XG5cblx0fSxcblxuXHRuZXh0UG93ZXJPZlR3bzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGg6IC5uZXh0UG93ZXJPZlR3bygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNlaWxQb3dlck9mVHdvKCkuJyApO1xuXHRcdHJldHVybiBfTWF0aC5jZWlsUG93ZXJPZlR3byggdmFsdWUgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggTWF0cml4My5wcm90b3R5cGUsIHtcblxuXHRmbGF0dGVuVG9BcnJheU9mZnNldDogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLk1hdHJpeDM6IC5mbGF0dGVuVG9BcnJheU9mZnNldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudG9BcnJheSgpIGluc3RlYWQuXCIgKTtcblx0XHRyZXR1cm4gdGhpcy50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0fSxcblx0bXVsdGlwbHlWZWN0b3IzOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4MyggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDMoIHRoaXMgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFwcGx5VG9CdWZmZXI6IGZ1bmN0aW9uICggYnVmZmVyIC8qLCBvZmZzZXQsIGxlbmd0aCAqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvQnVmZmVyKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG1hdHJpeC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdGhpcy5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBidWZmZXIgKTtcblxuXHR9LFxuXHRhcHBseVRvVmVjdG9yM0FycmF5OiBmdW5jdGlvbiAoIC8qIGFycmF5LCBvZmZzZXQsIGxlbmd0aCAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXgzOiAuYXBwbHlUb1ZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBNYXRyaXg0LnByb3RvdHlwZSwge1xuXG5cdGV4dHJhY3RQb3NpdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmV4dHJhY3RQb3NpdGlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNvcHlQb3NpdGlvbigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5jb3B5UG9zaXRpb24oIG0gKTtcblxuXHR9LFxuXHRmbGF0dGVuVG9BcnJheU9mZnNldDogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLk1hdHJpeDQ6IC5mbGF0dGVuVG9BcnJheU9mZnNldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudG9BcnJheSgpIGluc3RlYWQuXCIgKTtcblx0XHRyZXR1cm4gdGhpcy50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0fSxcblx0Z2V0UG9zaXRpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBnZXRQb3NpdGlvbigpIHtcblxuXHRcdFx0aWYgKCB2MSA9PT0gdW5kZWZpbmVkICkgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmdldFBvc2l0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB2MS5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAzICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblx0c2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApO1xuXG5cdH0sXG5cdG11bHRpcGx5VG9BcnJheTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VG9BcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdG11bHRpcGx5VmVjdG9yMzogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cblx0fSxcblx0bXVsdGlwbHlWZWN0b3I0OiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjQoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZUF4aXM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHR2LnRyYW5zZm9ybURpcmVjdGlvbiggdGhpcyApO1xuXG5cdH0sXG5cdGNyb3NzVmVjdG9yOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5jcm9zc1ZlY3RvcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggdGhpcyApO1xuXG5cdH0sXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC50cmFuc2xhdGUoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnJvdGF0ZVgoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnJvdGF0ZVkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnJvdGF0ZVooKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyb3RhdGVCeUF4aXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlQnlBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0YXBwbHlUb0J1ZmZlcjogZnVuY3Rpb24gKCBidWZmZXIgLyosIG9mZnNldCwgbGVuZ3RoICovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmFwcGx5VG9CdWZmZXIoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGJ1ZmZlciApO1xuXG5cdH0sXG5cdGFwcGx5VG9WZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYXJyYXksIG9mZnNldCwgbGVuZ3RoICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5hcHBseVRvVmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0bWFrZUZydXN0dW06IGZ1bmN0aW9uICggbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubWFrZUZydXN0dW0oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYWtlUGVyc3BlY3RpdmUoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICk7XG5cblx0fVxuXG59ICk7XG5cblBsYW5lLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkxpbmUgPSBmdW5jdGlvbiAoIGxpbmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5pc0ludGVyc2VjdGlvbkxpbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzTGluZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0xpbmUoIGxpbmUgKTtcblxufTtcblxuUXVhdGVybmlvbi5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3IzID0gZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBpcyBub3cgdmVjdG9yLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbiApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdmVjdG9yLmFwcGx5UXVhdGVybmlvbiggdGhpcyApO1xuXG59O1xuXG5PYmplY3QuYXNzaWduKCBSYXkucHJvdG90eXBlLCB7XG5cblx0aXNJbnRlcnNlY3Rpb25Cb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25Cb3goKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzQm94KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNCb3goIGJveCApO1xuXG5cdH0sXG5cdGlzSW50ZXJzZWN0aW9uUGxhbmU6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXk6IC5pc0ludGVyc2VjdGlvblBsYW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c1BsYW5lKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNQbGFuZSggcGxhbmUgKTtcblxuXHR9LFxuXHRpc0ludGVyc2VjdGlvblNwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXk6IC5pc0ludGVyc2VjdGlvblNwaGVyZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNTcGhlcmUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFRyaWFuZ2xlLnByb3RvdHlwZSwge1xuXG5cdGFyZWE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYXJlYSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEFyZWEoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXJlYSgpO1xuXG5cdH0sXG5cdGJhcnljb29yZEZyb21Qb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5iYXJ5Y29vcmRGcm9tUG9pbnQoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRCYXJ5Y29vcmQoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QmFyeWNvb3JkKCBwb2ludCwgdGFyZ2V0ICk7XG5cblx0fSxcblx0bWlkcG9pbnQ6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5taWRwb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE1pZHBvaW50KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldE1pZHBvaW50KCB0YXJnZXQgKTtcblxuXHR9LFxuXHRub3JtYWw6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5ub3JtYWwoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXROb3JtYWwoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Tm9ybWFsKCB0YXJnZXQgKTtcblxuXHR9LFxuXHRwbGFuZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLnBsYW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0UGxhbmUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UGxhbmUoIHRhcmdldCApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBUcmlhbmdsZSwge1xuXG5cdGJhcnljb29yZEZyb21Qb2ludDogZnVuY3Rpb24gKCBwb2ludCwgYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5iYXJ5Y29vcmRGcm9tUG9pbnQoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRCYXJ5Y29vcmQoKS4nICk7XG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApO1xuXG5cdH0sXG5cdG5vcm1hbDogZnVuY3Rpb24gKCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLm5vcm1hbCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE5vcm1hbCgpLicgKTtcblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0Tm9ybWFsKCBhLCBiLCBjLCB0YXJnZXQgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggU2hhcGUucHJvdG90eXBlLCB7XG5cblx0ZXh0cmFjdEFsbFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZTogLmV4dHJhY3RBbGxQb2ludHMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmV4dHJhY3RQb2ludHMoKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRyYWN0UG9pbnRzKCBkaXZpc2lvbnMgKTtcblxuXHR9LFxuXHRleHRydWRlOiBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZTogLmV4dHJ1ZGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXh0cnVkZUdlb21ldHJ5KCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIG5ldyBFeHRydWRlR2VvbWV0cnkoIHRoaXMsIG9wdGlvbnMgKTtcblxuXHR9LFxuXHRtYWtlR2VvbWV0cnk6IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAubWFrZUdlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFNoYXBlR2VvbWV0cnkoKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gbmV3IFNoYXBlR2VvbWV0cnkoIHRoaXMsIG9wdGlvbnMgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yMi5wcm90b3R5cGUsIHtcblxuXHRmcm9tQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKTtcblxuXHR9LFxuXHRkaXN0YW5jZVRvTWFuaGF0dGFuOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuZGlzdGFuY2VUb01hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkRpc3RhbmNlVG8oKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuRGlzdGFuY2VUbyggdiApO1xuXG5cdH0sXG5cdGxlbmd0aE1hbmhhdHRhbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmxlbmd0aE1hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkxlbmd0aCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yMy5wcm90b3R5cGUsIHtcblxuXHRzZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlZlY3RvcjM6IC5zZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFdWxlci5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBpbnN0ZWFkLicgKTtcblxuXHR9LFxuXHRzZXRFdWxlckZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVF1YXRlcm5pb24oKSBpbnN0ZWFkLicgKTtcblxuXHR9LFxuXHRnZXRQb3NpdGlvbkZyb21NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5nZXRQb3NpdGlvbkZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4UG9zaXRpb24oKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtICk7XG5cblx0fSxcblx0Z2V0U2NhbGVGcm9tTWF0cml4OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0U2NhbGVGcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFNjYWxlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXhTY2FsZSggbSApO1xuXG5cdH0sXG5cdGdldENvbHVtbkZyb21NYXRyaXg6IGZ1bmN0aW9uICggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5nZXRDb2x1bW5Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeENvbHVtbigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtYXRyaXgsIGluZGV4ICk7XG5cblx0fSxcblx0YXBwbHlQcm9qZWN0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuYXBwbHlQcm9qZWN0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5hcHBseU1hdHJpeDQoIG0gKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIG0gKTtcblxuXHR9LFxuXHRmcm9tQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKTtcblxuXHR9LFxuXHRkaXN0YW5jZVRvTWFuaGF0dGFuOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZGlzdGFuY2VUb01hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkRpc3RhbmNlVG8oKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuRGlzdGFuY2VUbyggdiApO1xuXG5cdH0sXG5cdGxlbmd0aE1hbmhhdHRhbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmxlbmd0aE1hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkxlbmd0aCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yNC5wcm90b3R5cGUsIHtcblxuXHRmcm9tQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKTtcblxuXHR9LFxuXHRsZW5ndGhNYW5oYXR0YW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCk7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIEdlb21ldHJ5LnByb3RvdHlwZSwge1xuXG5cdGNvbXB1dGVUYW5nZW50czogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0Y29tcHV0ZUxpbmVEaXN0YW5jZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HZW9tZXRyeTogLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkxpbmUuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKSBpbnN0ZWFkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggT2JqZWN0M0QucHJvdG90eXBlLCB7XG5cblx0Z2V0Q2hpbGRCeU5hbWU6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0Q2hpbGRCeU5hbWUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRPYmplY3RCeU5hbWUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlOYW1lKCBuYW1lICk7XG5cblx0fSxcblx0cmVuZGVyRGVwdGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAucmVuZGVyRGVwdGggaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5yZW5kZXJPcmRlciwgaW5zdGVhZC4nICk7XG5cblx0fSxcblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIGRpc3RhbmNlLCBheGlzICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC50cmFuc2xhdGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICk7XG5cblx0fSxcblx0Z2V0V29ybGRSb3RhdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRSb3RhdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5PYmplY3QzRC5nZXRXb3JsZFF1YXRlcm5pb24oIHRhcmdldCApIGluc3RlYWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggT2JqZWN0M0QucHJvdG90eXBlLCB7XG5cblx0ZXVsZXJPcmRlcjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLmV1bGVyT3JkZXIgaXMgbm93IC5yb3RhdGlvbi5vcmRlci4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5yb3RhdGlvbi5vcmRlcjtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLmV1bGVyT3JkZXIgaXMgbm93IC5yb3RhdGlvbi5vcmRlci4nICk7XG5cdFx0XHR0aGlzLnJvdGF0aW9uLm9yZGVyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHVzZVF1YXRlcm5pb246IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIExPRC5wcm90b3R5cGUsIHtcblxuXHRvYmplY3RzOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxPRDogLm9iamVjdHMgaGFzIGJlZW4gcmVuYW1lZCB0byAubGV2ZWxzLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmxldmVscztcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggU2tlbGV0b24ucHJvdG90eXBlLCAndXNlVmVydGV4VGV4dHVyZScsIHtcblxuXHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNrZWxldG9uOiB1c2VWZXJ0ZXhUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b246IHVzZVZlcnRleFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cblNraW5uZWRNZXNoLnByb3RvdHlwZS5pbml0Qm9uZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNraW5uZWRNZXNoOiBpbml0Qm9uZXMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBDdXJ2ZS5wcm90b3R5cGUsICdfX2FyY0xlbmd0aERpdmlzaW9ucycsIHtcblxuXHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlOiAuX19hcmNMZW5ndGhEaXZpc2lvbnMgaXMgbm93IC5hcmNMZW5ndGhEaXZpc2lvbnMuJyApO1xuXHRcdHJldHVybiB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLicgKTtcblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IHZhbHVlO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUuc2V0TGVucyA9IGZ1bmN0aW9uICggZm9jYWxMZW5ndGgsIGZpbG1HYXVnZSApIHtcblxuXHRjb25zb2xlLndhcm4oIFwiVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEuc2V0TGVucyBpcyBkZXByZWNhdGVkLiBcIiArXG5cdFx0XHRcIlVzZSAuc2V0Rm9jYWxMZW5ndGggYW5kIC5maWxtR2F1Z2UgZm9yIGEgcGhvdG9ncmFwaGljIHNldHVwLlwiICk7XG5cblx0aWYgKCBmaWxtR2F1Z2UgIT09IHVuZGVmaW5lZCApIHRoaXMuZmlsbUdhdWdlID0gZmlsbUdhdWdlO1xuXHR0aGlzLnNldEZvY2FsTGVuZ3RoKCBmb2NhbExlbmd0aCApO1xuXG59O1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTGlnaHQucHJvdG90eXBlLCB7XG5cdG9ubHlTaGFkb3c6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5vbmx5U2hhZG93IGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFGb3Y6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRm92IGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mb3YuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmZvdiA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFMZWZ0OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUxlZnQgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmxlZnQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmxlZnQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhUmlnaHQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhUmlnaHQgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnJpZ2h0LicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5yaWdodCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFUb3A6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhVG9wIGlzIG5vdyAuc2hhZG93LmNhbWVyYS50b3AuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLnRvcCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFCb3R0b206IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhQm90dG9tIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5ib3R0b20uJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFOZWFyOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYU5lYXIgaXMgbm93IC5zaGFkb3cuY2FtZXJhLm5lYXIuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLm5lYXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhRmFyOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUZhciBpcyBub3cgLnNoYWRvdy5jYW1lcmEuZmFyLicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5mYXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhVmlzaWJsZToge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVZpc2libGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5DYW1lcmFIZWxwZXIoIGxpZ2h0LnNoYWRvdy5jYW1lcmEgKSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Qmlhczoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dCaWFzIGlzIG5vdyAuc2hhZG93LmJpYXMuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuYmlhcyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dEYXJrbmVzczoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0RhcmtuZXNzIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBXaWR0aDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dNYXBXaWR0aCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLndpZHRoLicgKTtcblx0XHRcdHRoaXMuc2hhZG93Lm1hcFNpemUud2lkdGggPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93TWFwSGVpZ2h0OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd01hcEhlaWdodCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLmhlaWdodC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0bGVuZ3RoOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmNvdW50IGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoO1xuXG5cdFx0fVxuXHR9LFxuXHRjb3B5SW5kaWNlc0FycmF5OiBmdW5jdGlvbiAoIC8qIGluZGljZXMgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuY29weUluZGljZXNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRhZGRJbmRleDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkSW5kZXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRJbmRleCgpLicgKTtcblx0XHR0aGlzLnNldEluZGV4KCBpbmRleCApO1xuXG5cdH0sXG5cdGFkZERyYXdDYWxsOiBmdW5jdGlvbiAoIHN0YXJ0LCBjb3VudCwgaW5kZXhPZmZzZXQgKSB7XG5cblx0XHRpZiAoIGluZGV4T2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBubyBsb25nZXIgc3VwcG9ydHMgaW5kZXhPZmZzZXQuJyApO1xuXG5cdFx0fVxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBpcyBub3cgLmFkZEdyb3VwKCkuJyApO1xuXHRcdHRoaXMuYWRkR3JvdXAoIHN0YXJ0LCBjb3VudCApO1xuXG5cdH0sXG5cdGNsZWFyRHJhd0NhbGxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNsZWFyRHJhd0NhbGxzKCkgaXMgbm93IC5jbGVhckdyb3VwcygpLicgKTtcblx0XHR0aGlzLmNsZWFyR3JvdXBzKCk7XG5cblx0fSxcblx0Y29tcHV0ZVRhbmdlbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGNvbXB1dGVPZmZzZXRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVPZmZzZXRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRkcmF3Y2FsbHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuZHJhd2NhbGxzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHM7XG5cblx0XHR9XG5cdH0sXG5cdG9mZnNldHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5vZmZzZXRzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0Z2V0QXJyYXlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuZ2V0QXJyYXlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblxuXHRhZGRTaGFwZUxpc3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IC5hZGRTaGFwZUxpc3QoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXG5cdGFkZFNoYXBlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuYWRkU2hhcGUoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFVuaWZvcm0ucHJvdG90eXBlLCB7XG5cblx0ZHluYW1pYzoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Vbmlmb3JtOiAuZHluYW1pYyBoYXMgYmVlbiByZW1vdmVkLiBVc2Ugb2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdG9uVXBkYXRlOiB7XG5cdFx0dmFsdWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogLm9uVXBkYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0d3JhcEFyb3VuZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cblx0b3ZlcmRyYXc6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC5vdmVyZHJhdyBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAub3ZlcmRyYXcgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cblx0d3JhcFJHQjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBSR0IgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKCk7XG5cblx0XHR9XG5cdH0sXG5cblx0c2hhZGluZzoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHR0aGlzLmZsYXRTaGFkaW5nID0gKCB2YWx1ZSA9PT0gRmxhdFNoYWRpbmcgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBNZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUsIHtcblxuXHRtZXRhbDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbDogLm1ldGFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1lc2hQaG9uZ01hdGVyaWFsOiAubWV0YWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsIGluc3RlYWQnICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0ZGVyaXZhdGl2ZXM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IC5kZXJpdmF0aXZlcyBoYXMgYmVlbiBtb3ZlZCB0byAuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLiBTaGFkZXJNYXRlcmlhbDogLmRlcml2YXRpdmVzIGhhcyBiZWVuIG1vdmVkIHRvIC5leHRlbnNpb25zLmRlcml2YXRpdmVzLicgKTtcblx0XHRcdHRoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggV2ViR0xSZW5kZXJlci5wcm90b3R5cGUsIHtcblxuXHRjbGVhclRhcmdldDogZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5jbGVhclRhcmdldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2V0UmVuZGVyVGFyZ2V0KCkgYW5kIC5jbGVhcigpIGluc3RlYWQuJyApO1xuXHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHR0aGlzLmNsZWFyKCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKTtcblxuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFuaW1hdGUoKSBpcyBub3cgLnNldEFuaW1hdGlvbkxvb3AoKS4nICk7XG5cdFx0dGhpcy5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG5cdH0sXG5cdGdldEN1cnJlbnRSZW5kZXJUYXJnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0KCkgaXMgbm93IC5nZXRSZW5kZXJUYXJnZXQoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0fSxcblx0Z2V0TWF4QW5pc290cm9weTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldE1heEFuaXNvdHJvcHkoKSBpcyBub3cgLmNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCk7XG5cblx0fSxcblx0Z2V0UHJlY2lzaW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0UHJlY2lzaW9uKCkgaXMgbm93IC5jYXBhYmlsaXRpZXMucHJlY2lzaW9uLicgKTtcblx0XHRyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG5cdH0sXG5cdHJlc2V0R0xTdGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnJlc2V0R0xTdGF0ZSgpIGlzIG5vdyAuc3RhdGUucmVzZXQoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc3RhdGUucmVzZXQoKTtcblxuXHR9LFxuXHRzdXBwb3J0c0Zsb2F0VGV4dHVyZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0Zsb2F0VGV4dHVyZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfdGV4dHVyZV9mbG9hdFxcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3RleHR1cmVfaGFsZl9mbG9hdFxcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cblx0fSxcblx0c3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzXFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1xcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQzogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1xcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblxuXHR9LFxuXHRzdXBwb3J0c0JsZW5kTWluTWF4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNCbGVuZE1pbk1heCgpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ0VYVF9ibGVuZF9taW5tYXhcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdFWFRfYmxlbmRfbWlubWF4JyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c1ZlcnRleFRleHR1cmVzKCkgaXMgbm93IC5jYXBhYmlsaXRpZXMudmVydGV4VGV4dHVyZXMuJyApO1xuXHRcdHJldHVybiB0aGlzLmNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlcztcblxuXHR9LFxuXHRzdXBwb3J0c0luc3RhbmNlZEFycmF5czogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnQU5HTEVfaW5zdGFuY2VkX2FycmF5c1xcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cblx0fSxcblx0ZW5hYmxlU2Npc3NvclRlc3Q6IGZ1bmN0aW9uICggYm9vbGVhbiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5lbmFibGVTY2lzc29yVGVzdCgpIGlzIG5vdyAuc2V0U2Npc3NvclRlc3QoKS4nICk7XG5cdFx0dGhpcy5zZXRTY2lzc29yVGVzdCggYm9vbGVhbiApO1xuXG5cdH0sXG5cdGluaXRNYXRlcmlhbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmluaXRNYXRlcmlhbCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFkZFByZVBsdWdpbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFByZVBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFkZFBvc3RQbHVnaW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5hZGRQb3N0UGx1Z2luKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0dXBkYXRlU2hhZG93TWFwOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAudXBkYXRlU2hhZG93TWFwKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0c2V0RmFjZUN1bGxpbmc6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRGYWNlQ3VsbGluZygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFsbG9jVGV4dHVyZVVuaXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5hbGxvY1RleHR1cmVVbml0KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0c2V0VGV4dHVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNldFRleHR1cmUoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRzZXRUZXh0dXJlMkQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlMkQoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRzZXRUZXh0dXJlQ3ViZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNldFRleHR1cmVDdWJlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0Z2V0QWN0aXZlTWlwTWFwTGV2ZWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRBY3RpdmVNaXBNYXBMZXZlbCgpIGlzIG5vdyAuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFdlYkdMUmVuZGVyZXIucHJvdG90eXBlLCB7XG5cblx0c2hhZG93TWFwRW5hYmxlZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zaGFkb3dNYXAuZW5hYmxlZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwRW5hYmxlZCBpcyBub3cgLnNoYWRvd01hcC5lbmFibGVkLicgKTtcblx0XHRcdHRoaXMuc2hhZG93TWFwLmVuYWJsZWQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93TWFwVHlwZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zaGFkb3dNYXAudHlwZTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwVHlwZSBpcyBub3cgLnNoYWRvd01hcC50eXBlLicgKTtcblx0XHRcdHRoaXMuc2hhZG93TWFwLnR5cGUgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93TWFwQ3VsbEZhY2U6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcEN1bGxGYWNlIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdGNvbnRleHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmNvbnRleHQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5nZXRDb250ZXh0KCkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRDb250ZXh0KCk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xTaGFkb3dNYXAucHJvdG90eXBlLCB7XG5cblx0Y3VsbEZhY2U6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5jdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCAvKiBjdWxsRmFjZSAqLyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5jdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0cmVuZGVyUmV2ZXJzZVNpZGVkOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyUmV2ZXJzZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyUmV2ZXJzZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRyZW5kZXJTaW5nbGVTaWRlZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclNpbmdsZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyU2luZ2xlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZSwge1xuXG5cdGFjdGl2ZUN1YmVGYWNlOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU6IC5hY3RpdmVDdWJlRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBJdCBpcyBub3cgdGhlIHNlY29uZCBwYXJhbWV0ZXIgb2YgV2ViR0xSZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoKS4nICk7XG5cblx0XHR9XG5cdH0sXG5cdGFjdGl2ZU1pcE1hcExldmVsOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU6IC5hY3RpdmVNaXBNYXBMZXZlbCBoYXMgYmVlbiByZW1vdmVkLiBJdCBpcyBub3cgdGhlIHRoaXJkIHBhcmFtZXRlciBvZiBXZWJHTFJlbmRlcmVyLnNldFJlbmRlclRhcmdldCgpLicgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUsIHtcblxuXHR3cmFwUzoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLndyYXBTO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFMgaXMgbm93IC50ZXh0dXJlLndyYXBTLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwUyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHR3cmFwVDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLndyYXBUO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFQgaXMgbm93IC50ZXh0dXJlLndyYXBULicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwVCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRtYWdGaWx0ZXI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLm1hZ0ZpbHRlcjtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1hZ0ZpbHRlciBpcyBub3cgLnRleHR1cmUubWFnRmlsdGVyLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0bWluRmlsdGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5taW5GaWx0ZXI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5taW5GaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1pbkZpbHRlci4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdGFuaXNvdHJvcHk6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5hbmlzb3Ryb3B5IGlzIG5vdyAudGV4dHVyZS5hbmlzb3Ryb3B5LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUuYW5pc290cm9weTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLmFuaXNvdHJvcHkgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0b2Zmc2V0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5vZmZzZXQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5vZmZzZXQgaXMgbm93IC50ZXh0dXJlLm9mZnNldC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUub2Zmc2V0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHJlcGVhdDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUucmVwZWF0O1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAucmVwZWF0IGlzIG5vdyAudGV4dHVyZS5yZXBlYXQuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLnJlcGVhdCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRmb3JtYXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5mb3JtYXQgaXMgbm93IC50ZXh0dXJlLmZvcm1hdC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmZvcm1hdDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmZvcm1hdCBpcyBub3cgLnRleHR1cmUuZm9ybWF0LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5mb3JtYXQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0dHlwZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS50eXBlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAudHlwZSBpcyBub3cgLnRleHR1cmUudHlwZS4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUudHlwZSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRnZW5lcmF0ZU1pcG1hcHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmdlbmVyYXRlTWlwbWFwcyBpcyBub3cgLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJWUk1hbmFnZXIucHJvdG90eXBlLCB7XG5cblx0c3RhbmRpbmc6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlZSTWFuYWdlcjogLnN0YW5kaW5nIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHR1c2VySGVpZ2h0OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJWUk1hbmFnZXI6IC51c2VySGVpZ2h0IGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuQXVkaW8ucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoIGZpbGUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IC5sb2FkIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5BdWRpb0xvYWRlciBpbnN0ZWFkLicgKTtcblx0dmFyIHNjb3BlID0gdGhpcztcblx0dmFyIGF1ZGlvTG9hZGVyID0gbmV3IEF1ZGlvTG9hZGVyKCk7XG5cdGF1ZGlvTG9hZGVyLmxvYWQoIGZpbGUsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0c2NvcGUuc2V0QnVmZmVyKCBidWZmZXIgKTtcblxuXHR9ICk7XG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5BdWRpb0FuYWx5c2VyLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvQW5hbHlzZXI6IC5nZXREYXRhKCkgaXMgbm93IC5nZXRGcmVxdWVuY3lEYXRhKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7XG5cbn07XG5cbi8vXG5cbkN1YmVDYW1lcmEucHJvdG90eXBlLnVwZGF0ZUN1YmVNYXAgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBzY2VuZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5DdWJlQ2FtZXJhOiAudXBkYXRlQ3ViZU1hcCgpIGlzIG5vdyAudXBkYXRlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy51cGRhdGUoIHJlbmRlcmVyLCBzY2VuZSApO1xuXG59O1xuXG4vL1xuXG52YXIgR2VvbWV0cnlVdGlscyA9IHtcblxuXHRtZXJnZTogZnVuY3Rpb24gKCBnZW9tZXRyeTEsIGdlb21ldHJ5MiwgbWF0ZXJpYWxJbmRleE9mZnNldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdlb21ldHJ5VXRpbHM6IC5tZXJnZSgpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkubWVyZ2UoIGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkgaW5zdGVhZC4nICk7XG5cdFx0dmFyIG1hdHJpeDtcblxuXHRcdGlmICggZ2VvbWV0cnkyLmlzTWVzaCApIHtcblxuXHRcdFx0Z2VvbWV0cnkyLm1hdHJpeEF1dG9VcGRhdGUgJiYgZ2VvbWV0cnkyLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHRtYXRyaXggPSBnZW9tZXRyeTIubWF0cml4O1xuXHRcdFx0Z2VvbWV0cnkyID0gZ2VvbWV0cnkyLmdlb21ldHJ5O1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkxLm1lcmdlKCBnZW9tZXRyeTIsIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApO1xuXG5cdH0sXG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR2VvbWV0cnlVdGlsczogLmNlbnRlcigpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkuY2VudGVyKCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIGdlb21ldHJ5LmNlbnRlcigpO1xuXG5cdH1cblxufTtcblxuSW1hZ2VVdGlscy5jcm9zc09yaWdpbiA9IHVuZGVmaW5lZDtcblxuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSA9IGZ1bmN0aW9uICggdXJsLCBtYXBwaW5nLCBvbkxvYWQsIG9uRXJyb3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuVGV4dHVyZUxvYWRlcigpIGluc3RlYWQuJyApO1xuXG5cdHZhciBsb2FkZXIgPSBuZXcgVGV4dHVyZUxvYWRlcigpO1xuXHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblxuXHR2YXIgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmwsIG9uTG9hZCwgdW5kZWZpbmVkLCBvbkVycm9yICk7XG5cblx0aWYgKCBtYXBwaW5nICkgdGV4dHVyZS5tYXBwaW5nID0gbWFwcGluZztcblxuXHRyZXR1cm4gdGV4dHVyZTtcblxufTtcblxuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoIHVybHMsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLicgKTtcblxuXHR2YXIgbG9hZGVyID0gbmV3IEN1YmVUZXh0dXJlTG9hZGVyKCk7XG5cdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdHZhciB0ZXh0dXJlID0gbG9hZGVyLmxvYWQoIHVybHMsIG9uTG9hZCwgdW5kZWZpbmVkLCBvbkVycm9yICk7XG5cblx0aWYgKCBtYXBwaW5nICkgdGV4dHVyZS5tYXBwaW5nID0gbWFwcGluZztcblxuXHRyZXR1cm4gdGV4dHVyZTtcblxufTtcblxuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC4nICk7XG5cbn07XG5cbkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC4nICk7XG5cbn07XG5cbi8vXG5cbmZ1bmN0aW9uIENhbnZhc1JlbmRlcmVyKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5DYW52YXNSZW5kZXJlciBoYXMgYmVlbiByZW1vdmVkJyApO1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIEpTT05Mb2FkZXIoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkpTT05Mb2FkZXIgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn1cblxuLy9cblxudmFyIFNjZW5lVXRpbHMgPSB7XG5cblx0Y3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdDogZnVuY3Rpb24gKCAvKiBnZW9tZXRyeSwgbWF0ZXJpYWxzICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3V0aWxzL1NjZW5lVXRpbHMuanMnICk7XG5cblx0fSxcblxuXHRkZXRhY2g6IGZ1bmN0aW9uICggLyogY2hpbGQsIHBhcmVudCwgc2NlbmUgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2NlbmVVdGlscyBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvdXRpbHMvU2NlbmVVdGlscy5qcycgKTtcblxuXHR9LFxuXG5cdGF0dGFjaDogZnVuY3Rpb24gKCAvKiBjaGlsZCwgc2NlbmUsIHBhcmVudCAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TY2VuZVV0aWxzIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH1cblxufTtcblxuLy9cblxuZnVuY3Rpb24gTGVuc0ZsYXJlKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5MZW5zRmxhcmUgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL29iamVjdHMvTGVuc2ZsYXJlLmpzJyApO1xuXG59XG5cbmV4cG9ydCB7IEFDRVNGaWxtaWNUb25lTWFwcGluZywgQWRkRXF1YXRpb24sIEFkZE9wZXJhdGlvbiwgQWRkaXRpdmVCbGVuZGluZywgQWxwaGFGb3JtYXQsIEFsd2F5c0RlcHRoLCBBbHdheXNTdGVuY2lsRnVuYywgQW1iaWVudExpZ2h0LCBBbWJpZW50TGlnaHRQcm9iZSwgQW5pbWF0aW9uQ2xpcCwgQW5pbWF0aW9uTG9hZGVyLCBBbmltYXRpb25NaXhlciwgQW5pbWF0aW9uT2JqZWN0R3JvdXAsIEFuaW1hdGlvblV0aWxzLCBBcmNDdXJ2ZSwgQXJyYXlDYW1lcmEsIEFycm93SGVscGVyLCBBdWRpbywgQXVkaW9BbmFseXNlciwgQXVkaW9Db250ZXh0LCBBdWRpb0xpc3RlbmVyLCBBdWRpb0xvYWRlciwgQXhlc0hlbHBlciwgQXhpc0hlbHBlciwgQmFja1NpZGUsIEJhc2ljRGVwdGhQYWNraW5nLCBCYXNpY1NoYWRvd01hcCwgQmluYXJ5VGV4dHVyZUxvYWRlciwgQm9uZSwgQm9vbGVhbktleWZyYW1lVHJhY2ssIEJvdW5kaW5nQm94SGVscGVyLCBCb3gyLCBCb3gzLCBCb3gzSGVscGVyLCBCb3hCdWZmZXJHZW9tZXRyeSwgQm94R2VvbWV0cnksIEJveEhlbHBlciwgQnVmZmVyQXR0cmlidXRlLCBCdWZmZXJHZW9tZXRyeSwgQnVmZmVyR2VvbWV0cnlMb2FkZXIsIEJ5dGVUeXBlLCBDYWNoZSwgQ2FtZXJhLCBDYW1lcmFIZWxwZXIsIENhbnZhc1JlbmRlcmVyLCBDYW52YXNUZXh0dXJlLCBDYXRtdWxsUm9tQ3VydmUzLCBDaW5lb25Ub25lTWFwcGluZywgQ2lyY2xlQnVmZmVyR2VvbWV0cnksIENpcmNsZUdlb21ldHJ5LCBDbGFtcFRvRWRnZVdyYXBwaW5nLCBDbG9jaywgQ2xvc2VkU3BsaW5lQ3VydmUzLCBDb2xvciwgQ29sb3JLZXlmcmFtZVRyYWNrLCBDb21wcmVzc2VkVGV4dHVyZSwgQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIsIENvbmVCdWZmZXJHZW9tZXRyeSwgQ29uZUdlb21ldHJ5LCBDdWJlQ2FtZXJhLCBCb3hHZW9tZXRyeSBhcyBDdWJlR2VvbWV0cnksIEN1YmVSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLCBDdWJlVGV4dHVyZSwgQ3ViZVRleHR1cmVMb2FkZXIsIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZywgQ3ViaWNCZXppZXJDdXJ2ZSwgQ3ViaWNCZXppZXJDdXJ2ZTMsIEN1YmljSW50ZXJwb2xhbnQsIEN1bGxGYWNlQmFjaywgQ3VsbEZhY2VGcm9udCwgQ3VsbEZhY2VGcm9udEJhY2ssIEN1bGxGYWNlTm9uZSwgQ3VydmUsIEN1cnZlUGF0aCwgQ3VzdG9tQmxlbmRpbmcsIEN5bGluZGVyQnVmZmVyR2VvbWV0cnksIEN5bGluZGVyR2VvbWV0cnksIEN5bGluZHJpY2FsLCBEYXRhVGV4dHVyZSwgRGF0YVRleHR1cmUyREFycmF5LCBEYXRhVGV4dHVyZTNELCBEYXRhVGV4dHVyZUxvYWRlciwgRGVjcmVtZW50U3RlbmNpbE9wLCBEZWNyZW1lbnRXcmFwU3RlbmNpbE9wLCBEZWZhdWx0TG9hZGluZ01hbmFnZXIsIERlcHRoRm9ybWF0LCBEZXB0aFN0ZW5jaWxGb3JtYXQsIERlcHRoVGV4dHVyZSwgRGlyZWN0aW9uYWxMaWdodCwgRGlyZWN0aW9uYWxMaWdodEhlbHBlciwgRGlyZWN0aW9uYWxMaWdodFNoYWRvdywgRGlzY3JldGVJbnRlcnBvbGFudCwgRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnksIERvZGVjYWhlZHJvbkdlb21ldHJ5LCBEb3VibGVTaWRlLCBEc3RBbHBoYUZhY3RvciwgRHN0Q29sb3JGYWN0b3IsIER5bmFtaWNCdWZmZXJBdHRyaWJ1dGUsIEVkZ2VzR2VvbWV0cnksIEVkZ2VzSGVscGVyLCBFbGxpcHNlQ3VydmUsIEVxdWFsRGVwdGgsIEVxdWFsU3RlbmNpbEZ1bmMsIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZywgRXVsZXIsIEV2ZW50RGlzcGF0Y2hlciwgRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LCBFeHRydWRlR2VvbWV0cnksIEZhY2UzLCBGYWNlNCwgRmFjZUNvbG9ycywgRmFjZU5vcm1hbHNIZWxwZXIsIEZpbGVMb2FkZXIsIEZsYXRTaGFkaW5nLCBGbG9hdDMyQXR0cmlidXRlLCBGbG9hdDMyQnVmZmVyQXR0cmlidXRlLCBGbG9hdDY0QXR0cmlidXRlLCBGbG9hdDY0QnVmZmVyQXR0cmlidXRlLCBGbG9hdFR5cGUsIEZvZywgRm9nRXhwMiwgRm9udCwgRm9udExvYWRlciwgRnJvbnRGYWNlRGlyZWN0aW9uQ0NXLCBGcm9udEZhY2VEaXJlY3Rpb25DVywgRnJvbnRTaWRlLCBGcnVzdHVtLCBHYW1tYUVuY29kaW5nLCBHZW9tZXRyeSwgR2VvbWV0cnlVdGlscywgR3JlYXRlckRlcHRoLCBHcmVhdGVyRXF1YWxEZXB0aCwgR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmMsIEdyZWF0ZXJTdGVuY2lsRnVuYywgR3JpZEhlbHBlciwgR3JvdXAsIEhhbGZGbG9hdFR5cGUsIEhlbWlzcGhlcmVMaWdodCwgSGVtaXNwaGVyZUxpZ2h0SGVscGVyLCBIZW1pc3BoZXJlTGlnaHRQcm9iZSwgSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSwgSWNvc2FoZWRyb25HZW9tZXRyeSwgSW1hZ2VCaXRtYXBMb2FkZXIsIEltYWdlTG9hZGVyLCBJbWFnZVV0aWxzLCBJbW1lZGlhdGVSZW5kZXJPYmplY3QsIEluY3JlbWVudFN0ZW5jaWxPcCwgSW5jcmVtZW50V3JhcFN0ZW5jaWxPcCwgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLCBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSwgSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIsIEludDE2QXR0cmlidXRlLCBJbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgSW50MzJBdHRyaWJ1dGUsIEludDMyQnVmZmVyQXR0cmlidXRlLCBJbnQ4QXR0cmlidXRlLCBJbnQ4QnVmZmVyQXR0cmlidXRlLCBJbnRUeXBlLCBJbnRlcmxlYXZlZEJ1ZmZlciwgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUsIEludGVycG9sYW50LCBJbnRlcnBvbGF0ZURpc2NyZXRlLCBJbnRlcnBvbGF0ZUxpbmVhciwgSW50ZXJwb2xhdGVTbW9vdGgsIEludmVydFN0ZW5jaWxPcCwgSlNPTkxvYWRlciwgS2VlcFN0ZW5jaWxPcCwgS2V5ZnJhbWVUcmFjaywgTE9ELCBMYXRoZUJ1ZmZlckdlb21ldHJ5LCBMYXRoZUdlb21ldHJ5LCBMYXllcnMsIExlbnNGbGFyZSwgTGVzc0RlcHRoLCBMZXNzRXF1YWxEZXB0aCwgTGVzc0VxdWFsU3RlbmNpbEZ1bmMsIExlc3NTdGVuY2lsRnVuYywgTGlnaHQsIExpZ2h0UHJvYmUsIExpZ2h0UHJvYmVIZWxwZXIsIExpZ2h0U2hhZG93LCBMaW5lLCBMaW5lMywgTGluZUJhc2ljTWF0ZXJpYWwsIExpbmVDdXJ2ZSwgTGluZUN1cnZlMywgTGluZURhc2hlZE1hdGVyaWFsLCBMaW5lTG9vcCwgTGluZVBpZWNlcywgTGluZVNlZ21lbnRzLCBMaW5lU3RyaXAsIExpbmVhckVuY29kaW5nLCBMaW5lYXJGaWx0ZXIsIExpbmVhckludGVycG9sYW50LCBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIsIExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciwgTGluZWFyVG9uZU1hcHBpbmcsIExvYWRlciwgTG9hZGVyVXRpbHMsIExvYWRpbmdNYW5hZ2VyLCBMb2dMdXZFbmNvZGluZywgTG9vcE9uY2UsIExvb3BQaW5nUG9uZywgTG9vcFJlcGVhdCwgTHVtaW5hbmNlQWxwaGFGb3JtYXQsIEx1bWluYW5jZUZvcm1hdCwgTU9VU0UsIE1hdGVyaWFsLCBNYXRlcmlhbExvYWRlciwgX01hdGggYXMgTWF0aCwgTWF0cml4MywgTWF0cml4NCwgTWF4RXF1YXRpb24sIE1lc2gsIE1lc2hCYXNpY01hdGVyaWFsLCBNZXNoRGVwdGhNYXRlcmlhbCwgTWVzaERpc3RhbmNlTWF0ZXJpYWwsIE1lc2hGYWNlTWF0ZXJpYWwsIE1lc2hMYW1iZXJ0TWF0ZXJpYWwsIE1lc2hNYXRjYXBNYXRlcmlhbCwgTWVzaE5vcm1hbE1hdGVyaWFsLCBNZXNoUGhvbmdNYXRlcmlhbCwgTWVzaFBoeXNpY2FsTWF0ZXJpYWwsIE1lc2hTdGFuZGFyZE1hdGVyaWFsLCBNZXNoVG9vbk1hdGVyaWFsLCBNaW5FcXVhdGlvbiwgTWlycm9yZWRSZXBlYXRXcmFwcGluZywgTWl4T3BlcmF0aW9uLCBNdWx0aU1hdGVyaWFsLCBNdWx0aXBseUJsZW5kaW5nLCBNdWx0aXBseU9wZXJhdGlvbiwgTmVhcmVzdEZpbHRlciwgTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciwgTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLCBOZXZlckRlcHRoLCBOZXZlclN0ZW5jaWxGdW5jLCBOb0JsZW5kaW5nLCBOb0NvbG9ycywgTm9Ub25lTWFwcGluZywgTm9ybWFsQmxlbmRpbmcsIE5vdEVxdWFsRGVwdGgsIE5vdEVxdWFsU3RlbmNpbEZ1bmMsIE51bWJlcktleWZyYW1lVHJhY2ssIE9iamVjdDNELCBPYmplY3RMb2FkZXIsIE9iamVjdFNwYWNlTm9ybWFsTWFwLCBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnksIE9jdGFoZWRyb25HZW9tZXRyeSwgT25lRmFjdG9yLCBPbmVNaW51c0RzdEFscGhhRmFjdG9yLCBPbmVNaW51c0RzdENvbG9yRmFjdG9yLCBPbmVNaW51c1NyY0FscGhhRmFjdG9yLCBPbmVNaW51c1NyY0NvbG9yRmFjdG9yLCBPcnRob2dyYXBoaWNDYW1lcmEsIFBDRlNoYWRvd01hcCwgUENGU29mdFNoYWRvd01hcCwgUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LCBQYXJhbWV0cmljR2VvbWV0cnksIFBhcnRpY2xlLCBQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwsIFBhcnRpY2xlU3lzdGVtLCBQYXJ0aWNsZVN5c3RlbU1hdGVyaWFsLCBQYXRoLCBQZXJzcGVjdGl2ZUNhbWVyYSwgUGxhbmUsIFBsYW5lQnVmZmVyR2VvbWV0cnksIFBsYW5lR2VvbWV0cnksIFBsYW5lSGVscGVyLCBQb2ludENsb3VkLCBQb2ludENsb3VkTWF0ZXJpYWwsIFBvaW50TGlnaHQsIFBvaW50TGlnaHRIZWxwZXIsIFBvaW50cywgUG9pbnRzTWF0ZXJpYWwsIFBvbGFyR3JpZEhlbHBlciwgUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBQb2x5aGVkcm9uR2VvbWV0cnksIFBvc2l0aW9uYWxBdWRpbywgUG9zaXRpb25hbEF1ZGlvSGVscGVyLCBQcm9wZXJ0eUJpbmRpbmcsIFByb3BlcnR5TWl4ZXIsIFF1YWRyYXRpY0JlemllckN1cnZlLCBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMsIFF1YXRlcm5pb24sIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLCBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQsIFJFVklTSU9OLCBSR0JBRGVwdGhQYWNraW5nLCBSR0JBRm9ybWF0LCBSR0JBX0FTVENfMTB4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTB4NV9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDhfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0LCBSR0JBX0FTVENfNHg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDVfRm9ybWF0LCBSR0JBX0FTVENfNng1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDVfRm9ybWF0LCBSR0JBX0FTVENfOHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4OF9Gb3JtYXQsIFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDVfRm9ybWF0LCBSR0JERW5jb2RpbmcsIFJHQkVFbmNvZGluZywgUkdCRUZvcm1hdCwgUkdCRm9ybWF0LCBSR0JNMTZFbmNvZGluZywgUkdCTTdFbmNvZGluZywgUkdCX0VUQzFfRm9ybWF0LCBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQl9TM1RDX0RYVDFfRm9ybWF0LCBSYXdTaGFkZXJNYXRlcmlhbCwgUmF5LCBSYXljYXN0ZXIsIFJlY3RBcmVhTGlnaHQsIFJlY3RBcmVhTGlnaHRIZWxwZXIsIFJlZEZvcm1hdCwgUmVpbmhhcmRUb25lTWFwcGluZywgUmVwZWF0V3JhcHBpbmcsIFJlcGxhY2VTdGVuY2lsT3AsIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uLCBSaW5nQnVmZmVyR2VvbWV0cnksIFJpbmdHZW9tZXRyeSwgU2NlbmUsIFNjZW5lVXRpbHMsIFNoYWRlckNodW5rLCBTaGFkZXJMaWIsIFNoYWRlck1hdGVyaWFsLCBTaGFkb3dNYXRlcmlhbCwgU2hhcGUsIFNoYXBlQnVmZmVyR2VvbWV0cnksIFNoYXBlR2VvbWV0cnksIFNoYXBlUGF0aCwgU2hhcGVVdGlscywgU2hvcnRUeXBlLCBTa2VsZXRvbiwgU2tlbGV0b25IZWxwZXIsIFNraW5uZWRNZXNoLCBTbW9vdGhTaGFkaW5nLCBTcGhlcmUsIFNwaGVyZUJ1ZmZlckdlb21ldHJ5LCBTcGhlcmVHZW9tZXRyeSwgU3BoZXJpY2FsLCBTcGhlcmljYWxIYXJtb25pY3MzLCBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZywgU3BsaW5lLCBTcGxpbmVDdXJ2ZSwgU3BsaW5lQ3VydmUzLCBTcG90TGlnaHQsIFNwb3RMaWdodEhlbHBlciwgU3BvdExpZ2h0U2hhZG93LCBTcHJpdGUsIFNwcml0ZU1hdGVyaWFsLCBTcmNBbHBoYUZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgU3JjQ29sb3JGYWN0b3IsIFN0ZXJlb0NhbWVyYSwgU3RyaW5nS2V5ZnJhbWVUcmFjaywgU3VidHJhY3RFcXVhdGlvbiwgU3VidHJhY3RpdmVCbGVuZGluZywgVE9VQ0gsIFRhbmdlbnRTcGFjZU5vcm1hbE1hcCwgVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSwgVGV0cmFoZWRyb25HZW9tZXRyeSwgVGV4dEJ1ZmZlckdlb21ldHJ5LCBUZXh0R2VvbWV0cnksIFRleHR1cmUsIFRleHR1cmVMb2FkZXIsIFRvcnVzQnVmZmVyR2VvbWV0cnksIFRvcnVzR2VvbWV0cnksIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LCBUb3J1c0tub3RHZW9tZXRyeSwgVHJpYW5nbGUsIFRyaWFuZ2xlRmFuRHJhd01vZGUsIFRyaWFuZ2xlU3RyaXBEcmF3TW9kZSwgVHJpYW5nbGVzRHJhd01vZGUsIFR1YmVCdWZmZXJHZW9tZXRyeSwgVHViZUdlb21ldHJ5LCBVVk1hcHBpbmcsIFVpbnQxNkF0dHJpYnV0ZSwgVWludDE2QnVmZmVyQXR0cmlidXRlLCBVaW50MzJBdHRyaWJ1dGUsIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSwgVWludDhBdHRyaWJ1dGUsIFVpbnQ4QnVmZmVyQXR0cmlidXRlLCBVaW50OENsYW1wZWRBdHRyaWJ1dGUsIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSwgVW5jaGFydGVkMlRvbmVNYXBwaW5nLCBVbmlmb3JtLCBVbmlmb3Jtc0xpYiwgVW5pZm9ybXNVdGlscywgVW5zaWduZWRCeXRlVHlwZSwgVW5zaWduZWRJbnQyNDhUeXBlLCBVbnNpZ25lZEludFR5cGUsIFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSwgVW5zaWduZWRTaG9ydDU1NTFUeXBlLCBVbnNpZ25lZFNob3J0NTY1VHlwZSwgVW5zaWduZWRTaG9ydFR5cGUsIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQsIFZlY3RvcktleWZyYW1lVHJhY2ssIFZlcnRleCwgVmVydGV4Q29sb3JzLCBWZXJ0ZXhOb3JtYWxzSGVscGVyLCBWaWRlb1RleHR1cmUsIFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQsIFdlYkdMUmVuZGVyVGFyZ2V0LCBXZWJHTFJlbmRlclRhcmdldEN1YmUsIFdlYkdMUmVuZGVyZXIsIFdlYkdMVXRpbHMsIFdpcmVmcmFtZUdlb21ldHJ5LCBXaXJlZnJhbWVIZWxwZXIsIFdyYXBBcm91bmRFbmRpbmcsIFhIUkxvYWRlciwgWmVyb0N1cnZhdHVyZUVuZGluZywgWmVyb0ZhY3RvciwgWmVyb1Nsb3BlRW5kaW5nLCBaZXJvU3RlbmNpbE9wLCBzUkdCRW5jb2RpbmcgfTtcbiIsIi8qKlxuICogQGF1dGhvciBxaWFvIC8gaHR0cHM6Ly9naXRodWIuY29tL3FpYW9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb21cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgZXJpY2g2NjYgLyBodHRwOi8vZXJpY2hhaW5lcy5jb21cbiAqIEBhdXRob3IgU2NpZUNvZGUgLyBodHRwOi8vZ2l0aHViLmNvbS9zY2llY29kZVxuICovXG5cbmltcG9ydCB7XG5cdEV2ZW50RGlzcGF0Y2hlcixcblx0TU9VU0UsXG5cdFF1YXRlcm5pb24sXG5cdFNwaGVyaWNhbCxcblx0VE9VQ0gsXG5cdFZlY3RvcjIsXG5cdFZlY3RvcjNcbn0gZnJvbSBcIi4vdGhyZWUubW9kdWxlLmpzXCI7XG5cbi8vIFRoaXMgc2V0IG9mIGNvbnRyb2xzIHBlcmZvcm1zIG9yYml0aW5nLCBkb2xseWluZyAoem9vbWluZyksIGFuZCBwYW5uaW5nLlxuLy8gVW5saWtlIFRyYWNrYmFsbENvbnRyb2xzLCBpdCBtYWludGFpbnMgdGhlIFwidXBcIiBkaXJlY3Rpb24gb2JqZWN0LnVwICgrWSBieSBkZWZhdWx0KS5cbi8vXG4vLyAgICBPcmJpdCAtIGxlZnQgbW91c2UgLyB0b3VjaDogb25lLWZpbmdlciBtb3ZlXG4vLyAgICBab29tIC0gbWlkZGxlIG1vdXNlLCBvciBtb3VzZXdoZWVsIC8gdG91Y2g6IHR3by1maW5nZXIgc3ByZWFkIG9yIHNxdWlzaFxuLy8gICAgUGFuIC0gcmlnaHQgbW91c2UsIG9yIGxlZnQgbW91c2UgKyBjdHJsL21ldGEvc2hpZnRLZXksIG9yIGFycm93IGtleXMgLyB0b3VjaDogdHdvLWZpbmdlciBtb3ZlXG5cbnZhciBPcmJpdENvbnRyb2xzID0gZnVuY3Rpb24gKCBvYmplY3QsIGRvbUVsZW1lbnQgKSB7XG5cblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cblx0dGhpcy5kb21FbGVtZW50ID0gKCBkb21FbGVtZW50ICE9PSB1bmRlZmluZWQgKSA/IGRvbUVsZW1lbnQgOiBkb2N1bWVudDtcblxuXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGlzIGNvbnRyb2xcblx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHQvLyBcInRhcmdldFwiIHNldHMgdGhlIGxvY2F0aW9uIG9mIGZvY3VzLCB3aGVyZSB0aGUgb2JqZWN0IG9yYml0cyBhcm91bmRcblx0dGhpcy50YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdC8vIEhvdyBmYXIgeW91IGNhbiBkb2xseSBpbiBhbmQgb3V0ICggUGVyc3BlY3RpdmVDYW1lcmEgb25seSApXG5cdHRoaXMubWluRGlzdGFuY2UgPSAwO1xuXHR0aGlzLm1heERpc3RhbmNlID0gSW5maW5pdHk7XG5cblx0Ly8gSG93IGZhciB5b3UgY2FuIHpvb20gaW4gYW5kIG91dCAoIE9ydGhvZ3JhcGhpY0NhbWVyYSBvbmx5IClcblx0dGhpcy5taW5ab29tID0gMDtcblx0dGhpcy5tYXhab29tID0gSW5maW5pdHk7XG5cblx0Ly8gSG93IGZhciB5b3UgY2FuIG9yYml0IHZlcnRpY2FsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXG5cdC8vIFJhbmdlIGlzIDAgdG8gTWF0aC5QSSByYWRpYW5zLlxuXHR0aGlzLm1pblBvbGFyQW5nbGUgPSAwOyAvLyByYWRpYW5zXG5cdHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7IC8vIHJhZGlhbnNcblxuXHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxuXHQvLyBJZiBzZXQsIG11c3QgYmUgYSBzdWItaW50ZXJ2YWwgb2YgdGhlIGludGVydmFsIFsgLSBNYXRoLlBJLCBNYXRoLlBJIF0uXG5cdHRoaXMubWluQXppbXV0aEFuZ2xlID0gLSBJbmZpbml0eTsgLy8gcmFkaWFuc1xuXHR0aGlzLm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5OyAvLyByYWRpYW5zXG5cblx0Ly8gU2V0IHRvIHRydWUgdG8gZW5hYmxlIGRhbXBpbmcgKGluZXJ0aWEpXG5cdC8vIElmIGRhbXBpbmcgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXG5cdHRoaXMuZW5hYmxlRGFtcGluZyA9IGZhbHNlO1xuXHR0aGlzLmRhbXBpbmdGYWN0b3IgPSAwLjA1O1xuXG5cdC8vIFRoaXMgb3B0aW9uIGFjdHVhbGx5IGVuYWJsZXMgZG9sbHlpbmcgaW4gYW5kIG91dDsgbGVmdCBhcyBcInpvb21cIiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmdcblx0dGhpcy5lbmFibGVab29tID0gdHJ1ZTtcblx0dGhpcy56b29tU3BlZWQgPSAxLjA7XG5cblx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcm90YXRpbmdcblx0dGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuXHR0aGlzLnJvdGF0ZVNwZWVkID0gMS4wO1xuXG5cdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHBhbm5pbmdcblx0dGhpcy5lbmFibGVQYW4gPSB0cnVlO1xuXHR0aGlzLnBhblNwZWVkID0gMS4wO1xuXHR0aGlzLnNjcmVlblNwYWNlUGFubmluZyA9IGZhbHNlOyAvLyBpZiB0cnVlLCBwYW4gaW4gc2NyZWVuLXNwYWNlXG5cdHRoaXMua2V5UGFuU3BlZWQgPSA3LjA7XHQvLyBwaXhlbHMgbW92ZWQgcGVyIGFycm93IGtleSBwdXNoXG5cblx0Ly8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcblx0Ly8gSWYgYXV0by1yb3RhdGUgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXG5cdHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcblxuXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB1c2Ugb2YgdGhlIGtleXNcblx0dGhpcy5lbmFibGVLZXlzID0gdHJ1ZTtcblxuXHQvLyBUaGUgZm91ciBhcnJvdyBrZXlzXG5cdHRoaXMua2V5cyA9IHsgTEVGVDogMzcsIFVQOiAzOCwgUklHSFQ6IDM5LCBCT1RUT006IDQwIH07XG5cblx0Ly8gTW91c2UgYnV0dG9uc1xuXHR0aGlzLm1vdXNlQnV0dG9ucyA9IHsgTEVGVDogTU9VU0UuUk9UQVRFLCBNSURETEU6IE1PVVNFLkRPTExZLCBSSUdIVDogTU9VU0UuUEFOIH07XG5cblx0Ly8gVG91Y2ggZmluZ2Vyc1xuXHR0aGlzLnRvdWNoZXMgPSB7IE9ORTogVE9VQ0guUk9UQVRFLCBUV086IFRPVUNILkRPTExZX1BBTiB9O1xuXG5cdC8vIGZvciByZXNldFxuXHR0aGlzLnRhcmdldDAgPSB0aGlzLnRhcmdldC5jbG9uZSgpO1xuXHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XG5cdHRoaXMuem9vbTAgPSB0aGlzLm9iamVjdC56b29tO1xuXG5cdC8vXG5cdC8vIHB1YmxpYyBtZXRob2RzXG5cdC8vXG5cblx0dGhpcy5nZXRQb2xhckFuZ2xlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHNwaGVyaWNhbC5waGk7XG5cblx0fTtcblxuXHR0aGlzLmdldEF6aW11dGhhbEFuZ2xlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHNwaGVyaWNhbC50aGV0YTtcblxuXHR9O1xuXG5cdHRoaXMuc2F2ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0c2NvcGUudGFyZ2V0MC5jb3B5KCBzY29wZS50YXJnZXQgKTtcblx0XHRzY29wZS5wb3NpdGlvbjAuY29weSggc2NvcGUub2JqZWN0LnBvc2l0aW9uICk7XG5cdFx0c2NvcGUuem9vbTAgPSBzY29wZS5vYmplY3Quem9vbTtcblxuXHR9O1xuXG5cdHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRzY29wZS50YXJnZXQuY29weSggc2NvcGUudGFyZ2V0MCApO1xuXHRcdHNjb3BlLm9iamVjdC5wb3NpdGlvbi5jb3B5KCBzY29wZS5wb3NpdGlvbjAgKTtcblx0XHRzY29wZS5vYmplY3Quem9vbSA9IHNjb3BlLnpvb20wO1xuXG5cdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBjaGFuZ2VFdmVudCApO1xuXG5cdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0fTtcblxuXHQvLyB0aGlzIG1ldGhvZCBpcyBleHBvc2VkLCBidXQgcGVyaGFwcyBpdCB3b3VsZCBiZSBiZXR0ZXIgaWYgd2UgY2FuIG1ha2UgaXQgcHJpdmF0ZS4uLlxuXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXG5cdFx0dmFyIHF1YXQgPSBuZXcgUXVhdGVybmlvbigpLnNldEZyb21Vbml0VmVjdG9ycyggb2JqZWN0LnVwLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApICk7XG5cdFx0dmFyIHF1YXRJbnZlcnNlID0gcXVhdC5jbG9uZSgpLmludmVyc2UoKTtcblxuXHRcdHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBsYXN0UXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0XHR2YXIgcG9zaXRpb24gPSBzY29wZS5vYmplY3QucG9zaXRpb247XG5cblx0XHRcdG9mZnNldC5jb3B5KCBwb3NpdGlvbiApLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG5cblx0XHRcdC8vIHJvdGF0ZSBvZmZzZXQgdG8gXCJ5LWF4aXMtaXMtdXBcIiBzcGFjZVxuXHRcdFx0b2Zmc2V0LmFwcGx5UXVhdGVybmlvbiggcXVhdCApO1xuXG5cdFx0XHQvLyBhbmdsZSBmcm9tIHotYXhpcyBhcm91bmQgeS1heGlzXG5cdFx0XHRzcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMoIG9mZnNldCApO1xuXG5cdFx0XHRpZiAoIHNjb3BlLmF1dG9Sb3RhdGUgJiYgc3RhdGUgPT09IFNUQVRFLk5PTkUgKSB7XG5cblx0XHRcdFx0cm90YXRlTGVmdCggZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlRGFtcGluZyApIHtcblxuXHRcdFx0XHRzcGhlcmljYWwudGhldGEgKz0gc3BoZXJpY2FsRGVsdGEudGhldGEgKiBzY29wZS5kYW1waW5nRmFjdG9yO1xuXHRcdFx0XHRzcGhlcmljYWwucGhpICs9IHNwaGVyaWNhbERlbHRhLnBoaSAqIHNjb3BlLmRhbXBpbmdGYWN0b3I7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3BoZXJpY2FsLnRoZXRhICs9IHNwaGVyaWNhbERlbHRhLnRoZXRhO1xuXHRcdFx0XHRzcGhlcmljYWwucGhpICs9IHNwaGVyaWNhbERlbHRhLnBoaTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZXN0cmljdCB0aGV0YSB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cdFx0XHRzcGhlcmljYWwudGhldGEgPSBNYXRoLm1heCggc2NvcGUubWluQXppbXV0aEFuZ2xlLCBNYXRoLm1pbiggc2NvcGUubWF4QXppbXV0aEFuZ2xlLCBzcGhlcmljYWwudGhldGEgKSApO1xuXG5cdFx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xuXHRcdFx0c3BoZXJpY2FsLnBoaSA9IE1hdGgubWF4KCBzY29wZS5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbiggc2NvcGUubWF4UG9sYXJBbmdsZSwgc3BoZXJpY2FsLnBoaSApICk7XG5cblx0XHRcdHNwaGVyaWNhbC5tYWtlU2FmZSgpO1xuXG5cblx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgKj0gc2NhbGU7XG5cblx0XHRcdC8vIHJlc3RyaWN0IHJhZGl1cyB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cdFx0XHRzcGhlcmljYWwucmFkaXVzID0gTWF0aC5tYXgoIHNjb3BlLm1pbkRpc3RhbmNlLCBNYXRoLm1pbiggc2NvcGUubWF4RGlzdGFuY2UsIHNwaGVyaWNhbC5yYWRpdXMgKSApO1xuXG5cdFx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVEYW1waW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHNjb3BlLnRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHBhbk9mZnNldCwgc2NvcGUuZGFtcGluZ0ZhY3RvciApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNjb3BlLnRhcmdldC5hZGQoIHBhbk9mZnNldCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG9mZnNldC5zZXRGcm9tU3BoZXJpY2FsKCBzcGhlcmljYWwgKTtcblxuXHRcdFx0Ly8gcm90YXRlIG9mZnNldCBiYWNrIHRvIFwiY2FtZXJhLXVwLXZlY3Rvci1pcy11cFwiIHNwYWNlXG5cdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0SW52ZXJzZSApO1xuXG5cdFx0XHRwb3NpdGlvbi5jb3B5KCBzY29wZS50YXJnZXQgKS5hZGQoIG9mZnNldCApO1xuXG5cdFx0XHRzY29wZS5vYmplY3QubG9va0F0KCBzY29wZS50YXJnZXQgKTtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVEYW1waW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhICo9ICggMSAtIHNjb3BlLmRhbXBpbmdGYWN0b3IgKTtcblx0XHRcdFx0c3BoZXJpY2FsRGVsdGEucGhpICo9ICggMSAtIHNjb3BlLmRhbXBpbmdGYWN0b3IgKTtcblxuXHRcdFx0XHRwYW5PZmZzZXQubXVsdGlwbHlTY2FsYXIoIDEgLSBzY29wZS5kYW1waW5nRmFjdG9yICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3BoZXJpY2FsRGVsdGEuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdFx0cGFuT2Zmc2V0LnNldCggMCwgMCwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjYWxlID0gMTtcblxuXHRcdFx0Ly8gdXBkYXRlIGNvbmRpdGlvbiBpczpcblx0XHRcdC8vIG1pbihjYW1lcmEgZGlzcGxhY2VtZW50LCBjYW1lcmEgcm90YXRpb24gaW4gcmFkaWFucyleMiA+IEVQU1xuXHRcdFx0Ly8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEgLSB4XjIgLyA4XG5cblx0XHRcdGlmICggem9vbUNoYW5nZWQgfHxcblx0XHRcdFx0bGFzdFBvc2l0aW9uLmRpc3RhbmNlVG9TcXVhcmVkKCBzY29wZS5vYmplY3QucG9zaXRpb24gKSA+IEVQUyB8fFxuXHRcdFx0XHQ4ICogKCAxIC0gbGFzdFF1YXRlcm5pb24uZG90KCBzY29wZS5vYmplY3QucXVhdGVybmlvbiApICkgPiBFUFMgKSB7XG5cblx0XHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggY2hhbmdlRXZlbnQgKTtcblxuXHRcdFx0XHRsYXN0UG9zaXRpb24uY29weSggc2NvcGUub2JqZWN0LnBvc2l0aW9uICk7XG5cdFx0XHRcdGxhc3RRdWF0ZXJuaW9uLmNvcHkoIHNjb3BlLm9iamVjdC5xdWF0ZXJuaW9uICk7XG5cdFx0XHRcdHpvb21DaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fTtcblxuXHR9KCk7XG5cblx0dGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY29udGV4dG1lbnUnLCBvbkNvbnRleHRNZW51LCBmYWxzZSApO1xuXHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlZG93bicsIG9uTW91c2VEb3duLCBmYWxzZSApO1xuXHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgb25Nb3VzZVdoZWVsLCBmYWxzZSApO1xuXG5cdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UgKTtcblx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIGZhbHNlICk7XG5cdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUsIGZhbHNlICk7XG5cblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIGZhbHNlICk7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBvbk1vdXNlVXAsIGZhbHNlICk7XG5cblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCBvbktleURvd24sIGZhbHNlICk7XG5cblx0XHQvL3Njb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsgLy8gc2hvdWxkIHRoaXMgYmUgYWRkZWQgaGVyZT9cblxuXHR9O1xuXG5cdC8vXG5cdC8vIGludGVybmFsc1xuXHQvL1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dmFyIGNoYW5nZUV2ZW50ID0geyB0eXBlOiAnY2hhbmdlJyB9O1xuXHR2YXIgc3RhcnRFdmVudCA9IHsgdHlwZTogJ3N0YXJ0JyB9O1xuXHR2YXIgZW5kRXZlbnQgPSB7IHR5cGU6ICdlbmQnIH07XG5cblx0dmFyIFNUQVRFID0ge1xuXHRcdE5PTkU6IC0gMSxcblx0XHRST1RBVEU6IDAsXG5cdFx0RE9MTFk6IDEsXG5cdFx0UEFOOiAyLFxuXHRcdFRPVUNIX1JPVEFURTogMyxcblx0XHRUT1VDSF9QQU46IDQsXG5cdFx0VE9VQ0hfRE9MTFlfUEFOOiA1LFxuXHRcdFRPVUNIX0RPTExZX1JPVEFURTogNlxuXHR9O1xuXG5cdHZhciBzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0dmFyIEVQUyA9IDAuMDAwMDAxO1xuXG5cdC8vIGN1cnJlbnQgcG9zaXRpb24gaW4gc3BoZXJpY2FsIGNvb3JkaW5hdGVzXG5cdHZhciBzcGhlcmljYWwgPSBuZXcgU3BoZXJpY2FsKCk7XG5cdHZhciBzcGhlcmljYWxEZWx0YSA9IG5ldyBTcGhlcmljYWwoKTtcblxuXHR2YXIgc2NhbGUgPSAxO1xuXHR2YXIgcGFuT2Zmc2V0ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHpvb21DaGFuZ2VkID0gZmFsc2U7XG5cblx0dmFyIHJvdGF0ZVN0YXJ0ID0gbmV3IFZlY3RvcjIoKTtcblx0dmFyIHJvdGF0ZUVuZCA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciByb3RhdGVEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0dmFyIHBhblN0YXJ0ID0gbmV3IFZlY3RvcjIoKTtcblx0dmFyIHBhbkVuZCA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciBwYW5EZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0dmFyIGRvbGx5U3RhcnQgPSBuZXcgVmVjdG9yMigpO1xuXHR2YXIgZG9sbHlFbmQgPSBuZXcgVmVjdG9yMigpO1xuXHR2YXIgZG9sbHlEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0ZnVuY3Rpb24gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSB7XG5cblx0XHRyZXR1cm4gMiAqIE1hdGguUEkgLyA2MCAvIDYwICogc2NvcGUuYXV0b1JvdGF0ZVNwZWVkO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRab29tU2NhbGUoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDAuOTUsIHNjb3BlLnpvb21TcGVlZCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByb3RhdGVMZWZ0KCBhbmdsZSApIHtcblxuXHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByb3RhdGVVcCggYW5nbGUgKSB7XG5cblx0XHRzcGhlcmljYWxEZWx0YS5waGkgLT0gYW5nbGU7XG5cblx0fVxuXG5cdHZhciBwYW5MZWZ0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbkxlZnQoIGRpc3RhbmNlLCBvYmplY3RNYXRyaXggKSB7XG5cblx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAwICk7IC8vIGdldCBYIGNvbHVtbiBvZiBvYmplY3RNYXRyaXhcblx0XHRcdHYubXVsdGlwbHlTY2FsYXIoIC0gZGlzdGFuY2UgKTtcblxuXHRcdFx0cGFuT2Zmc2V0LmFkZCggdiApO1xuXG5cdFx0fTtcblxuXHR9KCk7XG5cblx0dmFyIHBhblVwID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHBhblVwKCBkaXN0YW5jZSwgb2JqZWN0TWF0cml4ICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLnNjcmVlblNwYWNlUGFubmluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAwICk7XG5cdFx0XHRcdHYuY3Jvc3NWZWN0b3JzKCBzY29wZS5vYmplY3QudXAsIHYgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2Lm11bHRpcGx5U2NhbGFyKCBkaXN0YW5jZSApO1xuXG5cdFx0XHRwYW5PZmZzZXQuYWRkKCB2ICk7XG5cblx0XHR9O1xuXG5cdH0oKTtcblxuXHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcblx0dmFyIHBhbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbiggZGVsdGFYLCBkZWx0YVkgKSB7XG5cblx0XHRcdHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQgPyBzY29wZS5kb21FbGVtZW50LmJvZHkgOiBzY29wZS5kb21FbGVtZW50O1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHRcdC8vIHBlcnNwZWN0aXZlXG5cdFx0XHRcdHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcblx0XHRcdFx0b2Zmc2V0LmNvcHkoIHBvc2l0aW9uICkuc3ViKCBzY29wZS50YXJnZXQgKTtcblx0XHRcdFx0dmFyIHRhcmdldERpc3RhbmNlID0gb2Zmc2V0Lmxlbmd0aCgpO1xuXG5cdFx0XHRcdC8vIGhhbGYgb2YgdGhlIGZvdiBpcyBjZW50ZXIgdG8gdG9wIG9mIHNjcmVlblxuXHRcdFx0XHR0YXJnZXREaXN0YW5jZSAqPSBNYXRoLnRhbiggKCBzY29wZS5vYmplY3QuZm92IC8gMiApICogTWF0aC5QSSAvIDE4MC4wICk7XG5cblx0XHRcdFx0Ly8gd2UgdXNlIG9ubHkgY2xpZW50SGVpZ2h0IGhlcmUgc28gYXNwZWN0IHJhdGlvIGRvZXMgbm90IGRpc3RvcnQgc3BlZWRcblx0XHRcdFx0cGFuTGVmdCggMiAqIGRlbHRhWCAqIHRhcmdldERpc3RhbmNlIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHNjb3BlLm9iamVjdC5tYXRyaXggKTtcblx0XHRcdFx0cGFuVXAoIDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHNjb3BlLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0XHQvLyBvcnRob2dyYXBoaWNcblx0XHRcdFx0cGFuTGVmdCggZGVsdGFYICogKCBzY29wZS5vYmplY3QucmlnaHQgLSBzY29wZS5vYmplY3QubGVmdCApIC8gc2NvcGUub2JqZWN0Lnpvb20gLyBlbGVtZW50LmNsaWVudFdpZHRoLCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cdFx0XHRcdHBhblVwKCBkZWx0YVkgKiAoIHNjb3BlLm9iamVjdC50b3AgLSBzY29wZS5vYmplY3QuYm90dG9tICkgLyBzY29wZS5vYmplY3Quem9vbSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gY2FtZXJhIG5laXRoZXIgb3J0aG9ncmFwaGljIG5vciBwZXJzcGVjdGl2ZVxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBwYW4gZGlzYWJsZWQuJyApO1xuXHRcdFx0XHRzY29wZS5lbmFibGVQYW4gPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9KCk7XG5cblx0ZnVuY3Rpb24gZG9sbHlJbiggZG9sbHlTY2FsZSApIHtcblxuXHRcdGlmICggc2NvcGUub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdHNjYWxlIC89IGRvbGx5U2NhbGU7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZS5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdHNjb3BlLm9iamVjdC56b29tID0gTWF0aC5tYXgoIHNjb3BlLm1pblpvb20sIE1hdGgubWluKCBzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAqIGRvbGx5U2NhbGUgKSApO1xuXHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJyApO1xuXHRcdFx0c2NvcGUuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkb2xseU91dCggZG9sbHlTY2FsZSApIHtcblxuXHRcdGlmICggc2NvcGUub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdHNjYWxlICo9IGRvbGx5U2NhbGU7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZS5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdHNjb3BlLm9iamVjdC56b29tID0gTWF0aC5tYXgoIHNjb3BlLm1pblpvb20sIE1hdGgubWluKCBzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAvIGRvbGx5U2NhbGUgKSApO1xuXHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJyApO1xuXHRcdFx0c2NvcGUuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXHQvLyBldmVudCBjYWxsYmFja3MgLSB1cGRhdGUgdGhlIG9iamVjdCBzdGF0ZVxuXHQvL1xuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VEb3duUm90YXRlJyApO1xuXG5cdFx0cm90YXRlU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZURvd25Eb2xseScgKTtcblxuXHRcdGRvbGx5U3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VEb3duUGFuJyApO1xuXG5cdFx0cGFuU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZVJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VNb3ZlUm90YXRlJyApO1xuXG5cdFx0cm90YXRlRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0cm90YXRlRGVsdGEuc3ViVmVjdG9ycyggcm90YXRlRW5kLCByb3RhdGVTdGFydCApLm11bHRpcGx5U2NhbGFyKCBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0dmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cblx0XHRyb3RhdGVMZWZ0KCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnggLyBlbGVtZW50LmNsaWVudEhlaWdodCApOyAvLyB5ZXMsIGhlaWdodFxuXG5cdFx0cm90YXRlVXAoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHRyb3RhdGVTdGFydC5jb3B5KCByb3RhdGVFbmQgKTtcblxuXHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmVEb2xseSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VNb3ZlRG9sbHknICk7XG5cblx0XHRkb2xseUVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdGRvbGx5RGVsdGEuc3ViVmVjdG9ycyggZG9sbHlFbmQsIGRvbGx5U3RhcnQgKTtcblxuXHRcdGlmICggZG9sbHlEZWx0YS55ID4gMCApIHtcblxuXHRcdFx0ZG9sbHlJbiggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGRvbGx5RGVsdGEueSA8IDAgKSB7XG5cblx0XHRcdGRvbGx5T3V0KCBnZXRab29tU2NhbGUoKSApO1xuXG5cdFx0fVxuXG5cdFx0ZG9sbHlTdGFydC5jb3B5KCBkb2xseUVuZCApO1xuXG5cdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZVBhbiggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VNb3ZlUGFuJyApO1xuXG5cdFx0cGFuRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0cGFuRGVsdGEuc3ViVmVjdG9ycyggcGFuRW5kLCBwYW5TdGFydCApLm11bHRpcGx5U2NhbGFyKCBzY29wZS5wYW5TcGVlZCApO1xuXG5cdFx0cGFuKCBwYW5EZWx0YS54LCBwYW5EZWx0YS55ICk7XG5cblx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKCAvKmV2ZW50Ki8gKSB7XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlVXAnICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlV2hlZWwoIGV2ZW50ICkge1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdoYW5kbGVNb3VzZVdoZWVsJyApO1xuXG5cdFx0aWYgKCBldmVudC5kZWx0YVkgPCAwICkge1xuXG5cdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGV2ZW50LmRlbHRhWSA+IDAgKSB7XG5cblx0XHRcdGRvbGx5SW4oIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHR9XG5cblx0XHRzY29wZS51cGRhdGUoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlS2V5RG93biggZXZlbnQgKSB7XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ2hhbmRsZUtleURvd24nICk7XG5cblx0XHR2YXIgbmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cblx0XHRcdGNhc2Ugc2NvcGUua2V5cy5VUDpcblx0XHRcdFx0cGFuKCAwLCBzY29wZS5rZXlQYW5TcGVlZCApO1xuXHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIHNjb3BlLmtleXMuQk9UVE9NOlxuXHRcdFx0XHRwYW4oIDAsIC0gc2NvcGUua2V5UGFuU3BlZWQgKTtcblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBzY29wZS5rZXlzLkxFRlQ6XG5cdFx0XHRcdHBhbiggc2NvcGUua2V5UGFuU3BlZWQsIDAgKTtcblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBzY29wZS5rZXlzLlJJR0hUOlxuXHRcdFx0XHRwYW4oIC0gc2NvcGUua2V5UGFuU3BlZWQsIDAgKTtcblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdC8vIHByZXZlbnQgdGhlIGJyb3dzZXIgZnJvbSBzY3JvbGxpbmcgb24gY3Vyc29yIGtleXNcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUnICk7XG5cblx0XHRpZiAoIGV2ZW50LnRvdWNoZXMubGVuZ3RoID09IDEgKSB7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciB4ID0gMC41ICogKCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggKyBldmVudC50b3VjaGVzWyAxIF0ucGFnZVggKTtcblx0XHRcdHZhciB5ID0gMC41ICogKCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKyBldmVudC50b3VjaGVzWyAxIF0ucGFnZVkgKTtcblxuXHRcdFx0cm90YXRlU3RhcnQuc2V0KCB4LCB5ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRQYW4oIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoU3RhcnRQYW4nICk7XG5cblx0XHRpZiAoIGV2ZW50LnRvdWNoZXMubGVuZ3RoID09IDEgKSB7XG5cblx0XHRcdHBhblN0YXJ0LnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciB4ID0gMC41ICogKCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggKyBldmVudC50b3VjaGVzWyAxIF0ucGFnZVggKTtcblx0XHRcdHZhciB5ID0gMC41ICogKCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKyBldmVudC50b3VjaGVzWyAxIF0ucGFnZVkgKTtcblxuXHRcdFx0cGFuU3RhcnQuc2V0KCB4LCB5ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hTdGFydERvbGx5JyApO1xuXG5cdFx0dmFyIGR4ID0gZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYIC0gZXZlbnQudG91Y2hlc1sgMSBdLnBhZ2VYO1xuXHRcdHZhciBkeSA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWTtcblxuXHRcdHZhciBkaXN0YW5jZSA9IE1hdGguc3FydCggZHggKiBkeCArIGR5ICogZHkgKTtcblxuXHRcdGRvbGx5U3RhcnQuc2V0KCAwLCBkaXN0YW5jZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0RG9sbHlQYW4oIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoU3RhcnREb2xseVBhbicgKTtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSApIGhhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKTtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlUGFuICkgaGFuZGxlVG91Y2hTdGFydFBhbiggZXZlbnQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaFN0YXJ0RG9sbHlSb3RhdGUnICk7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gKSBoYW5kbGVUb3VjaFN0YXJ0RG9sbHkoIGV2ZW50ICk7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSApIGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZVJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hNb3ZlUm90YXRlJyApO1xuXG5cdFx0aWYgKCBldmVudC50b3VjaGVzLmxlbmd0aCA9PSAxICkge1xuXG5cdFx0XHRyb3RhdGVFbmQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIHggPSAwLjUgKiAoIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCArIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWCApO1xuXHRcdFx0dmFyIHkgPSAwLjUgKiAoIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSArIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWSApO1xuXG5cdFx0XHRyb3RhdGVFbmQuc2V0KCB4LCB5ICk7XG5cblx0XHR9XG5cblx0XHRyb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cblx0XHR2YXIgZWxlbWVudCA9IHNjb3BlLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gc2NvcGUuZG9tRWxlbWVudC5ib2R5IDogc2NvcGUuZG9tRWxlbWVudDtcblxuXHRcdHJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7IC8vIHllcywgaGVpZ2h0XG5cblx0XHRyb3RhdGVVcCggMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS55IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuXHRcdHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmVQYW4oIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZVJvdGF0ZScgKTtcblxuXHRcdGlmICggZXZlbnQudG91Y2hlcy5sZW5ndGggPT0gMSApIHtcblxuXHRcdFx0cGFuRW5kLnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciB4ID0gMC41ICogKCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggKyBldmVudC50b3VjaGVzWyAxIF0ucGFnZVggKTtcblx0XHRcdHZhciB5ID0gMC41ICogKCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKyBldmVudC50b3VjaGVzWyAxIF0ucGFnZVkgKTtcblxuXHRcdFx0cGFuRW5kLnNldCggeCwgeSApO1xuXG5cdFx0fVxuXG5cdFx0cGFuRGVsdGEuc3ViVmVjdG9ycyggcGFuRW5kLCBwYW5TdGFydCApLm11bHRpcGx5U2NhbGFyKCBzY29wZS5wYW5TcGVlZCApO1xuXG5cdFx0cGFuKCBwYW5EZWx0YS54LCBwYW5EZWx0YS55ICk7XG5cblx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZVJvdGF0ZScgKTtcblxuXHRcdHZhciBkeCA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWDtcblx0XHR2YXIgZHkgPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVk7XG5cblx0XHR2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoIGR4ICogZHggKyBkeSAqIGR5ICk7XG5cblx0XHRkb2xseUVuZC5zZXQoIDAsIGRpc3RhbmNlICk7XG5cblx0XHRkb2xseURlbHRhLnNldCggMCwgTWF0aC5wb3coIGRvbGx5RW5kLnkgLyBkb2xseVN0YXJ0LnksIHNjb3BlLnpvb21TcGVlZCApICk7XG5cblx0XHRkb2xseUluKCBkb2xseURlbHRhLnkgKTtcblxuXHRcdGRvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlRG9sbHlQYW4oIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZURvbGx5UGFuJyApO1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVab29tICkgaGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiApIGhhbmRsZVRvdWNoTW92ZVBhbiggZXZlbnQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlRG9sbHlSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZURvbGx5UGFuJyApO1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVab29tICkgaGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSApIGhhbmRsZVRvdWNoTW92ZVJvdGF0ZSggZXZlbnQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hFbmQoIC8qZXZlbnQqLyApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaEVuZCcgKTtcblxuXHR9XG5cblx0Ly9cblx0Ly8gZXZlbnQgaGFuZGxlcnMgLSBGU006IGxpc3RlbiBmb3IgZXZlbnRzIGFuZCByZXNldCBzdGF0ZVxuXHQvL1xuXG5cdGZ1bmN0aW9uIG9uTW91c2VEb3duKCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBQcmV2ZW50IHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nLlxuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdC8vIE1hbnVhbGx5IHNldCB0aGUgZm9jdXMgc2luY2UgY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBhYm92ZVxuXHRcdC8vIHByZXZlbnRzIHRoZSBicm93c2VyIGZyb20gc2V0dGluZyBpdCBhdXRvbWF0aWNhbGx5LlxuXG5cdFx0c2NvcGUuZG9tRWxlbWVudC5mb2N1cyA/IHNjb3BlLmRvbUVsZW1lbnQuZm9jdXMoKSA6IHdpbmRvdy5mb2N1cygpO1xuXG5cdFx0c3dpdGNoICggZXZlbnQuYnV0dG9uICkge1xuXG5cdFx0XHRjYXNlIDA6XG5cblx0XHRcdFx0c3dpdGNoICggc2NvcGUubW91c2VCdXR0b25zLkxFRlQgKSB7XG5cblx0XHRcdFx0XHRjYXNlIE1PVVNFLlJPVEFURTpcblxuXHRcdFx0XHRcdFx0aWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRcdGhhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlBBTjtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRcdFx0aGFuZGxlTW91c2VEb3duUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuUk9UQVRFO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBNT1VTRS5QQU46XG5cblx0XHRcdFx0XHRcdGlmICggZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdFx0XHRoYW5kbGVNb3VzZURvd25Sb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5ST1RBVEU7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRcdGhhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlBBTjtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblxuXHRcdFx0Y2FzZSAxOlxuXG5cdFx0XHRcdHN3aXRjaCAoIHNjb3BlLm1vdXNlQnV0dG9ucy5NSURETEUgKSB7XG5cblx0XHRcdFx0XHRjYXNlIE1PVVNFLkRPTExZOlxuXG5cdFx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVNb3VzZURvd25Eb2xseSggZXZlbnQgKTtcblxuXHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5ET0xMWTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjpcblxuXHRcdFx0XHRzd2l0Y2ggKCBzY29wZS5tb3VzZUJ1dHRvbnMuUklHSFQgKSB7XG5cblx0XHRcdFx0XHRjYXNlIE1PVVNFLlJPVEFURTpcblxuXHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVNb3VzZURvd25Sb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuUk9UQVRFO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgTU9VU0UuUEFOOlxuXG5cdFx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRcdGhhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5QQU47XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHRcdGlmICggc3RhdGUgIT09IFNUQVRFLk5PTkUgKSB7XG5cblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSwgZmFsc2UgKTtcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgb25Nb3VzZVVwLCBmYWxzZSApO1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBzdGFydEV2ZW50ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uTW91c2VNb3ZlKCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0c3dpdGNoICggc3RhdGUgKSB7XG5cblx0XHRcdGNhc2UgU1RBVEUuUk9UQVRFOlxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgU1RBVEUuRE9MTFk6XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVab29tID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVEb2xseSggZXZlbnQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBTVEFURS5QQU46XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlTW92ZVBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Nb3VzZVVwKCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRoYW5kbGVNb3VzZVVwKCBldmVudCApO1xuXG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSApO1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgb25Nb3VzZVVwLCBmYWxzZSApO1xuXG5cdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggZW5kRXZlbnQgKTtcblxuXHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Nb3VzZVdoZWVsKCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgfHwgc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgfHwgKCBzdGF0ZSAhPT0gU1RBVEUuTk9ORSAmJiBzdGF0ZSAhPT0gU1RBVEUuUk9UQVRFICkgKSByZXR1cm47XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggc3RhcnRFdmVudCApO1xuXG5cdFx0aGFuZGxlTW91c2VXaGVlbCggZXZlbnQgKTtcblxuXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIGVuZEV2ZW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uS2V5RG93biggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNjb3BlLmVuYWJsZUtleXMgPT09IGZhbHNlIHx8IHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRoYW5kbGVLZXlEb3duKCBldmVudCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvblRvdWNoU3RhcnQoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRzd2l0Y2ggKCBldmVudC50b3VjaGVzLmxlbmd0aCApIHtcblxuXHRcdFx0Y2FzZSAxOlxuXG5cdFx0XHRcdHN3aXRjaCAoIHNjb3BlLnRvdWNoZXMuT05FICkge1xuXG5cdFx0XHRcdFx0Y2FzZSBUT1VDSC5ST1RBVEU6XG5cblx0XHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdFx0aGFuZGxlVG91Y2hTdGFydFJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5UT1VDSF9ST1RBVEU7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBUT1VDSC5QQU46XG5cblx0XHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdFx0aGFuZGxlVG91Y2hTdGFydFBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5UT1VDSF9QQU47XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyOlxuXG5cdFx0XHRcdHN3aXRjaCAoIHNjb3BlLnRvdWNoZXMuVFdPICkge1xuXG5cdFx0XHRcdFx0Y2FzZSBUT1VDSC5ET0xMWV9QQU46XG5cblx0XHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdFx0aGFuZGxlVG91Y2hTdGFydERvbGx5UGFuKCBldmVudCApO1xuXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX0RPTExZX1BBTjtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFRPVUNILkRPTExZX1JPVEFURTpcblxuXHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVab29tID09PSBmYWxzZSAmJiBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVUb3VjaFN0YXJ0RG9sbHlSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuVE9VQ0hfRE9MTFlfUk9UQVRFO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0c3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzdGF0ZSAhPT0gU1RBVEUuTk9ORSApIHtcblxuXHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggc3RhcnRFdmVudCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBvblRvdWNoTW92ZSggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuXHRcdHN3aXRjaCAoIHN0YXRlICkge1xuXG5cdFx0XHRjYXNlIFNUQVRFLlRPVUNIX1JPVEFURTpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFNUQVRFLlRPVUNIX1BBTjpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApO1xuXG5cdFx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFNUQVRFLlRPVUNIX0RPTExZX1BBTjpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlRG9sbHlQYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgU1RBVEUuVE9VQ0hfRE9MTFlfUk9UQVRFOlxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVUb3VjaE1vdmVEb2xseVJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVG91Y2hFbmQoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGhhbmRsZVRvdWNoRW5kKCBldmVudCApO1xuXG5cdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggZW5kRXZlbnQgKTtcblxuXHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Db250ZXh0TWVudSggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHR9XG5cblx0Ly9cblxuXHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIG9uQ29udGV4dE1lbnUsIGZhbHNlICk7XG5cblx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2Vkb3duJywgb25Nb3VzZURvd24sIGZhbHNlICk7XG5cdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgb25Nb3VzZVdoZWVsLCBmYWxzZSApO1xuXG5cdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlICk7XG5cdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UgKTtcblx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUsIGZhbHNlICk7XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgb25LZXlEb3duLCBmYWxzZSApO1xuXG5cdC8vIGZvcmNlIGFuIHVwZGF0ZSBhdCBzdGFydFxuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn07XG5cbk9yYml0Q29udHJvbHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApO1xuT3JiaXRDb250cm9scy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPcmJpdENvbnRyb2xzO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggT3JiaXRDb250cm9scy5wcm90b3R5cGUsIHtcblxuXHRjZW50ZXI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuY2VudGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnRhcmdldCcgKTtcblx0XHRcdHJldHVybiB0aGlzLnRhcmdldDtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblxuXHRub1pvb206IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9ab29tIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlWm9vbSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiAhIHRoaXMuZW5hYmxlWm9vbTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1pvb20gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVab29tIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVab29tID0gISB2YWx1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdG5vUm90YXRlOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vUm90YXRlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlUm90YXRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVSb3RhdGU7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9Sb3RhdGUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVSb3RhdGUgaW5zdGVhZC4nICk7XG5cdFx0XHR0aGlzLmVuYWJsZVJvdGF0ZSA9ICEgdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRub1Bhbjoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1BhbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVBhbiBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiAhIHRoaXMuZW5hYmxlUGFuO1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vUGFuIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlUGFuIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVQYW4gPSAhIHZhbHVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bm9LZXlzOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vS2V5cyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZUtleXMgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZUtleXM7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9LZXlzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlS2V5cyBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMuZW5hYmxlS2V5cyA9ICEgdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRzdGF0aWNNb3Zpbmc6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuc3RhdGljTW92aW5nIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlRGFtcGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiAhIHRoaXMuZW5hYmxlRGFtcGluZztcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5zdGF0aWNNb3ZpbmcgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVEYW1waW5nIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVEYW1waW5nID0gISB2YWx1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGR5bmFtaWNEYW1waW5nRmFjdG9yOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLmR5bmFtaWNEYW1waW5nRmFjdG9yIGhhcyBiZWVuIHJlbmFtZWQuIFVzZSAuZGFtcGluZ0ZhY3RvciBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmRhbXBpbmdGYWN0b3I7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuZHluYW1pY0RhbXBpbmdGYWN0b3IgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIC5kYW1waW5nRmFjdG9yIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5kYW1waW5nRmFjdG9yID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8vIFRoaXMgc2V0IG9mIGNvbnRyb2xzIHBlcmZvcm1zIG9yYml0aW5nLCBkb2xseWluZyAoem9vbWluZyksIGFuZCBwYW5uaW5nLlxuLy8gVW5saWtlIFRyYWNrYmFsbENvbnRyb2xzLCBpdCBtYWludGFpbnMgdGhlIFwidXBcIiBkaXJlY3Rpb24gb2JqZWN0LnVwICgrWSBieSBkZWZhdWx0KS5cbi8vIFRoaXMgaXMgdmVyeSBzaW1pbGFyIHRvIE9yYml0Q29udHJvbHMsIGFub3RoZXIgc2V0IG9mIHRvdWNoIGJlaGF2aW9yXG4vL1xuLy8gICAgT3JiaXQgLSByaWdodCBtb3VzZSwgb3IgbGVmdCBtb3VzZSArIGN0cmwvbWV0YS9zaGlmdEtleSAvIHRvdWNoOiB0d28tZmluZ2VyIHJvdGF0ZVxuLy8gICAgWm9vbSAtIG1pZGRsZSBtb3VzZSwgb3IgbW91c2V3aGVlbCAvIHRvdWNoOiB0d28tZmluZ2VyIHNwcmVhZCBvciBzcXVpc2hcbi8vICAgIFBhbiAtIGxlZnQgbW91c2UsIG9yIGFycm93IGtleXMgLyB0b3VjaDogb25lLWZpbmdlciBtb3ZlXG5cbnZhciBNYXBDb250cm9scyA9IGZ1bmN0aW9uICggb2JqZWN0LCBkb21FbGVtZW50ICkge1xuXG5cdE9yYml0Q29udHJvbHMuY2FsbCggdGhpcywgb2JqZWN0LCBkb21FbGVtZW50ICk7XG5cblx0dGhpcy5tb3VzZUJ1dHRvbnMuTEVGVCA9IE1PVVNFLlBBTjtcblx0dGhpcy5tb3VzZUJ1dHRvbnMuUklHSFQgPSBNT1VTRS5ST1RBVEU7XG5cblx0dGhpcy50b3VjaGVzLk9ORSA9IFRPVUNILlBBTjtcblx0dGhpcy50b3VjaGVzLlRXTyA9IFRPVUNILkRPTExZX1JPVEFURTtcblxufTtcblxuTWFwQ29udHJvbHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApO1xuTWFwQ29udHJvbHMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFwQ29udHJvbHM7XG5cbmV4cG9ydCB7IE9yYml0Q29udHJvbHMsIE1hcENvbnRyb2xzIH07XG4iLCIvKiogQGxpY2Vuc2UgemxpYi5qcyAyMDEyIC0gaW1heWEgWyBodHRwczovL2dpdGh1Yi5jb20vaW1heWEvemxpYi5qcyBdIFRoZSBNSVQgTGljZW5zZSAqL3ZhciBtb2Q9e30sIGw9dm9pZCAwLGFhPW1vZDtmdW5jdGlvbiByKGMsZCl7dmFyIGE9Yy5zcGxpdChcIi5cIiksYj1hYTshKGFbMF1pbiBiKSYmYi5leGVjU2NyaXB0JiZiLmV4ZWNTY3JpcHQoXCJ2YXIgXCIrYVswXSk7Zm9yKHZhciBlO2EubGVuZ3RoJiYoZT1hLnNoaWZ0KCkpOykhYS5sZW5ndGgmJmQhPT1sP2JbZV09ZDpiPWJbZV0/YltlXTpiW2VdPXt9fTt2YXIgdD1cInVuZGVmaW5lZFwiIT09dHlwZW9mIFVpbnQ4QXJyYXkmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgVWludDE2QXJyYXkmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgVWludDMyQXJyYXkmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgRGF0YVZpZXc7ZnVuY3Rpb24gdihjKXt2YXIgZD1jLmxlbmd0aCxhPTAsYj1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksZSxmLGcsaCxrLG0sbixwLHMseDtmb3IocD0wO3A8ZDsrK3ApY1twXT5hJiYoYT1jW3BdKSxjW3BdPGImJihiPWNbcF0pO2U9MTw8YTtmPW5ldyAodD9VaW50MzJBcnJheTpBcnJheSkoZSk7Zz0xO2g9MDtmb3Ioaz0yO2c8PWE7KXtmb3IocD0wO3A8ZDsrK3ApaWYoY1twXT09PWcpe209MDtuPWg7Zm9yKHM9MDtzPGc7KytzKW09bTw8MXxuJjEsbj4+PTE7eD1nPDwxNnxwO2ZvcihzPW07czxlO3MrPWspZltzXT14OysraH0rK2c7aDw8PTE7azw8PTF9cmV0dXJuW2YsYSxiXX07ZnVuY3Rpb24gdyhjLGQpe3RoaXMuZz1bXTt0aGlzLmg9MzI3Njg7dGhpcy5kPXRoaXMuZj10aGlzLmE9dGhpcy5sPTA7dGhpcy5pbnB1dD10P25ldyBVaW50OEFycmF5KGMpOmM7dGhpcy5tPSExO3RoaXMuaT15O3RoaXMucj0hMTtpZihkfHwhKGQ9e30pKWQuaW5kZXgmJih0aGlzLmE9ZC5pbmRleCksZC5idWZmZXJTaXplJiYodGhpcy5oPWQuYnVmZmVyU2l6ZSksZC5idWZmZXJUeXBlJiYodGhpcy5pPWQuYnVmZmVyVHlwZSksZC5yZXNpemUmJih0aGlzLnI9ZC5yZXNpemUpO3N3aXRjaCh0aGlzLmkpe2Nhc2UgQTp0aGlzLmI9MzI3Njg7dGhpcy5jPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSgzMjc2OCt0aGlzLmgrMjU4KTticmVhaztjYXNlIHk6dGhpcy5iPTA7dGhpcy5jPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSh0aGlzLmgpO3RoaXMuZT10aGlzLno7dGhpcy5uPXRoaXMudjt0aGlzLmo9dGhpcy53O2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbnZhbGlkIGluZmxhdGUgbW9kZVwiKTtcbn19dmFyIEE9MCx5PTEsQj17dDpBLHM6eX07XG53LnByb3RvdHlwZS5rPWZ1bmN0aW9uKCl7Zm9yKDshdGhpcy5tOyl7dmFyIGM9Qyh0aGlzLDMpO2MmMSYmKHRoaXMubT0hMCk7Yz4+Pj0xO3N3aXRjaChjKXtjYXNlIDA6dmFyIGQ9dGhpcy5pbnB1dCxhPXRoaXMuYSxiPXRoaXMuYyxlPXRoaXMuYixmPWQubGVuZ3RoLGc9bCxoPWwsaz1iLmxlbmd0aCxtPWw7dGhpcy5kPXRoaXMuZj0wO2lmKGErMT49Zil0aHJvdyBFcnJvcihcImludmFsaWQgdW5jb21wcmVzc2VkIGJsb2NrIGhlYWRlcjogTEVOXCIpO2c9ZFthKytdfGRbYSsrXTw8ODtpZihhKzE+PWYpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHVuY29tcHJlc3NlZCBibG9jayBoZWFkZXI6IE5MRU5cIik7aD1kW2ErK118ZFthKytdPDw4O2lmKGc9PT1+aCl0aHJvdyBFcnJvcihcImludmFsaWQgdW5jb21wcmVzc2VkIGJsb2NrIGhlYWRlcjogbGVuZ3RoIHZlcmlmeVwiKTtpZihhK2c+ZC5sZW5ndGgpdGhyb3cgRXJyb3IoXCJpbnB1dCBidWZmZXIgaXMgYnJva2VuXCIpO3N3aXRjaCh0aGlzLmkpe2Nhc2UgQTpmb3IoO2UrXG5nPmIubGVuZ3RoOyl7bT1rLWU7Zy09bTtpZih0KWIuc2V0KGQuc3ViYXJyYXkoYSxhK20pLGUpLGUrPW0sYSs9bTtlbHNlIGZvcig7bS0tOyliW2UrK109ZFthKytdO3RoaXMuYj1lO2I9dGhpcy5lKCk7ZT10aGlzLmJ9YnJlYWs7Y2FzZSB5OmZvcig7ZStnPmIubGVuZ3RoOyliPXRoaXMuZSh7cDoyfSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImludmFsaWQgaW5mbGF0ZSBtb2RlXCIpO31pZih0KWIuc2V0KGQuc3ViYXJyYXkoYSxhK2cpLGUpLGUrPWcsYSs9ZztlbHNlIGZvcig7Zy0tOyliW2UrK109ZFthKytdO3RoaXMuYT1hO3RoaXMuYj1lO3RoaXMuYz1iO2JyZWFrO2Nhc2UgMTp0aGlzLmooYmEsY2EpO2JyZWFrO2Nhc2UgMjpmb3IodmFyIG49Qyh0aGlzLDUpKzI1NyxwPUModGhpcyw1KSsxLHM9Qyh0aGlzLDQpKzQseD1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkoRC5sZW5ndGgpLFM9bCxUPWwsVT1sLHU9bCxNPWwsRj1sLHo9bCxxPWwsVj1sLHE9MDtxPHM7KytxKXhbRFtxXV09XG5DKHRoaXMsMyk7aWYoIXQpe3E9cztmb3Iocz14Lmxlbmd0aDtxPHM7KytxKXhbRFtxXV09MH1TPXYoeCk7dT1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkobitwKTtxPTA7Zm9yKFY9bitwO3E8Vjspc3dpdGNoKE09RSh0aGlzLFMpLE0pe2Nhc2UgMTY6Zm9yKHo9MytDKHRoaXMsMik7ei0tOyl1W3ErK109RjticmVhaztjYXNlIDE3OmZvcih6PTMrQyh0aGlzLDMpO3otLTspdVtxKytdPTA7Rj0wO2JyZWFrO2Nhc2UgMTg6Zm9yKHo9MTErQyh0aGlzLDcpO3otLTspdVtxKytdPTA7Rj0wO2JyZWFrO2RlZmF1bHQ6Rj11W3ErK109TX1UPXQ/dih1LnN1YmFycmF5KDAsbikpOnYodS5zbGljZSgwLG4pKTtVPXQ/dih1LnN1YmFycmF5KG4pKTp2KHUuc2xpY2UobikpO3RoaXMuaihULFUpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJ1bmtub3duIEJUWVBFOiBcIitjKTt9fXJldHVybiB0aGlzLm4oKX07XG52YXIgRz1bMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV0sRD10P25ldyBVaW50MTZBcnJheShHKTpHLEg9WzMsNCw1LDYsNyw4LDksMTAsMTEsMTMsMTUsMTcsMTksMjMsMjcsMzEsMzUsNDMsNTEsNTksNjcsODMsOTksMTE1LDEzMSwxNjMsMTk1LDIyNywyNTgsMjU4LDI1OF0sST10P25ldyBVaW50MTZBcnJheShIKTpILEo9WzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMCwwLDBdLEs9dD9uZXcgVWludDhBcnJheShKKTpKLEw9WzEsMiwzLDQsNSw3LDksMTMsMTcsMjUsMzMsNDksNjUsOTcsMTI5LDE5MywyNTcsMzg1LDUxMyw3NjksMTAyNSwxNTM3LDIwNDksMzA3Myw0MDk3LDYxNDUsODE5MywxMjI4OSwxNjM4NSwyNDU3N10sZGE9dD9uZXcgVWludDE2QXJyYXkoTCk6TCxlYT1bMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMixcbjEzLDEzXSxOPXQ/bmV3IFVpbnQ4QXJyYXkoZWEpOmVhLE89bmV3ICh0P1VpbnQ4QXJyYXk6QXJyYXkpKDI4OCksUCxmYTtQPTA7Zm9yKGZhPU8ubGVuZ3RoO1A8ZmE7KytQKU9bUF09MTQzPj1QPzg6MjU1Pj1QPzk6Mjc5Pj1QPzc6ODt2YXIgYmE9dihPKSxRPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSgzMCksUixnYTtSPTA7Zm9yKGdhPVEubGVuZ3RoO1I8Z2E7KytSKVFbUl09NTt2YXIgY2E9dihRKTtmdW5jdGlvbiBDKGMsZCl7Zm9yKHZhciBhPWMuZixiPWMuZCxlPWMuaW5wdXQsZj1jLmEsZz1lLmxlbmd0aCxoO2I8ZDspe2lmKGY+PWcpdGhyb3cgRXJyb3IoXCJpbnB1dCBidWZmZXIgaXMgYnJva2VuXCIpO2F8PWVbZisrXTw8YjtiKz04fWg9YSYoMTw8ZCktMTtjLmY9YT4+PmQ7Yy5kPWItZDtjLmE9ZjtyZXR1cm4gaH1cbmZ1bmN0aW9uIEUoYyxkKXtmb3IodmFyIGE9Yy5mLGI9Yy5kLGU9Yy5pbnB1dCxmPWMuYSxnPWUubGVuZ3RoLGg9ZFswXSxrPWRbMV0sbSxuO2I8ayYmIShmPj1nKTspYXw9ZVtmKytdPDxiLGIrPTg7bT1oW2EmKDE8PGspLTFdO249bT4+PjE2O2lmKG4+Yil0aHJvdyBFcnJvcihcImludmFsaWQgY29kZSBsZW5ndGg6IFwiK24pO2MuZj1hPj5uO2MuZD1iLW47Yy5hPWY7cmV0dXJuIG0mNjU1MzV9XG53LnByb3RvdHlwZS5qPWZ1bmN0aW9uKGMsZCl7dmFyIGE9dGhpcy5jLGI9dGhpcy5iO3RoaXMubz1jO2Zvcih2YXIgZT1hLmxlbmd0aC0yNTgsZixnLGgsazsyNTYhPT0oZj1FKHRoaXMsYykpOylpZigyNTY+ZiliPj1lJiYodGhpcy5iPWIsYT10aGlzLmUoKSxiPXRoaXMuYiksYVtiKytdPWY7ZWxzZXtnPWYtMjU3O2s9SVtnXTswPEtbZ10mJihrKz1DKHRoaXMsS1tnXSkpO2Y9RSh0aGlzLGQpO2g9ZGFbZl07MDxOW2ZdJiYoaCs9Qyh0aGlzLE5bZl0pKTtiPj1lJiYodGhpcy5iPWIsYT10aGlzLmUoKSxiPXRoaXMuYik7Zm9yKDtrLS07KWFbYl09YVtiKystaF19Zm9yKDs4PD10aGlzLmQ7KXRoaXMuZC09OCx0aGlzLmEtLTt0aGlzLmI9Yn07XG53LnByb3RvdHlwZS53PWZ1bmN0aW9uKGMsZCl7dmFyIGE9dGhpcy5jLGI9dGhpcy5iO3RoaXMubz1jO2Zvcih2YXIgZT1hLmxlbmd0aCxmLGcsaCxrOzI1NiE9PShmPUUodGhpcyxjKSk7KWlmKDI1Nj5mKWI+PWUmJihhPXRoaXMuZSgpLGU9YS5sZW5ndGgpLGFbYisrXT1mO2Vsc2V7Zz1mLTI1NztrPUlbZ107MDxLW2ddJiYoays9Qyh0aGlzLEtbZ10pKTtmPUUodGhpcyxkKTtoPWRhW2ZdOzA8TltmXSYmKGgrPUModGhpcyxOW2ZdKSk7YitrPmUmJihhPXRoaXMuZSgpLGU9YS5sZW5ndGgpO2Zvcig7ay0tOylhW2JdPWFbYisrLWhdfWZvcig7ODw9dGhpcy5kOyl0aGlzLmQtPTgsdGhpcy5hLS07dGhpcy5iPWJ9O1xudy5wcm90b3R5cGUuZT1mdW5jdGlvbigpe3ZhciBjPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSh0aGlzLmItMzI3NjgpLGQ9dGhpcy5iLTMyNzY4LGEsYixlPXRoaXMuYztpZih0KWMuc2V0KGUuc3ViYXJyYXkoMzI3NjgsYy5sZW5ndGgpKTtlbHNle2E9MDtmb3IoYj1jLmxlbmd0aDthPGI7KythKWNbYV09ZVthKzMyNzY4XX10aGlzLmcucHVzaChjKTt0aGlzLmwrPWMubGVuZ3RoO2lmKHQpZS5zZXQoZS5zdWJhcnJheShkLGQrMzI3NjgpKTtlbHNlIGZvcihhPTA7MzI3Njg+YTsrK2EpZVthXT1lW2QrYV07dGhpcy5iPTMyNzY4O3JldHVybiBlfTtcbncucHJvdG90eXBlLno9ZnVuY3Rpb24oYyl7dmFyIGQsYT10aGlzLmlucHV0Lmxlbmd0aC90aGlzLmErMXwwLGIsZSxmLGc9dGhpcy5pbnB1dCxoPXRoaXMuYztjJiYoXCJudW1iZXJcIj09PXR5cGVvZiBjLnAmJihhPWMucCksXCJudW1iZXJcIj09PXR5cGVvZiBjLnUmJihhKz1jLnUpKTsyPmE/KGI9KGcubGVuZ3RoLXRoaXMuYSkvdGhpcy5vWzJdLGY9MjU4KihiLzIpfDAsZT1mPGgubGVuZ3RoP2gubGVuZ3RoK2Y6aC5sZW5ndGg8PDEpOmU9aC5sZW5ndGgqYTt0PyhkPW5ldyBVaW50OEFycmF5KGUpLGQuc2V0KGgpKTpkPWg7cmV0dXJuIHRoaXMuYz1kfTtcbncucHJvdG90eXBlLm49ZnVuY3Rpb24oKXt2YXIgYz0wLGQ9dGhpcy5jLGE9dGhpcy5nLGIsZT1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkodGhpcy5sKyh0aGlzLmItMzI3NjgpKSxmLGcsaCxrO2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gdD90aGlzLmMuc3ViYXJyYXkoMzI3NjgsdGhpcy5iKTp0aGlzLmMuc2xpY2UoMzI3NjgsdGhpcy5iKTtmPTA7Zm9yKGc9YS5sZW5ndGg7ZjxnOysrZil7Yj1hW2ZdO2g9MDtmb3Ioaz1iLmxlbmd0aDtoPGs7KytoKWVbYysrXT1iW2hdfWY9MzI3Njg7Zm9yKGc9dGhpcy5iO2Y8ZzsrK2YpZVtjKytdPWRbZl07dGhpcy5nPVtdO3JldHVybiB0aGlzLmJ1ZmZlcj1lfTtcbncucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYyxkPXRoaXMuYjt0P3RoaXMucj8oYz1uZXcgVWludDhBcnJheShkKSxjLnNldCh0aGlzLmMuc3ViYXJyYXkoMCxkKSkpOmM9dGhpcy5jLnN1YmFycmF5KDAsZCk6KHRoaXMuYy5sZW5ndGg+ZCYmKHRoaXMuYy5sZW5ndGg9ZCksYz10aGlzLmMpO3JldHVybiB0aGlzLmJ1ZmZlcj1jfTtmdW5jdGlvbiBXKGMsZCl7dmFyIGEsYjt0aGlzLmlucHV0PWM7dGhpcy5hPTA7aWYoZHx8IShkPXt9KSlkLmluZGV4JiYodGhpcy5hPWQuaW5kZXgpLGQudmVyaWZ5JiYodGhpcy5BPWQudmVyaWZ5KTthPWNbdGhpcy5hKytdO2I9Y1t0aGlzLmErK107c3dpdGNoKGEmMTUpe2Nhc2UgaGE6dGhpcy5tZXRob2Q9aGE7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcInVuc3VwcG9ydGVkIGNvbXByZXNzaW9uIG1ldGhvZFwiKTt9aWYoMCE9PSgoYTw8OCkrYiklMzEpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGZjaGVjayBmbGFnOlwiKygoYTw8OCkrYiklMzEpO2lmKGImMzIpdGhyb3cgRXJyb3IoXCJmZGljdCBmbGFnIGlzIG5vdCBzdXBwb3J0ZWRcIik7dGhpcy5xPW5ldyB3KGMse2luZGV4OnRoaXMuYSxidWZmZXJTaXplOmQuYnVmZmVyU2l6ZSxidWZmZXJUeXBlOmQuYnVmZmVyVHlwZSxyZXNpemU6ZC5yZXNpemV9KX1cblcucHJvdG90eXBlLms9ZnVuY3Rpb24oKXt2YXIgYz10aGlzLmlucHV0LGQsYTtkPXRoaXMucS5rKCk7dGhpcy5hPXRoaXMucS5hO2lmKHRoaXMuQSl7YT0oY1t0aGlzLmErK108PDI0fGNbdGhpcy5hKytdPDwxNnxjW3RoaXMuYSsrXTw8OHxjW3RoaXMuYSsrXSk+Pj4wO3ZhciBiPWQ7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXt2YXIgZT1iLnNwbGl0KFwiXCIpLGYsZztmPTA7Zm9yKGc9ZS5sZW5ndGg7ZjxnO2YrKyllW2ZdPShlW2ZdLmNoYXJDb2RlQXQoMCkmMjU1KT4+PjA7Yj1lfWZvcih2YXIgaD0xLGs9MCxtPWIubGVuZ3RoLG4scD0wOzA8bTspe249MTAyNDxtPzEwMjQ6bTttLT1uO2RvIGgrPWJbcCsrXSxrKz1oO3doaWxlKC0tbik7aCU9NjU1MjE7ayU9NjU1MjF9aWYoYSE9PShrPDwxNnxoKT4+PjApdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGFkbGVyLTMyIGNoZWNrc3VtXCIpO31yZXR1cm4gZH07dmFyIGhhPTg7cihcIlpsaWIuSW5mbGF0ZVwiLFcpO3IoXCJabGliLkluZmxhdGUucHJvdG90eXBlLmRlY29tcHJlc3NcIixXLnByb3RvdHlwZS5rKTt2YXIgWD17QURBUFRJVkU6Qi5zLEJMT0NLOkIudH0sWSxaLCQsaWE7aWYoT2JqZWN0LmtleXMpWT1PYmplY3Qua2V5cyhYKTtlbHNlIGZvcihaIGluIFk9W10sJD0wLFgpWVskKytdPVo7JD0wO2ZvcihpYT1ZLmxlbmd0aDskPGlhOysrJClaPVlbJF0scihcIlpsaWIuSW5mbGF0ZS5CdWZmZXJUeXBlLlwiK1osWFtaXSk7XG52YXIgWmxpYj1tb2QuWmxpYjtcbmV4cG9ydCB7IFpsaWIgfSIsIi8qKlxuICogQGF1dGhvciByZW5lalxuICogTlVSQlMgdXRpbHNcbiAqXG4gKiBTZWUgTlVSQlNDdXJ2ZSBhbmQgTlVSQlNTdXJmYWNlLlxuICpcbiAqKi9cblxuaW1wb3J0IHtcblx0VmVjdG9yMyxcblx0VmVjdG9yNFxufSBmcm9tIFwiLi90aHJlZS5tb2R1bGUuanNcIjtcblxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXHROVVJCUyBVdGlsc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgTlVSQlNVdGlscyA9IHtcblxuXHQvKlxuXHRGaW5kcyBrbm90IHZlY3RvciBzcGFuLlxuXG5cdHAgOiBkZWdyZWVcblx0dSA6IHBhcmFtZXRyaWMgdmFsdWVcblx0VSA6IGtub3QgdmVjdG9yXG5cblx0cmV0dXJucyB0aGUgc3BhblxuXHQqL1xuXHRmaW5kU3BhbjogZnVuY3Rpb24gKCBwLCB1LCBVICkge1xuXG5cdFx0dmFyIG4gPSBVLmxlbmd0aCAtIHAgLSAxO1xuXG5cdFx0aWYgKCB1ID49IFVbIG4gXSApIHtcblxuXHRcdFx0cmV0dXJuIG4gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1IDw9IFVbIHAgXSApIHtcblxuXHRcdFx0cmV0dXJuIHA7XG5cblx0XHR9XG5cblx0XHR2YXIgbG93ID0gcDtcblx0XHR2YXIgaGlnaCA9IG47XG5cdFx0dmFyIG1pZCA9IE1hdGguZmxvb3IoICggbG93ICsgaGlnaCApIC8gMiApO1xuXG5cdFx0d2hpbGUgKCB1IDwgVVsgbWlkIF0gfHwgdSA+PSBVWyBtaWQgKyAxIF0gKSB7XG5cblx0XHRcdGlmICggdSA8IFVbIG1pZCBdICkge1xuXG5cdFx0XHRcdGhpZ2ggPSBtaWQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bG93ID0gbWlkO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1pZCA9IE1hdGguZmxvb3IoICggbG93ICsgaGlnaCApIC8gMiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1pZDtcblxuXHR9LFxuXG5cblx0Lypcblx0Q2FsY3VsYXRlIGJhc2lzIGZ1bmN0aW9ucy4gU2VlIFRoZSBOVVJCUyBCb29rLCBwYWdlIDcwLCBhbGdvcml0aG0gQTIuMlxuXG5cdHNwYW4gOiBzcGFuIGluIHdoaWNoIHUgbGllc1xuXHR1ICAgIDogcGFyYW1ldHJpYyBwb2ludFxuXHRwICAgIDogZGVncmVlXG5cdFUgICAgOiBrbm90IHZlY3RvclxuXG5cdHJldHVybnMgYXJyYXlbcCsxXSB3aXRoIGJhc2lzIGZ1bmN0aW9ucyB2YWx1ZXMuXG5cdCovXG5cdGNhbGNCYXNpc0Z1bmN0aW9uczogZnVuY3Rpb24gKCBzcGFuLCB1LCBwLCBVICkge1xuXG5cdFx0dmFyIE4gPSBbXTtcblx0XHR2YXIgbGVmdCA9IFtdO1xuXHRcdHZhciByaWdodCA9IFtdO1xuXHRcdE5bIDAgXSA9IDEuMDtcblxuXHRcdGZvciAoIHZhciBqID0gMTsgaiA8PSBwOyArKyBqICkge1xuXG5cdFx0XHRsZWZ0WyBqIF0gPSB1IC0gVVsgc3BhbiArIDEgLSBqIF07XG5cdFx0XHRyaWdodFsgaiBdID0gVVsgc3BhbiArIGogXSAtIHU7XG5cblx0XHRcdHZhciBzYXZlZCA9IDAuMDtcblxuXHRcdFx0Zm9yICggdmFyIHIgPSAwOyByIDwgajsgKysgciApIHtcblxuXHRcdFx0XHR2YXIgcnYgPSByaWdodFsgciArIDEgXTtcblx0XHRcdFx0dmFyIGx2ID0gbGVmdFsgaiAtIHIgXTtcblx0XHRcdFx0dmFyIHRlbXAgPSBOWyByIF0gLyAoIHJ2ICsgbHYgKTtcblx0XHRcdFx0TlsgciBdID0gc2F2ZWQgKyBydiAqIHRlbXA7XG5cdFx0XHRcdHNhdmVkID0gbHYgKiB0ZW1wO1xuXG5cdFx0XHQgfVxuXG5cdFx0XHQgTlsgaiBdID0gc2F2ZWQ7XG5cblx0XHQgfVxuXG5cdFx0IHJldHVybiBOO1xuXG5cdH0sXG5cblxuXHQvKlxuXHRDYWxjdWxhdGUgQi1TcGxpbmUgY3VydmUgcG9pbnRzLiBTZWUgVGhlIE5VUkJTIEJvb2ssIHBhZ2UgODIsIGFsZ29yaXRobSBBMy4xLlxuXG5cdHAgOiBkZWdyZWUgb2YgQi1TcGxpbmVcblx0VSA6IGtub3QgdmVjdG9yXG5cdFAgOiBjb250cm9sIHBvaW50cyAoeCwgeSwgeiwgdylcblx0dSA6IHBhcmFtZXRyaWMgcG9pbnRcblxuXHRyZXR1cm5zIHBvaW50IGZvciBnaXZlbiB1XG5cdCovXG5cdGNhbGNCU3BsaW5lUG9pbnQ6IGZ1bmN0aW9uICggcCwgVSwgUCwgdSApIHtcblxuXHRcdHZhciBzcGFuID0gdGhpcy5maW5kU3BhbiggcCwgdSwgVSApO1xuXHRcdHZhciBOID0gdGhpcy5jYWxjQmFzaXNGdW5jdGlvbnMoIHNwYW4sIHUsIHAsIFUgKTtcblx0XHR2YXIgQyA9IG5ldyBWZWN0b3I0KCAwLCAwLCAwLCAwICk7XG5cblx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPD0gcDsgKysgaiApIHtcblxuXHRcdFx0dmFyIHBvaW50ID0gUFsgc3BhbiAtIHAgKyBqIF07XG5cdFx0XHR2YXIgTmogPSBOWyBqIF07XG5cdFx0XHR2YXIgd05qID0gcG9pbnQudyAqIE5qO1xuXHRcdFx0Qy54ICs9IHBvaW50LnggKiB3Tmo7XG5cdFx0XHRDLnkgKz0gcG9pbnQueSAqIHdOajtcblx0XHRcdEMueiArPSBwb2ludC56ICogd05qO1xuXHRcdFx0Qy53ICs9IHBvaW50LncgKiBOajtcblxuXHRcdH1cblxuXHRcdHJldHVybiBDO1xuXG5cdH0sXG5cblxuXHQvKlxuXHRDYWxjdWxhdGUgYmFzaXMgZnVuY3Rpb25zIGRlcml2YXRpdmVzLiBTZWUgVGhlIE5VUkJTIEJvb2ssIHBhZ2UgNzIsIGFsZ29yaXRobSBBMi4zLlxuXG5cdHNwYW4gOiBzcGFuIGluIHdoaWNoIHUgbGllc1xuXHR1ICAgIDogcGFyYW1ldHJpYyBwb2ludFxuXHRwICAgIDogZGVncmVlXG5cdG4gICAgOiBudW1iZXIgb2YgZGVyaXZhdGl2ZXMgdG8gY2FsY3VsYXRlXG5cdFUgICAgOiBrbm90IHZlY3RvclxuXG5cdHJldHVybnMgYXJyYXlbbisxXVtwKzFdIHdpdGggYmFzaXMgZnVuY3Rpb25zIGRlcml2YXRpdmVzXG5cdCovXG5cdGNhbGNCYXNpc0Z1bmN0aW9uRGVyaXZhdGl2ZXM6IGZ1bmN0aW9uICggc3BhbiwgdSwgcCwgbiwgVSApIHtcblxuXHRcdHZhciB6ZXJvQXJyID0gW107XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IHA7ICsrIGkgKVxuXHRcdFx0emVyb0FyclsgaSBdID0gMC4wO1xuXG5cdFx0dmFyIGRlcnMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPD0gbjsgKysgaSApXG5cdFx0XHRkZXJzWyBpIF0gPSB6ZXJvQXJyLnNsaWNlKCAwICk7XG5cblx0XHR2YXIgbmR1ID0gW107XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IHA7ICsrIGkgKVxuXHRcdFx0bmR1WyBpIF0gPSB6ZXJvQXJyLnNsaWNlKCAwICk7XG5cblx0XHRuZHVbIDAgXVsgMCBdID0gMS4wO1xuXG5cdFx0dmFyIGxlZnQgPSB6ZXJvQXJyLnNsaWNlKCAwICk7XG5cdFx0dmFyIHJpZ2h0ID0gemVyb0Fyci5zbGljZSggMCApO1xuXG5cdFx0Zm9yICggdmFyIGogPSAxOyBqIDw9IHA7ICsrIGogKSB7XG5cblx0XHRcdGxlZnRbIGogXSA9IHUgLSBVWyBzcGFuICsgMSAtIGogXTtcblx0XHRcdHJpZ2h0WyBqIF0gPSBVWyBzcGFuICsgaiBdIC0gdTtcblxuXHRcdFx0dmFyIHNhdmVkID0gMC4wO1xuXG5cdFx0XHRmb3IgKCB2YXIgciA9IDA7IHIgPCBqOyArKyByICkge1xuXG5cdFx0XHRcdHZhciBydiA9IHJpZ2h0WyByICsgMSBdO1xuXHRcdFx0XHR2YXIgbHYgPSBsZWZ0WyBqIC0gciBdO1xuXHRcdFx0XHRuZHVbIGogXVsgciBdID0gcnYgKyBsdjtcblxuXHRcdFx0XHR2YXIgdGVtcCA9IG5kdVsgciBdWyBqIC0gMSBdIC8gbmR1WyBqIF1bIHIgXTtcblx0XHRcdFx0bmR1WyByIF1bIGogXSA9IHNhdmVkICsgcnYgKiB0ZW1wO1xuXHRcdFx0XHRzYXZlZCA9IGx2ICogdGVtcDtcblxuXHRcdFx0fVxuXG5cdFx0XHRuZHVbIGogXVsgaiBdID0gc2F2ZWQ7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPD0gcDsgKysgaiApIHtcblxuXHRcdFx0ZGVyc1sgMCBdWyBqIF0gPSBuZHVbIGogXVsgcCBdO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIHIgPSAwOyByIDw9IHA7ICsrIHIgKSB7XG5cblx0XHRcdHZhciBzMSA9IDA7XG5cdFx0XHR2YXIgczIgPSAxO1xuXG5cdFx0XHR2YXIgYSA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IHA7ICsrIGkgKSB7XG5cblx0XHRcdFx0YVsgaSBdID0gemVyb0Fyci5zbGljZSggMCApO1xuXG5cdFx0XHR9XG5cdFx0XHRhWyAwIF1bIDAgXSA9IDEuMDtcblxuXHRcdFx0Zm9yICggdmFyIGsgPSAxOyBrIDw9IG47ICsrIGsgKSB7XG5cblx0XHRcdFx0dmFyIGQgPSAwLjA7XG5cdFx0XHRcdHZhciByayA9IHIgLSBrO1xuXHRcdFx0XHR2YXIgcGsgPSBwIC0gaztcblxuXHRcdFx0XHRpZiAoIHIgPj0gayApIHtcblxuXHRcdFx0XHRcdGFbIHMyIF1bIDAgXSA9IGFbIHMxIF1bIDAgXSAvIG5kdVsgcGsgKyAxIF1bIHJrIF07XG5cdFx0XHRcdFx0ZCA9IGFbIHMyIF1bIDAgXSAqIG5kdVsgcmsgXVsgcGsgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGoxID0gKCByayA+PSAtIDEgKSA/IDEgOiAtIHJrO1xuXHRcdFx0XHR2YXIgajIgPSAoIHIgLSAxIDw9IHBrICkgPyBrIC0gMSA6IHAgLSByO1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gajE7IGogPD0gajI7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRhWyBzMiBdWyBqIF0gPSAoIGFbIHMxIF1bIGogXSAtIGFbIHMxIF1bIGogLSAxIF0gKSAvIG5kdVsgcGsgKyAxIF1bIHJrICsgaiBdO1xuXHRcdFx0XHRcdGQgKz0gYVsgczIgXVsgaiBdICogbmR1WyByayArIGogXVsgcGsgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCByIDw9IHBrICkge1xuXG5cdFx0XHRcdFx0YVsgczIgXVsgayBdID0gLSBhWyBzMSBdWyBrIC0gMSBdIC8gbmR1WyBwayArIDEgXVsgciBdO1xuXHRcdFx0XHRcdGQgKz0gYVsgczIgXVsgayBdICogbmR1WyByIF1bIHBrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlcnNbIGsgXVsgciBdID0gZDtcblxuXHRcdFx0XHR2YXIgaiA9IHMxO1xuXHRcdFx0XHRzMSA9IHMyO1xuXHRcdFx0XHRzMiA9IGo7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciByID0gcDtcblxuXHRcdGZvciAoIHZhciBrID0gMTsgayA8PSBuOyArKyBrICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPD0gcDsgKysgaiApIHtcblxuXHRcdFx0XHRkZXJzWyBrIF1bIGogXSAqPSByO1xuXG5cdFx0XHR9XG5cdFx0XHRyICo9IHAgLSBrO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlcnM7XG5cblx0fSxcblxuXG5cdC8qXG5cdFx0Q2FsY3VsYXRlIGRlcml2YXRpdmVzIG9mIGEgQi1TcGxpbmUuIFNlZSBUaGUgTlVSQlMgQm9vaywgcGFnZSA5MywgYWxnb3JpdGhtIEEzLjIuXG5cblx0XHRwICA6IGRlZ3JlZVxuXHRcdFUgIDoga25vdCB2ZWN0b3Jcblx0XHRQICA6IGNvbnRyb2wgcG9pbnRzXG5cdFx0dSAgOiBQYXJhbWV0cmljIHBvaW50c1xuXHRcdG5kIDogbnVtYmVyIG9mIGRlcml2YXRpdmVzXG5cblx0XHRyZXR1cm5zIGFycmF5W2QrMV0gd2l0aCBkZXJpdmF0aXZlc1xuXHRcdCovXG5cdGNhbGNCU3BsaW5lRGVyaXZhdGl2ZXM6IGZ1bmN0aW9uICggcCwgVSwgUCwgdSwgbmQgKSB7XG5cblx0XHR2YXIgZHUgPSBuZCA8IHAgPyBuZCA6IHA7XG5cdFx0dmFyIENLID0gW107XG5cdFx0dmFyIHNwYW4gPSB0aGlzLmZpbmRTcGFuKCBwLCB1LCBVICk7XG5cdFx0dmFyIG5kZXJzID0gdGhpcy5jYWxjQmFzaXNGdW5jdGlvbkRlcml2YXRpdmVzKCBzcGFuLCB1LCBwLCBkdSwgVSApO1xuXHRcdHZhciBQdyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgUC5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IFBbIGkgXS5jbG9uZSgpO1xuXHRcdFx0dmFyIHcgPSBwb2ludC53O1xuXG5cdFx0XHRwb2ludC54ICo9IHc7XG5cdFx0XHRwb2ludC55ICo9IHc7XG5cdFx0XHRwb2ludC56ICo9IHc7XG5cblx0XHRcdFB3WyBpIF0gPSBwb2ludDtcblxuXHRcdH1cblx0XHRmb3IgKCB2YXIgayA9IDA7IGsgPD0gZHU7ICsrIGsgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IFB3WyBzcGFuIC0gcCBdLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoIG5kZXJzWyBrIF1bIDAgXSApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDE7IGogPD0gcDsgKysgaiApIHtcblxuXHRcdFx0XHRwb2ludC5hZGQoIFB3WyBzcGFuIC0gcCArIGogXS5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKCBuZGVyc1sgayBdWyBqIF0gKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdENLWyBrIF0gPSBwb2ludDtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBrID0gZHUgKyAxOyBrIDw9IG5kICsgMTsgKysgayApIHtcblxuXHRcdFx0Q0tbIGsgXSA9IG5ldyBWZWN0b3I0KCAwLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gQ0s7XG5cblx0fSxcblxuXG5cdC8qXG5cdENhbGN1bGF0ZSBcIksgb3ZlciBJXCJcblxuXHRyZXR1cm5zIGshLyhpIShrLWkpISlcblx0Ki9cblx0Y2FsY0tvdmVySTogZnVuY3Rpb24gKCBrLCBpICkge1xuXG5cdFx0dmFyIG5vbSA9IDE7XG5cblx0XHRmb3IgKCB2YXIgaiA9IDI7IGogPD0gazsgKysgaiApIHtcblxuXHRcdFx0bm9tICo9IGo7XG5cblx0XHR9XG5cblx0XHR2YXIgZGVub20gPSAxO1xuXG5cdFx0Zm9yICggdmFyIGogPSAyOyBqIDw9IGk7ICsrIGogKSB7XG5cblx0XHRcdGRlbm9tICo9IGo7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaiA9IDI7IGogPD0gayAtIGk7ICsrIGogKSB7XG5cblx0XHRcdGRlbm9tICo9IGo7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbm9tIC8gZGVub207XG5cblx0fSxcblxuXG5cdC8qXG5cdENhbGN1bGF0ZSBkZXJpdmF0aXZlcyAoMC1uZCkgb2YgcmF0aW9uYWwgY3VydmUuIFNlZSBUaGUgTlVSQlMgQm9vaywgcGFnZSAxMjcsIGFsZ29yaXRobSBBNC4yLlxuXG5cdFBkZXJzIDogcmVzdWx0IG9mIGZ1bmN0aW9uIGNhbGNCU3BsaW5lRGVyaXZhdGl2ZXNcblxuXHRyZXR1cm5zIGFycmF5IHdpdGggZGVyaXZhdGl2ZXMgZm9yIHJhdGlvbmFsIGN1cnZlLlxuXHQqL1xuXHRjYWxjUmF0aW9uYWxDdXJ2ZURlcml2YXRpdmVzOiBmdW5jdGlvbiAoIFBkZXJzICkge1xuXG5cdFx0dmFyIG5kID0gUGRlcnMubGVuZ3RoO1xuXHRcdHZhciBBZGVycyA9IFtdO1xuXHRcdHZhciB3ZGVycyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbmQ7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IFBkZXJzWyBpIF07XG5cdFx0XHRBZGVyc1sgaSBdID0gbmV3IFZlY3RvcjMoIHBvaW50LngsIHBvaW50LnksIHBvaW50LnogKTtcblx0XHRcdHdkZXJzWyBpIF0gPSBwb2ludC53O1xuXG5cdFx0fVxuXG5cdFx0dmFyIENLID0gW107XG5cblx0XHRmb3IgKCB2YXIgayA9IDA7IGsgPCBuZDsgKysgayApIHtcblxuXHRcdFx0dmFyIHYgPSBBZGVyc1sgayBdLmNsb25lKCk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMTsgaSA8PSBrOyArKyBpICkge1xuXG5cdFx0XHRcdHYuc3ViKCBDS1sgayAtIGkgXS5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKCB0aGlzLmNhbGNLb3ZlckkoIGssIGkgKSAqIHdkZXJzWyBpIF0gKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdENLWyBrIF0gPSB2LmRpdmlkZVNjYWxhciggd2RlcnNbIDAgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIENLO1xuXG5cdH0sXG5cblxuXHQvKlxuXHRDYWxjdWxhdGUgTlVSQlMgY3VydmUgZGVyaXZhdGl2ZXMuIFNlZSBUaGUgTlVSQlMgQm9vaywgcGFnZSAxMjcsIGFsZ29yaXRobSBBNC4yLlxuXG5cdHAgIDogZGVncmVlXG5cdFUgIDoga25vdCB2ZWN0b3Jcblx0UCAgOiBjb250cm9sIHBvaW50cyBpbiBob21vZ2VuZW91cyBzcGFjZVxuXHR1ICA6IHBhcmFtZXRyaWMgcG9pbnRzXG5cdG5kIDogbnVtYmVyIG9mIGRlcml2YXRpdmVzXG5cblx0cmV0dXJucyBhcnJheSB3aXRoIGRlcml2YXRpdmVzLlxuXHQqL1xuXHRjYWxjTlVSQlNEZXJpdmF0aXZlczogZnVuY3Rpb24gKCBwLCBVLCBQLCB1LCBuZCApIHtcblxuXHRcdHZhciBQZGVycyA9IHRoaXMuY2FsY0JTcGxpbmVEZXJpdmF0aXZlcyggcCwgVSwgUCwgdSwgbmQgKTtcblx0XHRyZXR1cm4gdGhpcy5jYWxjUmF0aW9uYWxDdXJ2ZURlcml2YXRpdmVzKCBQZGVycyApO1xuXG5cdH0sXG5cblxuXHQvKlxuXHRDYWxjdWxhdGUgcmF0aW9uYWwgQi1TcGxpbmUgc3VyZmFjZSBwb2ludC4gU2VlIFRoZSBOVVJCUyBCb29rLCBwYWdlIDEzNCwgYWxnb3JpdGhtIEE0LjMuXG5cblx0cDEsIHAyIDogZGVncmVlcyBvZiBCLVNwbGluZSBzdXJmYWNlXG5cdFUxLCBVMiA6IGtub3QgdmVjdG9yc1xuXHRQICAgICAgOiBjb250cm9sIHBvaW50cyAoeCwgeSwgeiwgdylcblx0dSwgdiAgIDogcGFyYW1ldHJpYyB2YWx1ZXNcblxuXHRyZXR1cm5zIHBvaW50IGZvciBnaXZlbiAodSwgdilcblx0Ki9cblx0Y2FsY1N1cmZhY2VQb2ludDogZnVuY3Rpb24gKCBwLCBxLCBVLCBWLCBQLCB1LCB2LCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgdXNwYW4gPSB0aGlzLmZpbmRTcGFuKCBwLCB1LCBVICk7XG5cdFx0dmFyIHZzcGFuID0gdGhpcy5maW5kU3BhbiggcSwgdiwgViApO1xuXHRcdHZhciBOdSA9IHRoaXMuY2FsY0Jhc2lzRnVuY3Rpb25zKCB1c3BhbiwgdSwgcCwgVSApO1xuXHRcdHZhciBOdiA9IHRoaXMuY2FsY0Jhc2lzRnVuY3Rpb25zKCB2c3BhbiwgdiwgcSwgViApO1xuXHRcdHZhciB0ZW1wID0gW107XG5cblx0XHRmb3IgKCB2YXIgbCA9IDA7IGwgPD0gcTsgKysgbCApIHtcblxuXHRcdFx0dGVtcFsgbCBdID0gbmV3IFZlY3RvcjQoIDAsIDAsIDAsIDAgKTtcblx0XHRcdGZvciAoIHZhciBrID0gMDsgayA8PSBwOyArKyBrICkge1xuXG5cdFx0XHRcdHZhciBwb2ludCA9IFBbIHVzcGFuIC0gcCArIGsgXVsgdnNwYW4gLSBxICsgbCBdLmNsb25lKCk7XG5cdFx0XHRcdHZhciB3ID0gcG9pbnQudztcblx0XHRcdFx0cG9pbnQueCAqPSB3O1xuXHRcdFx0XHRwb2ludC55ICo9IHc7XG5cdFx0XHRcdHBvaW50LnogKj0gdztcblx0XHRcdFx0dGVtcFsgbCBdLmFkZCggcG9pbnQubXVsdGlwbHlTY2FsYXIoIE51WyBrIF0gKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgU3cgPSBuZXcgVmVjdG9yNCggMCwgMCwgMCwgMCApO1xuXHRcdGZvciAoIHZhciBsID0gMDsgbCA8PSBxOyArKyBsICkge1xuXG5cdFx0XHRTdy5hZGQoIHRlbXBbIGwgXS5tdWx0aXBseVNjYWxhciggTnZbIGwgXSApICk7XG5cblx0XHR9XG5cblx0XHRTdy5kaXZpZGVTY2FsYXIoIFN3LncgKTtcblx0XHR0YXJnZXQuc2V0KCBTdy54LCBTdy55LCBTdy56ICk7XG5cblx0fVxuXG59O1xuXG5leHBvcnQgeyBOVVJCU1V0aWxzIH07XG4iLCIvKipcbiAqIEBhdXRob3IgcmVuZWpcbiAqIE5VUkJTIGN1cnZlIG9iamVjdFxuICpcbiAqIERlcml2ZXMgZnJvbSBDdXJ2ZSwgb3ZlcnJpZGluZyBnZXRQb2ludCBhbmQgZ2V0VGFuZ2VudC5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiAoeCwgeSBbLCB6PTAgWywgdz0xXV0pIGNvbnRyb2wgcG9pbnRzIHdpdGggdz13ZWlnaHQuXG4gKlxuICoqL1xuXG5pbXBvcnQge1xuXHRDdXJ2ZSxcblx0VmVjdG9yMyxcblx0VmVjdG9yNFxufSBmcm9tIFwiLi90aHJlZS5tb2R1bGUuanNcIjtcbmltcG9ydCB7IE5VUkJTVXRpbHMgfSBmcm9tIFwiLi9OVVJCU1V0aWxzLmpzXCI7XG5cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlx0TlVSQlMgY3VydmVcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIE5VUkJTQ3VydmUgPSBmdW5jdGlvbiAoIGRlZ3JlZSwga25vdHMgLyogYXJyYXkgb2YgcmVhbHMgKi8sIGNvbnRyb2xQb2ludHMgLyogYXJyYXkgb2YgVmVjdG9yKDJ8M3w0KSAqLywgc3RhcnRLbm90IC8qIGluZGV4IGluIGtub3RzICovLCBlbmRLbm90IC8qIGluZGV4IGluIGtub3RzICovICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmRlZ3JlZSA9IGRlZ3JlZTtcblx0dGhpcy5rbm90cyA9IGtub3RzO1xuXHR0aGlzLmNvbnRyb2xQb2ludHMgPSBbXTtcblx0Ly8gVXNlZCBieSBwZXJpb2RpYyBOVVJCUyB0byByZW1vdmUgaGlkZGVuIHNwYW5zXG5cdHRoaXMuc3RhcnRLbm90ID0gc3RhcnRLbm90IHx8IDA7XG5cdHRoaXMuZW5kS25vdCA9IGVuZEtub3QgfHwgKCB0aGlzLmtub3RzLmxlbmd0aCAtIDEgKTtcblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY29udHJvbFBvaW50cy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHQvLyBlbnN1cmUgVmVjdG9yNCBmb3IgY29udHJvbCBwb2ludHNcblx0XHR2YXIgcG9pbnQgPSBjb250cm9sUG9pbnRzWyBpIF07XG5cdFx0dGhpcy5jb250cm9sUG9pbnRzWyBpIF0gPSBuZXcgVmVjdG9yNCggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiwgcG9pbnQudyApO1xuXG5cdH1cblxufTtcblxuXG5OVVJCU0N1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuTlVSQlNDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBOVVJCU0N1cnZlO1xuXG5cbk5VUkJTQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0ICkge1xuXG5cdHZhciB1ID0gdGhpcy5rbm90c1sgdGhpcy5zdGFydEtub3QgXSArIHQgKiAoIHRoaXMua25vdHNbIHRoaXMuZW5kS25vdCBdIC0gdGhpcy5rbm90c1sgdGhpcy5zdGFydEtub3QgXSApOyAvLyBsaW5lYXIgbWFwcGluZyB0LT51XG5cblx0Ly8gZm9sbG93aW5nIHJlc3VsdHMgaW4gKHd4LCB3eSwgd3osIHcpIGhvbW9nZW5lb3VzIHBvaW50XG5cdHZhciBocG9pbnQgPSBOVVJCU1V0aWxzLmNhbGNCU3BsaW5lUG9pbnQoIHRoaXMuZGVncmVlLCB0aGlzLmtub3RzLCB0aGlzLmNvbnRyb2xQb2ludHMsIHUgKTtcblxuXHRpZiAoIGhwb2ludC53ICE9IDEuMCApIHtcblxuXHRcdC8vIHByb2plY3QgdG8gM0Qgc3BhY2U6ICh3eCwgd3ksIHd6LCB3KSAtPiAoeCwgeSwgeiwgMSlcblx0XHRocG9pbnQuZGl2aWRlU2NhbGFyKCBocG9pbnQudyApO1xuXG5cdH1cblxuXHRyZXR1cm4gbmV3IFZlY3RvcjMoIGhwb2ludC54LCBocG9pbnQueSwgaHBvaW50LnogKTtcblxufTtcblxuXG5OVVJCU0N1cnZlLnByb3RvdHlwZS5nZXRUYW5nZW50ID0gZnVuY3Rpb24gKCB0ICkge1xuXG5cdHZhciB1ID0gdGhpcy5rbm90c1sgMCBdICsgdCAqICggdGhpcy5rbm90c1sgdGhpcy5rbm90cy5sZW5ndGggLSAxIF0gLSB0aGlzLmtub3RzWyAwIF0gKTtcblx0dmFyIGRlcnMgPSBOVVJCU1V0aWxzLmNhbGNOVVJCU0Rlcml2YXRpdmVzKCB0aGlzLmRlZ3JlZSwgdGhpcy5rbm90cywgdGhpcy5jb250cm9sUG9pbnRzLCB1LCAxICk7XG5cdHZhciB0YW5nZW50ID0gZGVyc1sgMSBdLmNsb25lKCk7XG5cdHRhbmdlbnQubm9ybWFsaXplKCk7XG5cblx0cmV0dXJuIHRhbmdlbnQ7XG5cbn07XG5cbmV4cG9ydCB7IE5VUkJTQ3VydmUgfTtcbiIsIi8qKlxuICogQGF1dGhvciBLeWxlLUxhcnNvbiBodHRwczovL2dpdGh1Yi5jb20vS3lsZS1MYXJzb25cbiAqIEBhdXRob3IgVGFrYWhpcm8gaHR0cHM6Ly9naXRodWIuY29tL3Rha2FoaXJveFxuICogQGF1dGhvciBMZXd5IEJsdWUgaHR0cHM6Ly9naXRodWIuY29tL2xvb2VlZVxuICpcbiAqIExvYWRlciBsb2FkcyBGQlggZmlsZSBhbmQgZ2VuZXJhdGVzIEdyb3VwIHJlcHJlc2VudGluZyBGQlggc2NlbmUuXG4gKiBSZXF1aXJlcyBGQlggZmlsZSB0byBiZSA+PSA3LjAgYW5kIGluIEFTQ0lJIG9yID49IDY0MDAgaW4gQmluYXJ5IGZvcm1hdFxuICogVmVyc2lvbnMgbG93ZXIgdGhhbiB0aGlzIG1heSBsb2FkIGJ1dCB3aWxsIHByb2JhYmx5IGhhdmUgZXJyb3JzXG4gKlxuICogTmVlZHMgU3VwcG9ydDpcbiAqICBNb3JwaCBub3JtYWxzIC8gYmxlbmQgc2hhcGUgbm9ybWFsc1xuICpcbiAqIEZCWCBmb3JtYXQgcmVmZXJlbmNlczpcbiAqIFx0aHR0cHM6Ly93aWtpLmJsZW5kZXIub3JnL2luZGV4LnBocC9Vc2VyOk1vbnQyOS9Gb3VuZGF0aW9uL0ZCWF9GaWxlX1N0cnVjdHVyZVxuICogXHRodHRwOi8vaGVscC5hdXRvZGVzay5jb20vdmlldy9GQlgvMjAxNy9FTlUvP2d1aWQ9X19jcHBfcmVmX2luZGV4X2h0bWwgKEMrKyBTREsgcmVmZXJlbmNlKVxuICpcbiAqIFx0QmluYXJ5IGZvcm1hdCBzcGVjaWZpY2F0aW9uOlxuICpcdFx0aHR0cHM6Ly9jb2RlLmJsZW5kZXIub3JnLzIwMTMvMDgvZmJ4LWJpbmFyeS1maWxlLWZvcm1hdC1zcGVjaWZpY2F0aW9uL1xuICovXG5cbmltcG9ydCB7XG5cdEFtYmllbnRMaWdodCxcblx0QW5pbWF0aW9uQ2xpcCxcblx0Qm9uZSxcblx0QnVmZmVyQXR0cmlidXRlLFxuXHRCdWZmZXJHZW9tZXRyeSxcblx0Q2xhbXBUb0VkZ2VXcmFwcGluZyxcblx0Q29sb3IsXG5cdERlZmF1bHRMb2FkaW5nTWFuYWdlcixcblx0RGlyZWN0aW9uYWxMaWdodCxcblx0RXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEV1bGVyLFxuXHRGaWxlTG9hZGVyLFxuXHRGbG9hdDMyQnVmZmVyQXR0cmlidXRlLFxuXHRHcm91cCxcblx0TGluZSxcblx0TGluZUJhc2ljTWF0ZXJpYWwsXG5cdExvYWRlcixcblx0TG9hZGVyVXRpbHMsXG5cdE1hdGggYXMgX01hdGgsXG5cdE1hdHJpeDMsXG5cdE1hdHJpeDQsXG5cdE1lc2gsXG5cdE1lc2hMYW1iZXJ0TWF0ZXJpYWwsXG5cdE1lc2hQaG9uZ01hdGVyaWFsLFxuXHROdW1iZXJLZXlmcmFtZVRyYWNrLFxuXHRPYmplY3QzRCxcblx0T3J0aG9ncmFwaGljQ2FtZXJhLFxuXHRQZXJzcGVjdGl2ZUNhbWVyYSxcblx0UG9pbnRMaWdodCxcblx0UHJvcGVydHlCaW5kaW5nLFxuXHRRdWF0ZXJuaW9uLFxuXHRRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayxcblx0UmVwZWF0V3JhcHBpbmcsXG5cdFNrZWxldG9uLFxuXHRTa2lubmVkTWVzaCxcblx0U3BvdExpZ2h0LFxuXHRUZXh0dXJlLFxuXHRUZXh0dXJlTG9hZGVyLFxuXHRVaW50MTZCdWZmZXJBdHRyaWJ1dGUsXG5cdFZlY3RvcjMsXG5cdFZlY3RvcjQsXG5cdFZlY3RvcktleWZyYW1lVHJhY2ssXG5cdFZlcnRleENvbG9ycyxcblx0c1JHQkVuY29kaW5nXG59IGZyb20gXCIuL3RocmVlLm1vZHVsZS5qc1wiO1xuaW1wb3J0IHsgWmxpYiB9IGZyb20gXCIuL2luZmxhdGUubW9kdWxlLm1pbi5qc1wiO1xuaW1wb3J0IHsgTlVSQlNDdXJ2ZSB9IGZyb20gXCIuL05VUkJTQ3VydmUuanNcIjtcblxuXG52YXIgRkJYTG9hZGVyID0gKCBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGZieFRyZWU7XG5cdHZhciBjb25uZWN0aW9ucztcblx0dmFyIHNjZW5lR3JhcGg7XG5cblx0ZnVuY3Rpb24gRkJYTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdFx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cblx0fVxuXG5cdEZCWExvYWRlci5wcm90b3R5cGUgPSB7XG5cblx0XHRjb25zdHJ1Y3RvcjogRkJYTG9hZGVyLFxuXG5cdFx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdFx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHR2YXIgcGF0aCA9ICggc2VsZi5wYXRoID09PSB1bmRlZmluZWQgKSA/IExvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCB1cmwgKSA6IHNlbGYucGF0aDtcblxuXHRcdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRcdGxvYWRlci5zZXRQYXRoKCBzZWxmLnBhdGggKTtcblx0XHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdG9uTG9hZCggc2VsZi5wYXJzZSggYnVmZmVyLCBwYXRoICkgKTtcblxuXHRcdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGVycm9yICk7XG5cblx0XHRcdFx0XHRcdHNlbGYubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHRcdFx0fSwgMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0fSxcblxuXHRcdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdFx0c2V0UmVzb3VyY2VQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLnJlc291cmNlUGF0aCA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdFx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHRcdHBhcnNlOiBmdW5jdGlvbiAoIEZCWEJ1ZmZlciwgcGF0aCApIHtcblxuXHRcdFx0aWYgKCBpc0ZieEZvcm1hdEJpbmFyeSggRkJYQnVmZmVyICkgKSB7XG5cblx0XHRcdFx0ZmJ4VHJlZSA9IG5ldyBCaW5hcnlQYXJzZXIoKS5wYXJzZSggRkJYQnVmZmVyICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIEZCWFRleHQgPSBjb252ZXJ0QXJyYXlCdWZmZXJUb1N0cmluZyggRkJYQnVmZmVyICk7XG5cblx0XHRcdFx0aWYgKCAhIGlzRmJ4Rm9ybWF0QVNDSUkoIEZCWFRleHQgKSApIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkZCWExvYWRlcjogVW5rbm93biBmb3JtYXQuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGdldEZieFZlcnNpb24oIEZCWFRleHQgKSA8IDcwMDAgKSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5GQlhMb2FkZXI6IEZCWCB2ZXJzaW9uIG5vdCBzdXBwb3J0ZWQsIEZpbGVWZXJzaW9uOiAnICsgZ2V0RmJ4VmVyc2lvbiggRkJYVGV4dCApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZieFRyZWUgPSBuZXcgVGV4dFBhcnNlcigpLnBhcnNlKCBGQlhUZXh0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY29uc29sZS5sb2coIGZieFRyZWUgKTtcblxuXHRcdFx0dmFyIHRleHR1cmVMb2FkZXIgPSBuZXcgVGV4dHVyZUxvYWRlciggdGhpcy5tYW5hZ2VyICkuc2V0UGF0aCggdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aCApLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0XHRcdHJldHVybiBuZXcgRkJYVHJlZVBhcnNlciggdGV4dHVyZUxvYWRlciApLnBhcnNlKCBmYnhUcmVlICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLyBQYXJzZSB0aGUgRkJYVHJlZSBvYmplY3QgcmV0dXJuZWQgYnkgdGhlIEJpbmFyeVBhcnNlciBvciBUZXh0UGFyc2VyIGFuZCByZXR1cm4gYSBHcm91cFxuXHRmdW5jdGlvbiBGQlhUcmVlUGFyc2VyKCB0ZXh0dXJlTG9hZGVyICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlTG9hZGVyID0gdGV4dHVyZUxvYWRlcjtcblxuXHR9XG5cblx0RkJYVHJlZVBhcnNlci5wcm90b3R5cGUgPSB7XG5cblx0XHRjb25zdHJ1Y3RvcjogRkJYVHJlZVBhcnNlcixcblxuXHRcdHBhcnNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbm5lY3Rpb25zID0gdGhpcy5wYXJzZUNvbm5lY3Rpb25zKCk7XG5cblx0XHRcdHZhciBpbWFnZXMgPSB0aGlzLnBhcnNlSW1hZ2VzKCk7XG5cdFx0XHR2YXIgdGV4dHVyZXMgPSB0aGlzLnBhcnNlVGV4dHVyZXMoIGltYWdlcyApO1xuXHRcdFx0dmFyIG1hdGVyaWFscyA9IHRoaXMucGFyc2VNYXRlcmlhbHMoIHRleHR1cmVzICk7XG5cdFx0XHR2YXIgZGVmb3JtZXJzID0gdGhpcy5wYXJzZURlZm9ybWVycygpO1xuXHRcdFx0dmFyIGdlb21ldHJ5TWFwID0gbmV3IEdlb21ldHJ5UGFyc2VyKCkucGFyc2UoIGRlZm9ybWVycyApO1xuXG5cdFx0XHR0aGlzLnBhcnNlU2NlbmUoIGRlZm9ybWVycywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFscyApO1xuXG5cdFx0XHRyZXR1cm4gc2NlbmVHcmFwaDtcblxuXHRcdH0sXG5cblx0XHQvLyBQYXJzZXMgRkJYVHJlZS5Db25uZWN0aW9ucyB3aGljaCBob2xkcyBwYXJlbnQtY2hpbGQgY29ubmVjdGlvbnMgYmV0d2VlbiBvYmplY3RzIChlLmcuIG1hdGVyaWFsIC0+IHRleHR1cmUsIG1vZGVsLT5nZW9tZXRyeSApXG5cdFx0Ly8gYW5kIGRldGFpbHMgdGhlIGNvbm5lY3Rpb24gdHlwZVxuXHRcdHBhcnNlQ29ubmVjdGlvbnM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIGNvbm5lY3Rpb25NYXAgPSBuZXcgTWFwKCk7XG5cblx0XHRcdGlmICggJ0Nvbm5lY3Rpb25zJyBpbiBmYnhUcmVlICkge1xuXG5cdFx0XHRcdHZhciByYXdDb25uZWN0aW9ucyA9IGZieFRyZWUuQ29ubmVjdGlvbnMuY29ubmVjdGlvbnM7XG5cblx0XHRcdFx0cmF3Q29ubmVjdGlvbnMuZm9yRWFjaCggZnVuY3Rpb24gKCByYXdDb25uZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0dmFyIGZyb21JRCA9IHJhd0Nvbm5lY3Rpb25bIDAgXTtcblx0XHRcdFx0XHR2YXIgdG9JRCA9IHJhd0Nvbm5lY3Rpb25bIDEgXTtcblx0XHRcdFx0XHR2YXIgcmVsYXRpb25zaGlwID0gcmF3Q29ubmVjdGlvblsgMiBdO1xuXG5cdFx0XHRcdFx0aWYgKCAhIGNvbm5lY3Rpb25NYXAuaGFzKCBmcm9tSUQgKSApIHtcblxuXHRcdFx0XHRcdFx0Y29ubmVjdGlvbk1hcC5zZXQoIGZyb21JRCwge1xuXHRcdFx0XHRcdFx0XHRwYXJlbnRzOiBbXSxcblx0XHRcdFx0XHRcdFx0Y2hpbGRyZW46IFtdXG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgcGFyZW50UmVsYXRpb25zaGlwID0geyBJRDogdG9JRCwgcmVsYXRpb25zaGlwOiByZWxhdGlvbnNoaXAgfTtcblx0XHRcdFx0XHRjb25uZWN0aW9uTWFwLmdldCggZnJvbUlEICkucGFyZW50cy5wdXNoKCBwYXJlbnRSZWxhdGlvbnNoaXAgKTtcblxuXHRcdFx0XHRcdGlmICggISBjb25uZWN0aW9uTWFwLmhhcyggdG9JRCApICkge1xuXG5cdFx0XHRcdFx0XHRjb25uZWN0aW9uTWFwLnNldCggdG9JRCwge1xuXHRcdFx0XHRcdFx0XHRwYXJlbnRzOiBbXSxcblx0XHRcdFx0XHRcdFx0Y2hpbGRyZW46IFtdXG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgY2hpbGRSZWxhdGlvbnNoaXAgPSB7IElEOiBmcm9tSUQsIHJlbGF0aW9uc2hpcDogcmVsYXRpb25zaGlwIH07XG5cdFx0XHRcdFx0Y29ubmVjdGlvbk1hcC5nZXQoIHRvSUQgKS5jaGlsZHJlbi5wdXNoKCBjaGlsZFJlbGF0aW9uc2hpcCApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY29ubmVjdGlvbk1hcDtcblxuXHRcdH0sXG5cblx0XHQvLyBQYXJzZSBGQlhUcmVlLk9iamVjdHMuVmlkZW8gZm9yIGVtYmVkZGVkIGltYWdlIGRhdGFcblx0XHQvLyBUaGVzZSBpbWFnZXMgYXJlIGNvbm5lY3RlZCB0byB0ZXh0dXJlcyBpbiBGQlhUcmVlLk9iamVjdHMuVGV4dHVyZXNcblx0XHQvLyB2aWEgRkJYVHJlZS5Db25uZWN0aW9ucy5cblx0XHRwYXJzZUltYWdlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgaW1hZ2VzID0ge307XG5cdFx0XHR2YXIgYmxvYnMgPSB7fTtcblxuXHRcdFx0aWYgKCAnVmlkZW8nIGluIGZieFRyZWUuT2JqZWN0cyApIHtcblxuXHRcdFx0XHR2YXIgdmlkZW9Ob2RlcyA9IGZieFRyZWUuT2JqZWN0cy5WaWRlbztcblxuXHRcdFx0XHRmb3IgKCB2YXIgbm9kZUlEIGluIHZpZGVvTm9kZXMgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmlkZW9Ob2RlID0gdmlkZW9Ob2Rlc1sgbm9kZUlEIF07XG5cblx0XHRcdFx0XHR2YXIgaWQgPSBwYXJzZUludCggbm9kZUlEICk7XG5cblx0XHRcdFx0XHRpbWFnZXNbIGlkIF0gPSB2aWRlb05vZGUuUmVsYXRpdmVGaWxlbmFtZSB8fCB2aWRlb05vZGUuRmlsZW5hbWU7XG5cblx0XHRcdFx0XHQvLyByYXcgaW1hZ2UgZGF0YSBpcyBpbiB2aWRlb05vZGUuQ29udGVudFxuXHRcdFx0XHRcdGlmICggJ0NvbnRlbnQnIGluIHZpZGVvTm9kZSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGFycmF5QnVmZmVyQ29udGVudCA9ICggdmlkZW9Ob2RlLkNvbnRlbnQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciApICYmICggdmlkZW9Ob2RlLkNvbnRlbnQuYnl0ZUxlbmd0aCA+IDAgKTtcblx0XHRcdFx0XHRcdHZhciBiYXNlNjRDb250ZW50ID0gKCB0eXBlb2YgdmlkZW9Ob2RlLkNvbnRlbnQgPT09ICdzdHJpbmcnICkgJiYgKCB2aWRlb05vZGUuQ29udGVudCAhPT0gJycgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBhcnJheUJ1ZmZlckNvbnRlbnQgfHwgYmFzZTY0Q29udGVudCApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgaW1hZ2UgPSB0aGlzLnBhcnNlSW1hZ2UoIHZpZGVvTm9kZXNbIG5vZGVJRCBdICk7XG5cblx0XHRcdFx0XHRcdFx0YmxvYnNbIHZpZGVvTm9kZS5SZWxhdGl2ZUZpbGVuYW1lIHx8IHZpZGVvTm9kZS5GaWxlbmFtZSBdID0gaW1hZ2U7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggdmFyIGlkIGluIGltYWdlcyApIHtcblxuXHRcdFx0XHR2YXIgZmlsZW5hbWUgPSBpbWFnZXNbIGlkIF07XG5cblx0XHRcdFx0aWYgKCBibG9ic1sgZmlsZW5hbWUgXSAhPT0gdW5kZWZpbmVkICkgaW1hZ2VzWyBpZCBdID0gYmxvYnNbIGZpbGVuYW1lIF07XG5cdFx0XHRcdGVsc2UgaW1hZ2VzWyBpZCBdID0gaW1hZ2VzWyBpZCBdLnNwbGl0KCAnXFxcXCcgKS5wb3AoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaW1hZ2VzO1xuXG5cdFx0fSxcblxuXHRcdC8vIFBhcnNlIGVtYmVkZGVkIGltYWdlIGRhdGEgaW4gRkJYVHJlZS5WaWRlby5Db250ZW50XG5cdFx0cGFyc2VJbWFnZTogZnVuY3Rpb24gKCB2aWRlb05vZGUgKSB7XG5cblx0XHRcdHZhciBjb250ZW50ID0gdmlkZW9Ob2RlLkNvbnRlbnQ7XG5cdFx0XHR2YXIgZmlsZU5hbWUgPSB2aWRlb05vZGUuUmVsYXRpdmVGaWxlbmFtZSB8fCB2aWRlb05vZGUuRmlsZW5hbWU7XG5cdFx0XHR2YXIgZXh0ZW5zaW9uID0gZmlsZU5hbWUuc2xpY2UoIGZpbGVOYW1lLmxhc3RJbmRleE9mKCAnLicgKSArIDEgKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHR2YXIgdHlwZTtcblxuXHRcdFx0c3dpdGNoICggZXh0ZW5zaW9uICkge1xuXG5cdFx0XHRcdGNhc2UgJ2JtcCc6XG5cblx0XHRcdFx0XHR0eXBlID0gJ2ltYWdlL2JtcCc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnanBnJzpcblx0XHRcdFx0Y2FzZSAnanBlZyc6XG5cblx0XHRcdFx0XHR0eXBlID0gJ2ltYWdlL2pwZWcnO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3BuZyc6XG5cblx0XHRcdFx0XHR0eXBlID0gJ2ltYWdlL3BuZyc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAndGlmJzpcblxuXHRcdFx0XHRcdHR5cGUgPSAnaW1hZ2UvdGlmZic7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAndGdhJzpcblxuXHRcdFx0XHRcdGlmICggTG9hZGVyLkhhbmRsZXJzLmdldCggJy50Z2EnICkgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ0ZCWExvYWRlcjogVEdBIGxvYWRlciBub3QgZm91bmQsIHNraXBwaW5nICcsIGZpbGVOYW1lICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0eXBlID0gJ2ltYWdlL3RnYSc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ0ZCWExvYWRlcjogSW1hZ2UgdHlwZSBcIicgKyBleHRlbnNpb24gKyAnXCIgaXMgbm90IHN1cHBvcnRlZC4nICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnICkgeyAvLyBBU0NJSSBmb3JtYXRcblxuXHRcdFx0XHRyZXR1cm4gJ2RhdGE6JyArIHR5cGUgKyAnO2Jhc2U2NCwnICsgY29udGVudDtcblxuXHRcdFx0fSBlbHNlIHsgLy8gQmluYXJ5IEZvcm1hdFxuXG5cdFx0XHRcdHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KCBjb250ZW50ICk7XG5cdFx0XHRcdHJldHVybiB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCggbmV3IEJsb2IoIFsgYXJyYXkgXSwgeyB0eXBlOiB0eXBlIH0gKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0Ly8gUGFyc2Ugbm9kZXMgaW4gRkJYVHJlZS5PYmplY3RzLlRleHR1cmVcblx0XHQvLyBUaGVzZSBjb250YWluIGRldGFpbHMgc3VjaCBhcyBVViBzY2FsaW5nLCBjcm9wcGluZywgcm90YXRpb24gZXRjIGFuZCBhcmUgY29ubmVjdGVkXG5cdFx0Ly8gdG8gaW1hZ2VzIGluIEZCWFRyZWUuT2JqZWN0cy5WaWRlb1xuXHRcdHBhcnNlVGV4dHVyZXM6IGZ1bmN0aW9uICggaW1hZ2VzICkge1xuXG5cdFx0XHR2YXIgdGV4dHVyZU1hcCA9IG5ldyBNYXAoKTtcblxuXHRcdFx0aWYgKCAnVGV4dHVyZScgaW4gZmJ4VHJlZS5PYmplY3RzICkge1xuXG5cdFx0XHRcdHZhciB0ZXh0dXJlTm9kZXMgPSBmYnhUcmVlLk9iamVjdHMuVGV4dHVyZTtcblx0XHRcdFx0Zm9yICggdmFyIG5vZGVJRCBpbiB0ZXh0dXJlTm9kZXMgKSB7XG5cblx0XHRcdFx0XHR2YXIgdGV4dHVyZSA9IHRoaXMucGFyc2VUZXh0dXJlKCB0ZXh0dXJlTm9kZXNbIG5vZGVJRCBdLCBpbWFnZXMgKTtcblx0XHRcdFx0XHR0ZXh0dXJlTWFwLnNldCggcGFyc2VJbnQoIG5vZGVJRCApLCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlTWFwO1xuXG5cdFx0fSxcblxuXHRcdC8vIFBhcnNlIGluZGl2aWR1YWwgbm9kZSBpbiBGQlhUcmVlLk9iamVjdHMuVGV4dHVyZVxuXHRcdHBhcnNlVGV4dHVyZTogZnVuY3Rpb24gKCB0ZXh0dXJlTm9kZSwgaW1hZ2VzICkge1xuXG5cdFx0XHR2YXIgdGV4dHVyZSA9IHRoaXMubG9hZFRleHR1cmUoIHRleHR1cmVOb2RlLCBpbWFnZXMgKTtcblxuXHRcdFx0dGV4dHVyZS5JRCA9IHRleHR1cmVOb2RlLmlkO1xuXG5cdFx0XHR0ZXh0dXJlLm5hbWUgPSB0ZXh0dXJlTm9kZS5hdHRyTmFtZTtcblxuXHRcdFx0dmFyIHdyYXBNb2RlVSA9IHRleHR1cmVOb2RlLldyYXBNb2RlVTtcblx0XHRcdHZhciB3cmFwTW9kZVYgPSB0ZXh0dXJlTm9kZS5XcmFwTW9kZVY7XG5cblx0XHRcdHZhciB2YWx1ZVUgPSB3cmFwTW9kZVUgIT09IHVuZGVmaW5lZCA/IHdyYXBNb2RlVS52YWx1ZSA6IDA7XG5cdFx0XHR2YXIgdmFsdWVWID0gd3JhcE1vZGVWICE9PSB1bmRlZmluZWQgPyB3cmFwTW9kZVYudmFsdWUgOiAwO1xuXG5cdFx0XHQvLyBodHRwOi8vZG93bmxvYWQuYXV0b2Rlc2suY29tL3VzL2ZieC9TREtkb2NzL0ZCWF9TREtfSGVscC9maWxlcy9mYnhzZGtyZWYvY2xhc3Nfa19mYnhfdGV4dHVyZS5odG1sIzg4OTY0MGU2M2UyZTY4MTI1OWVhODEwNjFiODUxNDNhXG5cdFx0XHQvLyAwOiByZXBlYXQoZGVmYXVsdCksIDE6IGNsYW1wXG5cblx0XHRcdHRleHR1cmUud3JhcFMgPSB2YWx1ZVUgPT09IDAgPyBSZXBlYXRXcmFwcGluZyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cdFx0XHR0ZXh0dXJlLndyYXBUID0gdmFsdWVWID09PSAwID8gUmVwZWF0V3JhcHBpbmcgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0XHRpZiAoICdTY2FsaW5nJyBpbiB0ZXh0dXJlTm9kZSApIHtcblxuXHRcdFx0XHR2YXIgdmFsdWVzID0gdGV4dHVyZU5vZGUuU2NhbGluZy52YWx1ZTtcblxuXHRcdFx0XHR0ZXh0dXJlLnJlcGVhdC54ID0gdmFsdWVzWyAwIF07XG5cdFx0XHRcdHRleHR1cmUucmVwZWF0LnkgPSB2YWx1ZXNbIDEgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHRcdH0sXG5cblx0XHQvLyBsb2FkIGEgdGV4dHVyZSBzcGVjaWZpZWQgYXMgYSBibG9iIG9yIGRhdGEgVVJJLCBvciB2aWEgYW4gZXh0ZXJuYWwgVVJMIHVzaW5nIFRleHR1cmVMb2FkZXJcblx0XHRsb2FkVGV4dHVyZTogZnVuY3Rpb24gKCB0ZXh0dXJlTm9kZSwgaW1hZ2VzICkge1xuXG5cdFx0XHR2YXIgZmlsZU5hbWU7XG5cblx0XHRcdHZhciBjdXJyZW50UGF0aCA9IHRoaXMudGV4dHVyZUxvYWRlci5wYXRoO1xuXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSBjb25uZWN0aW9ucy5nZXQoIHRleHR1cmVOb2RlLmlkICkuY2hpbGRyZW47XG5cblx0XHRcdGlmICggY2hpbGRyZW4gIT09IHVuZGVmaW5lZCAmJiBjaGlsZHJlbi5sZW5ndGggPiAwICYmIGltYWdlc1sgY2hpbGRyZW5bIDAgXS5JRCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZmlsZU5hbWUgPSBpbWFnZXNbIGNoaWxkcmVuWyAwIF0uSUQgXTtcblxuXHRcdFx0XHRpZiAoIGZpbGVOYW1lLmluZGV4T2YoICdibG9iOicgKSA9PT0gMCB8fCBmaWxlTmFtZS5pbmRleE9mKCAnZGF0YTonICkgPT09IDAgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnRleHR1cmVMb2FkZXIuc2V0UGF0aCggdW5kZWZpbmVkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB0ZXh0dXJlO1xuXG5cdFx0XHR2YXIgZXh0ZW5zaW9uID0gdGV4dHVyZU5vZGUuRmlsZU5hbWUuc2xpY2UoIC0gMyApLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSAndGdhJyApIHtcblxuXHRcdFx0XHR2YXIgbG9hZGVyID0gTG9hZGVyLkhhbmRsZXJzLmdldCggJy50Z2EnICk7XG5cblx0XHRcdFx0aWYgKCBsb2FkZXIgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdGQlhMb2FkZXI6IFRHQSBsb2FkZXIgbm90IGZvdW5kLCBjcmVhdGluZyBwbGFjZWhvbGRlciB0ZXh0dXJlIGZvcicsIHRleHR1cmVOb2RlLlJlbGF0aXZlRmlsZW5hbWUgKTtcblx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IGxvYWRlci5sb2FkKCBmaWxlTmFtZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggZXh0ZW5zaW9uID09PSAncHNkJyApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdGQlhMb2FkZXI6IFBTRCB0ZXh0dXJlcyBhcmUgbm90IHN1cHBvcnRlZCwgY3JlYXRpbmcgcGxhY2Vob2xkZXIgdGV4dHVyZSBmb3InLCB0ZXh0dXJlTm9kZS5SZWxhdGl2ZUZpbGVuYW1lICk7XG5cdFx0XHRcdHRleHR1cmUgPSBuZXcgVGV4dHVyZSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRleHR1cmUgPSB0aGlzLnRleHR1cmVMb2FkZXIubG9hZCggZmlsZU5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRleHR1cmVMb2FkZXIuc2V0UGF0aCggY3VycmVudFBhdGggKTtcblxuXHRcdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0XHR9LFxuXG5cdFx0Ly8gUGFyc2Ugbm9kZXMgaW4gRkJYVHJlZS5PYmplY3RzLk1hdGVyaWFsXG5cdFx0cGFyc2VNYXRlcmlhbHM6IGZ1bmN0aW9uICggdGV4dHVyZU1hcCApIHtcblxuXHRcdFx0dmFyIG1hdGVyaWFsTWFwID0gbmV3IE1hcCgpO1xuXG5cdFx0XHRpZiAoICdNYXRlcmlhbCcgaW4gZmJ4VHJlZS5PYmplY3RzICkge1xuXG5cdFx0XHRcdHZhciBtYXRlcmlhbE5vZGVzID0gZmJ4VHJlZS5PYmplY3RzLk1hdGVyaWFsO1xuXG5cdFx0XHRcdGZvciAoIHZhciBub2RlSUQgaW4gbWF0ZXJpYWxOb2RlcyApIHtcblxuXHRcdFx0XHRcdHZhciBtYXRlcmlhbCA9IHRoaXMucGFyc2VNYXRlcmlhbCggbWF0ZXJpYWxOb2Rlc1sgbm9kZUlEIF0sIHRleHR1cmVNYXAgKTtcblxuXHRcdFx0XHRcdGlmICggbWF0ZXJpYWwgIT09IG51bGwgKSBtYXRlcmlhbE1hcC5zZXQoIHBhcnNlSW50KCBub2RlSUQgKSwgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGVyaWFsTWFwO1xuXG5cdFx0fSxcblxuXHRcdC8vIFBhcnNlIHNpbmdsZSBub2RlIGluIEZCWFRyZWUuT2JqZWN0cy5NYXRlcmlhbFxuXHRcdC8vIE1hdGVyaWFscyBhcmUgY29ubmVjdGVkIHRvIHRleHR1cmUgbWFwcyBpbiBGQlhUcmVlLk9iamVjdHMuVGV4dHVyZXNcblx0XHQvLyBGQlggZm9ybWF0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIExhbWJlcnQgYW5kIFBob25nIHNoYWRpbmcgbW9kZWxzXG5cdFx0cGFyc2VNYXRlcmlhbDogZnVuY3Rpb24gKCBtYXRlcmlhbE5vZGUsIHRleHR1cmVNYXAgKSB7XG5cblx0XHRcdHZhciBJRCA9IG1hdGVyaWFsTm9kZS5pZDtcblx0XHRcdHZhciBuYW1lID0gbWF0ZXJpYWxOb2RlLmF0dHJOYW1lO1xuXHRcdFx0dmFyIHR5cGUgPSBtYXRlcmlhbE5vZGUuU2hhZGluZ01vZGVsO1xuXG5cdFx0XHQvLyBDYXNlIHdoZXJlIEZCWCB3cmFwcyBzaGFkaW5nIG1vZGVsIGluIHByb3BlcnR5IG9iamVjdC5cblx0XHRcdGlmICggdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICkge1xuXG5cdFx0XHRcdHR5cGUgPSB0eXBlLnZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIElnbm9yZSB1bnVzZWQgbWF0ZXJpYWxzIHdoaWNoIGRvbid0IGhhdmUgYW55IGNvbm5lY3Rpb25zLlxuXHRcdFx0aWYgKCAhIGNvbm5lY3Rpb25zLmhhcyggSUQgKSApIHJldHVybiBudWxsO1xuXG5cdFx0XHR2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyc2VQYXJhbWV0ZXJzKCBtYXRlcmlhbE5vZGUsIHRleHR1cmVNYXAsIElEICk7XG5cblx0XHRcdHZhciBtYXRlcmlhbDtcblxuXHRcdFx0c3dpdGNoICggdHlwZS50b0xvd2VyQ2FzZSgpICkge1xuXG5cdFx0XHRcdGNhc2UgJ3Bob25nJzpcblx0XHRcdFx0XHRtYXRlcmlhbCA9IG5ldyBNZXNoUGhvbmdNYXRlcmlhbCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdsYW1iZXJ0Jzpcblx0XHRcdFx0XHRtYXRlcmlhbCA9IG5ldyBNZXNoTGFtYmVydE1hdGVyaWFsKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiB1bmtub3duIG1hdGVyaWFsIHR5cGUgXCIlc1wiLiBEZWZhdWx0aW5nIHRvIE1lc2hQaG9uZ01hdGVyaWFsLicsIHR5cGUgKTtcblx0XHRcdFx0XHRtYXRlcmlhbCA9IG5ldyBNZXNoUGhvbmdNYXRlcmlhbCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFsLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXHRcdFx0bWF0ZXJpYWwubmFtZSA9IG5hbWU7XG5cblx0XHRcdHJldHVybiBtYXRlcmlhbDtcblxuXHRcdH0sXG5cblx0XHQvLyBQYXJzZSBGQlggbWF0ZXJpYWwgYW5kIHJldHVybiBwYXJhbWV0ZXJzIHN1aXRhYmxlIGZvciBhIHRocmVlLmpzIG1hdGVyaWFsXG5cdFx0Ly8gQWxzbyBwYXJzZSB0aGUgdGV4dHVyZSBtYXAgYW5kIHJldHVybiBhbnkgdGV4dHVyZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBtYXRlcmlhbFxuXHRcdHBhcnNlUGFyYW1ldGVyczogZnVuY3Rpb24gKCBtYXRlcmlhbE5vZGUsIHRleHR1cmVNYXAsIElEICkge1xuXG5cdFx0XHR2YXIgcGFyYW1ldGVycyA9IHt9O1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsTm9kZS5CdW1wRmFjdG9yICkge1xuXG5cdFx0XHRcdHBhcmFtZXRlcnMuYnVtcFNjYWxlID0gbWF0ZXJpYWxOb2RlLkJ1bXBGYWN0b3IudmFsdWU7XG5cblx0XHRcdH1cblx0XHRcdGlmICggbWF0ZXJpYWxOb2RlLkRpZmZ1c2UgKSB7XG5cblx0XHRcdFx0cGFyYW1ldGVycy5jb2xvciA9IG5ldyBDb2xvcigpLmZyb21BcnJheSggbWF0ZXJpYWxOb2RlLkRpZmZ1c2UudmFsdWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxOb2RlLkRpZmZ1c2VDb2xvciAmJiBtYXRlcmlhbE5vZGUuRGlmZnVzZUNvbG9yLnR5cGUgPT09ICdDb2xvcicgKSB7XG5cblx0XHRcdFx0Ly8gVGhlIGJsZW5kZXIgZXhwb3J0ZXIgZXhwb3J0cyBkaWZmdXNlIGhlcmUgaW5zdGVhZCBvZiBpbiBtYXRlcmlhbE5vZGUuRGlmZnVzZVxuXHRcdFx0XHRwYXJhbWV0ZXJzLmNvbG9yID0gbmV3IENvbG9yKCkuZnJvbUFycmF5KCBtYXRlcmlhbE5vZGUuRGlmZnVzZUNvbG9yLnZhbHVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbE5vZGUuRGlzcGxhY2VtZW50RmFjdG9yICkge1xuXG5cdFx0XHRcdHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50U2NhbGUgPSBtYXRlcmlhbE5vZGUuRGlzcGxhY2VtZW50RmFjdG9yLnZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxOb2RlLkVtaXNzaXZlICkge1xuXG5cdFx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoKS5mcm9tQXJyYXkoIG1hdGVyaWFsTm9kZS5FbWlzc2l2ZS52YWx1ZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbE5vZGUuRW1pc3NpdmVDb2xvciAmJiBtYXRlcmlhbE5vZGUuRW1pc3NpdmVDb2xvci50eXBlID09PSAnQ29sb3InICkge1xuXG5cdFx0XHRcdC8vIFRoZSBibGVuZGVyIGV4cG9ydGVyIGV4cG9ydHMgZW1pc3NpdmUgY29sb3IgaGVyZSBpbnN0ZWFkIG9mIGluIG1hdGVyaWFsTm9kZS5FbWlzc2l2ZVxuXHRcdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlID0gbmV3IENvbG9yKCkuZnJvbUFycmF5KCBtYXRlcmlhbE5vZGUuRW1pc3NpdmVDb2xvci52YWx1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxOb2RlLkVtaXNzaXZlRmFjdG9yICkge1xuXG5cdFx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVJbnRlbnNpdHkgPSBwYXJzZUZsb2F0KCBtYXRlcmlhbE5vZGUuRW1pc3NpdmVGYWN0b3IudmFsdWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsTm9kZS5PcGFjaXR5ICkge1xuXG5cdFx0XHRcdHBhcmFtZXRlcnMub3BhY2l0eSA9IHBhcnNlRmxvYXQoIG1hdGVyaWFsTm9kZS5PcGFjaXR5LnZhbHVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzLm9wYWNpdHkgPCAxLjAgKSB7XG5cblx0XHRcdFx0cGFyYW1ldGVycy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbE5vZGUuUmVmbGVjdGlvbkZhY3RvciApIHtcblxuXHRcdFx0XHRwYXJhbWV0ZXJzLnJlZmxlY3Rpdml0eSA9IG1hdGVyaWFsTm9kZS5SZWZsZWN0aW9uRmFjdG9yLnZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxOb2RlLlNoaW5pbmVzcyApIHtcblxuXHRcdFx0XHRwYXJhbWV0ZXJzLnNoaW5pbmVzcyA9IG1hdGVyaWFsTm9kZS5TaGluaW5lc3MudmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbE5vZGUuU3BlY3VsYXIgKSB7XG5cblx0XHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhciA9IG5ldyBDb2xvcigpLmZyb21BcnJheSggbWF0ZXJpYWxOb2RlLlNwZWN1bGFyLnZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsTm9kZS5TcGVjdWxhckNvbG9yICYmIG1hdGVyaWFsTm9kZS5TcGVjdWxhckNvbG9yLnR5cGUgPT09ICdDb2xvcicgKSB7XG5cblx0XHRcdFx0Ly8gVGhlIGJsZW5kZXIgZXhwb3J0ZXIgZXhwb3J0cyBzcGVjdWxhciBjb2xvciBoZXJlIGluc3RlYWQgb2YgaW4gbWF0ZXJpYWxOb2RlLlNwZWN1bGFyXG5cdFx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXIgPSBuZXcgQ29sb3IoKS5mcm9tQXJyYXkoIG1hdGVyaWFsTm9kZS5TcGVjdWxhckNvbG9yLnZhbHVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0Y29ubmVjdGlvbnMuZ2V0KCBJRCApLmNoaWxkcmVuLmZvckVhY2goIGZ1bmN0aW9uICggY2hpbGQgKSB7XG5cblx0XHRcdFx0dmFyIHR5cGUgPSBjaGlsZC5yZWxhdGlvbnNoaXA7XG5cblx0XHRcdFx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ0J1bXAnOlxuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5idW1wTWFwID0gc2VsZi5nZXRUZXh0dXJlKCB0ZXh0dXJlTWFwLCBjaGlsZC5JRCApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdNYXlhfFRFWF9hb19tYXAnOlxuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5hb01hcCA9IHNlbGYuZ2V0VGV4dHVyZSggdGV4dHVyZU1hcCwgY2hpbGQuSUQgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnRGlmZnVzZUNvbG9yJzpcblx0XHRcdFx0XHRjYXNlICdNYXlhfFRFWF9jb2xvcl9tYXAnOlxuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5tYXAgPSBzZWxmLmdldFRleHR1cmUoIHRleHR1cmVNYXAsIGNoaWxkLklEICk7XG5cdFx0XHRcdFx0XHRwYXJhbWV0ZXJzLm1hcC5lbmNvZGluZyA9IHNSR0JFbmNvZGluZztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnRGlzcGxhY2VtZW50Q29sb3InOlxuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgPSBzZWxmLmdldFRleHR1cmUoIHRleHR1cmVNYXAsIGNoaWxkLklEICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0VtaXNzaXZlQ29sb3InOlxuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5lbWlzc2l2ZU1hcCA9IHNlbGYuZ2V0VGV4dHVyZSggdGV4dHVyZU1hcCwgY2hpbGQuSUQgKTtcblx0XHRcdFx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAuZW5jb2RpbmcgPSBzUkdCRW5jb2Rpbmc7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ05vcm1hbE1hcCc6XG5cdFx0XHRcdFx0Y2FzZSAnTWF5YXxURVhfbm9ybWFsX21hcCc6XG5cdFx0XHRcdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA9IHNlbGYuZ2V0VGV4dHVyZSggdGV4dHVyZU1hcCwgY2hpbGQuSUQgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnUmVmbGVjdGlvbkNvbG9yJzpcblx0XHRcdFx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID0gc2VsZi5nZXRUZXh0dXJlKCB0ZXh0dXJlTWFwLCBjaGlsZC5JRCApO1xuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5lbnZNYXAubWFwcGluZyA9IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nO1xuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5lbnZNYXAuZW5jb2RpbmcgPSBzUkdCRW5jb2Rpbmc7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1NwZWN1bGFyQ29sb3InOlxuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhck1hcCA9IHNlbGYuZ2V0VGV4dHVyZSggdGV4dHVyZU1hcCwgY2hpbGQuSUQgKTtcblx0XHRcdFx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAuZW5jb2RpbmcgPSBzUkdCRW5jb2Rpbmc7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1RyYW5zcGFyZW50Q29sb3InOlxuXHRcdFx0XHRcdFx0cGFyYW1ldGVycy5hbHBoYU1hcCA9IHNlbGYuZ2V0VGV4dHVyZSggdGV4dHVyZU1hcCwgY2hpbGQuSUQgKTtcblx0XHRcdFx0XHRcdHBhcmFtZXRlcnMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdBbWJpZW50Q29sb3InOlxuXHRcdFx0XHRcdGNhc2UgJ1NoaW5pbmVzc0V4cG9uZW50JzogLy8gQUtBIGdsb3NzaW5lc3MgbWFwXG5cdFx0XHRcdFx0Y2FzZSAnU3BlY3VsYXJGYWN0b3InOiAvLyBBS0Egc3BlY3VsYXJMZXZlbFxuXHRcdFx0XHRcdGNhc2UgJ1ZlY3RvckRpc3BsYWNlbWVudENvbG9yJzogLy8gTk9URTogU2VlbXMgdG8gYmUgYSBjb3B5IG9mIERpc3BsYWNlbWVudENvbG9yXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogJXMgbWFwIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhyZWUuanMsIHNraXBwaW5nIHRleHR1cmUuJywgdHlwZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybiBwYXJhbWV0ZXJzO1xuXG5cdFx0fSxcblxuXHRcdC8vIGdldCBhIHRleHR1cmUgZnJvbSB0aGUgdGV4dHVyZU1hcCBmb3IgdXNlIGJ5IGEgbWF0ZXJpYWwuXG5cdFx0Z2V0VGV4dHVyZTogZnVuY3Rpb24gKCB0ZXh0dXJlTWFwLCBpZCApIHtcblxuXHRcdFx0Ly8gaWYgdGhlIHRleHR1cmUgaXMgYSBsYXllcmVkIHRleHR1cmUsIGp1c3QgdXNlIHRoZSBmaXJzdCBsYXllciBhbmQgaXNzdWUgYSB3YXJuaW5nXG5cdFx0XHRpZiAoICdMYXllcmVkVGV4dHVyZScgaW4gZmJ4VHJlZS5PYmplY3RzICYmIGlkIGluIGZieFRyZWUuT2JqZWN0cy5MYXllcmVkVGV4dHVyZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IGxheWVyZWQgdGV4dHVyZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhyZWUuanMuIERpc2NhcmRpbmcgYWxsIGJ1dCBmaXJzdCBsYXllci4nICk7XG5cdFx0XHRcdGlkID0gY29ubmVjdGlvbnMuZ2V0KCBpZCApLmNoaWxkcmVuWyAwIF0uSUQ7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRleHR1cmVNYXAuZ2V0KCBpZCApO1xuXG5cdFx0fSxcblxuXHRcdC8vIFBhcnNlIG5vZGVzIGluIEZCWFRyZWUuT2JqZWN0cy5EZWZvcm1lclxuXHRcdC8vIERlZm9ybWVyIG5vZGUgY2FuIGNvbnRhaW4gc2tpbm5pbmcgb3IgVmVydGV4IENhY2hlIGFuaW1hdGlvbiBkYXRhLCBob3dldmVyIG9ubHkgc2tpbm5pbmcgaXMgc3VwcG9ydGVkIGhlcmVcblx0XHQvLyBHZW5lcmF0ZXMgbWFwIG9mIFNrZWxldG9uLWxpa2Ugb2JqZWN0cyBmb3IgdXNlIGxhdGVyIHdoZW4gZ2VuZXJhdGluZyBhbmQgYmluZGluZyBza2VsZXRvbnMuXG5cdFx0cGFyc2VEZWZvcm1lcnM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIHNrZWxldG9ucyA9IHt9O1xuXHRcdFx0dmFyIG1vcnBoVGFyZ2V0cyA9IHt9O1xuXG5cdFx0XHRpZiAoICdEZWZvcm1lcicgaW4gZmJ4VHJlZS5PYmplY3RzICkge1xuXG5cdFx0XHRcdHZhciBEZWZvcm1lck5vZGVzID0gZmJ4VHJlZS5PYmplY3RzLkRlZm9ybWVyO1xuXG5cdFx0XHRcdGZvciAoIHZhciBub2RlSUQgaW4gRGVmb3JtZXJOb2RlcyApIHtcblxuXHRcdFx0XHRcdHZhciBkZWZvcm1lck5vZGUgPSBEZWZvcm1lck5vZGVzWyBub2RlSUQgXTtcblxuXHRcdFx0XHRcdHZhciByZWxhdGlvbnNoaXBzID0gY29ubmVjdGlvbnMuZ2V0KCBwYXJzZUludCggbm9kZUlEICkgKTtcblxuXHRcdFx0XHRcdGlmICggZGVmb3JtZXJOb2RlLmF0dHJUeXBlID09PSAnU2tpbicgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBza2VsZXRvbiA9IHRoaXMucGFyc2VTa2VsZXRvbiggcmVsYXRpb25zaGlwcywgRGVmb3JtZXJOb2RlcyApO1xuXHRcdFx0XHRcdFx0c2tlbGV0b24uSUQgPSBub2RlSUQ7XG5cblx0XHRcdFx0XHRcdGlmICggcmVsYXRpb25zaGlwcy5wYXJlbnRzLmxlbmd0aCA+IDEgKSBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IHNrZWxldG9uIGF0dGFjaGVkIHRvIG1vcmUgdGhhbiBvbmUgZ2VvbWV0cnkgaXMgbm90IHN1cHBvcnRlZC4nICk7XG5cdFx0XHRcdFx0XHRza2VsZXRvbi5nZW9tZXRyeUlEID0gcmVsYXRpb25zaGlwcy5wYXJlbnRzWyAwIF0uSUQ7XG5cblx0XHRcdFx0XHRcdHNrZWxldG9uc1sgbm9kZUlEIF0gPSBza2VsZXRvbjtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRlZm9ybWVyTm9kZS5hdHRyVHlwZSA9PT0gJ0JsZW5kU2hhcGUnICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSB7XG5cdFx0XHRcdFx0XHRcdGlkOiBub2RlSUQsXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRtb3JwaFRhcmdldC5yYXdUYXJnZXRzID0gdGhpcy5wYXJzZU1vcnBoVGFyZ2V0cyggcmVsYXRpb25zaGlwcywgRGVmb3JtZXJOb2RlcyApO1xuXHRcdFx0XHRcdFx0bW9ycGhUYXJnZXQuaWQgPSBub2RlSUQ7XG5cblx0XHRcdFx0XHRcdGlmICggcmVsYXRpb25zaGlwcy5wYXJlbnRzLmxlbmd0aCA+IDEgKSBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IG1vcnBoIHRhcmdldCBhdHRhY2hlZCB0byBtb3JlIHRoYW4gb25lIGdlb21ldHJ5IGlzIG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdFx0XHRcdFx0XHRtb3JwaFRhcmdldHNbIG5vZGVJRCBdID0gbW9ycGhUYXJnZXQ7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cblx0XHRcdFx0c2tlbGV0b25zOiBza2VsZXRvbnMsXG5cdFx0XHRcdG1vcnBoVGFyZ2V0czogbW9ycGhUYXJnZXRzLFxuXG5cdFx0XHR9O1xuXG5cdFx0fSxcblxuXHRcdC8vIFBhcnNlIHNpbmdsZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuRGVmb3JtZXJcblx0XHQvLyBUaGUgdG9wIGxldmVsIHNrZWxldG9uIG5vZGUgaGFzIHR5cGUgJ1NraW4nIGFuZCBzdWIgbm9kZXMgaGF2ZSB0eXBlICdDbHVzdGVyJ1xuXHRcdC8vIEVhY2ggc2tpbiBub2RlIHJlcHJlc2VudHMgYSBza2VsZXRvbiBhbmQgZWFjaCBjbHVzdGVyIG5vZGUgcmVwcmVzZW50cyBhIGJvbmVcblx0XHRwYXJzZVNrZWxldG9uOiBmdW5jdGlvbiAoIHJlbGF0aW9uc2hpcHMsIGRlZm9ybWVyTm9kZXMgKSB7XG5cblx0XHRcdHZhciByYXdCb25lcyA9IFtdO1xuXG5cdFx0XHRyZWxhdGlvbnNoaXBzLmNoaWxkcmVuLmZvckVhY2goIGZ1bmN0aW9uICggY2hpbGQgKSB7XG5cblx0XHRcdFx0dmFyIGJvbmVOb2RlID0gZGVmb3JtZXJOb2Rlc1sgY2hpbGQuSUQgXTtcblxuXHRcdFx0XHRpZiAoIGJvbmVOb2RlLmF0dHJUeXBlICE9PSAnQ2x1c3RlcicgKSByZXR1cm47XG5cblx0XHRcdFx0dmFyIHJhd0JvbmUgPSB7XG5cblx0XHRcdFx0XHRJRDogY2hpbGQuSUQsXG5cdFx0XHRcdFx0aW5kaWNlczogW10sXG5cdFx0XHRcdFx0d2VpZ2h0czogW10sXG5cdFx0XHRcdFx0dHJhbnNmb3JtTGluazogbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIGJvbmVOb2RlLlRyYW5zZm9ybUxpbmsuYSApLFxuXHRcdFx0XHRcdC8vIHRyYW5zZm9ybTogbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIGJvbmVOb2RlLlRyYW5zZm9ybS5hICksXG5cdFx0XHRcdFx0Ly8gbGlua01vZGU6IGJvbmVOb2RlLk1vZGUsXG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRpZiAoICdJbmRleGVzJyBpbiBib25lTm9kZSApIHtcblxuXHRcdFx0XHRcdHJhd0JvbmUuaW5kaWNlcyA9IGJvbmVOb2RlLkluZGV4ZXMuYTtcblx0XHRcdFx0XHRyYXdCb25lLndlaWdodHMgPSBib25lTm9kZS5XZWlnaHRzLmE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJhd0JvbmVzLnB1c2goIHJhd0JvbmUgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm4ge1xuXG5cdFx0XHRcdHJhd0JvbmVzOiByYXdCb25lcyxcblx0XHRcdFx0Ym9uZXM6IFtdXG5cblx0XHRcdH07XG5cblx0XHR9LFxuXG5cdFx0Ly8gVGhlIHRvcCBsZXZlbCBtb3JwaCBkZWZvcm1lciBub2RlIGhhcyB0eXBlIFwiQmxlbmRTaGFwZVwiIGFuZCBzdWIgbm9kZXMgaGF2ZSB0eXBlIFwiQmxlbmRTaGFwZUNoYW5uZWxcIlxuXHRcdHBhcnNlTW9ycGhUYXJnZXRzOiBmdW5jdGlvbiAoIHJlbGF0aW9uc2hpcHMsIGRlZm9ybWVyTm9kZXMgKSB7XG5cblx0XHRcdHZhciByYXdNb3JwaFRhcmdldHMgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgcmVsYXRpb25zaGlwcy5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGNoaWxkID0gcmVsYXRpb25zaGlwcy5jaGlsZHJlblsgaSBdO1xuXG5cdFx0XHRcdHZhciBtb3JwaFRhcmdldE5vZGUgPSBkZWZvcm1lck5vZGVzWyBjaGlsZC5JRCBdO1xuXG5cdFx0XHRcdHZhciByYXdNb3JwaFRhcmdldCA9IHtcblxuXHRcdFx0XHRcdG5hbWU6IG1vcnBoVGFyZ2V0Tm9kZS5hdHRyTmFtZSxcblx0XHRcdFx0XHRpbml0aWFsV2VpZ2h0OiBtb3JwaFRhcmdldE5vZGUuRGVmb3JtUGVyY2VudCxcblx0XHRcdFx0XHRpZDogbW9ycGhUYXJnZXROb2RlLmlkLFxuXHRcdFx0XHRcdGZ1bGxXZWlnaHRzOiBtb3JwaFRhcmdldE5vZGUuRnVsbFdlaWdodHMuYVxuXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldE5vZGUuYXR0clR5cGUgIT09ICdCbGVuZFNoYXBlQ2hhbm5lbCcgKSByZXR1cm47XG5cblx0XHRcdFx0cmF3TW9ycGhUYXJnZXQuZ2VvSUQgPSBjb25uZWN0aW9ucy5nZXQoIHBhcnNlSW50KCBjaGlsZC5JRCApICkuY2hpbGRyZW4uZmlsdGVyKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGNoaWxkLnJlbGF0aW9uc2hpcCA9PT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdH0gKVsgMCBdLklEO1xuXG5cdFx0XHRcdHJhd01vcnBoVGFyZ2V0cy5wdXNoKCByYXdNb3JwaFRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByYXdNb3JwaFRhcmdldHM7XG5cblx0XHR9LFxuXG5cdFx0Ly8gY3JlYXRlIHRoZSBtYWluIEdyb3VwKCkgdG8gYmUgcmV0dXJuZWQgYnkgdGhlIGxvYWRlclxuXHRcdHBhcnNlU2NlbmU6IGZ1bmN0aW9uICggZGVmb3JtZXJzLCBnZW9tZXRyeU1hcCwgbWF0ZXJpYWxNYXAgKSB7XG5cblx0XHRcdHNjZW5lR3JhcGggPSBuZXcgR3JvdXAoKTtcblxuXHRcdFx0dmFyIG1vZGVsTWFwID0gdGhpcy5wYXJzZU1vZGVscyggZGVmb3JtZXJzLnNrZWxldG9ucywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFsTWFwICk7XG5cblx0XHRcdHZhciBtb2RlbE5vZGVzID0gZmJ4VHJlZS5PYmplY3RzLk1vZGVsO1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRtb2RlbE1hcC5mb3JFYWNoKCBmdW5jdGlvbiAoIG1vZGVsICkge1xuXG5cdFx0XHRcdHZhciBtb2RlbE5vZGUgPSBtb2RlbE5vZGVzWyBtb2RlbC5JRCBdO1xuXHRcdFx0XHRzZWxmLnNldExvb2tBdFByb3BlcnRpZXMoIG1vZGVsLCBtb2RlbE5vZGUgKTtcblxuXHRcdFx0XHR2YXIgcGFyZW50Q29ubmVjdGlvbnMgPSBjb25uZWN0aW9ucy5nZXQoIG1vZGVsLklEICkucGFyZW50cztcblxuXHRcdFx0XHRwYXJlbnRDb25uZWN0aW9ucy5mb3JFYWNoKCBmdW5jdGlvbiAoIGNvbm5lY3Rpb24gKSB7XG5cblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gbW9kZWxNYXAuZ2V0KCBjb25uZWN0aW9uLklEICk7XG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgIT09IHVuZGVmaW5lZCApIHBhcmVudC5hZGQoIG1vZGVsICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdGlmICggbW9kZWwucGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0c2NlbmVHcmFwaC5hZGQoIG1vZGVsICk7XG5cblx0XHRcdFx0fVxuXG5cblx0XHRcdH0gKTtcblxuXHRcdFx0dGhpcy5iaW5kU2tlbGV0b24oIGRlZm9ybWVycy5za2VsZXRvbnMsIGdlb21ldHJ5TWFwLCBtb2RlbE1hcCApO1xuXG5cdFx0XHR0aGlzLmNyZWF0ZUFtYmllbnRMaWdodCgpO1xuXG5cdFx0XHR0aGlzLnNldHVwTW9ycGhNYXRlcmlhbHMoKTtcblxuXHRcdFx0c2NlbmVHcmFwaC50cmF2ZXJzZSggZnVuY3Rpb24gKCBub2RlICkge1xuXG5cdFx0XHRcdGlmICggbm9kZS51c2VyRGF0YS50cmFuc2Zvcm1EYXRhICkge1xuXG5cdFx0XHRcdFx0aWYgKCBub2RlLnBhcmVudCApIG5vZGUudXNlckRhdGEudHJhbnNmb3JtRGF0YS5wYXJlbnRNYXRyaXhXb3JsZCA9IG5vZGUucGFyZW50Lm1hdHJpeDtcblxuXHRcdFx0XHRcdHZhciB0cmFuc2Zvcm0gPSBnZW5lcmF0ZVRyYW5zZm9ybSggbm9kZS51c2VyRGF0YS50cmFuc2Zvcm1EYXRhICk7XG5cblx0XHRcdFx0XHRub2RlLmFwcGx5TWF0cml4KCB0cmFuc2Zvcm0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0dmFyIGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9uUGFyc2VyKCkucGFyc2UoKTtcblxuXHRcdFx0Ly8gaWYgYWxsIHRoZSBtb2RlbHMgd2hlcmUgYWxyZWFkeSBjb21iaW5lZCBpbiBhIHNpbmdsZSBncm91cCwganVzdCByZXR1cm4gdGhhdFxuXHRcdFx0aWYgKCBzY2VuZUdyYXBoLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBzY2VuZUdyYXBoLmNoaWxkcmVuWyAwIF0uaXNHcm91cCApIHtcblxuXHRcdFx0XHRzY2VuZUdyYXBoLmNoaWxkcmVuWyAwIF0uYW5pbWF0aW9ucyA9IGFuaW1hdGlvbnM7XG5cdFx0XHRcdHNjZW5lR3JhcGggPSBzY2VuZUdyYXBoLmNoaWxkcmVuWyAwIF07XG5cblx0XHRcdH1cblxuXHRcdFx0c2NlbmVHcmFwaC5hbmltYXRpb25zID0gYW5pbWF0aW9ucztcblxuXHRcdH0sXG5cblx0XHQvLyBwYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuTW9kZWxcblx0XHRwYXJzZU1vZGVsczogZnVuY3Rpb24gKCBza2VsZXRvbnMsIGdlb21ldHJ5TWFwLCBtYXRlcmlhbE1hcCApIHtcblxuXHRcdFx0dmFyIG1vZGVsTWFwID0gbmV3IE1hcCgpO1xuXHRcdFx0dmFyIG1vZGVsTm9kZXMgPSBmYnhUcmVlLk9iamVjdHMuTW9kZWw7XG5cblx0XHRcdGZvciAoIHZhciBub2RlSUQgaW4gbW9kZWxOb2RlcyApIHtcblxuXHRcdFx0XHR2YXIgaWQgPSBwYXJzZUludCggbm9kZUlEICk7XG5cdFx0XHRcdHZhciBub2RlID0gbW9kZWxOb2Rlc1sgbm9kZUlEIF07XG5cdFx0XHRcdHZhciByZWxhdGlvbnNoaXBzID0gY29ubmVjdGlvbnMuZ2V0KCBpZCApO1xuXG5cdFx0XHRcdHZhciBtb2RlbCA9IHRoaXMuYnVpbGRTa2VsZXRvbiggcmVsYXRpb25zaGlwcywgc2tlbGV0b25zLCBpZCwgbm9kZS5hdHRyTmFtZSApO1xuXG5cdFx0XHRcdGlmICggISBtb2RlbCApIHtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIG5vZGUuYXR0clR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgJ0NhbWVyYSc6XG5cdFx0XHRcdFx0XHRcdG1vZGVsID0gdGhpcy5jcmVhdGVDYW1lcmEoIHJlbGF0aW9uc2hpcHMgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdMaWdodCc6XG5cdFx0XHRcdFx0XHRcdG1vZGVsID0gdGhpcy5jcmVhdGVMaWdodCggcmVsYXRpb25zaGlwcyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ01lc2gnOlxuXHRcdFx0XHRcdFx0XHRtb2RlbCA9IHRoaXMuY3JlYXRlTWVzaCggcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFsTWFwICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTnVyYnNDdXJ2ZSc6XG5cdFx0XHRcdFx0XHRcdG1vZGVsID0gdGhpcy5jcmVhdGVDdXJ2ZSggcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlNYXAgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdMaW1iTm9kZSc6XG5cdFx0XHRcdFx0XHRjYXNlICdSb290Jzpcblx0XHRcdFx0XHRcdFx0bW9kZWwgPSBuZXcgQm9uZSgpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ051bGwnOlxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0bW9kZWwgPSBuZXcgR3JvdXAoKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtb2RlbC5uYW1lID0gUHJvcGVydHlCaW5kaW5nLnNhbml0aXplTm9kZU5hbWUoIG5vZGUuYXR0ck5hbWUgKTtcblx0XHRcdFx0XHRtb2RlbC5JRCA9IGlkO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmdldFRyYW5zZm9ybURhdGEoIG1vZGVsLCBub2RlICk7XG5cdFx0XHRcdG1vZGVsTWFwLnNldCggaWQsIG1vZGVsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1vZGVsTWFwO1xuXG5cdFx0fSxcblxuXHRcdGJ1aWxkU2tlbGV0b246IGZ1bmN0aW9uICggcmVsYXRpb25zaGlwcywgc2tlbGV0b25zLCBpZCwgbmFtZSApIHtcblxuXHRcdFx0dmFyIGJvbmUgPSBudWxsO1xuXG5cdFx0XHRyZWxhdGlvbnNoaXBzLnBhcmVudHMuZm9yRWFjaCggZnVuY3Rpb24gKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIElEIGluIHNrZWxldG9ucyApIHtcblxuXHRcdFx0XHRcdHZhciBza2VsZXRvbiA9IHNrZWxldG9uc1sgSUQgXTtcblxuXHRcdFx0XHRcdHNrZWxldG9uLnJhd0JvbmVzLmZvckVhY2goIGZ1bmN0aW9uICggcmF3Qm9uZSwgaSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCByYXdCb25lLklEID09PSBwYXJlbnQuSUQgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHN1YkJvbmUgPSBib25lO1xuXHRcdFx0XHRcdFx0XHRib25lID0gbmV3IEJvbmUoKTtcblxuXHRcdFx0XHRcdFx0XHRib25lLm1hdHJpeFdvcmxkLmNvcHkoIHJhd0JvbmUudHJhbnNmb3JtTGluayApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIHNldCBuYW1lIGFuZCBpZCBoZXJlIC0gb3RoZXJ3aXNlIGluIGNhc2VzIHdoZXJlIFwic3ViQm9uZVwiIGlzIGNyZWF0ZWQgaXQgd2lsbCBub3QgaGF2ZSBhIG5hbWUgLyBpZFxuXHRcdFx0XHRcdFx0XHRib25lLm5hbWUgPSBQcm9wZXJ0eUJpbmRpbmcuc2FuaXRpemVOb2RlTmFtZSggbmFtZSApO1xuXHRcdFx0XHRcdFx0XHRib25lLklEID0gaWQ7XG5cblx0XHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZXNbIGkgXSA9IGJvbmU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSW4gY2FzZXMgd2hlcmUgYSBib25lIGlzIHNoYXJlZCBiZXR3ZWVuIG11bHRpcGxlIG1lc2hlc1xuXHRcdFx0XHRcdFx0XHQvLyBkdXBsaWNhdGUgdGhlIGJvbmUgaGVyZSBhbmQgYW5kIGl0IGFzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IGJvbmVcblx0XHRcdFx0XHRcdFx0aWYgKCBzdWJCb25lICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ym9uZS5hZGQoIHN1YkJvbmUgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuIGJvbmU7XG5cblx0XHR9LFxuXG5cdFx0Ly8gY3JlYXRlIGEgUGVyc3BlY3RpdmVDYW1lcmEgb3IgT3J0aG9ncmFwaGljQ2FtZXJhXG5cdFx0Y3JlYXRlQ2FtZXJhOiBmdW5jdGlvbiAoIHJlbGF0aW9uc2hpcHMgKSB7XG5cblx0XHRcdHZhciBtb2RlbDtcblx0XHRcdHZhciBjYW1lcmFBdHRyaWJ1dGU7XG5cblx0XHRcdHJlbGF0aW9uc2hpcHMuY2hpbGRyZW4uZm9yRWFjaCggZnVuY3Rpb24gKCBjaGlsZCApIHtcblxuXHRcdFx0XHR2YXIgYXR0ciA9IGZieFRyZWUuT2JqZWN0cy5Ob2RlQXR0cmlidXRlWyBjaGlsZC5JRCBdO1xuXG5cdFx0XHRcdGlmICggYXR0ciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y2FtZXJhQXR0cmlidXRlID0gYXR0cjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0aWYgKCBjYW1lcmFBdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtb2RlbCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciB0eXBlID0gMDtcblx0XHRcdFx0aWYgKCBjYW1lcmFBdHRyaWJ1dGUuQ2FtZXJhUHJvamVjdGlvblR5cGUgIT09IHVuZGVmaW5lZCAmJiBjYW1lcmFBdHRyaWJ1dGUuQ2FtZXJhUHJvamVjdGlvblR5cGUudmFsdWUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHR0eXBlID0gMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIG5lYXJDbGlwcGluZ1BsYW5lID0gMTtcblx0XHRcdFx0aWYgKCBjYW1lcmFBdHRyaWJ1dGUuTmVhclBsYW5lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRuZWFyQ2xpcHBpbmdQbGFuZSA9IGNhbWVyYUF0dHJpYnV0ZS5OZWFyUGxhbmUudmFsdWUgLyAxMDAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgZmFyQ2xpcHBpbmdQbGFuZSA9IDEwMDA7XG5cdFx0XHRcdGlmICggY2FtZXJhQXR0cmlidXRlLkZhclBsYW5lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRmYXJDbGlwcGluZ1BsYW5lID0gY2FtZXJhQXR0cmlidXRlLkZhclBsYW5lLnZhbHVlIC8gMTAwMDtcblxuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHR2YXIgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHRcdFx0dmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuXHRcdFx0XHRpZiAoIGNhbWVyYUF0dHJpYnV0ZS5Bc3BlY3RXaWR0aCAhPT0gdW5kZWZpbmVkICYmIGNhbWVyYUF0dHJpYnV0ZS5Bc3BlY3RIZWlnaHQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHdpZHRoID0gY2FtZXJhQXR0cmlidXRlLkFzcGVjdFdpZHRoLnZhbHVlO1xuXHRcdFx0XHRcdGhlaWdodCA9IGNhbWVyYUF0dHJpYnV0ZS5Bc3BlY3RIZWlnaHQudmFsdWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBhc3BlY3QgPSB3aWR0aCAvIGhlaWdodDtcblxuXHRcdFx0XHR2YXIgZm92ID0gNDU7XG5cdFx0XHRcdGlmICggY2FtZXJhQXR0cmlidXRlLkZpZWxkT2ZWaWV3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRmb3YgPSBjYW1lcmFBdHRyaWJ1dGUuRmllbGRPZlZpZXcudmFsdWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBmb2NhbExlbmd0aCA9IGNhbWVyYUF0dHJpYnV0ZS5Gb2NhbExlbmd0aCA/IGNhbWVyYUF0dHJpYnV0ZS5Gb2NhbExlbmd0aC52YWx1ZSA6IG51bGw7XG5cblx0XHRcdFx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgMDogLy8gUGVyc3BlY3RpdmVcblx0XHRcdFx0XHRcdG1vZGVsID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhckNsaXBwaW5nUGxhbmUsIGZhckNsaXBwaW5nUGxhbmUgKTtcblx0XHRcdFx0XHRcdGlmICggZm9jYWxMZW5ndGggIT09IG51bGwgKSBtb2RlbC5zZXRGb2NhbExlbmd0aCggZm9jYWxMZW5ndGggKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAxOiAvLyBPcnRob2dyYXBoaWNcblx0XHRcdFx0XHRcdG1vZGVsID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggLSB3aWR0aCAvIDIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgLSBoZWlnaHQgLyAyLCBuZWFyQ2xpcHBpbmdQbGFuZSwgZmFyQ2xpcHBpbmdQbGFuZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiBVbmtub3duIGNhbWVyYSB0eXBlICcgKyB0eXBlICsgJy4nICk7XG5cdFx0XHRcdFx0XHRtb2RlbCA9IG5ldyBPYmplY3QzRCgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtb2RlbDtcblxuXHRcdH0sXG5cblx0XHQvLyBDcmVhdGUgYSBEaXJlY3Rpb25hbExpZ2h0LCBQb2ludExpZ2h0IG9yIFNwb3RMaWdodFxuXHRcdGNyZWF0ZUxpZ2h0OiBmdW5jdGlvbiAoIHJlbGF0aW9uc2hpcHMgKSB7XG5cblx0XHRcdHZhciBtb2RlbDtcblx0XHRcdHZhciBsaWdodEF0dHJpYnV0ZTtcblxuXHRcdFx0cmVsYXRpb25zaGlwcy5jaGlsZHJlbi5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuXG5cdFx0XHRcdHZhciBhdHRyID0gZmJ4VHJlZS5PYmplY3RzLk5vZGVBdHRyaWJ1dGVbIGNoaWxkLklEIF07XG5cblx0XHRcdFx0aWYgKCBhdHRyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRsaWdodEF0dHJpYnV0ZSA9IGF0dHI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdGlmICggbGlnaHRBdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtb2RlbCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciB0eXBlO1xuXG5cdFx0XHRcdC8vIExpZ2h0VHlwZSBjYW4gYmUgdW5kZWZpbmVkIGZvciBQb2ludCBsaWdodHNcblx0XHRcdFx0aWYgKCBsaWdodEF0dHJpYnV0ZS5MaWdodFR5cGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHR5cGUgPSAwO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0eXBlID0gbGlnaHRBdHRyaWJ1dGUuTGlnaHRUeXBlLnZhbHVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgY29sb3IgPSAweGZmZmZmZjtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0QXR0cmlidXRlLkNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb2xvciA9IG5ldyBDb2xvcigpLmZyb21BcnJheSggbGlnaHRBdHRyaWJ1dGUuQ29sb3IudmFsdWUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGludGVuc2l0eSA9ICggbGlnaHRBdHRyaWJ1dGUuSW50ZW5zaXR5ID09PSB1bmRlZmluZWQgKSA/IDEgOiBsaWdodEF0dHJpYnV0ZS5JbnRlbnNpdHkudmFsdWUgLyAxMDA7XG5cblx0XHRcdFx0Ly8gbGlnaHQgZGlzYWJsZWRcblx0XHRcdFx0aWYgKCBsaWdodEF0dHJpYnV0ZS5DYXN0TGlnaHRPbk9iamVjdCAhPT0gdW5kZWZpbmVkICYmIGxpZ2h0QXR0cmlidXRlLkNhc3RMaWdodE9uT2JqZWN0LnZhbHVlID09PSAwICkge1xuXG5cdFx0XHRcdFx0aW50ZW5zaXR5ID0gMDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGRpc3RhbmNlID0gMDtcblx0XHRcdFx0aWYgKCBsaWdodEF0dHJpYnV0ZS5GYXJBdHRlbnVhdGlvbkVuZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBsaWdodEF0dHJpYnV0ZS5FbmFibGVGYXJBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICYmIGxpZ2h0QXR0cmlidXRlLkVuYWJsZUZhckF0dGVudWF0aW9uLnZhbHVlID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRkaXN0YW5jZSA9IDA7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRkaXN0YW5jZSA9IGxpZ2h0QXR0cmlidXRlLkZhckF0dGVudWF0aW9uRW5kLnZhbHVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUT0RPOiBjb3VsZCB0aGlzIGJlIGNhbGN1bGF0ZWQgbGluZWFybHkgZnJvbSBGYXJBdHRlbnVhdGlvblN0YXJ0IHRvIEZhckF0dGVudWF0aW9uRW5kP1xuXHRcdFx0XHR2YXIgZGVjYXkgPSAxO1xuXG5cdFx0XHRcdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlIDA6IC8vIFBvaW50XG5cdFx0XHRcdFx0XHRtb2RlbCA9IG5ldyBQb2ludExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVjYXkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAxOiAvLyBEaXJlY3Rpb25hbFxuXHRcdFx0XHRcdFx0bW9kZWwgPSBuZXcgRGlyZWN0aW9uYWxMaWdodCggY29sb3IsIGludGVuc2l0eSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIDI6IC8vIFNwb3Rcblx0XHRcdFx0XHRcdHZhciBhbmdsZSA9IE1hdGguUEkgLyAzO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGxpZ2h0QXR0cmlidXRlLklubmVyQW5nbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRhbmdsZSA9IF9NYXRoLmRlZ1RvUmFkKCBsaWdodEF0dHJpYnV0ZS5Jbm5lckFuZ2xlLnZhbHVlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIHBlbnVtYnJhID0gMDtcblx0XHRcdFx0XHRcdGlmICggbGlnaHRBdHRyaWJ1dGUuT3V0ZXJBbmdsZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IHRoaXMgaXMgbm90IGNvcnJlY3QgLSBGQlggY2FsY3VsYXRlcyBvdXRlciBhbmQgaW5uZXIgYW5nbGUgaW4gZGVncmVlc1xuXHRcdFx0XHRcdFx0XHQvLyB3aXRoIE91dGVyQW5nbGUgPiBJbm5lckFuZ2xlICYmIE91dGVyQW5nbGUgPD0gTWF0aC5QSVxuXHRcdFx0XHRcdFx0XHQvLyB3aGlsZSB0aHJlZS5qcyB1c2VzIGEgcGVudW1icmEgYmV0d2VlbiAoMCwgMSkgdG8gYXR0ZW51YXRlIHRoZSBpbm5lciBhbmdsZVxuXHRcdFx0XHRcdFx0XHRwZW51bWJyYSA9IF9NYXRoLmRlZ1RvUmFkKCBsaWdodEF0dHJpYnV0ZS5PdXRlckFuZ2xlLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdHBlbnVtYnJhID0gTWF0aC5tYXgoIHBlbnVtYnJhLCAxICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bW9kZWwgPSBuZXcgU3BvdExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgYW5nbGUsIHBlbnVtYnJhLCBkZWNheSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiBVbmtub3duIGxpZ2h0IHR5cGUgJyArIGxpZ2h0QXR0cmlidXRlLkxpZ2h0VHlwZS52YWx1ZSArICcsIGRlZmF1bHRpbmcgdG8gYSBQb2ludExpZ2h0LicgKTtcblx0XHRcdFx0XHRcdG1vZGVsID0gbmV3IFBvaW50TGlnaHQoIGNvbG9yLCBpbnRlbnNpdHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGxpZ2h0QXR0cmlidXRlLkNhc3RTaGFkb3dzICE9PSB1bmRlZmluZWQgJiYgbGlnaHRBdHRyaWJ1dGUuQ2FzdFNoYWRvd3MudmFsdWUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRtb2RlbC5jYXN0U2hhZG93ID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1vZGVsO1xuXG5cdFx0fSxcblxuXHRcdGNyZWF0ZU1lc2g6IGZ1bmN0aW9uICggcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFsTWFwICkge1xuXG5cdFx0XHR2YXIgbW9kZWw7XG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSBudWxsO1xuXHRcdFx0dmFyIG1hdGVyaWFsID0gbnVsbDtcblx0XHRcdHZhciBtYXRlcmlhbHMgPSBbXTtcblxuXHRcdFx0Ly8gZ2V0IGdlb21ldHJ5IGFuZCBtYXRlcmlhbHMocykgZnJvbSBjb25uZWN0aW9uc1xuXHRcdFx0cmVsYXRpb25zaGlwcy5jaGlsZHJlbi5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlNYXAuaGFzKCBjaGlsZC5JRCApICkge1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkgPSBnZW9tZXRyeU1hcC5nZXQoIGNoaWxkLklEICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWxNYXAuaGFzKCBjaGlsZC5JRCApICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzLnB1c2goIG1hdGVyaWFsTWFwLmdldCggY2hpbGQuSUQgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFscy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsID0gbWF0ZXJpYWxzO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbCA9IG1hdGVyaWFsc1sgMCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1hdGVyaWFsID0gbmV3IE1lc2hQaG9uZ01hdGVyaWFsKCB7IGNvbG9yOiAweGNjY2NjYyB9ICk7XG5cdFx0XHRcdG1hdGVyaWFscy5wdXNoKCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggJ2NvbG9yJyBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdG1hdGVyaWFscy5mb3JFYWNoKCBmdW5jdGlvbiAoIG1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWwudmVydGV4Q29sb3JzID0gVmVydGV4Q29sb3JzO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LkZCWF9EZWZvcm1lciApIHtcblxuXHRcdFx0XHRtYXRlcmlhbHMuZm9yRWFjaCggZnVuY3Rpb24gKCBtYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFsLnNraW5uaW5nID0gdHJ1ZTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0bW9kZWwgPSBuZXcgU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHRcdFx0XHRtb2RlbC5ub3JtYWxpemVTa2luV2VpZ2h0cygpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1vZGVsID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtb2RlbDtcblxuXHRcdH0sXG5cblx0XHRjcmVhdGVDdXJ2ZTogZnVuY3Rpb24gKCByZWxhdGlvbnNoaXBzLCBnZW9tZXRyeU1hcCApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gcmVsYXRpb25zaGlwcy5jaGlsZHJlbi5yZWR1Y2UoIGZ1bmN0aW9uICggZ2VvLCBjaGlsZCApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5TWFwLmhhcyggY2hpbGQuSUQgKSApIGdlbyA9IGdlb21ldHJ5TWFwLmdldCggY2hpbGQuSUQgKTtcblxuXHRcdFx0XHRyZXR1cm4gZ2VvO1xuXG5cdFx0XHR9LCBudWxsICk7XG5cblx0XHRcdC8vIEZCWCBkb2VzIG5vdCBsaXN0IG1hdGVyaWFscyBmb3IgTnVyYnMgbGluZXMsIHNvIHdlJ2xsIGp1c3QgcHV0IG91ciBvd24gaW4gaGVyZS5cblx0XHRcdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHgzMzAwZmYsIGxpbmV3aWR0aDogMSB9ICk7XG5cdFx0XHRyZXR1cm4gbmV3IExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0fSxcblxuXHRcdC8vIHBhcnNlIHRoZSBtb2RlbCBub2RlIGZvciB0cmFuc2Zvcm0gZGF0YVxuXHRcdGdldFRyYW5zZm9ybURhdGE6IGZ1bmN0aW9uICggbW9kZWwsIG1vZGVsTm9kZSApIHtcblxuXHRcdFx0dmFyIHRyYW5zZm9ybURhdGEgPSB7fTtcblxuXHRcdFx0aWYgKCAnSW5oZXJpdFR5cGUnIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEuaW5oZXJpdFR5cGUgPSBwYXJzZUludCggbW9kZWxOb2RlLkluaGVyaXRUeXBlLnZhbHVlICk7XG5cblx0XHRcdGlmICggJ1JvdGF0aW9uT3JkZXInIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEuZXVsZXJPcmRlciA9IGdldEV1bGVyT3JkZXIoIG1vZGVsTm9kZS5Sb3RhdGlvbk9yZGVyLnZhbHVlICk7XG5cdFx0XHRlbHNlIHRyYW5zZm9ybURhdGEuZXVsZXJPcmRlciA9ICdaWVgnO1xuXG5cdFx0XHRpZiAoICdMY2xfVHJhbnNsYXRpb24nIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEudHJhbnNsYXRpb24gPSBtb2RlbE5vZGUuTGNsX1RyYW5zbGF0aW9uLnZhbHVlO1xuXG5cdFx0XHRpZiAoICdQcmVSb3RhdGlvbicgaW4gbW9kZWxOb2RlICkgdHJhbnNmb3JtRGF0YS5wcmVSb3RhdGlvbiA9IG1vZGVsTm9kZS5QcmVSb3RhdGlvbi52YWx1ZTtcblx0XHRcdGlmICggJ0xjbF9Sb3RhdGlvbicgaW4gbW9kZWxOb2RlICkgdHJhbnNmb3JtRGF0YS5yb3RhdGlvbiA9IG1vZGVsTm9kZS5MY2xfUm90YXRpb24udmFsdWU7XG5cdFx0XHRpZiAoICdQb3N0Um90YXRpb24nIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEucG9zdFJvdGF0aW9uID0gbW9kZWxOb2RlLlBvc3RSb3RhdGlvbi52YWx1ZTtcblxuXHRcdFx0aWYgKCAnTGNsX1NjYWxpbmcnIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEuc2NhbGUgPSBtb2RlbE5vZGUuTGNsX1NjYWxpbmcudmFsdWU7XG5cblx0XHRcdGlmICggJ1NjYWxpbmdPZmZzZXQnIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEuc2NhbGluZ09mZnNldCA9IG1vZGVsTm9kZS5TY2FsaW5nT2Zmc2V0LnZhbHVlO1xuXHRcdFx0aWYgKCAnU2NhbGluZ1Bpdm90JyBpbiBtb2RlbE5vZGUgKSB0cmFuc2Zvcm1EYXRhLnNjYWxpbmdQaXZvdCA9IG1vZGVsTm9kZS5TY2FsaW5nUGl2b3QudmFsdWU7XG5cblx0XHRcdGlmICggJ1JvdGF0aW9uT2Zmc2V0JyBpbiBtb2RlbE5vZGUgKSB0cmFuc2Zvcm1EYXRhLnJvdGF0aW9uT2Zmc2V0ID0gbW9kZWxOb2RlLlJvdGF0aW9uT2Zmc2V0LnZhbHVlO1xuXHRcdFx0aWYgKCAnUm90YXRpb25QaXZvdCcgaW4gbW9kZWxOb2RlICkgdHJhbnNmb3JtRGF0YS5yb3RhdGlvblBpdm90ID0gbW9kZWxOb2RlLlJvdGF0aW9uUGl2b3QudmFsdWU7XG5cblx0XHRcdG1vZGVsLnVzZXJEYXRhLnRyYW5zZm9ybURhdGEgPSB0cmFuc2Zvcm1EYXRhO1xuXG5cdFx0fSxcblxuXHRcdHNldExvb2tBdFByb3BlcnRpZXM6IGZ1bmN0aW9uICggbW9kZWwsIG1vZGVsTm9kZSApIHtcblxuXHRcdFx0aWYgKCAnTG9va0F0UHJvcGVydHknIGluIG1vZGVsTm9kZSApIHtcblxuXHRcdFx0XHR2YXIgY2hpbGRyZW4gPSBjb25uZWN0aW9ucy5nZXQoIG1vZGVsLklEICkuY2hpbGRyZW47XG5cblx0XHRcdFx0Y2hpbGRyZW4uZm9yRWFjaCggZnVuY3Rpb24gKCBjaGlsZCApIHtcblxuXHRcdFx0XHRcdGlmICggY2hpbGQucmVsYXRpb25zaGlwID09PSAnTG9va0F0UHJvcGVydHknICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgbG9va0F0VGFyZ2V0ID0gZmJ4VHJlZS5PYmplY3RzLk1vZGVsWyBjaGlsZC5JRCBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoICdMY2xfVHJhbnNsYXRpb24nIGluIGxvb2tBdFRhcmdldCApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgcG9zID0gbG9va0F0VGFyZ2V0LkxjbF9UcmFuc2xhdGlvbi52YWx1ZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBEaXJlY3Rpb25hbExpZ2h0LCBTcG90TGlnaHRcblx0XHRcdFx0XHRcdFx0aWYgKCBtb2RlbC50YXJnZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdG1vZGVsLnRhcmdldC5wb3NpdGlvbi5mcm9tQXJyYXkoIHBvcyApO1xuXHRcdFx0XHRcdFx0XHRcdHNjZW5lR3JhcGguYWRkKCBtb2RlbC50YXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgeyAvLyBDYW1lcmFzIGFuZCBvdGhlciBPYmplY3QzRHNcblxuXHRcdFx0XHRcdFx0XHRcdG1vZGVsLmxvb2tBdCggbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHBvcyApICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0YmluZFNrZWxldG9uOiBmdW5jdGlvbiAoIHNrZWxldG9ucywgZ2VvbWV0cnlNYXAsIG1vZGVsTWFwICkge1xuXG5cdFx0XHR2YXIgYmluZE1hdHJpY2VzID0gdGhpcy5wYXJzZVBvc2VOb2RlcygpO1xuXG5cdFx0XHRmb3IgKCB2YXIgSUQgaW4gc2tlbGV0b25zICkge1xuXG5cdFx0XHRcdHZhciBza2VsZXRvbiA9IHNrZWxldG9uc1sgSUQgXTtcblxuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGNvbm5lY3Rpb25zLmdldCggcGFyc2VJbnQoIHNrZWxldG9uLklEICkgKS5wYXJlbnRzO1xuXG5cdFx0XHRcdHBhcmVudHMuZm9yRWFjaCggZnVuY3Rpb24gKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5TWFwLmhhcyggcGFyZW50LklEICkgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBnZW9JRCA9IHBhcmVudC5JRDtcblx0XHRcdFx0XHRcdHZhciBnZW9SZWxhdGlvbnNoaXBzID0gY29ubmVjdGlvbnMuZ2V0KCBnZW9JRCApO1xuXG5cdFx0XHRcdFx0XHRnZW9SZWxhdGlvbnNoaXBzLnBhcmVudHMuZm9yRWFjaCggZnVuY3Rpb24gKCBnZW9Db25uUGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggbW9kZWxNYXAuaGFzKCBnZW9Db25uUGFyZW50LklEICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHR2YXIgbW9kZWwgPSBtb2RlbE1hcC5nZXQoIGdlb0Nvbm5QYXJlbnQuSUQgKTtcblxuXHRcdFx0XHRcdFx0XHRcdG1vZGVsLmJpbmQoIG5ldyBTa2VsZXRvbiggc2tlbGV0b24uYm9uZXMgKSwgYmluZE1hdHJpY2VzWyBnZW9Db25uUGFyZW50LklEIF0gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRwYXJzZVBvc2VOb2RlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgYmluZE1hdHJpY2VzID0ge307XG5cblx0XHRcdGlmICggJ1Bvc2UnIGluIGZieFRyZWUuT2JqZWN0cyApIHtcblxuXHRcdFx0XHR2YXIgQmluZFBvc2VOb2RlID0gZmJ4VHJlZS5PYmplY3RzLlBvc2U7XG5cblx0XHRcdFx0Zm9yICggdmFyIG5vZGVJRCBpbiBCaW5kUG9zZU5vZGUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIEJpbmRQb3NlTm9kZVsgbm9kZUlEIF0uYXR0clR5cGUgPT09ICdCaW5kUG9zZScgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBwb3NlTm9kZXMgPSBCaW5kUG9zZU5vZGVbIG5vZGVJRCBdLlBvc2VOb2RlO1xuXG5cdFx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHBvc2VOb2RlcyApICkge1xuXG5cdFx0XHRcdFx0XHRcdHBvc2VOb2Rlcy5mb3JFYWNoKCBmdW5jdGlvbiAoIHBvc2VOb2RlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0YmluZE1hdHJpY2VzWyBwb3NlTm9kZS5Ob2RlIF0gPSBuZXcgTWF0cml4NCgpLmZyb21BcnJheSggcG9zZU5vZGUuTWF0cml4LmEgKTtcblxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0YmluZE1hdHJpY2VzWyBwb3NlTm9kZXMuTm9kZSBdID0gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHBvc2VOb2Rlcy5NYXRyaXguYSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBiaW5kTWF0cmljZXM7XG5cblx0XHR9LFxuXG5cdFx0Ly8gUGFyc2UgYW1iaWVudCBjb2xvciBpbiBGQlhUcmVlLkdsb2JhbFNldHRpbmdzIC0gaWYgaXQncyBub3Qgc2V0IHRvIGJsYWNrIChkZWZhdWx0KSwgY3JlYXRlIGFuIGFtYmllbnQgbGlnaHRcblx0XHRjcmVhdGVBbWJpZW50TGlnaHQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCAnR2xvYmFsU2V0dGluZ3MnIGluIGZieFRyZWUgJiYgJ0FtYmllbnRDb2xvcicgaW4gZmJ4VHJlZS5HbG9iYWxTZXR0aW5ncyApIHtcblxuXHRcdFx0XHR2YXIgYW1iaWVudENvbG9yID0gZmJ4VHJlZS5HbG9iYWxTZXR0aW5ncy5BbWJpZW50Q29sb3IudmFsdWU7XG5cdFx0XHRcdHZhciByID0gYW1iaWVudENvbG9yWyAwIF07XG5cdFx0XHRcdHZhciBnID0gYW1iaWVudENvbG9yWyAxIF07XG5cdFx0XHRcdHZhciBiID0gYW1iaWVudENvbG9yWyAyIF07XG5cblx0XHRcdFx0aWYgKCByICE9PSAwIHx8IGcgIT09IDAgfHwgYiAhPT0gMCApIHtcblxuXHRcdFx0XHRcdHZhciBjb2xvciA9IG5ldyBDb2xvciggciwgZywgYiApO1xuXHRcdFx0XHRcdHNjZW5lR3JhcGguYWRkKCBuZXcgQW1iaWVudExpZ2h0KCBjb2xvciwgMSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0c2V0dXBNb3JwaE1hdGVyaWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRzY2VuZUdyYXBoLnRyYXZlcnNlKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuXG5cdFx0XHRcdGlmICggY2hpbGQuaXNNZXNoICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjaGlsZC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gJiYgY2hpbGQuZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBjaGlsZC5tYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0XHRcdGNoaWxkLm1hdGVyaWFsLmZvckVhY2goIGZ1bmN0aW9uICggbWF0ZXJpYWwsIGkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzZWxmLnNldHVwTW9ycGhNYXRlcmlhbCggY2hpbGQsIG1hdGVyaWFsLCBpICk7XG5cblx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHNlbGYuc2V0dXBNb3JwaE1hdGVyaWFsKCBjaGlsZCwgY2hpbGQubWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHRcdHNldHVwTW9ycGhNYXRlcmlhbDogZnVuY3Rpb24gKCBjaGlsZCwgbWF0ZXJpYWwsIGluZGV4ICkge1xuXG5cdFx0XHR2YXIgdXVpZCA9IGNoaWxkLnV1aWQ7XG5cdFx0XHR2YXIgbWF0VXVpZCA9IG1hdGVyaWFsLnV1aWQ7XG5cblx0XHRcdC8vIGlmIGEgZ2VvbWV0cnkgaGFzIG1vcnBoIHRhcmdldHMsIGl0IGNhbm5vdCBzaGFyZSB0aGUgbWF0ZXJpYWwgd2l0aCBvdGhlciBnZW9tZXRyaWVzXG5cdFx0XHR2YXIgc2hhcmVkTWF0ID0gZmFsc2U7XG5cblx0XHRcdHNjZW5lR3JhcGgudHJhdmVyc2UoIGZ1bmN0aW9uICggbm9kZSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGUuaXNNZXNoICkge1xuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBub2RlLm1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdG5vZGUubWF0ZXJpYWwuZm9yRWFjaCggZnVuY3Rpb24gKCBtYXQgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBtYXQudXVpZCA9PT0gbWF0VXVpZCAmJiBub2RlLnV1aWQgIT09IHV1aWQgKSBzaGFyZWRNYXQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBub2RlLm1hdGVyaWFsLnV1aWQgPT09IG1hdFV1aWQgJiYgbm9kZS51dWlkICE9PSB1dWlkICkgc2hhcmVkTWF0ID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0aWYgKCBzaGFyZWRNYXQgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dmFyIGNsb25lZE1hdCA9IG1hdGVyaWFsLmNsb25lKCk7XG5cdFx0XHRcdGNsb25lZE1hdC5tb3JwaFRhcmdldHMgPSB0cnVlO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIGNoaWxkLm1hdGVyaWFsID0gY2xvbmVkTWF0O1xuXHRcdFx0XHRlbHNlIGNoaWxkLm1hdGVyaWFsWyBpbmRleCBdID0gY2xvbmVkTWF0O1xuXG5cdFx0XHR9IGVsc2UgbWF0ZXJpYWwubW9ycGhUYXJnZXRzID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdC8vIHBhcnNlIEdlb21ldHJ5IGRhdGEgZnJvbSBGQlhUcmVlIGFuZCByZXR1cm4gbWFwIG9mIEJ1ZmZlckdlb21ldHJpZXNcblx0ZnVuY3Rpb24gR2VvbWV0cnlQYXJzZXIoKSB7fVxuXG5cdEdlb21ldHJ5UGFyc2VyLnByb3RvdHlwZSA9IHtcblxuXHRcdGNvbnN0cnVjdG9yOiBHZW9tZXRyeVBhcnNlcixcblxuXHRcdC8vIFBhcnNlIG5vZGVzIGluIEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeVxuXHRcdHBhcnNlOiBmdW5jdGlvbiAoIGRlZm9ybWVycyApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5TWFwID0gbmV3IE1hcCgpO1xuXG5cdFx0XHRpZiAoICdHZW9tZXRyeScgaW4gZmJ4VHJlZS5PYmplY3RzICkge1xuXG5cdFx0XHRcdHZhciBnZW9Ob2RlcyA9IGZieFRyZWUuT2JqZWN0cy5HZW9tZXRyeTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgbm9kZUlEIGluIGdlb05vZGVzICkge1xuXG5cdFx0XHRcdFx0dmFyIHJlbGF0aW9uc2hpcHMgPSBjb25uZWN0aW9ucy5nZXQoIHBhcnNlSW50KCBub2RlSUQgKSApO1xuXHRcdFx0XHRcdHZhciBnZW8gPSB0aGlzLnBhcnNlR2VvbWV0cnkoIHJlbGF0aW9uc2hpcHMsIGdlb05vZGVzWyBub2RlSUQgXSwgZGVmb3JtZXJzICk7XG5cblx0XHRcdFx0XHRnZW9tZXRyeU1hcC5zZXQoIHBhcnNlSW50KCBub2RlSUQgKSwgZ2VvICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBnZW9tZXRyeU1hcDtcblxuXHRcdH0sXG5cblx0XHQvLyBQYXJzZSBzaW5nbGUgbm9kZSBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnlcblx0XHRwYXJzZUdlb21ldHJ5OiBmdW5jdGlvbiAoIHJlbGF0aW9uc2hpcHMsIGdlb05vZGUsIGRlZm9ybWVycyApIHtcblxuXHRcdFx0c3dpdGNoICggZ2VvTm9kZS5hdHRyVHlwZSApIHtcblxuXHRcdFx0XHRjYXNlICdNZXNoJzpcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5wYXJzZU1lc2hHZW9tZXRyeSggcmVsYXRpb25zaGlwcywgZ2VvTm9kZSwgZGVmb3JtZXJzICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnTnVyYnNDdXJ2ZSc6XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMucGFyc2VOdXJic0dlb21ldHJ5KCBnZW9Ob2RlICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblxuXHRcdC8vIFBhcnNlIHNpbmdsZSBub2RlIG1lc2ggZ2VvbWV0cnkgaW4gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5XG5cdFx0cGFyc2VNZXNoR2VvbWV0cnk6IGZ1bmN0aW9uICggcmVsYXRpb25zaGlwcywgZ2VvTm9kZSwgZGVmb3JtZXJzICkge1xuXG5cdFx0XHR2YXIgc2tlbGV0b25zID0gZGVmb3JtZXJzLnNrZWxldG9ucztcblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBkZWZvcm1lcnMubW9ycGhUYXJnZXRzO1xuXG5cdFx0XHR2YXIgbW9kZWxOb2RlcyA9IHJlbGF0aW9uc2hpcHMucGFyZW50cy5tYXAoIGZ1bmN0aW9uICggcGFyZW50ICkge1xuXG5cdFx0XHRcdHJldHVybiBmYnhUcmVlLk9iamVjdHMuTW9kZWxbIHBhcmVudC5JRCBdO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIGRvbid0IGNyZWF0ZSBnZW9tZXRyeSBpZiBpdCBpcyBub3QgYXNzb2NpYXRlZCB3aXRoIGFueSBtb2RlbHNcblx0XHRcdGlmICggbW9kZWxOb2Rlcy5sZW5ndGggPT09IDAgKSByZXR1cm47XG5cblx0XHRcdHZhciBza2VsZXRvbiA9IHJlbGF0aW9uc2hpcHMuY2hpbGRyZW4ucmVkdWNlKCBmdW5jdGlvbiAoIHNrZWxldG9uLCBjaGlsZCApIHtcblxuXHRcdFx0XHRpZiAoIHNrZWxldG9uc1sgY2hpbGQuSUQgXSAhPT0gdW5kZWZpbmVkICkgc2tlbGV0b24gPSBza2VsZXRvbnNbIGNoaWxkLklEIF07XG5cblx0XHRcdFx0cmV0dXJuIHNrZWxldG9uO1xuXG5cdFx0XHR9LCBudWxsICk7XG5cblx0XHRcdHZhciBtb3JwaFRhcmdldCA9IHJlbGF0aW9uc2hpcHMuY2hpbGRyZW4ucmVkdWNlKCBmdW5jdGlvbiAoIG1vcnBoVGFyZ2V0LCBjaGlsZCApIHtcblxuXHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1sgY2hpbGQuSUQgXSAhPT0gdW5kZWZpbmVkICkgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGNoaWxkLklEIF07XG5cblx0XHRcdFx0cmV0dXJuIG1vcnBoVGFyZ2V0O1xuXG5cdFx0XHR9LCBudWxsICk7XG5cblx0XHRcdC8vIEFzc3VtZSBvbmUgbW9kZWwgYW5kIGdldCB0aGUgcHJlUm90YXRpb24gZnJvbSB0aGF0XG5cdFx0XHQvLyBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2VvbWV0cnkgdGhpcyBtYXkgY2F1c2UgcHJvYmxlbXNcblx0XHRcdHZhciBtb2RlbE5vZGUgPSBtb2RlbE5vZGVzWyAwIF07XG5cblx0XHRcdHZhciB0cmFuc2Zvcm1EYXRhID0ge307XG5cblx0XHRcdGlmICggJ1JvdGF0aW9uT3JkZXInIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEuZXVsZXJPcmRlciA9IGdldEV1bGVyT3JkZXIoIG1vZGVsTm9kZS5Sb3RhdGlvbk9yZGVyLnZhbHVlICk7XG5cdFx0XHRpZiAoICdJbmhlcml0VHlwZScgaW4gbW9kZWxOb2RlICkgdHJhbnNmb3JtRGF0YS5pbmhlcml0VHlwZSA9IHBhcnNlSW50KCBtb2RlbE5vZGUuSW5oZXJpdFR5cGUudmFsdWUgKTtcblxuXHRcdFx0aWYgKCAnR2VvbWV0cmljVHJhbnNsYXRpb24nIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEudHJhbnNsYXRpb24gPSBtb2RlbE5vZGUuR2VvbWV0cmljVHJhbnNsYXRpb24udmFsdWU7XG5cdFx0XHRpZiAoICdHZW9tZXRyaWNSb3RhdGlvbicgaW4gbW9kZWxOb2RlICkgdHJhbnNmb3JtRGF0YS5yb3RhdGlvbiA9IG1vZGVsTm9kZS5HZW9tZXRyaWNSb3RhdGlvbi52YWx1ZTtcblx0XHRcdGlmICggJ0dlb21ldHJpY1NjYWxpbmcnIGluIG1vZGVsTm9kZSApIHRyYW5zZm9ybURhdGEuc2NhbGUgPSBtb2RlbE5vZGUuR2VvbWV0cmljU2NhbGluZy52YWx1ZTtcblxuXHRcdFx0dmFyIHRyYW5zZm9ybSA9IGdlbmVyYXRlVHJhbnNmb3JtKCB0cmFuc2Zvcm1EYXRhICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmdlbkdlb21ldHJ5KCBnZW9Ob2RlLCBza2VsZXRvbiwgbW9ycGhUYXJnZXQsIHRyYW5zZm9ybSApO1xuXG5cdFx0fSxcblxuXHRcdC8vIEdlbmVyYXRlIGEgQnVmZmVyR2VvbWV0cnkgZnJvbSBhIG5vZGUgaW4gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5XG5cdFx0Z2VuR2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvTm9kZSwgc2tlbGV0b24sIG1vcnBoVGFyZ2V0LCBwcmVUcmFuc2Zvcm0gKSB7XG5cblx0XHRcdHZhciBnZW8gPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRcdGlmICggZ2VvTm9kZS5hdHRyTmFtZSApIGdlby5uYW1lID0gZ2VvTm9kZS5hdHRyTmFtZTtcblxuXHRcdFx0dmFyIGdlb0luZm8gPSB0aGlzLnBhcnNlR2VvTm9kZSggZ2VvTm9kZSwgc2tlbGV0b24gKTtcblx0XHRcdHZhciBidWZmZXJzID0gdGhpcy5nZW5CdWZmZXJzKCBnZW9JbmZvICk7XG5cblx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBidWZmZXJzLnZlcnRleCwgMyApO1xuXG5cdFx0XHRwcmVUcmFuc2Zvcm0uYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUgKTtcblxuXHRcdFx0Z2VvLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25BdHRyaWJ1dGUgKTtcblxuXHRcdFx0aWYgKCBidWZmZXJzLmNvbG9ycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGdlby5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBidWZmZXJzLmNvbG9ycywgMyApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBza2VsZXRvbiApIHtcblxuXHRcdFx0XHRnZW8uYWRkQXR0cmlidXRlKCAnc2tpbkluZGV4JywgbmV3IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYnVmZmVycy53ZWlnaHRzSW5kaWNlcywgNCApICk7XG5cblx0XHRcdFx0Z2VvLmFkZEF0dHJpYnV0ZSggJ3NraW5XZWlnaHQnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYnVmZmVycy52ZXJ0ZXhXZWlnaHRzLCA0ICkgKTtcblxuXHRcdFx0XHQvLyB1c2VkIGxhdGVyIHRvIGJpbmQgdGhlIHNrZWxldG9uIHRvIHRoZSBtb2RlbFxuXHRcdFx0XHRnZW8uRkJYX0RlZm9ybWVyID0gc2tlbGV0b247XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidWZmZXJzLm5vcm1hbC5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdHZhciBub3JtYWxBdHRyaWJ1dGUgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYnVmZmVycy5ub3JtYWwsIDMgKTtcblxuXHRcdFx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIHByZVRyYW5zZm9ybSApO1xuXHRcdFx0XHRub3JtYWxNYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlICk7XG5cblx0XHRcdFx0Z2VvLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5vcm1hbEF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJ1ZmZlcnMudXZzLmZvckVhY2goIGZ1bmN0aW9uICggdXZCdWZmZXIsIGkgKSB7XG5cblx0XHRcdFx0Ly8gc3Vic2VxdWVudCB1diBidWZmZXJzIGFyZSBjYWxsZWQgJ3V2MScsICd1djInLCAuLi5cblx0XHRcdFx0dmFyIG5hbWUgPSAndXYnICsgKCBpICsgMSApLnRvU3RyaW5nKCk7XG5cblx0XHRcdFx0Ly8gdGhlIGZpcnN0IHV2IGJ1ZmZlciBpcyBqdXN0IGNhbGxlZCAndXYnXG5cdFx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdG5hbWUgPSAndXYnO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW8uYWRkQXR0cmlidXRlKCBuYW1lLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYnVmZmVycy51dnNbIGkgXSwgMiApICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0aWYgKCBnZW9JbmZvLm1hdGVyaWFsICYmIGdlb0luZm8ubWF0ZXJpYWwubWFwcGluZ1R5cGUgIT09ICdBbGxTYW1lJyApIHtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IHRoZSBtYXRlcmlhbCBpbmRpY2VzIG9mIGVhY2ggdmVydGV4IGludG8gcmVuZGVyaW5nIGdyb3VwcyBvbiB0aGUgZ2VvbWV0cnkuXG5cdFx0XHRcdHZhciBwcmV2TWF0ZXJpYWxJbmRleCA9IGJ1ZmZlcnMubWF0ZXJpYWxJbmRleFsgMCBdO1xuXHRcdFx0XHR2YXIgc3RhcnRJbmRleCA9IDA7XG5cblx0XHRcdFx0YnVmZmVycy5tYXRlcmlhbEluZGV4LmZvckVhY2goIGZ1bmN0aW9uICggY3VycmVudEluZGV4LCBpICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjdXJyZW50SW5kZXggIT09IHByZXZNYXRlcmlhbEluZGV4ICkge1xuXG5cdFx0XHRcdFx0XHRnZW8uYWRkR3JvdXAoIHN0YXJ0SW5kZXgsIGkgLSBzdGFydEluZGV4LCBwcmV2TWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRcdFx0XHRwcmV2TWF0ZXJpYWxJbmRleCA9IGN1cnJlbnRJbmRleDtcblx0XHRcdFx0XHRcdHN0YXJ0SW5kZXggPSBpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyB0aGUgbG9vcCBhYm92ZSBkb2Vzbid0IGFkZCB0aGUgbGFzdCBncm91cCwgZG8gdGhhdCBoZXJlLlxuXHRcdFx0XHRpZiAoIGdlby5ncm91cHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdHZhciBsYXN0R3JvdXAgPSBnZW8uZ3JvdXBzWyBnZW8uZ3JvdXBzLmxlbmd0aCAtIDEgXTtcblx0XHRcdFx0XHR2YXIgbGFzdEluZGV4ID0gbGFzdEdyb3VwLnN0YXJ0ICsgbGFzdEdyb3VwLmNvdW50O1xuXG5cdFx0XHRcdFx0aWYgKCBsYXN0SW5kZXggIT09IGJ1ZmZlcnMubWF0ZXJpYWxJbmRleC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHRcdGdlby5hZGRHcm91cCggbGFzdEluZGV4LCBidWZmZXJzLm1hdGVyaWFsSW5kZXgubGVuZ3RoIC0gbGFzdEluZGV4LCBwcmV2TWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBjYXNlIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBtYXRlcmlhbHMgYnV0IHRoZSB3aG9sZSBnZW9tZXRyeSBpcyBvbmx5XG5cdFx0XHRcdC8vIHVzaW5nIG9uZSBvZiB0aGVtXG5cdFx0XHRcdGlmICggZ2VvLmdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdFx0XHRnZW8uYWRkR3JvdXAoIDAsIGJ1ZmZlcnMubWF0ZXJpYWxJbmRleC5sZW5ndGgsIGJ1ZmZlcnMubWF0ZXJpYWxJbmRleFsgMCBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYWRkTW9ycGhUYXJnZXRzKCBnZW8sIGdlb05vZGUsIG1vcnBoVGFyZ2V0LCBwcmVUcmFuc2Zvcm0gKTtcblxuXHRcdFx0cmV0dXJuIGdlbztcblxuXHRcdH0sXG5cblx0XHRwYXJzZUdlb05vZGU6IGZ1bmN0aW9uICggZ2VvTm9kZSwgc2tlbGV0b24gKSB7XG5cblx0XHRcdHZhciBnZW9JbmZvID0ge307XG5cblx0XHRcdGdlb0luZm8udmVydGV4UG9zaXRpb25zID0gKCBnZW9Ob2RlLlZlcnRpY2VzICE9PSB1bmRlZmluZWQgKSA/IGdlb05vZGUuVmVydGljZXMuYSA6IFtdO1xuXHRcdFx0Z2VvSW5mby52ZXJ0ZXhJbmRpY2VzID0gKCBnZW9Ob2RlLlBvbHlnb25WZXJ0ZXhJbmRleCAhPT0gdW5kZWZpbmVkICkgPyBnZW9Ob2RlLlBvbHlnb25WZXJ0ZXhJbmRleC5hIDogW107XG5cblx0XHRcdGlmICggZ2VvTm9kZS5MYXllckVsZW1lbnRDb2xvciApIHtcblxuXHRcdFx0XHRnZW9JbmZvLmNvbG9yID0gdGhpcy5wYXJzZVZlcnRleENvbG9ycyggZ2VvTm9kZS5MYXllckVsZW1lbnRDb2xvclsgMCBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBnZW9Ob2RlLkxheWVyRWxlbWVudE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdGdlb0luZm8ubWF0ZXJpYWwgPSB0aGlzLnBhcnNlTWF0ZXJpYWxJbmRpY2VzKCBnZW9Ob2RlLkxheWVyRWxlbWVudE1hdGVyaWFsWyAwIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb05vZGUuTGF5ZXJFbGVtZW50Tm9ybWFsICkge1xuXG5cdFx0XHRcdGdlb0luZm8ubm9ybWFsID0gdGhpcy5wYXJzZU5vcm1hbHMoIGdlb05vZGUuTGF5ZXJFbGVtZW50Tm9ybWFsWyAwIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb05vZGUuTGF5ZXJFbGVtZW50VVYgKSB7XG5cblx0XHRcdFx0Z2VvSW5mby51diA9IFtdO1xuXG5cdFx0XHRcdHZhciBpID0gMDtcblx0XHRcdFx0d2hpbGUgKCBnZW9Ob2RlLkxheWVyRWxlbWVudFVWWyBpIF0gKSB7XG5cblx0XHRcdFx0XHRnZW9JbmZvLnV2LnB1c2goIHRoaXMucGFyc2VVVnMoIGdlb05vZGUuTGF5ZXJFbGVtZW50VVZbIGkgXSApICk7XG5cdFx0XHRcdFx0aSArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvSW5mby53ZWlnaHRUYWJsZSA9IHt9O1xuXG5cdFx0XHRpZiAoIHNrZWxldG9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGdlb0luZm8uc2tlbGV0b24gPSBza2VsZXRvbjtcblxuXHRcdFx0XHRza2VsZXRvbi5yYXdCb25lcy5mb3JFYWNoKCBmdW5jdGlvbiAoIHJhd0JvbmUsIGkgKSB7XG5cblx0XHRcdFx0XHQvLyBsb29wIG92ZXIgdGhlIGJvbmUncyB2ZXJ0ZXggaW5kaWNlcyBhbmQgd2VpZ2h0c1xuXHRcdFx0XHRcdHJhd0JvbmUuaW5kaWNlcy5mb3JFYWNoKCBmdW5jdGlvbiAoIGluZGV4LCBqICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGdlb0luZm8ud2VpZ2h0VGFibGVbIGluZGV4IF0gPT09IHVuZGVmaW5lZCApIGdlb0luZm8ud2VpZ2h0VGFibGVbIGluZGV4IF0gPSBbXTtcblxuXHRcdFx0XHRcdFx0Z2VvSW5mby53ZWlnaHRUYWJsZVsgaW5kZXggXS5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdFx0aWQ6IGksXG5cdFx0XHRcdFx0XHRcdHdlaWdodDogcmF3Qm9uZS53ZWlnaHRzWyBqIF0sXG5cblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGdlb0luZm87XG5cblx0XHR9LFxuXG5cdFx0Z2VuQnVmZmVyczogZnVuY3Rpb24gKCBnZW9JbmZvICkge1xuXG5cdFx0XHR2YXIgYnVmZmVycyA9IHtcblx0XHRcdFx0dmVydGV4OiBbXSxcblx0XHRcdFx0bm9ybWFsOiBbXSxcblx0XHRcdFx0Y29sb3JzOiBbXSxcblx0XHRcdFx0dXZzOiBbXSxcblx0XHRcdFx0bWF0ZXJpYWxJbmRleDogW10sXG5cdFx0XHRcdHZlcnRleFdlaWdodHM6IFtdLFxuXHRcdFx0XHR3ZWlnaHRzSW5kaWNlczogW10sXG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgcG9seWdvbkluZGV4ID0gMDtcblx0XHRcdHZhciBmYWNlTGVuZ3RoID0gMDtcblx0XHRcdHZhciBkaXNwbGF5ZWRXZWlnaHRzV2FybmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyB0aGVzZSB3aWxsIGhvbGQgZGF0YSBmb3IgYSBzaW5nbGUgZmFjZVxuXHRcdFx0dmFyIGZhY2VQb3NpdGlvbkluZGV4ZXMgPSBbXTtcblx0XHRcdHZhciBmYWNlTm9ybWFscyA9IFtdO1xuXHRcdFx0dmFyIGZhY2VDb2xvcnMgPSBbXTtcblx0XHRcdHZhciBmYWNlVVZzID0gW107XG5cdFx0XHR2YXIgZmFjZVdlaWdodHMgPSBbXTtcblx0XHRcdHZhciBmYWNlV2VpZ2h0SW5kaWNlcyA9IFtdO1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRnZW9JbmZvLnZlcnRleEluZGljZXMuZm9yRWFjaCggZnVuY3Rpb24gKCB2ZXJ0ZXhJbmRleCwgcG9seWdvblZlcnRleEluZGV4ICkge1xuXG5cdFx0XHRcdHZhciBlbmRPZkZhY2UgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyBGYWNlIGluZGV4IGFuZCB2ZXJ0ZXggaW5kZXggYXJyYXlzIGFyZSBjb21iaW5lZCBpbiBhIHNpbmdsZSBhcnJheVxuXHRcdFx0XHQvLyBBIGN1YmUgd2l0aCBxdWFkIGZhY2VzIGxvb2tzIGxpa2UgdGhpczpcblx0XHRcdFx0Ly8gUG9seWdvblZlcnRleEluZGV4OiAqMjQge1xuXHRcdFx0XHQvLyAgYTogMCwgMSwgMywgLTMsIDIsIDMsIDUsIC01LCA0LCA1LCA3LCAtNywgNiwgNywgMSwgLTEsIDEsIDcsIDUsIC00LCA2LCAwLCAyLCAtNVxuXHRcdFx0XHQvLyAgfVxuXHRcdFx0XHQvLyBOZWdhdGl2ZSBudW1iZXJzIG1hcmsgdGhlIGVuZCBvZiBhIGZhY2UgLSBmaXJzdCBmYWNlIGhlcmUgaXMgMCwgMSwgMywgLTNcblx0XHRcdFx0Ly8gdG8gZmluZCBpbmRleCBvZiBsYXN0IHZlcnRleCBiaXQgc2hpZnQgdGhlIGluZGV4OiBeIC0gMVxuXHRcdFx0XHRpZiAoIHZlcnRleEluZGV4IDwgMCApIHtcblxuXHRcdFx0XHRcdHZlcnRleEluZGV4ID0gdmVydGV4SW5kZXggXiAtIDE7IC8vIGVxdWl2YWxlbnQgdG8gKCB4ICogLTEgKSAtIDFcblx0XHRcdFx0XHRlbmRPZkZhY2UgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgd2VpZ2h0SW5kaWNlcyA9IFtdO1xuXHRcdFx0XHR2YXIgd2VpZ2h0cyA9IFtdO1xuXG5cdFx0XHRcdGZhY2VQb3NpdGlvbkluZGV4ZXMucHVzaCggdmVydGV4SW5kZXggKiAzLCB2ZXJ0ZXhJbmRleCAqIDMgKyAxLCB2ZXJ0ZXhJbmRleCAqIDMgKyAyICk7XG5cblx0XHRcdFx0aWYgKCBnZW9JbmZvLmNvbG9yICkge1xuXG5cdFx0XHRcdFx0dmFyIGRhdGEgPSBnZXREYXRhKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIGdlb0luZm8uY29sb3IgKTtcblxuXHRcdFx0XHRcdGZhY2VDb2xvcnMucHVzaCggZGF0YVsgMCBdLCBkYXRhWyAxIF0sIGRhdGFbIDIgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGdlb0luZm8uc2tlbGV0b24gKSB7XG5cblx0XHRcdFx0XHRpZiAoIGdlb0luZm8ud2VpZ2h0VGFibGVbIHZlcnRleEluZGV4IF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Z2VvSW5mby53ZWlnaHRUYWJsZVsgdmVydGV4SW5kZXggXS5mb3JFYWNoKCBmdW5jdGlvbiAoIHd0ICkge1xuXG5cdFx0XHRcdFx0XHRcdHdlaWdodHMucHVzaCggd3Qud2VpZ2h0ICk7XG5cdFx0XHRcdFx0XHRcdHdlaWdodEluZGljZXMucHVzaCggd3QuaWQgKTtcblxuXHRcdFx0XHRcdFx0fSApO1xuXG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIHdlaWdodHMubGVuZ3RoID4gNCApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCAhIGRpc3BsYXllZFdlaWdodHNXYXJuaW5nICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogVmVydGV4IGhhcyBtb3JlIHRoYW4gNCBza2lubmluZyB3ZWlnaHRzIGFzc2lnbmVkIHRvIHZlcnRleC4gRGVsZXRpbmcgYWRkaXRpb25hbCB3ZWlnaHRzLicgKTtcblx0XHRcdFx0XHRcdFx0ZGlzcGxheWVkV2VpZ2h0c1dhcm5pbmcgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciB3SW5kZXggPSBbIDAsIDAsIDAsIDAgXTtcblx0XHRcdFx0XHRcdHZhciBXZWlnaHQgPSBbIDAsIDAsIDAsIDAgXTtcblxuXHRcdFx0XHRcdFx0d2VpZ2h0cy5mb3JFYWNoKCBmdW5jdGlvbiAoIHdlaWdodCwgd2VpZ2h0SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGN1cnJlbnRXZWlnaHQgPSB3ZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdHZhciBjdXJyZW50SW5kZXggPSB3ZWlnaHRJbmRpY2VzWyB3ZWlnaHRJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdFdlaWdodC5mb3JFYWNoKCBmdW5jdGlvbiAoIGNvbXBhcmVkV2VpZ2h0LCBjb21wYXJlZFdlaWdodEluZGV4LCBjb21wYXJlZFdlaWdodEFycmF5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjdXJyZW50V2VpZ2h0ID4gY29tcGFyZWRXZWlnaHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBhcmVkV2VpZ2h0QXJyYXlbIGNvbXBhcmVkV2VpZ2h0SW5kZXggXSA9IGN1cnJlbnRXZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50V2VpZ2h0ID0gY29tcGFyZWRXZWlnaHQ7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHZhciB0bXAgPSB3SW5kZXhbIGNvbXBhcmVkV2VpZ2h0SW5kZXggXTtcblx0XHRcdFx0XHRcdFx0XHRcdHdJbmRleFsgY29tcGFyZWRXZWlnaHRJbmRleCBdID0gY3VycmVudEluZGV4O1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudEluZGV4ID0gdG1wO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0XHR3ZWlnaHRJbmRpY2VzID0gd0luZGV4O1xuXHRcdFx0XHRcdFx0d2VpZ2h0cyA9IFdlaWdodDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGlmIHRoZSB3ZWlnaHQgYXJyYXkgaXMgc2hvcnRlciB0aGFuIDQgcGFkIHdpdGggMHNcblx0XHRcdFx0XHR3aGlsZSAoIHdlaWdodHMubGVuZ3RoIDwgNCApIHtcblxuXHRcdFx0XHRcdFx0d2VpZ2h0cy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0XHR3ZWlnaHRJbmRpY2VzLnB1c2goIDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDQ7ICsrIGkgKSB7XG5cblx0XHRcdFx0XHRcdGZhY2VXZWlnaHRzLnB1c2goIHdlaWdodHNbIGkgXSApO1xuXHRcdFx0XHRcdFx0ZmFjZVdlaWdodEluZGljZXMucHVzaCggd2VpZ2h0SW5kaWNlc1sgaSBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZ2VvSW5mby5ub3JtYWwgKSB7XG5cblx0XHRcdFx0XHR2YXIgZGF0YSA9IGdldERhdGEoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgZ2VvSW5mby5ub3JtYWwgKTtcblxuXHRcdFx0XHRcdGZhY2VOb3JtYWxzLnB1c2goIGRhdGFbIDAgXSwgZGF0YVsgMSBdLCBkYXRhWyAyIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBnZW9JbmZvLm1hdGVyaWFsICYmIGdlb0luZm8ubWF0ZXJpYWwubWFwcGluZ1R5cGUgIT09ICdBbGxTYW1lJyApIHtcblxuXHRcdFx0XHRcdHZhciBtYXRlcmlhbEluZGV4ID0gZ2V0RGF0YSggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBnZW9JbmZvLm1hdGVyaWFsIClbIDAgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBnZW9JbmZvLnV2ICkge1xuXG5cdFx0XHRcdFx0Z2VvSW5mby51di5mb3JFYWNoKCBmdW5jdGlvbiAoIHV2LCBpICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgZGF0YSA9IGdldERhdGEoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgdXYgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBmYWNlVVZzWyBpIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRmYWNlVVZzWyBpIF0gPSBbXTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRmYWNlVVZzWyBpIF0ucHVzaCggZGF0YVsgMCBdICk7XG5cdFx0XHRcdFx0XHRmYWNlVVZzWyBpIF0ucHVzaCggZGF0YVsgMSBdICk7XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZhY2VMZW5ndGggKys7XG5cblx0XHRcdFx0aWYgKCBlbmRPZkZhY2UgKSB7XG5cblx0XHRcdFx0XHRzZWxmLmdlbkZhY2UoIGJ1ZmZlcnMsIGdlb0luZm8sIGZhY2VQb3NpdGlvbkluZGV4ZXMsIG1hdGVyaWFsSW5kZXgsIGZhY2VOb3JtYWxzLCBmYWNlQ29sb3JzLCBmYWNlVVZzLCBmYWNlV2VpZ2h0cywgZmFjZVdlaWdodEluZGljZXMsIGZhY2VMZW5ndGggKTtcblxuXHRcdFx0XHRcdHBvbHlnb25JbmRleCArKztcblx0XHRcdFx0XHRmYWNlTGVuZ3RoID0gMDtcblxuXHRcdFx0XHRcdC8vIHJlc2V0IGFycmF5cyBmb3IgdGhlIG5leHQgZmFjZVxuXHRcdFx0XHRcdGZhY2VQb3NpdGlvbkluZGV4ZXMgPSBbXTtcblx0XHRcdFx0XHRmYWNlTm9ybWFscyA9IFtdO1xuXHRcdFx0XHRcdGZhY2VDb2xvcnMgPSBbXTtcblx0XHRcdFx0XHRmYWNlVVZzID0gW107XG5cdFx0XHRcdFx0ZmFjZVdlaWdodHMgPSBbXTtcblx0XHRcdFx0XHRmYWNlV2VpZ2h0SW5kaWNlcyA9IFtdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm4gYnVmZmVycztcblxuXHRcdH0sXG5cblx0XHQvLyBHZW5lcmF0ZSBkYXRhIGZvciBhIHNpbmdsZSBmYWNlIGluIGEgZ2VvbWV0cnkuIElmIHRoZSBmYWNlIGlzIGEgcXVhZCB0aGVuIHNwbGl0IGl0IGludG8gMiB0cmlzXG5cdFx0Z2VuRmFjZTogZnVuY3Rpb24gKCBidWZmZXJzLCBnZW9JbmZvLCBmYWNlUG9zaXRpb25JbmRleGVzLCBtYXRlcmlhbEluZGV4LCBmYWNlTm9ybWFscywgZmFjZUNvbG9ycywgZmFjZVVWcywgZmFjZVdlaWdodHMsIGZhY2VXZWlnaHRJbmRpY2VzLCBmYWNlTGVuZ3RoICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDI7IGkgPCBmYWNlTGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGJ1ZmZlcnMudmVydGV4LnB1c2goIGdlb0luZm8udmVydGV4UG9zaXRpb25zWyBmYWNlUG9zaXRpb25JbmRleGVzWyAwIF0gXSApO1xuXHRcdFx0XHRidWZmZXJzLnZlcnRleC5wdXNoKCBnZW9JbmZvLnZlcnRleFBvc2l0aW9uc1sgZmFjZVBvc2l0aW9uSW5kZXhlc1sgMSBdIF0gKTtcblx0XHRcdFx0YnVmZmVycy52ZXJ0ZXgucHVzaCggZ2VvSW5mby52ZXJ0ZXhQb3NpdGlvbnNbIGZhY2VQb3NpdGlvbkluZGV4ZXNbIDIgXSBdICk7XG5cblx0XHRcdFx0YnVmZmVycy52ZXJ0ZXgucHVzaCggZ2VvSW5mby52ZXJ0ZXhQb3NpdGlvbnNbIGZhY2VQb3NpdGlvbkluZGV4ZXNbICggaSAtIDEgKSAqIDMgXSBdICk7XG5cdFx0XHRcdGJ1ZmZlcnMudmVydGV4LnB1c2goIGdlb0luZm8udmVydGV4UG9zaXRpb25zWyBmYWNlUG9zaXRpb25JbmRleGVzWyAoIGkgLSAxICkgKiAzICsgMSBdIF0gKTtcblx0XHRcdFx0YnVmZmVycy52ZXJ0ZXgucHVzaCggZ2VvSW5mby52ZXJ0ZXhQb3NpdGlvbnNbIGZhY2VQb3NpdGlvbkluZGV4ZXNbICggaSAtIDEgKSAqIDMgKyAyIF0gXSApO1xuXG5cdFx0XHRcdGJ1ZmZlcnMudmVydGV4LnB1c2goIGdlb0luZm8udmVydGV4UG9zaXRpb25zWyBmYWNlUG9zaXRpb25JbmRleGVzWyBpICogMyBdIF0gKTtcblx0XHRcdFx0YnVmZmVycy52ZXJ0ZXgucHVzaCggZ2VvSW5mby52ZXJ0ZXhQb3NpdGlvbnNbIGZhY2VQb3NpdGlvbkluZGV4ZXNbIGkgKiAzICsgMSBdIF0gKTtcblx0XHRcdFx0YnVmZmVycy52ZXJ0ZXgucHVzaCggZ2VvSW5mby52ZXJ0ZXhQb3NpdGlvbnNbIGZhY2VQb3NpdGlvbkluZGV4ZXNbIGkgKiAzICsgMiBdIF0gKTtcblxuXHRcdFx0XHRpZiAoIGdlb0luZm8uc2tlbGV0b24gKSB7XG5cblx0XHRcdFx0XHRidWZmZXJzLnZlcnRleFdlaWdodHMucHVzaCggZmFjZVdlaWdodHNbIDAgXSApO1xuXHRcdFx0XHRcdGJ1ZmZlcnMudmVydGV4V2VpZ2h0cy5wdXNoKCBmYWNlV2VpZ2h0c1sgMSBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy52ZXJ0ZXhXZWlnaHRzLnB1c2goIGZhY2VXZWlnaHRzWyAyIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLnZlcnRleFdlaWdodHMucHVzaCggZmFjZVdlaWdodHNbIDMgXSApO1xuXG5cdFx0XHRcdFx0YnVmZmVycy52ZXJ0ZXhXZWlnaHRzLnB1c2goIGZhY2VXZWlnaHRzWyAoIGkgLSAxICkgKiA0IF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLnZlcnRleFdlaWdodHMucHVzaCggZmFjZVdlaWdodHNbICggaSAtIDEgKSAqIDQgKyAxIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLnZlcnRleFdlaWdodHMucHVzaCggZmFjZVdlaWdodHNbICggaSAtIDEgKSAqIDQgKyAyIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLnZlcnRleFdlaWdodHMucHVzaCggZmFjZVdlaWdodHNbICggaSAtIDEgKSAqIDQgKyAzIF0gKTtcblxuXHRcdFx0XHRcdGJ1ZmZlcnMudmVydGV4V2VpZ2h0cy5wdXNoKCBmYWNlV2VpZ2h0c1sgaSAqIDQgXSApO1xuXHRcdFx0XHRcdGJ1ZmZlcnMudmVydGV4V2VpZ2h0cy5wdXNoKCBmYWNlV2VpZ2h0c1sgaSAqIDQgKyAxIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLnZlcnRleFdlaWdodHMucHVzaCggZmFjZVdlaWdodHNbIGkgKiA0ICsgMiBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy52ZXJ0ZXhXZWlnaHRzLnB1c2goIGZhY2VXZWlnaHRzWyBpICogNCArIDMgXSApO1xuXG5cdFx0XHRcdFx0YnVmZmVycy53ZWlnaHRzSW5kaWNlcy5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgMCBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy53ZWlnaHRzSW5kaWNlcy5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgMSBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy53ZWlnaHRzSW5kaWNlcy5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgMiBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy53ZWlnaHRzSW5kaWNlcy5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgMyBdICk7XG5cblx0XHRcdFx0XHRidWZmZXJzLndlaWdodHNJbmRpY2VzLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyAoIGkgLSAxICkgKiA0IF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLndlaWdodHNJbmRpY2VzLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyAoIGkgLSAxICkgKiA0ICsgMSBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy53ZWlnaHRzSW5kaWNlcy5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgKCBpIC0gMSApICogNCArIDIgXSApO1xuXHRcdFx0XHRcdGJ1ZmZlcnMud2VpZ2h0c0luZGljZXMucHVzaCggZmFjZVdlaWdodEluZGljZXNbICggaSAtIDEgKSAqIDQgKyAzIF0gKTtcblxuXHRcdFx0XHRcdGJ1ZmZlcnMud2VpZ2h0c0luZGljZXMucHVzaCggZmFjZVdlaWdodEluZGljZXNbIGkgKiA0IF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLndlaWdodHNJbmRpY2VzLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyBpICogNCArIDEgXSApO1xuXHRcdFx0XHRcdGJ1ZmZlcnMud2VpZ2h0c0luZGljZXMucHVzaCggZmFjZVdlaWdodEluZGljZXNbIGkgKiA0ICsgMiBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy53ZWlnaHRzSW5kaWNlcy5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgaSAqIDQgKyAzIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBnZW9JbmZvLmNvbG9yICkge1xuXG5cdFx0XHRcdFx0YnVmZmVycy5jb2xvcnMucHVzaCggZmFjZUNvbG9yc1sgMCBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy5jb2xvcnMucHVzaCggZmFjZUNvbG9yc1sgMSBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy5jb2xvcnMucHVzaCggZmFjZUNvbG9yc1sgMiBdICk7XG5cblx0XHRcdFx0XHRidWZmZXJzLmNvbG9ycy5wdXNoKCBmYWNlQ29sb3JzWyAoIGkgLSAxICkgKiAzIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLmNvbG9ycy5wdXNoKCBmYWNlQ29sb3JzWyAoIGkgLSAxICkgKiAzICsgMSBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy5jb2xvcnMucHVzaCggZmFjZUNvbG9yc1sgKCBpIC0gMSApICogMyArIDIgXSApO1xuXG5cdFx0XHRcdFx0YnVmZmVycy5jb2xvcnMucHVzaCggZmFjZUNvbG9yc1sgaSAqIDMgXSApO1xuXHRcdFx0XHRcdGJ1ZmZlcnMuY29sb3JzLnB1c2goIGZhY2VDb2xvcnNbIGkgKiAzICsgMSBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy5jb2xvcnMucHVzaCggZmFjZUNvbG9yc1sgaSAqIDMgKyAyIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBnZW9JbmZvLm1hdGVyaWFsICYmIGdlb0luZm8ubWF0ZXJpYWwubWFwcGluZ1R5cGUgIT09ICdBbGxTYW1lJyApIHtcblxuXHRcdFx0XHRcdGJ1ZmZlcnMubWF0ZXJpYWxJbmRleC5wdXNoKCBtYXRlcmlhbEluZGV4ICk7XG5cdFx0XHRcdFx0YnVmZmVycy5tYXRlcmlhbEluZGV4LnB1c2goIG1hdGVyaWFsSW5kZXggKTtcblx0XHRcdFx0XHRidWZmZXJzLm1hdGVyaWFsSW5kZXgucHVzaCggbWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGdlb0luZm8ubm9ybWFsICkge1xuXG5cdFx0XHRcdFx0YnVmZmVycy5ub3JtYWwucHVzaCggZmFjZU5vcm1hbHNbIDAgXSApO1xuXHRcdFx0XHRcdGJ1ZmZlcnMubm9ybWFsLnB1c2goIGZhY2VOb3JtYWxzWyAxIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLm5vcm1hbC5wdXNoKCBmYWNlTm9ybWFsc1sgMiBdICk7XG5cblx0XHRcdFx0XHRidWZmZXJzLm5vcm1hbC5wdXNoKCBmYWNlTm9ybWFsc1sgKCBpIC0gMSApICogMyBdICk7XG5cdFx0XHRcdFx0YnVmZmVycy5ub3JtYWwucHVzaCggZmFjZU5vcm1hbHNbICggaSAtIDEgKSAqIDMgKyAxIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLm5vcm1hbC5wdXNoKCBmYWNlTm9ybWFsc1sgKCBpIC0gMSApICogMyArIDIgXSApO1xuXG5cdFx0XHRcdFx0YnVmZmVycy5ub3JtYWwucHVzaCggZmFjZU5vcm1hbHNbIGkgKiAzIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLm5vcm1hbC5wdXNoKCBmYWNlTm9ybWFsc1sgaSAqIDMgKyAxIF0gKTtcblx0XHRcdFx0XHRidWZmZXJzLm5vcm1hbC5wdXNoKCBmYWNlTm9ybWFsc1sgaSAqIDMgKyAyIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBnZW9JbmZvLnV2ICkge1xuXG5cdFx0XHRcdFx0Z2VvSW5mby51di5mb3JFYWNoKCBmdW5jdGlvbiAoIHV2LCBqICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGJ1ZmZlcnMudXZzWyBqIF0gPT09IHVuZGVmaW5lZCApIGJ1ZmZlcnMudXZzWyBqIF0gPSBbXTtcblxuXHRcdFx0XHRcdFx0YnVmZmVycy51dnNbIGogXS5wdXNoKCBmYWNlVVZzWyBqIF1bIDAgXSApO1xuXHRcdFx0XHRcdFx0YnVmZmVycy51dnNbIGogXS5wdXNoKCBmYWNlVVZzWyBqIF1bIDEgXSApO1xuXG5cdFx0XHRcdFx0XHRidWZmZXJzLnV2c1sgaiBdLnB1c2goIGZhY2VVVnNbIGogXVsgKCBpIC0gMSApICogMiBdICk7XG5cdFx0XHRcdFx0XHRidWZmZXJzLnV2c1sgaiBdLnB1c2goIGZhY2VVVnNbIGogXVsgKCBpIC0gMSApICogMiArIDEgXSApO1xuXG5cdFx0XHRcdFx0XHRidWZmZXJzLnV2c1sgaiBdLnB1c2goIGZhY2VVVnNbIGogXVsgaSAqIDIgXSApO1xuXHRcdFx0XHRcdFx0YnVmZmVycy51dnNbIGogXS5wdXNoKCBmYWNlVVZzWyBqIF1bIGkgKiAyICsgMSBdICk7XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0YWRkTW9ycGhUYXJnZXRzOiBmdW5jdGlvbiAoIHBhcmVudEdlbywgcGFyZW50R2VvTm9kZSwgbW9ycGhUYXJnZXQsIHByZVRyYW5zZm9ybSApIHtcblxuXHRcdFx0aWYgKCBtb3JwaFRhcmdldCA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdFx0cGFyZW50R2VvLm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiA9IFtdO1xuXHRcdFx0Ly8gcGFyZW50R2VvLm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgPSBbXTsgLy8gbm90IGltcGxlbWVudGVkXG5cblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdG1vcnBoVGFyZ2V0LnJhd1RhcmdldHMuZm9yRWFjaCggZnVuY3Rpb24gKCByYXdUYXJnZXQgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoR2VvTm9kZSA9IGZieFRyZWUuT2JqZWN0cy5HZW9tZXRyeVsgcmF3VGFyZ2V0Lmdlb0lEIF07XG5cblx0XHRcdFx0aWYgKCBtb3JwaEdlb05vZGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHNlbGYuZ2VuTW9ycGhHZW9tZXRyeSggcGFyZW50R2VvLCBwYXJlbnRHZW9Ob2RlLCBtb3JwaEdlb05vZGUsIHByZVRyYW5zZm9ybSwgcmF3VGFyZ2V0Lm5hbWUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0XHQvLyBhIG1vcnBoIGdlb21ldHJ5IG5vZGUgaXMgc2ltaWxhciB0byBhIHN0YW5kYXJkICBub2RlLCBhbmQgdGhlIG5vZGUgaXMgYWxzbyBjb250YWluZWRcblx0XHQvLyBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnksIGhvd2V2ZXIgaXQgY2FuIG9ubHkgaGF2ZSBhdHRyaWJ1dGVzIGZvciBwb3NpdGlvbiwgbm9ybWFsXG5cdFx0Ly8gYW5kIGEgc3BlY2lhbCBhdHRyaWJ1dGUgSW5kZXggZGVmaW5pbmcgd2hpY2ggdmVydGljZXMgb2YgdGhlIG9yaWdpbmFsIGdlb21ldHJ5IGFyZSBhZmZlY3RlZFxuXHRcdC8vIE5vcm1hbCBhbmQgcG9zaXRpb24gYXR0cmlidXRlcyBvbmx5IGhhdmUgZGF0YSBmb3IgdGhlIHZlcnRpY2VzIHRoYXQgYXJlIGFmZmVjdGVkIGJ5IHRoZSBtb3JwaFxuXHRcdGdlbk1vcnBoR2VvbWV0cnk6IGZ1bmN0aW9uICggcGFyZW50R2VvLCBwYXJlbnRHZW9Ob2RlLCBtb3JwaEdlb05vZGUsIHByZVRyYW5zZm9ybSwgbmFtZSApIHtcblxuXHRcdFx0dmFyIG1vcnBoR2VvID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0XHRpZiAoIG1vcnBoR2VvTm9kZS5hdHRyTmFtZSApIG1vcnBoR2VvLm5hbWUgPSBtb3JwaEdlb05vZGUuYXR0ck5hbWU7XG5cblx0XHRcdHZhciB2ZXJ0ZXhJbmRpY2VzID0gKCBwYXJlbnRHZW9Ob2RlLlBvbHlnb25WZXJ0ZXhJbmRleCAhPT0gdW5kZWZpbmVkICkgPyBwYXJlbnRHZW9Ob2RlLlBvbHlnb25WZXJ0ZXhJbmRleC5hIDogW107XG5cblx0XHRcdC8vIG1ha2UgYSBjb3B5IG9mIHRoZSBwYXJlbnQncyB2ZXJ0ZXggcG9zaXRpb25zXG5cdFx0XHR2YXIgdmVydGV4UG9zaXRpb25zID0gKCBwYXJlbnRHZW9Ob2RlLlZlcnRpY2VzICE9PSB1bmRlZmluZWQgKSA/IHBhcmVudEdlb05vZGUuVmVydGljZXMuYS5zbGljZSgpIDogW107XG5cblx0XHRcdHZhciBtb3JwaFBvc2l0aW9ucyA9ICggbW9ycGhHZW9Ob2RlLlZlcnRpY2VzICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoR2VvTm9kZS5WZXJ0aWNlcy5hIDogW107XG5cdFx0XHR2YXIgaW5kaWNlcyA9ICggbW9ycGhHZW9Ob2RlLkluZGV4ZXMgIT09IHVuZGVmaW5lZCApID8gbW9ycGhHZW9Ob2RlLkluZGV4ZXMuYSA6IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgbW9ycGhJbmRleCA9IGluZGljZXNbIGkgXSAqIDM7XG5cblx0XHRcdFx0Ly8gRkJYIGZvcm1hdCB1c2VzIGJsZW5kIHNoYXBlcyByYXRoZXIgdGhhbiBtb3JwaCB0YXJnZXRzLiBUaGlzIGNhbiBiZSBjb252ZXJ0ZWRcblx0XHRcdFx0Ly8gYnkgYWRkaXRpdmVseSBjb21iaW5pbmcgdGhlIGJsZW5kIHNoYXBlIHBvc2l0aW9ucyB3aXRoIHRoZSBvcmlnaW5hbCBnZW9tZXRyeSdzIHBvc2l0aW9uc1xuXHRcdFx0XHR2ZXJ0ZXhQb3NpdGlvbnNbIG1vcnBoSW5kZXggXSArPSBtb3JwaFBvc2l0aW9uc1sgaSAqIDMgXTtcblx0XHRcdFx0dmVydGV4UG9zaXRpb25zWyBtb3JwaEluZGV4ICsgMSBdICs9IG1vcnBoUG9zaXRpb25zWyBpICogMyArIDEgXTtcblx0XHRcdFx0dmVydGV4UG9zaXRpb25zWyBtb3JwaEluZGV4ICsgMiBdICs9IG1vcnBoUG9zaXRpb25zWyBpICogMyArIDIgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUT0RPOiBhZGQgbW9ycGggbm9ybWFsIHN1cHBvcnRcblx0XHRcdHZhciBtb3JwaEdlb0luZm8gPSB7XG5cdFx0XHRcdHZlcnRleEluZGljZXM6IHZlcnRleEluZGljZXMsXG5cdFx0XHRcdHZlcnRleFBvc2l0aW9uczogdmVydGV4UG9zaXRpb25zLFxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIG1vcnBoQnVmZmVycyA9IHRoaXMuZ2VuQnVmZmVycyggbW9ycGhHZW9JbmZvICk7XG5cblx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBtb3JwaEJ1ZmZlcnMudmVydGV4LCAzICk7XG5cdFx0XHRwb3NpdGlvbkF0dHJpYnV0ZS5uYW1lID0gbmFtZSB8fCBtb3JwaEdlb05vZGUuYXR0ck5hbWU7XG5cblx0XHRcdHByZVRyYW5zZm9ybS5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSApO1xuXG5cdFx0XHRwYXJlbnRHZW8ubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLnB1c2goIHBvc2l0aW9uQXR0cmlidXRlICk7XG5cblx0XHR9LFxuXG5cdFx0Ly8gUGFyc2Ugbm9ybWFsIGZyb20gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5LkxheWVyRWxlbWVudE5vcm1hbCBpZiBpdCBleGlzdHNcblx0XHRwYXJzZU5vcm1hbHM6IGZ1bmN0aW9uICggTm9ybWFsTm9kZSApIHtcblxuXHRcdFx0dmFyIG1hcHBpbmdUeXBlID0gTm9ybWFsTm9kZS5NYXBwaW5nSW5mb3JtYXRpb25UeXBlO1xuXHRcdFx0dmFyIHJlZmVyZW5jZVR5cGUgPSBOb3JtYWxOb2RlLlJlZmVyZW5jZUluZm9ybWF0aW9uVHlwZTtcblx0XHRcdHZhciBidWZmZXIgPSBOb3JtYWxOb2RlLk5vcm1hbHMuYTtcblx0XHRcdHZhciBpbmRleEJ1ZmZlciA9IFtdO1xuXHRcdFx0aWYgKCByZWZlcmVuY2VUeXBlID09PSAnSW5kZXhUb0RpcmVjdCcgKSB7XG5cblx0XHRcdFx0aWYgKCAnTm9ybWFsSW5kZXgnIGluIE5vcm1hbE5vZGUgKSB7XG5cblx0XHRcdFx0XHRpbmRleEJ1ZmZlciA9IE5vcm1hbE5vZGUuTm9ybWFsSW5kZXguYTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCAnTm9ybWFsc0luZGV4JyBpbiBOb3JtYWxOb2RlICkge1xuXG5cdFx0XHRcdFx0aW5kZXhCdWZmZXIgPSBOb3JtYWxOb2RlLk5vcm1hbHNJbmRleC5hO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRkYXRhU2l6ZTogMyxcblx0XHRcdFx0YnVmZmVyOiBidWZmZXIsXG5cdFx0XHRcdGluZGljZXM6IGluZGV4QnVmZmVyLFxuXHRcdFx0XHRtYXBwaW5nVHlwZTogbWFwcGluZ1R5cGUsXG5cdFx0XHRcdHJlZmVyZW5jZVR5cGU6IHJlZmVyZW5jZVR5cGVcblx0XHRcdH07XG5cblx0XHR9LFxuXG5cdFx0Ly8gUGFyc2UgVVZzIGZyb20gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5LkxheWVyRWxlbWVudFVWIGlmIGl0IGV4aXN0c1xuXHRcdHBhcnNlVVZzOiBmdW5jdGlvbiAoIFVWTm9kZSApIHtcblxuXHRcdFx0dmFyIG1hcHBpbmdUeXBlID0gVVZOb2RlLk1hcHBpbmdJbmZvcm1hdGlvblR5cGU7XG5cdFx0XHR2YXIgcmVmZXJlbmNlVHlwZSA9IFVWTm9kZS5SZWZlcmVuY2VJbmZvcm1hdGlvblR5cGU7XG5cdFx0XHR2YXIgYnVmZmVyID0gVVZOb2RlLlVWLmE7XG5cdFx0XHR2YXIgaW5kZXhCdWZmZXIgPSBbXTtcblx0XHRcdGlmICggcmVmZXJlbmNlVHlwZSA9PT0gJ0luZGV4VG9EaXJlY3QnICkge1xuXG5cdFx0XHRcdGluZGV4QnVmZmVyID0gVVZOb2RlLlVWSW5kZXguYTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRkYXRhU2l6ZTogMixcblx0XHRcdFx0YnVmZmVyOiBidWZmZXIsXG5cdFx0XHRcdGluZGljZXM6IGluZGV4QnVmZmVyLFxuXHRcdFx0XHRtYXBwaW5nVHlwZTogbWFwcGluZ1R5cGUsXG5cdFx0XHRcdHJlZmVyZW5jZVR5cGU6IHJlZmVyZW5jZVR5cGVcblx0XHRcdH07XG5cblx0XHR9LFxuXG5cdFx0Ly8gUGFyc2UgVmVydGV4IENvbG9ycyBmcm9tIEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeS5MYXllckVsZW1lbnRDb2xvciBpZiBpdCBleGlzdHNcblx0XHRwYXJzZVZlcnRleENvbG9yczogZnVuY3Rpb24gKCBDb2xvck5vZGUgKSB7XG5cblx0XHRcdHZhciBtYXBwaW5nVHlwZSA9IENvbG9yTm9kZS5NYXBwaW5nSW5mb3JtYXRpb25UeXBlO1xuXHRcdFx0dmFyIHJlZmVyZW5jZVR5cGUgPSBDb2xvck5vZGUuUmVmZXJlbmNlSW5mb3JtYXRpb25UeXBlO1xuXHRcdFx0dmFyIGJ1ZmZlciA9IENvbG9yTm9kZS5Db2xvcnMuYTtcblx0XHRcdHZhciBpbmRleEJ1ZmZlciA9IFtdO1xuXHRcdFx0aWYgKCByZWZlcmVuY2VUeXBlID09PSAnSW5kZXhUb0RpcmVjdCcgKSB7XG5cblx0XHRcdFx0aW5kZXhCdWZmZXIgPSBDb2xvck5vZGUuQ29sb3JJbmRleC5hO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGRhdGFTaXplOiA0LFxuXHRcdFx0XHRidWZmZXI6IGJ1ZmZlcixcblx0XHRcdFx0aW5kaWNlczogaW5kZXhCdWZmZXIsXG5cdFx0XHRcdG1hcHBpbmdUeXBlOiBtYXBwaW5nVHlwZSxcblx0XHRcdFx0cmVmZXJlbmNlVHlwZTogcmVmZXJlbmNlVHlwZVxuXHRcdFx0fTtcblxuXHRcdH0sXG5cblx0XHQvLyBQYXJzZSBtYXBwaW5nIGFuZCBtYXRlcmlhbCBkYXRhIGluIEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeS5MYXllckVsZW1lbnRNYXRlcmlhbCBpZiBpdCBleGlzdHNcblx0XHRwYXJzZU1hdGVyaWFsSW5kaWNlczogZnVuY3Rpb24gKCBNYXRlcmlhbE5vZGUgKSB7XG5cblx0XHRcdHZhciBtYXBwaW5nVHlwZSA9IE1hdGVyaWFsTm9kZS5NYXBwaW5nSW5mb3JtYXRpb25UeXBlO1xuXHRcdFx0dmFyIHJlZmVyZW5jZVR5cGUgPSBNYXRlcmlhbE5vZGUuUmVmZXJlbmNlSW5mb3JtYXRpb25UeXBlO1xuXG5cdFx0XHRpZiAoIG1hcHBpbmdUeXBlID09PSAnTm9NYXBwaW5nSW5mb3JtYXRpb24nICkge1xuXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZGF0YVNpemU6IDEsXG5cdFx0XHRcdFx0YnVmZmVyOiBbIDAgXSxcblx0XHRcdFx0XHRpbmRpY2VzOiBbIDAgXSxcblx0XHRcdFx0XHRtYXBwaW5nVHlwZTogJ0FsbFNhbWUnLFxuXHRcdFx0XHRcdHJlZmVyZW5jZVR5cGU6IHJlZmVyZW5jZVR5cGVcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWF0ZXJpYWxJbmRleEJ1ZmZlciA9IE1hdGVyaWFsTm9kZS5NYXRlcmlhbHMuYTtcblxuXHRcdFx0Ly8gU2luY2UgbWF0ZXJpYWxzIGFyZSBzdG9yZWQgYXMgaW5kaWNlcywgdGhlcmUncyBhIGJpdCBvZiBhIG1pc21hdGNoIGJldHdlZW4gRkJYIGFuZCB3aGF0XG5cdFx0XHQvLyB3ZSBleHBlY3QuU28gd2UgY3JlYXRlIGFuIGludGVybWVkaWF0ZSBidWZmZXIgdGhhdCBwb2ludHMgdG8gdGhlIGluZGV4IGluIHRoZSBidWZmZXIsXG5cdFx0XHQvLyBmb3IgY29uZm9ybWluZyB3aXRoIHRoZSBvdGhlciBmdW5jdGlvbnMgd2UndmUgd3JpdHRlbiBmb3Igb3RoZXIgZGF0YS5cblx0XHRcdHZhciBtYXRlcmlhbEluZGljZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbWF0ZXJpYWxJbmRleEJ1ZmZlci5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxJbmRpY2VzLnB1c2goIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRkYXRhU2l6ZTogMSxcblx0XHRcdFx0YnVmZmVyOiBtYXRlcmlhbEluZGV4QnVmZmVyLFxuXHRcdFx0XHRpbmRpY2VzOiBtYXRlcmlhbEluZGljZXMsXG5cdFx0XHRcdG1hcHBpbmdUeXBlOiBtYXBwaW5nVHlwZSxcblx0XHRcdFx0cmVmZXJlbmNlVHlwZTogcmVmZXJlbmNlVHlwZVxuXHRcdFx0fTtcblxuXHRcdH0sXG5cblx0XHQvLyBHZW5lcmF0ZSBhIE51cmJHZW9tZXRyeSBmcm9tIGEgbm9kZSBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnlcblx0XHRwYXJzZU51cmJzR2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvTm9kZSApIHtcblxuXHRcdFx0aWYgKCBOVVJCU0N1cnZlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkZCWExvYWRlcjogVGhlIGxvYWRlciByZWxpZXMgb24gTlVSQlNDdXJ2ZSBmb3IgYW55IG51cmJzIHByZXNlbnQgaW4gdGhlIG1vZGVsLiBOdXJicyB3aWxsIHNob3cgdXAgYXMgZW1wdHkgZ2VvbWV0cnkuJyApO1xuXHRcdFx0XHRyZXR1cm4gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG9yZGVyID0gcGFyc2VJbnQoIGdlb05vZGUuT3JkZXIgKTtcblxuXHRcdFx0aWYgKCBpc05hTiggb3JkZXIgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRkJYTG9hZGVyOiBJbnZhbGlkIE9yZGVyICVzIGdpdmVuIGZvciBnZW9tZXRyeSBJRDogJXMnLCBnZW9Ob2RlLk9yZGVyLCBnZW9Ob2RlLmlkICk7XG5cdFx0XHRcdHJldHVybiBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGVncmVlID0gb3JkZXIgLSAxO1xuXG5cdFx0XHR2YXIga25vdHMgPSBnZW9Ob2RlLktub3RWZWN0b3IuYTtcblx0XHRcdHZhciBjb250cm9sUG9pbnRzID0gW107XG5cdFx0XHR2YXIgcG9pbnRzVmFsdWVzID0gZ2VvTm9kZS5Qb2ludHMuYTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzVmFsdWVzLmxlbmd0aDsgaSA8IGw7IGkgKz0gNCApIHtcblxuXHRcdFx0XHRjb250cm9sUG9pbnRzLnB1c2goIG5ldyBWZWN0b3I0KCkuZnJvbUFycmF5KCBwb2ludHNWYWx1ZXMsIGkgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBzdGFydEtub3QsIGVuZEtub3Q7XG5cblx0XHRcdGlmICggZ2VvTm9kZS5Gb3JtID09PSAnQ2xvc2VkJyApIHtcblxuXHRcdFx0XHRjb250cm9sUG9pbnRzLnB1c2goIGNvbnRyb2xQb2ludHNbIDAgXSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBnZW9Ob2RlLkZvcm0gPT09ICdQZXJpb2RpYycgKSB7XG5cblx0XHRcdFx0c3RhcnRLbm90ID0gZGVncmVlO1xuXHRcdFx0XHRlbmRLbm90ID0ga25vdHMubGVuZ3RoIC0gMSAtIHN0YXJ0S25vdDtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBkZWdyZWU7ICsrIGkgKSB7XG5cblx0XHRcdFx0XHRjb250cm9sUG9pbnRzLnB1c2goIGNvbnRyb2xQb2ludHNbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY3VydmUgPSBuZXcgTlVSQlNDdXJ2ZSggZGVncmVlLCBrbm90cywgY29udHJvbFBvaW50cywgc3RhcnRLbm90LCBlbmRLbm90ICk7XG5cdFx0XHR2YXIgdmVydGljZXMgPSBjdXJ2ZS5nZXRQb2ludHMoIGNvbnRyb2xQb2ludHMubGVuZ3RoICogNyApO1xuXG5cdFx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSggdmVydGljZXMubGVuZ3RoICogMyApO1xuXG5cdFx0XHR2ZXJ0aWNlcy5mb3JFYWNoKCBmdW5jdGlvbiAoIHZlcnRleCwgaSApIHtcblxuXHRcdFx0XHR2ZXJ0ZXgudG9BcnJheSggcG9zaXRpb25zLCBpICogMyApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdFx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cblx0XHR9LFxuXG5cdH07XG5cblx0Ly8gcGFyc2UgYW5pbWF0aW9uIGRhdGEgZnJvbSBGQlhUcmVlXG5cdGZ1bmN0aW9uIEFuaW1hdGlvblBhcnNlcigpIHt9XG5cblx0QW5pbWF0aW9uUGFyc2VyLnByb3RvdHlwZSA9IHtcblxuXHRcdGNvbnN0cnVjdG9yOiBBbmltYXRpb25QYXJzZXIsXG5cblx0XHQvLyB0YWtlIHJhdyBhbmltYXRpb24gY2xpcHMgYW5kIHR1cm4gdGhlbSBpbnRvIHRocmVlLmpzIGFuaW1hdGlvbiBjbGlwc1xuXHRcdHBhcnNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHZhciBhbmltYXRpb25DbGlwcyA9IFtdO1xuXG5cdFx0XHR2YXIgcmF3Q2xpcHMgPSB0aGlzLnBhcnNlQ2xpcHMoKTtcblxuXHRcdFx0aWYgKCByYXdDbGlwcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBrZXkgaW4gcmF3Q2xpcHMgKSB7XG5cblx0XHRcdFx0XHR2YXIgcmF3Q2xpcCA9IHJhd0NsaXBzWyBrZXkgXTtcblxuXHRcdFx0XHRcdHZhciBjbGlwID0gdGhpcy5hZGRDbGlwKCByYXdDbGlwICk7XG5cblx0XHRcdFx0XHRhbmltYXRpb25DbGlwcy5wdXNoKCBjbGlwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhbmltYXRpb25DbGlwcztcblxuXHRcdH0sXG5cblx0XHRwYXJzZUNsaXBzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdC8vIHNpbmNlIHRoZSBhY3R1YWwgdHJhbnNmb3JtYXRpb24gZGF0YSBpcyBzdG9yZWQgaW4gRkJYVHJlZS5PYmplY3RzLkFuaW1hdGlvbkN1cnZlLFxuXHRcdFx0Ly8gaWYgdGhpcyBpcyB1bmRlZmluZWQgd2UgY2FuIHNhZmVseSBhc3N1bWUgdGhlcmUgYXJlIG5vIGFuaW1hdGlvbnNcblx0XHRcdGlmICggZmJ4VHJlZS5PYmplY3RzLkFuaW1hdGlvbkN1cnZlID09PSB1bmRlZmluZWQgKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0XHR2YXIgY3VydmVOb2Rlc01hcCA9IHRoaXMucGFyc2VBbmltYXRpb25DdXJ2ZU5vZGVzKCk7XG5cblx0XHRcdHRoaXMucGFyc2VBbmltYXRpb25DdXJ2ZXMoIGN1cnZlTm9kZXNNYXAgKTtcblxuXHRcdFx0dmFyIGxheWVyc01hcCA9IHRoaXMucGFyc2VBbmltYXRpb25MYXllcnMoIGN1cnZlTm9kZXNNYXAgKTtcblx0XHRcdHZhciByYXdDbGlwcyA9IHRoaXMucGFyc2VBbmltU3RhY2tzKCBsYXllcnNNYXAgKTtcblxuXHRcdFx0cmV0dXJuIHJhd0NsaXBzO1xuXG5cdFx0fSxcblxuXHRcdC8vIHBhcnNlIG5vZGVzIGluIEZCWFRyZWUuT2JqZWN0cy5BbmltYXRpb25DdXJ2ZU5vZGVcblx0XHQvLyBlYWNoIEFuaW1hdGlvbkN1cnZlTm9kZSBob2xkcyBkYXRhIGZvciBhbiBhbmltYXRpb24gdHJhbnNmb3JtIGZvciBhIG1vZGVsIChlLmcuIGxlZnQgYXJtIHJvdGF0aW9uIClcblx0XHQvLyBhbmQgaXMgcmVmZXJlbmNlZCBieSBhbiBBbmltYXRpb25MYXllclxuXHRcdHBhcnNlQW5pbWF0aW9uQ3VydmVOb2RlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgcmF3Q3VydmVOb2RlcyA9IGZieFRyZWUuT2JqZWN0cy5BbmltYXRpb25DdXJ2ZU5vZGU7XG5cblx0XHRcdHZhciBjdXJ2ZU5vZGVzTWFwID0gbmV3IE1hcCgpO1xuXG5cdFx0XHRmb3IgKCB2YXIgbm9kZUlEIGluIHJhd0N1cnZlTm9kZXMgKSB7XG5cblx0XHRcdFx0dmFyIHJhd0N1cnZlTm9kZSA9IHJhd0N1cnZlTm9kZXNbIG5vZGVJRCBdO1xuXG5cdFx0XHRcdGlmICggcmF3Q3VydmVOb2RlLmF0dHJOYW1lLm1hdGNoKCAvU3xSfFR8RGVmb3JtUGVyY2VudC8gKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHZhciBjdXJ2ZU5vZGUgPSB7XG5cblx0XHRcdFx0XHRcdGlkOiByYXdDdXJ2ZU5vZGUuaWQsXG5cdFx0XHRcdFx0XHRhdHRyOiByYXdDdXJ2ZU5vZGUuYXR0ck5hbWUsXG5cdFx0XHRcdFx0XHRjdXJ2ZXM6IHt9LFxuXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGN1cnZlTm9kZXNNYXAuc2V0KCBjdXJ2ZU5vZGUuaWQsIGN1cnZlTm9kZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY3VydmVOb2Rlc01hcDtcblxuXHRcdH0sXG5cblx0XHQvLyBwYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uQ3VydmUgYW5kIGNvbm5lY3QgdGhlbSB1cCB0b1xuXHRcdC8vIHByZXZpb3VzbHkgcGFyc2VkIEFuaW1hdGlvbkN1cnZlTm9kZXMuIEVhY2ggQW5pbWF0aW9uQ3VydmUgaG9sZHMgZGF0YSBmb3IgYSBzaW5nbGUgYW5pbWF0ZWRcblx0XHQvLyBheGlzICggZS5nLiB0aW1lcyBhbmQgdmFsdWVzIG9mIHggcm90YXRpb24pXG5cdFx0cGFyc2VBbmltYXRpb25DdXJ2ZXM6IGZ1bmN0aW9uICggY3VydmVOb2Rlc01hcCApIHtcblxuXHRcdFx0dmFyIHJhd0N1cnZlcyA9IGZieFRyZWUuT2JqZWN0cy5BbmltYXRpb25DdXJ2ZTtcblxuXHRcdFx0Ly8gVE9ETzogTWFueSB2YWx1ZXMgYXJlIGlkZW50aWNhbCB1cCB0byByb3VuZG9mZiBlcnJvciwgYnV0IHdvbid0IGJlIG9wdGltaXNlZFxuXHRcdFx0Ly8gZS5nLiBwb3NpdGlvbiB0aW1lczogWzAsIDAuNCwgMC4gOF1cblx0XHRcdC8vIHBvc2l0aW9uIHZhbHVlczogWzcuMjM1MzgzMzUwMjM0NzdlLTcsIDkzLjY3NTE4NjE1NzIyNjU2LCAtMC45OTgyNjk1NTc5NTI4ODA5LCA3LjIzNTM4MzM1MDIzNDc3ZS03LCA5My42NzUxODYxNTcyMjY1NiwgLTAuOTk4MjY5NTU3OTUyODgwOSwgNy4yMzUzODQ0ODcxMDMxNDdlLTcsIDkzLjY3NTIwOTA0NTQxMDE2LCAtMC45OTgyNjk1NTc5NTI4ODA5XVxuXHRcdFx0Ly8gY2xlYXJseSwgdGhpcyBzaG91bGQgYmUgb3B0aW1pc2VkIHRvXG5cdFx0XHQvLyB0aW1lczogWzBdLCBwb3NpdGlvbnMgWzcuMjM1MzgzMzUwMjM0NzdlLTcsIDkzLjY3NTE4NjE1NzIyNjU2LCAtMC45OTgyNjk1NTc5NTI4ODA5XVxuXHRcdFx0Ly8gdGhpcyBzaG93cyB1cCBpbiBuZWFybHkgZXZlcnkgRkJYIGZpbGUsIGFuZCBnZW5lcmFsbHkgdGltZSBhcnJheSBpcyBsZW5ndGggPiAxMDBcblxuXHRcdFx0Zm9yICggdmFyIG5vZGVJRCBpbiByYXdDdXJ2ZXMgKSB7XG5cblx0XHRcdFx0dmFyIGFuaW1hdGlvbkN1cnZlID0ge1xuXG5cdFx0XHRcdFx0aWQ6IHJhd0N1cnZlc1sgbm9kZUlEIF0uaWQsXG5cdFx0XHRcdFx0dGltZXM6IHJhd0N1cnZlc1sgbm9kZUlEIF0uS2V5VGltZS5hLm1hcCggY29udmVydEZCWFRpbWVUb1NlY29uZHMgKSxcblx0XHRcdFx0XHR2YWx1ZXM6IHJhd0N1cnZlc1sgbm9kZUlEIF0uS2V5VmFsdWVGbG9hdC5hLFxuXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dmFyIHJlbGF0aW9uc2hpcHMgPSBjb25uZWN0aW9ucy5nZXQoIGFuaW1hdGlvbkN1cnZlLmlkICk7XG5cblx0XHRcdFx0aWYgKCByZWxhdGlvbnNoaXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR2YXIgYW5pbWF0aW9uQ3VydmVJRCA9IHJlbGF0aW9uc2hpcHMucGFyZW50c1sgMCBdLklEO1xuXHRcdFx0XHRcdHZhciBhbmltYXRpb25DdXJ2ZVJlbGF0aW9uc2hpcCA9IHJlbGF0aW9uc2hpcHMucGFyZW50c1sgMCBdLnJlbGF0aW9uc2hpcDtcblxuXHRcdFx0XHRcdGlmICggYW5pbWF0aW9uQ3VydmVSZWxhdGlvbnNoaXAubWF0Y2goIC9YLyApICkge1xuXG5cdFx0XHRcdFx0XHRjdXJ2ZU5vZGVzTWFwLmdldCggYW5pbWF0aW9uQ3VydmVJRCApLmN1cnZlc1sgJ3gnIF0gPSBhbmltYXRpb25DdXJ2ZTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFuaW1hdGlvbkN1cnZlUmVsYXRpb25zaGlwLm1hdGNoKCAvWS8gKSApIHtcblxuXHRcdFx0XHRcdFx0Y3VydmVOb2Rlc01hcC5nZXQoIGFuaW1hdGlvbkN1cnZlSUQgKS5jdXJ2ZXNbICd5JyBdID0gYW5pbWF0aW9uQ3VydmU7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhbmltYXRpb25DdXJ2ZVJlbGF0aW9uc2hpcC5tYXRjaCggL1ovICkgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnZlTm9kZXNNYXAuZ2V0KCBhbmltYXRpb25DdXJ2ZUlEICkuY3VydmVzWyAneicgXSA9IGFuaW1hdGlvbkN1cnZlO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggYW5pbWF0aW9uQ3VydmVSZWxhdGlvbnNoaXAubWF0Y2goIC9kfERlZm9ybVBlcmNlbnQvICkgJiYgY3VydmVOb2Rlc01hcC5oYXMoIGFuaW1hdGlvbkN1cnZlSUQgKSApIHtcblxuXHRcdFx0XHRcdFx0Y3VydmVOb2Rlc01hcC5nZXQoIGFuaW1hdGlvbkN1cnZlSUQgKS5jdXJ2ZXNbICdtb3JwaCcgXSA9IGFuaW1hdGlvbkN1cnZlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8vIHBhcnNlIG5vZGVzIGluIEZCWFRyZWUuT2JqZWN0cy5BbmltYXRpb25MYXllci4gRWFjaCBsYXllcnMgaG9sZHMgcmVmZXJlbmNlc1xuXHRcdC8vIHRvIHZhcmlvdXMgQW5pbWF0aW9uQ3VydmVOb2RlcyBhbmQgaXMgcmVmZXJlbmNlZCBieSBhbiBBbmltYXRpb25TdGFjayBub2RlXG5cdFx0Ly8gbm90ZTogdGhlb3JldGljYWxseSBhIHN0YWNrIGNhbiBoYXZlIG11bHRpcGxlIGxheWVycywgaG93ZXZlciBpbiBwcmFjdGljZSB0aGVyZSBhbHdheXMgc2VlbXMgdG8gYmUgb25lIHBlciBzdGFja1xuXHRcdHBhcnNlQW5pbWF0aW9uTGF5ZXJzOiBmdW5jdGlvbiAoIGN1cnZlTm9kZXNNYXAgKSB7XG5cblx0XHRcdHZhciByYXdMYXllcnMgPSBmYnhUcmVlLk9iamVjdHMuQW5pbWF0aW9uTGF5ZXI7XG5cblx0XHRcdHZhciBsYXllcnNNYXAgPSBuZXcgTWFwKCk7XG5cblx0XHRcdGZvciAoIHZhciBub2RlSUQgaW4gcmF3TGF5ZXJzICkge1xuXG5cdFx0XHRcdHZhciBsYXllckN1cnZlTm9kZXMgPSBbXTtcblxuXHRcdFx0XHR2YXIgY29ubmVjdGlvbiA9IGNvbm5lY3Rpb25zLmdldCggcGFyc2VJbnQoIG5vZGVJRCApICk7XG5cblx0XHRcdFx0aWYgKCBjb25uZWN0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBhbGwgdGhlIGFuaW1hdGlvbkN1cnZlTm9kZXMgdXNlZCBpbiB0aGUgbGF5ZXJcblx0XHRcdFx0XHR2YXIgY2hpbGRyZW4gPSBjb25uZWN0aW9uLmNoaWxkcmVuO1xuXG5cdFx0XHRcdFx0Y2hpbGRyZW4uZm9yRWFjaCggZnVuY3Rpb24gKCBjaGlsZCwgaSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBjdXJ2ZU5vZGVzTWFwLmhhcyggY2hpbGQuSUQgKSApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgY3VydmVOb2RlID0gY3VydmVOb2Rlc01hcC5nZXQoIGNoaWxkLklEICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gY2hlY2sgdGhhdCB0aGUgY3VydmVzIGFyZSBkZWZpbmVkIGZvciBhdCBsZWFzdCBvbmUgYXhpcywgb3RoZXJ3aXNlIGlnbm9yZSB0aGUgY3VydmVOb2RlXG5cdFx0XHRcdFx0XHRcdGlmICggY3VydmVOb2RlLmN1cnZlcy54ICE9PSB1bmRlZmluZWQgfHwgY3VydmVOb2RlLmN1cnZlcy55ICE9PSB1bmRlZmluZWQgfHwgY3VydmVOb2RlLmN1cnZlcy56ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGxheWVyQ3VydmVOb2Rlc1sgaSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHZhciBtb2RlbElEID0gY29ubmVjdGlvbnMuZ2V0KCBjaGlsZC5JRCApLnBhcmVudHMuZmlsdGVyKCBmdW5jdGlvbiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcGFyZW50LnJlbGF0aW9uc2hpcCAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR9IClbIDAgXS5JRDtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBtb2RlbElEICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJhd01vZGVsID0gZmJ4VHJlZS5PYmplY3RzLk1vZGVsWyBtb2RlbElELnRvU3RyaW5nKCkgXTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgbm9kZSA9IHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZGVsTmFtZTogUHJvcGVydHlCaW5kaW5nLnNhbml0aXplTm9kZU5hbWUoIHJhd01vZGVsLmF0dHJOYW1lICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0SUQ6IHJhd01vZGVsLmlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGluaXRpYWxQb3NpdGlvbjogWyAwLCAwLCAwIF0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aW5pdGlhbFJvdGF0aW9uOiBbIDAsIDAsIDAgXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpbml0aWFsU2NhbGU6IFsgMSwgMSwgMSBdLFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0c2NlbmVHcmFwaC50cmF2ZXJzZSggZnVuY3Rpb24gKCBjaGlsZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggY2hpbGQuSUQgPT09IHJhd01vZGVsLmlkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLnRyYW5zZm9ybSA9IGNoaWxkLm1hdHJpeDtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBjaGlsZC51c2VyRGF0YS50cmFuc2Zvcm1EYXRhICkgbm9kZS5ldWxlck9yZGVyID0gY2hpbGQudXNlckRhdGEudHJhbnNmb3JtRGF0YS5ldWxlck9yZGVyO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoICEgbm9kZS50cmFuc2Zvcm0gKSBub2RlLnRyYW5zZm9ybSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaWYgdGhlIGFuaW1hdGVkIG1vZGVsIGlzIHByZSByb3RhdGVkLCB3ZSdsbCBoYXZlIHRvIGFwcGx5IHRoZSBwcmUgcm90YXRpb25zIHRvIGV2ZXJ5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuaW1hdGlvbiB2YWx1ZSBhcyB3ZWxsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggJ1ByZVJvdGF0aW9uJyBpbiByYXdNb2RlbCApIG5vZGUucHJlUm90YXRpb24gPSByYXdNb2RlbC5QcmVSb3RhdGlvbi52YWx1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAnUG9zdFJvdGF0aW9uJyBpbiByYXdNb2RlbCApIG5vZGUucG9zdFJvdGF0aW9uID0gcmF3TW9kZWwuUG9zdFJvdGF0aW9uLnZhbHVlO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxheWVyQ3VydmVOb2Rlc1sgaSBdID0gbm9kZTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBsYXllckN1cnZlTm9kZXNbIGkgXSApIGxheWVyQ3VydmVOb2Rlc1sgaSBdWyBjdXJ2ZU5vZGUuYXR0ciBdID0gY3VydmVOb2RlO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGN1cnZlTm9kZS5jdXJ2ZXMubW9ycGggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggbGF5ZXJDdXJ2ZU5vZGVzWyBpIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGRlZm9ybWVySUQgPSBjb25uZWN0aW9ucy5nZXQoIGNoaWxkLklEICkucGFyZW50cy5maWx0ZXIoIGZ1bmN0aW9uICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBwYXJlbnQucmVsYXRpb25zaGlwICE9PSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRcdFx0XHRcdH0gKVsgMCBdLklEO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgbW9ycGhlcklEID0gY29ubmVjdGlvbnMuZ2V0KCBkZWZvcm1lcklEICkucGFyZW50c1sgMCBdLklEO1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGdlb0lEID0gY29ubmVjdGlvbnMuZ2V0KCBtb3JwaGVySUQgKS5wYXJlbnRzWyAwIF0uSUQ7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIGFzc3VtaW5nIGdlb21ldHJ5IGlzIG5vdCB1c2VkIGluIG1vcmUgdGhhbiBvbmUgbW9kZWxcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBtb2RlbElEID0gY29ubmVjdGlvbnMuZ2V0KCBnZW9JRCApLnBhcmVudHNbIDAgXS5JRDtcblxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJhd01vZGVsID0gZmJ4VHJlZS5PYmplY3RzLk1vZGVsWyBtb2RlbElEIF07XG5cblx0XHRcdFx0XHRcdFx0XHRcdHZhciBub2RlID0ge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1vZGVsTmFtZTogUHJvcGVydHlCaW5kaW5nLnNhbml0aXplTm9kZU5hbWUoIHJhd01vZGVsLmF0dHJOYW1lICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1vcnBoTmFtZTogZmJ4VHJlZS5PYmplY3RzLkRlZm9ybWVyWyBkZWZvcm1lcklEIF0uYXR0ck5hbWUsXG5cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0XHRcdGxheWVyQ3VydmVOb2Rlc1sgaSBdID0gbm9kZTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGxheWVyQ3VydmVOb2Rlc1sgaSBdWyBjdXJ2ZU5vZGUuYXR0ciBdID0gY3VydmVOb2RlO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0bGF5ZXJzTWFwLnNldCggcGFyc2VJbnQoIG5vZGVJRCApLCBsYXllckN1cnZlTm9kZXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxheWVyc01hcDtcblxuXHRcdH0sXG5cblx0XHQvLyBwYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uU3RhY2suIFRoZXNlIGFyZSB0aGUgdG9wIGxldmVsIG5vZGUgaW4gdGhlIGFuaW1hdGlvblxuXHRcdC8vIGhpZXJhcmNoeS4gRWFjaCBTdGFjayBub2RlIHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBBbmltYXRpb25DbGlwXG5cdFx0cGFyc2VBbmltU3RhY2tzOiBmdW5jdGlvbiAoIGxheWVyc01hcCApIHtcblxuXHRcdFx0dmFyIHJhd1N0YWNrcyA9IGZieFRyZWUuT2JqZWN0cy5BbmltYXRpb25TdGFjaztcblxuXHRcdFx0Ly8gY29ubmVjdCB0aGUgc3RhY2tzIChjbGlwcykgdXAgdG8gdGhlIGxheWVyc1xuXHRcdFx0dmFyIHJhd0NsaXBzID0ge307XG5cblx0XHRcdGZvciAoIHZhciBub2RlSUQgaW4gcmF3U3RhY2tzICkge1xuXG5cdFx0XHRcdHZhciBjaGlsZHJlbiA9IGNvbm5lY3Rpb25zLmdldCggcGFyc2VJbnQoIG5vZGVJRCApICkuY2hpbGRyZW47XG5cblx0XHRcdFx0aWYgKCBjaGlsZHJlbi5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdFx0Ly8gaXQgc2VlbXMgbGlrZSBzdGFja3Mgd2lsbCBhbHdheXMgYmUgYXNzb2NpYXRlZCB3aXRoIGEgc2luZ2xlIGxheWVyLiBCdXQganVzdCBpbiBjYXNlIHRoZXJlIGFyZSBmaWxlc1xuXHRcdFx0XHRcdC8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBsYXllcnMgcGVyIHN0YWNrLCB3ZSdsbCBkaXNwbGF5IGEgd2FybmluZ1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogRW5jb3VudGVyZWQgYW4gYW5pbWF0aW9uIHN0YWNrIHdpdGggbXVsdGlwbGUgbGF5ZXJzLCB0aGlzIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLiBJZ25vcmluZyBzdWJzZXF1ZW50IGxheWVycy4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBsYXllciA9IGxheWVyc01hcC5nZXQoIGNoaWxkcmVuWyAwIF0uSUQgKTtcblxuXHRcdFx0XHRyYXdDbGlwc1sgbm9kZUlEIF0gPSB7XG5cblx0XHRcdFx0XHRuYW1lOiByYXdTdGFja3NbIG5vZGVJRCBdLmF0dHJOYW1lLFxuXHRcdFx0XHRcdGxheWVyOiBsYXllcixcblxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByYXdDbGlwcztcblxuXHRcdH0sXG5cblx0XHRhZGRDbGlwOiBmdW5jdGlvbiAoIHJhd0NsaXAgKSB7XG5cblx0XHRcdHZhciB0cmFja3MgPSBbXTtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0cmF3Q2xpcC5sYXllci5mb3JFYWNoKCBmdW5jdGlvbiAoIHJhd1RyYWNrcyApIHtcblxuXHRcdFx0XHR0cmFja3MgPSB0cmFja3MuY29uY2F0KCBzZWxmLmdlbmVyYXRlVHJhY2tzKCByYXdUcmFja3MgKSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCggcmF3Q2xpcC5uYW1lLCAtIDEsIHRyYWNrcyApO1xuXG5cdFx0fSxcblxuXHRcdGdlbmVyYXRlVHJhY2tzOiBmdW5jdGlvbiAoIHJhd1RyYWNrcyApIHtcblxuXHRcdFx0dmFyIHRyYWNrcyA9IFtdO1xuXG5cdFx0XHR2YXIgaW5pdGlhbFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHZhciBpbml0aWFsUm90YXRpb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHRcdFx0dmFyIGluaXRpYWxTY2FsZSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGlmICggcmF3VHJhY2tzLnRyYW5zZm9ybSApIHJhd1RyYWNrcy50cmFuc2Zvcm0uZGVjb21wb3NlKCBpbml0aWFsUG9zaXRpb24sIGluaXRpYWxSb3RhdGlvbiwgaW5pdGlhbFNjYWxlICk7XG5cblx0XHRcdGluaXRpYWxQb3NpdGlvbiA9IGluaXRpYWxQb3NpdGlvbi50b0FycmF5KCk7XG5cdFx0XHRpbml0aWFsUm90YXRpb24gPSBuZXcgRXVsZXIoKS5zZXRGcm9tUXVhdGVybmlvbiggaW5pdGlhbFJvdGF0aW9uLCByYXdUcmFja3MuZXVsZXJPcmRlciApLnRvQXJyYXkoKTtcblx0XHRcdGluaXRpYWxTY2FsZSA9IGluaXRpYWxTY2FsZS50b0FycmF5KCk7XG5cblx0XHRcdGlmICggcmF3VHJhY2tzLlQgIT09IHVuZGVmaW5lZCAmJiBPYmplY3Qua2V5cyggcmF3VHJhY2tzLlQuY3VydmVzICkubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHR2YXIgcG9zaXRpb25UcmFjayA9IHRoaXMuZ2VuZXJhdGVWZWN0b3JUcmFjayggcmF3VHJhY2tzLm1vZGVsTmFtZSwgcmF3VHJhY2tzLlQuY3VydmVzLCBpbml0aWFsUG9zaXRpb24sICdwb3NpdGlvbicgKTtcblx0XHRcdFx0aWYgKCBwb3NpdGlvblRyYWNrICE9PSB1bmRlZmluZWQgKSB0cmFja3MucHVzaCggcG9zaXRpb25UcmFjayApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmF3VHJhY2tzLlIgIT09IHVuZGVmaW5lZCAmJiBPYmplY3Qua2V5cyggcmF3VHJhY2tzLlIuY3VydmVzICkubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHR2YXIgcm90YXRpb25UcmFjayA9IHRoaXMuZ2VuZXJhdGVSb3RhdGlvblRyYWNrKCByYXdUcmFja3MubW9kZWxOYW1lLCByYXdUcmFja3MuUi5jdXJ2ZXMsIGluaXRpYWxSb3RhdGlvbiwgcmF3VHJhY2tzLnByZVJvdGF0aW9uLCByYXdUcmFja3MucG9zdFJvdGF0aW9uLCByYXdUcmFja3MuZXVsZXJPcmRlciApO1xuXHRcdFx0XHRpZiAoIHJvdGF0aW9uVHJhY2sgIT09IHVuZGVmaW5lZCApIHRyYWNrcy5wdXNoKCByb3RhdGlvblRyYWNrICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByYXdUcmFja3MuUyAhPT0gdW5kZWZpbmVkICYmIE9iamVjdC5rZXlzKCByYXdUcmFja3MuUy5jdXJ2ZXMgKS5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdHZhciBzY2FsZVRyYWNrID0gdGhpcy5nZW5lcmF0ZVZlY3RvclRyYWNrKCByYXdUcmFja3MubW9kZWxOYW1lLCByYXdUcmFja3MuUy5jdXJ2ZXMsIGluaXRpYWxTY2FsZSwgJ3NjYWxlJyApO1xuXHRcdFx0XHRpZiAoIHNjYWxlVHJhY2sgIT09IHVuZGVmaW5lZCApIHRyYWNrcy5wdXNoKCBzY2FsZVRyYWNrICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByYXdUcmFja3MuRGVmb3JtUGVyY2VudCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHZhciBtb3JwaFRyYWNrID0gdGhpcy5nZW5lcmF0ZU1vcnBoVHJhY2soIHJhd1RyYWNrcyApO1xuXHRcdFx0XHRpZiAoIG1vcnBoVHJhY2sgIT09IHVuZGVmaW5lZCApIHRyYWNrcy5wdXNoKCBtb3JwaFRyYWNrICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRyYWNrcztcblxuXHRcdH0sXG5cblx0XHRnZW5lcmF0ZVZlY3RvclRyYWNrOiBmdW5jdGlvbiAoIG1vZGVsTmFtZSwgY3VydmVzLCBpbml0aWFsVmFsdWUsIHR5cGUgKSB7XG5cblx0XHRcdHZhciB0aW1lcyA9IHRoaXMuZ2V0VGltZXNGb3JBbGxBeGVzKCBjdXJ2ZXMgKTtcblx0XHRcdHZhciB2YWx1ZXMgPSB0aGlzLmdldEtleWZyYW1lVHJhY2tWYWx1ZXMoIHRpbWVzLCBjdXJ2ZXMsIGluaXRpYWxWYWx1ZSApO1xuXG5cdFx0XHRyZXR1cm4gbmV3IFZlY3RvcktleWZyYW1lVHJhY2soIG1vZGVsTmFtZSArICcuJyArIHR5cGUsIHRpbWVzLCB2YWx1ZXMgKTtcblxuXHRcdH0sXG5cblx0XHRnZW5lcmF0ZVJvdGF0aW9uVHJhY2s6IGZ1bmN0aW9uICggbW9kZWxOYW1lLCBjdXJ2ZXMsIGluaXRpYWxWYWx1ZSwgcHJlUm90YXRpb24sIHBvc3RSb3RhdGlvbiwgZXVsZXJPcmRlciApIHtcblxuXHRcdFx0aWYgKCBjdXJ2ZXMueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuaW50ZXJwb2xhdGVSb3RhdGlvbnMoIGN1cnZlcy54ICk7XG5cdFx0XHRcdGN1cnZlcy54LnZhbHVlcyA9IGN1cnZlcy54LnZhbHVlcy5tYXAoIF9NYXRoLmRlZ1RvUmFkICk7XG5cblx0XHRcdH1cblx0XHRcdGlmICggY3VydmVzLnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLmludGVycG9sYXRlUm90YXRpb25zKCBjdXJ2ZXMueSApO1xuXHRcdFx0XHRjdXJ2ZXMueS52YWx1ZXMgPSBjdXJ2ZXMueS52YWx1ZXMubWFwKCBfTWF0aC5kZWdUb1JhZCApO1xuXG5cdFx0XHR9XG5cdFx0XHRpZiAoIGN1cnZlcy56ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGhpcy5pbnRlcnBvbGF0ZVJvdGF0aW9ucyggY3VydmVzLnogKTtcblx0XHRcdFx0Y3VydmVzLnoudmFsdWVzID0gY3VydmVzLnoudmFsdWVzLm1hcCggX01hdGguZGVnVG9SYWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdGltZXMgPSB0aGlzLmdldFRpbWVzRm9yQWxsQXhlcyggY3VydmVzICk7XG5cdFx0XHR2YXIgdmFsdWVzID0gdGhpcy5nZXRLZXlmcmFtZVRyYWNrVmFsdWVzKCB0aW1lcywgY3VydmVzLCBpbml0aWFsVmFsdWUgKTtcblxuXHRcdFx0aWYgKCBwcmVSb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHByZVJvdGF0aW9uID0gcHJlUm90YXRpb24ubWFwKCBfTWF0aC5kZWdUb1JhZCApO1xuXHRcdFx0XHRwcmVSb3RhdGlvbi5wdXNoKCBldWxlck9yZGVyICk7XG5cblx0XHRcdFx0cHJlUm90YXRpb24gPSBuZXcgRXVsZXIoKS5mcm9tQXJyYXkoIHByZVJvdGF0aW9uICk7XG5cdFx0XHRcdHByZVJvdGF0aW9uID0gbmV3IFF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIoIHByZVJvdGF0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwb3N0Um90YXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwb3N0Um90YXRpb24gPSBwb3N0Um90YXRpb24ubWFwKCBfTWF0aC5kZWdUb1JhZCApO1xuXHRcdFx0XHRwb3N0Um90YXRpb24ucHVzaCggZXVsZXJPcmRlciApO1xuXG5cdFx0XHRcdHBvc3RSb3RhdGlvbiA9IG5ldyBFdWxlcigpLmZyb21BcnJheSggcG9zdFJvdGF0aW9uICk7XG5cdFx0XHRcdHBvc3RSb3RhdGlvbiA9IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKCBwb3N0Um90YXRpb24gKS5pbnZlcnNlKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHRcdFx0dmFyIGV1bGVyID0gbmV3IEV1bGVyKCk7XG5cblx0XHRcdHZhciBxdWF0ZXJuaW9uVmFsdWVzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRldWxlci5zZXQoIHZhbHVlc1sgaSBdLCB2YWx1ZXNbIGkgKyAxIF0sIHZhbHVlc1sgaSArIDIgXSwgZXVsZXJPcmRlciApO1xuXG5cdFx0XHRcdHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciApO1xuXG5cdFx0XHRcdGlmICggcHJlUm90YXRpb24gIT09IHVuZGVmaW5lZCApIHF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIHByZVJvdGF0aW9uICk7XG5cdFx0XHRcdGlmICggcG9zdFJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBxdWF0ZXJuaW9uLm11bHRpcGx5KCBwb3N0Um90YXRpb24gKTtcblxuXHRcdFx0XHRxdWF0ZXJuaW9uLnRvQXJyYXkoIHF1YXRlcm5pb25WYWx1ZXMsICggaSAvIDMgKSAqIDQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrKCBtb2RlbE5hbWUgKyAnLnF1YXRlcm5pb24nLCB0aW1lcywgcXVhdGVybmlvblZhbHVlcyApO1xuXG5cdFx0fSxcblxuXHRcdGdlbmVyYXRlTW9ycGhUcmFjazogZnVuY3Rpb24gKCByYXdUcmFja3MgKSB7XG5cblx0XHRcdHZhciBjdXJ2ZXMgPSByYXdUcmFja3MuRGVmb3JtUGVyY2VudC5jdXJ2ZXMubW9ycGg7XG5cdFx0XHR2YXIgdmFsdWVzID0gY3VydmVzLnZhbHVlcy5tYXAoIGZ1bmN0aW9uICggdmFsICkge1xuXG5cdFx0XHRcdHJldHVybiB2YWwgLyAxMDA7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0dmFyIG1vcnBoTnVtID0gc2NlbmVHcmFwaC5nZXRPYmplY3RCeU5hbWUoIHJhd1RyYWNrcy5tb2RlbE5hbWUgKS5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHJhd1RyYWNrcy5tb3JwaE5hbWUgXTtcblxuXHRcdFx0cmV0dXJuIG5ldyBOdW1iZXJLZXlmcmFtZVRyYWNrKCByYXdUcmFja3MubW9kZWxOYW1lICsgJy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbJyArIG1vcnBoTnVtICsgJ10nLCBjdXJ2ZXMudGltZXMsIHZhbHVlcyApO1xuXG5cdFx0fSxcblxuXHRcdC8vIEZvciBhbGwgYW5pbWF0ZWQgb2JqZWN0cywgdGltZXMgYXJlIGRlZmluZWQgc2VwYXJhdGVseSBmb3IgZWFjaCBheGlzXG5cdFx0Ly8gSGVyZSB3ZSdsbCBjb21iaW5lIHRoZSB0aW1lcyBpbnRvIG9uZSBzb3J0ZWQgYXJyYXkgd2l0aG91dCBkdXBsaWNhdGVzXG5cdFx0Z2V0VGltZXNGb3JBbGxBeGVzOiBmdW5jdGlvbiAoIGN1cnZlcyApIHtcblxuXHRcdFx0dmFyIHRpbWVzID0gW107XG5cblx0XHRcdC8vIGZpcnN0IGpvaW4gdG9nZXRoZXIgdGhlIHRpbWVzIGZvciBlYWNoIGF4aXMsIGlmIGRlZmluZWRcblx0XHRcdGlmICggY3VydmVzLnggIT09IHVuZGVmaW5lZCApIHRpbWVzID0gdGltZXMuY29uY2F0KCBjdXJ2ZXMueC50aW1lcyApO1xuXHRcdFx0aWYgKCBjdXJ2ZXMueSAhPT0gdW5kZWZpbmVkICkgdGltZXMgPSB0aW1lcy5jb25jYXQoIGN1cnZlcy55LnRpbWVzICk7XG5cdFx0XHRpZiAoIGN1cnZlcy56ICE9PSB1bmRlZmluZWQgKSB0aW1lcyA9IHRpbWVzLmNvbmNhdCggY3VydmVzLnoudGltZXMgKTtcblxuXHRcdFx0Ly8gdGhlbiBzb3J0IHRoZW0gYW5kIHJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHR0aW1lcyA9IHRpbWVzLnNvcnQoIGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdFx0XHRyZXR1cm4gYSAtIGI7XG5cblx0XHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uICggZWxlbSwgaW5kZXgsIGFycmF5ICkge1xuXG5cdFx0XHRcdHJldHVybiBhcnJheS5pbmRleE9mKCBlbGVtICkgPT0gaW5kZXg7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuIHRpbWVzO1xuXG5cdFx0fSxcblxuXHRcdGdldEtleWZyYW1lVHJhY2tWYWx1ZXM6IGZ1bmN0aW9uICggdGltZXMsIGN1cnZlcywgaW5pdGlhbFZhbHVlICkge1xuXG5cdFx0XHR2YXIgcHJldlZhbHVlID0gaW5pdGlhbFZhbHVlO1xuXG5cdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdHZhciB4SW5kZXggPSAtIDE7XG5cdFx0XHR2YXIgeUluZGV4ID0gLSAxO1xuXHRcdFx0dmFyIHpJbmRleCA9IC0gMTtcblxuXHRcdFx0dGltZXMuZm9yRWFjaCggZnVuY3Rpb24gKCB0aW1lICkge1xuXG5cdFx0XHRcdGlmICggY3VydmVzLnggKSB4SW5kZXggPSBjdXJ2ZXMueC50aW1lcy5pbmRleE9mKCB0aW1lICk7XG5cdFx0XHRcdGlmICggY3VydmVzLnkgKSB5SW5kZXggPSBjdXJ2ZXMueS50aW1lcy5pbmRleE9mKCB0aW1lICk7XG5cdFx0XHRcdGlmICggY3VydmVzLnogKSB6SW5kZXggPSBjdXJ2ZXMuei50aW1lcy5pbmRleE9mKCB0aW1lICk7XG5cblx0XHRcdFx0Ly8gaWYgdGhlcmUgaXMgYW4geCB2YWx1ZSBkZWZpbmVkIGZvciB0aGlzIGZyYW1lLCB1c2UgdGhhdFxuXHRcdFx0XHRpZiAoIHhJbmRleCAhPT0gLSAxICkge1xuXG5cdFx0XHRcdFx0dmFyIHhWYWx1ZSA9IGN1cnZlcy54LnZhbHVlc1sgeEluZGV4IF07XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goIHhWYWx1ZSApO1xuXHRcdFx0XHRcdHByZXZWYWx1ZVsgMCBdID0geFZhbHVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBvdGhlcndpc2UgdXNlIHRoZSB4IHZhbHVlIGZyb20gdGhlIHByZXZpb3VzIGZyYW1lXG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goIHByZXZWYWx1ZVsgMCBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggeUluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0XHR2YXIgeVZhbHVlID0gY3VydmVzLnkudmFsdWVzWyB5SW5kZXggXTtcblx0XHRcdFx0XHR2YWx1ZXMucHVzaCggeVZhbHVlICk7XG5cdFx0XHRcdFx0cHJldlZhbHVlWyAxIF0gPSB5VmFsdWU7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKCBwcmV2VmFsdWVbIDEgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHpJbmRleCAhPT0gLSAxICkge1xuXG5cdFx0XHRcdFx0dmFyIHpWYWx1ZSA9IGN1cnZlcy56LnZhbHVlc1sgekluZGV4IF07XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goIHpWYWx1ZSApO1xuXHRcdFx0XHRcdHByZXZWYWx1ZVsgMiBdID0gelZhbHVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR2YWx1ZXMucHVzaCggcHJldlZhbHVlWyAyIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuIHZhbHVlcztcblxuXHRcdH0sXG5cblx0XHQvLyBSb3RhdGlvbnMgYXJlIGRlZmluZWQgYXMgRXVsZXIgYW5nbGVzIHdoaWNoIGNhbiBoYXZlIHZhbHVlcyAgb2YgYW55IHNpemVcblx0XHQvLyBUaGVzZSB3aWxsIGJlIGNvbnZlcnRlZCB0byBxdWF0ZXJuaW9ucyB3aGljaCBkb24ndCBzdXBwb3J0IHZhbHVlcyBncmVhdGVyIHRoYW5cblx0XHQvLyBQSSwgc28gd2UnbGwgaW50ZXJwb2xhdGUgbGFyZ2Ugcm90YXRpb25zXG5cdFx0aW50ZXJwb2xhdGVSb3RhdGlvbnM6IGZ1bmN0aW9uICggY3VydmUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMTsgaSA8IGN1cnZlLnZhbHVlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGluaXRpYWxWYWx1ZSA9IGN1cnZlLnZhbHVlc1sgaSAtIDEgXTtcblx0XHRcdFx0dmFyIHZhbHVlc1NwYW4gPSBjdXJ2ZS52YWx1ZXNbIGkgXSAtIGluaXRpYWxWYWx1ZTtcblxuXHRcdFx0XHR2YXIgYWJzb2x1dGVTcGFuID0gTWF0aC5hYnMoIHZhbHVlc1NwYW4gKTtcblxuXHRcdFx0XHRpZiAoIGFic29sdXRlU3BhbiA+PSAxODAgKSB7XG5cblx0XHRcdFx0XHR2YXIgbnVtU3ViSW50ZXJ2YWxzID0gYWJzb2x1dGVTcGFuIC8gMTgwO1xuXG5cdFx0XHRcdFx0dmFyIHN0ZXAgPSB2YWx1ZXNTcGFuIC8gbnVtU3ViSW50ZXJ2YWxzO1xuXHRcdFx0XHRcdHZhciBuZXh0VmFsdWUgPSBpbml0aWFsVmFsdWUgKyBzdGVwO1xuXG5cdFx0XHRcdFx0dmFyIGluaXRpYWxUaW1lID0gY3VydmUudGltZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0dmFyIHRpbWVTcGFuID0gY3VydmUudGltZXNbIGkgXSAtIGluaXRpYWxUaW1lO1xuXHRcdFx0XHRcdHZhciBpbnRlcnZhbCA9IHRpbWVTcGFuIC8gbnVtU3ViSW50ZXJ2YWxzO1xuXHRcdFx0XHRcdHZhciBuZXh0VGltZSA9IGluaXRpYWxUaW1lICsgaW50ZXJ2YWw7XG5cblx0XHRcdFx0XHR2YXIgaW50ZXJwb2xhdGVkVGltZXMgPSBbXTtcblx0XHRcdFx0XHR2YXIgaW50ZXJwb2xhdGVkVmFsdWVzID0gW107XG5cblx0XHRcdFx0XHR3aGlsZSAoIG5leHRUaW1lIDwgY3VydmUudGltZXNbIGkgXSApIHtcblxuXHRcdFx0XHRcdFx0aW50ZXJwb2xhdGVkVGltZXMucHVzaCggbmV4dFRpbWUgKTtcblx0XHRcdFx0XHRcdG5leHRUaW1lICs9IGludGVydmFsO1xuXG5cdFx0XHRcdFx0XHRpbnRlcnBvbGF0ZWRWYWx1ZXMucHVzaCggbmV4dFZhbHVlICk7XG5cdFx0XHRcdFx0XHRuZXh0VmFsdWUgKz0gc3RlcDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGN1cnZlLnRpbWVzID0gaW5qZWN0KCBjdXJ2ZS50aW1lcywgaSwgaW50ZXJwb2xhdGVkVGltZXMgKTtcblx0XHRcdFx0XHRjdXJ2ZS52YWx1ZXMgPSBpbmplY3QoIGN1cnZlLnZhbHVlcywgaSwgaW50ZXJwb2xhdGVkVmFsdWVzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdH07XG5cblx0Ly8gcGFyc2UgYW4gRkJYIGZpbGUgaW4gQVNDSUkgZm9ybWF0XG5cdGZ1bmN0aW9uIFRleHRQYXJzZXIoKSB7fVxuXG5cdFRleHRQYXJzZXIucHJvdG90eXBlID0ge1xuXG5cdFx0Y29uc3RydWN0b3I6IFRleHRQYXJzZXIsXG5cblx0XHRnZXRQcmV2Tm9kZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5ub2RlU3RhY2tbIHRoaXMuY3VycmVudEluZGVudCAtIDIgXTtcblxuXHRcdH0sXG5cblx0XHRnZXRDdXJyZW50Tm9kZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5ub2RlU3RhY2tbIHRoaXMuY3VycmVudEluZGVudCAtIDEgXTtcblxuXHRcdH0sXG5cblx0XHRnZXRDdXJyZW50UHJvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jdXJyZW50UHJvcDtcblxuXHRcdH0sXG5cblx0XHRwdXNoU3RhY2s6IGZ1bmN0aW9uICggbm9kZSApIHtcblxuXHRcdFx0dGhpcy5ub2RlU3RhY2sucHVzaCggbm9kZSApO1xuXHRcdFx0dGhpcy5jdXJyZW50SW5kZW50ICs9IDE7XG5cblx0XHR9LFxuXG5cdFx0cG9wU3RhY2s6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dGhpcy5ub2RlU3RhY2sucG9wKCk7XG5cdFx0XHR0aGlzLmN1cnJlbnRJbmRlbnQgLT0gMTtcblxuXHRcdH0sXG5cblx0XHRzZXRDdXJyZW50UHJvcDogZnVuY3Rpb24gKCB2YWwsIG5hbWUgKSB7XG5cblx0XHRcdHRoaXMuY3VycmVudFByb3AgPSB2YWw7XG5cdFx0XHR0aGlzLmN1cnJlbnRQcm9wTmFtZSA9IG5hbWU7XG5cblx0XHR9LFxuXG5cdFx0cGFyc2U6IGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dGhpcy5jdXJyZW50SW5kZW50ID0gMDtcblxuXHRcdFx0dGhpcy5hbGxOb2RlcyA9IG5ldyBGQlhUcmVlKCk7XG5cdFx0XHR0aGlzLm5vZGVTdGFjayA9IFtdO1xuXHRcdFx0dGhpcy5jdXJyZW50UHJvcCA9IFtdO1xuXHRcdFx0dGhpcy5jdXJyZW50UHJvcE5hbWUgPSAnJztcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHR2YXIgc3BsaXQgPSB0ZXh0LnNwbGl0KCAvW1xcclxcbl0rLyApO1xuXG5cdFx0XHRzcGxpdC5mb3JFYWNoKCBmdW5jdGlvbiAoIGxpbmUsIGkgKSB7XG5cblx0XHRcdFx0dmFyIG1hdGNoQ29tbWVudCA9IGxpbmUubWF0Y2goIC9eW1xcc1xcdF0qOy8gKTtcblx0XHRcdFx0dmFyIG1hdGNoRW1wdHkgPSBsaW5lLm1hdGNoKCAvXltcXHNcXHRdKiQvICk7XG5cblx0XHRcdFx0aWYgKCBtYXRjaENvbW1lbnQgfHwgbWF0Y2hFbXB0eSApIHJldHVybjtcblxuXHRcdFx0XHR2YXIgbWF0Y2hCZWdpbm5pbmcgPSBsaW5lLm1hdGNoKCAnXlxcXFx0eycgKyBzZWxmLmN1cnJlbnRJbmRlbnQgKyAnfShcXFxcdyspOiguKil7JywgJycgKTtcblx0XHRcdFx0dmFyIG1hdGNoUHJvcGVydHkgPSBsaW5lLm1hdGNoKCAnXlxcXFx0eycgKyAoIHNlbGYuY3VycmVudEluZGVudCApICsgJ30oXFxcXHcrKTpbXFxcXHNcXFxcdFxcXFxyXFxcXG5dKC4qKScgKTtcblx0XHRcdFx0dmFyIG1hdGNoRW5kID0gbGluZS5tYXRjaCggJ15cXFxcdHsnICsgKCBzZWxmLmN1cnJlbnRJbmRlbnQgLSAxICkgKyAnfX0nICk7XG5cblx0XHRcdFx0aWYgKCBtYXRjaEJlZ2lubmluZyApIHtcblxuXHRcdFx0XHRcdHNlbGYucGFyc2VOb2RlQmVnaW4oIGxpbmUsIG1hdGNoQmVnaW5uaW5nICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hQcm9wZXJ0eSApIHtcblxuXHRcdFx0XHRcdHNlbGYucGFyc2VOb2RlUHJvcGVydHkoIGxpbmUsIG1hdGNoUHJvcGVydHksIHNwbGl0WyArKyBpIF0gKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaEVuZCApIHtcblxuXHRcdFx0XHRcdHNlbGYucG9wU3RhY2soKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBsaW5lLm1hdGNoKCAvXlteXFxzXFx0fV0vICkgKSB7XG5cblx0XHRcdFx0XHQvLyBsYXJnZSBhcnJheXMgYXJlIHNwbGl0IG92ZXIgbXVsdGlwbGUgbGluZXMgdGVybWluYXRlZCB3aXRoIGEgJywnIGNoYXJhY3RlclxuXHRcdFx0XHRcdC8vIGlmIHRoaXMgaXMgZW5jb3VudGVyZWQgdGhlIGxpbmUgbmVlZHMgdG8gYmUgam9pbmVkIHRvIHRoZSBwcmV2aW91cyBsaW5lXG5cdFx0XHRcdFx0c2VsZi5wYXJzZU5vZGVQcm9wZXJ0eUNvbnRpbnVlZCggbGluZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5hbGxOb2RlcztcblxuXHRcdH0sXG5cblx0XHRwYXJzZU5vZGVCZWdpbjogZnVuY3Rpb24gKCBsaW5lLCBwcm9wZXJ0eSApIHtcblxuXHRcdFx0dmFyIG5vZGVOYW1lID0gcHJvcGVydHlbIDEgXS50cmltKCkucmVwbGFjZSggL15cIi8sICcnICkucmVwbGFjZSggL1wiJC8sICcnICk7XG5cblx0XHRcdHZhciBub2RlQXR0cnMgPSBwcm9wZXJ0eVsgMiBdLnNwbGl0KCAnLCcgKS5tYXAoIGZ1bmN0aW9uICggYXR0ciApIHtcblxuXHRcdFx0XHRyZXR1cm4gYXR0ci50cmltKCkucmVwbGFjZSggL15cIi8sICcnICkucmVwbGFjZSggL1wiJC8sICcnICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0dmFyIG5vZGUgPSB7IG5hbWU6IG5vZGVOYW1lIH07XG5cdFx0XHR2YXIgYXR0cnMgPSB0aGlzLnBhcnNlTm9kZUF0dHIoIG5vZGVBdHRycyApO1xuXG5cdFx0XHR2YXIgY3VycmVudE5vZGUgPSB0aGlzLmdldEN1cnJlbnROb2RlKCk7XG5cblx0XHRcdC8vIGEgdG9wIG5vZGVcblx0XHRcdGlmICggdGhpcy5jdXJyZW50SW5kZW50ID09PSAwICkge1xuXG5cdFx0XHRcdHRoaXMuYWxsTm9kZXMuYWRkKCBub2RlTmFtZSwgbm9kZSApO1xuXG5cdFx0XHR9IGVsc2UgeyAvLyBhIHN1Ym5vZGVcblxuXHRcdFx0XHQvLyBpZiB0aGUgc3Vibm9kZSBhbHJlYWR5IGV4aXN0cywgYXBwZW5kIGl0XG5cdFx0XHRcdGlmICggbm9kZU5hbWUgaW4gY3VycmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBzcGVjaWFsIGNhc2UgUG9zZSBuZWVkcyBQb3NlTm9kZXMgYXMgYW4gYXJyYXlcblx0XHRcdFx0XHRpZiAoIG5vZGVOYW1lID09PSAnUG9zZU5vZGUnICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50Tm9kZS5Qb3NlTm9kZS5wdXNoKCBub2RlICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXS5pZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXSA9IHt9O1xuXHRcdFx0XHRcdFx0Y3VycmVudE5vZGVbIG5vZGVOYW1lIF1bIGN1cnJlbnROb2RlWyBub2RlTmFtZSBdLmlkIF0gPSBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggYXR0cnMuaWQgIT09ICcnICkgY3VycmVudE5vZGVbIG5vZGVOYW1lIF1bIGF0dHJzLmlkIF0gPSBub2RlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBhdHRycy5pZCA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXSA9IHt9O1xuXHRcdFx0XHRcdGN1cnJlbnROb2RlWyBub2RlTmFtZSBdWyBhdHRycy5pZCBdID0gbm9kZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBub2RlTmFtZSAhPT0gJ1Byb3BlcnRpZXM3MCcgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG5vZGVOYW1lID09PSAnUG9zZU5vZGUnIClcdGN1cnJlbnROb2RlWyBub2RlTmFtZSBdID0gWyBub2RlIF07XG5cdFx0XHRcdFx0ZWxzZSBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXSA9IG5vZGU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdHlwZW9mIGF0dHJzLmlkID09PSAnbnVtYmVyJyApIG5vZGUuaWQgPSBhdHRycy5pZDtcblx0XHRcdGlmICggYXR0cnMubmFtZSAhPT0gJycgKSBub2RlLmF0dHJOYW1lID0gYXR0cnMubmFtZTtcblx0XHRcdGlmICggYXR0cnMudHlwZSAhPT0gJycgKSBub2RlLmF0dHJUeXBlID0gYXR0cnMudHlwZTtcblxuXHRcdFx0dGhpcy5wdXNoU3RhY2soIG5vZGUgKTtcblxuXHRcdH0sXG5cblx0XHRwYXJzZU5vZGVBdHRyOiBmdW5jdGlvbiAoIGF0dHJzICkge1xuXG5cdFx0XHR2YXIgaWQgPSBhdHRyc1sgMCBdO1xuXG5cdFx0XHRpZiAoIGF0dHJzWyAwIF0gIT09ICcnICkge1xuXG5cdFx0XHRcdGlkID0gcGFyc2VJbnQoIGF0dHJzWyAwIF0gKTtcblxuXHRcdFx0XHRpZiAoIGlzTmFOKCBpZCApICkge1xuXG5cdFx0XHRcdFx0aWQgPSBhdHRyc1sgMCBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbmFtZSA9ICcnLCB0eXBlID0gJyc7XG5cblx0XHRcdGlmICggYXR0cnMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0XHRuYW1lID0gYXR0cnNbIDEgXS5yZXBsYWNlKCAvXihcXHcrKTo6LywgJycgKTtcblx0XHRcdFx0dHlwZSA9IGF0dHJzWyAyIF07XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgaWQ6IGlkLCBuYW1lOiBuYW1lLCB0eXBlOiB0eXBlIH07XG5cblx0XHR9LFxuXG5cdFx0cGFyc2VOb2RlUHJvcGVydHk6IGZ1bmN0aW9uICggbGluZSwgcHJvcGVydHksIGNvbnRlbnRMaW5lICkge1xuXG5cdFx0XHR2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0eVsgMSBdLnJlcGxhY2UoIC9eXCIvLCAnJyApLnJlcGxhY2UoIC9cIiQvLCAnJyApLnRyaW0oKTtcblx0XHRcdHZhciBwcm9wVmFsdWUgPSBwcm9wZXJ0eVsgMiBdLnJlcGxhY2UoIC9eXCIvLCAnJyApLnJlcGxhY2UoIC9cIiQvLCAnJyApLnRyaW0oKTtcblxuXHRcdFx0Ly8gZm9yIHNwZWNpYWwgY2FzZTogYmFzZTY0IGltYWdlIGRhdGEgZm9sbG93cyBcIkNvbnRlbnQ6ICxcIiBsaW5lXG5cdFx0XHQvL1x0Q29udGVudDogLFxuXHRcdFx0Ly9cdCBcIi85ai80UkRhUlhocFpnQUFUVTBBLi4uXCJcblx0XHRcdGlmICggcHJvcE5hbWUgPT09ICdDb250ZW50JyAmJiBwcm9wVmFsdWUgPT09ICcsJyApIHtcblxuXHRcdFx0XHRwcm9wVmFsdWUgPSBjb250ZW50TGluZS5yZXBsYWNlKCAvXCIvZywgJycgKS5yZXBsYWNlKCAvLCQvLCAnJyApLnRyaW0oKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY3VycmVudE5vZGUgPSB0aGlzLmdldEN1cnJlbnROb2RlKCk7XG5cdFx0XHR2YXIgcGFyZW50TmFtZSA9IGN1cnJlbnROb2RlLm5hbWU7XG5cblx0XHRcdGlmICggcGFyZW50TmFtZSA9PT0gJ1Byb3BlcnRpZXM3MCcgKSB7XG5cblx0XHRcdFx0dGhpcy5wYXJzZU5vZGVTcGVjaWFsUHJvcGVydHkoIGxpbmUsIHByb3BOYW1lLCBwcm9wVmFsdWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbm5lY3Rpb25zXG5cdFx0XHRpZiAoIHByb3BOYW1lID09PSAnQycgKSB7XG5cblx0XHRcdFx0dmFyIGNvbm5Qcm9wcyA9IHByb3BWYWx1ZS5zcGxpdCggJywnICkuc2xpY2UoIDEgKTtcblx0XHRcdFx0dmFyIGZyb20gPSBwYXJzZUludCggY29ublByb3BzWyAwIF0gKTtcblx0XHRcdFx0dmFyIHRvID0gcGFyc2VJbnQoIGNvbm5Qcm9wc1sgMSBdICk7XG5cblx0XHRcdFx0dmFyIHJlc3QgPSBwcm9wVmFsdWUuc3BsaXQoICcsJyApLnNsaWNlKCAzICk7XG5cblx0XHRcdFx0cmVzdCA9IHJlc3QubWFwKCBmdW5jdGlvbiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gZWxlbS50cmltKCkucmVwbGFjZSggL15cIi8sICcnICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdHByb3BOYW1lID0gJ2Nvbm5lY3Rpb25zJztcblx0XHRcdFx0cHJvcFZhbHVlID0gWyBmcm9tLCB0byBdO1xuXHRcdFx0XHRhcHBlbmQoIHByb3BWYWx1ZSwgcmVzdCApO1xuXG5cdFx0XHRcdGlmICggY3VycmVudE5vZGVbIHByb3BOYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnROb2RlWyBwcm9wTmFtZSBdID0gW107XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIE5vZGVcblx0XHRcdGlmICggcHJvcE5hbWUgPT09ICdOb2RlJyApIGN1cnJlbnROb2RlLmlkID0gcHJvcFZhbHVlO1xuXG5cdFx0XHQvLyBjb25uZWN0aW9uc1xuXHRcdFx0aWYgKCBwcm9wTmFtZSBpbiBjdXJyZW50Tm9kZSAmJiBBcnJheS5pc0FycmF5KCBjdXJyZW50Tm9kZVsgcHJvcE5hbWUgXSApICkge1xuXG5cdFx0XHRcdGN1cnJlbnROb2RlWyBwcm9wTmFtZSBdLnB1c2goIHByb3BWYWx1ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggcHJvcE5hbWUgIT09ICdhJyApIGN1cnJlbnROb2RlWyBwcm9wTmFtZSBdID0gcHJvcFZhbHVlO1xuXHRcdFx0XHRlbHNlIGN1cnJlbnROb2RlLmEgPSBwcm9wVmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXRDdXJyZW50UHJvcCggY3VycmVudE5vZGUsIHByb3BOYW1lICk7XG5cblx0XHRcdC8vIGNvbnZlcnQgc3RyaW5nIHRvIGFycmF5LCB1bmxlc3MgaXQgZW5kcyBpbiAnLCcgaW4gd2hpY2ggY2FzZSBtb3JlIHdpbGwgYmUgYWRkZWQgdG8gaXRcblx0XHRcdGlmICggcHJvcE5hbWUgPT09ICdhJyAmJiBwcm9wVmFsdWUuc2xpY2UoIC0gMSApICE9PSAnLCcgKSB7XG5cblx0XHRcdFx0Y3VycmVudE5vZGUuYSA9IHBhcnNlTnVtYmVyQXJyYXkoIHByb3BWYWx1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0cGFyc2VOb2RlUHJvcGVydHlDb250aW51ZWQ6IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRcdFx0dmFyIGN1cnJlbnROb2RlID0gdGhpcy5nZXRDdXJyZW50Tm9kZSgpO1xuXG5cdFx0XHRjdXJyZW50Tm9kZS5hICs9IGxpbmU7XG5cblx0XHRcdC8vIGlmIHRoZSBsaW5lIGRvZXNuJ3QgZW5kIGluICcsJyB3ZSBoYXZlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgcHJvcGVydHkgdmFsdWVcblx0XHRcdC8vIHNvIGNvbnZlcnQgdGhlIHN0cmluZyB0byBhbiBhcnJheVxuXHRcdFx0aWYgKCBsaW5lLnNsaWNlKCAtIDEgKSAhPT0gJywnICkge1xuXG5cdFx0XHRcdGN1cnJlbnROb2RlLmEgPSBwYXJzZU51bWJlckFycmF5KCBjdXJyZW50Tm9kZS5hICk7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHQvLyBwYXJzZSBcIlByb3BlcnR5NzBcIlxuXHRcdHBhcnNlTm9kZVNwZWNpYWxQcm9wZXJ0eTogZnVuY3Rpb24gKCBsaW5lLCBwcm9wTmFtZSwgcHJvcFZhbHVlICkge1xuXG5cdFx0XHQvLyBzcGxpdCB0aGlzXG5cdFx0XHQvLyBQOiBcIkxjbCBTY2FsaW5nXCIsIFwiTGNsIFNjYWxpbmdcIiwgXCJcIiwgXCJBXCIsMSwxLDFcblx0XHRcdC8vIGludG8gYXJyYXkgbGlrZSBiZWxvd1xuXHRcdFx0Ly8gW1wiTGNsIFNjYWxpbmdcIiwgXCJMY2wgU2NhbGluZ1wiLCBcIlwiLCBcIkFcIiwgXCIxLDEsMVwiIF1cblx0XHRcdHZhciBwcm9wcyA9IHByb3BWYWx1ZS5zcGxpdCggJ1wiLCcgKS5tYXAoIGZ1bmN0aW9uICggcHJvcCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJvcC50cmltKCkucmVwbGFjZSggL15cXFwiLywgJycgKS5yZXBsYWNlKCAvXFxzLywgJ18nICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0dmFyIGlubmVyUHJvcE5hbWUgPSBwcm9wc1sgMCBdO1xuXHRcdFx0dmFyIGlubmVyUHJvcFR5cGUxID0gcHJvcHNbIDEgXTtcblx0XHRcdHZhciBpbm5lclByb3BUeXBlMiA9IHByb3BzWyAyIF07XG5cdFx0XHR2YXIgaW5uZXJQcm9wRmxhZyA9IHByb3BzWyAzIF07XG5cdFx0XHR2YXIgaW5uZXJQcm9wVmFsdWUgPSBwcm9wc1sgNCBdO1xuXG5cdFx0XHQvLyBjYXN0IHZhbHVlcyB3aGVyZSBuZWVkZWQsIG90aGVyd2lzZSBsZWF2ZSBhcyBzdHJpbmdzXG5cdFx0XHRzd2l0Y2ggKCBpbm5lclByb3BUeXBlMSApIHtcblxuXHRcdFx0XHRjYXNlICdpbnQnOlxuXHRcdFx0XHRjYXNlICdlbnVtJzpcblx0XHRcdFx0Y2FzZSAnYm9vbCc6XG5cdFx0XHRcdGNhc2UgJ1VMb25nTG9uZyc6XG5cdFx0XHRcdGNhc2UgJ2RvdWJsZSc6XG5cdFx0XHRcdGNhc2UgJ051bWJlcic6XG5cdFx0XHRcdGNhc2UgJ0ZpZWxkT2ZWaWV3Jzpcblx0XHRcdFx0XHRpbm5lclByb3BWYWx1ZSA9IHBhcnNlRmxvYXQoIGlubmVyUHJvcFZhbHVlICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnQ29sb3InOlxuXHRcdFx0XHRjYXNlICdDb2xvclJHQic6XG5cdFx0XHRcdGNhc2UgJ1ZlY3RvcjNEJzpcblx0XHRcdFx0Y2FzZSAnTGNsX1RyYW5zbGF0aW9uJzpcblx0XHRcdFx0Y2FzZSAnTGNsX1JvdGF0aW9uJzpcblx0XHRcdFx0Y2FzZSAnTGNsX1NjYWxpbmcnOlxuXHRcdFx0XHRcdGlubmVyUHJvcFZhbHVlID0gcGFyc2VOdW1iZXJBcnJheSggaW5uZXJQcm9wVmFsdWUgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBDQVVUSU9OOiB0aGVzZSBwcm9wcyBtdXN0IGFwcGVuZCB0byBwYXJlbnQncyBwYXJlbnRcblx0XHRcdHRoaXMuZ2V0UHJldk5vZGUoKVsgaW5uZXJQcm9wTmFtZSBdID0ge1xuXG5cdFx0XHRcdCd0eXBlJzogaW5uZXJQcm9wVHlwZTEsXG5cdFx0XHRcdCd0eXBlMic6IGlubmVyUHJvcFR5cGUyLFxuXHRcdFx0XHQnZmxhZyc6IGlubmVyUHJvcEZsYWcsXG5cdFx0XHRcdCd2YWx1ZSc6IGlubmVyUHJvcFZhbHVlXG5cblx0XHRcdH07XG5cblx0XHRcdHRoaXMuc2V0Q3VycmVudFByb3AoIHRoaXMuZ2V0UHJldk5vZGUoKSwgaW5uZXJQcm9wTmFtZSApO1xuXG5cdFx0fSxcblxuXHR9O1xuXG5cdC8vIFBhcnNlIGFuIEZCWCBmaWxlIGluIEJpbmFyeSBmb3JtYXRcblx0ZnVuY3Rpb24gQmluYXJ5UGFyc2VyKCkge31cblxuXHRCaW5hcnlQYXJzZXIucHJvdG90eXBlID0ge1xuXG5cdFx0Y29uc3RydWN0b3I6IEJpbmFyeVBhcnNlcixcblxuXHRcdHBhcnNlOiBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0dmFyIHJlYWRlciA9IG5ldyBCaW5hcnlSZWFkZXIoIGJ1ZmZlciApO1xuXHRcdFx0cmVhZGVyLnNraXAoIDIzICk7IC8vIHNraXAgbWFnaWMgMjMgYnl0ZXNcblxuXHRcdFx0dmFyIHZlcnNpb24gPSByZWFkZXIuZ2V0VWludDMyKCk7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuRkJYTG9hZGVyOiBGQlggYmluYXJ5IHZlcnNpb246ICcgKyB2ZXJzaW9uICk7XG5cblx0XHRcdHZhciBhbGxOb2RlcyA9IG5ldyBGQlhUcmVlKCk7XG5cblx0XHRcdHdoaWxlICggISB0aGlzLmVuZE9mQ29udGVudCggcmVhZGVyICkgKSB7XG5cblx0XHRcdFx0dmFyIG5vZGUgPSB0aGlzLnBhcnNlTm9kZSggcmVhZGVyLCB2ZXJzaW9uICk7XG5cdFx0XHRcdGlmICggbm9kZSAhPT0gbnVsbCApIGFsbE5vZGVzLmFkZCggbm9kZS5uYW1lLCBub2RlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGFsbE5vZGVzO1xuXG5cdFx0fSxcblxuXHRcdC8vIENoZWNrIGlmIHJlYWRlciBoYXMgcmVhY2hlZCB0aGUgZW5kIG9mIGNvbnRlbnQuXG5cdFx0ZW5kT2ZDb250ZW50OiBmdW5jdGlvbiAoIHJlYWRlciApIHtcblxuXHRcdFx0Ly8gZm9vdGVyIHNpemU6IDE2MGJ5dGVzICsgMTYtYnl0ZSBhbGlnbm1lbnQgcGFkZGluZ1xuXHRcdFx0Ly8gLSAxNmJ5dGVzOiBtYWdpY1xuXHRcdFx0Ly8gLSBwYWRkaW5nIHRpbCAxNi1ieXRlIGFsaWdubWVudCAoYXQgbGVhc3QgMWJ5dGU/KVxuXHRcdFx0Ly9cdChzZWVtcyBsaWtlIHNvbWUgZXhwb3J0ZXJzIGVtYmVkIGZpeGVkIDE1IG9yIDE2Ynl0ZXM/KVxuXHRcdFx0Ly8gLSA0Ynl0ZXM6IG1hZ2ljXG5cdFx0XHQvLyAtIDRieXRlczogdmVyc2lvblxuXHRcdFx0Ly8gLSAxMjBieXRlczogemVyb1xuXHRcdFx0Ly8gLSAxNmJ5dGVzOiBtYWdpY1xuXHRcdFx0aWYgKCByZWFkZXIuc2l6ZSgpICUgMTYgPT09IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuICggKCByZWFkZXIuZ2V0T2Zmc2V0KCkgKyAxNjAgKyAxNiApICYgfiAweGYgKSA+PSByZWFkZXIuc2l6ZSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiByZWFkZXIuZ2V0T2Zmc2V0KCkgKyAxNjAgKyAxNiA+PSByZWFkZXIuc2l6ZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0Ly8gcmVjdXJzaXZlbHkgcGFyc2Ugbm9kZXMgdW50aWwgdGhlIGVuZCBvZiB0aGUgZmlsZSBpcyByZWFjaGVkXG5cdFx0cGFyc2VOb2RlOiBmdW5jdGlvbiAoIHJlYWRlciwgdmVyc2lvbiApIHtcblxuXHRcdFx0dmFyIG5vZGUgPSB7fTtcblxuXHRcdFx0Ly8gVGhlIGZpcnN0IHRocmVlIGRhdGEgc2l6ZXMgZGVwZW5kcyBvbiB2ZXJzaW9uLlxuXHRcdFx0dmFyIGVuZE9mZnNldCA9ICggdmVyc2lvbiA+PSA3NTAwICkgPyByZWFkZXIuZ2V0VWludDY0KCkgOiByZWFkZXIuZ2V0VWludDMyKCk7XG5cdFx0XHR2YXIgbnVtUHJvcGVydGllcyA9ICggdmVyc2lvbiA+PSA3NTAwICkgPyByZWFkZXIuZ2V0VWludDY0KCkgOiByZWFkZXIuZ2V0VWludDMyKCk7XG5cblx0XHRcdC8vIG5vdGU6IGRvIG5vdCByZW1vdmUgdGhpcyBldmVuIGlmIHlvdSBnZXQgYSBsaW50ZXIgd2FybmluZyBhcyBpdCBtb3ZlcyB0aGUgYnVmZmVyIGZvcndhcmRcblx0XHRcdHZhciBwcm9wZXJ0eUxpc3RMZW4gPSAoIHZlcnNpb24gPj0gNzUwMCApID8gcmVhZGVyLmdldFVpbnQ2NCgpIDogcmVhZGVyLmdldFVpbnQzMigpO1xuXG5cdFx0XHR2YXIgbmFtZUxlbiA9IHJlYWRlci5nZXRVaW50OCgpO1xuXHRcdFx0dmFyIG5hbWUgPSByZWFkZXIuZ2V0U3RyaW5nKCBuYW1lTGVuICk7XG5cblx0XHRcdC8vIFJlZ2FyZHMgdGhpcyBub2RlIGFzIE5VTEwtcmVjb3JkIGlmIGVuZE9mZnNldCBpcyB6ZXJvXG5cdFx0XHRpZiAoIGVuZE9mZnNldCA9PT0gMCApIHJldHVybiBudWxsO1xuXG5cdFx0XHR2YXIgcHJvcGVydHlMaXN0ID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG51bVByb3BlcnRpZXM7IGkgKysgKSB7XG5cblx0XHRcdFx0cHJvcGVydHlMaXN0LnB1c2goIHRoaXMucGFyc2VQcm9wZXJ0eSggcmVhZGVyICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZWdhcmRzIHRoZSBmaXJzdCB0aHJlZSBlbGVtZW50cyBpbiBwcm9wZXJ0eUxpc3QgYXMgaWQsIGF0dHJOYW1lLCBhbmQgYXR0clR5cGVcblx0XHRcdHZhciBpZCA9IHByb3BlcnR5TGlzdC5sZW5ndGggPiAwID8gcHJvcGVydHlMaXN0WyAwIF0gOiAnJztcblx0XHRcdHZhciBhdHRyTmFtZSA9IHByb3BlcnR5TGlzdC5sZW5ndGggPiAxID8gcHJvcGVydHlMaXN0WyAxIF0gOiAnJztcblx0XHRcdHZhciBhdHRyVHlwZSA9IHByb3BlcnR5TGlzdC5sZW5ndGggPiAyID8gcHJvcGVydHlMaXN0WyAyIF0gOiAnJztcblxuXHRcdFx0Ly8gY2hlY2sgaWYgdGhpcyBub2RlIHJlcHJlc2VudHMganVzdCBhIHNpbmdsZSBwcm9wZXJ0eVxuXHRcdFx0Ly8gbGlrZSAobmFtZSwgMCkgc2V0IG9yIChuYW1lMiwgWzAsIDEsIDJdKSBzZXQgb2Yge25hbWU6IDAsIG5hbWUyOiBbMCwgMSwgMl19XG5cdFx0XHRub2RlLnNpbmdsZVByb3BlcnR5ID0gKCBudW1Qcm9wZXJ0aWVzID09PSAxICYmIHJlYWRlci5nZXRPZmZzZXQoKSA9PT0gZW5kT2Zmc2V0ICkgPyB0cnVlIDogZmFsc2U7XG5cblx0XHRcdHdoaWxlICggZW5kT2Zmc2V0ID4gcmVhZGVyLmdldE9mZnNldCgpICkge1xuXG5cdFx0XHRcdHZhciBzdWJOb2RlID0gdGhpcy5wYXJzZU5vZGUoIHJlYWRlciwgdmVyc2lvbiApO1xuXG5cdFx0XHRcdGlmICggc3ViTm9kZSAhPT0gbnVsbCApIHRoaXMucGFyc2VTdWJOb2RlKCBuYW1lLCBub2RlLCBzdWJOb2RlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0bm9kZS5wcm9wZXJ0eUxpc3QgPSBwcm9wZXJ0eUxpc3Q7IC8vIHJhdyBwcm9wZXJ0eSBsaXN0IHVzZWQgYnkgcGFyZW50XG5cblx0XHRcdGlmICggdHlwZW9mIGlkID09PSAnbnVtYmVyJyApIG5vZGUuaWQgPSBpZDtcblx0XHRcdGlmICggYXR0ck5hbWUgIT09ICcnICkgbm9kZS5hdHRyTmFtZSA9IGF0dHJOYW1lO1xuXHRcdFx0aWYgKCBhdHRyVHlwZSAhPT0gJycgKSBub2RlLmF0dHJUeXBlID0gYXR0clR5cGU7XG5cdFx0XHRpZiAoIG5hbWUgIT09ICcnICkgbm9kZS5uYW1lID0gbmFtZTtcblxuXHRcdFx0cmV0dXJuIG5vZGU7XG5cblx0XHR9LFxuXG5cdFx0cGFyc2VTdWJOb2RlOiBmdW5jdGlvbiAoIG5hbWUsIG5vZGUsIHN1Yk5vZGUgKSB7XG5cblx0XHRcdC8vIHNwZWNpYWwgY2FzZTogY2hpbGQgbm9kZSBpcyBzaW5nbGUgcHJvcGVydHlcblx0XHRcdGlmICggc3ViTm9kZS5zaW5nbGVQcm9wZXJ0eSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR2YXIgdmFsdWUgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgMCBdO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblxuXHRcdFx0XHRcdG5vZGVbIHN1Yk5vZGUubmFtZSBdID0gc3ViTm9kZTtcblxuXHRcdFx0XHRcdHN1Yk5vZGUuYSA9IHZhbHVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRub2RlWyBzdWJOb2RlLm5hbWUgXSA9IHZhbHVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggbmFtZSA9PT0gJ0Nvbm5lY3Rpb25zJyAmJiBzdWJOb2RlLm5hbWUgPT09ICdDJyApIHtcblxuXHRcdFx0XHR2YXIgYXJyYXkgPSBbXTtcblxuXHRcdFx0XHRzdWJOb2RlLnByb3BlcnR5TGlzdC5mb3JFYWNoKCBmdW5jdGlvbiAoIHByb3BlcnR5LCBpICkge1xuXG5cdFx0XHRcdFx0Ly8gZmlyc3QgQ29ubmVjdGlvbiBpcyBGQlggdHlwZSAoT08sIE9QLCBldGMuKS4gV2UnbGwgZGlzY2FyZCB0aGVzZVxuXHRcdFx0XHRcdGlmICggaSAhPT0gMCApIGFycmF5LnB1c2goIHByb3BlcnR5ICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdGlmICggbm9kZS5jb25uZWN0aW9ucyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bm9kZS5jb25uZWN0aW9ucyA9IFtdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRub2RlLmNvbm5lY3Rpb25zLnB1c2goIGFycmF5ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHN1Yk5vZGUubmFtZSA9PT0gJ1Byb3BlcnRpZXM3MCcgKSB7XG5cblx0XHRcdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyggc3ViTm9kZSApO1xuXG5cdFx0XHRcdGtleXMuZm9yRWFjaCggZnVuY3Rpb24gKCBrZXkgKSB7XG5cblx0XHRcdFx0XHRub2RlWyBrZXkgXSA9IHN1Yk5vZGVbIGtleSBdO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbmFtZSA9PT0gJ1Byb3BlcnRpZXM3MCcgJiYgc3ViTm9kZS5uYW1lID09PSAnUCcgKSB7XG5cblx0XHRcdFx0dmFyIGlubmVyUHJvcE5hbWUgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgMCBdO1xuXHRcdFx0XHR2YXIgaW5uZXJQcm9wVHlwZTEgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgMSBdO1xuXHRcdFx0XHR2YXIgaW5uZXJQcm9wVHlwZTIgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgMiBdO1xuXHRcdFx0XHR2YXIgaW5uZXJQcm9wRmxhZyA9IHN1Yk5vZGUucHJvcGVydHlMaXN0WyAzIF07XG5cdFx0XHRcdHZhciBpbm5lclByb3BWYWx1ZTtcblxuXHRcdFx0XHRpZiAoIGlubmVyUHJvcE5hbWUuaW5kZXhPZiggJ0xjbCAnICkgPT09IDAgKSBpbm5lclByb3BOYW1lID0gaW5uZXJQcm9wTmFtZS5yZXBsYWNlKCAnTGNsICcsICdMY2xfJyApO1xuXHRcdFx0XHRpZiAoIGlubmVyUHJvcFR5cGUxLmluZGV4T2YoICdMY2wgJyApID09PSAwICkgaW5uZXJQcm9wVHlwZTEgPSBpbm5lclByb3BUeXBlMS5yZXBsYWNlKCAnTGNsICcsICdMY2xfJyApO1xuXG5cdFx0XHRcdGlmICggaW5uZXJQcm9wVHlwZTEgPT09ICdDb2xvcicgfHwgaW5uZXJQcm9wVHlwZTEgPT09ICdDb2xvclJHQicgfHwgaW5uZXJQcm9wVHlwZTEgPT09ICdWZWN0b3InIHx8IGlubmVyUHJvcFR5cGUxID09PSAnVmVjdG9yM0QnIHx8IGlubmVyUHJvcFR5cGUxLmluZGV4T2YoICdMY2xfJyApID09PSAwICkge1xuXG5cdFx0XHRcdFx0aW5uZXJQcm9wVmFsdWUgPSBbXG5cdFx0XHRcdFx0XHRzdWJOb2RlLnByb3BlcnR5TGlzdFsgNCBdLFxuXHRcdFx0XHRcdFx0c3ViTm9kZS5wcm9wZXJ0eUxpc3RbIDUgXSxcblx0XHRcdFx0XHRcdHN1Yk5vZGUucHJvcGVydHlMaXN0WyA2IF1cblx0XHRcdFx0XHRdO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpbm5lclByb3BWYWx1ZSA9IHN1Yk5vZGUucHJvcGVydHlMaXN0WyA0IF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHRoaXMgd2lsbCBiZSBjb3BpZWQgdG8gcGFyZW50LCBzZWUgYWJvdmVcblx0XHRcdFx0bm9kZVsgaW5uZXJQcm9wTmFtZSBdID0ge1xuXG5cdFx0XHRcdFx0J3R5cGUnOiBpbm5lclByb3BUeXBlMSxcblx0XHRcdFx0XHQndHlwZTInOiBpbm5lclByb3BUeXBlMixcblx0XHRcdFx0XHQnZmxhZyc6IGlubmVyUHJvcEZsYWcsXG5cdFx0XHRcdFx0J3ZhbHVlJzogaW5uZXJQcm9wVmFsdWVcblxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBub2RlWyBzdWJOb2RlLm5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggdHlwZW9mIHN1Yk5vZGUuaWQgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRcdFx0bm9kZVsgc3ViTm9kZS5uYW1lIF0gPSB7fTtcblx0XHRcdFx0XHRub2RlWyBzdWJOb2RlLm5hbWUgXVsgc3ViTm9kZS5pZCBdID0gc3ViTm9kZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0bm9kZVsgc3ViTm9kZS5uYW1lIF0gPSBzdWJOb2RlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHN1Yk5vZGUubmFtZSA9PT0gJ1Bvc2VOb2RlJyApIHtcblxuXHRcdFx0XHRcdGlmICggISBBcnJheS5pc0FycmF5KCBub2RlWyBzdWJOb2RlLm5hbWUgXSApICkge1xuXG5cdFx0XHRcdFx0XHRub2RlWyBzdWJOb2RlLm5hbWUgXSA9IFsgbm9kZVsgc3ViTm9kZS5uYW1lIF0gXTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG5vZGVbIHN1Yk5vZGUubmFtZSBdLnB1c2goIHN1Yk5vZGUgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBub2RlWyBzdWJOb2RlLm5hbWUgXVsgc3ViTm9kZS5pZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRub2RlWyBzdWJOb2RlLm5hbWUgXVsgc3ViTm9kZS5pZCBdID0gc3ViTm9kZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRwYXJzZVByb3BlcnR5OiBmdW5jdGlvbiAoIHJlYWRlciApIHtcblxuXHRcdFx0dmFyIHR5cGUgPSByZWFkZXIuZ2V0U3RyaW5nKCAxICk7XG5cblx0XHRcdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnQyc6XG5cdFx0XHRcdFx0cmV0dXJuIHJlYWRlci5nZXRCb29sZWFuKCk7XG5cblx0XHRcdFx0Y2FzZSAnRCc6XG5cdFx0XHRcdFx0cmV0dXJuIHJlYWRlci5nZXRGbG9hdDY0KCk7XG5cblx0XHRcdFx0Y2FzZSAnRic6XG5cdFx0XHRcdFx0cmV0dXJuIHJlYWRlci5nZXRGbG9hdDMyKCk7XG5cblx0XHRcdFx0Y2FzZSAnSSc6XG5cdFx0XHRcdFx0cmV0dXJuIHJlYWRlci5nZXRJbnQzMigpO1xuXG5cdFx0XHRcdGNhc2UgJ0wnOlxuXHRcdFx0XHRcdHJldHVybiByZWFkZXIuZ2V0SW50NjQoKTtcblxuXHRcdFx0XHRjYXNlICdSJzpcblx0XHRcdFx0XHR2YXIgbGVuZ3RoID0gcmVhZGVyLmdldFVpbnQzMigpO1xuXHRcdFx0XHRcdHJldHVybiByZWFkZXIuZ2V0QXJyYXlCdWZmZXIoIGxlbmd0aCApO1xuXG5cdFx0XHRcdGNhc2UgJ1MnOlxuXHRcdFx0XHRcdHZhciBsZW5ndGggPSByZWFkZXIuZ2V0VWludDMyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlYWRlci5nZXRTdHJpbmcoIGxlbmd0aCApO1xuXG5cdFx0XHRcdGNhc2UgJ1knOlxuXHRcdFx0XHRcdHJldHVybiByZWFkZXIuZ2V0SW50MTYoKTtcblxuXHRcdFx0XHRjYXNlICdiJzpcblx0XHRcdFx0Y2FzZSAnYyc6XG5cdFx0XHRcdGNhc2UgJ2QnOlxuXHRcdFx0XHRjYXNlICdmJzpcblx0XHRcdFx0Y2FzZSAnaSc6XG5cdFx0XHRcdGNhc2UgJ2wnOlxuXG5cdFx0XHRcdFx0dmFyIGFycmF5TGVuZ3RoID0gcmVhZGVyLmdldFVpbnQzMigpO1xuXHRcdFx0XHRcdHZhciBlbmNvZGluZyA9IHJlYWRlci5nZXRVaW50MzIoKTsgLy8gMDogbm9uLWNvbXByZXNzZWQsIDE6IGNvbXByZXNzZWRcblx0XHRcdFx0XHR2YXIgY29tcHJlc3NlZExlbmd0aCA9IHJlYWRlci5nZXRVaW50MzIoKTtcblxuXHRcdFx0XHRcdGlmICggZW5jb2RpbmcgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2MnOlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZWFkZXIuZ2V0Qm9vbGVhbkFycmF5KCBhcnJheUxlbmd0aCApO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2QnOlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZWFkZXIuZ2V0RmxvYXQ2NEFycmF5KCBhcnJheUxlbmd0aCApO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2YnOlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZWFkZXIuZ2V0RmxvYXQzMkFycmF5KCBhcnJheUxlbmd0aCApO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2knOlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZWFkZXIuZ2V0SW50MzJBcnJheSggYXJyYXlMZW5ndGggKTtcblxuXHRcdFx0XHRcdFx0XHRjYXNlICdsJzpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVhZGVyLmdldEludDY0QXJyYXkoIGFycmF5TGVuZ3RoICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggdHlwZW9mIFpsaWIgPT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRkJYTG9hZGVyOiBFeHRlcm5hbCBsaWJyYXJ5IEluZmxhdGUubWluLmpzIHJlcXVpcmVkLCBvYnRhaW4gb3IgaW1wb3J0IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ltYXlhL3psaWIuanMnICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgaW5mbGF0ZSA9IG5ldyBabGliLkluZmxhdGUoIG5ldyBVaW50OEFycmF5KCByZWFkZXIuZ2V0QXJyYXlCdWZmZXIoIGNvbXByZXNzZWRMZW5ndGggKSApICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblx0XHRcdFx0XHR2YXIgcmVhZGVyMiA9IG5ldyBCaW5hcnlSZWFkZXIoIGluZmxhdGUuZGVjb21wcmVzcygpLmJ1ZmZlciApO1xuXG5cdFx0XHRcdFx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRjYXNlICdjJzpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlYWRlcjIuZ2V0Qm9vbGVhbkFycmF5KCBhcnJheUxlbmd0aCApO1xuXG5cdFx0XHRcdFx0XHRjYXNlICdkJzpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlYWRlcjIuZ2V0RmxvYXQ2NEFycmF5KCBhcnJheUxlbmd0aCApO1xuXG5cdFx0XHRcdFx0XHRjYXNlICdmJzpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlYWRlcjIuZ2V0RmxvYXQzMkFycmF5KCBhcnJheUxlbmd0aCApO1xuXG5cdFx0XHRcdFx0XHRjYXNlICdpJzpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlYWRlcjIuZ2V0SW50MzJBcnJheSggYXJyYXlMZW5ndGggKTtcblxuXHRcdFx0XHRcdFx0Y2FzZSAnbCc6XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZWFkZXIyLmdldEludDY0QXJyYXkoIGFycmF5TGVuZ3RoICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5GQlhMb2FkZXI6IFVua25vd24gcHJvcGVydHkgdHlwZSAnICsgdHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fTtcblxuXHRmdW5jdGlvbiBCaW5hcnlSZWFkZXIoIGJ1ZmZlciwgbGl0dGxlRW5kaWFuICkge1xuXG5cdFx0dGhpcy5kdiA9IG5ldyBEYXRhVmlldyggYnVmZmVyICk7XG5cdFx0dGhpcy5vZmZzZXQgPSAwO1xuXHRcdHRoaXMubGl0dGxlRW5kaWFuID0gKCBsaXR0bGVFbmRpYW4gIT09IHVuZGVmaW5lZCApID8gbGl0dGxlRW5kaWFuIDogdHJ1ZTtcblxuXHR9XG5cblx0QmluYXJ5UmVhZGVyLnByb3RvdHlwZSA9IHtcblxuXHRcdGNvbnN0cnVjdG9yOiBCaW5hcnlSZWFkZXIsXG5cblx0XHRnZXRPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMub2Zmc2V0O1xuXG5cdFx0fSxcblxuXHRcdHNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZHYuYnVmZmVyLmJ5dGVMZW5ndGg7XG5cblx0XHR9LFxuXG5cdFx0c2tpcDogZnVuY3Rpb24gKCBsZW5ndGggKSB7XG5cblx0XHRcdHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcblxuXHRcdH0sXG5cblx0XHQvLyBzZWVtcyBsaWtlIHRydWUvZmFsc2UgcmVwcmVzZW50YXRpb24gZGVwZW5kcyBvbiBleHBvcnRlci5cblx0XHQvLyB0cnVlOiAxIG9yICdZJyg9MHg1OSksIGZhbHNlOiAwIG9yICdUJyg9MHg1NClcblx0XHQvLyB0aGVuIHNlZXMgTFNCLlxuXHRcdGdldEJvb2xlYW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXRVaW50OCgpICYgMSApID09PSAxO1xuXG5cdFx0fSxcblxuXHRcdGdldEJvb2xlYW5BcnJheTogZnVuY3Rpb24gKCBzaXplICkge1xuXG5cdFx0XHR2YXIgYSA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaXplOyBpICsrICkge1xuXG5cdFx0XHRcdGEucHVzaCggdGhpcy5nZXRCb29sZWFuKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYTtcblxuXHRcdH0sXG5cblx0XHRnZXRVaW50ODogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgdmFsdWUgPSB0aGlzLmR2LmdldFVpbnQ4KCB0aGlzLm9mZnNldCApO1xuXHRcdFx0dGhpcy5vZmZzZXQgKz0gMTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblxuXHRcdH0sXG5cblx0XHRnZXRJbnQxNjogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgdmFsdWUgPSB0aGlzLmR2LmdldEludDE2KCB0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4gKTtcblx0XHRcdHRoaXMub2Zmc2V0ICs9IDI7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cblx0XHR9LFxuXG5cdFx0Z2V0SW50MzI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIHZhbHVlID0gdGhpcy5kdi5nZXRJbnQzMiggdGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuICk7XG5cdFx0XHR0aGlzLm9mZnNldCArPSA0O1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXG5cdFx0fSxcblxuXHRcdGdldEludDMyQXJyYXk6IGZ1bmN0aW9uICggc2l6ZSApIHtcblxuXHRcdFx0dmFyIGEgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRhLnB1c2goIHRoaXMuZ2V0SW50MzIoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhO1xuXG5cdFx0fSxcblxuXHRcdGdldFVpbnQzMjogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgdmFsdWUgPSB0aGlzLmR2LmdldFVpbnQzMiggdGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuICk7XG5cdFx0XHR0aGlzLm9mZnNldCArPSA0O1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXG5cdFx0fSxcblxuXHRcdC8vIEphdmFTY3JpcHQgZG9lc24ndCBzdXBwb3J0IDY0LWJpdCBpbnRlZ2VyIHNvIGNhbGN1bGF0ZSB0aGlzIGhlcmVcblx0XHQvLyAxIDw8IDMyIHdpbGwgcmV0dXJuIDEgc28gdXNpbmcgbXVsdGlwbHkgb3BlcmF0aW9uIGluc3RlYWQgaGVyZS5cblx0XHQvLyBUaGVyZSdzIGEgcG9zc2liaWxpdHkgdGhhdCB0aGlzIG1ldGhvZCByZXR1cm5zIHdyb25nIHZhbHVlIGlmIHRoZSB2YWx1ZVxuXHRcdC8vIGlzIG91dCBvZiB0aGUgcmFuZ2UgYmV0d2VlbiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiBhbmQgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIuXG5cdFx0Ly8gVE9ETzogc2FmZWx5IGhhbmRsZSA2NC1iaXQgaW50ZWdlclxuXHRcdGdldEludDY0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHZhciBsb3csIGhpZ2g7XG5cblx0XHRcdGlmICggdGhpcy5saXR0bGVFbmRpYW4gKSB7XG5cblx0XHRcdFx0bG93ID0gdGhpcy5nZXRVaW50MzIoKTtcblx0XHRcdFx0aGlnaCA9IHRoaXMuZ2V0VWludDMyKCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aGlnaCA9IHRoaXMuZ2V0VWludDMyKCk7XG5cdFx0XHRcdGxvdyA9IHRoaXMuZ2V0VWludDMyKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsY3VsYXRlIG5lZ2F0aXZlIHZhbHVlXG5cdFx0XHRpZiAoIGhpZ2ggJiAweDgwMDAwMDAwICkge1xuXG5cdFx0XHRcdGhpZ2ggPSB+IGhpZ2ggJiAweEZGRkZGRkZGO1xuXHRcdFx0XHRsb3cgPSB+IGxvdyAmIDB4RkZGRkZGRkY7XG5cblx0XHRcdFx0aWYgKCBsb3cgPT09IDB4RkZGRkZGRkYgKSBoaWdoID0gKCBoaWdoICsgMSApICYgMHhGRkZGRkZGRjtcblxuXHRcdFx0XHRsb3cgPSAoIGxvdyArIDEgKSAmIDB4RkZGRkZGRkY7XG5cblx0XHRcdFx0cmV0dXJuIC0gKCBoaWdoICogMHgxMDAwMDAwMDAgKyBsb3cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaGlnaCAqIDB4MTAwMDAwMDAwICsgbG93O1xuXG5cdFx0fSxcblxuXHRcdGdldEludDY0QXJyYXk6IGZ1bmN0aW9uICggc2l6ZSApIHtcblxuXHRcdFx0dmFyIGEgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRhLnB1c2goIHRoaXMuZ2V0SW50NjQoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhO1xuXG5cdFx0fSxcblxuXHRcdC8vIE5vdGU6IHNlZSBnZXRJbnQ2NCgpIGNvbW1lbnRcblx0XHRnZXRVaW50NjQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIGxvdywgaGlnaDtcblxuXHRcdFx0aWYgKCB0aGlzLmxpdHRsZUVuZGlhbiApIHtcblxuXHRcdFx0XHRsb3cgPSB0aGlzLmdldFVpbnQzMigpO1xuXHRcdFx0XHRoaWdoID0gdGhpcy5nZXRVaW50MzIoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRoaWdoID0gdGhpcy5nZXRVaW50MzIoKTtcblx0XHRcdFx0bG93ID0gdGhpcy5nZXRVaW50MzIoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaGlnaCAqIDB4MTAwMDAwMDAwICsgbG93O1xuXG5cdFx0fSxcblxuXHRcdGdldEZsb2F0MzI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIHZhbHVlID0gdGhpcy5kdi5nZXRGbG9hdDMyKCB0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4gKTtcblx0XHRcdHRoaXMub2Zmc2V0ICs9IDQ7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cblx0XHR9LFxuXG5cdFx0Z2V0RmxvYXQzMkFycmF5OiBmdW5jdGlvbiAoIHNpemUgKSB7XG5cblx0XHRcdHZhciBhID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0YS5wdXNoKCB0aGlzLmdldEZsb2F0MzIoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhO1xuXG5cdFx0fSxcblxuXHRcdGdldEZsb2F0NjQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIHZhbHVlID0gdGhpcy5kdi5nZXRGbG9hdDY0KCB0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4gKTtcblx0XHRcdHRoaXMub2Zmc2V0ICs9IDg7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cblx0XHR9LFxuXG5cdFx0Z2V0RmxvYXQ2NEFycmF5OiBmdW5jdGlvbiAoIHNpemUgKSB7XG5cblx0XHRcdHZhciBhID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0YS5wdXNoKCB0aGlzLmdldEZsb2F0NjQoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhO1xuXG5cdFx0fSxcblxuXHRcdGdldEFycmF5QnVmZmVyOiBmdW5jdGlvbiAoIHNpemUgKSB7XG5cblx0XHRcdHZhciB2YWx1ZSA9IHRoaXMuZHYuYnVmZmVyLnNsaWNlKCB0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBzaXplICk7XG5cdFx0XHR0aGlzLm9mZnNldCArPSBzaXplO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXG5cdFx0fSxcblxuXHRcdGdldFN0cmluZzogZnVuY3Rpb24gKCBzaXplICkge1xuXG5cdFx0XHQvLyBub3RlOiBzYWZhcmkgOSBkb2Vzbid0IHN1cHBvcnQgVWludDhBcnJheS5pbmRleE9mOyBjcmVhdGUgaW50ZXJtZWRpYXRlIGFycmF5IGluc3RlYWRcblx0XHRcdHZhciBhID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0YVsgaSBdID0gdGhpcy5nZXRVaW50OCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBudWxsQnl0ZSA9IGEuaW5kZXhPZiggMCApO1xuXHRcdFx0aWYgKCBudWxsQnl0ZSA+PSAwICkgYSA9IGEuc2xpY2UoIDAsIG51bGxCeXRlICk7XG5cblx0XHRcdHJldHVybiBMb2FkZXJVdGlscy5kZWNvZGVUZXh0KCBuZXcgVWludDhBcnJheSggYSApICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLyBGQlhUcmVlIGhvbGRzIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIEZCWCBkYXRhLCByZXR1cm5lZCBieSB0aGUgVGV4dFBhcnNlciAoIEZCWCBBU0NJSSBmb3JtYXQpXG5cdC8vIGFuZCBCaW5hcnlQYXJzZXIoIEZCWCBCaW5hcnkgZm9ybWF0KVxuXHRmdW5jdGlvbiBGQlhUcmVlKCkge31cblxuXHRGQlhUcmVlLnByb3RvdHlwZSA9IHtcblxuXHRcdGNvbnN0cnVjdG9yOiBGQlhUcmVlLFxuXG5cdFx0YWRkOiBmdW5jdGlvbiAoIGtleSwgdmFsICkge1xuXG5cdFx0XHR0aGlzWyBrZXkgXSA9IHZhbDtcblxuXHRcdH0sXG5cblx0fTtcblxuXHQvLyAqKioqKioqKioqKioqKiBVVElMSVRZIEZVTkNUSU9OUyAqKioqKioqKioqKioqKlxuXG5cdGZ1bmN0aW9uIGlzRmJ4Rm9ybWF0QmluYXJ5KCBidWZmZXIgKSB7XG5cblx0XHR2YXIgQ09SUkVDVCA9ICdLYXlkYXJhIEZCWCBCaW5hcnkgIFxcMCc7XG5cblx0XHRyZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGggPj0gQ09SUkVDVC5sZW5ndGggJiYgQ09SUkVDVCA9PT0gY29udmVydEFycmF5QnVmZmVyVG9TdHJpbmcoIGJ1ZmZlciwgMCwgQ09SUkVDVC5sZW5ndGggKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNGYnhGb3JtYXRBU0NJSSggdGV4dCApIHtcblxuXHRcdHZhciBDT1JSRUNUID0gWyAnSycsICdhJywgJ3knLCAnZCcsICdhJywgJ3InLCAnYScsICdcXFxcJywgJ0YnLCAnQicsICdYJywgJ1xcXFwnLCAnQicsICdpJywgJ24nLCAnYScsICdyJywgJ3knLCAnXFxcXCcsICdcXFxcJyBdO1xuXG5cdFx0dmFyIGN1cnNvciA9IDA7XG5cblx0XHRmdW5jdGlvbiByZWFkKCBvZmZzZXQgKSB7XG5cblx0XHRcdHZhciByZXN1bHQgPSB0ZXh0WyBvZmZzZXQgLSAxIF07XG5cdFx0XHR0ZXh0ID0gdGV4dC5zbGljZSggY3Vyc29yICsgb2Zmc2V0ICk7XG5cdFx0XHRjdXJzb3IgKys7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgQ09SUkVDVC5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBudW0gPSByZWFkKCAxICk7XG5cdFx0XHRpZiAoIG51bSA9PT0gQ09SUkVDVFsgaSBdICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEZieFZlcnNpb24oIHRleHQgKSB7XG5cblx0XHR2YXIgdmVyc2lvblJlZ0V4cCA9IC9GQlhWZXJzaW9uOiAoXFxkKykvO1xuXHRcdHZhciBtYXRjaCA9IHRleHQubWF0Y2goIHZlcnNpb25SZWdFeHAgKTtcblx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHR2YXIgdmVyc2lvbiA9IHBhcnNlSW50KCBtYXRjaFsgMSBdICk7XG5cdFx0XHRyZXR1cm4gdmVyc2lvbjtcblxuXHRcdH1cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5GQlhMb2FkZXI6IENhbm5vdCBmaW5kIHRoZSB2ZXJzaW9uIG51bWJlciBmb3IgdGhlIGZpbGUgZ2l2ZW4uJyApO1xuXG5cdH1cblxuXHQvLyBDb252ZXJ0cyBGQlggdGlja3MgaW50byByZWFsIHRpbWUgc2Vjb25kcy5cblx0ZnVuY3Rpb24gY29udmVydEZCWFRpbWVUb1NlY29uZHMoIHRpbWUgKSB7XG5cblx0XHRyZXR1cm4gdGltZSAvIDQ2MTg2MTU4MDAwO1xuXG5cdH1cblxuXHR2YXIgZGF0YUFycmF5ID0gW107XG5cblx0Ly8gZXh0cmFjdHMgdGhlIGRhdGEgZnJvbSB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgRkJYIGFycmF5IGJhc2VkIG9uIGluZGV4aW5nIHR5cGVcblx0ZnVuY3Rpb24gZ2V0RGF0YSggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBpbmZvT2JqZWN0ICkge1xuXG5cdFx0dmFyIGluZGV4O1xuXG5cdFx0c3dpdGNoICggaW5mb09iamVjdC5tYXBwaW5nVHlwZSApIHtcblxuXHRcdFx0Y2FzZSAnQnlQb2x5Z29uVmVydGV4JyA6XG5cdFx0XHRcdGluZGV4ID0gcG9seWdvblZlcnRleEluZGV4O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ0J5UG9seWdvbicgOlxuXHRcdFx0XHRpbmRleCA9IHBvbHlnb25JbmRleDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdCeVZlcnRpY2UnIDpcblx0XHRcdFx0aW5kZXggPSB2ZXJ0ZXhJbmRleDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdBbGxTYW1lJyA6XG5cdFx0XHRcdGluZGV4ID0gaW5mb09iamVjdC5pbmRpY2VzWyAwIF07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdCA6XG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogdW5rbm93biBhdHRyaWJ1dGUgbWFwcGluZyB0eXBlICcgKyBpbmZvT2JqZWN0Lm1hcHBpbmdUeXBlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGluZm9PYmplY3QucmVmZXJlbmNlVHlwZSA9PT0gJ0luZGV4VG9EaXJlY3QnICkgaW5kZXggPSBpbmZvT2JqZWN0LmluZGljZXNbIGluZGV4IF07XG5cblx0XHR2YXIgZnJvbSA9IGluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZTtcblx0XHR2YXIgdG8gPSBmcm9tICsgaW5mb09iamVjdC5kYXRhU2l6ZTtcblxuXHRcdHJldHVybiBzbGljZSggZGF0YUFycmF5LCBpbmZvT2JqZWN0LmJ1ZmZlciwgZnJvbSwgdG8gKTtcblxuXHR9XG5cblx0dmFyIHRlbXBFdWxlciA9IG5ldyBFdWxlcigpO1xuXHR2YXIgdGVtcFZlYyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0Ly8gZ2VuZXJhdGUgdHJhbnNmb3JtYXRpb24gZnJvbSBGQlggdHJhbnNmb3JtIGRhdGFcblx0Ly8gcmVmOiBodHRwczovL2hlbHAuYXV0b2Rlc2suY29tL3ZpZXcvRkJYLzIwMTcvRU5VLz9ndWlkPV9fZmlsZXNfR1VJRF8xMENERDYzQ183OUMxXzRGMkRfQkIyOF9BRDJCRTY1QTAyRURfaHRtXG5cdC8vIHJlZjogaHR0cDovL2RvY3MuYXV0b2Rlc2suY29tL0ZCWC8yMDE0L0VOVS9GQlgtU0RLLURvY3VtZW50YXRpb24vaW5kZXguaHRtbD91cmw9Y3BwX3JlZi9fdHJhbnNmb3JtYXRpb25zXzJtYWluXzhjeHgtZXhhbXBsZS5odG1sLHRvcGljTnVtYmVyPWNwcF9yZWZfX3RyYW5zZm9ybWF0aW9uc18ybWFpbl84Y3h4X2V4YW1wbGVfaHRtbGZjMTBhMWUxLWIxOGQtNGU3Mi05ZGMwLTcwZDBmMTk1OWY1ZVxuXHRmdW5jdGlvbiBnZW5lcmF0ZVRyYW5zZm9ybSggdHJhbnNmb3JtRGF0YSApIHtcblxuXHRcdHZhciBsVHJhbnNsYXRpb25NID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgbFByZVJvdGF0aW9uTSA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dmFyIGxSb3RhdGlvbk0gPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciBsUG9zdFJvdGF0aW9uTSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHR2YXIgbFNjYWxpbmdNID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgbFNjYWxpbmdQaXZvdE0gPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciBsU2NhbGluZ09mZnNldE0gPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciBsUm90YXRpb25PZmZzZXRNID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgbFJvdGF0aW9uUGl2b3RNID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHZhciBsUGFyZW50R1ggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciBsR2xvYmFsVCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHR2YXIgaW5oZXJpdFR5cGUgPSAoIHRyYW5zZm9ybURhdGEuaW5oZXJpdFR5cGUgKSA/IHRyYW5zZm9ybURhdGEuaW5oZXJpdFR5cGUgOiAwO1xuXG5cdFx0aWYgKCB0cmFuc2Zvcm1EYXRhLnRyYW5zbGF0aW9uICkgbFRyYW5zbGF0aW9uTS5zZXRQb3NpdGlvbiggdGVtcFZlYy5mcm9tQXJyYXkoIHRyYW5zZm9ybURhdGEudHJhbnNsYXRpb24gKSApO1xuXG5cdFx0aWYgKCB0cmFuc2Zvcm1EYXRhLnByZVJvdGF0aW9uICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSB0cmFuc2Zvcm1EYXRhLnByZVJvdGF0aW9uLm1hcCggX01hdGguZGVnVG9SYWQgKTtcblx0XHRcdGFycmF5LnB1c2goIHRyYW5zZm9ybURhdGEuZXVsZXJPcmRlciApO1xuXHRcdFx0bFByZVJvdGF0aW9uTS5tYWtlUm90YXRpb25Gcm9tRXVsZXIoIHRlbXBFdWxlci5mcm9tQXJyYXkoIGFycmF5ICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHJhbnNmb3JtRGF0YS5yb3RhdGlvbiApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gdHJhbnNmb3JtRGF0YS5yb3RhdGlvbi5tYXAoIF9NYXRoLmRlZ1RvUmFkICk7XG5cdFx0XHRhcnJheS5wdXNoKCB0cmFuc2Zvcm1EYXRhLmV1bGVyT3JkZXIgKTtcblx0XHRcdGxSb3RhdGlvbk0ubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCB0ZW1wRXVsZXIuZnJvbUFycmF5KCBhcnJheSApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRyYW5zZm9ybURhdGEucG9zdFJvdGF0aW9uICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSB0cmFuc2Zvcm1EYXRhLnBvc3RSb3RhdGlvbi5tYXAoIF9NYXRoLmRlZ1RvUmFkICk7XG5cdFx0XHRhcnJheS5wdXNoKCB0cmFuc2Zvcm1EYXRhLmV1bGVyT3JkZXIgKTtcblx0XHRcdGxQb3N0Um90YXRpb25NLm1ha2VSb3RhdGlvbkZyb21FdWxlciggdGVtcEV1bGVyLmZyb21BcnJheSggYXJyYXkgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0cmFuc2Zvcm1EYXRhLnNjYWxlICkgbFNjYWxpbmdNLnNjYWxlKCB0ZW1wVmVjLmZyb21BcnJheSggdHJhbnNmb3JtRGF0YS5zY2FsZSApICk7XG5cblx0XHQvLyBQaXZvdHMgYW5kIG9mZnNldHNcblx0XHRpZiAoIHRyYW5zZm9ybURhdGEuc2NhbGluZ09mZnNldCApIGxTY2FsaW5nT2Zmc2V0TS5zZXRQb3NpdGlvbiggdGVtcFZlYy5mcm9tQXJyYXkoIHRyYW5zZm9ybURhdGEuc2NhbGluZ09mZnNldCApICk7XG5cdFx0aWYgKCB0cmFuc2Zvcm1EYXRhLnNjYWxpbmdQaXZvdCApIGxTY2FsaW5nUGl2b3RNLnNldFBvc2l0aW9uKCB0ZW1wVmVjLmZyb21BcnJheSggdHJhbnNmb3JtRGF0YS5zY2FsaW5nUGl2b3QgKSApO1xuXHRcdGlmICggdHJhbnNmb3JtRGF0YS5yb3RhdGlvbk9mZnNldCApIGxSb3RhdGlvbk9mZnNldE0uc2V0UG9zaXRpb24oIHRlbXBWZWMuZnJvbUFycmF5KCB0cmFuc2Zvcm1EYXRhLnJvdGF0aW9uT2Zmc2V0ICkgKTtcblx0XHRpZiAoIHRyYW5zZm9ybURhdGEucm90YXRpb25QaXZvdCApIGxSb3RhdGlvblBpdm90TS5zZXRQb3NpdGlvbiggdGVtcFZlYy5mcm9tQXJyYXkoIHRyYW5zZm9ybURhdGEucm90YXRpb25QaXZvdCApICk7XG5cblx0XHQvLyBwYXJlbnQgdHJhbnNmb3JtXG5cdFx0aWYgKCB0cmFuc2Zvcm1EYXRhLnBhcmVudE1hdHJpeFdvcmxkICkgbFBhcmVudEdYID0gdHJhbnNmb3JtRGF0YS5wYXJlbnRNYXRyaXhXb3JsZDtcblxuXHRcdC8vIEdsb2JhbCBSb3RhdGlvblxuXHRcdHZhciBsTFJNID0gbFByZVJvdGF0aW9uTS5tdWx0aXBseSggbFJvdGF0aW9uTSApLm11bHRpcGx5KCBsUG9zdFJvdGF0aW9uTSApO1xuXHRcdHZhciBsUGFyZW50R1JNID0gbmV3IE1hdHJpeDQoKTtcblx0XHRsUGFyZW50R1guZXh0cmFjdFJvdGF0aW9uKCBsUGFyZW50R1JNICk7XG5cblx0XHQvLyBHbG9iYWwgU2hlYXIqU2NhbGluZ1xuXHRcdHZhciBsUGFyZW50VE0gPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciBsTFNNO1xuXHRcdHZhciBsUGFyZW50R1NNO1xuXHRcdHZhciBsUGFyZW50R1JTTTtcblxuXHRcdGxQYXJlbnRUTS5jb3B5UG9zaXRpb24oIGxQYXJlbnRHWCApO1xuXHRcdGxQYXJlbnRHUlNNID0gbFBhcmVudFRNLmdldEludmVyc2UoIGxQYXJlbnRUTSApLm11bHRpcGx5KCBsUGFyZW50R1ggKTtcblx0XHRsUGFyZW50R1NNID0gbFBhcmVudEdSTS5nZXRJbnZlcnNlKCBsUGFyZW50R1JNICkubXVsdGlwbHkoIGxQYXJlbnRHUlNNICk7XG5cdFx0bExTTSA9IGxTY2FsaW5nTTtcblxuXHRcdHZhciBsR2xvYmFsUlM7XG5cdFx0aWYgKCBpbmhlcml0VHlwZSA9PT0gMCApIHtcblxuXHRcdFx0bEdsb2JhbFJTID0gbFBhcmVudEdSTS5tdWx0aXBseSggbExSTSApLm11bHRpcGx5KCBsUGFyZW50R1NNICkubXVsdGlwbHkoIGxMU00gKTtcblxuXHRcdH0gZWxzZSBpZiAoIGluaGVyaXRUeXBlID09PSAxICkge1xuXG5cdFx0XHRsR2xvYmFsUlMgPSBsUGFyZW50R1JNLm11bHRpcGx5KCBsUGFyZW50R1NNICkubXVsdGlwbHkoIGxMUk0gKS5tdWx0aXBseSggbExTTSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGxQYXJlbnRMU00gPSBuZXcgTWF0cml4NCgpLmNvcHkoIGxTY2FsaW5nTSApO1xuXG5cdFx0XHR2YXIgbFBhcmVudEdTTV9ub0xvY2FsID0gbFBhcmVudEdTTS5tdWx0aXBseSggbFBhcmVudExTTS5nZXRJbnZlcnNlKCBsUGFyZW50TFNNICkgKTtcblxuXHRcdFx0bEdsb2JhbFJTID0gbFBhcmVudEdSTS5tdWx0aXBseSggbExSTSApLm11bHRpcGx5KCBsUGFyZW50R1NNX25vTG9jYWwgKS5tdWx0aXBseSggbExTTSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSBsb2NhbCB0cmFuc2Zvcm0gbWF0cml4XG5cdFx0dmFyIGxUcmFuc2Zvcm0gPSBsVHJhbnNsYXRpb25NLm11bHRpcGx5KCBsUm90YXRpb25PZmZzZXRNICkubXVsdGlwbHkoIGxSb3RhdGlvblBpdm90TSApLm11bHRpcGx5KCBsUHJlUm90YXRpb25NICkubXVsdGlwbHkoIGxSb3RhdGlvbk0gKS5tdWx0aXBseSggbFBvc3RSb3RhdGlvbk0gKS5tdWx0aXBseSggbFJvdGF0aW9uUGl2b3RNLmdldEludmVyc2UoIGxSb3RhdGlvblBpdm90TSApICkubXVsdGlwbHkoIGxTY2FsaW5nT2Zmc2V0TSApLm11bHRpcGx5KCBsU2NhbGluZ1Bpdm90TSApLm11bHRpcGx5KCBsU2NhbGluZ00gKS5tdWx0aXBseSggbFNjYWxpbmdQaXZvdE0uZ2V0SW52ZXJzZSggbFNjYWxpbmdQaXZvdE0gKSApO1xuXG5cdFx0dmFyIGxMb2NhbFRXaXRoQWxsUGl2b3RBbmRPZmZzZXRJbmZvID0gbmV3IE1hdHJpeDQoKS5jb3B5UG9zaXRpb24oIGxUcmFuc2Zvcm0gKTtcblxuXHRcdHZhciBsR2xvYmFsVHJhbnNsYXRpb24gPSBsUGFyZW50R1gubXVsdGlwbHkoIGxMb2NhbFRXaXRoQWxsUGl2b3RBbmRPZmZzZXRJbmZvICk7XG5cdFx0bEdsb2JhbFQuY29weVBvc2l0aW9uKCBsR2xvYmFsVHJhbnNsYXRpb24gKTtcblxuXHRcdGxUcmFuc2Zvcm0gPSBsR2xvYmFsVC5tdWx0aXBseSggbEdsb2JhbFJTICk7XG5cblx0XHRyZXR1cm4gbFRyYW5zZm9ybTtcblxuXHR9XG5cblx0Ly8gUmV0dXJucyB0aGUgdGhyZWUuanMgaW50cmluc2ljIEV1bGVyIG9yZGVyIGNvcnJlc3BvbmRpbmcgdG8gRkJYIGV4dHJpbnNpYyBFdWxlciBvcmRlclxuXHQvLyByZWY6IGh0dHA6Ly9oZWxwLmF1dG9kZXNrLmNvbS92aWV3L0ZCWC8yMDE3L0VOVS8/Z3VpZD1fX2NwcF9yZWZfY2xhc3NfZmJ4X2V1bGVyX2h0bWxcblx0ZnVuY3Rpb24gZ2V0RXVsZXJPcmRlciggb3JkZXIgKSB7XG5cblx0XHRvcmRlciA9IG9yZGVyIHx8IDA7XG5cblx0XHR2YXIgZW51bXMgPSBbXG5cdFx0XHQnWllYJywgLy8gLT4gWFlaIGV4dHJpbnNpY1xuXHRcdFx0J1laWCcsIC8vIC0+IFhaWSBleHRyaW5zaWNcblx0XHRcdCdYWlknLCAvLyAtPiBZWlggZXh0cmluc2ljXG5cdFx0XHQnWlhZJywgLy8gLT4gWVhaIGV4dHJpbnNpY1xuXHRcdFx0J1lYWicsIC8vIC0+IFpYWSBleHRyaW5zaWNcblx0XHRcdCdYWVonLCAvLyAtPiBaWVggZXh0cmluc2ljXG5cdFx0XHQvLydTcGhlcmljWFlaJywgLy8gbm90IHBvc3NpYmxlIHRvIHN1cHBvcnRcblx0XHRdO1xuXG5cdFx0aWYgKCBvcmRlciA9PT0gNiApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiB1bnN1cHBvcnRlZCBFdWxlciBPcmRlcjogU3BoZXJpY2FsIFhZWi4gQW5pbWF0aW9ucyBhbmQgcm90YXRpb25zIG1heSBiZSBpbmNvcnJlY3QuJyApO1xuXHRcdFx0cmV0dXJuIGVudW1zWyAwIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZW51bXNbIG9yZGVyIF07XG5cblx0fVxuXG5cdC8vIFBhcnNlcyBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBudW1iZXJzIGFuZCByZXR1cm5zIHRoZW0gYW4gYXJyYXkuXG5cdC8vIFVzZWQgaW50ZXJuYWxseSBieSB0aGUgVGV4dFBhcnNlclxuXHRmdW5jdGlvbiBwYXJzZU51bWJlckFycmF5KCB2YWx1ZSApIHtcblxuXHRcdHZhciBhcnJheSA9IHZhbHVlLnNwbGl0KCAnLCcgKS5tYXAoIGZ1bmN0aW9uICggdmFsICkge1xuXG5cdFx0XHRyZXR1cm4gcGFyc2VGbG9hdCggdmFsICk7XG5cblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbnZlcnRBcnJheUJ1ZmZlclRvU3RyaW5nKCBidWZmZXIsIGZyb20sIHRvICkge1xuXG5cdFx0aWYgKCBmcm9tID09PSB1bmRlZmluZWQgKSBmcm9tID0gMDtcblx0XHRpZiAoIHRvID09PSB1bmRlZmluZWQgKSB0byA9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xuXG5cdFx0cmV0dXJuIExvYWRlclV0aWxzLmRlY29kZVRleHQoIG5ldyBVaW50OEFycmF5KCBidWZmZXIsIGZyb20sIHRvICkgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYXBwZW5kKCBhLCBiICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gYS5sZW5ndGgsIGwgPSBiLmxlbmd0aDsgaSA8IGw7IGkgKyssIGogKysgKSB7XG5cblx0XHRcdGFbIGogXSA9IGJbIGkgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2xpY2UoIGEsIGIsIGZyb20sIHRvICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSBmcm9tLCBqID0gMDsgaSA8IHRvOyBpICsrLCBqICsrICkge1xuXG5cdFx0XHRhWyBqIF0gPSBiWyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYTtcblxuXHR9XG5cblx0Ly8gaW5qZWN0IGFycmF5IGEyIGludG8gYXJyYXkgYTEgYXQgaW5kZXhcblx0ZnVuY3Rpb24gaW5qZWN0KCBhMSwgaW5kZXgsIGEyICkge1xuXG5cdFx0cmV0dXJuIGExLnNsaWNlKCAwLCBpbmRleCApLmNvbmNhdCggYTIgKS5jb25jYXQoIGExLnNsaWNlKCBpbmRleCApICk7XG5cblx0fVxuXG5cdHJldHVybiBGQlhMb2FkZXI7XG5cbn0gKSgpO1xuZXhwb3J0IHsgRkJYTG9hZGVyIH07XG4iLCIvKipcbiAqIEBhdXRob3IgUmljaCBUaWJiZXR0IC8gaHR0cHM6Ly9naXRodWIuY29tL3JpY2h0clxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgVG9ueSBQYXJpc2kgLyBodHRwOi8vd3d3LnRvbnlwYXJpc2kuY29tL1xuICogQGF1dGhvciBUYWthaGlybyAvIGh0dHBzOi8vZ2l0aHViLmNvbS90YWthaGlyb3hcbiAqIEBhdXRob3IgRG9uIE1jQ3VyZHkgLyBodHRwczovL3d3dy5kb25tY2N1cmR5LmNvbVxuICovXG5cbmltcG9ydCB7XG5cdEFuaW1hdGlvbkNsaXAsXG5cdEJvbmUsXG5cdEJ1ZmZlckF0dHJpYnV0ZSxcblx0QnVmZmVyR2VvbWV0cnksXG5cdENsYW1wVG9FZGdlV3JhcHBpbmcsXG5cdENvbG9yLFxuXHREZWZhdWx0TG9hZGluZ01hbmFnZXIsXG5cdERpcmVjdGlvbmFsTGlnaHQsXG5cdERvdWJsZVNpZGUsXG5cdEZpbGVMb2FkZXIsXG5cdEZyb250U2lkZSxcblx0R3JvdXAsXG5cdEludGVybGVhdmVkQnVmZmVyLFxuXHRJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSxcblx0SW50ZXJwb2xhbnQsXG5cdEludGVycG9sYXRlRGlzY3JldGUsXG5cdEludGVycG9sYXRlTGluZWFyLFxuXHRMaW5lLFxuXHRMaW5lQmFzaWNNYXRlcmlhbCxcblx0TGluZUxvb3AsXG5cdExpbmVTZWdtZW50cyxcblx0TGluZWFyRmlsdGVyLFxuXHRMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdExvYWRlcixcblx0TG9hZGVyVXRpbHMsXG5cdE1hdGVyaWFsLFxuXHRNYXRoIGFzIF9NYXRoLFxuXHRNYXRyaXg0LFxuXHRNZXNoLFxuXHRNZXNoQmFzaWNNYXRlcmlhbCxcblx0TWVzaFN0YW5kYXJkTWF0ZXJpYWwsXG5cdE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsXG5cdE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG5cdE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLFxuXHROdW1iZXJLZXlmcmFtZVRyYWNrLFxuXHRPYmplY3QzRCxcblx0T3J0aG9ncmFwaGljQ2FtZXJhLFxuXHRQZXJzcGVjdGl2ZUNhbWVyYSxcblx0UG9pbnRMaWdodCxcblx0UG9pbnRzLFxuXHRQb2ludHNNYXRlcmlhbCxcblx0UHJvcGVydHlCaW5kaW5nLFxuXHRRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayxcblx0UkdCQUZvcm1hdCxcblx0UkdCRm9ybWF0LFxuXHRSZXBlYXRXcmFwcGluZyxcblx0U2NlbmUsXG5cdFNoYWRlckxpYixcblx0U2hhZGVyTWF0ZXJpYWwsXG5cdFNrZWxldG9uLFxuXHRTa2lubmVkTWVzaCxcblx0U3BvdExpZ2h0LFxuXHRUZXh0dXJlTG9hZGVyLFxuXHRUcmlhbmdsZUZhbkRyYXdNb2RlLFxuXHRUcmlhbmdsZVN0cmlwRHJhd01vZGUsXG5cdFVuaWZvcm1zVXRpbHMsXG5cdFZlY3RvcjIsXG5cdFZlY3RvcktleWZyYW1lVHJhY2ssXG5cdFZlcnRleENvbG9ycyxcblx0c1JHQkVuY29kaW5nXG59IGZyb20gXCIuL3RocmVlLm1vZHVsZS5qc1wiO1xuXG52YXIgR0xURkxvYWRlciA9ICggZnVuY3Rpb24gKCkge1xuXG5cdGZ1bmN0aW9uIEdMVEZMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0XHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblx0XHR0aGlzLmRyYWNvTG9hZGVyID0gbnVsbDtcblx0XHR0aGlzLmRkc0xvYWRlciA9IG51bGw7XG5cblx0fVxuXG5cdEdMVEZMb2FkZXIucHJvdG90eXBlID0ge1xuXG5cdFx0Y29uc3RydWN0b3I6IEdMVEZMb2FkZXIsXG5cblx0XHRjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG5cblx0XHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0XHR2YXIgcmVzb3VyY2VQYXRoO1xuXG5cdFx0XHRpZiAoIHRoaXMucmVzb3VyY2VQYXRoICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGg7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJlc291cmNlUGF0aCA9IHRoaXMucGF0aDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXNvdXJjZVBhdGggPSBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGVsbHMgdGhlIExvYWRpbmdNYW5hZ2VyIHRvIHRyYWNrIGFuIGV4dHJhIGl0ZW0sIHdoaWNoIHJlc29sdmVzIGFmdGVyXG5cdFx0XHQvLyB0aGUgbW9kZWwgaXMgZnVsbHkgbG9hZGVkLiBUaGlzIG1lYW5zIHRoZSBjb3VudCBvZiBpdGVtcyBsb2FkZWQgd2lsbFxuXHRcdFx0Ly8gYmUgaW5jb3JyZWN0LCBidXQgZW5zdXJlcyBtYW5hZ2VyLm9uTG9hZCgpIGRvZXMgbm90IGZpcmUgZWFybHkuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHZhciBfb25FcnJvciA9IGZ1bmN0aW9uICggZSApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcblxuXHRcdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXG5cdFx0XHRpZiAoIHNjb3BlLmNyb3NzT3JpZ2luID09PSAndXNlLWNyZWRlbnRpYWxzJyApIHtcblxuXHRcdFx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBkYXRhICkge1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHRzY29wZS5wYXJzZSggZGF0YSwgcmVzb3VyY2VQYXRoLCBmdW5jdGlvbiAoIGdsdGYgKSB7XG5cblx0XHRcdFx0XHRcdG9uTG9hZCggZ2x0ZiApO1xuXG5cdFx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdFx0fSwgX29uRXJyb3IgKTtcblxuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdF9vbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBfb25FcnJvciApO1xuXG5cdFx0fSxcblxuXHRcdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH0sXG5cblx0XHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHRcdHNldFJlc291cmNlUGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5yZXNvdXJjZVBhdGggPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHRcdHNldERSQUNPTG9hZGVyOiBmdW5jdGlvbiAoIGRyYWNvTG9hZGVyICkge1xuXG5cdFx0XHR0aGlzLmRyYWNvTG9hZGVyID0gZHJhY29Mb2FkZXI7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH0sXG5cblx0XHRzZXRERFNMb2FkZXI6IGZ1bmN0aW9uICggZGRzTG9hZGVyICkge1xuXG5cdFx0XHR0aGlzLmRkc0xvYWRlciA9IGRkc0xvYWRlcjtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHRcdHBhcnNlOiBmdW5jdGlvbiAoIGRhdGEsIHBhdGgsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRcdFx0dmFyIGNvbnRlbnQ7XG5cdFx0XHR2YXIgZXh0ZW5zaW9ucyA9IHt9O1xuXG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb250ZW50ID0gZGF0YTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgbWFnaWMgPSBMb2FkZXJVdGlscy5kZWNvZGVUZXh0KCBuZXcgVWludDhBcnJheSggZGF0YSwgMCwgNCApICk7XG5cblx0XHRcdFx0aWYgKCBtYWdpYyA9PT0gQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTUFHSUMgKSB7XG5cblx0XHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0XHRleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9CSU5BUllfR0xURiBdID0gbmV3IEdMVEZCaW5hcnlFeHRlbnNpb24oIGRhdGEgKTtcblxuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZXJyb3IgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnRlbnQgPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9CSU5BUllfR0xURiBdLmNvbnRlbnQ7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnRlbnQgPSBMb2FkZXJVdGlscy5kZWNvZGVUZXh0KCBuZXcgVWludDhBcnJheSggZGF0YSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBqc29uID0gSlNPTi5wYXJzZSggY29udGVudCApO1xuXG5cdFx0XHRpZiAoIGpzb24uYXNzZXQgPT09IHVuZGVmaW5lZCB8fCBqc29uLmFzc2V0LnZlcnNpb25bIDAgXSA8IDIgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogVW5zdXBwb3J0ZWQgYXNzZXQuIGdsVEYgdmVyc2lvbnMgPj0yLjAgYXJlIHN1cHBvcnRlZC4gVXNlIExlZ2FjeUdMVEZMb2FkZXIgaW5zdGVhZC4nICkgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICgganNvbi5leHRlbnNpb25zVXNlZCApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBqc29uLmV4dGVuc2lvbnNVc2VkLmxlbmd0aDsgKysgaSApIHtcblxuXHRcdFx0XHRcdHZhciBleHRlbnNpb25OYW1lID0ganNvbi5leHRlbnNpb25zVXNlZFsgaSBdO1xuXHRcdFx0XHRcdHZhciBleHRlbnNpb25zUmVxdWlyZWQgPSBqc29uLmV4dGVuc2lvbnNSZXF1aXJlZCB8fCBbXTtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIGV4dGVuc2lvbk5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMOlxuXHRcdFx0XHRcdFx0XHRleHRlbnNpb25zWyBleHRlbnNpb25OYW1lIF0gPSBuZXcgR0xURkxpZ2h0c0V4dGVuc2lvbigganNvbiApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfVU5MSVQ6XG5cdFx0XHRcdFx0XHRcdGV4dGVuc2lvbnNbIGV4dGVuc2lvbk5hbWUgXSA9IG5ldyBHTFRGTWF0ZXJpYWxzVW5saXRFeHRlbnNpb24oKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTOlxuXHRcdFx0XHRcdFx0XHRleHRlbnNpb25zWyBleHRlbnNpb25OYW1lIF0gPSBuZXcgR0xURk1hdGVyaWFsc1BiclNwZWN1bGFyR2xvc3NpbmVzc0V4dGVuc2lvbigpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBFWFRFTlNJT05TLktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OOlxuXHRcdFx0XHRcdFx0XHRleHRlbnNpb25zWyBleHRlbnNpb25OYW1lIF0gPSBuZXcgR0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uKCBqc29uLCB0aGlzLmRyYWNvTG9hZGVyICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUzpcblx0XHRcdFx0XHRcdFx0ZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5NU0ZUX1RFWFRVUkVfRERTIF0gPSBuZXcgR0xURlRleHR1cmVERFNFeHRlbnNpb24oIHRoaXMuZGRzTG9hZGVyICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEVYVEVOU0lPTlMuS0hSX1RFWFRVUkVfVFJBTlNGT1JNOlxuXHRcdFx0XHRcdFx0XHRleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STSBdID0gbmV3IEdMVEZUZXh0dXJlVHJhbnNmb3JtRXh0ZW5zaW9uKCk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRcdGlmICggZXh0ZW5zaW9uc1JlcXVpcmVkLmluZGV4T2YoIGV4dGVuc2lvbk5hbWUgKSA+PSAwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogVW5rbm93biBleHRlbnNpb24gXCInICsgZXh0ZW5zaW9uTmFtZSArICdcIi4nICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcGFyc2VyID0gbmV3IEdMVEZQYXJzZXIoIGpzb24sIGV4dGVuc2lvbnMsIHtcblxuXHRcdFx0XHRwYXRoOiBwYXRoIHx8IHRoaXMucmVzb3VyY2VQYXRoIHx8ICcnLFxuXHRcdFx0XHRjcm9zc09yaWdpbjogdGhpcy5jcm9zc09yaWdpbixcblx0XHRcdFx0bWFuYWdlcjogdGhpcy5tYW5hZ2VyXG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cGFyc2VyLnBhcnNlKCBvbkxvYWQsIG9uRXJyb3IgKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdC8qIEdMVEZSRUdJU1RSWSAqL1xuXG5cdGZ1bmN0aW9uIEdMVEZSZWdpc3RyeSgpIHtcblxuXHRcdHZhciBvYmplY3RzID0ge307XG5cblx0XHRyZXR1cm5cdHtcblxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoIGtleSApIHtcblxuXHRcdFx0XHRyZXR1cm4gb2JqZWN0c1sga2V5IF07XG5cblx0XHRcdH0sXG5cblx0XHRcdGFkZDogZnVuY3Rpb24gKCBrZXksIG9iamVjdCApIHtcblxuXHRcdFx0XHRvYmplY3RzWyBrZXkgXSA9IG9iamVjdDtcblxuXHRcdFx0fSxcblxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbiAoIGtleSApIHtcblxuXHRcdFx0XHRkZWxldGUgb2JqZWN0c1sga2V5IF07XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlbW92ZUFsbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdG9iamVjdHMgPSB7fTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblx0LyoqKioqKioqKiogRVhURU5TSU9OUyAqKioqKioqKioqKi9cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHR2YXIgRVhURU5TSU9OUyA9IHtcblx0XHRLSFJfQklOQVJZX0dMVEY6ICdLSFJfYmluYXJ5X2dsVEYnLFxuXHRcdEtIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OOiAnS0hSX2RyYWNvX21lc2hfY29tcHJlc3Npb24nLFxuXHRcdEtIUl9MSUdIVFNfUFVOQ1RVQUw6ICdLSFJfbGlnaHRzX3B1bmN0dWFsJyxcblx0XHRLSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTOiAnS0hSX21hdGVyaWFsc19wYnJTcGVjdWxhckdsb3NzaW5lc3MnLFxuXHRcdEtIUl9NQVRFUklBTFNfVU5MSVQ6ICdLSFJfbWF0ZXJpYWxzX3VubGl0Jyxcblx0XHRLSFJfVEVYVFVSRV9UUkFOU0ZPUk06ICdLSFJfdGV4dHVyZV90cmFuc2Zvcm0nLFxuXHRcdE1TRlRfVEVYVFVSRV9ERFM6ICdNU0ZUX3RleHR1cmVfZGRzJ1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBERFMgVGV4dHVyZSBFeHRlbnNpb25cblx0ICpcblx0ICogU3BlY2lmaWNhdGlvbjpcblx0ICogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL1ZlbmRvci9NU0ZUX3RleHR1cmVfZGRzXG5cdCAqXG5cdCAqL1xuXHRmdW5jdGlvbiBHTFRGVGV4dHVyZUREU0V4dGVuc2lvbiggZGRzTG9hZGVyICkge1xuXG5cdFx0aWYgKCAhIGRkc0xvYWRlciApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogQXR0ZW1wdGluZyB0byBsb2FkIC5kZHMgdGV4dHVyZSB3aXRob3V0IGltcG9ydGluZyBERFNMb2FkZXInICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm5hbWUgPSBFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFM7XG5cdFx0dGhpcy5kZHNMb2FkZXIgPSBkZHNMb2FkZXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBMaWdodHMgRXh0ZW5zaW9uXG5cdCAqXG5cdCAqIFNwZWNpZmljYXRpb246IFBFTkRJTkdcblx0ICovXG5cdGZ1bmN0aW9uIEdMVEZMaWdodHNFeHRlbnNpb24oIGpzb24gKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUw7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gKCBqc29uLmV4dGVuc2lvbnMgJiYganNvbi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUwgXSApIHx8IHt9O1xuXHRcdHRoaXMubGlnaHREZWZzID0gZXh0ZW5zaW9uLmxpZ2h0cyB8fCBbXTtcblxuXHR9XG5cblx0R0xURkxpZ2h0c0V4dGVuc2lvbi5wcm90b3R5cGUubG9hZExpZ2h0ID0gZnVuY3Rpb24gKCBsaWdodEluZGV4ICkge1xuXG5cdFx0dmFyIGxpZ2h0RGVmID0gdGhpcy5saWdodERlZnNbIGxpZ2h0SW5kZXggXTtcblx0XHR2YXIgbGlnaHROb2RlO1xuXG5cdFx0dmFyIGNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXHRcdGlmICggbGlnaHREZWYuY29sb3IgIT09IHVuZGVmaW5lZCApIGNvbG9yLmZyb21BcnJheSggbGlnaHREZWYuY29sb3IgKTtcblxuXHRcdHZhciByYW5nZSA9IGxpZ2h0RGVmLnJhbmdlICE9PSB1bmRlZmluZWQgPyBsaWdodERlZi5yYW5nZSA6IDA7XG5cblx0XHRzd2l0Y2ggKCBsaWdodERlZi50eXBlICkge1xuXG5cdFx0XHRjYXNlICdkaXJlY3Rpb25hbCc6XG5cdFx0XHRcdGxpZ2h0Tm9kZSA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KCBjb2xvciApO1xuXHRcdFx0XHRsaWdodE5vZGUudGFyZ2V0LnBvc2l0aW9uLnNldCggMCwgMCwgLSAxICk7XG5cdFx0XHRcdGxpZ2h0Tm9kZS5hZGQoIGxpZ2h0Tm9kZS50YXJnZXQgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ3BvaW50Jzpcblx0XHRcdFx0bGlnaHROb2RlID0gbmV3IFBvaW50TGlnaHQoIGNvbG9yICk7XG5cdFx0XHRcdGxpZ2h0Tm9kZS5kaXN0YW5jZSA9IHJhbmdlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnc3BvdCc6XG5cdFx0XHRcdGxpZ2h0Tm9kZSA9IG5ldyBTcG90TGlnaHQoIGNvbG9yICk7XG5cdFx0XHRcdGxpZ2h0Tm9kZS5kaXN0YW5jZSA9IHJhbmdlO1xuXHRcdFx0XHQvLyBIYW5kbGUgc3BvdGxpZ2h0IHByb3BlcnRpZXMuXG5cdFx0XHRcdGxpZ2h0RGVmLnNwb3QgPSBsaWdodERlZi5zcG90IHx8IHt9O1xuXHRcdFx0XHRsaWdodERlZi5zcG90LmlubmVyQ29uZUFuZ2xlID0gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSAhPT0gdW5kZWZpbmVkID8gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSA6IDA7XG5cdFx0XHRcdGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGUgPSBsaWdodERlZi5zcG90Lm91dGVyQ29uZUFuZ2xlICE9PSB1bmRlZmluZWQgPyBsaWdodERlZi5zcG90Lm91dGVyQ29uZUFuZ2xlIDogTWF0aC5QSSAvIDQuMDtcblx0XHRcdFx0bGlnaHROb2RlLmFuZ2xlID0gbGlnaHREZWYuc3BvdC5vdXRlckNvbmVBbmdsZTtcblx0XHRcdFx0bGlnaHROb2RlLnBlbnVtYnJhID0gMS4wIC0gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSAvIGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGU7XG5cdFx0XHRcdGxpZ2h0Tm9kZS50YXJnZXQucG9zaXRpb24uc2V0KCAwLCAwLCAtIDEgKTtcblx0XHRcdFx0bGlnaHROb2RlLmFkZCggbGlnaHROb2RlLnRhcmdldCApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogVW5leHBlY3RlZCBsaWdodCB0eXBlLCBcIicgKyBsaWdodERlZi50eXBlICsgJ1wiLicgKTtcblxuXHRcdH1cblxuXHRcdC8vIFNvbWUgbGlnaHRzIChlLmcuIHNwb3QpIGRlZmF1bHQgdG8gYSBwb3NpdGlvbiBvdGhlciB0aGFuIHRoZSBvcmlnaW4uIFJlc2V0IHRoZSBwb3NpdGlvblxuXHRcdC8vIGhlcmUsIGJlY2F1c2Ugbm9kZS1sZXZlbCBwYXJzaW5nIHdpbGwgb25seSBvdmVycmlkZSBwb3NpdGlvbiBpZiBleHBsaWNpdGx5IHNwZWNpZmllZC5cblx0XHRsaWdodE5vZGUucG9zaXRpb24uc2V0KCAwLCAwLCAwICk7XG5cblx0XHRsaWdodE5vZGUuZGVjYXkgPSAyO1xuXG5cdFx0aWYgKCBsaWdodERlZi5pbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIGxpZ2h0Tm9kZS5pbnRlbnNpdHkgPSBsaWdodERlZi5pbnRlbnNpdHk7XG5cblx0XHRsaWdodE5vZGUubmFtZSA9IGxpZ2h0RGVmLm5hbWUgfHwgKCAnbGlnaHRfJyArIGxpZ2h0SW5kZXggKTtcblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoIGxpZ2h0Tm9kZSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFVubGl0IE1hdGVyaWFscyBFeHRlbnNpb24gKHBlbmRpbmcpXG5cdCAqXG5cdCAqIFBSOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvcHVsbC8xMTYzXG5cdCAqL1xuXHRmdW5jdGlvbiBHTFRGTWF0ZXJpYWxzVW5saXRFeHRlbnNpb24oKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfVU5MSVQ7XG5cblx0fVxuXG5cdEdMVEZNYXRlcmlhbHNVbmxpdEV4dGVuc2lvbi5wcm90b3R5cGUuZ2V0TWF0ZXJpYWxUeXBlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1lc2hCYXNpY01hdGVyaWFsO1xuXG5cdH07XG5cblx0R0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uLnByb3RvdHlwZS5leHRlbmRQYXJhbXMgPSBmdW5jdGlvbiAoIG1hdGVyaWFsUGFyYW1zLCBtYXRlcmlhbERlZiwgcGFyc2VyICkge1xuXG5cdFx0dmFyIHBlbmRpbmcgPSBbXTtcblxuXHRcdG1hdGVyaWFsUGFyYW1zLmNvbG9yID0gbmV3IENvbG9yKCAxLjAsIDEuMCwgMS4wICk7XG5cdFx0bWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IDEuMDtcblxuXHRcdHZhciBtZXRhbGxpY1JvdWdobmVzcyA9IG1hdGVyaWFsRGVmLnBick1ldGFsbGljUm91Z2huZXNzO1xuXG5cdFx0aWYgKCBtZXRhbGxpY1JvdWdobmVzcyApIHtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3IgKSApIHtcblxuXHRcdFx0XHR2YXIgYXJyYXkgPSBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3I7XG5cblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMuY29sb3IuZnJvbUFycmF5KCBhcnJheSApO1xuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gYXJyYXlbIDMgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ21hcCcsIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUgKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKTtcblxuXHR9O1xuXG5cdC8qIEJJTkFSWSBFWFRFTlNJT04gKi9cblx0dmFyIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX01BR0lDID0gJ2dsVEYnO1xuXHR2YXIgQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIID0gMTI7XG5cdHZhciBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTID0geyBKU09OOiAweDRFNEY1MzRBLCBCSU46IDB4MDA0RTQ5NDIgfTtcblxuXHRmdW5jdGlvbiBHTFRGQmluYXJ5RXh0ZW5zaW9uKCBkYXRhICkge1xuXG5cdFx0dGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEY7XG5cdFx0dGhpcy5jb250ZW50ID0gbnVsbDtcblx0XHR0aGlzLmJvZHkgPSBudWxsO1xuXG5cdFx0dmFyIGhlYWRlclZpZXcgPSBuZXcgRGF0YVZpZXcoIGRhdGEsIDAsIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCApO1xuXG5cdFx0dGhpcy5oZWFkZXIgPSB7XG5cdFx0XHRtYWdpYzogTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggbmV3IFVpbnQ4QXJyYXkoIGRhdGEuc2xpY2UoIDAsIDQgKSApICksXG5cdFx0XHR2ZXJzaW9uOiBoZWFkZXJWaWV3LmdldFVpbnQzMiggNCwgdHJ1ZSApLFxuXHRcdFx0bGVuZ3RoOiBoZWFkZXJWaWV3LmdldFVpbnQzMiggOCwgdHJ1ZSApXG5cdFx0fTtcblxuXHRcdGlmICggdGhpcy5oZWFkZXIubWFnaWMgIT09IEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX01BR0lDICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBnbFRGLUJpbmFyeSBoZWFkZXIuJyApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5oZWFkZXIudmVyc2lvbiA8IDIuMCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogTGVnYWN5IGJpbmFyeSBmaWxlIGRldGVjdGVkLiBVc2UgTGVnYWN5R0xURkxvYWRlciBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblxuXHRcdHZhciBjaHVua1ZpZXcgPSBuZXcgRGF0YVZpZXcoIGRhdGEsIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCApO1xuXHRcdHZhciBjaHVua0luZGV4ID0gMDtcblxuXHRcdHdoaWxlICggY2h1bmtJbmRleCA8IGNodW5rVmlldy5ieXRlTGVuZ3RoICkge1xuXG5cdFx0XHR2YXIgY2h1bmtMZW5ndGggPSBjaHVua1ZpZXcuZ2V0VWludDMyKCBjaHVua0luZGV4LCB0cnVlICk7XG5cdFx0XHRjaHVua0luZGV4ICs9IDQ7XG5cblx0XHRcdHZhciBjaHVua1R5cGUgPSBjaHVua1ZpZXcuZ2V0VWludDMyKCBjaHVua0luZGV4LCB0cnVlICk7XG5cdFx0XHRjaHVua0luZGV4ICs9IDQ7XG5cblx0XHRcdGlmICggY2h1bmtUeXBlID09PSBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTLkpTT04gKSB7XG5cblx0XHRcdFx0dmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KCBkYXRhLCBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKyBjaHVua0luZGV4LCBjaHVua0xlbmd0aCApO1xuXHRcdFx0XHR0aGlzLmNvbnRlbnQgPSBMb2FkZXJVdGlscy5kZWNvZGVUZXh0KCBjb250ZW50QXJyYXkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggY2h1bmtUeXBlID09PSBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTLkJJTiApIHtcblxuXHRcdFx0XHR2YXIgYnl0ZU9mZnNldCA9IEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCArIGNodW5rSW5kZXg7XG5cdFx0XHRcdHRoaXMuYm9keSA9IGRhdGEuc2xpY2UoIGJ5dGVPZmZzZXQsIGJ5dGVPZmZzZXQgKyBjaHVua0xlbmd0aCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENsaWVudHMgbXVzdCBpZ25vcmUgY2h1bmtzIHdpdGggdW5rbm93biB0eXBlcy5cblxuXHRcdFx0Y2h1bmtJbmRleCArPSBjaHVua0xlbmd0aDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jb250ZW50ID09PSBudWxsICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBKU09OIGNvbnRlbnQgbm90IGZvdW5kLicgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIERSQUNPIE1lc2ggQ29tcHJlc3Npb24gRXh0ZW5zaW9uXG5cdCAqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9wdWxsLzg3NFxuXHQgKi9cblx0ZnVuY3Rpb24gR0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uKCBqc29uLCBkcmFjb0xvYWRlciApIHtcblxuXHRcdGlmICggISBkcmFjb0xvYWRlciApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogTm8gRFJBQ09Mb2FkZXIgaW5zdGFuY2UgcHJvdmlkZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTjtcblx0XHR0aGlzLmpzb24gPSBqc29uO1xuXHRcdHRoaXMuZHJhY29Mb2FkZXIgPSBkcmFjb0xvYWRlcjtcblxuXHR9XG5cblx0R0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uLnByb3RvdHlwZS5kZWNvZGVQcmltaXRpdmUgPSBmdW5jdGlvbiAoIHByaW1pdGl2ZSwgcGFyc2VyICkge1xuXG5cdFx0dmFyIGpzb24gPSB0aGlzLmpzb247XG5cdFx0dmFyIGRyYWNvTG9hZGVyID0gdGhpcy5kcmFjb0xvYWRlcjtcblx0XHR2YXIgYnVmZmVyVmlld0luZGV4ID0gcHJpbWl0aXZlLmV4dGVuc2lvbnNbIHRoaXMubmFtZSBdLmJ1ZmZlclZpZXc7XG5cdFx0dmFyIGdsdGZBdHRyaWJ1dGVNYXAgPSBwcmltaXRpdmUuZXh0ZW5zaW9uc1sgdGhpcy5uYW1lIF0uYXR0cmlidXRlcztcblx0XHR2YXIgdGhyZWVBdHRyaWJ1dGVNYXAgPSB7fTtcblx0XHR2YXIgYXR0cmlidXRlTm9ybWFsaXplZE1hcCA9IHt9O1xuXHRcdHZhciBhdHRyaWJ1dGVUeXBlTWFwID0ge307XG5cblx0XHRmb3IgKCB2YXIgYXR0cmlidXRlTmFtZSBpbiBnbHRmQXR0cmlidXRlTWFwICkge1xuXG5cdFx0XHR2YXIgdGhyZWVBdHRyaWJ1dGVOYW1lID0gQVRUUklCVVRFU1sgYXR0cmlidXRlTmFtZSBdIHx8IGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0dGhyZWVBdHRyaWJ1dGVNYXBbIHRocmVlQXR0cmlidXRlTmFtZSBdID0gZ2x0ZkF0dHJpYnV0ZU1hcFsgYXR0cmlidXRlTmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggYXR0cmlidXRlTmFtZSBpbiBwcmltaXRpdmUuYXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIHRocmVlQXR0cmlidXRlTmFtZSA9IEFUVFJJQlVURVNbIGF0dHJpYnV0ZU5hbWUgXSB8fCBhdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggZ2x0ZkF0dHJpYnV0ZU1hcFsgYXR0cmlidXRlTmFtZSBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIGFjY2Vzc29yRGVmID0ganNvbi5hY2Nlc3NvcnNbIHByaW1pdGl2ZS5hdHRyaWJ1dGVzWyBhdHRyaWJ1dGVOYW1lIF0gXTtcblx0XHRcdFx0dmFyIGNvbXBvbmVudFR5cGUgPSBXRUJHTF9DT01QT05FTlRfVFlQRVNbIGFjY2Vzc29yRGVmLmNvbXBvbmVudFR5cGUgXTtcblxuXHRcdFx0XHRhdHRyaWJ1dGVUeXBlTWFwWyB0aHJlZUF0dHJpYnV0ZU5hbWUgXSA9IGNvbXBvbmVudFR5cGU7XG5cdFx0XHRcdGF0dHJpYnV0ZU5vcm1hbGl6ZWRNYXBbIHRocmVlQXR0cmlidXRlTmFtZSBdID0gYWNjZXNzb3JEZWYubm9ybWFsaXplZCA9PT0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYnVmZmVyVmlldycsIGJ1ZmZlclZpZXdJbmRleCApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyVmlldyApIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUgKSB7XG5cblx0XHRcdFx0ZHJhY29Mb2FkZXIuZGVjb2RlRHJhY29GaWxlKCBidWZmZXJWaWV3LCBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGF0dHJpYnV0ZU5hbWUgaW4gZ2VvbWV0cnkuYXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbIGF0dHJpYnV0ZU5hbWUgXTtcblx0XHRcdFx0XHRcdHZhciBub3JtYWxpemVkID0gYXR0cmlidXRlTm9ybWFsaXplZE1hcFsgYXR0cmlidXRlTmFtZSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vcm1hbGl6ZWQgIT09IHVuZGVmaW5lZCApIGF0dHJpYnV0ZS5ub3JtYWxpemVkID0gbm9ybWFsaXplZDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlc29sdmUoIGdlb21ldHJ5ICk7XG5cblx0XHRcdFx0fSwgdGhyZWVBdHRyaWJ1dGVNYXAsIGF0dHJpYnV0ZVR5cGVNYXAgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFRleHR1cmUgVHJhbnNmb3JtIEV4dGVuc2lvblxuXHQgKlxuXHQgKiBTcGVjaWZpY2F0aW9uOlxuXHQgKi9cblx0ZnVuY3Rpb24gR0xURlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24oKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STTtcblxuXHR9XG5cblx0R0xURlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24ucHJvdG90eXBlLmV4dGVuZFRleHR1cmUgPSBmdW5jdGlvbiAoIHRleHR1cmUsIHRyYW5zZm9ybSApIHtcblxuXHRcdHRleHR1cmUgPSB0ZXh0dXJlLmNsb25lKCk7XG5cblx0XHRpZiAoIHRyYW5zZm9ybS5vZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZS5vZmZzZXQuZnJvbUFycmF5KCB0cmFuc2Zvcm0ub2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRyYW5zZm9ybS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0ZXh0dXJlLnJvdGF0aW9uID0gdHJhbnNmb3JtLnJvdGF0aW9uO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0cmFuc2Zvcm0uc2NhbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KCB0cmFuc2Zvcm0uc2NhbGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHJhbnNmb3JtLnRleENvb3JkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6IEN1c3RvbSBVViBzZXRzIGluIFwiJyArIHRoaXMubmFtZSArICdcIiBleHRlbnNpb24gbm90IHlldCBzdXBwb3J0ZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGVjdWxhci1HbG9zc2luZXNzIEV4dGVuc2lvblxuXHQgKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfbWF0ZXJpYWxzX3BiclNwZWN1bGFyR2xvc3NpbmVzc1xuXHQgKi9cblx0ZnVuY3Rpb24gR0xURk1hdGVyaWFsc1BiclNwZWN1bGFyR2xvc3NpbmVzc0V4dGVuc2lvbigpIHtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdG5hbWU6IEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyxcblxuXHRcdFx0c3BlY3VsYXJHbG9zc2luZXNzUGFyYW1zOiBbXG5cdFx0XHRcdCdjb2xvcicsXG5cdFx0XHRcdCdtYXAnLFxuXHRcdFx0XHQnbGlnaHRNYXAnLFxuXHRcdFx0XHQnbGlnaHRNYXBJbnRlbnNpdHknLFxuXHRcdFx0XHQnYW9NYXAnLFxuXHRcdFx0XHQnYW9NYXBJbnRlbnNpdHknLFxuXHRcdFx0XHQnZW1pc3NpdmUnLFxuXHRcdFx0XHQnZW1pc3NpdmVJbnRlbnNpdHknLFxuXHRcdFx0XHQnZW1pc3NpdmVNYXAnLFxuXHRcdFx0XHQnYnVtcE1hcCcsXG5cdFx0XHRcdCdidW1wU2NhbGUnLFxuXHRcdFx0XHQnbm9ybWFsTWFwJyxcblx0XHRcdFx0J2Rpc3BsYWNlbWVudE1hcCcsXG5cdFx0XHRcdCdkaXNwbGFjZW1lbnRTY2FsZScsXG5cdFx0XHRcdCdkaXNwbGFjZW1lbnRCaWFzJyxcblx0XHRcdFx0J3NwZWN1bGFyTWFwJyxcblx0XHRcdFx0J3NwZWN1bGFyJyxcblx0XHRcdFx0J2dsb3NzaW5lc3NNYXAnLFxuXHRcdFx0XHQnZ2xvc3NpbmVzcycsXG5cdFx0XHRcdCdhbHBoYU1hcCcsXG5cdFx0XHRcdCdlbnZNYXAnLFxuXHRcdFx0XHQnZW52TWFwSW50ZW5zaXR5Jyxcblx0XHRcdFx0J3JlZnJhY3Rpb25SYXRpbycsXG5cdFx0XHRdLFxuXG5cdFx0XHRnZXRNYXRlcmlhbFR5cGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRyZXR1cm4gU2hhZGVyTWF0ZXJpYWw7XG5cblx0XHRcdH0sXG5cblx0XHRcdGV4dGVuZFBhcmFtczogZnVuY3Rpb24gKCBtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlciApIHtcblxuXHRcdFx0XHR2YXIgcGJyU3BlY3VsYXJHbG9zc2luZXNzID0gbWF0ZXJpYWxEZWYuZXh0ZW5zaW9uc1sgdGhpcy5uYW1lIF07XG5cblx0XHRcdFx0dmFyIHNoYWRlciA9IFNoYWRlckxpYlsgJ3N0YW5kYXJkJyBdO1xuXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMuY2xvbmUoIHNoYWRlci51bmlmb3JtcyApO1xuXG5cdFx0XHRcdHZhciBzcGVjdWxhck1hcFBhcnNGcmFnbWVudENodW5rID0gW1xuXHRcdFx0XHRcdCcjaWZkZWYgVVNFX1NQRUNVTEFSTUFQJyxcblx0XHRcdFx0XHQnXHR1bmlmb3JtIHNhbXBsZXIyRCBzcGVjdWxhck1hcDsnLFxuXHRcdFx0XHRcdCcjZW5kaWYnXG5cdFx0XHRcdF0uam9pbiggJ1xcbicgKTtcblxuXHRcdFx0XHR2YXIgZ2xvc3NpbmVzc01hcFBhcnNGcmFnbWVudENodW5rID0gW1xuXHRcdFx0XHRcdCcjaWZkZWYgVVNFX0dMT1NTSU5FU1NNQVAnLFxuXHRcdFx0XHRcdCdcdHVuaWZvcm0gc2FtcGxlcjJEIGdsb3NzaW5lc3NNYXA7Jyxcblx0XHRcdFx0XHQnI2VuZGlmJ1xuXHRcdFx0XHRdLmpvaW4oICdcXG4nICk7XG5cblx0XHRcdFx0dmFyIHNwZWN1bGFyTWFwRnJhZ21lbnRDaHVuayA9IFtcblx0XHRcdFx0XHQndmVjMyBzcGVjdWxhckZhY3RvciA9IHNwZWN1bGFyOycsXG5cdFx0XHRcdFx0JyNpZmRlZiBVU0VfU1BFQ1VMQVJNQVAnLFxuXHRcdFx0XHRcdCdcdHZlYzQgdGV4ZWxTcGVjdWxhciA9IHRleHR1cmUyRCggc3BlY3VsYXJNYXAsIHZVdiApOycsXG5cdFx0XHRcdFx0J1x0dGV4ZWxTcGVjdWxhciA9IHNSR0JUb0xpbmVhciggdGV4ZWxTcGVjdWxhciApOycsXG5cdFx0XHRcdFx0J1x0Ly8gcmVhZHMgY2hhbm5lbCBSR0IsIGNvbXBhdGlibGUgd2l0aCBhIGdsVEYgU3BlY3VsYXItR2xvc3NpbmVzcyAoUkdCQSkgdGV4dHVyZScsXG5cdFx0XHRcdFx0J1x0c3BlY3VsYXJGYWN0b3IgKj0gdGV4ZWxTcGVjdWxhci5yZ2I7Jyxcblx0XHRcdFx0XHQnI2VuZGlmJ1xuXHRcdFx0XHRdLmpvaW4oICdcXG4nICk7XG5cblx0XHRcdFx0dmFyIGdsb3NzaW5lc3NNYXBGcmFnbWVudENodW5rID0gW1xuXHRcdFx0XHRcdCdmbG9hdCBnbG9zc2luZXNzRmFjdG9yID0gZ2xvc3NpbmVzczsnLFxuXHRcdFx0XHRcdCcjaWZkZWYgVVNFX0dMT1NTSU5FU1NNQVAnLFxuXHRcdFx0XHRcdCdcdHZlYzQgdGV4ZWxHbG9zc2luZXNzID0gdGV4dHVyZTJEKCBnbG9zc2luZXNzTWFwLCB2VXYgKTsnLFxuXHRcdFx0XHRcdCdcdC8vIHJlYWRzIGNoYW5uZWwgQSwgY29tcGF0aWJsZSB3aXRoIGEgZ2xURiBTcGVjdWxhci1HbG9zc2luZXNzIChSR0JBKSB0ZXh0dXJlJyxcblx0XHRcdFx0XHQnXHRnbG9zc2luZXNzRmFjdG9yICo9IHRleGVsR2xvc3NpbmVzcy5hOycsXG5cdFx0XHRcdFx0JyNlbmRpZidcblx0XHRcdFx0XS5qb2luKCAnXFxuJyApO1xuXG5cdFx0XHRcdHZhciBsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayA9IFtcblx0XHRcdFx0XHQnUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDsnLFxuXHRcdFx0XHRcdCdtYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiOycsXG5cdFx0XHRcdFx0J21hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzID0gY2xhbXAoIDEuMCAtIGdsb3NzaW5lc3NGYWN0b3IsIDAuMDQsIDEuMCApOycsXG5cdFx0XHRcdFx0J21hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhckZhY3Rvci5yZ2I7Jyxcblx0XHRcdFx0XS5qb2luKCAnXFxuJyApO1xuXG5cdFx0XHRcdHZhciBmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlclxuXHRcdFx0XHRcdC5yZXBsYWNlKCAndW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7JywgJ3VuaWZvcm0gdmVjMyBzcGVjdWxhcjsnIClcblx0XHRcdFx0XHQucmVwbGFjZSggJ3VuaWZvcm0gZmxvYXQgbWV0YWxuZXNzOycsICd1bmlmb3JtIGZsb2F0IGdsb3NzaW5lc3M7JyApXG5cdFx0XHRcdFx0LnJlcGxhY2UoICcjaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+Jywgc3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVuayApXG5cdFx0XHRcdFx0LnJlcGxhY2UoICcjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ+JywgZ2xvc3NpbmVzc01hcFBhcnNGcmFnbWVudENodW5rIClcblx0XHRcdFx0XHQucmVwbGFjZSggJyNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfZnJhZ21lbnQ+Jywgc3BlY3VsYXJNYXBGcmFnbWVudENodW5rIClcblx0XHRcdFx0XHQucmVwbGFjZSggJyNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfZnJhZ21lbnQ+JywgZ2xvc3NpbmVzc01hcEZyYWdtZW50Q2h1bmsgKVxuXHRcdFx0XHRcdC5yZXBsYWNlKCAnI2luY2x1ZGUgPGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudD4nLCBsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayApO1xuXG5cdFx0XHRcdGRlbGV0ZSB1bmlmb3Jtcy5yb3VnaG5lc3M7XG5cdFx0XHRcdGRlbGV0ZSB1bmlmb3Jtcy5tZXRhbG5lc3M7XG5cdFx0XHRcdGRlbGV0ZSB1bmlmb3Jtcy5yb3VnaG5lc3NNYXA7XG5cdFx0XHRcdGRlbGV0ZSB1bmlmb3Jtcy5tZXRhbG5lc3NNYXA7XG5cblx0XHRcdFx0dW5pZm9ybXMuc3BlY3VsYXIgPSB7IHZhbHVlOiBuZXcgQ29sb3IoKS5zZXRIZXgoIDB4MTExMTExICkgfTtcblx0XHRcdFx0dW5pZm9ybXMuZ2xvc3NpbmVzcyA9IHsgdmFsdWU6IDAuNSB9O1xuXHRcdFx0XHR1bmlmb3Jtcy5zcGVjdWxhck1hcCA9IHsgdmFsdWU6IG51bGwgfTtcblx0XHRcdFx0dW5pZm9ybXMuZ2xvc3NpbmVzc01hcCA9IHsgdmFsdWU6IG51bGwgfTtcblxuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy52ZXJ0ZXhTaGFkZXIgPSBzaGFkZXIudmVydGV4U2hhZGVyO1xuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5mcmFnbWVudFNoYWRlciA9IGZyYWdtZW50U2hhZGVyO1xuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy51bmlmb3JtcyA9IHVuaWZvcm1zO1xuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuXG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLmNvbG9yID0gbmV3IENvbG9yKCAxLjAsIDEuMCwgMS4wICk7XG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSAxLjA7XG5cblx0XHRcdFx0dmFyIHBlbmRpbmcgPSBbXTtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlRmFjdG9yICkgKSB7XG5cblx0XHRcdFx0XHR2YXIgYXJyYXkgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvcjtcblxuXHRcdFx0XHRcdG1hdGVyaWFsUGFyYW1zLmNvbG9yLmZyb21BcnJheSggYXJyYXkgKTtcblx0XHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gYXJyYXlbIDMgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZVRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnbWFwJywgcGJyU3BlY3VsYXJHbG9zc2luZXNzLmRpZmZ1c2VUZXh0dXJlICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDAuMCwgMC4wLCAwLjAgKTtcblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMuZ2xvc3NpbmVzcyA9IHBiclNwZWN1bGFyR2xvc3NpbmVzcy5nbG9zc2luZXNzRmFjdG9yICE9PSB1bmRlZmluZWQgPyBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZ2xvc3NpbmVzc0ZhY3RvciA6IDEuMDtcblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMuc3BlY3VsYXIgPSBuZXcgQ29sb3IoIDEuMCwgMS4wLCAxLjAgKTtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckZhY3RvciApICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMuc3BlY3VsYXIuZnJvbUFycmF5KCBwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJGYWN0b3IgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dmFyIHNwZWNHbG9zc01hcERlZiA9IHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckdsb3NzaW5lc3NUZXh0dXJlO1xuXHRcdFx0XHRcdHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnZ2xvc3NpbmVzc01hcCcsIHNwZWNHbG9zc01hcERlZiApICk7XG5cdFx0XHRcdFx0cGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdzcGVjdWxhck1hcCcsIHNwZWNHbG9zc01hcERlZiApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRjcmVhdGVNYXRlcmlhbDogZnVuY3Rpb24gKCBwYXJhbXMgKSB7XG5cblx0XHRcdFx0Ly8gc2V0dXAgbWF0ZXJpYWwgcHJvcGVydGllcyBiYXNlZCBvbiBNZXNoU3RhbmRhcmRNYXRlcmlhbCBmb3IgU3BlY3VsYXItR2xvc3NpbmVzc1xuXG5cdFx0XHRcdHZhciBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdGRlZmluZXM6IHBhcmFtcy5kZWZpbmVzLFxuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjogcGFyYW1zLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogcGFyYW1zLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHRcdHVuaWZvcm1zOiBwYXJhbXMudW5pZm9ybXMsXG5cdFx0XHRcdFx0Zm9nOiB0cnVlLFxuXHRcdFx0XHRcdGxpZ2h0czogdHJ1ZSxcblx0XHRcdFx0XHRvcGFjaXR5OiBwYXJhbXMub3BhY2l0eSxcblx0XHRcdFx0XHR0cmFuc3BhcmVudDogcGFyYW1zLnRyYW5zcGFyZW50XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRtYXRlcmlhbC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCA9IHRydWU7XG5cblx0XHRcdFx0bWF0ZXJpYWwuY29sb3IgPSBwYXJhbXMuY29sb3I7XG5cblx0XHRcdFx0bWF0ZXJpYWwubWFwID0gcGFyYW1zLm1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5tYXA7XG5cblx0XHRcdFx0bWF0ZXJpYWwubGlnaHRNYXAgPSBudWxsO1xuXHRcdFx0XHRtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdFx0XHRtYXRlcmlhbC5hb01hcCA9IHBhcmFtcy5hb01hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5hb01hcDtcblx0XHRcdFx0bWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHRcdFx0bWF0ZXJpYWwuZW1pc3NpdmUgPSBwYXJhbXMuZW1pc3NpdmU7XG5cdFx0XHRcdG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdFx0XHRtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9IHBhcmFtcy5lbWlzc2l2ZU1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5lbWlzc2l2ZU1hcDtcblxuXHRcdFx0XHRtYXRlcmlhbC5idW1wTWFwID0gcGFyYW1zLmJ1bXBNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuYnVtcE1hcDtcblx0XHRcdFx0bWF0ZXJpYWwuYnVtcFNjYWxlID0gMTtcblxuXHRcdFx0XHRtYXRlcmlhbC5ub3JtYWxNYXAgPSBwYXJhbXMubm9ybWFsTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLm5vcm1hbE1hcDtcblxuXHRcdFx0XHRpZiAoIHBhcmFtcy5ub3JtYWxTY2FsZSApIG1hdGVyaWFsLm5vcm1hbFNjYWxlID0gcGFyYW1zLm5vcm1hbFNjYWxlO1xuXG5cdFx0XHRcdG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdFx0XHRcdG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0XHRcdFx0bWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHRcdFx0bWF0ZXJpYWwuc3BlY3VsYXJNYXAgPSBwYXJhbXMuc3BlY3VsYXJNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuc3BlY3VsYXJNYXA7XG5cdFx0XHRcdG1hdGVyaWFsLnNwZWN1bGFyID0gcGFyYW1zLnNwZWN1bGFyO1xuXG5cdFx0XHRcdG1hdGVyaWFsLmdsb3NzaW5lc3NNYXAgPSBwYXJhbXMuZ2xvc3NpbmVzc01hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5nbG9zc2luZXNzTWFwO1xuXHRcdFx0XHRtYXRlcmlhbC5nbG9zc2luZXNzID0gcGFyYW1zLmdsb3NzaW5lc3M7XG5cblx0XHRcdFx0bWF0ZXJpYWwuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0XHRcdG1hdGVyaWFsLmVudk1hcCA9IHBhcmFtcy5lbnZNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuZW52TWFwO1xuXHRcdFx0XHRtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHRcdFx0bWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHRcdFx0XHRtYXRlcmlhbC5leHRlbnNpb25zLmRlcml2YXRpdmVzID0gdHJ1ZTtcblxuXHRcdFx0XHRyZXR1cm4gbWF0ZXJpYWw7XG5cblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2xvbmVzIGEgR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsIGluc3RhbmNlLiBUaGUgU2hhZGVyTWF0ZXJpYWwuY29weSgpIG1ldGhvZCBjYW5cblx0XHRcdCAqIGNvcHkgb25seSBwcm9wZXJ0aWVzIGl0IGtub3dzIGFib3V0IG9yIGluaGVyaXRzLCBhbmQgbWlzc2VzIG1hbnkgcHJvcGVydGllcyB0aGF0IHdvdWxkXG5cdFx0XHQgKiBub3JtYWxseSBiZSBkZWZpbmVkIGJ5IE1lc2hTdGFuZGFyZE1hdGVyaWFsLlxuXHRcdFx0ICpcblx0XHRcdCAqIFRoaXMgbWV0aG9kIGFsbG93cyBHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWxzIHRvIGJlIGNsb25lZCBpbiB0aGUgcHJvY2VzcyBvZlxuXHRcdFx0ICogbG9hZGluZyBhIGdsVEYgbW9kZWwsIGJ1dCBjbG9uaW5nIGxhdGVyIChlLmcuIGJ5IHRoZSB1c2VyKSB3b3VsZCByZXF1aXJlIHRoZXNlIGNoYW5nZXNcblx0XHRcdCAqIEFORCBhbHNvIHVwZGF0aW5nIGAub25CZWZvcmVSZW5kZXJgIG9uIHRoZSBwYXJlbnQgbWVzaC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gIHtTaGFkZXJNYXRlcmlhbH0gc291cmNlXG5cdFx0XHQgKiBAcmV0dXJuIHtTaGFkZXJNYXRlcmlhbH1cblx0XHRcdCAqL1xuXHRcdFx0Y2xvbmVNYXRlcmlhbDogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRcdFx0dmFyIHRhcmdldCA9IHNvdXJjZS5jbG9uZSgpO1xuXG5cdFx0XHRcdHRhcmdldC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCA9IHRydWU7XG5cblx0XHRcdFx0dmFyIHBhcmFtcyA9IHRoaXMuc3BlY3VsYXJHbG9zc2luZXNzUGFyYW1zO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwYXJhbXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmFsdWUgPSBzb3VyY2VbIHBhcmFtc1sgaSBdIF07XG5cdFx0XHRcdFx0dGFyZ2V0WyBwYXJhbXNbIGkgXSBdID0gKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkgPyB2YWx1ZS5jbG9uZSgpIDogdmFsdWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0YXJnZXQ7XG5cblx0XHRcdH0sXG5cblx0XHRcdC8vIEhlcmUncyBiYXNlZCBvbiByZWZyZXNoVW5pZm9ybXNDb21tb24oKSBhbmQgcmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoKSBpbiBXZWJHTFJlbmRlcmVyLlxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zOiBmdW5jdGlvbiAoIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXM7XG5cdFx0XHRcdHZhciBkZWZpbmVzID0gbWF0ZXJpYWwuZGVmaW5lcztcblxuXHRcdFx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cdFx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5zcGVjdWxhck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwLnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXA7XG5cdFx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRcdFx0dW5pZm9ybXMuYW9NYXAudmFsdWUgPSBtYXRlcmlhbC5hb01hcDtcblx0XHRcdFx0dW5pZm9ybXMuYW9NYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5hb01hcEludGVuc2l0eTtcblxuXHRcdFx0XHQvLyB1diByZXBlYXQgYW5kIG9mZnNldCBzZXR0aW5nIHByaW9yaXRpZXNcblx0XHRcdFx0Ly8gMS4gY29sb3IgbWFwXG5cdFx0XHRcdC8vIDIuIHNwZWN1bGFyIG1hcFxuXHRcdFx0XHQvLyAzLiBub3JtYWwgbWFwXG5cdFx0XHRcdC8vIDQuIGJ1bXAgbWFwXG5cdFx0XHRcdC8vIDUuIGFscGhhIG1hcFxuXHRcdFx0XHQvLyA2LiBlbWlzc2l2ZSBtYXBcblxuXHRcdFx0XHR2YXIgdXZTY2FsZU1hcDtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYnVtcE1hcDtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5nbG9zc2luZXNzTWFwICkge1xuXG5cdFx0XHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmdsb3NzaW5lc3NNYXA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdXZTY2FsZU1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0XHRpZiAoIHV2U2NhbGVNYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHRcdFx0dXZTY2FsZU1hcCA9IHV2U2NhbGVNYXAudGV4dHVyZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggdXZTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHR1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggdXZTY2FsZU1hcC5tYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5lbnZNYXAgKSB7XG5cblx0XHRcdFx0XHR1bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXA7XG5cdFx0XHRcdFx0dW5pZm9ybXMuZW52TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0XHRcdFx0Ly8gZG9uJ3QgZmxpcCBDdWJlVGV4dHVyZSBlbnZNYXBzLCBmbGlwIGV2ZXJ5dGhpbmcgZWxzZTpcblx0XHRcdFx0XHQvLyAgV2ViR0xSZW5kZXJUYXJnZXRDdWJlIHdpbGwgYmUgZmxpcHBlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0XHQvLyAgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgd2lsbCBiZSBmbGlwcGVkIGJlY2F1c2UgaXQncyBhIFRleHR1cmUgYW5kIE5PVCBhIEN1YmVUZXh0dXJlXG5cdFx0XHRcdFx0Ly8gdGhpcyBjaGVjayBtdXN0IGJlIGhhbmRsZWQgZGlmZmVyZW50bHksIG9yIHJlbW92ZWQgZW50aXJlbHksIGlmIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSB1c2VzIGEgQ3ViZVRleHR1cmUgaW4gdGhlIGZ1dHVyZVxuXHRcdFx0XHRcdHVuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXAuaXNDdWJlVGV4dHVyZSA/IC0gMSA6IDE7XG5cblx0XHRcdFx0XHR1bmlmb3Jtcy5yZWZsZWN0aXZpdHkudmFsdWUgPSBtYXRlcmlhbC5yZWZsZWN0aXZpdHk7XG5cdFx0XHRcdFx0dW5pZm9ybXMucmVmcmFjdGlvblJhdGlvLnZhbHVlID0gbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMubWF4TWlwTGV2ZWwudmFsdWUgPSByZW5kZXJlci5wcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwuZW52TWFwICkuX19tYXhNaXBMZXZlbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dW5pZm9ybXMuc3BlY3VsYXIudmFsdWUuY29weSggbWF0ZXJpYWwuc3BlY3VsYXIgKTtcblx0XHRcdFx0dW5pZm9ybXMuZ2xvc3NpbmVzcy52YWx1ZSA9IG1hdGVyaWFsLmdsb3NzaW5lc3M7XG5cblx0XHRcdFx0dW5pZm9ybXMuZ2xvc3NpbmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLmdsb3NzaW5lc3NNYXA7XG5cblx0XHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblx0XHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0XHRcdGlmICggdW5pZm9ybXMuZ2xvc3NpbmVzc01hcC52YWx1ZSAhPT0gbnVsbCAmJiBkZWZpbmVzLlVTRV9HTE9TU0lORVNTTUFQID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRkZWZpbmVzLlVTRV9HTE9TU0lORVNTTUFQID0gJyc7XG5cdFx0XHRcdFx0Ly8gc2V0IFVTRV9ST1VHSE5FU1NNQVAgdG8gZW5hYmxlIHZVdlxuXHRcdFx0XHRcdGRlZmluZXMuVVNFX1JPVUdITkVTU01BUCA9ICcnO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWUgPT09IG51bGwgJiYgZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0ZGVsZXRlIGRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVA7XG5cdFx0XHRcdFx0ZGVsZXRlIGRlZmluZXMuVVNFX1JPVUdITkVTU01BUDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cdC8qKioqKioqKioqIElOVEVSUE9MQVRJT04gKioqKioqKiovXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0Ly8gU3BsaW5lIEludGVycG9sYXRpb25cblx0Ly8gU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNhcHBlbmRpeC1jLXNwbGluZS1pbnRlcnBvbGF0aW9uXG5cdGZ1bmN0aW9uIEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdFx0SW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdH1cblxuXHRHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJbnRlcnBvbGFudC5wcm90b3R5cGUgKTtcblx0R0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQ7XG5cblx0R0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8gPSBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0Ly8gQ29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyLiBTZWUgZGVzY3JpcHRpb24gb2YgZ2xURlxuXHRcdC8vIENVQklDU1BMSU5FIHZhbHVlcyBsYXlvdXQgaW4gaW50ZXJwb2xhdGVfKCkgZnVuY3Rpb24gYmVsb3cuXG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHZhbHVlU2l6ZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0b2Zmc2V0ID0gaW5kZXggKiB2YWx1ZVNpemUgKiAzICsgdmFsdWVTaXplO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSB2YWx1ZVNpemU7IGkgKysgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID0gdmFsdWVzWyBvZmZzZXQgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH07XG5cblx0R0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmJlZm9yZVN0YXJ0XyA9IEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfO1xuXG5cdEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5hZnRlckVuZF8gPSBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXztcblxuXHRHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuaW50ZXJwb2xhdGVfID0gZnVuY3Rpb24gKCBpMSwgdDAsIHQsIHQxICkge1xuXG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyO1xuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcztcblx0XHR2YXIgc3RyaWRlID0gdGhpcy52YWx1ZVNpemU7XG5cblx0XHR2YXIgc3RyaWRlMiA9IHN0cmlkZSAqIDI7XG5cdFx0dmFyIHN0cmlkZTMgPSBzdHJpZGUgKiAzO1xuXG5cdFx0dmFyIHRkID0gdDEgLSB0MDtcblxuXHRcdHZhciBwID0gKCB0IC0gdDAgKSAvIHRkO1xuXHRcdHZhciBwcCA9IHAgKiBwO1xuXHRcdHZhciBwcHAgPSBwcCAqIHA7XG5cblx0XHR2YXIgb2Zmc2V0MSA9IGkxICogc3RyaWRlMztcblx0XHR2YXIgb2Zmc2V0MCA9IG9mZnNldDEgLSBzdHJpZGUzO1xuXG5cdFx0dmFyIHMyID0gLSAyICogcHBwICsgMyAqIHBwO1xuXHRcdHZhciBzMyA9IHBwcCAtIHBwO1xuXHRcdHZhciBzMCA9IDEgLSBzMjtcblx0XHR2YXIgczEgPSBzMyAtIHBwICsgcDtcblxuXHRcdC8vIExheW91dCBvZiBrZXlmcmFtZSBvdXRwdXQgdmFsdWVzIGZvciBDVUJJQ1NQTElORSBhbmltYXRpb25zOlxuXHRcdC8vICAgWyBpblRhbmdlbnRfMSwgc3BsaW5lVmVydGV4XzEsIG91dFRhbmdlbnRfMSwgaW5UYW5nZW50XzIsIHNwbGluZVZlcnRleF8yLCAuLi4gXVxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyBpICsrICkge1xuXG5cdFx0XHR2YXIgcDAgPSB2YWx1ZXNbIG9mZnNldDAgKyBpICsgc3RyaWRlIF07IC8vIHNwbGluZVZlcnRleF9rXG5cdFx0XHR2YXIgbTAgPSB2YWx1ZXNbIG9mZnNldDAgKyBpICsgc3RyaWRlMiBdICogdGQ7IC8vIG91dFRhbmdlbnRfayAqICh0X2srMSAtIHRfaylcblx0XHRcdHZhciBwMSA9IHZhbHVlc1sgb2Zmc2V0MSArIGkgKyBzdHJpZGUgXTsgLy8gc3BsaW5lVmVydGV4X2srMVxuXHRcdFx0dmFyIG0xID0gdmFsdWVzWyBvZmZzZXQxICsgaSBdICogdGQ7IC8vIGluVGFuZ2VudF9rKzEgKiAodF9rKzEgLSB0X2spXG5cblx0XHRcdHJlc3VsdFsgaSBdID0gczAgKiBwMCArIHMxICogbTAgKyBzMiAqIHAxICsgczMgKiBtMTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fTtcblxuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXHQvKioqKioqKioqKiBJTlRFUk5BTFMgKioqKioqKioqKioqL1xuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdC8qIENPTlNUQU5UUyAqL1xuXG5cdHZhciBXRUJHTF9DT05TVEFOVFMgPSB7XG5cdFx0RkxPQVQ6IDUxMjYsXG5cdFx0Ly9GTE9BVF9NQVQyOiAzNTY3NCxcblx0XHRGTE9BVF9NQVQzOiAzNTY3NSxcblx0XHRGTE9BVF9NQVQ0OiAzNTY3Nixcblx0XHRGTE9BVF9WRUMyOiAzNTY2NCxcblx0XHRGTE9BVF9WRUMzOiAzNTY2NSxcblx0XHRGTE9BVF9WRUM0OiAzNTY2Nixcblx0XHRMSU5FQVI6IDk3MjksXG5cdFx0UkVQRUFUOiAxMDQ5Nyxcblx0XHRTQU1QTEVSXzJEOiAzNTY3OCxcblx0XHRQT0lOVFM6IDAsXG5cdFx0TElORVM6IDEsXG5cdFx0TElORV9MT09QOiAyLFxuXHRcdExJTkVfU1RSSVA6IDMsXG5cdFx0VFJJQU5HTEVTOiA0LFxuXHRcdFRSSUFOR0xFX1NUUklQOiA1LFxuXHRcdFRSSUFOR0xFX0ZBTjogNixcblx0XHRVTlNJR05FRF9CWVRFOiA1MTIxLFxuXHRcdFVOU0lHTkVEX1NIT1JUOiA1MTIzXG5cdH07XG5cblx0dmFyIFdFQkdMX0NPTVBPTkVOVF9UWVBFUyA9IHtcblx0XHQ1MTIwOiBJbnQ4QXJyYXksXG5cdFx0NTEyMTogVWludDhBcnJheSxcblx0XHQ1MTIyOiBJbnQxNkFycmF5LFxuXHRcdDUxMjM6IFVpbnQxNkFycmF5LFxuXHRcdDUxMjU6IFVpbnQzMkFycmF5LFxuXHRcdDUxMjY6IEZsb2F0MzJBcnJheVxuXHR9O1xuXG5cdHZhciBXRUJHTF9GSUxURVJTID0ge1xuXHRcdDk3Mjg6IE5lYXJlc3RGaWx0ZXIsXG5cdFx0OTcyOTogTGluZWFyRmlsdGVyLFxuXHRcdDk5ODQ6IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLFxuXHRcdDk5ODU6IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdFx0OTk4NjogTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcixcblx0XHQ5OTg3OiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXJcblx0fTtcblxuXHR2YXIgV0VCR0xfV1JBUFBJTkdTID0ge1xuXHRcdDMzMDcxOiBDbGFtcFRvRWRnZVdyYXBwaW5nLFxuXHRcdDMzNjQ4OiBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nLFxuXHRcdDEwNDk3OiBSZXBlYXRXcmFwcGluZ1xuXHR9O1xuXG5cdHZhciBXRUJHTF9UWVBFX1NJWkVTID0ge1xuXHRcdCdTQ0FMQVInOiAxLFxuXHRcdCdWRUMyJzogMixcblx0XHQnVkVDMyc6IDMsXG5cdFx0J1ZFQzQnOiA0LFxuXHRcdCdNQVQyJzogNCxcblx0XHQnTUFUMyc6IDksXG5cdFx0J01BVDQnOiAxNlxuXHR9O1xuXG5cdHZhciBBVFRSSUJVVEVTID0ge1xuXHRcdFBPU0lUSU9OOiAncG9zaXRpb24nLFxuXHRcdE5PUk1BTDogJ25vcm1hbCcsXG5cdFx0VEFOR0VOVDogJ3RhbmdlbnQnLFxuXHRcdFRFWENPT1JEXzA6ICd1dicsXG5cdFx0VEVYQ09PUkRfMTogJ3V2MicsXG5cdFx0Q09MT1JfMDogJ2NvbG9yJyxcblx0XHRXRUlHSFRTXzA6ICdza2luV2VpZ2h0Jyxcblx0XHRKT0lOVFNfMDogJ3NraW5JbmRleCcsXG5cdH07XG5cblx0dmFyIFBBVEhfUFJPUEVSVElFUyA9IHtcblx0XHRzY2FsZTogJ3NjYWxlJyxcblx0XHR0cmFuc2xhdGlvbjogJ3Bvc2l0aW9uJyxcblx0XHRyb3RhdGlvbjogJ3F1YXRlcm5pb24nLFxuXHRcdHdlaWdodHM6ICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnXG5cdH07XG5cblx0dmFyIElOVEVSUE9MQVRJT04gPSB7XG5cdFx0Q1VCSUNTUExJTkU6IHVuZGVmaW5lZCwgLy8gV2UgdXNlIGEgY3VzdG9tIGludGVycG9sYW50IChHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGF0aW9uKSBmb3IgQ1VCSUNTUExJTkUgdHJhY2tzLiBFYWNoXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2V5ZnJhbWUgdHJhY2sgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGEgZGVmYXVsdCBpbnRlcnBvbGF0aW9uIHR5cGUsIHRoZW4gbW9kaWZpZWQuXG5cdFx0TElORUFSOiBJbnRlcnBvbGF0ZUxpbmVhcixcblx0XHRTVEVQOiBJbnRlcnBvbGF0ZURpc2NyZXRlXG5cdH07XG5cblx0dmFyIEFMUEhBX01PREVTID0ge1xuXHRcdE9QQVFVRTogJ09QQVFVRScsXG5cdFx0TUFTSzogJ01BU0snLFxuXHRcdEJMRU5EOiAnQkxFTkQnXG5cdH07XG5cblx0dmFyIE1JTUVfVFlQRV9GT1JNQVRTID0ge1xuXHRcdCdpbWFnZS9wbmcnOiBSR0JBRm9ybWF0LFxuXHRcdCdpbWFnZS9qcGVnJzogUkdCRm9ybWF0XG5cdH07XG5cblx0LyogVVRJTElUWSBGVU5DVElPTlMgKi9cblxuXHRmdW5jdGlvbiByZXNvbHZlVVJMKCB1cmwsIHBhdGggKSB7XG5cblx0XHQvLyBJbnZhbGlkIFVSTFxuXHRcdGlmICggdHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdXJsID09PSAnJyApIHJldHVybiAnJztcblx0XHRcblx0XHQvLyBIb3N0IFJlbGF0aXZlIFVSTFxuXHRcdGlmICggL15odHRwcz86XFwvXFwvL2kudGVzdCggcGF0aCApICYmIC9eXFwvLy50ZXN0KCB1cmwgKSApIHtcblxuXHRcdFx0cGF0aCA9IHBhdGgucmVwbGFjZSggLyheaHR0cHM/OlxcL1xcL1teXFwvXSspLiovaSAsICckMScgKTtcblxuXHRcdH1cblxuXHRcdC8vIEFic29sdXRlIFVSTCBodHRwOi8vLGh0dHBzOi8vLC8vXG5cdFx0aWYgKCAvXihodHRwcz86KT9cXC9cXC8vaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG5cblx0XHQvLyBEYXRhIFVSSVxuXHRcdGlmICggL15kYXRhOi4qLC4qJC9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcblxuXHRcdC8vIEJsb2IgVVJMXG5cdFx0aWYgKCAvXmJsb2I6LiokL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuXG5cdFx0Ly8gUmVsYXRpdmUgVVJMXG5cdFx0cmV0dXJuIHBhdGggKyB1cmw7XG5cblx0fVxuXG5cdHZhciBkZWZhdWx0TWF0ZXJpYWw7XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjZGVmYXVsdC1tYXRlcmlhbFxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlRGVmYXVsdE1hdGVyaWFsKCkge1xuXG5cdFx0ZGVmYXVsdE1hdGVyaWFsID0gZGVmYXVsdE1hdGVyaWFsIHx8IG5ldyBNZXNoU3RhbmRhcmRNYXRlcmlhbCgge1xuXHRcdFx0Y29sb3I6IDB4RkZGRkZGLFxuXHRcdFx0ZW1pc3NpdmU6IDB4MDAwMDAwLFxuXHRcdFx0bWV0YWxuZXNzOiAxLFxuXHRcdFx0cm91Z2huZXNzOiAxLFxuXHRcdFx0dHJhbnNwYXJlbnQ6IGZhbHNlLFxuXHRcdFx0ZGVwdGhUZXN0OiB0cnVlLFxuXHRcdFx0c2lkZTogRnJvbnRTaWRlXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIGRlZmF1bHRNYXRlcmlhbDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKCBrbm93bkV4dGVuc2lvbnMsIG9iamVjdCwgb2JqZWN0RGVmICkge1xuXG5cdFx0Ly8gQWRkIHVua25vd24gZ2xURiBleHRlbnNpb25zIHRvIGFuIG9iamVjdCdzIHVzZXJEYXRhLlxuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gb2JqZWN0RGVmLmV4dGVuc2lvbnMgKSB7XG5cblx0XHRcdGlmICgga25vd25FeHRlbnNpb25zWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRvYmplY3QudXNlckRhdGEuZ2x0ZkV4dGVuc2lvbnMgPSBvYmplY3QudXNlckRhdGEuZ2x0ZkV4dGVuc2lvbnMgfHwge307XG5cdFx0XHRcdG9iamVjdC51c2VyRGF0YS5nbHRmRXh0ZW5zaW9uc1sgbmFtZSBdID0gb2JqZWN0RGVmLmV4dGVuc2lvbnNbIG5hbWUgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtPYmplY3QzRHxNYXRlcmlhbHxCdWZmZXJHZW9tZXRyeX0gb2JqZWN0XG5cdCAqIEBwYXJhbSB7R0xURi5kZWZpbml0aW9ufSBnbHRmRGVmXG5cdCAqL1xuXHRmdW5jdGlvbiBhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBvYmplY3QsIGdsdGZEZWYgKSB7XG5cblx0XHRpZiAoIGdsdGZEZWYuZXh0cmFzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGdsdGZEZWYuZXh0cmFzID09PSAnb2JqZWN0JyApIHtcblxuXHRcdFx0XHRPYmplY3QuYXNzaWduKCBvYmplY3QudXNlckRhdGEsIGdsdGZEZWYuZXh0cmFzICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogSWdub3JpbmcgcHJpbWl0aXZlIHR5cGUgLmV4dHJhcywgJyArIGdsdGZEZWYuZXh0cmFzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjbW9ycGgtdGFyZ2V0c1xuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeVxuXHQgKiBAcGFyYW0ge0FycmF5PEdMVEYuVGFyZ2V0Pn0gdGFyZ2V0c1xuXHQgKiBAcGFyYW0ge0dMVEZQYXJzZXJ9IHBhcnNlclxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPEJ1ZmZlckdlb21ldHJ5Pn1cblx0ICovXG5cdGZ1bmN0aW9uIGFkZE1vcnBoVGFyZ2V0cyggZ2VvbWV0cnksIHRhcmdldHMsIHBhcnNlciApIHtcblxuXHRcdHZhciBoYXNNb3JwaFBvc2l0aW9uID0gZmFsc2U7XG5cdFx0dmFyIGhhc01vcnBoTm9ybWFsID0gZmFsc2U7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHRhcmdldCA9IHRhcmdldHNbIGkgXTtcblxuXHRcdFx0aWYgKCB0YXJnZXQuUE9TSVRJT04gIT09IHVuZGVmaW5lZCApIGhhc01vcnBoUG9zaXRpb24gPSB0cnVlO1xuXHRcdFx0aWYgKCB0YXJnZXQuTk9STUFMICE9PSB1bmRlZmluZWQgKSBoYXNNb3JwaE5vcm1hbCA9IHRydWU7XG5cblx0XHRcdGlmICggaGFzTW9ycGhQb3NpdGlvbiAmJiBoYXNNb3JwaE5vcm1hbCApIGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAhIGhhc01vcnBoUG9zaXRpb24gJiYgISBoYXNNb3JwaE5vcm1hbCApIHJldHVybiBQcm9taXNlLnJlc29sdmUoIGdlb21ldHJ5ICk7XG5cblx0XHR2YXIgcGVuZGluZ1Bvc2l0aW9uQWNjZXNzb3JzID0gW107XG5cdFx0dmFyIHBlbmRpbmdOb3JtYWxBY2Nlc3NvcnMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdGFyZ2V0ID0gdGFyZ2V0c1sgaSBdO1xuXG5cdFx0XHRpZiAoIGhhc01vcnBoUG9zaXRpb24gKSB7XG5cblx0XHRcdFx0dmFyIHBlbmRpbmdBY2Nlc3NvciA9IHRhcmdldC5QT1NJVElPTiAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdFx0PyBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ2FjY2Vzc29yJywgdGFyZ2V0LlBPU0lUSU9OIClcblx0XHRcdFx0XHQ6IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdFx0cGVuZGluZ1Bvc2l0aW9uQWNjZXNzb3JzLnB1c2goIHBlbmRpbmdBY2Nlc3NvciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzTW9ycGhOb3JtYWwgKSB7XG5cblx0XHRcdFx0dmFyIHBlbmRpbmdBY2Nlc3NvciA9IHRhcmdldC5OT1JNQUwgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHRcdD8gcGFyc2VyLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIHRhcmdldC5OT1JNQUwgKVxuXHRcdFx0XHRcdDogZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRcdFx0cGVuZGluZ05vcm1hbEFjY2Vzc29ycy5wdXNoKCBwZW5kaW5nQWNjZXNzb3IgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKCBbXG5cdFx0XHRQcm9taXNlLmFsbCggcGVuZGluZ1Bvc2l0aW9uQWNjZXNzb3JzICksXG5cdFx0XHRQcm9taXNlLmFsbCggcGVuZGluZ05vcm1hbEFjY2Vzc29ycyApXG5cdFx0XSApLnRoZW4oIGZ1bmN0aW9uICggYWNjZXNzb3JzICkge1xuXG5cdFx0XHR2YXIgbW9ycGhQb3NpdGlvbnMgPSBhY2Nlc3NvcnNbIDAgXTtcblx0XHRcdHZhciBtb3JwaE5vcm1hbHMgPSBhY2Nlc3NvcnNbIDEgXTtcblxuXHRcdFx0Ly8gQ2xvbmUgbW9ycGggdGFyZ2V0IGFjY2Vzc29ycyBiZWZvcmUgbW9kaWZ5aW5nIHRoZW0uXG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtb3JwaFBvc2l0aW9ucy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24gPT09IG1vcnBoUG9zaXRpb25zWyBpIF0gKSBjb250aW51ZTtcblxuXHRcdFx0XHRtb3JwaFBvc2l0aW9uc1sgaSBdID0gY2xvbmVCdWZmZXJBdHRyaWJ1dGUoIG1vcnBoUG9zaXRpb25zWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhOb3JtYWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwgPT09IG1vcnBoTm9ybWFsc1sgaSBdICkgY29udGludWU7XG5cblx0XHRcdFx0bW9ycGhOb3JtYWxzWyBpIF0gPSBjbG9uZUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhOb3JtYWxzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gdGFyZ2V0c1sgaSBdO1xuXHRcdFx0XHR2YXIgYXR0cmlidXRlTmFtZSA9ICdtb3JwaFRhcmdldCcgKyBpO1xuXG5cdFx0XHRcdGlmICggaGFzTW9ycGhQb3NpdGlvbiApIHtcblxuXHRcdFx0XHRcdC8vIFRocmVlLmpzIG1vcnBoIHBvc2l0aW9uIGlzIGFic29sdXRlIHZhbHVlLiBUaGUgZm9ybXVsYSBpc1xuXHRcdFx0XHRcdC8vICAgYmFzZVBvc2l0aW9uXG5cdFx0XHRcdFx0Ly8gICAgICsgd2VpZ2h0MCAqICggbW9ycGhQb3NpdGlvbjAgLSBiYXNlUG9zaXRpb24gKVxuXHRcdFx0XHRcdC8vICAgICArIHdlaWdodDEgKiAoIG1vcnBoUG9zaXRpb24xIC0gYmFzZVBvc2l0aW9uIClcblx0XHRcdFx0XHQvLyAgICAgLi4uXG5cdFx0XHRcdFx0Ly8gd2hpbGUgdGhlIGdsVEYgb25lIGlzIHJlbGF0aXZlXG5cdFx0XHRcdFx0Ly8gICBiYXNlUG9zaXRpb25cblx0XHRcdFx0XHQvLyAgICAgKyB3ZWlnaHQwICogZ2xURm1vcnBoUG9zaXRpb24wXG5cdFx0XHRcdFx0Ly8gICAgICsgd2VpZ2h0MSAqIGdsVEZtb3JwaFBvc2l0aW9uMVxuXHRcdFx0XHRcdC8vICAgICAuLi5cblx0XHRcdFx0XHQvLyB0aGVuIHdlIG5lZWQgdG8gY29udmVydCBmcm9tIHJlbGF0aXZlIHRvIGFic29sdXRlIGhlcmUuXG5cblx0XHRcdFx0XHRpZiAoIHRhcmdldC5QT1NJVElPTiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgcG9zaXRpb25BdHRyaWJ1dGUgPSBtb3JwaFBvc2l0aW9uc1sgaSBdO1xuXHRcdFx0XHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG5cblx0XHRcdFx0XHRcdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uQXR0cmlidXRlLnNldFhZWihcblx0XHRcdFx0XHRcdFx0XHRqLFxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uQXR0cmlidXRlLmdldFgoIGogKSArIHBvc2l0aW9uLmdldFgoIGogKSxcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbkF0dHJpYnV0ZS5nZXRZKCBqICkgKyBwb3NpdGlvbi5nZXRZKCBqICksXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUuZ2V0WiggaiApICsgcG9zaXRpb24uZ2V0WiggaiApXG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBoYXNNb3JwaE5vcm1hbCApIHtcblxuXHRcdFx0XHRcdC8vIHNlZSB0YXJnZXQuUE9TSVRJT04ncyBjb21tZW50XG5cblx0XHRcdFx0XHRpZiAoIHRhcmdldC5OT1JNQUwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0dmFyIG5vcm1hbEF0dHJpYnV0ZSA9IG1vcnBoTm9ybWFsc1sgaSBdO1xuXHRcdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLm5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuXG5cdFx0XHRcdFx0XHR2YXIgbm9ybWFsID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBub3JtYWxBdHRyaWJ1dGUuY291bnQ7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKFxuXHRcdFx0XHRcdFx0XHRcdGosXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLmdldFgoIGogKSArIG5vcm1hbC5nZXRYKCBqICksXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLmdldFkoIGogKSArIG5vcm1hbC5nZXRZKCBqICksXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLmdldFooIGogKSArIG5vcm1hbC5nZXRaKCBqIClcblx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc01vcnBoUG9zaXRpb24gKSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gPSBtb3JwaFBvc2l0aW9ucztcblx0XHRcdGlmICggaGFzTW9ycGhOb3JtYWwgKSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsID0gbW9ycGhOb3JtYWxzO1xuXG5cdFx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge01lc2h9IG1lc2hcblx0ICogQHBhcmFtIHtHTFRGLk1lc2h9IG1lc2hEZWZcblx0ICovXG5cdGZ1bmN0aW9uIHVwZGF0ZU1vcnBoVGFyZ2V0cyggbWVzaCwgbWVzaERlZiApIHtcblxuXHRcdG1lc2gudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cblx0XHRpZiAoIG1lc2hEZWYud2VpZ2h0cyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbWVzaERlZi53ZWlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdG1lc2gubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gPSBtZXNoRGVmLndlaWdodHNbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gLmV4dHJhcyBoYXMgdXNlci1kZWZpbmVkIGRhdGEsIHNvIGNoZWNrIHRoYXQgLmV4dHJhcy50YXJnZXROYW1lcyBpcyBhbiBhcnJheS5cblx0XHRpZiAoIG1lc2hEZWYuZXh0cmFzICYmIEFycmF5LmlzQXJyYXkoIG1lc2hEZWYuZXh0cmFzLnRhcmdldE5hbWVzICkgKSB7XG5cblx0XHRcdHZhciB0YXJnZXROYW1lcyA9IG1lc2hEZWYuZXh0cmFzLnRhcmdldE5hbWVzO1xuXG5cdFx0XHRpZiAoIG1lc2gubW9ycGhUYXJnZXRJbmZsdWVuY2VzLmxlbmd0aCA9PT0gdGFyZ2V0TmFtZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdG1lc2gubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRhcmdldE5hbWVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWVzaC5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHRhcmdldE5hbWVzWyBpIF0gXSA9IGk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6IEludmFsaWQgZXh0cmFzLnRhcmdldE5hbWVzIGxlbmd0aC4gSWdub3JpbmcgbmFtZXMuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZUtleSggcHJpbWl0aXZlRGVmICkge1xuXG5cdFx0dmFyIGRyYWNvRXh0ZW5zaW9uID0gcHJpbWl0aXZlRGVmLmV4dGVuc2lvbnMgJiYgcHJpbWl0aXZlRGVmLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT04gXTtcblx0XHR2YXIgZ2VvbWV0cnlLZXk7XG5cblx0XHRpZiAoIGRyYWNvRXh0ZW5zaW9uICkge1xuXG5cdFx0XHRnZW9tZXRyeUtleSA9ICdkcmFjbzonICsgZHJhY29FeHRlbnNpb24uYnVmZmVyVmlld1xuXHRcdFx0XHQrICc6JyArIGRyYWNvRXh0ZW5zaW9uLmluZGljZXNcblx0XHRcdFx0KyAnOicgKyBjcmVhdGVBdHRyaWJ1dGVzS2V5KCBkcmFjb0V4dGVuc2lvbi5hdHRyaWJ1dGVzICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnZW9tZXRyeUtleSA9IHByaW1pdGl2ZURlZi5pbmRpY2VzICsgJzonICsgY3JlYXRlQXR0cmlidXRlc0tleSggcHJpbWl0aXZlRGVmLmF0dHJpYnV0ZXMgKSArICc6JyArIHByaW1pdGl2ZURlZi5tb2RlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdlb21ldHJ5S2V5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVBdHRyaWJ1dGVzS2V5KCBhdHRyaWJ1dGVzICkge1xuXG5cdFx0dmFyIGF0dHJpYnV0ZXNLZXkgPSAnJztcblxuXHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXMoIGF0dHJpYnV0ZXMgKS5zb3J0KCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0ga2V5cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0YXR0cmlidXRlc0tleSArPSBrZXlzWyBpIF0gKyAnOicgKyBhdHRyaWJ1dGVzWyBrZXlzWyBpIF0gXSArICc7JztcblxuXHRcdH1cblxuXHRcdHJldHVybiBhdHRyaWJ1dGVzS2V5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjbG9uZUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0dmFyIGNvdW50ID0gYXR0cmlidXRlLmNvdW50O1xuXHRcdFx0dmFyIGl0ZW1TaXplID0gYXR0cmlidXRlLml0ZW1TaXplO1xuXHRcdFx0dmFyIGFycmF5ID0gYXR0cmlidXRlLmFycmF5LnNsaWNlKCAwLCBjb3VudCAqIGl0ZW1TaXplICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaiA9IDA7IGkgPCBjb3VudDsgKysgaSApIHtcblxuXHRcdFx0XHRhcnJheVsgaiArKyBdID0gYXR0cmlidXRlLmdldFgoIGkgKTtcblx0XHRcdFx0aWYgKCBpdGVtU2l6ZSA+PSAyICkgYXJyYXlbIGogKysgXSA9IGF0dHJpYnV0ZS5nZXRZKCBpICk7XG5cdFx0XHRcdGlmICggaXRlbVNpemUgPj0gMyApIGFycmF5WyBqICsrIF0gPSBhdHRyaWJ1dGUuZ2V0WiggaSApO1xuXHRcdFx0XHRpZiAoIGl0ZW1TaXplID49IDQgKSBhcnJheVsgaiArKyBdID0gYXR0cmlidXRlLmdldFcoIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGF0dHJpYnV0ZS5jbG9uZSgpO1xuXG5cdH1cblxuXHQvKiBHTFRGIFBBUlNFUiAqL1xuXG5cdGZ1bmN0aW9uIEdMVEZQYXJzZXIoIGpzb24sIGV4dGVuc2lvbnMsIG9wdGlvbnMgKSB7XG5cblx0XHR0aGlzLmpzb24gPSBqc29uIHx8IHt9O1xuXHRcdHRoaXMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMgfHwge307XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdC8vIGxvYWRlciBvYmplY3QgY2FjaGVcblx0XHR0aGlzLmNhY2hlID0gbmV3IEdMVEZSZWdpc3RyeSgpO1xuXG5cdFx0Ly8gQnVmZmVyR2VvbWV0cnkgY2FjaGluZ1xuXHRcdHRoaXMucHJpbWl0aXZlQ2FjaGUgPSB7fTtcblxuXHRcdHRoaXMudGV4dHVyZUxvYWRlciA9IG5ldyBUZXh0dXJlTG9hZGVyKCB0aGlzLm9wdGlvbnMubWFuYWdlciApO1xuXHRcdHRoaXMudGV4dHVyZUxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5vcHRpb25zLmNyb3NzT3JpZ2luICk7XG5cblx0XHR0aGlzLmZpbGVMb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5vcHRpb25zLm1hbmFnZXIgKTtcblx0XHR0aGlzLmZpbGVMb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5jcm9zc09yaWdpbiA9PT0gJ3VzZS1jcmVkZW50aWFscycgKSB7XG5cblx0XHRcdHRoaXMuZmlsZUxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHRydWUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0R0xURlBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRcdHZhciBwYXJzZXIgPSB0aGlzO1xuXHRcdHZhciBqc29uID0gdGhpcy5qc29uO1xuXHRcdHZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zO1xuXG5cdFx0Ly8gQ2xlYXIgdGhlIGxvYWRlciBjYWNoZVxuXHRcdHRoaXMuY2FjaGUucmVtb3ZlQWxsKCk7XG5cblx0XHQvLyBNYXJrIHRoZSBzcGVjaWFsIG5vZGVzL21lc2hlcyBpbiBqc29uIGZvciBlZmZpY2llbnQgcGFyc2Vcblx0XHR0aGlzLm1hcmtEZWZzKCk7XG5cblx0XHRQcm9taXNlLmFsbCggW1xuXG5cdFx0XHR0aGlzLmdldERlcGVuZGVuY2llcyggJ3NjZW5lJyApLFxuXHRcdFx0dGhpcy5nZXREZXBlbmRlbmNpZXMoICdhbmltYXRpb24nICksXG5cdFx0XHR0aGlzLmdldERlcGVuZGVuY2llcyggJ2NhbWVyYScgKSxcblxuXHRcdF0gKS50aGVuKCBmdW5jdGlvbiAoIGRlcGVuZGVuY2llcyApIHtcblxuXHRcdFx0dmFyIHJlc3VsdCA9IHtcblx0XHRcdFx0c2NlbmU6IGRlcGVuZGVuY2llc1sgMCBdWyBqc29uLnNjZW5lIHx8IDAgXSxcblx0XHRcdFx0c2NlbmVzOiBkZXBlbmRlbmNpZXNbIDAgXSxcblx0XHRcdFx0YW5pbWF0aW9uczogZGVwZW5kZW5jaWVzWyAxIF0sXG5cdFx0XHRcdGNhbWVyYXM6IGRlcGVuZGVuY2llc1sgMiBdLFxuXHRcdFx0XHRhc3NldDoganNvbi5hc3NldCxcblx0XHRcdFx0cGFyc2VyOiBwYXJzZXIsXG5cdFx0XHRcdHVzZXJEYXRhOiB7fVxuXHRcdFx0fTtcblxuXHRcdFx0YWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKCBleHRlbnNpb25zLCByZXN1bHQsIGpzb24gKTtcblxuXHRcdFx0YXNzaWduRXh0cmFzVG9Vc2VyRGF0YSggcmVzdWx0LCBqc29uICk7XG5cblx0XHRcdG9uTG9hZCggcmVzdWx0ICk7XG5cblx0XHR9ICkuY2F0Y2goIG9uRXJyb3IgKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBNYXJrcyB0aGUgc3BlY2lhbCBub2Rlcy9tZXNoZXMgaW4ganNvbiBmb3IgZWZmaWNpZW50IHBhcnNlLlxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubWFya0RlZnMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbm9kZURlZnMgPSB0aGlzLmpzb24ubm9kZXMgfHwgW107XG5cdFx0dmFyIHNraW5EZWZzID0gdGhpcy5qc29uLnNraW5zIHx8IFtdO1xuXHRcdHZhciBtZXNoRGVmcyA9IHRoaXMuanNvbi5tZXNoZXMgfHwgW107XG5cblx0XHR2YXIgbWVzaFJlZmVyZW5jZXMgPSB7fTtcblx0XHR2YXIgbWVzaFVzZXMgPSB7fTtcblxuXHRcdC8vIE5vdGhpbmcgaW4gdGhlIG5vZGUgZGVmaW5pdGlvbiBpbmRpY2F0ZXMgd2hldGhlciBpdCBpcyBhIEJvbmUgb3IgYW5cblx0XHQvLyBPYmplY3QzRC4gVXNlIHRoZSBza2lucycgam9pbnQgcmVmZXJlbmNlcyB0byBtYXJrIGJvbmVzLlxuXHRcdGZvciAoIHZhciBza2luSW5kZXggPSAwLCBza2luTGVuZ3RoID0gc2tpbkRlZnMubGVuZ3RoOyBza2luSW5kZXggPCBza2luTGVuZ3RoOyBza2luSW5kZXggKysgKSB7XG5cblx0XHRcdHZhciBqb2ludHMgPSBza2luRGVmc1sgc2tpbkluZGV4IF0uam9pbnRzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gam9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdG5vZGVEZWZzWyBqb2ludHNbIGkgXSBdLmlzQm9uZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIE1lc2hlcyBjYW4gKGFuZCBzaG91bGQpIGJlIHJldXNlZCBieSBtdWx0aXBsZSBub2RlcyBpbiBhIGdsVEYgYXNzZXQuIFRvXG5cdFx0Ly8gYXZvaWQgaGF2aW5nIG1vcmUgdGhhbiBvbmUgTWVzaCB3aXRoIHRoZSBzYW1lIG5hbWUsIGNvdW50XG5cdFx0Ly8gcmVmZXJlbmNlcyBhbmQgcmVuYW1lIGluc3RhbmNlcyBiZWxvdy5cblx0XHQvL1xuXHRcdC8vIEV4YW1wbGU6IENlc2l1bU1pbGtUcnVjayBzYW1wbGUgbW9kZWwgcmV1c2VzIFwiV2hlZWxcIiBtZXNoZXMuXG5cdFx0Zm9yICggdmFyIG5vZGVJbmRleCA9IDAsIG5vZGVMZW5ndGggPSBub2RlRGVmcy5sZW5ndGg7IG5vZGVJbmRleCA8IG5vZGVMZW5ndGg7IG5vZGVJbmRleCArKyApIHtcblxuXHRcdFx0dmFyIG5vZGVEZWYgPSBub2RlRGVmc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdGlmICggbm9kZURlZi5tZXNoICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBtZXNoUmVmZXJlbmNlc1sgbm9kZURlZi5tZXNoIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSA9IG1lc2hVc2VzWyBub2RlRGVmLm1lc2ggXSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSArKztcblxuXHRcdFx0XHQvLyBOb3RoaW5nIGluIHRoZSBtZXNoIGRlZmluaXRpb24gaW5kaWNhdGVzIHdoZXRoZXIgaXQgaXNcblx0XHRcdFx0Ly8gYSBTa2lubmVkTWVzaCBvciBNZXNoLiBVc2UgdGhlIG5vZGUncyBtZXNoIHJlZmVyZW5jZVxuXHRcdFx0XHQvLyB0byBtYXJrIFNraW5uZWRNZXNoIGlmIG5vZGUgaGFzIHNraW4uXG5cdFx0XHRcdGlmICggbm9kZURlZi5za2luICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRtZXNoRGVmc1sgbm9kZURlZi5tZXNoIF0uaXNTa2lubmVkTWVzaCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmpzb24ubWVzaFJlZmVyZW5jZXMgPSBtZXNoUmVmZXJlbmNlcztcblx0XHR0aGlzLmpzb24ubWVzaFVzZXMgPSBtZXNoVXNlcztcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXF1ZXN0cyB0aGUgc3BlY2lmaWVkIGRlcGVuZGVuY3kgYXN5bmNocm9ub3VzbHksIHdpdGggY2FjaGluZy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG5cdCAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0M0R8TWF0ZXJpYWx8VEhSRUUuVGV4dHVyZXxBbmltYXRpb25DbGlwfEFycmF5QnVmZmVyfE9iamVjdD59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5nZXREZXBlbmRlbmN5ID0gZnVuY3Rpb24gKCB0eXBlLCBpbmRleCApIHtcblxuXHRcdHZhciBjYWNoZUtleSA9IHR5cGUgKyAnOicgKyBpbmRleDtcblx0XHR2YXIgZGVwZW5kZW5jeSA9IHRoaXMuY2FjaGUuZ2V0KCBjYWNoZUtleSApO1xuXG5cdFx0aWYgKCAhIGRlcGVuZGVuY3kgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnc2NlbmUnOlxuXHRcdFx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRTY2VuZSggaW5kZXggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdub2RlJzpcblx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTm9kZSggaW5kZXggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdtZXNoJzpcblx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTWVzaCggaW5kZXggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdhY2Nlc3Nvcic6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZEFjY2Vzc29yKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2J1ZmZlclZpZXcnOlxuXHRcdFx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRCdWZmZXJWaWV3KCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2J1ZmZlcic6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZEJ1ZmZlciggaW5kZXggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdtYXRlcmlhbCc6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZE1hdGVyaWFsKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3RleHR1cmUnOlxuXHRcdFx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRUZXh0dXJlKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3NraW4nOlxuXHRcdFx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRTa2luKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2FuaW1hdGlvbic6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZEFuaW1hdGlvbiggaW5kZXggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdjYW1lcmEnOlxuXHRcdFx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRDYW1lcmEoIGluZGV4ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnbGlnaHQnOlxuXHRcdFx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTCBdLmxvYWRMaWdodCggaW5kZXggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Vua25vd24gdHlwZTogJyArIHR5cGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmNhY2hlLmFkZCggY2FjaGVLZXksIGRlcGVuZGVuY3kgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkZXBlbmRlbmN5O1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFJlcXVlc3RzIGFsbCBkZXBlbmRlbmNpZXMgb2YgdGhlIHNwZWNpZmllZCB0eXBlIGFzeW5jaHJvbm91c2x5LCB3aXRoIGNhY2hpbmcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8T2JqZWN0Pj59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5nZXREZXBlbmRlbmNpZXMgPSBmdW5jdGlvbiAoIHR5cGUgKSB7XG5cblx0XHR2YXIgZGVwZW5kZW5jaWVzID0gdGhpcy5jYWNoZS5nZXQoIHR5cGUgKTtcblxuXHRcdGlmICggISBkZXBlbmRlbmNpZXMgKSB7XG5cblx0XHRcdHZhciBwYXJzZXIgPSB0aGlzO1xuXHRcdFx0dmFyIGRlZnMgPSB0aGlzLmpzb25bIHR5cGUgKyAoIHR5cGUgPT09ICdtZXNoJyA/ICdlcycgOiAncycgKSBdIHx8IFtdO1xuXG5cdFx0XHRkZXBlbmRlbmNpZXMgPSBQcm9taXNlLmFsbCggZGVmcy5tYXAoIGZ1bmN0aW9uICggZGVmLCBpbmRleCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcGFyc2VyLmdldERlcGVuZGVuY3koIHR5cGUsIGluZGV4ICk7XG5cblx0XHRcdH0gKSApO1xuXG5cdFx0XHR0aGlzLmNhY2hlLmFkZCggdHlwZSwgZGVwZW5kZW5jaWVzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGVwZW5kZW5jaWVzO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYnVmZmVycy1hbmQtYnVmZmVyLXZpZXdzXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJJbmRleFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRCdWZmZXIgPSBmdW5jdGlvbiAoIGJ1ZmZlckluZGV4ICkge1xuXG5cdFx0dmFyIGJ1ZmZlckRlZiA9IHRoaXMuanNvbi5idWZmZXJzWyBidWZmZXJJbmRleCBdO1xuXHRcdHZhciBsb2FkZXIgPSB0aGlzLmZpbGVMb2FkZXI7XG5cblx0XHRpZiAoIGJ1ZmZlckRlZi50eXBlICYmIGJ1ZmZlckRlZi50eXBlICE9PSAnYXJyYXlidWZmZXInICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiAnICsgYnVmZmVyRGVmLnR5cGUgKyAnIGJ1ZmZlciB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gSWYgcHJlc2VudCwgR0xCIGNvbnRhaW5lciBpcyByZXF1aXJlZCB0byBiZSB0aGUgZmlyc3QgYnVmZmVyLlxuXHRcdGlmICggYnVmZmVyRGVmLnVyaSA9PT0gdW5kZWZpbmVkICYmIGJ1ZmZlckluZGV4ID09PSAwICkge1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGIF0uYm9keSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuXG5cdFx0XHRsb2FkZXIubG9hZCggcmVzb2x2ZVVSTCggYnVmZmVyRGVmLnVyaSwgb3B0aW9ucy5wYXRoICksIHJlc29sdmUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHJlamVjdCggbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogRmFpbGVkIHRvIGxvYWQgYnVmZmVyIFwiJyArIGJ1ZmZlckRlZi51cmkgKyAnXCIuJyApICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2J1ZmZlcnMtYW5kLWJ1ZmZlci12aWV3c1xuXHQgKiBAcGFyYW0ge251bWJlcn0gYnVmZmVyVmlld0luZGV4XG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZEJ1ZmZlclZpZXcgPSBmdW5jdGlvbiAoIGJ1ZmZlclZpZXdJbmRleCApIHtcblxuXHRcdHZhciBidWZmZXJWaWV3RGVmID0gdGhpcy5qc29uLmJ1ZmZlclZpZXdzWyBidWZmZXJWaWV3SW5kZXggXTtcblxuXHRcdHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXInLCBidWZmZXJWaWV3RGVmLmJ1ZmZlciApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHR2YXIgYnl0ZUxlbmd0aCA9IGJ1ZmZlclZpZXdEZWYuYnl0ZUxlbmd0aCB8fCAwO1xuXHRcdFx0dmFyIGJ5dGVPZmZzZXQgPSBidWZmZXJWaWV3RGVmLmJ5dGVPZmZzZXQgfHwgMDtcblx0XHRcdHJldHVybiBidWZmZXIuc2xpY2UoIGJ5dGVPZmZzZXQsIGJ5dGVPZmZzZXQgKyBieXRlTGVuZ3RoICk7XG5cblx0XHR9ICk7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNhY2Nlc3NvcnNcblx0ICogQHBhcmFtIHtudW1iZXJ9IGFjY2Vzc29ySW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZEFjY2Vzc29yID0gZnVuY3Rpb24gKCBhY2Nlc3NvckluZGV4ICkge1xuXG5cdFx0dmFyIHBhcnNlciA9IHRoaXM7XG5cdFx0dmFyIGpzb24gPSB0aGlzLmpzb247XG5cblx0XHR2YXIgYWNjZXNzb3JEZWYgPSB0aGlzLmpzb24uYWNjZXNzb3JzWyBhY2Nlc3NvckluZGV4IF07XG5cblx0XHRpZiAoIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgPT09IHVuZGVmaW5lZCAmJiBhY2Nlc3NvckRlZi5zcGFyc2UgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gSWdub3JlIGVtcHR5IGFjY2Vzc29ycywgd2hpY2ggbWF5IGJlIHVzZWQgdG8gZGVjbGFyZSBydW50aW1lXG5cdFx0XHQvLyBpbmZvcm1hdGlvbiBhYm91dCBhdHRyaWJ1dGVzIGNvbWluZyBmcm9tIGFub3RoZXIgc291cmNlIChlLmcuIERyYWNvXG5cdFx0XHQvLyBjb21wcmVzc2lvbiBleHRlbnNpb24pLlxuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSggbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHBlbmRpbmdCdWZmZXJWaWV3cyA9IFtdO1xuXG5cdFx0aWYgKCBhY2Nlc3NvckRlZi5idWZmZXJWaWV3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuYnVmZmVyVmlldyApICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwZW5kaW5nQnVmZmVyVmlld3MucHVzaCggbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBhY2Nlc3NvckRlZi5zcGFyc2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cGVuZGluZ0J1ZmZlclZpZXdzLnB1c2goIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ2J1ZmZlclZpZXcnLCBhY2Nlc3NvckRlZi5zcGFyc2UuaW5kaWNlcy5idWZmZXJWaWV3ICkgKTtcblx0XHRcdHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuc3BhcnNlLnZhbHVlcy5idWZmZXJWaWV3ICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZ0J1ZmZlclZpZXdzICkudGhlbiggZnVuY3Rpb24gKCBidWZmZXJWaWV3cyApIHtcblxuXHRcdFx0dmFyIGJ1ZmZlclZpZXcgPSBidWZmZXJWaWV3c1sgMCBdO1xuXG5cdFx0XHR2YXIgaXRlbVNpemUgPSBXRUJHTF9UWVBFX1NJWkVTWyBhY2Nlc3NvckRlZi50eXBlIF07XG5cdFx0XHR2YXIgVHlwZWRBcnJheSA9IFdFQkdMX0NPTVBPTkVOVF9UWVBFU1sgYWNjZXNzb3JEZWYuY29tcG9uZW50VHlwZSBdO1xuXG5cdFx0XHQvLyBGb3IgVkVDMzogaXRlbVNpemUgaXMgMywgZWxlbWVudEJ5dGVzIGlzIDQsIGl0ZW1CeXRlcyBpcyAxMi5cblx0XHRcdHZhciBlbGVtZW50Qnl0ZXMgPSBUeXBlZEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xuXHRcdFx0dmFyIGl0ZW1CeXRlcyA9IGVsZW1lbnRCeXRlcyAqIGl0ZW1TaXplO1xuXHRcdFx0dmFyIGJ5dGVPZmZzZXQgPSBhY2Nlc3NvckRlZi5ieXRlT2Zmc2V0IHx8IDA7XG5cdFx0XHR2YXIgYnl0ZVN0cmlkZSA9IGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCA/IGpzb24uYnVmZmVyVmlld3NbIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgXS5ieXRlU3RyaWRlIDogdW5kZWZpbmVkO1xuXHRcdFx0dmFyIG5vcm1hbGl6ZWQgPSBhY2Nlc3NvckRlZi5ub3JtYWxpemVkID09PSB0cnVlO1xuXHRcdFx0dmFyIGFycmF5LCBidWZmZXJBdHRyaWJ1dGU7XG5cblx0XHRcdC8vIFRoZSBidWZmZXIgaXMgbm90IGludGVybGVhdmVkIGlmIHRoZSBzdHJpZGUgaXMgdGhlIGl0ZW0gc2l6ZSBpbiBieXRlcy5cblx0XHRcdGlmICggYnl0ZVN0cmlkZSAmJiBieXRlU3RyaWRlICE9PSBpdGVtQnl0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gRWFjaCBcInNsaWNlXCIgb2YgdGhlIGJ1ZmZlciwgYXMgZGVmaW5lZCBieSAnY291bnQnIGVsZW1lbnRzIG9mICdieXRlU3RyaWRlJyBieXRlcywgZ2V0cyBpdHMgb3duIEludGVybGVhdmVkQnVmZmVyXG5cdFx0XHRcdC8vIFRoaXMgbWFrZXMgc3VyZSB0aGF0IElCQS5jb3VudCByZWZsZWN0cyBhY2Nlc3Nvci5jb3VudCBwcm9wZXJseVxuXHRcdFx0XHR2YXIgaWJTbGljZSA9IE1hdGguZmxvb3IoIGJ5dGVPZmZzZXQgLyBieXRlU3RyaWRlICk7XG5cdFx0XHRcdHZhciBpYkNhY2hlS2V5ID0gJ0ludGVybGVhdmVkQnVmZmVyOicgKyBhY2Nlc3NvckRlZi5idWZmZXJWaWV3ICsgJzonICsgYWNjZXNzb3JEZWYuY29tcG9uZW50VHlwZSArICc6JyArIGliU2xpY2UgKyAnOicgKyBhY2Nlc3NvckRlZi5jb3VudDtcblx0XHRcdFx0dmFyIGliID0gcGFyc2VyLmNhY2hlLmdldCggaWJDYWNoZUtleSApO1xuXG5cdFx0XHRcdGlmICggISBpYiApIHtcblxuXHRcdFx0XHRcdGFycmF5ID0gbmV3IFR5cGVkQXJyYXkoIGJ1ZmZlclZpZXcsIGliU2xpY2UgKiBieXRlU3RyaWRlLCBhY2Nlc3NvckRlZi5jb3VudCAqIGJ5dGVTdHJpZGUgLyBlbGVtZW50Qnl0ZXMgKTtcblxuXHRcdFx0XHRcdC8vIEludGVnZXIgcGFyYW1ldGVycyB0byBJQi9JQkEgYXJlIGluIGFycmF5IGVsZW1lbnRzLCBub3QgYnl0ZXMuXG5cdFx0XHRcdFx0aWIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoIGFycmF5LCBieXRlU3RyaWRlIC8gZWxlbWVudEJ5dGVzICk7XG5cblx0XHRcdFx0XHRwYXJzZXIuY2FjaGUuYWRkKCBpYkNhY2hlS2V5LCBpYiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGliLCBpdGVtU2l6ZSwgKGJ5dGVPZmZzZXQgJSBieXRlU3RyaWRlKSAvIGVsZW1lbnRCeXRlcywgbm9ybWFsaXplZCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggYnVmZmVyVmlldyA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGFycmF5ID0gbmV3IFR5cGVkQXJyYXkoIGFjY2Vzc29yRGVmLmNvdW50ICogaXRlbVNpemUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0YXJyYXkgPSBuZXcgVHlwZWRBcnJheSggYnVmZmVyVmlldywgYnl0ZU9mZnNldCwgYWNjZXNzb3JEZWYuY291bnQgKiBpdGVtU2l6ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI3NwYXJzZS1hY2Nlc3NvcnNcblx0XHRcdGlmICggYWNjZXNzb3JEZWYuc3BhcnNlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIGl0ZW1TaXplSW5kaWNlcyA9IFdFQkdMX1RZUEVfU0laRVMuU0NBTEFSO1xuXHRcdFx0XHR2YXIgVHlwZWRBcnJheUluZGljZXMgPSBXRUJHTF9DT01QT05FTlRfVFlQRVNbIGFjY2Vzc29yRGVmLnNwYXJzZS5pbmRpY2VzLmNvbXBvbmVudFR5cGUgXTtcblxuXHRcdFx0XHR2YXIgYnl0ZU9mZnNldEluZGljZXMgPSBhY2Nlc3NvckRlZi5zcGFyc2UuaW5kaWNlcy5ieXRlT2Zmc2V0IHx8IDA7XG5cdFx0XHRcdHZhciBieXRlT2Zmc2V0VmFsdWVzID0gYWNjZXNzb3JEZWYuc3BhcnNlLnZhbHVlcy5ieXRlT2Zmc2V0IHx8IDA7XG5cblx0XHRcdFx0dmFyIHNwYXJzZUluZGljZXMgPSBuZXcgVHlwZWRBcnJheUluZGljZXMoIGJ1ZmZlclZpZXdzWyAxIF0sIGJ5dGVPZmZzZXRJbmRpY2VzLCBhY2Nlc3NvckRlZi5zcGFyc2UuY291bnQgKiBpdGVtU2l6ZUluZGljZXMgKTtcblx0XHRcdFx0dmFyIHNwYXJzZVZhbHVlcyA9IG5ldyBUeXBlZEFycmF5KCBidWZmZXJWaWV3c1sgMiBdLCBieXRlT2Zmc2V0VmFsdWVzLCBhY2Nlc3NvckRlZi5zcGFyc2UuY291bnQgKiBpdGVtU2l6ZSApO1xuXG5cdFx0XHRcdGlmICggYnVmZmVyVmlldyAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdC8vIEF2b2lkIG1vZGlmeWluZyB0aGUgb3JpZ2luYWwgQXJyYXlCdWZmZXIsIGlmIHRoZSBidWZmZXJWaWV3IHdhc24ndCBpbml0aWFsaXplZCB3aXRoIHplcm9lcy5cblx0XHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUuc2V0QXJyYXkoIGJ1ZmZlckF0dHJpYnV0ZS5hcnJheS5zbGljZSgpICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBzcGFyc2VJbmRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGluZGV4ID0gc3BhcnNlSW5kaWNlc1sgaSBdO1xuXG5cdFx0XHRcdFx0YnVmZmVyQXR0cmlidXRlLnNldFgoIGluZGV4LCBzcGFyc2VWYWx1ZXNbIGkgKiBpdGVtU2l6ZSBdICk7XG5cdFx0XHRcdFx0aWYgKCBpdGVtU2l6ZSA+PSAyICkgYnVmZmVyQXR0cmlidXRlLnNldFkoIGluZGV4LCBzcGFyc2VWYWx1ZXNbIGkgKiBpdGVtU2l6ZSArIDEgXSApO1xuXHRcdFx0XHRcdGlmICggaXRlbVNpemUgPj0gMyApIGJ1ZmZlckF0dHJpYnV0ZS5zZXRaKCBpbmRleCwgc3BhcnNlVmFsdWVzWyBpICogaXRlbVNpemUgKyAyIF0gKTtcblx0XHRcdFx0XHRpZiAoIGl0ZW1TaXplID49IDQgKSBidWZmZXJBdHRyaWJ1dGUuc2V0VyggaW5kZXgsIHNwYXJzZVZhbHVlc1sgaSAqIGl0ZW1TaXplICsgMyBdICk7XG5cdFx0XHRcdFx0aWYgKCBpdGVtU2l6ZSA+PSA1ICkgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogVW5zdXBwb3J0ZWQgaXRlbVNpemUgaW4gc3BhcnNlIEJ1ZmZlckF0dHJpYnV0ZS4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBidWZmZXJBdHRyaWJ1dGU7XG5cblx0XHR9ICk7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI3RleHR1cmVzXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0dXJlSW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5UZXh0dXJlPn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKCB0ZXh0dXJlSW5kZXggKSB7XG5cblx0XHR2YXIgcGFyc2VyID0gdGhpcztcblx0XHR2YXIganNvbiA9IHRoaXMuanNvbjtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblx0XHR2YXIgdGV4dHVyZUxvYWRlciA9IHRoaXMudGV4dHVyZUxvYWRlcjtcblxuXHRcdHZhciBVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7XG5cblx0XHR2YXIgdGV4dHVyZURlZiA9IGpzb24udGV4dHVyZXNbIHRleHR1cmVJbmRleCBdO1xuXG5cdFx0dmFyIHRleHR1cmVFeHRlbnNpb25zID0gdGV4dHVyZURlZi5leHRlbnNpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHNvdXJjZTtcblxuXHRcdGlmICggdGV4dHVyZUV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUyBdICkge1xuXG5cdFx0XHRzb3VyY2UgPSBqc29uLmltYWdlc1sgdGV4dHVyZUV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUyBdLnNvdXJjZSBdO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c291cmNlID0ganNvbi5pbWFnZXNbIHRleHR1cmVEZWYuc291cmNlIF07XG5cblx0XHR9XG5cblx0XHR2YXIgc291cmNlVVJJID0gc291cmNlLnVyaTtcblx0XHR2YXIgaXNPYmplY3RVUkwgPSBmYWxzZTtcblxuXHRcdGlmICggc291cmNlLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gTG9hZCBiaW5hcnkgaW1hZ2UgZGF0YSBmcm9tIGJ1ZmZlclZpZXcsIGlmIHByb3ZpZGVkLlxuXG5cdFx0XHRzb3VyY2VVUkkgPSBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ2J1ZmZlclZpZXcnLCBzb3VyY2UuYnVmZmVyVmlldyApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyVmlldyApIHtcblxuXHRcdFx0XHRpc09iamVjdFVSTCA9IHRydWU7XG5cdFx0XHRcdHZhciBibG9iID0gbmV3IEJsb2IoIFsgYnVmZmVyVmlldyBdLCB7IHR5cGU6IHNvdXJjZS5taW1lVHlwZSB9ICk7XG5cdFx0XHRcdHNvdXJjZVVSSSA9IFVSTC5jcmVhdGVPYmplY3RVUkwoIGJsb2IgKTtcblx0XHRcdFx0cmV0dXJuIHNvdXJjZVVSSTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSggc291cmNlVVJJICkudGhlbiggZnVuY3Rpb24gKCBzb3VyY2VVUkkgKSB7XG5cblx0XHRcdC8vIExvYWQgVGV4dHVyZSByZXNvdXJjZS5cblxuXHRcdFx0dmFyIGxvYWRlciA9IExvYWRlci5IYW5kbGVycy5nZXQoIHNvdXJjZVVSSSApO1xuXG5cdFx0XHRpZiAoICEgbG9hZGVyICkge1xuXG5cdFx0XHRcdGxvYWRlciA9IHRleHR1cmVFeHRlbnNpb25zWyBFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFMgXVxuXHRcdFx0XHRcdD8gcGFyc2VyLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUyBdLmRkc0xvYWRlclxuXHRcdFx0XHRcdDogdGV4dHVyZUxvYWRlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuXG5cdFx0XHRcdGxvYWRlci5sb2FkKCByZXNvbHZlVVJMKCBzb3VyY2VVUkksIG9wdGlvbnMucGF0aCApLCByZXNvbHZlLCB1bmRlZmluZWQsIHJlamVjdCApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCB0ZXh0dXJlICkge1xuXG5cdFx0XHQvLyBDbGVhbiB1cCByZXNvdXJjZXMgYW5kIGNvbmZpZ3VyZSBUZXh0dXJlLlxuXG5cdFx0XHRpZiAoIGlzT2JqZWN0VVJMID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFVSTC5yZXZva2VPYmplY3RVUkwoIHNvdXJjZVVSSSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUuZmxpcFkgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlRGVmLm5hbWUgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubmFtZSA9IHRleHR1cmVEZWYubmFtZTtcblxuXHRcdFx0Ly8gSWdub3JlIHVua25vd24gbWltZSB0eXBlcywgbGlrZSBERFMgZmlsZXMuXG5cdFx0XHRpZiAoIHNvdXJjZS5taW1lVHlwZSBpbiBNSU1FX1RZUEVfRk9STUFUUyApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IE1JTUVfVFlQRV9GT1JNQVRTWyBzb3VyY2UubWltZVR5cGUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2FtcGxlcnMgPSBqc29uLnNhbXBsZXJzIHx8IHt9O1xuXHRcdFx0dmFyIHNhbXBsZXIgPSBzYW1wbGVyc1sgdGV4dHVyZURlZi5zYW1wbGVyIF0gfHwge307XG5cblx0XHRcdHRleHR1cmUubWFnRmlsdGVyID0gV0VCR0xfRklMVEVSU1sgc2FtcGxlci5tYWdGaWx0ZXIgXSB8fCBMaW5lYXJGaWx0ZXI7XG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IFdFQkdMX0ZJTFRFUlNbIHNhbXBsZXIubWluRmlsdGVyIF0gfHwgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyO1xuXHRcdFx0dGV4dHVyZS53cmFwUyA9IFdFQkdMX1dSQVBQSU5HU1sgc2FtcGxlci53cmFwUyBdIHx8IFJlcGVhdFdyYXBwaW5nO1xuXHRcdFx0dGV4dHVyZS53cmFwVCA9IFdFQkdMX1dSQVBQSU5HU1sgc2FtcGxlci53cmFwVCBdIHx8IFJlcGVhdFdyYXBwaW5nO1xuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBBc3luY2hyb25vdXNseSBhc3NpZ25zIGEgdGV4dHVyZSB0byB0aGUgZ2l2ZW4gbWF0ZXJpYWwgcGFyYW1ldGVycy5cblx0ICogQHBhcmFtIHtPYmplY3R9IG1hdGVyaWFsUGFyYW1zXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtYXBOYW1lXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBtYXBEZWZcblx0ICogQHJldHVybiB7UHJvbWlzZX1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmFzc2lnblRleHR1cmUgPSBmdW5jdGlvbiAoIG1hdGVyaWFsUGFyYW1zLCBtYXBOYW1lLCBtYXBEZWYgKSB7XG5cblx0XHR2YXIgcGFyc2VyID0gdGhpcztcblxuXHRcdHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koICd0ZXh0dXJlJywgbWFwRGVmLmluZGV4ICkudGhlbiggZnVuY3Rpb24gKCB0ZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoICEgdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICkge1xuXG5cdFx0XHRcdHN3aXRjaCAoIG1hcE5hbWUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdhb01hcCc6XG5cdFx0XHRcdFx0Y2FzZSAnZW1pc3NpdmVNYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21ldGFsbmVzc01hcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbm9ybWFsTWFwJzpcblx0XHRcdFx0XHRjYXNlICdyb3VnaG5lc3NNYXAnOlxuXHRcdFx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSBSR0JGb3JtYXQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwYXJzZXIuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfVEVYVFVSRV9UUkFOU0ZPUk0gXSApIHtcblxuXHRcdFx0XHR2YXIgdHJhbnNmb3JtID0gbWFwRGVmLmV4dGVuc2lvbnMgIT09IHVuZGVmaW5lZCA/IG1hcERlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STSBdIDogdW5kZWZpbmVkO1xuXG5cdFx0XHRcdGlmICggdHJhbnNmb3JtICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IHBhcnNlci5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STSBdLmV4dGVuZFRleHR1cmUoIHRleHR1cmUsIHRyYW5zZm9ybSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbFBhcmFtc1sgbWFwTmFtZSBdID0gdGV4dHVyZTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBBc3NpZ25zIGZpbmFsIG1hdGVyaWFsIHRvIGEgTWVzaCwgTGluZSwgb3IgUG9pbnRzIGluc3RhbmNlLiBUaGUgaW5zdGFuY2Vcblx0ICogYWxyZWFkeSBoYXMgYSBtYXRlcmlhbCAoZ2VuZXJhdGVkIGZyb20gdGhlIGdsVEYgbWF0ZXJpYWwgb3B0aW9ucyBhbG9uZSlcblx0ICogYnV0IHJldXNlIG9mIHRoZSBzYW1lIGdsVEYgbWF0ZXJpYWwgbWF5IHJlcXVpcmUgbXVsdGlwbGUgdGhyZWVqcyBtYXRlcmlhbHNcblx0ICogdG8gYWNjb21vZGF0ZSBkaWZmZXJlbnQgcHJpbWl0aXZlIHR5cGVzLCBkZWZpbmVzLCBldGMuIE5ldyBtYXRlcmlhbHMgd2lsbFxuXHQgKiBiZSBjcmVhdGVkIGlmIG5lY2Vzc2FyeSwgYW5kIHJldXNlZCBmcm9tIGEgY2FjaGUuXG5cdCAqIEBwYXJhbSAge09iamVjdDNEfSBtZXNoIE1lc2gsIExpbmUsIG9yIFBvaW50cyBpbnN0YW5jZS5cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmFzc2lnbkZpbmFsTWF0ZXJpYWwgPSBmdW5jdGlvbiAoIG1lc2ggKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBtZXNoLmdlb21ldHJ5O1xuXHRcdHZhciBtYXRlcmlhbCA9IG1lc2gubWF0ZXJpYWw7XG5cdFx0dmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG5cblx0XHR2YXIgdXNlVmVydGV4VGFuZ2VudHMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgIT09IHVuZGVmaW5lZDtcblx0XHR2YXIgdXNlVmVydGV4Q29sb3JzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkO1xuXHRcdHZhciB1c2VGbGF0U2hhZGluZyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQ7XG5cdFx0dmFyIHVzZVNraW5uaW5nID0gbWVzaC5pc1NraW5uZWRNZXNoID09PSB0cnVlO1xuXHRcdHZhciB1c2VNb3JwaFRhcmdldHMgPSBPYmplY3Qua2V5cyggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICkubGVuZ3RoID4gMDtcblx0XHR2YXIgdXNlTW9ycGhOb3JtYWxzID0gdXNlTW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZDtcblxuXHRcdGlmICggbWVzaC5pc1BvaW50cyApIHtcblxuXHRcdFx0dmFyIGNhY2hlS2V5ID0gJ1BvaW50c01hdGVyaWFsOicgKyBtYXRlcmlhbC51dWlkO1xuXG5cdFx0XHR2YXIgcG9pbnRzTWF0ZXJpYWwgPSB0aGlzLmNhY2hlLmdldCggY2FjaGVLZXkgKTtcblxuXHRcdFx0aWYgKCAhIHBvaW50c01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHBvaW50c01hdGVyaWFsID0gbmV3IFBvaW50c01hdGVyaWFsKCk7XG5cdFx0XHRcdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHBvaW50c01hdGVyaWFsLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRwb2ludHNNYXRlcmlhbC5jb2xvci5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdFx0XHRwb2ludHNNYXRlcmlhbC5tYXAgPSBtYXRlcmlhbC5tYXA7XG5cdFx0XHRcdHBvaW50c01hdGVyaWFsLmxpZ2h0cyA9IGZhbHNlOyAvLyBQb2ludHNNYXRlcmlhbCBkb2Vzbid0IHN1cHBvcnQgbGlnaHRzIHlldFxuXG5cdFx0XHRcdHRoaXMuY2FjaGUuYWRkKCBjYWNoZUtleSwgcG9pbnRzTWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbCA9IHBvaW50c01hdGVyaWFsO1xuXG5cdFx0fSBlbHNlIGlmICggbWVzaC5pc0xpbmUgKSB7XG5cblx0XHRcdHZhciBjYWNoZUtleSA9ICdMaW5lQmFzaWNNYXRlcmlhbDonICsgbWF0ZXJpYWwudXVpZDtcblxuXHRcdFx0dmFyIGxpbmVNYXRlcmlhbCA9IHRoaXMuY2FjaGUuZ2V0KCBjYWNoZUtleSApO1xuXG5cdFx0XHRpZiAoICEgbGluZU1hdGVyaWFsICkge1xuXG5cdFx0XHRcdGxpbmVNYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCgpO1xuXHRcdFx0XHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCBsaW5lTWF0ZXJpYWwsIG1hdGVyaWFsICk7XG5cdFx0XHRcdGxpbmVNYXRlcmlhbC5jb2xvci5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdFx0XHRsaW5lTWF0ZXJpYWwubGlnaHRzID0gZmFsc2U7IC8vIExpbmVCYXNpY01hdGVyaWFsIGRvZXNuJ3Qgc3VwcG9ydCBsaWdodHMgeWV0XG5cblx0XHRcdFx0dGhpcy5jYWNoZS5hZGQoIGNhY2hlS2V5LCBsaW5lTWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbCA9IGxpbmVNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdC8vIENsb25lIHRoZSBtYXRlcmlhbCBpZiBpdCB3aWxsIGJlIG1vZGlmaWVkXG5cdFx0aWYgKCB1c2VWZXJ0ZXhUYW5nZW50cyB8fCB1c2VWZXJ0ZXhDb2xvcnMgfHwgdXNlRmxhdFNoYWRpbmcgfHwgdXNlU2tpbm5pbmcgfHwgdXNlTW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHR2YXIgY2FjaGVLZXkgPSAnQ2xvbmVkTWF0ZXJpYWw6JyArIG1hdGVyaWFsLnV1aWQgKyAnOic7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgKSBjYWNoZUtleSArPSAnc3BlY3VsYXItZ2xvc3NpbmVzczonO1xuXHRcdFx0aWYgKCB1c2VTa2lubmluZyApIGNhY2hlS2V5ICs9ICdza2lubmluZzonO1xuXHRcdFx0aWYgKCB1c2VWZXJ0ZXhUYW5nZW50cyApIGNhY2hlS2V5ICs9ICd2ZXJ0ZXgtdGFuZ2VudHM6Jztcblx0XHRcdGlmICggdXNlVmVydGV4Q29sb3JzICkgY2FjaGVLZXkgKz0gJ3ZlcnRleC1jb2xvcnM6Jztcblx0XHRcdGlmICggdXNlRmxhdFNoYWRpbmcgKSBjYWNoZUtleSArPSAnZmxhdC1zaGFkaW5nOic7XG5cdFx0XHRpZiAoIHVzZU1vcnBoVGFyZ2V0cyApIGNhY2hlS2V5ICs9ICdtb3JwaC10YXJnZXRzOic7XG5cdFx0XHRpZiAoIHVzZU1vcnBoTm9ybWFscyApIGNhY2hlS2V5ICs9ICdtb3JwaC1ub3JtYWxzOic7XG5cblx0XHRcdHZhciBjYWNoZWRNYXRlcmlhbCA9IHRoaXMuY2FjaGUuZ2V0KCBjYWNoZUtleSApO1xuXG5cdFx0XHRpZiAoICEgY2FjaGVkTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0Y2FjaGVkTWF0ZXJpYWwgPSBtYXRlcmlhbC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbFxuXHRcdFx0XHRcdD8gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF0uY2xvbmVNYXRlcmlhbCggbWF0ZXJpYWwgKVxuXHRcdFx0XHRcdDogbWF0ZXJpYWwuY2xvbmUoKTtcblxuXHRcdFx0XHRpZiAoIHVzZVNraW5uaW5nICkgY2FjaGVkTWF0ZXJpYWwuc2tpbm5pbmcgPSB0cnVlO1xuXHRcdFx0XHRpZiAoIHVzZVZlcnRleFRhbmdlbnRzICkgY2FjaGVkTWF0ZXJpYWwudmVydGV4VGFuZ2VudHMgPSB0cnVlO1xuXHRcdFx0XHRpZiAoIHVzZVZlcnRleENvbG9ycyApIGNhY2hlZE1hdGVyaWFsLnZlcnRleENvbG9ycyA9IFZlcnRleENvbG9ycztcblx0XHRcdFx0aWYgKCB1c2VGbGF0U2hhZGluZyApIGNhY2hlZE1hdGVyaWFsLmZsYXRTaGFkaW5nID0gdHJ1ZTtcblx0XHRcdFx0aWYgKCB1c2VNb3JwaFRhcmdldHMgKSBjYWNoZWRNYXRlcmlhbC5tb3JwaFRhcmdldHMgPSB0cnVlO1xuXHRcdFx0XHRpZiAoIHVzZU1vcnBoTm9ybWFscyApIGNhY2hlZE1hdGVyaWFsLm1vcnBoTm9ybWFscyA9IHRydWU7XG5cblx0XHRcdFx0dGhpcy5jYWNoZS5hZGQoIGNhY2hlS2V5LCBjYWNoZWRNYXRlcmlhbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFsID0gY2FjaGVkTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHQvLyB3b3JrYXJvdW5kcyBmb3IgbWVzaCBhbmQgZ2VvbWV0cnlcblxuXHRcdGlmICggbWF0ZXJpYWwuYW9NYXAgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy51djIgPT09IHVuZGVmaW5lZCAmJiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuR0xURkxvYWRlcjogRHVwbGljYXRpbmcgVVZzIHRvIHN1cHBvcnQgYW9NYXAuJyApO1xuXHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAndXYyJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy51di5hcnJheSwgMiApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsICkge1xuXG5cdFx0XHQvLyBmb3IgR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsKFNoYWRlck1hdGVyaWFsKSB1bmlmb3JtcyBydW50aW1lIHVwZGF0ZVxuXHRcdFx0bWVzaC5vbkJlZm9yZVJlbmRlciA9IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyBdLnJlZnJlc2hVbmlmb3JtcztcblxuXHRcdH1cblxuXHRcdG1lc2gubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI21hdGVyaWFsc1xuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF0ZXJpYWxJbmRleFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPE1hdGVyaWFsPn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRNYXRlcmlhbCA9IGZ1bmN0aW9uICggbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdHZhciBwYXJzZXIgPSB0aGlzO1xuXHRcdHZhciBqc29uID0gdGhpcy5qc29uO1xuXHRcdHZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zO1xuXHRcdHZhciBtYXRlcmlhbERlZiA9IGpzb24ubWF0ZXJpYWxzWyBtYXRlcmlhbEluZGV4IF07XG5cblx0XHR2YXIgbWF0ZXJpYWxUeXBlO1xuXHRcdHZhciBtYXRlcmlhbFBhcmFtcyA9IHt9O1xuXHRcdHZhciBtYXRlcmlhbEV4dGVuc2lvbnMgPSBtYXRlcmlhbERlZi5leHRlbnNpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHBlbmRpbmcgPSBbXTtcblxuXHRcdGlmICggbWF0ZXJpYWxFeHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXSApIHtcblxuXHRcdFx0dmFyIHNnRXh0ZW5zaW9uID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF07XG5cdFx0XHRtYXRlcmlhbFR5cGUgPSBzZ0V4dGVuc2lvbi5nZXRNYXRlcmlhbFR5cGUoKTtcblx0XHRcdHBlbmRpbmcucHVzaCggc2dFeHRlbnNpb24uZXh0ZW5kUGFyYW1zKCBtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlciApICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbEV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19VTkxJVCBdICkge1xuXG5cdFx0XHR2YXIga211RXh0ZW5zaW9uID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUIF07XG5cdFx0XHRtYXRlcmlhbFR5cGUgPSBrbXVFeHRlbnNpb24uZ2V0TWF0ZXJpYWxUeXBlKCk7XG5cdFx0XHRwZW5kaW5nLnB1c2goIGttdUV4dGVuc2lvbi5leHRlbmRQYXJhbXMoIG1hdGVyaWFsUGFyYW1zLCBtYXRlcmlhbERlZiwgcGFyc2VyICkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFNwZWNpZmljYXRpb246XG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjbWV0YWxsaWMtcm91Z2huZXNzLW1hdGVyaWFsXG5cblx0XHRcdG1hdGVyaWFsVHlwZSA9IE1lc2hTdGFuZGFyZE1hdGVyaWFsO1xuXG5cdFx0XHR2YXIgbWV0YWxsaWNSb3VnaG5lc3MgPSBtYXRlcmlhbERlZi5wYnJNZXRhbGxpY1JvdWdobmVzcyB8fCB7fTtcblxuXHRcdFx0bWF0ZXJpYWxQYXJhbXMuY29sb3IgPSBuZXcgQ29sb3IoIDEuMCwgMS4wLCAxLjAgKTtcblx0XHRcdG1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSAxLjA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yICkgKSB7XG5cblx0XHRcdFx0dmFyIGFycmF5ID0gbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yO1xuXG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLmNvbG9yLmZyb21BcnJheSggYXJyYXkgKTtcblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IGFycmF5WyAzIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdtYXAnLCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JUZXh0dXJlICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbFBhcmFtcy5tZXRhbG5lc3MgPSBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY0ZhY3RvciAhPT0gdW5kZWZpbmVkID8gbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNGYWN0b3IgOiAxLjA7XG5cdFx0XHRtYXRlcmlhbFBhcmFtcy5yb3VnaG5lc3MgPSBtZXRhbGxpY1JvdWdobmVzcy5yb3VnaG5lc3NGYWN0b3IgIT09IHVuZGVmaW5lZCA/IG1ldGFsbGljUm91Z2huZXNzLnJvdWdobmVzc0ZhY3RvciA6IDEuMDtcblxuXHRcdFx0aWYgKCBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ21ldGFsbmVzc01hcCcsIG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSApICk7XG5cdFx0XHRcdHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAncm91Z2huZXNzTWFwJywgbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbERlZi5kb3VibGVTaWRlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxQYXJhbXMuc2lkZSA9IERvdWJsZVNpZGU7XG5cblx0XHR9XG5cblx0XHR2YXIgYWxwaGFNb2RlID0gbWF0ZXJpYWxEZWYuYWxwaGFNb2RlIHx8IEFMUEhBX01PREVTLk9QQVFVRTtcblxuXHRcdGlmICggYWxwaGFNb2RlID09PSBBTFBIQV9NT0RFUy5CTEVORCApIHtcblxuXHRcdFx0bWF0ZXJpYWxQYXJhbXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWF0ZXJpYWxQYXJhbXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBhbHBoYU1vZGUgPT09IEFMUEhBX01PREVTLk1BU0sgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMuYWxwaGFUZXN0ID0gbWF0ZXJpYWxEZWYuYWxwaGFDdXRvZmYgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsRGVmLmFscGhhQ3V0b2ZmIDogMC41O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IE1lc2hCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ25vcm1hbE1hcCcsIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUgKSApO1xuXG5cdFx0XHRtYXRlcmlhbFBhcmFtcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZS5zY2FsZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLm5vcm1hbFNjYWxlLnNldCggbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZS5zY2FsZSwgbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZS5zY2FsZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IE1lc2hCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ2FvTWFwJywgbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZSApICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZS5zdHJlbmd0aCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLmFvTWFwSW50ZW5zaXR5ID0gbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZS5zdHJlbmd0aDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbERlZi5lbWlzc2l2ZUZhY3RvciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsVHlwZSAhPT0gTWVzaEJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdG1hdGVyaWFsUGFyYW1zLmVtaXNzaXZlID0gbmV3IENvbG9yKCkuZnJvbUFycmF5KCBtYXRlcmlhbERlZi5lbWlzc2l2ZUZhY3RvciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbERlZi5lbWlzc2l2ZVRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IE1lc2hCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ2VtaXNzaXZlTWFwJywgbWF0ZXJpYWxEZWYuZW1pc3NpdmVUZXh0dXJlICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApLnRoZW4oIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIG1hdGVyaWFsO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsVHlwZSA9PT0gU2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwgPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXS5jcmVhdGVNYXRlcmlhbCggbWF0ZXJpYWxQYXJhbXMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRtYXRlcmlhbCA9IG5ldyBtYXRlcmlhbFR5cGUoIG1hdGVyaWFsUGFyYW1zICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbERlZi5uYW1lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5uYW1lID0gbWF0ZXJpYWxEZWYubmFtZTtcblxuXHRcdFx0Ly8gYmFzZUNvbG9yVGV4dHVyZSwgZW1pc3NpdmVUZXh0dXJlLCBhbmQgc3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZSB1c2Ugc1JHQiBlbmNvZGluZy5cblx0XHRcdGlmICggbWF0ZXJpYWwubWFwICkgbWF0ZXJpYWwubWFwLmVuY29kaW5nID0gc1JHQkVuY29kaW5nO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIG1hdGVyaWFsLmVtaXNzaXZlTWFwLmVuY29kaW5nID0gc1JHQkVuY29kaW5nO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zcGVjdWxhck1hcCApIG1hdGVyaWFsLnNwZWN1bGFyTWFwLmVuY29kaW5nID0gc1JHQkVuY29kaW5nO1xuXG5cdFx0XHRhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBtYXRlcmlhbCwgbWF0ZXJpYWxEZWYgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbERlZi5leHRlbnNpb25zICkgYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKCBleHRlbnNpb25zLCBtYXRlcmlhbCwgbWF0ZXJpYWxEZWYgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGVyaWFsO1xuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5XG5cdCAqIEBwYXJhbSB7R0xURi5QcmltaXRpdmV9IHByaW1pdGl2ZURlZlxuXHQgKiBAcGFyYW0ge0dMVEZQYXJzZXJ9IHBhcnNlclxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPEJ1ZmZlckdlb21ldHJ5Pn1cblx0ICovXG5cdGZ1bmN0aW9uIGFkZFByaW1pdGl2ZUF0dHJpYnV0ZXMoIGdlb21ldHJ5LCBwcmltaXRpdmVEZWYsIHBhcnNlciApIHtcblxuXHRcdHZhciBhdHRyaWJ1dGVzID0gcHJpbWl0aXZlRGVmLmF0dHJpYnV0ZXM7XG5cblx0XHR2YXIgcGVuZGluZyA9IFtdO1xuXG5cdFx0ZnVuY3Rpb24gYXNzaWduQXR0cmlidXRlQWNjZXNzb3IoIGFjY2Vzc29ySW5kZXgsIGF0dHJpYnV0ZU5hbWUgKSB7XG5cblx0XHRcdHJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ2FjY2Vzc29yJywgYWNjZXNzb3JJbmRleCApXG5cdFx0XHRcdC50aGVuKCBmdW5jdGlvbiAoIGFjY2Vzc29yICkge1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lLCBhY2Nlc3NvciApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBnbHRmQXR0cmlidXRlTmFtZSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgdGhyZWVBdHRyaWJ1dGVOYW1lID0gQVRUUklCVVRFU1sgZ2x0ZkF0dHJpYnV0ZU5hbWUgXSB8fCBnbHRmQXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHQvLyBTa2lwIGF0dHJpYnV0ZXMgYWxyZWFkeSBwcm92aWRlZCBieSBlLmcuIERyYWNvIGV4dGVuc2lvbi5cblx0XHRcdGlmICggdGhyZWVBdHRyaWJ1dGVOYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMgKSBjb250aW51ZTtcblxuXHRcdFx0cGVuZGluZy5wdXNoKCBhc3NpZ25BdHRyaWJ1dGVBY2Nlc3NvciggYXR0cmlidXRlc1sgZ2x0ZkF0dHJpYnV0ZU5hbWUgXSwgdGhyZWVBdHRyaWJ1dGVOYW1lICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggcHJpbWl0aXZlRGVmLmluZGljZXMgIT09IHVuZGVmaW5lZCAmJiAhIGdlb21ldHJ5LmluZGV4ICkge1xuXG5cdFx0XHR2YXIgYWNjZXNzb3IgPSBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ2FjY2Vzc29yJywgcHJpbWl0aXZlRGVmLmluZGljZXMgKS50aGVuKCBmdW5jdGlvbiAoIGFjY2Vzc29yICkge1xuXG5cdFx0XHRcdGdlb21ldHJ5LnNldEluZGV4KCBhY2Nlc3NvciApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHBlbmRpbmcucHVzaCggYWNjZXNzb3IgKTtcblxuXHRcdH1cblxuXHRcdGFzc2lnbkV4dHJhc1RvVXNlckRhdGEoIGdlb21ldHJ5LCBwcmltaXRpdmVEZWYgKTtcblxuXHRcdHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApLnRoZW4oIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHByaW1pdGl2ZURlZi50YXJnZXRzICE9PSB1bmRlZmluZWRcblx0XHRcdFx0PyBhZGRNb3JwaFRhcmdldHMoIGdlb21ldHJ5LCBwcmltaXRpdmVEZWYudGFyZ2V0cywgcGFyc2VyIClcblx0XHRcdFx0OiBnZW9tZXRyeTtcblxuXHRcdH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjZ2VvbWV0cnlcblx0ICpcblx0ICogQ3JlYXRlcyBCdWZmZXJHZW9tZXRyaWVzIGZyb20gcHJpbWl0aXZlcy5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxHTFRGLlByaW1pdGl2ZT59IHByaW1pdGl2ZXNcblx0ICogQHJldHVybiB7UHJvbWlzZTxBcnJheTxCdWZmZXJHZW9tZXRyeT4+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZEdlb21ldHJpZXMgPSBmdW5jdGlvbiAoIHByaW1pdGl2ZXMgKSB7XG5cblx0XHR2YXIgcGFyc2VyID0gdGhpcztcblx0XHR2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcblx0XHR2YXIgY2FjaGUgPSB0aGlzLnByaW1pdGl2ZUNhY2hlO1xuXG5cdFx0ZnVuY3Rpb24gY3JlYXRlRHJhY29QcmltaXRpdmUoIHByaW1pdGl2ZSApIHtcblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT04gXVxuXHRcdFx0XHQuZGVjb2RlUHJpbWl0aXZlKCBwcmltaXRpdmUsIHBhcnNlciApXG5cdFx0XHRcdC50aGVuKCBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGFkZFByaW1pdGl2ZUF0dHJpYnV0ZXMoIGdlb21ldHJ5LCBwcmltaXRpdmUsIHBhcnNlciApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHZhciBwZW5kaW5nID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gcHJpbWl0aXZlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHByaW1pdGl2ZSA9IHByaW1pdGl2ZXNbIGkgXTtcblx0XHRcdHZhciBjYWNoZUtleSA9IGNyZWF0ZVByaW1pdGl2ZUtleSggcHJpbWl0aXZlICk7XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgdGhpcyBnZW9tZXRyeVxuXHRcdFx0dmFyIGNhY2hlZCA9IGNhY2hlWyBjYWNoZUtleSBdO1xuXG5cdFx0XHRpZiAoIGNhY2hlZCApIHtcblxuXHRcdFx0XHQvLyBVc2UgdGhlIGNhY2hlZCBnZW9tZXRyeSBpZiBpdCBleGlzdHNcblx0XHRcdFx0cGVuZGluZy5wdXNoKCBjYWNoZWQucHJvbWlzZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciBnZW9tZXRyeVByb21pc2U7XG5cblx0XHRcdFx0aWYgKCBwcmltaXRpdmUuZXh0ZW5zaW9ucyAmJiBwcmltaXRpdmUuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTiBdICkge1xuXG5cdFx0XHRcdFx0Ly8gVXNlIERSQUNPIGdlb21ldHJ5IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdGdlb21ldHJ5UHJvbWlzZSA9IGNyZWF0ZURyYWNvUHJpbWl0aXZlKCBwcmltaXRpdmUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBnZW9tZXRyeVxuXHRcdFx0XHRcdGdlb21ldHJ5UHJvbWlzZSA9IGFkZFByaW1pdGl2ZUF0dHJpYnV0ZXMoIG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBwcmltaXRpdmUsIHBhcnNlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWNoZSB0aGlzIGdlb21ldHJ5XG5cdFx0XHRcdGNhY2hlWyBjYWNoZUtleSBdID0geyBwcmltaXRpdmU6IHByaW1pdGl2ZSwgcHJvbWlzZTogZ2VvbWV0cnlQcm9taXNlIH07XG5cblx0XHRcdFx0cGVuZGluZy5wdXNoKCBnZW9tZXRyeVByb21pc2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nICk7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtZXNoZXNcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1lc2hJbmRleFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPEdyb3VwfE1lc2h8U2tpbm5lZE1lc2g+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZE1lc2ggPSBmdW5jdGlvbiAoIG1lc2hJbmRleCApIHtcblxuXHRcdHZhciBwYXJzZXIgPSB0aGlzO1xuXHRcdHZhciBqc29uID0gdGhpcy5qc29uO1xuXG5cdFx0dmFyIG1lc2hEZWYgPSBqc29uLm1lc2hlc1sgbWVzaEluZGV4IF07XG5cdFx0dmFyIHByaW1pdGl2ZXMgPSBtZXNoRGVmLnByaW1pdGl2ZXM7XG5cblx0XHR2YXIgcGVuZGluZyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHByaW1pdGl2ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBtYXRlcmlhbCA9IHByaW1pdGl2ZXNbIGkgXS5tYXRlcmlhbCA9PT0gdW5kZWZpbmVkXG5cdFx0XHRcdD8gY3JlYXRlRGVmYXVsdE1hdGVyaWFsKClcblx0XHRcdFx0OiB0aGlzLmdldERlcGVuZGVuY3koICdtYXRlcmlhbCcsIHByaW1pdGl2ZXNbIGkgXS5tYXRlcmlhbCApO1xuXG5cdFx0XHRwZW5kaW5nLnB1c2goIG1hdGVyaWFsICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKS50aGVuKCBmdW5jdGlvbiAoIG9yaWdpbmFsTWF0ZXJpYWxzICkge1xuXG5cdFx0XHRyZXR1cm4gcGFyc2VyLmxvYWRHZW9tZXRyaWVzKCBwcmltaXRpdmVzICkudGhlbiggZnVuY3Rpb24gKCBnZW9tZXRyaWVzICkge1xuXG5cdFx0XHRcdHZhciBtZXNoZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gZ2VvbWV0cmllcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBnZW9tZXRyeSA9IGdlb21ldHJpZXNbIGkgXTtcblx0XHRcdFx0XHR2YXIgcHJpbWl0aXZlID0gcHJpbWl0aXZlc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gMS4gY3JlYXRlIE1lc2hcblxuXHRcdFx0XHRcdHZhciBtZXNoO1xuXG5cdFx0XHRcdFx0dmFyIG1hdGVyaWFsID0gb3JpZ2luYWxNYXRlcmlhbHNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRVMgfHxcblx0XHRcdFx0XHRcdHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfU1RSSVAgfHxcblx0XHRcdFx0XHRcdHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfRkFOIHx8XG5cdFx0XHRcdFx0XHRwcmltaXRpdmUubW9kZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHQvLyAuaXNTa2lubmVkTWVzaCBpc24ndCBpbiBnbFRGIHNwZWMuIFNlZSAubWFya0RlZnMoKVxuXHRcdFx0XHRcdFx0bWVzaCA9IG1lc2hEZWYuaXNTa2lubmVkTWVzaCA9PT0gdHJ1ZVxuXHRcdFx0XHRcdFx0XHQ/IG5ldyBTa2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsIClcblx0XHRcdFx0XHRcdFx0OiBuZXcgTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHRcdGlmICggbWVzaC5pc1NraW5uZWRNZXNoID09PSB0cnVlICYmICEgbWVzaC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnNraW5XZWlnaHQubm9ybWFsaXplZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyB3ZSBub3JtYWxpemUgZmxvYXRpbmcgcG9pbnQgc2tpbiB3ZWlnaHQgYXJyYXkgdG8gZml4IG1hbGZvcm1lZCBhc3NldHMgKHNlZSAjMTUzMTkpXG5cdFx0XHRcdFx0XHRcdC8vIGl0J3MgaW1wb3J0YW50IHRvIHNraXAgdGhpcyBmb3Igbm9uLWZsb2F0MzIgZGF0YSBzaW5jZSBub3JtYWxpemVTa2luV2VpZ2h0cyBhc3N1bWVzIG5vbi1ub3JtYWxpemVkIGlucHV0c1xuXHRcdFx0XHRcdFx0XHRtZXNoLm5vcm1hbGl6ZVNraW5XZWlnaHRzKCk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX1NUUklQICkge1xuXG5cdFx0XHRcdFx0XHRcdG1lc2guZHJhd01vZGUgPSBUcmlhbmdsZVN0cmlwRHJhd01vZGU7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfRkFOICkge1xuXG5cdFx0XHRcdFx0XHRcdG1lc2guZHJhd01vZGUgPSBUcmlhbmdsZUZhbkRyYXdNb2RlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVTICkge1xuXG5cdFx0XHRcdFx0XHRtZXNoID0gbmV3IExpbmVTZWdtZW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVfU1RSSVAgKSB7XG5cblx0XHRcdFx0XHRcdG1lc2ggPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVfTE9PUCApIHtcblxuXHRcdFx0XHRcdFx0bWVzaCA9IG5ldyBMaW5lTG9vcCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlBPSU5UUyApIHtcblxuXHRcdFx0XHRcdFx0bWVzaCA9IG5ldyBQb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogUHJpbWl0aXZlIG1vZGUgdW5zdXBwb3J0ZWQ6ICcgKyBwcmltaXRpdmUubW9kZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBPYmplY3Qua2V5cyggbWVzaC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgKS5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdFx0XHR1cGRhdGVNb3JwaFRhcmdldHMoIG1lc2gsIG1lc2hEZWYgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1lc2gubmFtZSA9IG1lc2hEZWYubmFtZSB8fCAoICdtZXNoXycgKyBtZXNoSW5kZXggKTtcblxuXHRcdFx0XHRcdGlmICggZ2VvbWV0cmllcy5sZW5ndGggPiAxICkgbWVzaC5uYW1lICs9ICdfJyArIGk7XG5cblx0XHRcdFx0XHRhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBtZXNoLCBtZXNoRGVmICk7XG5cblx0XHRcdFx0XHRwYXJzZXIuYXNzaWduRmluYWxNYXRlcmlhbCggbWVzaCApO1xuXG5cdFx0XHRcdFx0bWVzaGVzLnB1c2goIG1lc2ggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBtZXNoZXMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG1lc2hlc1sgMCBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgZ3JvdXAgPSBuZXcgR3JvdXAoKTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbWVzaGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Z3JvdXAuYWRkKCBtZXNoZXNbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZ3JvdXA7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjY2FtZXJhc1xuXHQgKiBAcGFyYW0ge251bWJlcn0gY2FtZXJhSW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5DYW1lcmE+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZENhbWVyYSA9IGZ1bmN0aW9uICggY2FtZXJhSW5kZXggKSB7XG5cblx0XHR2YXIgY2FtZXJhO1xuXHRcdHZhciBjYW1lcmFEZWYgPSB0aGlzLmpzb24uY2FtZXJhc1sgY2FtZXJhSW5kZXggXTtcblx0XHR2YXIgcGFyYW1zID0gY2FtZXJhRGVmWyBjYW1lcmFEZWYudHlwZSBdO1xuXG5cdFx0aWYgKCAhIHBhcmFtcyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogTWlzc2luZyBjYW1lcmEgcGFyYW1ldGVycy4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIGNhbWVyYURlZi50eXBlID09PSAncGVyc3BlY3RpdmUnICkge1xuXG5cdFx0XHRjYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIF9NYXRoLnJhZFRvRGVnKCBwYXJhbXMueWZvdiApLCBwYXJhbXMuYXNwZWN0UmF0aW8gfHwgMSwgcGFyYW1zLnpuZWFyIHx8IDEsIHBhcmFtcy56ZmFyIHx8IDJlNiApO1xuXG5cdFx0fSBlbHNlIGlmICggY2FtZXJhRGVmLnR5cGUgPT09ICdvcnRob2dyYXBoaWMnICkge1xuXG5cdFx0XHRjYW1lcmEgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCBwYXJhbXMueG1hZyAvIC0gMiwgcGFyYW1zLnhtYWcgLyAyLCBwYXJhbXMueW1hZyAvIDIsIHBhcmFtcy55bWFnIC8gLSAyLCBwYXJhbXMuem5lYXIsIHBhcmFtcy56ZmFyICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNhbWVyYURlZi5uYW1lICE9PSB1bmRlZmluZWQgKSBjYW1lcmEubmFtZSA9IGNhbWVyYURlZi5uYW1lO1xuXG5cdFx0YXNzaWduRXh0cmFzVG9Vc2VyRGF0YSggY2FtZXJhLCBjYW1lcmFEZWYgKTtcblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoIGNhbWVyYSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNza2luc1xuXHQgKiBAcGFyYW0ge251bWJlcn0gc2tpbkluZGV4XG5cdCAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRTa2luID0gZnVuY3Rpb24gKCBza2luSW5kZXggKSB7XG5cblx0XHR2YXIgc2tpbkRlZiA9IHRoaXMuanNvbi5za2luc1sgc2tpbkluZGV4IF07XG5cblx0XHR2YXIgc2tpbkVudHJ5ID0geyBqb2ludHM6IHNraW5EZWYuam9pbnRzIH07XG5cblx0XHRpZiAoIHNraW5EZWYuaW52ZXJzZUJpbmRNYXRyaWNlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBza2luRW50cnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIHNraW5EZWYuaW52ZXJzZUJpbmRNYXRyaWNlcyApLnRoZW4oIGZ1bmN0aW9uICggYWNjZXNzb3IgKSB7XG5cblx0XHRcdHNraW5FbnRyeS5pbnZlcnNlQmluZE1hdHJpY2VzID0gYWNjZXNzb3I7XG5cblx0XHRcdHJldHVybiBza2luRW50cnk7XG5cblx0XHR9ICk7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI2FuaW1hdGlvbnNcblx0ICogQHBhcmFtIHtudW1iZXJ9IGFuaW1hdGlvbkluZGV4XG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QW5pbWF0aW9uQ2xpcD59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQW5pbWF0aW9uID0gZnVuY3Rpb24gKCBhbmltYXRpb25JbmRleCApIHtcblxuXHRcdHZhciBqc29uID0gdGhpcy5qc29uO1xuXG5cdFx0dmFyIGFuaW1hdGlvbkRlZiA9IGpzb24uYW5pbWF0aW9uc1sgYW5pbWF0aW9uSW5kZXggXTtcblxuXHRcdHZhciBwZW5kaW5nTm9kZXMgPSBbXTtcblx0XHR2YXIgcGVuZGluZ0lucHV0QWNjZXNzb3JzID0gW107XG5cdFx0dmFyIHBlbmRpbmdPdXRwdXRBY2Nlc3NvcnMgPSBbXTtcblx0XHR2YXIgcGVuZGluZ1NhbXBsZXJzID0gW107XG5cdFx0dmFyIHBlbmRpbmdUYXJnZXRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gYW5pbWF0aW9uRGVmLmNoYW5uZWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY2hhbm5lbCA9IGFuaW1hdGlvbkRlZi5jaGFubmVsc1sgaSBdO1xuXHRcdFx0dmFyIHNhbXBsZXIgPSBhbmltYXRpb25EZWYuc2FtcGxlcnNbIGNoYW5uZWwuc2FtcGxlciBdO1xuXHRcdFx0dmFyIHRhcmdldCA9IGNoYW5uZWwudGFyZ2V0O1xuXHRcdFx0dmFyIG5hbWUgPSB0YXJnZXQubm9kZSAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0Lm5vZGUgOiB0YXJnZXQuaWQ7IC8vIE5PVEU6IHRhcmdldC5pZCBpcyBkZXByZWNhdGVkLlxuXHRcdFx0dmFyIGlucHV0ID0gYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCA/IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzWyBzYW1wbGVyLmlucHV0IF0gOiBzYW1wbGVyLmlucHV0O1xuXHRcdFx0dmFyIG91dHB1dCA9IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgPyBhbmltYXRpb25EZWYucGFyYW1ldGVyc1sgc2FtcGxlci5vdXRwdXQgXSA6IHNhbXBsZXIub3V0cHV0O1xuXG5cdFx0XHRwZW5kaW5nTm9kZXMucHVzaCggdGhpcy5nZXREZXBlbmRlbmN5KCAnbm9kZScsIG5hbWUgKSApO1xuXHRcdFx0cGVuZGluZ0lucHV0QWNjZXNzb3JzLnB1c2goIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ2FjY2Vzc29yJywgaW5wdXQgKSApO1xuXHRcdFx0cGVuZGluZ091dHB1dEFjY2Vzc29ycy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIG91dHB1dCApICk7XG5cdFx0XHRwZW5kaW5nU2FtcGxlcnMucHVzaCggc2FtcGxlciApO1xuXHRcdFx0cGVuZGluZ1RhcmdldHMucHVzaCggdGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIFtcblxuXHRcdFx0UHJvbWlzZS5hbGwoIHBlbmRpbmdOb2RlcyApLFxuXHRcdFx0UHJvbWlzZS5hbGwoIHBlbmRpbmdJbnB1dEFjY2Vzc29ycyApLFxuXHRcdFx0UHJvbWlzZS5hbGwoIHBlbmRpbmdPdXRwdXRBY2Nlc3NvcnMgKSxcblx0XHRcdFByb21pc2UuYWxsKCBwZW5kaW5nU2FtcGxlcnMgKSxcblx0XHRcdFByb21pc2UuYWxsKCBwZW5kaW5nVGFyZ2V0cyApXG5cblx0XHRdICkudGhlbiggZnVuY3Rpb24gKCBkZXBlbmRlbmNpZXMgKSB7XG5cblx0XHRcdHZhciBub2RlcyA9IGRlcGVuZGVuY2llc1sgMCBdO1xuXHRcdFx0dmFyIGlucHV0QWNjZXNzb3JzID0gZGVwZW5kZW5jaWVzWyAxIF07XG5cdFx0XHR2YXIgb3V0cHV0QWNjZXNzb3JzID0gZGVwZW5kZW5jaWVzWyAyIF07XG5cdFx0XHR2YXIgc2FtcGxlcnMgPSBkZXBlbmRlbmNpZXNbIDMgXTtcblx0XHRcdHZhciB0YXJnZXRzID0gZGVwZW5kZW5jaWVzWyA0IF07XG5cblx0XHRcdHZhciB0cmFja3MgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBub2RlID0gbm9kZXNbIGkgXTtcblx0XHRcdFx0dmFyIGlucHV0QWNjZXNzb3IgPSBpbnB1dEFjY2Vzc29yc1sgaSBdO1xuXHRcdFx0XHR2YXIgb3V0cHV0QWNjZXNzb3IgPSBvdXRwdXRBY2Nlc3NvcnNbIGkgXTtcblx0XHRcdFx0dmFyIHNhbXBsZXIgPSBzYW1wbGVyc1sgaSBdO1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gdGFyZ2V0c1sgaSBdO1xuXG5cdFx0XHRcdGlmICggbm9kZSA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRcdFx0bm9kZS51cGRhdGVNYXRyaXgoKTtcblx0XHRcdFx0bm9kZS5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR2YXIgVHlwZWRLZXlmcmFtZVRyYWNrO1xuXG5cdFx0XHRcdHN3aXRjaCAoIFBBVEhfUFJPUEVSVElFU1sgdGFyZ2V0LnBhdGggXSApIHtcblxuXHRcdFx0XHRcdGNhc2UgUEFUSF9QUk9QRVJUSUVTLndlaWdodHM6XG5cblx0XHRcdFx0XHRcdFR5cGVkS2V5ZnJhbWVUcmFjayA9IE51bWJlcktleWZyYW1lVHJhY2s7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgUEFUSF9QUk9QRVJUSUVTLnJvdGF0aW9uOlxuXG5cdFx0XHRcdFx0XHRUeXBlZEtleWZyYW1lVHJhY2sgPSBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBQQVRIX1BST1BFUlRJRVMucG9zaXRpb246XG5cdFx0XHRcdFx0Y2FzZSBQQVRIX1BST1BFUlRJRVMuc2NhbGU6XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0VHlwZWRLZXlmcmFtZVRyYWNrID0gVmVjdG9yS2V5ZnJhbWVUcmFjaztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdGFyZ2V0TmFtZSA9IG5vZGUubmFtZSA/IG5vZGUubmFtZSA6IG5vZGUudXVpZDtcblxuXHRcdFx0XHR2YXIgaW50ZXJwb2xhdGlvbiA9IHNhbXBsZXIuaW50ZXJwb2xhdGlvbiAhPT0gdW5kZWZpbmVkID8gSU5URVJQT0xBVElPTlsgc2FtcGxlci5pbnRlcnBvbGF0aW9uIF0gOiBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuXHRcdFx0XHR2YXIgdGFyZ2V0TmFtZXMgPSBbXTtcblxuXHRcdFx0XHRpZiAoIFBBVEhfUFJPUEVSVElFU1sgdGFyZ2V0LnBhdGggXSA9PT0gUEFUSF9QUk9QRVJUSUVTLndlaWdodHMgKSB7XG5cblx0XHRcdFx0XHQvLyBOb2RlIG1heSBiZSBhIEdyb3VwIChnbFRGIG1lc2ggd2l0aCBzZXZlcmFsIHByaW1pdGl2ZXMpIG9yIGEgTWVzaC5cblx0XHRcdFx0XHRub2RlLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBvYmplY3QuaXNNZXNoID09PSB0cnVlICYmIG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXMgKSB7XG5cblx0XHRcdFx0XHRcdFx0dGFyZ2V0TmFtZXMucHVzaCggb2JqZWN0Lm5hbWUgPyBvYmplY3QubmFtZSA6IG9iamVjdC51dWlkICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGFyZ2V0TmFtZXMucHVzaCggdGFyZ2V0TmFtZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgb3V0cHV0QXJyYXkgPSBvdXRwdXRBY2Nlc3Nvci5hcnJheTtcblxuXHRcdFx0XHRpZiAoIG91dHB1dEFjY2Vzc29yLm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdFx0XHR2YXIgc2NhbGU7XG5cblx0XHRcdFx0XHRpZiAoIG91dHB1dEFycmF5LmNvbnN0cnVjdG9yID09PSBJbnQ4QXJyYXkgKSB7XG5cblx0XHRcdFx0XHRcdHNjYWxlID0gMSAvIDEyNztcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG91dHB1dEFycmF5LmNvbnN0cnVjdG9yID09PSBVaW50OEFycmF5ICkge1xuXG5cdFx0XHRcdFx0XHRzY2FsZSA9IDEgLyAyNTU7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBvdXRwdXRBcnJheS5jb25zdHJ1Y3RvciA9PSBJbnQxNkFycmF5ICkge1xuXG5cdFx0XHRcdFx0XHRzY2FsZSA9IDEgLyAzMjc2NztcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG91dHB1dEFycmF5LmNvbnN0cnVjdG9yID09PSBVaW50MTZBcnJheSApIHtcblxuXHRcdFx0XHRcdFx0c2NhbGUgPSAxIC8gNjU1MzU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBvdXRwdXQgYWNjZXNzb3IgY29tcG9uZW50IHR5cGUuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHNjYWxlZCA9IG5ldyBGbG9hdDMyQXJyYXkoIG91dHB1dEFycmF5Lmxlbmd0aCApO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IG91dHB1dEFycmF5Lmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRzY2FsZWRbIGogXSA9IG91dHB1dEFycmF5WyBqIF0gKiBzY2FsZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dEFycmF5ID0gc2NhbGVkO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gdGFyZ2V0TmFtZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgdHJhY2sgPSBuZXcgVHlwZWRLZXlmcmFtZVRyYWNrKFxuXHRcdFx0XHRcdFx0dGFyZ2V0TmFtZXNbIGogXSArICcuJyArIFBBVEhfUFJPUEVSVElFU1sgdGFyZ2V0LnBhdGggXSxcblx0XHRcdFx0XHRcdGlucHV0QWNjZXNzb3IuYXJyYXksXG5cdFx0XHRcdFx0XHRvdXRwdXRBcnJheSxcblx0XHRcdFx0XHRcdGludGVycG9sYXRpb25cblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0Ly8gT3ZlcnJpZGUgaW50ZXJwb2xhdGlvbiB3aXRoIGN1c3RvbSBmYWN0b3J5IG1ldGhvZC5cblx0XHRcdFx0XHRpZiAoIHNhbXBsZXIuaW50ZXJwb2xhdGlvbiA9PT0gJ0NVQklDU1BMSU5FJyApIHtcblxuXHRcdFx0XHRcdFx0dHJhY2suY3JlYXRlSW50ZXJwb2xhbnQgPSBmdW5jdGlvbiBJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUoIHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIENVQklDU1BMSU5FIGtleWZyYW1lIGluIGdsVEYgaGFzIHRocmVlIG91dHB1dCB2YWx1ZXMgZm9yIGVhY2ggaW5wdXQgdmFsdWUsXG5cdFx0XHRcdFx0XHRcdC8vIHJlcHJlc2VudGluZyBpblRhbmdlbnQsIHNwbGluZVZlcnRleCwgYW5kIG91dFRhbmdlbnQuIEFzIGEgcmVzdWx0LCB0cmFjay5nZXRWYWx1ZVNpemUoKVxuXHRcdFx0XHRcdFx0XHQvLyBtdXN0IGJlIGRpdmlkZWQgYnkgdGhyZWUgdG8gZ2V0IHRoZSBpbnRlcnBvbGFudCdzIHNhbXBsZVNpemUgYXJndW1lbnQuXG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIG5ldyBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCkgLyAzLCByZXN1bHQgKTtcblxuXHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0Ly8gTWFyayBhcyBDVUJJQ1NQTElORS4gYHRyYWNrLmdldEludGVycG9sYXRpb24oKWAgZG9lc24ndCBzdXBwb3J0IGN1c3RvbSBpbnRlcnBvbGFudHMuXG5cdFx0XHRcdFx0XHR0cmFjay5jcmVhdGVJbnRlcnBvbGFudC5pc0ludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZSA9IHRydWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0cmFja3MucHVzaCggdHJhY2sgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG5hbWUgPSBhbmltYXRpb25EZWYubmFtZSAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uRGVmLm5hbWUgOiAnYW5pbWF0aW9uXycgKyBhbmltYXRpb25JbmRleDtcblxuXHRcdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKCBuYW1lLCB1bmRlZmluZWQsIHRyYWNrcyApO1xuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNub2Rlcy1hbmQtaGllcmFyY2h5XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBub2RlSW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxPYmplY3QzRD59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkTm9kZSA9IGZ1bmN0aW9uICggbm9kZUluZGV4ICkge1xuXG5cdFx0dmFyIGpzb24gPSB0aGlzLmpzb247XG5cdFx0dmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG5cdFx0dmFyIHBhcnNlciA9IHRoaXM7XG5cblx0XHR2YXIgbWVzaFJlZmVyZW5jZXMgPSBqc29uLm1lc2hSZWZlcmVuY2VzO1xuXHRcdHZhciBtZXNoVXNlcyA9IGpzb24ubWVzaFVzZXM7XG5cblx0XHR2YXIgbm9kZURlZiA9IGpzb24ubm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0cmV0dXJuICggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgcGVuZGluZyA9IFtdO1xuXG5cdFx0XHRpZiAoIG5vZGVEZWYubWVzaCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHBlbmRpbmcucHVzaCggcGFyc2VyLmdldERlcGVuZGVuY3koICdtZXNoJywgbm9kZURlZi5tZXNoICkudGhlbiggZnVuY3Rpb24gKCBtZXNoICkge1xuXG5cdFx0XHRcdFx0dmFyIG5vZGU7XG5cblx0XHRcdFx0XHRpZiAoIG1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSA+IDEgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBpbnN0YW5jZU51bSA9IG1lc2hVc2VzWyBub2RlRGVmLm1lc2ggXSArKztcblxuXHRcdFx0XHRcdFx0bm9kZSA9IG1lc2guY2xvbmUoKTtcblx0XHRcdFx0XHRcdG5vZGUubmFtZSArPSAnX2luc3RhbmNlXycgKyBpbnN0YW5jZU51bTtcblxuXHRcdFx0XHRcdFx0Ly8gb25CZWZvcmVSZW5kZXIgY29weSBmb3IgU3BlY3VsYXItR2xvc3NpbmVzc1xuXHRcdFx0XHRcdFx0bm9kZS5vbkJlZm9yZVJlbmRlciA9IG1lc2gub25CZWZvcmVSZW5kZXI7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdG5vZGUuY2hpbGRyZW5bIGkgXS5uYW1lICs9ICdfaW5zdGFuY2VfJyArIGluc3RhbmNlTnVtO1xuXHRcdFx0XHRcdFx0XHRub2RlLmNoaWxkcmVuWyBpIF0ub25CZWZvcmVSZW5kZXIgPSBtZXNoLmNoaWxkcmVuWyBpIF0ub25CZWZvcmVSZW5kZXI7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdG5vZGUgPSBtZXNoO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gaWYgd2VpZ2h0cyBhcmUgcHJvdmlkZWQgb24gdGhlIG5vZGUsIG92ZXJyaWRlIHdlaWdodHMgb24gdGhlIG1lc2guXG5cdFx0XHRcdFx0aWYgKCBub2RlRGVmLndlaWdodHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0bm9kZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggISBvLmlzTWVzaCApIHJldHVybjtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbm9kZURlZi53ZWlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0by5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSA9IG5vZGVEZWYud2VpZ2h0c1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cblx0XHRcdFx0fSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBub2RlRGVmLmNhbWVyYSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHBlbmRpbmcucHVzaCggcGFyc2VyLmdldERlcGVuZGVuY3koICdjYW1lcmEnLCBub2RlRGVmLmNhbWVyYSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBub2RlRGVmLmV4dGVuc2lvbnNcblx0XHRcdFx0JiYgbm9kZURlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUwgXVxuXHRcdFx0XHQmJiBub2RlRGVmLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTCBdLmxpZ2h0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cGVuZGluZy5wdXNoKCBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ2xpZ2h0Jywgbm9kZURlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUwgXS5saWdodCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nICk7XG5cblx0XHR9KCkgKS50aGVuKCBmdW5jdGlvbiAoIG9iamVjdHMgKSB7XG5cblx0XHRcdHZhciBub2RlO1xuXG5cdFx0XHQvLyAuaXNCb25lIGlzbid0IGluIGdsVEYgc3BlYy4gU2VlIC5tYXJrRGVmc1xuXHRcdFx0aWYgKCBub2RlRGVmLmlzQm9uZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRub2RlID0gbmV3IEJvbmUoKTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdG5vZGUgPSBuZXcgR3JvdXAoKTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0cy5sZW5ndGggPT09IDEgKSB7XG5cblx0XHRcdFx0bm9kZSA9IG9iamVjdHNbIDAgXTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRub2RlID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBub2RlICE9PSBvYmplY3RzWyAwIF0gKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG9iamVjdHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRub2RlLmFkZCggb2JqZWN0c1sgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbm9kZURlZi5uYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bm9kZS51c2VyRGF0YS5uYW1lID0gbm9kZURlZi5uYW1lO1xuXHRcdFx0XHRub2RlLm5hbWUgPSBQcm9wZXJ0eUJpbmRpbmcuc2FuaXRpemVOb2RlTmFtZSggbm9kZURlZi5uYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXNzaWduRXh0cmFzVG9Vc2VyRGF0YSggbm9kZSwgbm9kZURlZiApO1xuXG5cdFx0XHRpZiAoIG5vZGVEZWYuZXh0ZW5zaW9ucyApIGFkZFVua25vd25FeHRlbnNpb25zVG9Vc2VyRGF0YSggZXh0ZW5zaW9ucywgbm9kZSwgbm9kZURlZiApO1xuXG5cdFx0XHRpZiAoIG5vZGVEZWYubWF0cml4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0XHRcdG1hdHJpeC5mcm9tQXJyYXkoIG5vZGVEZWYubWF0cml4ICk7XG5cdFx0XHRcdG5vZGUuYXBwbHlNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggbm9kZURlZi50cmFuc2xhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bm9kZS5wb3NpdGlvbi5mcm9tQXJyYXkoIG5vZGVEZWYudHJhbnNsYXRpb24gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBub2RlRGVmLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRub2RlLnF1YXRlcm5pb24uZnJvbUFycmF5KCBub2RlRGVmLnJvdGF0aW9uICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbm9kZURlZi5zY2FsZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bm9kZS5zY2FsZS5mcm9tQXJyYXkoIG5vZGVEZWYuc2NhbGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5vZGU7XG5cblx0XHR9ICk7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI3NjZW5lc1xuXHQgKiBAcGFyYW0ge251bWJlcn0gc2NlbmVJbmRleFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPFNjZW5lPn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRTY2VuZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHNjZW5lIG5vZGUgaGllcmFjaHkgYnVpbGRlclxuXG5cdFx0ZnVuY3Rpb24gYnVpbGROb2RlSGllcmFjaHkoIG5vZGVJZCwgcGFyZW50T2JqZWN0LCBqc29uLCBwYXJzZXIgKSB7XG5cblx0XHRcdHZhciBub2RlRGVmID0ganNvbi5ub2Rlc1sgbm9kZUlkIF07XG5cblx0XHRcdHJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ25vZGUnLCBub2RlSWQgKS50aGVuKCBmdW5jdGlvbiAoIG5vZGUgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlRGVmLnNraW4gPT09IHVuZGVmaW5lZCApIHJldHVybiBub2RlO1xuXG5cdFx0XHRcdC8vIGJ1aWxkIHNrZWxldG9uIGhlcmUgYXMgd2VsbFxuXG5cdFx0XHRcdHZhciBza2luRW50cnk7XG5cblx0XHRcdFx0cmV0dXJuIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnc2tpbicsIG5vZGVEZWYuc2tpbiApLnRoZW4oIGZ1bmN0aW9uICggc2tpbiApIHtcblxuXHRcdFx0XHRcdHNraW5FbnRyeSA9IHNraW47XG5cblx0XHRcdFx0XHR2YXIgcGVuZGluZ0pvaW50cyA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHNraW5FbnRyeS5qb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHBlbmRpbmdKb2ludHMucHVzaCggcGFyc2VyLmdldERlcGVuZGVuY3koICdub2RlJywgc2tpbkVudHJ5LmpvaW50c1sgaSBdICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZ0pvaW50cyApO1xuXG5cdFx0XHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIGpvaW50Tm9kZXMgKSB7XG5cblx0XHRcdFx0XHRub2RlLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG1lc2ggKSB7XG5cblx0XHRcdFx0XHRcdGlmICggISBtZXNoLmlzTWVzaCApIHJldHVybjtcblxuXHRcdFx0XHRcdFx0dmFyIGJvbmVzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgYm9uZUludmVyc2VzID0gW107XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBqb2ludE5vZGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBqb2ludE5vZGUgPSBqb2ludE5vZGVzWyBqIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBqb2ludE5vZGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRib25lcy5wdXNoKCBqb2ludE5vZGUgKTtcblxuXHRcdFx0XHRcdFx0XHRcdHZhciBtYXQgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRtYXQuZnJvbUFycmF5KCBza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcy5hcnJheSwgaiAqIDE2ICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRib25lSW52ZXJzZXMucHVzaCggbWF0ICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6IEpvaW50IFwiJXNcIiBjb3VsZCBub3QgYmUgZm91bmQuJywgc2tpbkVudHJ5LmpvaW50c1sgaiBdICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG1lc2guYmluZCggbmV3IFNrZWxldG9uKCBib25lcywgYm9uZUludmVyc2VzICksIG1lc2gubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdHJldHVybiBub2RlO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fSApLnRoZW4oIGZ1bmN0aW9uICggbm9kZSApIHtcblxuXHRcdFx0XHQvLyBidWlsZCBub2RlIGhpZXJhY2h5XG5cblx0XHRcdFx0cGFyZW50T2JqZWN0LmFkZCggbm9kZSApO1xuXG5cdFx0XHRcdHZhciBwZW5kaW5nID0gW107XG5cblx0XHRcdFx0aWYgKCBub2RlRGVmLmNoaWxkcmVuICkge1xuXG5cdFx0XHRcdFx0dmFyIGNoaWxkcmVuID0gbm9kZURlZi5jaGlsZHJlbjtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGNoaWxkID0gY2hpbGRyZW5bIGkgXTtcblx0XHRcdFx0XHRcdHBlbmRpbmcucHVzaCggYnVpbGROb2RlSGllcmFjaHkoIGNoaWxkLCBub2RlLCBqc29uLCBwYXJzZXIgKSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxvYWRTY2VuZSggc2NlbmVJbmRleCApIHtcblxuXHRcdFx0dmFyIGpzb24gPSB0aGlzLmpzb247XG5cdFx0XHR2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcblx0XHRcdHZhciBzY2VuZURlZiA9IHRoaXMuanNvbi5zY2VuZXNbIHNjZW5lSW5kZXggXTtcblx0XHRcdHZhciBwYXJzZXIgPSB0aGlzO1xuXG5cdFx0XHR2YXIgc2NlbmUgPSBuZXcgU2NlbmUoKTtcblx0XHRcdGlmICggc2NlbmVEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgc2NlbmUubmFtZSA9IHNjZW5lRGVmLm5hbWU7XG5cblx0XHRcdGFzc2lnbkV4dHJhc1RvVXNlckRhdGEoIHNjZW5lLCBzY2VuZURlZiApO1xuXG5cdFx0XHRpZiAoIHNjZW5lRGVmLmV4dGVuc2lvbnMgKSBhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoIGV4dGVuc2lvbnMsIHNjZW5lLCBzY2VuZURlZiApO1xuXG5cdFx0XHR2YXIgbm9kZUlkcyA9IHNjZW5lRGVmLm5vZGVzIHx8IFtdO1xuXG5cdFx0XHR2YXIgcGVuZGluZyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbm9kZUlkcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRwZW5kaW5nLnB1c2goIGJ1aWxkTm9kZUhpZXJhY2h5KCBub2RlSWRzWyBpIF0sIHNjZW5lLCBqc29uLCBwYXJzZXIgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApLnRoZW4oIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRyZXR1cm4gc2NlbmU7XG5cblx0XHRcdH0gKTtcblxuXHRcdH07XG5cblx0fSgpO1xuXG5cdHJldHVybiBHTFRGTG9hZGVyO1xuXG59ICkoKTtcblxuZXhwb3J0IHsgR0xURkxvYWRlciB9O1xuIiwiLyoqXG4gKiBAYXV0aG9yIGpib3VueSAvIGh0dHBzOi8vZ2l0aHViLmNvbS9qYm91bnlcbiAqXG4gKiBXb3JrIGJhc2VkIG9uIDpcbiAqIEBhdXRob3IgU2xheXZpbiAvIGh0dHA6Ly9zbGF5dmluLm5ldCA6IEZsYXQgbWlycm9yIGZvciB0aHJlZS5qc1xuICogQGF1dGhvciBTdGVta29za2kgLyBodHRwOi8vd3d3LmFkZWxwaGkuZWR1L35zdGVta29za2kgOiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB3YXRlciBzaGFkZXIgYmFzZWQgb24gdGhlIGZsYXQgbWlycm9yXG4gKiBAYXV0aG9yIEpvbmFzIFdhZ25lciAvIGh0dHA6Ly8yOWEuY2gvICYmIGh0dHA6Ly8yOWEuY2gvc2xpZGVzLzIwMTIvd2ViZ2x3YXRlci8gOiBXYXRlciBzaGFkZXIgZXhwbGFuYXRpb25zIGluIFdlYkdMXG4gKi9cblxuaW1wb3J0IHtcblx0Q29sb3IsXG5cdEZyb250U2lkZSxcblx0TGluZWFyRmlsdGVyLFxuXHRNYXRoIGFzIF9NYXRoLFxuXHRNYXRyaXg0LFxuXHRNZXNoLFxuXHRQZXJzcGVjdGl2ZUNhbWVyYSxcblx0UGxhbmUsXG5cdFJHQkZvcm1hdCxcblx0U2hhZGVyQ2h1bmssXG5cdFNoYWRlck1hdGVyaWFsLFxuXHRVbmlmb3Jtc0xpYixcblx0VW5pZm9ybXNVdGlscyxcblx0VmVjdG9yMyxcblx0VmVjdG9yNCxcblx0V2ViR0xSZW5kZXJUYXJnZXRcbn0gZnJvbSBcIi4vdGhyZWUubW9kdWxlLmpzXCI7XG5cbnZhciBXYXRlciA9IGZ1bmN0aW9uICggZ2VvbWV0cnksIG9wdGlvbnMgKSB7XG5cblx0TWVzaC5jYWxsKCB0aGlzLCBnZW9tZXRyeSApO1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0dmFyIHRleHR1cmVXaWR0aCA9IG9wdGlvbnMudGV4dHVyZVdpZHRoICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnRleHR1cmVXaWR0aCA6IDUxMjtcblx0dmFyIHRleHR1cmVIZWlnaHQgPSBvcHRpb25zLnRleHR1cmVIZWlnaHQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudGV4dHVyZUhlaWdodCA6IDUxMjtcblxuXHR2YXIgY2xpcEJpYXMgPSBvcHRpb25zLmNsaXBCaWFzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsaXBCaWFzIDogMC4wO1xuXHR2YXIgYWxwaGEgPSBvcHRpb25zLmFscGhhICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmFscGhhIDogMS4wO1xuXHR2YXIgdGltZSA9IG9wdGlvbnMudGltZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50aW1lIDogMC4wO1xuXHR2YXIgbm9ybWFsU2FtcGxlciA9IG9wdGlvbnMud2F0ZXJOb3JtYWxzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLndhdGVyTm9ybWFscyA6IG51bGw7XG5cdHZhciBzdW5EaXJlY3Rpb24gPSBvcHRpb25zLnN1bkRpcmVjdGlvbiAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zdW5EaXJlY3Rpb24gOiBuZXcgVmVjdG9yMyggMC43MDcwNywgMC43MDcwNywgMC4wICk7XG5cdHZhciBzdW5Db2xvciA9IG5ldyBDb2xvciggb3B0aW9ucy5zdW5Db2xvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zdW5Db2xvciA6IDB4ZmZmZmZmICk7XG5cdHZhciB3YXRlckNvbG9yID0gbmV3IENvbG9yKCBvcHRpb25zLndhdGVyQ29sb3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMud2F0ZXJDb2xvciA6IDB4N0Y3RjdGICk7XG5cdHZhciBleWUgPSBvcHRpb25zLmV5ZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5leWUgOiBuZXcgVmVjdG9yMyggMCwgMCwgMCApO1xuXHR2YXIgZGlzdG9ydGlvblNjYWxlID0gb3B0aW9ucy5kaXN0b3J0aW9uU2NhbGUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGlzdG9ydGlvblNjYWxlIDogMjAuMDtcblx0dmFyIHNpZGUgPSBvcHRpb25zLnNpZGUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc2lkZSA6IEZyb250U2lkZTtcblx0dmFyIGZvZyA9IG9wdGlvbnMuZm9nICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvZyA6IGZhbHNlO1xuXG5cdC8vXG5cblx0dmFyIG1pcnJvclBsYW5lID0gbmV3IFBsYW5lKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbWlycm9yV29ybGRQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBjYW1lcmFXb3JsZFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHJvdGF0aW9uTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0dmFyIGxvb2tBdFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApO1xuXHR2YXIgY2xpcFBsYW5lID0gbmV3IFZlY3RvcjQoKTtcblxuXHR2YXIgdmlldyA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgcSA9IG5ldyBWZWN0b3I0KCk7XG5cblx0dmFyIHRleHR1cmVNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdHZhciBtaXJyb3JDYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblxuXHR2YXIgcGFyYW1ldGVycyA9IHtcblx0XHRtaW5GaWx0ZXI6IExpbmVhckZpbHRlcixcblx0XHRtYWdGaWx0ZXI6IExpbmVhckZpbHRlcixcblx0XHRmb3JtYXQ6IFJHQkZvcm1hdCxcblx0XHRzdGVuY2lsQnVmZmVyOiBmYWxzZVxuXHR9O1xuXG5cdHZhciByZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIHRleHR1cmVXaWR0aCwgdGV4dHVyZUhlaWdodCwgcGFyYW1ldGVycyApO1xuXG5cdGlmICggISBfTWF0aC5pc1Bvd2VyT2ZUd28oIHRleHR1cmVXaWR0aCApIHx8ICEgX01hdGguaXNQb3dlck9mVHdvKCB0ZXh0dXJlSGVpZ2h0ICkgKSB7XG5cblx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHR9XG5cblx0dmFyIG1pcnJvclNoYWRlciA9IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYlsgJ2ZvZycgXSxcblx0XHRcdFVuaWZvcm1zTGliWyAnbGlnaHRzJyBdLFxuXHRcdFx0e1xuXHRcdFx0XHRcIm5vcm1hbFNhbXBsZXJcIjogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0XHRcIm1pcnJvclNhbXBsZXJcIjogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0XHRcImFscGhhXCI6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdFx0XHRcInRpbWVcIjogeyB2YWx1ZTogMC4wIH0sXG5cdFx0XHRcdFwic2l6ZVwiOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRcdFx0XCJkaXN0b3J0aW9uU2NhbGVcIjogeyB2YWx1ZTogMjAuMCB9LFxuXHRcdFx0XHRcInRleHR1cmVNYXRyaXhcIjogeyB2YWx1ZTogbmV3IE1hdHJpeDQoKSB9LFxuXHRcdFx0XHRcInN1bkNvbG9yXCI6IHsgdmFsdWU6IG5ldyBDb2xvciggMHg3RjdGN0YgKSB9LFxuXHRcdFx0XHRcInN1bkRpcmVjdGlvblwiOiB7IHZhbHVlOiBuZXcgVmVjdG9yMyggMC43MDcwNywgMC43MDcwNywgMCApIH0sXG5cdFx0XHRcdFwiZXllXCI6IHsgdmFsdWU6IG5ldyBWZWN0b3IzKCkgfSxcblx0XHRcdFx0XCJ3YXRlckNvbG9yXCI6IHsgdmFsdWU6IG5ldyBDb2xvciggMHg1NTU1NTUgKSB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBbXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHRleHR1cmVNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIGZsb2F0IHRpbWU7JyxcblxuXHRcdFx0J3ZhcnlpbmcgdmVjNCBtaXJyb3JDb29yZDsnLFxuXHRcdFx0J3ZhcnlpbmcgdmVjNCB3b3JsZFBvc2l0aW9uOycsXG5cblx0XHRcdFNoYWRlckNodW5rWyAnZm9nX3BhcnNfdmVydGV4JyBdLFxuXHRcdFx0U2hhZGVyQ2h1bmtbICdzaGFkb3dtYXBfcGFyc192ZXJ0ZXgnIF0sXG5cblx0XHRcdCd2b2lkIG1haW4oKSB7Jyxcblx0XHRcdCdcdG1pcnJvckNvb3JkID0gbW9kZWxNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7Jyxcblx0XHRcdCdcdHdvcmxkUG9zaXRpb24gPSBtaXJyb3JDb29yZC54eXp3OycsXG5cdFx0XHQnXHRtaXJyb3JDb29yZCA9IHRleHR1cmVNYXRyaXggKiBtaXJyb3JDb29yZDsnLFxuXHRcdFx0J1x0dmVjNCBtdlBvc2l0aW9uID0gIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTsnLFxuXHRcdFx0J1x0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjsnLFxuXG5cdFx0XHRTaGFkZXJDaHVua1sgJ2ZvZ192ZXJ0ZXgnIF0sXG5cdFx0XHRTaGFkZXJDaHVua1sgJ3NoYWRvd21hcF92ZXJ0ZXgnIF0sXG5cblx0XHRcdCd9J1xuXHRcdF0uam9pbiggJ1xcbicgKSxcblxuXHRcdGZyYWdtZW50U2hhZGVyOiBbXG5cdFx0XHQndW5pZm9ybSBzYW1wbGVyMkQgbWlycm9yU2FtcGxlcjsnLFxuXHRcdFx0J3VuaWZvcm0gZmxvYXQgYWxwaGE7Jyxcblx0XHRcdCd1bmlmb3JtIGZsb2F0IHRpbWU7Jyxcblx0XHRcdCd1bmlmb3JtIGZsb2F0IHNpemU7Jyxcblx0XHRcdCd1bmlmb3JtIGZsb2F0IGRpc3RvcnRpb25TY2FsZTsnLFxuXHRcdFx0J3VuaWZvcm0gc2FtcGxlcjJEIG5vcm1hbFNhbXBsZXI7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgc3VuQ29sb3I7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgc3VuRGlyZWN0aW9uOycsXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGV5ZTsnLFxuXHRcdFx0J3VuaWZvcm0gdmVjMyB3YXRlckNvbG9yOycsXG5cblx0XHRcdCd2YXJ5aW5nIHZlYzQgbWlycm9yQ29vcmQ7Jyxcblx0XHRcdCd2YXJ5aW5nIHZlYzQgd29ybGRQb3NpdGlvbjsnLFxuXG5cdFx0XHQndmVjNCBnZXROb2lzZSggdmVjMiB1diApIHsnLFxuXHRcdFx0J1x0dmVjMiB1djAgPSAoIHV2IC8gMTAzLjAgKSArIHZlYzIodGltZSAvIDE3LjAsIHRpbWUgLyAyOS4wKTsnLFxuXHRcdFx0J1x0dmVjMiB1djEgPSB1diAvIDEwNy4wLXZlYzIoIHRpbWUgLyAtMTkuMCwgdGltZSAvIDMxLjAgKTsnLFxuXHRcdFx0J1x0dmVjMiB1djIgPSB1diAvIHZlYzIoIDg5MDcuMCwgOTgwMy4wICkgKyB2ZWMyKCB0aW1lIC8gMTAxLjAsIHRpbWUgLyA5Ny4wICk7Jyxcblx0XHRcdCdcdHZlYzIgdXYzID0gdXYgLyB2ZWMyKCAxMDkxLjAsIDEwMjcuMCApIC0gdmVjMiggdGltZSAvIDEwOS4wLCB0aW1lIC8gLTExMy4wICk7Jyxcblx0XHRcdCdcdHZlYzQgbm9pc2UgPSB0ZXh0dXJlMkQoIG5vcm1hbFNhbXBsZXIsIHV2MCApICsnLFxuXHRcdFx0J1x0XHR0ZXh0dXJlMkQoIG5vcm1hbFNhbXBsZXIsIHV2MSApICsnLFxuXHRcdFx0J1x0XHR0ZXh0dXJlMkQoIG5vcm1hbFNhbXBsZXIsIHV2MiApICsnLFxuXHRcdFx0J1x0XHR0ZXh0dXJlMkQoIG5vcm1hbFNhbXBsZXIsIHV2MyApOycsXG5cdFx0XHQnXHRyZXR1cm4gbm9pc2UgKiAwLjUgLSAxLjA7Jyxcblx0XHRcdCd9JyxcblxuXHRcdFx0J3ZvaWQgc3VuTGlnaHQoIGNvbnN0IHZlYzMgc3VyZmFjZU5vcm1hbCwgY29uc3QgdmVjMyBleWVEaXJlY3Rpb24sIGZsb2F0IHNoaW55LCBmbG9hdCBzcGVjLCBmbG9hdCBkaWZmdXNlLCBpbm91dCB2ZWMzIGRpZmZ1c2VDb2xvciwgaW5vdXQgdmVjMyBzcGVjdWxhckNvbG9yICkgeycsXG5cdFx0XHQnXHR2ZWMzIHJlZmxlY3Rpb24gPSBub3JtYWxpemUoIHJlZmxlY3QoIC1zdW5EaXJlY3Rpb24sIHN1cmZhY2VOb3JtYWwgKSApOycsXG5cdFx0XHQnXHRmbG9hdCBkaXJlY3Rpb24gPSBtYXgoIDAuMCwgZG90KCBleWVEaXJlY3Rpb24sIHJlZmxlY3Rpb24gKSApOycsXG5cdFx0XHQnXHRzcGVjdWxhckNvbG9yICs9IHBvdyggZGlyZWN0aW9uLCBzaGlueSApICogc3VuQ29sb3IgKiBzcGVjOycsXG5cdFx0XHQnXHRkaWZmdXNlQ29sb3IgKz0gbWF4KCBkb3QoIHN1bkRpcmVjdGlvbiwgc3VyZmFjZU5vcm1hbCApLCAwLjAgKSAqIHN1bkNvbG9yICogZGlmZnVzZTsnLFxuXHRcdFx0J30nLFxuXG5cdFx0XHRTaGFkZXJDaHVua1sgJ2NvbW1vbicgXSxcblx0XHRcdFNoYWRlckNodW5rWyAncGFja2luZycgXSxcblx0XHRcdFNoYWRlckNodW5rWyAnYnNkZnMnIF0sXG5cdFx0XHRTaGFkZXJDaHVua1sgJ2ZvZ19wYXJzX2ZyYWdtZW50JyBdLFxuXHRcdFx0U2hhZGVyQ2h1bmtbICdsaWdodHNfcGFyc19iZWdpbicgXSxcblx0XHRcdFNoYWRlckNodW5rWyAnc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQnIF0sXG5cdFx0XHRTaGFkZXJDaHVua1sgJ3NoYWRvd21hc2tfcGFyc19mcmFnbWVudCcgXSxcblxuXHRcdFx0J3ZvaWQgbWFpbigpIHsnLFxuXHRcdFx0J1x0dmVjNCBub2lzZSA9IGdldE5vaXNlKCB3b3JsZFBvc2l0aW9uLnh6ICogc2l6ZSApOycsXG5cdFx0XHQnXHR2ZWMzIHN1cmZhY2VOb3JtYWwgPSBub3JtYWxpemUoIG5vaXNlLnh6eSAqIHZlYzMoIDEuNSwgMS4wLCAxLjUgKSApOycsXG5cblx0XHRcdCdcdHZlYzMgZGlmZnVzZUxpZ2h0ID0gdmVjMygwLjApOycsXG5cdFx0XHQnXHR2ZWMzIHNwZWN1bGFyTGlnaHQgPSB2ZWMzKDAuMCk7JyxcblxuXHRcdFx0J1x0dmVjMyB3b3JsZFRvRXllID0gZXllLXdvcmxkUG9zaXRpb24ueHl6OycsXG5cdFx0XHQnXHR2ZWMzIGV5ZURpcmVjdGlvbiA9IG5vcm1hbGl6ZSggd29ybGRUb0V5ZSApOycsXG5cdFx0XHQnXHRzdW5MaWdodCggc3VyZmFjZU5vcm1hbCwgZXllRGlyZWN0aW9uLCAxMDAuMCwgMi4wLCAwLjUsIGRpZmZ1c2VMaWdodCwgc3BlY3VsYXJMaWdodCApOycsXG5cblx0XHRcdCdcdGZsb2F0IGRpc3RhbmNlID0gbGVuZ3RoKHdvcmxkVG9FeWUpOycsXG5cblx0XHRcdCdcdHZlYzIgZGlzdG9ydGlvbiA9IHN1cmZhY2VOb3JtYWwueHogKiAoIDAuMDAxICsgMS4wIC8gZGlzdGFuY2UgKSAqIGRpc3RvcnRpb25TY2FsZTsnLFxuXHRcdFx0J1x0dmVjMyByZWZsZWN0aW9uU2FtcGxlID0gdmVjMyggdGV4dHVyZTJEKCBtaXJyb3JTYW1wbGVyLCBtaXJyb3JDb29yZC54eSAvIG1pcnJvckNvb3JkLncgKyBkaXN0b3J0aW9uICkgKTsnLFxuXG5cdFx0XHQnXHRmbG9hdCB0aGV0YSA9IG1heCggZG90KCBleWVEaXJlY3Rpb24sIHN1cmZhY2VOb3JtYWwgKSwgMC4wICk7Jyxcblx0XHRcdCdcdGZsb2F0IHJmMCA9IDAuMzsnLFxuXHRcdFx0J1x0ZmxvYXQgcmVmbGVjdGFuY2UgPSByZjAgKyAoIDEuMCAtIHJmMCApICogcG93KCAoIDEuMCAtIHRoZXRhICksIDUuMCApOycsXG5cdFx0XHQnXHR2ZWMzIHNjYXR0ZXIgPSBtYXgoIDAuMCwgZG90KCBzdXJmYWNlTm9ybWFsLCBleWVEaXJlY3Rpb24gKSApICogd2F0ZXJDb2xvcjsnLFxuXHRcdFx0J1x0dmVjMyBhbGJlZG8gPSBtaXgoICggc3VuQ29sb3IgKiBkaWZmdXNlTGlnaHQgKiAwLjMgKyBzY2F0dGVyICkgKiBnZXRTaGFkb3dNYXNrKCksICggdmVjMyggMC4xICkgKyByZWZsZWN0aW9uU2FtcGxlICogMC45ICsgcmVmbGVjdGlvblNhbXBsZSAqIHNwZWN1bGFyTGlnaHQgKSwgcmVmbGVjdGFuY2UpOycsXG5cdFx0XHQnXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSBhbGJlZG87Jyxcblx0XHRcdCdcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGFscGhhICk7JyxcblxuXHRcdFx0U2hhZGVyQ2h1bmtbICd0b25lbWFwcGluZ19mcmFnbWVudCcgXSxcblx0XHRcdFNoYWRlckNodW5rWyAnZm9nX2ZyYWdtZW50JyBdLFxuXG5cdFx0XHQnfSdcblx0XHRdLmpvaW4oICdcXG4nIClcblxuXHR9O1xuXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdGZyYWdtZW50U2hhZGVyOiBtaXJyb3JTaGFkZXIuZnJhZ21lbnRTaGFkZXIsXG5cdFx0dmVydGV4U2hhZGVyOiBtaXJyb3JTaGFkZXIudmVydGV4U2hhZGVyLFxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLmNsb25lKCBtaXJyb3JTaGFkZXIudW5pZm9ybXMgKSxcblx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRsaWdodHM6IHRydWUsXG5cdFx0c2lkZTogc2lkZSxcblx0XHRmb2c6IGZvZ1xuXHR9ICk7XG5cblx0bWF0ZXJpYWwudW5pZm9ybXNbIFwibWlycm9yU2FtcGxlclwiIF0udmFsdWUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblx0bWF0ZXJpYWwudW5pZm9ybXNbIFwidGV4dHVyZU1hdHJpeFwiIF0udmFsdWUgPSB0ZXh0dXJlTWF0cml4O1xuXHRtYXRlcmlhbC51bmlmb3Jtc1sgXCJhbHBoYVwiIF0udmFsdWUgPSBhbHBoYTtcblx0bWF0ZXJpYWwudW5pZm9ybXNbIFwidGltZVwiIF0udmFsdWUgPSB0aW1lO1xuXHRtYXRlcmlhbC51bmlmb3Jtc1sgXCJub3JtYWxTYW1wbGVyXCIgXS52YWx1ZSA9IG5vcm1hbFNhbXBsZXI7XG5cdG1hdGVyaWFsLnVuaWZvcm1zWyBcInN1bkNvbG9yXCIgXS52YWx1ZSA9IHN1bkNvbG9yO1xuXHRtYXRlcmlhbC51bmlmb3Jtc1sgXCJ3YXRlckNvbG9yXCIgXS52YWx1ZSA9IHdhdGVyQ29sb3I7XG5cdG1hdGVyaWFsLnVuaWZvcm1zWyBcInN1bkRpcmVjdGlvblwiIF0udmFsdWUgPSBzdW5EaXJlY3Rpb247XG5cdG1hdGVyaWFsLnVuaWZvcm1zWyBcImRpc3RvcnRpb25TY2FsZVwiIF0udmFsdWUgPSBkaXN0b3J0aW9uU2NhbGU7XG5cblx0bWF0ZXJpYWwudW5pZm9ybXNbIFwiZXllXCIgXS52YWx1ZSA9IGV5ZTtcblxuXHRzY29wZS5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG5cdHNjb3BlLm9uQmVmb3JlUmVuZGVyID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdG1pcnJvcldvcmxkUG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBzY29wZS5tYXRyaXhXb3JsZCApO1xuXHRcdGNhbWVyYVdvcmxkUG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHRcdHJvdGF0aW9uTWF0cml4LmV4dHJhY3RSb3RhdGlvbiggc2NvcGUubWF0cml4V29ybGQgKTtcblxuXHRcdG5vcm1hbC5zZXQoIDAsIDAsIDEgKTtcblx0XHRub3JtYWwuYXBwbHlNYXRyaXg0KCByb3RhdGlvbk1hdHJpeCApO1xuXG5cdFx0dmlldy5zdWJWZWN0b3JzKCBtaXJyb3JXb3JsZFBvc2l0aW9uLCBjYW1lcmFXb3JsZFBvc2l0aW9uICk7XG5cblx0XHQvLyBBdm9pZCByZW5kZXJpbmcgd2hlbiBtaXJyb3IgaXMgZmFjaW5nIGF3YXlcblxuXHRcdGlmICggdmlldy5kb3QoIG5vcm1hbCApID4gMCApIHJldHVybjtcblxuXHRcdHZpZXcucmVmbGVjdCggbm9ybWFsICkubmVnYXRlKCk7XG5cdFx0dmlldy5hZGQoIG1pcnJvcldvcmxkUG9zaXRpb24gKTtcblxuXHRcdHJvdGF0aW9uTWF0cml4LmV4dHJhY3RSb3RhdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHRsb29rQXRQb3NpdGlvbi5zZXQoIDAsIDAsIC0gMSApO1xuXHRcdGxvb2tBdFBvc2l0aW9uLmFwcGx5TWF0cml4NCggcm90YXRpb25NYXRyaXggKTtcblx0XHRsb29rQXRQb3NpdGlvbi5hZGQoIGNhbWVyYVdvcmxkUG9zaXRpb24gKTtcblxuXHRcdHRhcmdldC5zdWJWZWN0b3JzKCBtaXJyb3JXb3JsZFBvc2l0aW9uLCBsb29rQXRQb3NpdGlvbiApO1xuXHRcdHRhcmdldC5yZWZsZWN0KCBub3JtYWwgKS5uZWdhdGUoKTtcblx0XHR0YXJnZXQuYWRkKCBtaXJyb3JXb3JsZFBvc2l0aW9uICk7XG5cblx0XHRtaXJyb3JDYW1lcmEucG9zaXRpb24uY29weSggdmlldyApO1xuXHRcdG1pcnJvckNhbWVyYS51cC5zZXQoIDAsIDEsIDAgKTtcblx0XHRtaXJyb3JDYW1lcmEudXAuYXBwbHlNYXRyaXg0KCByb3RhdGlvbk1hdHJpeCApO1xuXHRcdG1pcnJvckNhbWVyYS51cC5yZWZsZWN0KCBub3JtYWwgKTtcblx0XHRtaXJyb3JDYW1lcmEubG9va0F0KCB0YXJnZXQgKTtcblxuXHRcdG1pcnJvckNhbWVyYS5mYXIgPSBjYW1lcmEuZmFyOyAvLyBVc2VkIGluIFdlYkdMQmFja2dyb3VuZFxuXG5cdFx0bWlycm9yQ2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cdFx0bWlycm9yQ2FtZXJhLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdC8vIFVwZGF0ZSB0aGUgdGV4dHVyZSBtYXRyaXhcblx0XHR0ZXh0dXJlTWF0cml4LnNldChcblx0XHRcdDAuNSwgMC4wLCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC41LCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjUsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMFxuXHRcdCk7XG5cdFx0dGV4dHVyZU1hdHJpeC5tdWx0aXBseSggbWlycm9yQ2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHR0ZXh0dXJlTWF0cml4Lm11bHRpcGx5KCBtaXJyb3JDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHQvLyBOb3cgdXBkYXRlIHByb2plY3Rpb24gbWF0cml4IHdpdGggbmV3IGNsaXAgcGxhbmUsIGltcGxlbWVudGluZyBjb2RlIGZyb206IGh0dHA6Ly93d3cudGVyYXRob24uY29tL2NvZGUvb2JsaXF1ZS5odG1sXG5cdFx0Ly8gUGFwZXIgZXhwbGFpbmluZyB0aGlzIHRlY2huaXF1ZTogaHR0cDovL3d3dy50ZXJhdGhvbi5jb20vbGVuZ3llbC9MZW5neWVsLU9ibGlxdWUucGRmXG5cdFx0bWlycm9yUGxhbmUuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoIG5vcm1hbCwgbWlycm9yV29ybGRQb3NpdGlvbiApO1xuXHRcdG1pcnJvclBsYW5lLmFwcGx5TWF0cml4NCggbWlycm9yQ2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0Y2xpcFBsYW5lLnNldCggbWlycm9yUGxhbmUubm9ybWFsLngsIG1pcnJvclBsYW5lLm5vcm1hbC55LCBtaXJyb3JQbGFuZS5ub3JtYWwueiwgbWlycm9yUGxhbmUuY29uc3RhbnQgKTtcblxuXHRcdHZhciBwcm9qZWN0aW9uTWF0cml4ID0gbWlycm9yQ2FtZXJhLnByb2plY3Rpb25NYXRyaXg7XG5cblx0XHRxLnggPSAoIE1hdGguc2lnbiggY2xpcFBsYW5lLnggKSArIHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDggXSApIC8gcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMCBdO1xuXHRcdHEueSA9ICggTWF0aC5zaWduKCBjbGlwUGxhbmUueSApICsgcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOSBdICkgLyBwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA1IF07XG5cdFx0cS56ID0gLSAxLjA7XG5cdFx0cS53ID0gKCAxLjAgKyBwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAxMCBdICkgLyBwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAxNCBdO1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSBzY2FsZWQgcGxhbmUgdmVjdG9yXG5cdFx0Y2xpcFBsYW5lLm11bHRpcGx5U2NhbGFyKCAyLjAgLyBjbGlwUGxhbmUuZG90KCBxICkgKTtcblxuXHRcdC8vIFJlcGxhY2luZyB0aGUgdGhpcmQgcm93IG9mIHRoZSBwcm9qZWN0aW9uIG1hdHJpeFxuXHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDIgXSA9IGNsaXBQbGFuZS54O1xuXHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDYgXSA9IGNsaXBQbGFuZS55O1xuXHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDEwIF0gPSBjbGlwUGxhbmUueiArIDEuMCAtIGNsaXBCaWFzO1xuXHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDE0IF0gPSBjbGlwUGxhbmUudztcblxuXHRcdGV5ZS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHR2YXIgY3VycmVudFZyRW5hYmxlZCA9IHJlbmRlcmVyLnZyLmVuYWJsZWQ7XG5cdFx0dmFyIGN1cnJlbnRTaGFkb3dBdXRvVXBkYXRlID0gcmVuZGVyZXIuc2hhZG93TWFwLmF1dG9VcGRhdGU7XG5cblx0XHRzY29wZS52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRyZW5kZXJlci52ci5lbmFibGVkID0gZmFsc2U7IC8vIEF2b2lkIGNhbWVyYSBtb2RpZmljYXRpb24gYW5kIHJlY3Vyc2lvblxuXHRcdHJlbmRlcmVyLnNoYWRvd01hcC5hdXRvVXBkYXRlID0gZmFsc2U7IC8vIEF2b2lkIHJlLWNvbXB1dGluZyBzaGFkb3dzXG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgbWlycm9yQ2FtZXJhICk7XG5cblx0XHRzY29wZS52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdHJlbmRlcmVyLnZyLmVuYWJsZWQgPSBjdXJyZW50VnJFbmFibGVkO1xuXHRcdHJlbmRlcmVyLnNoYWRvd01hcC5hdXRvVXBkYXRlID0gY3VycmVudFNoYWRvd0F1dG9VcGRhdGU7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHR9O1xuXG59O1xuXG5XYXRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNZXNoLnByb3RvdHlwZSApO1xuV2F0ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2F0ZXI7XG5cbmV4cG9ydCB7IFdhdGVyIH07XG4iLCJcdFx0XHRpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICcuLi9kaXN0L2J1aWxkL3RocmVlLm1vZHVsZS5qcyc7XHJcblx0XHRcdGltcG9ydCB7IE9yYml0Q29udHJvbHMgfSBmcm9tICcuLi9kaXN0L2J1aWxkL09yYml0Q29udHJvbHMuanMnO1xyXG5cdFx0XHRpbXBvcnQgeyBGQlhMb2FkZXIgfSBmcm9tICcuLi9kaXN0L2J1aWxkL0ZCWExvYWRlci5qcyc7XHJcblx0XHRcdGltcG9ydCB7IEdMVEZMb2FkZXIgfSBmcm9tICcuLi9kaXN0L2J1aWxkL0dMVEZMb2FkZXIuanMnO1xyXG5cdFx0XHRpbXBvcnQgeyBUV0VFTiB9IGZyb20gJy4uL2Rpc3QvYnVpbGQvdHdlZW4ubW9kdWxlLm1pbi5qcyc7XHJcblx0XHRcdGltcG9ydCB7IFdhdGVyIH0gZnJvbSAnLi4vZGlzdC9idWlsZC9XYXRlci5qcyc7XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgcmVuZGVyZXIsIGNhbWVyYSwgc2NlbmUsIGNvbnRyb2xzLCBsaWdodCwgd2F0ZXIsIG1peGVycyA9IFtdLFxyXG5cdFx0XHRcdGNsaXBBY3Rpb25zID0gW10sXHJcblx0XHRcdFx0YWN0aW9ucyA9IFtdLFxyXG5cdFx0XHRcdGNsb2NrLCBncm91bmRCb3ggPSBbXSxcclxuXHRcdFx0XHRCcGxhY2UgPSBbXVxyXG5cdFx0XHRcdCxqenhfZ3JvdXBfMSA9IFtdIC8v5rC05bmz566x57uEXHJcblx0XHRcdFx0LGp6eF9ncm91cF8yID0gW10gLy/lrrnnrrFcclxuXHRcdFx0XHQsanp4X2dyb3VwXzMgPSBbXSAvL+a5v+eusVxyXG5cdFx0XHRcdCxqenhfZ3JvdXBfNCA9IFtdIC8v6aSQ5Y6o566xXHJcblxyXG5cclxuXHRcdFx0bGV0IHJlbmRlclRpbWUgPSAxMDA7XHJcblxyXG5cclxuXHRcdFx0bGV0IHllbGxvd0IsIHJlYkIsIGJsdWVCLCByZWRCID0gbnVsbDtcclxuXHRcdFx0Y29uc3QgTW9kZWxCb3hOYW1lID0gW11cclxuXHRcdFx0bGV0IHZlY1RUID0gW107XHJcblx0XHRcdGxldCBNTUsgPSBmYWxzZVxyXG5cdFx0XHRsZXQgRGF0YXMgPSBbXTtcclxuXHRcdFx0bGV0IGtleURhdGFzID0gW11cclxuXHJcblx0XHRcdGZvciAobGV0IHQgPSAwOyB0IDwgMzA7IHQrKykge1xyXG5cdFx0XHRcdGxldCBrID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIDE0MClcclxuXHRcdFx0XHRsZXQgaW5mbyA9IHtcclxuXHRcdFx0XHRcdGlkOiBrLFxyXG5cdFx0XHRcdFx0Ly90eXBlOid3aGFyZicsXHJcblx0XHRcdFx0XHRjb2xvcnM6IHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiA0KSxcclxuXHRcdFx0XHRcdC8vIGNhcnJ5VHlwZTowLC8v5oqT5Y+W5Yqo55S757G75Z6LXHJcblx0XHRcdFx0XHQvLyBlbmRJZDowLC8v5Luj6KGo6Ii55LiK5Yeg5Y+35Z2Q5qCHXHJcblx0XHRcdFx0XHQvLyBlbmRUeXBlOjAvL+S7o+ihqOiIueexu+WeiyA2MDAgMzYwIDUwMCBcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCFrZXlEYXRhcy5pbmNsdWRlcyhrKSkge1xyXG5cdFx0XHRcdFx0RGF0YXMucHVzaChpbmZvKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRrZXlEYXRhcy5wdXNoKGspXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNjZW5lSW5pdCgpXHJcblx0XHRcdGFuaW1hdGUoKVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2NlbmVJbml0KCkge1xyXG5cdFx0XHRcdHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe1xyXG5cdFx0XHRcdFx0YW50aWFsaWFzOiB0cnVlLFxyXG5cdFx0XHRcdFx0Y2FudmFzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NjXCIpLFxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRyZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcclxuXHRcdFx0XHRyZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG5cdFx0XHRcdHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gZmFsc2U7IC8v5riy5p+T5Zmo5o6l5pS26Zi05b2x5riy5p+TXHJcblx0XHRcdFx0cmVuZGVyZXIuZ2FtbWFJbnB1dCA9IHRydWU7XHJcblx0XHRcdFx0cmVuZGVyZXIuZ2FtbWFPdXRwdXQgPSB0cnVlXHJcblxyXG5cdFx0XHRcdC8vcmVuZGVyZXIuc29ydE9iamVjdHMgPSBmYWxzZVxyXG5cdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSwgZmFsc2UpOyAvL+eql+WPo+Wkp+Wwj+WPmOWMluWQju+8jOmSiOWvueW9k+WJjeeql+WPo+Wkp+Wwj+avlOS+i+a4suafk1xyXG5cclxuXHRcdFx0XHRjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNDUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAxLCAyMDAwMDApO1xyXG5cdFx0XHRcdGNhbWVyYS5wb3NpdGlvbi5zZXQoLTAsIDg1LCAtMTAwKTsgLy/nm7jmnLrkvY3nva5cclxuXHJcblx0XHRcdFx0Y29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyhjYW1lcmEsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2NcIikpOyAvL+a3u+WKoOaOp+WItuWZqFxyXG5cdFx0XHRcdGNvbnRyb2xzLnRhcmdldC5zZXQoMCwgMCwgMCk7XHJcblxyXG5cdFx0XHRcdGNvbnRyb2xzLm1pbkRpc3RhbmNlID0gMTA7XHJcblx0XHRcdFx0Y29udHJvbHMubWF4RGlzdGFuY2UgPSAzMDA7XHJcblx0XHRcdFx0Y29udHJvbHMubWluUG9sYXJBbmdsZSA9IDA7XHJcblx0XHRcdFx0Y29udHJvbHMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEkgKiAuNDU7XHJcblx0XHRcdFx0Y29udHJvbHMubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5O1xyXG5cdFx0XHRcdGNvbnRyb2xzLm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5O1xyXG5cdFx0XHRcdC8vIGNvbnRyb2xzLnVwZGF0ZSgpO1xyXG5cclxuXHRcdFx0XHRzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpOyAvL+WIm+W7uuWcuuaZr1xyXG5cdFx0XHRcdHNjZW5lLmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IoMHhEQ0RDREMpO1xyXG5cclxuXHRcdFx0XHRsaWdodCA9IG5ldyBUSFJFRS5IZW1pc3BoZXJlTGlnaHQoMHhmZmZmZmYsIDB4NDQ0NDQ0LCAxLjUpOyAvL+WNiueQg+WFiea6kO+8jOminOiJsuS7juWkqeepuuminOiJsua4kOWPmOS4uuWcsOmdouminOiJsuOAglxyXG5cdFx0XHRcdGxpZ2h0LnBvc2l0aW9uLnNldCgwLCAyMDAsIDApO1xyXG5cdFx0XHRcdHNjZW5lLmFkZChsaWdodCk7IC8vXHRcdFx0XHTov5nlhYnkuI3og73nlKjkuo7mipXlsITpmLTlvbHjgIJcclxuXHJcblx0XHRcdFx0Y2xvY2sgPSBuZXcgVEhSRUUuQ2xvY2soKTtcclxuXHJcblx0XHRcdFx0SW5pdGV2TWFwcygpXHJcblx0XHRcdFx0aW5pdFNlYSgpXHJcblxyXG5cdFx0XHRcdGluaXRNb2RlbCgpXHJcblxyXG5cclxuXHRcdFx0XHRyYXlCcmVhdGhpbmcoKVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBpbml0U2VhKCkge1xyXG5cdFx0XHRcdGxldCBtZXNoID0gbmV3IFRIUkVFLk1lc2gobmV3IFRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkoMjAwMCwgMjAwMCksIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XHJcblx0XHRcdFx0XHRjb2xvcjogMHhmZWZlZmUsXHJcblx0XHRcdFx0XHQvLyBtYXA6Z3JvdW5kXHJcblx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdFx0XHRtZXNoLnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDI7XHJcblx0XHRcdFx0bWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTsgLy/lnLDpnaLmjqXmlLbpmLTlvbEgXHJcblx0XHRcdFx0bWVzaC5wb3NpdGlvbi55ID0gLTFcclxuXHJcblx0XHRcdFx0d2F0ZXIgPSBuZXcgV2F0ZXIobWVzaC5nZW9tZXRyeSwge1xyXG5cdFx0XHRcdFx0dGV4dHVyZVdpZHRoOiAxMDI0LFxyXG5cdFx0XHRcdFx0dGV4dHVyZUhlaWdodDogMTAyNCxcclxuXHRcdFx0XHRcdGNvbG9yOiAweDAwODBGRixcclxuXHRcdFx0XHRcdHdhdGVyTm9ybWFsczogbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCcuL2ltZy93YXRlci93YXRlcm5vcm1hbHMuanBnJywgZnVuY3Rpb24odGV4dHVyZSkge1xyXG5cdFx0XHRcdFx0XHR0ZXh0dXJlLndyYXBTID0gdGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xyXG5cdFx0XHRcdFx0fSksXHJcblx0XHRcdFx0XHRhbHBoYTogMS4wLFxyXG5cdFx0XHRcdFx0c3VuRGlyZWN0aW9uOiBuZXcgVEhSRUUuVmVjdG9yMygwLCAxLCAwKSxcclxuXHRcdFx0XHRcdHN1bkNvbG9yOiAweGZmZmZmZixcclxuXHRcdFx0XHRcdHdhdGVyQ29sb3I6IDB4MDAxZTBmLFxyXG5cdFx0XHRcdFx0ZGlzdG9ydGlvblNjYWxlOiAzLjcsXHJcblx0XHRcdFx0XHRmb2c6IHNjZW5lLmZvZyAhPT0gdW5kZWZpbmVkXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0d2F0ZXIucm90YXRpb24ueCAtPSBNYXRoLlBJIC8gMlxyXG5cdFx0XHRcdHdhdGVyLnBvc2l0aW9uLnkgLT0gM1xyXG5cdFx0XHRcdEJwbGFjZS5wdXNoKHdhdGVyKVxyXG5cdFx0XHRcdHNjZW5lLmFkZCh3YXRlcik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIGluaXRNb2RlbCgpIHtcclxuXHRcdFx0XHRjb25zdCBtdGNqID0gWydtYXRvdWJlaXdlaScsICdtYXRvdWNoYW5namluZycsJ2JpYW5tYSddXHJcblx0XHRcdFx0bGV0IGxvYWRlciA9IG5ldyBHTFRGTG9hZGVyKCk7XHJcblx0XHRcdFx0bG9hZGVyLmxvYWQoJ2h0dHBzOi8vc2hvd2pzb25tZS5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vd29ya01vZGVsL210MDkxOWRvbmdodWF0ZXN0ZW5kLmdsYicsIChlKSA9PiB7XHJcblx0XHRcdFx0Ly9sb2FkZXIubG9hZCgnaHR0cHM6Ly9zaG93anNvbm1lLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS93b3JrTW9kZWwvbXQwOTE5ZG9uZ2h1YXRlc3RlbmQuZ2xiJywgKGUpID0+IHtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coZSlcclxuXHRcdFx0XHRcdEJwbGFjZS5wdXNoKC4uLmUuc2NlbmUuY2hpbGRyZW4pXHJcblx0XHRcdFx0XHRlLnNjZW5lLmNoaWxkcmVuLm1hcCgocykgPT4ge1xyXG5cdFx0XHRcdFx0XHRpZiAoIW10Y2ouaW5jbHVkZXMocy5uYW1lKSkge1xyXG5cdFx0XHRcdFx0XHRcdHMudmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHRcdHNjZW5lLmFkZChlLnNjZW5lKVxyXG5cclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHQvL+WIneWni+WMlumdmeaAgeaOpeWPo1xyXG5cdFx0XHRcdFx0XHRpbml0RGF0YSgpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0dGVzdEFuaW1hdGUoZSlcclxuXHRcdFx0XHRcdFx0fSwgcmVuZGVyVGltZSlcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHR9LCByZW5kZXJUaW1lKVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHQvL+WIneWni+WMlumdmeaAgeaOpeWPo1xyXG5cdFx0XHRmdW5jdGlvbiBpbml0RGF0YSgpIHtcclxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKGRhdGEpXHJcblxyXG5cdFx0XHRcdC8v6Ii55Yid5aeL5YyWW+WvueWFtui0neS9jV1cclxuXHRcdFx0XHRib2F0SW5pdChkYXRhKTtcclxuXHJcblx0XHRcdFx0Ly/pm4bljaHliJ3lp4vljJZb5a+55YW26LSd5L2NXVxyXG5cdFx0XHRcdGNhckluaXQoZGF0YSk7XHJcblxyXG5cdFx0XHRcdC8v5qGl5ZCK5Yid5aeL5YyWW+Wkp+i9puOAgeWwj+i9pl1cclxuXHRcdFx0XHRicmlkZ2VJbml0KGRhdGEpXHJcblxyXG5cdFx0XHRcdC8v6ZuG6KOF566x5Yid5aeL5YyWW+eggeWktOOAgeiIueOAgembhuWNoeOAgeahpeWQil1cclxuXHRcdFx0XHRqenhJbml0KGRhdGEpXHJcblxyXG5cdFx0XHRcdC8vYm94XHJcblx0XHRcdFx0Ly9sZXQgTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe21hcDpjcmVhdGVUZXh0dXJlKFwiSEpTWTIyMjRcIiksIGNvbG9yOiAweGZmZmZmZiAsdHJhbnNwYXJlbnQ6dHJ1ZSB9ICk7XHJcblx0XHRcdFx0Ly9zY2VuZS5nZXRPYmplY3RCeU5hbWUoJ0paWF9ZZWxsb3dfZmFjZV8yJykubWF0ZXJpYWwgPSBNYXRlcmlhbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly/oiLnliJ3lp4vljJZb5a+55YW26LSd5L2NXVxyXG5cdFx0XHRmdW5jdGlvbiBib2F0SW5pdChkYXRhKSB7XHJcblx0XHRcdFx0aWYgKGlzRW1wdHkoZGF0YS5ib2F0KSkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdC8v6YGN5Y6G6Ii5XHJcblx0XHRcdFx0Zm9yIChsZXQgYm9hdCBvZiBkYXRhLmJvYXQpIHtcclxuXHRcdFx0XHRcdGxldCBib2F0X3R5cGUgPSBib2F0LnR5cGUgLy/oiLnnsbvlnotcclxuXHRcdFx0XHRcdGxldCBib2F0X2JheURvY2sgPSBib2F0LmJheURvY2sgLy/noIHlpLQt6Ii555qE5a+55bqU5L2N572uXHJcblxyXG5cdFx0XHRcdFx0Ly/ojrflj5boiLnnmoTkvY3nva5cclxuXHRcdFx0XHRcdGxldCBzcyA9IGJvYXRfYmF5RG9jay5zcGxpdCgnLCcpXHJcblx0XHRcdFx0XHRsZXQgc3MwID0gc3NbMF0gPCAxMCA/IGAwJHtzc1swXX1gIDogc3NbMF07IC8v56CB5aS0IOi0neS9jeWPt1xyXG5cdFx0XHRcdFx0bGV0IHNzMSA9IHNzWzFdIDwgMTAgPyBgMCR7c3NbMV19YDogc3NbMV07IC8v6Ii5IOi0neS9jeWPt1xyXG5cclxuXHRcdFx0XHRcdGxldCBib2F0X25ldzsgLy9jbG9uZeeahOaWsOeahOiIuVxyXG5cdFx0XHRcdFx0bGV0IGJvYXRfc3RhcnROYW1lID0gcmVudHVybkJvYXRUeXBlKGJvYXRfdHlwZSk7IC8v6I635Y+W6Ii555qE5byA5aeL55qE5ZCN56ewXHJcblxyXG5cdFx0XHRcdFx0Ly/ojrflj5bnoIHlpLTotJ3kvY0g5L2N572u5L+h5oGvXHJcblx0XHRcdFx0XHRsZXQgd2FmX2J3X3dvcmxkX3BvcyA9IHJldHVybldvcmxkUG9zQnlOYW1lKGBXc18wMV8ke3NzMH1gKTsgLy/noIHlpLTotJ3kvY3kuJbnlYzlnZDmoIdcclxuXHJcblx0XHRcdFx0XHQvL+WIneWni+WMluiIuVxyXG5cdFx0XHRcdFx0aWYgKGJvYXRfdHlwZSA9PSAnMScpIHsgLy8zNjDoiLlcclxuXHRcdFx0XHRcdFx0Ym9hdF9uZXcgPSBzY2VuZS5nZXRPYmplY3RCeU5hbWUoJ0MzNjAnKS5jbG9uZSgpXHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGJvYXRfdHlwZSA9PSAnMicpIHsgLy81MDBcclxuXHRcdFx0XHRcdFx0Ym9hdF9uZXcgPSBzY2VuZS5nZXRPYmplY3RCeU5hbWUoJ0M1MDAnKS5jbG9uZSgpXHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGJvYXRfdHlwZSA9PSAnMycpIHsgLy82MDBcclxuXHRcdFx0XHRcdFx0Ym9hdF9uZXcgPSBzY2VuZS5nZXRPYmplY3RCeU5hbWUoJ0M2MDAnKS5jbG9uZSgpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRib2F0X25ldy5uYW1lID0gYm9hdC5pZCAvL+mHjeaWsOi1i+WAvOiIueeahOWQjeensFxyXG5cdFx0XHRcdFx0Ym9hdF9uZXcudXNlckRhdGEgPSBib2F0XHJcblx0XHRcdFx0XHQvL+mHjeaWsOi1i+WAvOiIueS4i+mdoueahOi0neS9jVxyXG5cdFx0XHRcdFx0Zm9yIChsZXQgYm9hdF9jaGlsZCBvZiBib2F0X25ldy5jaGlsZHJlbikge1xyXG5cdFx0XHRcdFx0XHRsZXQgYm9hdF9jaGlsZF9uYW1lID0gYm9hdF9jaGlsZC5uYW1lXHJcblx0XHRcdFx0XHRcdGJvYXRfY2hpbGQubmFtZSA9IGAke2JvYXRfY2hpbGRfbmFtZX1fJHtib2F0LmlkfWBcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRib2F0X25ldy52aXNpYmxlID0gdHJ1ZVxyXG5cclxuXHRcdFx0XHRcdC8v6I635Y+W6Ii55LiK6LSd5L2NIOS9jee9ruS/oeaBr1xyXG5cdFx0XHRcdFx0bGV0IGJvYXRfYndfd29ybGRfcG9zID0gcmV0dXJuV29ybGRQb3NCeU5hbWUoYCR7Ym9hdF9zdGFydE5hbWV9XzAxXyR7c3MxfWApOyAvL+iIuei0neS9jeS4lueVjOWdkOagh1xyXG5cdFx0XHRcdFx0bGV0IGJvYXRfcG9zID0gYm9hdF9uZXcucG9zaXRpb24gIC8v6Ii557uE5L2N572u5L+h5oGvXHJcblx0XHRcdFx0XHRsZXQgaXRzX3ggPSBib2F0X3Bvcy54IC0gYm9hdF9id193b3JsZF9wb3MueCAvL+iuoeeul+WHuuiIuei0neS9jeWSjCDoiLnkuK3lv4PngrnnmoQg55u45a+5eOWAvFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHQvL+WIneWni+WMliDoiLnkvY3nva5cclxuXHRcdFx0XHRcdGJvYXRfbmV3LnBvc2l0aW9uLnggPSB3YWZfYndfd29ybGRfcG9zLnggKyBpdHNfeCAvL+iuoeeul+iIuee7hCDkuK3lv4PnmoR45L2N572uXHJcblxyXG5cdFx0XHRcdFx0c2NlbmUuYWRkKGJvYXRfbmV3KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly/pm4bljaHliJ3lp4vljJZb5a+55YW26LSd5L2NXVxyXG5cdFx0XHRmdW5jdGlvbiBjYXJJbml0KGRhdGEpIHtcclxuXHRcdFx0XHRpZiAoaXNFbXB0eShkYXRhLmNhcikpIHJldHVybiBmYWxzZTtcclxuXHJcblx0XHRcdFx0Ly/pgY3ljobpm4bljaFcclxuXHRcdFx0XHRmb3IgKGxldCBjYXIgb2YgZGF0YS5jYXIpIHtcclxuXHRcdFx0XHRcdGxldCBjYXJfcG9zaXRpb24gPSBjYXIucG9zaXRpb24gLy/pm4bljaHnmoTkvY3nva5cclxuXHJcblx0XHRcdFx0XHQvL+iOt+WPlumbhuWNoeeahOS9jee9rlxyXG5cdFx0XHRcdFx0bGV0IHNzID0gY2FyX3Bvc2l0aW9uLnNwbGl0KCcsJylcclxuXHRcdFx0XHRcdGxldCBzczAgPSBzc1swXSA8IDEwID8gYDAke3NzWzBdfWAgOiBzc1swXTsgLy/pm4bljaHnmoTooYzlj7dcclxuXHRcdFx0XHRcdGxldCBzczEgPSBzc1sxXSA8IDEwID8gYDAke3NzWzFdfWA6IHNzWzFdOyAgLy/pm4bljaHotJ3kvY3lj7dcclxuXHJcblx0XHRcdFx0XHRsZXQgY2FyX25ldzsgLy9jbG9uZeeahOaWsOeahOmbhuWNoVxyXG5cdFx0XHRcdFx0Y2FyX25ldyA9IHNjZW5lLmdldE9iamVjdEJ5TmFtZSgnY2FyJykuY2xvbmUoKVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRjYXJfbmV3Lm5hbWUgPSBjYXIuaWRcclxuXHRcdFx0XHRcdGNhcl9uZXcudXNlckRhdGEgPSBjYXJcclxuXHRcdFx0XHRcdGNhcl9uZXcudmlzaWJsZSA9IHRydWVcclxuXHJcblxyXG5cdFx0XHRcdFx0Ly/ojrflj5bpm4bljaHlr7nlupTnmoTotJ3kvY0g5L2N572u5L+h5oGvXHJcblx0XHRcdFx0XHRsZXQgYndfd29ybGRfcG9zID0gcmV0dXJuV29ybGRQb3NCeU5hbWUoYFdzXyR7c3MwfV8ke3NzMX1gKTtcclxuXHRcdFx0XHRcdC8v6I635Y+W6ZuG5Y2h6LSd5L2N5ZKM6ZuG5Y2h5Lit5b+D5bim5L2g55qE55u45a+55L2N572uXHJcblx0XHRcdFx0XHRsZXQgY2FyX2J3X3dvcmxkX3BvcyA9IHJldHVybldvcmxkUG9zQnlOYW1lKGBjYXJfYndfMDFfMDFgKTsgIC8v6ZuG5Y2h6LSd5L2N5LiW55WM5Z2Q5qCHXHJcblx0XHRcdFx0XHRsZXQgY2FyX3dvcmxkX3BvcyA9IHJldHVybldvcmxkUG9zQnlOYW1lKGBjYXJgKTsgIC8v6ZuG5Y2h57uE55qEIOS4lueVjOWdkOagh1xyXG5cdFx0XHRcdFx0bGV0IGl0c194ID0gY2FyX3dvcmxkX3Bvcy54IC0gY2FyX2J3X3dvcmxkX3Bvcy54ICAvL+iuoeeul+WHuumbhuWNoei0neS9jeWSjCDpm4bljaHkuK3lv4PngrnnmoQg55u45a+5eOWAvFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHQvL+WIneWni+WMliDpm4bljaHkvY3nva5cclxuXHRcdFx0XHRcdGNhcl9uZXcucG9zaXRpb24ueCA9IGJ3X3dvcmxkX3Bvcy54K2l0c194ICAvL+iuoeeul+mbhuWNoee7hCDkuK3lv4PnmoR45L2N572uXHJcblx0XHRcdFx0XHRjYXJfbmV3LnBvc2l0aW9uLnogPSBid193b3JsZF9wb3MuelxyXG5cdFx0XHRcdFx0c2NlbmUuYWRkKGNhcl9uZXcpXHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHJcblxyXG5cdFx0XHQvL+ahpeWQiiDliJ3lp4vljJYgZGF0YTrmjqXlj6PkvKDlhaXnmoRqc29uXHJcblx0XHRcdGZ1bmN0aW9uIGJyaWRnZUluaXQoZGF0YSkge1xyXG5cdFx0XHRcdGlmIChpc0VtcHR5KGRhdGEuYnJpZGdlKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0XHQvL2JyaWRnZVxyXG5cdFx0XHRcdC8v6YGN5Y6G5qGl5ZCKXHJcblx0XHRcdFx0bGV0IGluZGV4ID0gMTtcclxuXHRcdFx0XHRmb3IgKGxldCBicmlkZ2Ugb2YgZGF0YS5icmlkZ2UpIHtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0bGV0IHFpYW9kaWFvX25ldyA9IHNjZW5lLmdldE9iamVjdEJ5TmFtZShgcWlhb2RpYW9fJHtpbmRleH1gKTtcclxuXHRcdFx0XHRcdGxldCBxaWFvZGlhb196aHVhcXVfbmV3ID0gc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKGBxaWFvZGlhb196aHVhcXVfJHtpbmRleH1gKTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0bGV0IGJyaWRnZV9wb3NpdGlvbkEgPSBicmlkZ2UucG9zaXRpb25BIC8v5bCP6L2m5Yy65Z+fXHJcblx0XHRcdFx0XHRsZXQgYnJpZGdlX3Bvc2l0aW9uUyA9IGJyaWRnZS5wb3NpdGlvblMgLy/lsI/ovabkvY3nva5cdFxyXG5cclxuXHRcdFx0XHRcdC8v6I635Y+W5bCP6L2m55qE5L2N572uXHJcblx0XHRcdFx0XHRsZXQgc3MgPSBicmlkZ2VfcG9zaXRpb25TLnNwbGl0KCcsJylcclxuXHRcdFx0XHRcdGxldCBzczAgPSBzc1swXSA8IDEwID8gYDAke3NzWzBdfWAgOiBzc1swXTsgLy/lsI/ovabmiYDlnKjooYxcclxuXHRcdFx0XHRcdGxldCBzczEgPSBzc1sxXSA8IDEwID8gYDAke3NzWzFdfWA6IHNzWzFdOyAgLy/lsI/ovabmiYDlnKjliJdcclxuXHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdC8v5qGl6LqrXHJcblx0XHRcdFx0XHQvL3FpYW9kaWFvX25ldy5uYW1lID0gJ3FpYW9zaGVuXycrYnJpZGdlLmlkXHJcblx0XHRcdFx0XHRxaWFvZGlhb19uZXcudXNlckRhdGEgPSBicmlkZ2VcclxuXHRcdFx0XHRcdHFpYW9kaWFvX25ldy52aXNpYmxlID0gdHJ1ZVxyXG5cdFx0XHRcdFx0Ly/moaXouqs1MCXpgI/mmI5cclxuXHRcdFx0XHRcdHFpYW9kaWFvX25ldy5jaGlsZHJlblswXS5tYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWVcclxuXHRcdFx0XHRcdHFpYW9kaWFvX25ldy5jaGlsZHJlblswXS5tYXRlcmlhbC5vcGFjaXR5ID0gMC41XHJcblxyXG5cdFx0XHRcdFx0Ly/mipPlj5ZcclxuXHRcdFx0XHRcdC8vcWlhb2RpYW9femh1YXF1X25ldy5uYW1lID0gJ3podWFxdV8nK2JyaWRnZS5pZFxyXG5cdFx0XHRcdFx0cWlhb2RpYW9femh1YXF1X25ldy51c2VyRGF0YSA9IGJyaWRnZVxyXG5cdFx0XHRcdFx0cWlhb2RpYW9femh1YXF1X25ldy52aXNpYmxlID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHQvL+WKqOeUu+euseWtkFxyXG5cdFx0XHRcdFx0Ly9KWlhfZG9uZ2h1YV9uZXcubmFtZSA9ICdqenhfJyticmlkZ2UuaWRcclxuXHRcdFx0XHRcdC8vSlpYX2RvbmdodWFfbmV3LnZpc2libGUgPSB0cnVlXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdC8v5bCP6L2m5Zyo56CB5aS0XHJcblx0XHRcdFx0XHRpZiAoYnJpZGdlLnBvc2l0aW9uQSAhPSAnQycpIHtcclxuXHRcdFx0XHRcdFx0bGV0IGJ3X3dvcmxkX3BvcyA9IHJldHVybldvcmxkUG9zQnlOYW1lKGBXc18ke3NzMH1fJHtzczF9YCk7XHJcblx0XHRcdFx0XHRcdC8v5Yid5aeL5YyWIOWkp+i9puS9jee9riBb5qGl6LqrXVxyXG5cdFx0XHRcdFx0XHQvL+WIneWni+WMliDlsI/ovabkvY3nva4gW+aOp+WItuWPsOOAgeaKk+WPluacul1cclxuXHRcdFx0XHRcdFx0Ly/liJ3lp4vljJYg6ZuG6KOF566x5Yqo55S75L2N572uXHJcblx0XHRcdFx0XHRcdHFpYW9kaWFvX25ldy5wb3NpdGlvbi54ID0gYndfd29ybGRfcG9zLnhcclxuXHJcblx0XHRcdFx0XHRcdHFpYW9kaWFvX3podWFxdV9uZXcucG9zaXRpb24ueCA9IGJ3X3dvcmxkX3Bvcy54XHJcblx0XHRcdFx0XHRcdHFpYW9kaWFvX3podWFxdV9uZXcucG9zaXRpb24ueiA9IGJ3X3dvcmxkX3Bvcy56ICsgMS41NVxyXG5cdFx0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHR9IGVsc2UgeyAvL+Wwj+i9puWcqOiIuVxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygxMSlcclxuXHRcdFx0XHRcdFx0Ly8hIVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGluZGV4ICsrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly/pm4boo4XnrrHliJ3lp4vljJZb56CB5aS044CB6Ii544CB6ZuG5Y2h44CB5qGl5ZCKXVxyXG5cdFx0XHRmdW5jdGlvbiBqenhJbml0KGRhdGEpIHtcclxuXHRcdFx0XHRpZiAoaXNFbXB0eShkYXRhLmJveCkpIHJldHVybiBmYWxzZTtcclxuXHJcblxyXG5cdFx0XHRcdC8v5rC05bmz566xIDFcclxuXHRcdFx0XHRsZXQgSlpYX3NodWlwaW54aWFuZyA9IHNjZW5lLmdldE9iamVjdEJ5TmFtZSgnSlpYX3NodWlwaW54aWFuZycpO1xyXG5cdFx0XHRcdC8v5YW85a65566xIDJcclxuXHRcdFx0XHRsZXQgSlpYX2ppYW5yb25neGlhbmcgPSBzY2VuZS5nZXRPYmplY3RCeU5hbWUoJ0paWF9qaWFucm9uZ3hpYW5nJyk7XHJcblx0XHRcdFx0Ly/mub/lnoPlnL7nrrEgM1xyXG5cdFx0XHRcdGxldCBKWlhfc2hpbGFqaXhpYW5nID0gc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKCdKWlhfc2hpbGFqaXhpYW5nJyk7XHJcblx0XHRcdFx0Ly/ppJDljqjnrrEgNFxyXG5cdFx0XHRcdGxldCBKWlhfY2FuY2h1eGlhbmcgPSBzY2VuZS5nZXRPYmplY3RCeU5hbWUoJ0paWF9jYW5jaHV4aWFuZycpO1xyXG5cclxuXHRcdFx0XHQvL+mBjeWOhumbhuijheeusVxyXG5cdFx0XHRcdGZvciAobGV0IGJveCBvZiBkYXRhLmJveCkge1xyXG5cdFx0XHRcdFx0bGV0IGxvYWRlciA9IGJveC5sb2FkZXI7IC8v6I635Y+W5om/6L295a+56LGhXHJcblx0XHRcdFx0XHRsZXQgbG9hZGVySWQgPSBib3gubG9hZGVySWQ7IC8v6I635Y+W5om/6L295a+56LGhSURcclxuXHRcdFx0XHRcdGxldCBib3hfbGF5ZXIgPSBib3gubGF5ZXI7IC8v6I635Y+WIOaOpeWPo+S4rSDlsYLmlbBcclxuXHRcdFx0XHRcdGxldCBib3hfcG9zaXRpb24gPSBib3gucG9zaXRpb24gLy/ojrflj5Yg5o6l5Y+j5LitIOmbhuijheeuseeahOS9jee9ruS/oeaBr1xyXG5cdFx0XHRcdFx0bGV0IGJveF90eXBlID0gYm94LnR5cGUgLy/pm4boo4XnrrHnmoTnsbvlnotcclxuXHJcblx0XHRcdFx0XHRsZXQgc3MgPSBib3hfcG9zaXRpb24uc3BsaXQoJywnKVxyXG5cdFx0XHRcdFx0bGV0IHNzMCA9IHNzWzBdIDwgMTAgPyBgMCR7c3NbMF19YCA6IHNzWzBdOyAvL+Wwj+i9puaJgOWcqOihjFxyXG5cdFx0XHRcdFx0bGV0IHNzMSA9IHNzWzFdIDwgMTAgPyBgMCR7c3NbMV19YDogc3NbMV07ICAvL+Wwj+i9puaJgOWcqOWIl1xyXG5cclxuXHRcdFx0XHRcdGlmIChsb2FkZXIgPT0gJzEnKSB7IC8v56CB5aS0XHJcblx0XHRcdFx0XHRcdGlmICghaXNFbXB0eShib3hfcG9zaXRpb24pKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly/ojrflj5bpm4boo4XnrrHnmoTotJ3kvY3kv6Hmga9cclxuXHRcdFx0XHRcdFx0XHRsZXQgYndfd29ybGRfcG9zID0gcmV0dXJuV29ybGRQb3NCeU5hbWUoYFdzXyR7c3MwfV8ke3NzMX1gKTtcclxuXHRcdFx0XHRcdFx0XHQvL2Nsb25l6ZuG6KOF566xIOWumuS9jeWIsOaJgOWcqOS9jee9rlxyXG5cdFx0XHRcdFx0XHRcdGlmIChib3hfdHlwZSA9PSAnMScpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGJveF93YWZfaW5pdChKWlhfc2h1aXBpbnhpYW5nLCBib3gsIGJ3X3dvcmxkX3BvcylcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGJveF90eXBlID09ICcyJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ym94X3dhZl9pbml0KEpaWF9qaWFucm9uZ3hpYW5nLCBib3gsIGJ3X3dvcmxkX3BvcylcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGJveF90eXBlID09ICczJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ym94X3dhZl9pbml0KEpaWF9zaGlsYWppeGlhbmcsIGJveCwgYndfd29ybGRfcG9zKVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoYm94X3R5cGUgPT0gJzQnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRib3hfd2FmX2luaXQoSlpYX2NhbmNodXhpYW5nLCBib3gsIGJ3X3dvcmxkX3BvcylcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAobG9hZGVyID09ICcyJykgeyAvL+iIuVxyXG5cdFx0XHRcdFx0XHRpZiAoIWlzRW1wdHkoYm94X3Bvc2l0aW9uKSkge1xyXG5cdFx0XHRcdFx0XHRcdC8v6I635Y+W6ZuG6KOF566x5Zyo5ZOq5Liq6Ii5XHJcblx0XHRcdFx0XHRcdFx0bGV0IGJvYXRfb2JqID0gc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKGxvYWRlcklkKTtcclxuXHRcdFx0XHRcdFx0XHRsZXQgYm9hdF9zdGFydE5hbWUgPSByZW50dXJuQm9hdFR5cGUoYm9hdF9vYmoudXNlckRhdGEudHlwZSlcclxuXHRcdFx0XHRcdFx0XHQvL+iOt+WPlumbhuijheeuseeahOi0neS9jeS/oeaBr1xyXG5cdFx0XHRcdFx0XHRcdGxldCBid193b3JsZF9wb3NcclxuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGJ3X3dvcmxkX3BvcyA9IHJldHVybldvcmxkUG9zQnlOYW1lKGAke2JvYXRfc3RhcnROYW1lfV8ke3NzMH1fJHtzczF9XyR7bG9hZGVySWR9YCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdC8vY2xvbmXpm4boo4XnrrEg5a6a5L2N5Yiw5omA5Zyo5L2N572uXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoYm94X3R5cGUgPT0gJzEnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJveF93YWZfaW5pdChKWlhfc2h1aXBpbnhpYW5nLCBib3gsIGJ3X3dvcmxkX3BvcylcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoYm94X3R5cGUgPT0gJzInKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJveF93YWZfaW5pdChKWlhfamlhbnJvbmd4aWFuZywgYm94LCBid193b3JsZF9wb3MpXHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGJveF90eXBlID09ICczJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRib3hfd2FmX2luaXQoSlpYX3NoaWxhaml4aWFuZywgYm94LCBid193b3JsZF9wb3MpXHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGJveF90eXBlID09ICc0Jykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRib3hfd2FmX2luaXQoSlpYX2NhbmNodXhpYW5nLCBib3gsIGJ3X3dvcmxkX3BvcylcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0fSwgcmVuZGVyVGltZSlcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGxvYWRlciA9PSAnMycpIHsgLy/ovaZcclxuXHRcdFx0XHRcdFx0Ly8hIVxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChsb2FkZXIgPT0gJzQnKSB7IC8v5qGl5ZCKXHJcblx0XHRcdFx0XHRcdC8vISFcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8v56CB5aS06ZuG6KOF566x5Yid5aeL5YyWXHJcblx0XHRcdGZ1bmN0aW9uIGJveF93YWZfaW5pdChKWlhfT0JKLCBib3gsIGJ3X3dvcmxkX3Bvcykge1xyXG5cdFx0XHRcdGxldCBKWlhfT0JKX25ldyA9IEpaWF9PQkouY2xvbmUoKVxyXG5cdFx0XHRcdEpaWF9PQkpfbmV3Lm5hbWUgPSBib3guaWRcclxuXHRcdFx0XHRKWlhfT0JKX25ldy51c2VyRGF0YSA9IGJveFxyXG5cdFx0XHRcdEpaWF9PQkpfbmV3LnZpc2libGUgPSB0cnVlXHJcblx0XHRcdFx0Ly/pm4boo4XnrrHkvY3nva7mm7TmlrBcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdGlmKGJveC5sYXllciA9PSAnMScpe1xyXG5cdFx0XHRcdFx0XHRKWlhfT0JKX25ldy5wb3NpdGlvbi5zZXQoYndfd29ybGRfcG9zLngsIGJ3X3dvcmxkX3Bvcy55LCBid193b3JsZF9wb3MueilcclxuXHRcdFx0XHRcdH1lbHNlIGlmKGJveC5sYXllciA9PSAnMicpe1xyXG5cdFx0XHRcdFx0XHRKWlhfT0JKX25ldy5wb3NpdGlvbi5zZXQoYndfd29ybGRfcG9zLngsIGJ3X3dvcmxkX3Bvcy55KzIuNSwgYndfd29ybGRfcG9zLnopXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSwgcmVuZGVyVGltZSlcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRqenhfZ3JvdXBfMS5wdXNoKEpaWF9PQkpfbmV3KVxyXG5cdFx0XHRcdHNjZW5lLmFkZChKWlhfT0JKX25ldylcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly/mtYvor5XliqjnlLtcclxuXHRcdFx0ZnVuY3Rpb24gdGVzdEFuaW1hdGUoZSl7XHJcblx0XHRcdFx0Ly/lpKfovabliqjnlLtcclxuXHRcdFx0XHRiaWdDYXJfbW92ZSgzLCdXc18wNF8wOCcpXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly/lsI/ovabliqjnlLtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdHNtQ2FyX21vdmUoMywnQ182MDBfMDFfMDVfZXFtX3dhZl8wMDNfMjRfYicpXHJcblx0XHRcdFx0fSwzMDAwKVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0TXRBbmltYXRlKGUsJzNfYm9hdF96aHVhXzInLCdlcW1fd2FmXzAwNl8xMDA4X2MnKVxyXG5cdFx0XHRcdH0sNjAwMClcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdHNtQ2FyX21vdmUoMywnV3NfMDRfMDgnKVxyXG5cdFx0XHRcdH0sMTAwMDApXHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRNdEFuaW1hdGUoZSwnM193YWZfZmFuZ18xJywnZXFtX3dhZl8wMDZfMTAwOF9jJywnV3NfMDRfMDgnKVxyXG5cdFx0XHRcdH0sMTMwMDApXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRzbUNhcl9tb3ZlKDMsJ0NfNjAwXzAxXzA1X2VxbV93YWZfMDAzXzI0X2InKVxyXG5cdFx0XHRcdH0sMTcwMDApXHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRNdEFuaW1hdGUoZSwnM19ib2F0X3podWFfMScsJ2VxbV93YWZfMDA2XzEwMDlfYycpXHJcblx0XHRcdFx0fSwyMDAwMClcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdHNtQ2FyX21vdmUoMywnV3NfMDRfMDgnKVxyXG5cdFx0XHRcdH0sMjQwMDApXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRNdEFuaW1hdGUoZSwnM193YWZfZmFuZ18yJywnZXFtX3dhZl8wMDZfMTAwOV9jJywnV3NfMDRfMDgnLDIpXHJcblx0XHRcdFx0fSwyNzAwMClcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdHNtQ2FyX21vdmUoMywnV3NfMDFfMDgnKVxyXG5cdFx0XHRcdH0sMzEwMDApXHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRNdEFuaW1hdGUoZSwnM193YWZfemh1YV8yJywnZXFtX3dhZl8wMDZfMTAwNF9jJylcclxuXHRcdFx0XHR9LDM0MDAwKVxyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0c21DYXJfbW92ZSgzLCdDXzYwMF8wMV8wNV9lcW1fd2FmXzAwM18yNF9iJylcclxuXHRcdFx0XHR9LDM4MDAwKVxyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0TXRBbmltYXRlKGUsJzNfYm9hdF9mYW5nXzEnLCdlcW1fd2FmXzAwNl8xMDA0X2MnLCdDXzYwMF8wMV8wNV9lcW1fd2FmXzAwM18yNF9iJylcclxuXHRcdFx0XHR9LDQxMDAwKVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0c21DYXJfbW92ZSgzLCdDXzYwMF8wM18wNV9lcW1fd2FmXzAwM18yNF9iJylcclxuXHRcdFx0XHR9LDQ1MDAwKVxyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0TXRBbmltYXRlKGUsJzNfYm9hdF96aHVhXzInLCdlcW1fd2FmXzAwNl8xMDI3X2MnKVxyXG5cdFx0XHRcdH0sNDgwMDApXHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRzbUNhcl9tb3ZlKDMsJ1dzXzA3XzA4JylcclxuXHRcdFx0XHR9LDUyMDAwKVxyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0TXRBbmltYXRlKGUsJzNfY2FyX2ZhbmdfMScsJ2VxbV93YWZfMDA2XzEwMjdfYycsJ1dzXzA3XzA4JywwLjUpXHJcblx0XHRcdFx0fSw1NTAwMClcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvL+mbhuWNoea2iOWksVxyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0c2NlbmUuZ2V0T2JqZWN0QnlOYW1lKGAxMGApLnZpc2libGUgPSBmYWxzZVxyXG5cdFx0XHRcdFx0c2NlbmUuZ2V0T2JqZWN0QnlOYW1lKGBlcW1fd2FmXzAwNl8xMDI3X2NgKS52aXNpYmxlID0gZmFsc2VcclxuXHRcdFx0XHR9LDYxMDAwKVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0c21DYXJfbW92ZSgzLCdXc18wMV8wOCcpXHJcblx0XHRcdFx0fSw1OTAwMClcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdE10QW5pbWF0ZShlLCczX3dhZl96aHVhXzEnLCdlcW1fd2FmXzAwNl8xMDFfYycpXHJcblx0XHRcdFx0fSw2MjAwMClcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdHNtQ2FyX21vdmUoMywnQ182MDBfMDFfMDVfZXFtX3dhZl8wMDNfMjRfYicpXHJcblx0XHRcdFx0fSw2NjAwMClcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdE10QW5pbWF0ZShlLCczX2JvYXRfZmFuZ18yJywnZXFtX3dhZl8wMDZfMTAxX2MnLCdDXzYwMF8wMV8wNV9lcW1fd2FmXzAwM18yNF9iJywyKVxyXG5cdFx0XHRcdH0sNjkwMDApXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0bGV0IHRpbWVfbmV3ID0gNzIwMDBcclxuXHRcdFx0XHRmb3IobGV0IGkgPSAwO2k8MTAwMDtpKyspe1xyXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNtQ2FyX21vdmUoMywnQ182MDBfMDNfMDVfZXFtX3dhZl8wMDNfMjRfYicpXHJcblx0XHRcdFx0XHR9LHRpbWVfbmV3KVxyXG5cdFx0XHRcdFx0dGltZV9uZXcgKz0gMzAwMFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0TXRBbmltYXRlKGUsJzNfYm9hdF96aHVhXzEnLCdlcW1fd2FmXzAwNl8xMDI2X2MnKVxyXG5cdFx0XHRcdFx0fSx0aW1lX25ldylcclxuXHRcdFx0XHRcdHRpbWVfbmV3ICs9IDQwMDBcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNtQ2FyX21vdmUoMywnV3NfMDJfMDgnKVxyXG5cdFx0XHRcdFx0fSx0aW1lX25ldylcclxuXHRcdFx0XHRcdHRpbWVfbmV3ICs9IDMwMDBcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdE10QW5pbWF0ZShlLCczX3dhZl9mYW5nXzEnLCdlcW1fd2FmXzAwNl8xMDI2X2MnLCdXc18wMl8wOCcpXHJcblx0XHRcdFx0XHR9LHRpbWVfbmV3KVxyXG5cdFx0XHRcdFx0dGltZV9uZXcgKz0gNDAwMFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0TXRBbmltYXRlKGUsJzNfd2FmX3podWFfMScsJ2VxbV93YWZfMDA2XzEwMjZfYycpXHJcblx0XHRcdFx0XHR9LHRpbWVfbmV3KVxyXG5cdFx0XHRcdFx0dGltZV9uZXcgKz0gNDAwMFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0c21DYXJfbW92ZSgzLCdDXzYwMF8wM18wNV9lcW1fd2FmXzAwM18yNF9iJylcclxuXHRcdFx0XHRcdH0sdGltZV9uZXcpXHJcblx0XHRcdFx0XHR0aW1lX25ldyArPSAzMDAwXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRNdEFuaW1hdGUoZSwnM19ib2F0X2ZhbmdfMScsJ2VxbV93YWZfMDA2XzEwMjZfYycsJ0NfNjAwXzAzXzA1X2VxbV93YWZfMDAzXzI0X2InKVxyXG5cdFx0XHRcdFx0fSx0aW1lX25ldylcclxuXHRcdFx0XHRcdHRpbWVfbmV3ICs9IDQwMDBcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdC8v5aSn6L2m6L+Q5YqoICBuYW1lOjEj5qGl5ZCKICBlbmRfYnfvvJrnm67moIfotJ3kvY1cclxuXHRcdFx0ZnVuY3Rpb24gYmlnQ2FyX21vdmUobmFtZSxlbmRfYncpe1xyXG5cdFx0XHRcdGxldCBxaWFvZGlhb19uZXcgPSBzY2VuZS5nZXRPYmplY3RCeU5hbWUoYHFpYW9kaWFvXyR7bmFtZX1gKTtcclxuXHRcdFx0XHRsZXQgcWlhb2RpYW9femh1YXF1X25ldyA9IHNjZW5lLmdldE9iamVjdEJ5TmFtZShgcWlhb2RpYW9femh1YXF1XyR7bmFtZX1gKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRsZXQgYndfd29ybGRfcG9zID0gcmV0dXJuV29ybGRQb3NCeU5hbWUoZW5kX2J3KTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHR0d2VlbkFuaW1hdGVYKHFpYW9kaWFvX25ldy5wb3NpdGlvbixid193b3JsZF9wb3MsMzAwMClcclxuXHRcdFx0XHR0d2VlbkFuaW1hdGVYKHFpYW9kaWFvX3podWFxdV9uZXcucG9zaXRpb24sYndfd29ybGRfcG9zLDMwMDApXHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHQvL+Wwj+i9pui/kOWKqCAgbmFtZToxI+ahpeWQiiAgZW5kX2J377ya55uu5qCH6LSd5L2NXHJcblx0XHRcdGZ1bmN0aW9uIHNtQ2FyX21vdmUobmFtZSxlbmRfYncpe1xyXG5cdFx0XHRcdGxldCBxaWFvZGlhb196aHVhcXVfbmV3ID0gc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKGBxaWFvZGlhb196aHVhcXVfJHtuYW1lfWApO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGxldCBid193b3JsZF9wb3MgPSByZXR1cm5Xb3JsZFBvc0J5TmFtZShlbmRfYncpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGJ3X3dvcmxkX3Bvcy56ICs9IDEuNTVcclxuXHRcdFx0XHR0d2VlbkFuaW1hdGVaKHFpYW9kaWFvX3podWFxdV9uZXcucG9zaXRpb24sYndfd29ybGRfcG9zLDMwMDApXHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdC8v5Yqo55S7ICBhbmltYXRlTmFtZSDpnIDopoHmiafooYznmoTliqjnlLvlkI3np7AgIGJveF9pZCDnrrHlrZDnmoRpZCAgZW5kX2J3IOebruagh+i0neS9jVxyXG5cdFx0XHRmdW5jdGlvbiBNdEFuaW1hdGUob2JqZWN0LGFuaW1hdGVOYW1lLGJveF9pZCxlbmRfYncsbGF5ZXIpIHtcclxuXHRcdFx0XHRsZXQgbWl4ZXIgPSBuZXcgVEhSRUUuQW5pbWF0aW9uTWl4ZXIob2JqZWN0LnNjZW5lKTsgLy/liqjnlLvmkq3mlL7lmahcclxuXHRcdFx0XHRtaXhlcnMucHVzaChtaXhlcilcclxuXHRcdFx0XHRmb3IobGV0IGU9MDtlPG9iamVjdC5hbmltYXRpb25zLmxlbmd0aDtlKyspe1xyXG5cdFx0XHRcdFx0aWYob2JqZWN0LmFuaW1hdGlvbnNbZV0ubmFtZS5pbmNsdWRlcyhhbmltYXRlTmFtZSkpe1xyXG5cdFx0XHRcdFx0XHRhY3Rpb25zLnB1c2gobWl4ZXIuY2xpcEFjdGlvbihvYmplY3QuYW5pbWF0aW9uc1tlXSkpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKGFjdGlvbnMhPW51bGwgJiYgYWN0aW9ucy5sZW5ndGg+MCl7XHJcblx0XHRcdFx0XHRhY3Rpb25zLm1hcCgoaykgPT4ge1xyXG5cdFx0XHRcdFx0XHRrLnBsYXkoKVxyXG5cdFx0XHRcdFx0XHRrLmxvb3AgPSBUSFJFRS5Mb29wT25jZTtcclxuXHRcdFx0XHRcdFx0ay5jbGFtcFdoZW5GaW5pc2hlZCA9IHRydWU7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZihpc0VtcHR5KGVuZF9idykpe1xyXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNjZW5lLmdldE9iamVjdEJ5TmFtZShib3hfaWQpLnZpc2libGUgPSBmYWxzZVxyXG5cdFx0XHRcdFx0fSwyNzAwKVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRsZXQgYndfd29ybGRfcG9zID0gcmV0dXJuV29ybGRQb3NCeU5hbWUoZW5kX2J3KTtcclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRsZXQgYm94X25ldyA9IHNjZW5lLmdldE9iamVjdEJ5TmFtZShib3hfaWQpXHJcblx0XHRcdFx0XHRcdGJveF9uZXcucG9zaXRpb24ueCA9IGJ3X3dvcmxkX3Bvcy54XHJcblx0XHRcdFx0XHRcdGlmKCFpc0VtcHR5KGxheWVyKSl7XHJcblx0XHRcdFx0XHRcdFx0aWYobGF5ZXIgPT0nMicpe1xyXG5cdFx0XHRcdFx0XHRcdFx0Ym94X25ldy5wb3NpdGlvbi55ID0gYndfd29ybGRfcG9zLnkgKyAyLjVcclxuXHRcdFx0XHRcdFx0XHR9ZWxzZSBpZihsYXllciA9PScwLjUnKXtcclxuXHRcdFx0XHRcdFx0XHRcdGJveF9uZXcucG9zaXRpb24ueSA9IGJ3X3dvcmxkX3Bvcy55ICsgMS40XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9ZWxzZXsgLy8y5bGCXHJcblx0XHRcdFx0XHRcdFx0Ym94X25ldy5wb3NpdGlvbi55ID0gYndfd29ybGRfcG9zLnlcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRib3hfbmV3LnBvc2l0aW9uLnogPSBid193b3JsZF9wb3MuelxyXG5cdFx0XHRcdFx0XHRib3hfbmV3LnZpc2libGUgPSB0cnVlXHJcblx0XHRcdFx0XHR9LDE1MDApXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFxyXG5cdFx0XHR9XHJcblx0XHRcdC8qIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xyXG5cdFx0XHRcdGlmIChlLmtleUNvZGUgPT0gNjUpIHtcclxuXHRcdFx0XHRcdGFjdGlvbnMubWFwKChrKSA9PiB7XHJcblx0XHRcdFx0XHRcdGsucmVzZXQoKVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pICovXHJcblx0XHRcdFxyXG5cdFx0XHRmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcclxuXHRcdFx0XHRjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblx0XHRcdFx0Y2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHRcdFx0XHRyZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gcmF5QnJlYXRoaW5nKCkge1xyXG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmF5KTtcclxuXHJcblx0XHRcdFx0ZnVuY3Rpb24gcmF5KCkge1xyXG5cdFx0XHRcdFx0dmFyIFN4ID0gZXZlbnQuY2xpZW50WDsgLy/pvKDmoIfljZXlh7vkvY3nva7mqKrlnZDmoIdcclxuXHRcdFx0XHRcdHZhciBTeSA9IGV2ZW50LmNsaWVudFk7IC8v6byg5qCH5Y2V5Ye75L2N572u57q15Z2Q5qCHXHJcblx0XHRcdFx0XHQvL+Wxj+W5leWdkOagh+i9rOagh+WHhuiuvuWkh+WdkOagh1xyXG5cdFx0XHRcdFx0dmFyIHggPSAoU3ggLyB3aW5kb3cuaW5uZXJXaWR0aCkgKiAyIC0gMTsgLy/moIflh4borr7lpIfmqKrlnZDmoIdcclxuXHRcdFx0XHRcdHZhciB5ID0gLShTeSAvIHdpbmRvdy5pbm5lckhlaWdodCkgKiAyICsgMTsgLy/moIflh4borr7lpIfnurXlnZDmoIdcclxuXHRcdFx0XHRcdHZhciBzdGFuZGFyZFZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKHgsIHksIDAuNSk7IC8v5qCH5YeG6K6+5aSH5Z2Q5qCHXHJcblx0XHRcdFx0XHQvL+agh+WHhuiuvuWkh+WdkOagh+i9rOS4lueVjOWdkOagh1xyXG5cdFx0XHRcdFx0dmFyIHdvcmxkVmVjdG9yID0gc3RhbmRhcmRWZWN0b3IudW5wcm9qZWN0KGNhbWVyYSk7XHJcblx0XHRcdFx0XHQvL+WwhOe6v+aKleWwhOaWueWQkeWNleS9jeWQkemHjyh3b3JsZFZlY3RvcuWdkOagh+WHj+ebuOacuuS9jee9ruWdkOaghylcclxuXHRcdFx0XHRcdHZhciByYXkgPSB3b3JsZFZlY3Rvci5zdWIoY2FtZXJhLnBvc2l0aW9uKS5ub3JtYWxpemUoKTtcclxuXHRcdFx0XHRcdC8v5Yib5bu65bCE57q/5oqV5bCE5Zmo5a+56LGhXHJcblx0XHRcdFx0XHR2YXIgcmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcihjYW1lcmEucG9zaXRpb24sIHJheSk7XHJcblx0XHRcdFx0XHQvL+i/lOWbnuWwhOe6v+mAieS4reeahOWvueixoVxyXG5cdFx0XHRcdFx0dmFyIGludGVyc2VjdHMgPSByYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyhCcGxhY2UsIHRydWUpOyAvL0JwbGFjZVxyXG5cclxuXHRcdFx0XHRcdGlmIChpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdFx0XHRcdGxldCBib25lID0gaW50ZXJzZWN0c1swXVxyXG5cclxuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhib25lLnBvaW50KVxyXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKGBuZXcgVEhSRUUuVmVjdG9yMygke2JvbmUucG9pbnQueH0sJHtib25lLnBvaW50Lnl9LCR7Ym9uZS5wb2ludC56fSlgKVxyXG5cclxuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhib25lLm9iamVjdClcclxuXHJcblxyXG5cdFx0XHRcdFx0XHQvL2lmKG1vdmVOYW1lLmluY2x1ZGVzKGJvbmUub2JqZWN0Lm5hbWUpKSB7XHJcblx0XHRcdFx0XHRcdC8vfVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHRmdW5jdGlvbiBJbml0ZXZNYXBzKCkge1xyXG5cdFx0XHRcdHZhciBjdWJlVGV4dHVyZUxvYWRlciA9IG5ldyBUSFJFRS5DdWJlVGV4dHVyZUxvYWRlcigpO1xyXG5cdFx0XHRcdGN1YmVUZXh0dXJlTG9hZGVyLnNldFBhdGgoJy4vc2t5Ym94LycpO1xyXG5cdFx0XHRcdHZhciBjdWJlVGV4dHVyZSA9IGN1YmVUZXh0dXJlTG9hZGVyLmxvYWQoW1xyXG5cdFx0XHRcdFx0J3B4LmpwZycsICdueC5qcGcnLFxyXG5cdFx0XHRcdFx0J3B5LmpwZycsICdueS5qcGcnLFxyXG5cdFx0XHRcdFx0J3B6LmpwZycsICduei5qcGcnLFxyXG5cdFx0XHRcdF0pO1xyXG5cdFx0XHRcdHNjZW5lLmJhY2tncm91bmQgPSBjdWJlVGV4dHVyZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gYW5pbWF0ZSgpIHtcclxuXHRcdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcblx0XHRcdFx0cmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xyXG5cdFx0XHRcdHdhdGVyLm1hdGVyaWFsLnVuaWZvcm1zLnRpbWUudmFsdWUgKz0gMS4wIC8gNjAuMDtcclxuXHRcdFx0XHR2YXIgZGVsdGEgPSBjbG9jay5nZXREZWx0YSgpO1xyXG5cdFx0XHRcdGlmIChtaXhlcnMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRtaXhlcnMubWFwKChrKSA9PiB7XHJcblx0XHRcdFx0XHRcdGsudXBkYXRlKGRlbHRhKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFRXRUVOLnVwZGF0ZSgpO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0Ly/liKTmlq3lrZfnrKbmmK/lkKbkuLrnqbrnmoTmlrnms5VcclxuXHRcdFx0ZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIG9iaiA9PSBcInVuZGVmaW5lZFwiIHx8IG9iaiA9PSBudWxsIHx8IG9iaiA9PSBcIlwiKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly/ojrflj5bmn5DniankvZPnmoTkuJbnlYzlnZDmoIdcclxuXHRcdFx0ZnVuY3Rpb24gcmV0dXJuV29ybGRQb3NCeU5hbWUobmFtZSkge1xyXG5cdFx0XHRcdGxldCBvYmogPSBzY2VuZS5nZXRPYmplY3RCeU5hbWUobmFtZSk7XHJcblx0XHRcdFx0bGV0IG9ial93b3JsZF9wb3MgPSBvYmouZ2V0V29ybGRQb3NpdGlvbihuZXcgVEhSRUUuVmVjdG9yMygpKVxyXG5cdFx0XHRcdHJldHVybiBvYmpfd29ybGRfcG9zO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvL+i/lOWbnuiIueeahOexu+Wei1xyXG5cdFx0XHRmdW5jdGlvbiByZW50dXJuQm9hdFR5cGUoYm9hdF90eXBlKXtcclxuXHRcdFx0XHRsZXQgYm9hdF9zdGFydE5hbWU7XHJcblx0XHRcdFx0aWYgKGJvYXRfdHlwZSA9PSAnMScpIHtcclxuXHRcdFx0XHRcdGJvYXRfc3RhcnROYW1lID0gJ0NfMzYwJ1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoYm9hdF90eXBlID09ICcyJykge1xyXG5cdFx0XHRcdFx0Ym9hdF9zdGFydE5hbWUgPSAnQ181MDAnXHJcblx0XHRcdFx0fSBlbHNlIGlmIChib2F0X3R5cGUgPT0gJzMnKSB7XHJcblx0XHRcdFx0XHRib2F0X3N0YXJ0TmFtZSA9ICdDXzYwMCdcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGJvYXRfc3RhcnROYW1lXHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0Ly/liJvlu7pjYW52YXPotLTlm75cclxuXHRcdFx0ZnVuY3Rpb24gY3JlYXRlVGV4dHVyZSh0eHQpIHtcclxuXHRcdFx0XHRsZXQgdGlwcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG5cdFx0XHRcdHRpcHMud2lkdGggPSAyNTY7XHJcblx0XHRcdFx0dGlwcy5oZWlnaHQgPSAyNTY7XHJcblx0XHRcdFx0bGV0IHRpcHNUZXh0dXJlID0gdGlwcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cdFx0XHRcdHRpcHNUZXh0dXJlLmxpbmVXaWR0aCA9ICc0cHgnXHJcblx0XHRcdFx0dGlwc1RleHR1cmUuc3Ryb2tlU3R5bGUgPSAnI2ZmZidcclxuXHRcdFx0XHR0aXBzVGV4dHVyZS5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwLjUpJztcclxuXHRcdFx0XHR0aXBzVGV4dHVyZS5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHJcblx0XHRcdFx0dGlwc1RleHR1cmUubW92ZVRvKDQwLCAwKTtcclxuXHRcdFx0XHR0aXBzVGV4dHVyZS5saW5lVG8oMjUwLCAwKTtcclxuXHRcdFx0XHR0aXBzVGV4dHVyZS5saW5lVG8oMjUwLCAxNjApO1xyXG5cdFx0XHRcdHRpcHNUZXh0dXJlLmxpbmVUbygyMDAsIDIwMCk7XHJcblx0XHRcdFx0dGlwc1RleHR1cmUubGluZVRvKDAsIDIwMCk7XHJcblx0XHRcdFx0dGlwc1RleHR1cmUubGluZVRvKDAsIDQwKTtcclxuXHRcdFx0XHR0aXBzVGV4dHVyZS5tb3ZlVG8oMjAsIDQwKTtcclxuXHRcdFx0XHR0aXBzVGV4dHVyZS5saW5lVG8oMTgwLCA0MClcclxuXHRcdFx0XHR0aXBzVGV4dHVyZS5jbG9zZVBhdGgoKTtcclxuXHRcdFx0XHR0aXBzVGV4dHVyZS5zdHJva2UoKVxyXG5cdFx0XHRcdHRpcHNUZXh0dXJlLmZpbGwoKVxyXG5cdFx0XHRcdHRpcHNUZXh0dXJlLmZvbnQgPSAnMzBweCBhcmlhbCc7XHJcblx0XHRcdFx0dGlwc1RleHR1cmUuZmlsbFN0eWxlID0gXCIjZmZmXCI7XHJcblx0XHRcdFx0dGlwc1RleHR1cmUuZmlsbFRleHQodHh0LCAzMCwgMTAwKTtcclxuXHRcdFx0XHRsZXQgdGV4dXJlQ2FudmFzID0gbmV3IFRIUkVFLkNhbnZhc1RleHR1cmUodGlwcylcclxuXHRcdFx0XHRyZXR1cm4gdGV4dXJlQ2FudmFzO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0Ly946L2057yT5YqoXHJcblx0XHRcdGZ1bmN0aW9uIHR3ZWVuQW5pbWF0ZVgob2JqX3dvcmxkX3Bvcyxid193b3JsZF9wb3MsdGltZSl7XHJcblx0XHRcdFx0bGV0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9ial93b3JsZF9wb3MpXHJcblx0XHRcdFx0LnRvKHtcclxuXHRcdFx0XHRcdHg6IGJ3X3dvcmxkX3Bvcy54XHJcblx0XHRcdFx0fSwgdGltZSlcclxuXHRcdFx0XHQuZWFzaW5nKFRXRUVOLkVhc2luZy5TaW51c29pZGFsLkluT3V0KVxyXG5cdFx0XHRcdC5zdGFydCgpXHJcblx0XHRcdFx0Lm9uVXBkYXRlKCgpID0+IHtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly966L2057yT5YqoXHJcblx0XHRcdGZ1bmN0aW9uIHR3ZWVuQW5pbWF0ZVoob2JqX3dvcmxkX3Bvcyxid193b3JsZF9wb3MsdGltZSl7XHJcblx0XHRcdFx0bGV0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9ial93b3JsZF9wb3MpXHJcblx0XHRcdFx0LnRvKHtcclxuXHRcdFx0XHRcdHo6IGJ3X3dvcmxkX3Bvcy56XHJcblx0XHRcdFx0fSwgdGltZSlcclxuXHRcdFx0XHQuZWFzaW5nKFRXRUVOLkVhc2luZy5TaW51c29pZGFsLkluT3V0KVxyXG5cdFx0XHRcdC5zdGFydCgpXHJcblx0XHRcdFx0Lm9uVXBkYXRlKCgpID0+IHtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHQiXSwic291cmNlUm9vdCI6IiJ9